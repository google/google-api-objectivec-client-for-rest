// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Recommender API (recommender/v1)
// Documentation:
//   https://cloud.google.com/recommender/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRRecommenderObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Recommender query classes.
 */
@interface GTLRRecommenderQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  Method: recommender.billingAccounts.locations.insightTypes.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the InsightTypeConfig to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  @param name Required. Name of the InsightTypeConfig to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  Method: recommender.billingAccounts.locations.insightTypes.insights.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsGet : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  Method: recommender.billingAccounts.locations.insightTypes.insights.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsList : GTLRRecommenderQuery

/**
 *  Optional. Filter expression to restrict the insights returned. Supported
 *  filter fields: * `stateInfo.state` * `insightSubtype` * `severity` Examples:
 *  * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity =
 *  HIGH` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity =
 *  HIGH)` (These expressions are based on the filter language described at
 *  https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *  supported insight types:
 *  https://cloud.google.com/recommender/docs/insights/insight-types.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1ListInsightsResponse.
 *
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *    supported insight types:
 *    https://cloud.google.com/recommender/docs/insights/insight-types.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  Method: recommender.billingAccounts.locations.insightTypes.insights.markAccepted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsMarkAccepted : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest to
 *    include in the query.
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesInsightsMarkAccepted
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  Method: recommender.billingAccounts.locations.insightTypes.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of insight type config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig to include in
 *    the query.
 *  @param name Name of insight type config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsInsightTypesUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the Recommendation Config to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  @param name Required. Name of the Recommendation Config to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.recommendations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsGet : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.recommendations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsList : GTLRRecommenderQuery

/**
 *  Filter expression to restrict the recommendations returned. Supported filter
 *  fields: * `state_info.state` * `recommenderSubtype` * `priority` Examples: *
 *  `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` *
 *  `priority = P1 OR priority = P2` * `stateInfo.state = ACTIVE AND (priority =
 *  P1 OR priority = P2)` (These expressions are based on the filter language
 *  described at https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported
 *  recommenders: https://cloud.google.com/recommender/docs/recommenders.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRRecommender_GoogleCloudRecommenderV1ListRecommendationsResponse.
 *
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to
 *    supported recommenders:
 *    https://cloud.google.com/recommender/docs/recommenders.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.recommendations.markClaimed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkClaimed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkClaimed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.recommendations.markFailed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkFailed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest to
 *    include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkFailed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.recommendations.markSucceeded
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkSucceeded : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersRecommendationsMarkSucceeded
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  Method: recommender.billingAccounts.locations.recommenders.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_BillingAccountsLocationsRecommendersUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of recommender config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig to include in
 *    the query.
 *  @param name Name of recommender config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 *
 *  @return GTLRRecommenderQuery_BillingAccountsLocationsRecommendersUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  Method: recommender.folders.locations.insightTypes.insights.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsGet : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  Method: recommender.folders.locations.insightTypes.insights.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsList : GTLRRecommenderQuery

/**
 *  Optional. Filter expression to restrict the insights returned. Supported
 *  filter fields: * `stateInfo.state` * `insightSubtype` * `severity` Examples:
 *  * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity =
 *  HIGH` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity =
 *  HIGH)` (These expressions are based on the filter language described at
 *  https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *  supported insight types:
 *  https://cloud.google.com/recommender/docs/insights/insight-types.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1ListInsightsResponse.
 *
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *    supported insight types:
 *    https://cloud.google.com/recommender/docs/insights/insight-types.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  Method: recommender.folders.locations.insightTypes.insights.markAccepted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsMarkAccepted : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest to
 *    include in the query.
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsInsightTypesInsightsMarkAccepted
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.folders.locations.recommenders.recommendations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsGet : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  Method: recommender.folders.locations.recommenders.recommendations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsList : GTLRRecommenderQuery

/**
 *  Filter expression to restrict the recommendations returned. Supported filter
 *  fields: * `state_info.state` * `recommenderSubtype` * `priority` Examples: *
 *  `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` *
 *  `priority = P1 OR priority = P2` * `stateInfo.state = ACTIVE AND (priority =
 *  P1 OR priority = P2)` (These expressions are based on the filter language
 *  described at https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported
 *  recommenders: https://cloud.google.com/recommender/docs/recommenders.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRRecommender_GoogleCloudRecommenderV1ListRecommendationsResponse.
 *
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to
 *    supported recommenders:
 *    https://cloud.google.com/recommender/docs/recommenders.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.folders.locations.recommenders.recommendations.markClaimed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkClaimed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkClaimed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.folders.locations.recommenders.recommendations.markFailed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkFailed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest to
 *    include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkFailed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.folders.locations.recommenders.recommendations.markSucceeded
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkSucceeded : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_FoldersLocationsRecommendersRecommendationsMarkSucceeded
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  Method: recommender.organizations.locations.insightTypes.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsInsightTypesGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the InsightTypeConfig to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  @param name Required. Name of the InsightTypeConfig to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsInsightTypesGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  Method: recommender.organizations.locations.insightTypes.insights.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsGet : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  Method: recommender.organizations.locations.insightTypes.insights.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsList : GTLRRecommenderQuery

/**
 *  Optional. Filter expression to restrict the insights returned. Supported
 *  filter fields: * `stateInfo.state` * `insightSubtype` * `severity` Examples:
 *  * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity =
 *  HIGH` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity =
 *  HIGH)` (These expressions are based on the filter language described at
 *  https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *  supported insight types:
 *  https://cloud.google.com/recommender/docs/insights/insight-types.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1ListInsightsResponse.
 *
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *    supported insight types:
 *    https://cloud.google.com/recommender/docs/insights/insight-types.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  Method: recommender.organizations.locations.insightTypes.insights.markAccepted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsMarkAccepted : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest to
 *    include in the query.
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsInsightTypesInsightsMarkAccepted
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  Method: recommender.organizations.locations.insightTypes.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsInsightTypesUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of insight type config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig to include in
 *    the query.
 *  @param name Name of insight type config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsInsightTypesUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the Recommendation Config to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  @param name Required. Name of the Recommendation Config to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.recommendations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsGet : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.recommendations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsList : GTLRRecommenderQuery

/**
 *  Filter expression to restrict the recommendations returned. Supported filter
 *  fields: * `state_info.state` * `recommenderSubtype` * `priority` Examples: *
 *  `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` *
 *  `priority = P1 OR priority = P2` * `stateInfo.state = ACTIVE AND (priority =
 *  P1 OR priority = P2)` (These expressions are based on the filter language
 *  described at https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported
 *  recommenders: https://cloud.google.com/recommender/docs/recommenders.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRRecommender_GoogleCloudRecommenderV1ListRecommendationsResponse.
 *
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to
 *    supported recommenders:
 *    https://cloud.google.com/recommender/docs/recommenders.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.recommendations.markClaimed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkClaimed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkClaimed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.recommendations.markFailed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkFailed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest to
 *    include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkFailed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.organizations.locations.recommenders.recommendations.markSucceeded
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkSucceeded : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersRecommendationsMarkSucceeded
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  Method: recommender.organizations.locations.recommenders.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_OrganizationsLocationsRecommendersUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of recommender config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig to include in
 *    the query.
 *  @param name Name of recommender config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 *
 *  @return GTLRRecommenderQuery_OrganizationsLocationsRecommendersUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  Method: recommender.projects.locations.insightTypes.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsInsightTypesGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the InsightTypeConfig to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Gets the requested InsightTypeConfig. There is only one instance of the
 *  config for each InsightType.
 *
 *  @param name Required. Name of the InsightTypeConfig to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config`
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsInsightTypesGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  Method: recommender.projects.locations.insightTypes.insights.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsGet : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Gets the requested insight. Requires the recommender.*.get IAM permission
 *  for the specified insight type.
 *
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  Method: recommender.projects.locations.insightTypes.insights.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsList : GTLRRecommenderQuery

/**
 *  Optional. Filter expression to restrict the insights returned. Supported
 *  filter fields: * `stateInfo.state` * `insightSubtype` * `severity` Examples:
 *  * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity =
 *  HIGH` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity =
 *  HIGH)` (These expressions are based on the filter language described at
 *  https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *  supported insight types:
 *  https://cloud.google.com/recommender/docs/insights/insight-types.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1ListInsightsResponse.
 *
 *  Lists insights for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified insight type.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to
 *    supported insight types:
 *    https://cloud.google.com/recommender/docs/insights/insight-types.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  Method: recommender.projects.locations.insightTypes.insights.markAccepted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsMarkAccepted : GTLRRecommenderQuery

/** Required. Name of the insight. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Insight.
 *
 *  Marks the Insight State as Accepted. Users can use this method to indicate
 *  to the Recommender API that they have applied some action based on the
 *  insight. This stops the insight content from being updated.
 *  MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the
 *  recommender.*.update IAM permission for the specified insight.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest to
 *    include in the query.
 *  @param name Required. Name of the insight.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsInsightTypesInsightsMarkAccepted
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkInsightAcceptedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  Method: recommender.projects.locations.insightTypes.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsInsightTypesUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of insight type config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig.
 *
 *  Updates an InsightTypeConfig change. This will create a new revision of the
 *  config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig to include in
 *    the query.
 *  @param name Name of insight type config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsInsightTypesUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1InsightTypeConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  Method: recommender.projects.locations.recommenders.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersGetConfig : GTLRRecommenderQuery

/**
 *  Required. Name of the Recommendation Config to get. Acceptable formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Gets the requested Recommender Config. There is only one instance of the
 *  config for each Recommender.
 *
 *  @param name Required. Name of the Recommendation Config to get. Acceptable
 *    formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.projects.locations.recommenders.recommendations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsGet : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Gets the requested recommendation. Requires the recommender.*.get IAM
 *  permission for the specified recommender.
 *
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  Method: recommender.projects.locations.recommenders.recommendations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsList : GTLRRecommenderQuery

/**
 *  Filter expression to restrict the recommendations returned. Supported filter
 *  fields: * `state_info.state` * `recommenderSubtype` * `priority` Examples: *
 *  `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` *
 *  `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` *
 *  `priority = P1 OR priority = P2` * `stateInfo.state = ACTIVE AND (priority =
 *  P1 OR priority = P2)` (These expressions are based on the filter language
 *  described at https://google.aip.dev/160)
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. If not specified, the server will determine
 *  the number of results to return.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, retrieves the next batch of results from the preceding
 *  call to this method. `page_token` must be the value of `next_page_token`
 *  from the previous response. The values of other method parameters must be
 *  identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The container resource on which to execute the request. Acceptable
 *  formats: *
 *  `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  *
 *  `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` *
 *  `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *  LOCATION here refers to GCP Locations:
 *  https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported
 *  recommenders: https://cloud.google.com/recommender/docs/recommenders.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRRecommender_GoogleCloudRecommenderV1ListRecommendationsResponse.
 *
 *  Lists recommendations for the specified Cloud Resource. Requires the
 *  recommender.*.list IAM permission for the specified recommender.
 *
 *  @param parent Required. The container resource on which to execute the
 *    request. Acceptable formats: *
 *    `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    *
 *    `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
 *    LOCATION here refers to GCP Locations:
 *    https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to
 *    supported recommenders:
 *    https://cloud.google.com/recommender/docs/recommenders.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  Method: recommender.projects.locations.recommenders.recommendations.markClaimed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkClaimed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Claimed. Users can use this method to
 *  indicate to the Recommender API that they are starting to apply the
 *  recommendation themselves. This stops the recommendation content from being
 *  updated. Associated insights are frozen and placed in the ACCEPTED state.
 *  MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
 *  SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM
 *  permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkClaimed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationClaimedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.projects.locations.recommenders.recommendations.markFailed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkFailed : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Failed. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation failed. This stops the recommendation content
 *  from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationFailed can be applied to recommendations
 *  in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest to
 *    include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkFailed
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationFailedRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  Method: recommender.projects.locations.recommenders.recommendations.markSucceeded
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkSucceeded : GTLRRecommenderQuery

/** Required. Name of the recommendation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1Recommendation.
 *
 *  Marks the Recommendation State as Succeeded. Users can use this method to
 *  indicate to the Recommender API that they have applied the recommendation
 *  themselves, and the operation was successful. This stops the recommendation
 *  content from being updated. Associated insights are frozen and placed in the
 *  ACCEPTED state. MarkRecommendationSucceeded can be applied to
 *  recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the
 *  recommender.*.update IAM permission for the specified recommender.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest
 *    to include in the query.
 *  @param name Required. Name of the recommendation.
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersRecommendationsMarkSucceeded
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1MarkRecommendationSucceededRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  Method: recommender.projects.locations.recommenders.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeRecommenderCloudPlatform
 */
@interface GTLRRecommenderQuery_ProjectsLocationsRecommendersUpdateConfig : GTLRRecommenderQuery

/**
 *  Name of recommender config. Eg,
 *  projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If true, validate the request and preview the change, but do not actually
 *  update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig.
 *
 *  Updates a Recommender Config. This will create a new revision of the config.
 *
 *  @param object The @c
 *    GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig to include in
 *    the query.
 *  @param name Name of recommender config. Eg,
 *    projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
 *
 *  @return GTLRRecommenderQuery_ProjectsLocationsRecommendersUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRRecommender_GoogleCloudRecommenderV1RecommenderConfig *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
