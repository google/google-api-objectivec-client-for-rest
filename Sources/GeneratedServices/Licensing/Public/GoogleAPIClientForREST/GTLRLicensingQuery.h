// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Enterprise License Manager API (licensing/v1)
// Description:
//   The Google Enterprise License Manager API lets you manage Google Workspace
//   and related licenses for all users of a customer that you manage.
// Documentation:
//   https://developers.google.com/admin-sdk/licensing/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRLicensingObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Licensing query classes.
 */
@interface GTLRLicensingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Revoke a license.
 *
 *  Method: licensing.licenseAssignments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsDelete : GTLRLicensingQuery

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  The user's current primary email address. If the user's email address
 *  changes, use the new email address in your API requests. Since a `userId` is
 *  subject to change, do not use a `userId` value as a key for persistent data.
 *  This key could break if the current user's email address changes. If the
 *  `userId` is suspended, the license status changes.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_Empty.
 *
 *  Revoke a license.
 *
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *  @param userId The user's current primary email address. If the user's email
 *    address changes, use the new email address in your API requests. Since a
 *    `userId` is subject to change, do not use a `userId` value as a key for
 *    persistent data. This key could break if the current user's email address
 *    changes. If the `userId` is suspended, the license status changes.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsDelete
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                            userId:(NSString *)userId;

@end

/**
 *  Get a specific user's license by product SKU.
 *
 *  Method: licensing.licenseAssignments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsGet : GTLRLicensingQuery

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  The user's current primary email address. If the user's email address
 *  changes, use the new email address in your API requests. Since a `userId` is
 *  subject to change, do not use a `userId` value as a key for persistent data.
 *  This key could break if the current user's email address changes. If the
 *  `userId` is suspended, the license status changes.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Get a specific user's license by product SKU.
 *
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *  @param userId The user's current primary email address. If the user's email
 *    address changes, use the new email address in your API requests. Since a
 *    `userId` is subject to change, do not use a `userId` value as a key for
 *    persistent data. This key could break if the current user's email address
 *    changes. If the `userId` is suspended, the license status changes.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsGet
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                            userId:(NSString *)userId;

@end

/**
 *  Assign a license.
 *
 *  Method: licensing.licenseAssignments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsInsert : GTLRLicensingQuery

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Assign a license.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignmentInsert to include in the
 *    query.
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsInsert
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignmentInsert *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId;

@end

/**
 *  List all users assigned licenses for a specific product SKU.
 *
 *  Method: licensing.licenseAssignments.listForProduct
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsListForProduct : GTLRLicensingQuery

/**
 *  The customer's unique ID as defined in the Admin console, such as
 *  `C00000000`. If the customer is suspended, the server returns an error.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The `maxResults` query string determines how many entries are returned on
 *  each page of a large response. This is an optional parameter. The value must
 *  be a positive number.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Token to fetch the next page of data. The `maxResults` query string is
 *  related to the `pageToken` since `maxResults` determines how many entries
 *  are returned on each page. This is an optional query string. If not
 *  specified, the server returns the first page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignmentList.
 *
 *  List all users assigned licenses for a specific product SKU.
 *
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param customerId The customer's unique ID as defined in the Admin console,
 *    such as `C00000000`. If the customer is suspended, the server returns an
 *    error.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsListForProduct
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                        customerId:(NSString *)customerId;

@end

/**
 *  List all users assigned licenses for a specific product SKU.
 *
 *  Method: licensing.licenseAssignments.listForProductAndSku
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsListForProductAndSku : GTLRLicensingQuery

/**
 *  The customer's unique ID as defined in the Admin console, such as
 *  `C00000000`. If the customer is suspended, the server returns an error.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The `maxResults` query string determines how many entries are returned on
 *  each page of a large response. This is an optional parameter. The value must
 *  be a positive number.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Token to fetch the next page of data. The `maxResults` query string is
 *  related to the `pageToken` since `maxResults` determines how many entries
 *  are returned on each page. This is an optional query string. If not
 *  specified, the server returns the first page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignmentList.
 *
 *  List all users assigned licenses for a specific product SKU.
 *
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *  @param customerId The customer's unique ID as defined in the Admin console,
 *    such as `C00000000`. If the customer is suspended, the server returns an
 *    error.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsListForProductAndSku
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProductId:(NSString *)productId
                             skuId:(NSString *)skuId
                        customerId:(NSString *)customerId;

@end

/**
 *  Reassign a user's product SKU with a different SKU in the same product. This
 *  method supports patch semantics.
 *
 *  Method: licensing.licenseAssignments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsPatch : GTLRLicensingQuery

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  The user's current primary email address. If the user's email address
 *  changes, use the new email address in your API requests. Since a `userId` is
 *  subject to change, do not use a `userId` value as a key for persistent data.
 *  This key could break if the current user's email address changes. If the
 *  `userId` is suspended, the license status changes.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Reassign a user's product SKU with a different SKU in the same product. This
 *  method supports patch semantics.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignment to include in the
 *    query.
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *  @param userId The user's current primary email address. If the user's email
 *    address changes, use the new email address in your API requests. Since a
 *    `userId` is subject to change, do not use a `userId` value as a key for
 *    persistent data. This key could break if the current user's email address
 *    changes. If the `userId` is suspended, the license status changes.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsPatch
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignment *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId
                         userId:(NSString *)userId;

@end

/**
 *  Reassign a user's product SKU with a different SKU in the same product.
 *
 *  Method: licensing.licenseAssignments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLicensingAppsLicensing
 */
@interface GTLRLicensingQuery_LicenseAssignmentsUpdate : GTLRLicensingQuery

/**
 *  A product's unique identifier. For more information about products in this
 *  version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  A product SKU's unique identifier. For more information about available SKUs
 *  in this version of the API, see Products and SKUs.
 */
@property(nonatomic, copy, nullable) NSString *skuId;

/**
 *  The user's current primary email address. If the user's email address
 *  changes, use the new email address in your API requests. Since a `userId` is
 *  subject to change, do not use a `userId` value as a key for persistent data.
 *  This key could break if the current user's email address changes. If the
 *  `userId` is suspended, the license status changes.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRLicensing_LicenseAssignment.
 *
 *  Reassign a user's product SKU with a different SKU in the same product.
 *
 *  @param object The @c GTLRLicensing_LicenseAssignment to include in the
 *    query.
 *  @param productId A product's unique identifier. For more information about
 *    products in this version of the API, see Products and SKUs.
 *  @param skuId A product SKU's unique identifier. For more information about
 *    available SKUs in this version of the API, see Products and SKUs.
 *  @param userId The user's current primary email address. If the user's email
 *    address changes, use the new email address in your API requests. Since a
 *    `userId` is subject to change, do not use a `userId` value as a key for
 *    persistent data. This key could break if the current user's email address
 *    changes. If the `userId` is suspended, the license status changes.
 *
 *  @return GTLRLicensingQuery_LicenseAssignmentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLicensing_LicenseAssignment *)object
                      productId:(NSString *)productId
                          skuId:(NSString *)skuId
                         userId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
