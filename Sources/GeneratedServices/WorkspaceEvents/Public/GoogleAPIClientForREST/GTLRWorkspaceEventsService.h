// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Workspace Events API (workspaceevents/v1)
// Description:
//   The Google Workspace Events API lets you subscribe to events and manage
//   change notifications across Google Workspace applications.
// Documentation:
//   https://developers.google.com/workspace/events

#import <GoogleAPIClientForREST/GTLRService.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Authorization scopes

/**
 *  Authorization scope: Private Service:
 *  https://www.googleapis.com/auth/chat.bot
 *
 *  Value "https://www.googleapis.com/auth/chat.bot"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatBot;
/**
 *  Authorization scope: View, add, and remove members from conversations in
 *  Google Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.memberships"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMemberships;
/**
 *  Authorization scope: View members in Google Chat conversations.
 *
 *  Value "https://www.googleapis.com/auth/chat.memberships.readonly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMembershipsReadonly;
/**
 *  Authorization scope: View, compose, send, update, and delete messages, and
 *  add, view, and delete reactions to messages.
 *
 *  Value "https://www.googleapis.com/auth/chat.messages"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMessages;
/**
 *  Authorization scope: View, add, and delete reactions to messages in Google
 *  Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.messages.reactions"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMessagesReactions;
/**
 *  Authorization scope: View reactions to messages in Google Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.messages.reactions.readonly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMessagesReactionsReadonly;
/**
 *  Authorization scope: View messages and reactions in Google Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.messages.readonly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatMessagesReadonly;
/**
 *  Authorization scope: Create conversations and spaces and see or edit
 *  metadata (including history settings and access settings) in Google Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.spaces"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatSpaces;
/**
 *  Authorization scope: View chat and spaces in Google Chat
 *
 *  Value "https://www.googleapis.com/auth/chat.spaces.readonly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAuthScopeWorkspaceEventsChatSpacesReadonly;

// ----------------------------------------------------------------------------
//   GTLRWorkspaceEventsService
//

/**
 *  Service for executing Google Workspace Events API queries.
 *
 *  The Google Workspace Events API lets you subscribe to events and manage
 *  change notifications across Google Workspace applications.
 */
@interface GTLRWorkspaceEventsService : GTLRService

// No new methods

// Clients should create a standard query with any of the class methods in
// GTLRWorkspaceEventsQuery.h. The query can the be sent with GTLRService's
// execute methods,
//
//   - (GTLRServiceTicket *)executeQuery:(GTLRQuery *)query
//                     completionHandler:(void (^)(GTLRServiceTicket *ticket,
//                                                 id object, NSError *error))handler;
// or
//   - (GTLRServiceTicket *)executeQuery:(GTLRQuery *)query
//                              delegate:(id)delegate
//                     didFinishSelector:(SEL)finishedSelector;
//
// where finishedSelector has a signature of:
//
//   - (void)serviceTicket:(GTLRServiceTicket *)ticket
//      finishedWithObject:(id)object
//                   error:(NSError *)error;
//
// The object passed to the completion handler or delegate method
// is a subclass of GTLRObject, determined by the query method executed.

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
