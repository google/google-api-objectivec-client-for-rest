// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Workspace Events API (workspaceevents/v1)
// Description:
//   The Google Workspace Events API lets you subscribe to events and manage
//   change notifications across Google Workspace applications.
// Documentation:
//   https://developers.google.com/workspace/events

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRWorkspaceEvents_NotificationEndpoint;
@class GTLRWorkspaceEvents_Operation_Metadata;
@class GTLRWorkspaceEvents_Operation_Response;
@class GTLRWorkspaceEvents_PayloadOptions;
@class GTLRWorkspaceEvents_Status;
@class GTLRWorkspaceEvents_Status_Details_Item;
@class GTLRWorkspaceEvents_Subscription;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRWorkspaceEvents_Subscription.state

/**
 *  The subscription is active and can receive and deliver events to its
 *  notification endpoint.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_State_Active;
/**
 *  The subscription is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_State_Deleted;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_State_StateUnspecified;
/**
 *  The subscription is unable to receive events due to an error. To identify
 *  the error, see the `suspension_reason` field.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_State_Suspended;

// ----------------------------------------------------------------------------
// GTLRWorkspaceEvents_Subscription.suspensionReason

/**
 *  The subscription's notification endpoint doesn't exist, or the endpoint
 *  can't be found in the Google Cloud project where you created the
 *  subscription.
 *
 *  Value: "ENDPOINT_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointNotFound;
/**
 *  The Google Workspace application doesn't have access to deliver events to
 *  your subscription's notification endpoint.
 *
 *  Value: "ENDPOINT_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointPermissionDenied;
/**
 *  The subscription's notification endpoint failed to receive events due to
 *  insufficient quota or reaching rate limiting.
 *
 *  Value: "ENDPOINT_RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointResourceExhausted;
/**
 *  Default value. This value is unused.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_ErrorTypeUnspecified;
/**
 *  An unidentified error has occurred.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_Other;
/**
 *  The target resource for the subscription no longer exists.
 *
 *  Value: "RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_ResourceDeleted;
/**
 *  The user that authorized the creation of the subscription no longer has
 *  access to the subscription's target resource.
 *
 *  Value: "USER_AUTHORIZATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_UserAuthorizationFailure;
/**
 *  The authorizing user has revoked the grant of one or more OAuth scopes. To
 *  learn more about authorization for Google Workspace, see [Configure the
 *  OAuth consent
 *  screen](https://developers.google.com/workspace/guides/configure-oauth-consent#choose-scopes).
 *
 *  Value: "USER_SCOPE_REVOKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkspaceEvents_Subscription_SuspensionReason_UserScopeRevoked;

/**
 *  The response message for SubscriptionsService.ListSubscriptions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subscriptions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWorkspaceEvents_ListSubscriptionsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of subscriptions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkspaceEvents_Subscription *> *subscriptions;

@end


/**
 *  The endpoint where the subscription delivers events.
 */
@interface GTLRWorkspaceEvents_NotificationEndpoint : GTLRObject

/**
 *  Immutable. The Cloud Pub/Sub topic that receives events for the
 *  subscription. Format: `projects/{project}/topics/{topic}` You must create
 *  the topic in the same Google Cloud project where you create this
 *  subscription. When the topic receives events, the events are encoded as
 *  Cloud Pub/Sub messages. For details, see the [Google Cloud Pub/Sub Protocol
 *  Binding for
 *  CloudEvents](https://github.com/googleapis/google-cloudevents/blob/main/docs/spec/pubsub.md).
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopic;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRWorkspaceEvents_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRWorkspaceEvents_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRWorkspaceEvents_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRWorkspaceEvents_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRWorkspaceEvents_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRWorkspaceEvents_Operation_Response : GTLRObject
@end


/**
 *  Options about what data to include in the event payload. Only supported for
 *  Google Chat events.
 */
@interface GTLRWorkspaceEvents_PayloadOptions : GTLRObject

/**
 *  Optional. If `include_resource` is set to `true`, the list of fields to
 *  include in the event payload. Separate fields with a comma. For example, to
 *  include a Google Chat message's sender and create time, enter
 *  `message.sender,message.createTime`. If omitted, the payload includes all
 *  fields for the resource. If you specify a field that doesn't exist for the
 *  resource, the system ignores the field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Optional. Whether the event payload includes data about the resource that
 *  changed. For example, for an event where a Google Chat message was created,
 *  whether the payload contains data about the
 *  [`Message`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages)
 *  resource. If false, the event payload only includes the name of the changed
 *  resource.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeResource;

@end


/**
 *  The request message for SubscriptionsService.ReactivateSubscription.
 */
@interface GTLRWorkspaceEvents_ReactivateSubscriptionRequest : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRWorkspaceEvents_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkspaceEvents_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRWorkspaceEvents_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRWorkspaceEvents_Status_Details_Item : GTLRObject
@end


/**
 *  [Developer Preview](https://developers.google.com/workspace/preview). A
 *  subscription to receive events about a Google Workspace resource. To learn
 *  more about subscriptions, see the [Google Workspace Events API
 *  overview](https://developers.google.com/workspace/events).
 */
@interface GTLRWorkspaceEvents_Subscription : GTLRObject

/**
 *  Output only. The user who authorized the creation of the subscription.
 *  Format: `users/{user}` For Google Workspace users, the `{user}` value is the
 *  [`user.id`](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids)
 *  field from the Directory API.
 */
@property(nonatomic, copy, nullable) NSString *authority;

/** Output only. The time when the subscription is created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and might be sent on update requests to ensure the client has
 *  an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. Immutable. Unordered list. Input for creating a subscription.
 *  Otherwise, output only. One or more types of events to receive about the
 *  target resource. Formatted according to the CloudEvents specification. The
 *  supported event types depend on the target resource of your subscription.
 *  For details, see [Supported Google Workspace
 *  events](https://developers.google.com/workspace/events/guides#supported-events).
 *  By default, you also receive events about the [lifecycle of your
 *  subscription](https://developers.google.com/workspace/events/guides/events-lifecycle).
 *  You don't need to specify lifecycle events for this field. If you specify an
 *  event type that doesn't exist for the target resource, the request returns
 *  an HTTP `400 Bad Request` status code.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *eventTypes;

/**
 *  Non-empty default. The timestamp in UTC when the subscription expires.
 *  Always displayed on output, regardless of what was used on input.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Optional. Immutable. Identifier. Resource name of the subscription. Format:
 *  `subscriptions/{subscription}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Immutable. The endpoint where the subscription delivers events,
 *  such as a Pub/Sub topic.
 */
@property(nonatomic, strong, nullable) GTLRWorkspaceEvents_NotificationEndpoint *notificationEndpoint;

/**
 *  Optional. Options about what data to include in the event payload. Only
 *  supported for Google Chat events.
 */
@property(nonatomic, strong, nullable) GTLRWorkspaceEvents_PayloadOptions *payloadOptions;

/**
 *  Output only. If `true`, the subscription is in the process of being updated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. The state of the subscription. Determines whether the
 *  subscription can receive events and deliver them to the notification
 *  endpoint.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkspaceEvents_Subscription_State_Active The subscription is
 *        active and can receive and deliver events to its notification
 *        endpoint. (Value: "ACTIVE")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_State_Deleted The subscription
 *        is deleted. (Value: "DELETED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_State_StateUnspecified Default
 *        value. This value is unused. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_State_Suspended The subscription
 *        is unable to receive events due to an error. To identify the error,
 *        see the `suspension_reason` field. (Value: "SUSPENDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The error that suspended the subscription. To reactivate the
 *  subscription, resolve the error and call the `ReactivateSubscription`
 *  method.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointNotFound
 *        The subscription's notification endpoint doesn't exist, or the
 *        endpoint can't be found in the Google Cloud project where you created
 *        the subscription. (Value: "ENDPOINT_NOT_FOUND")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointPermissionDenied
 *        The Google Workspace application doesn't have access to deliver events
 *        to your subscription's notification endpoint. (Value:
 *        "ENDPOINT_PERMISSION_DENIED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_EndpointResourceExhausted
 *        The subscription's notification endpoint failed to receive events due
 *        to insufficient quota or reaching rate limiting. (Value:
 *        "ENDPOINT_RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_ErrorTypeUnspecified
 *        Default value. This value is unused. (Value: "ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_Other An
 *        unidentified error has occurred. (Value: "OTHER")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_ResourceDeleted
 *        The target resource for the subscription no longer exists. (Value:
 *        "RESOURCE_DELETED")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_UserAuthorizationFailure
 *        The user that authorized the creation of the subscription no longer
 *        has access to the subscription's target resource. (Value:
 *        "USER_AUTHORIZATION_FAILURE")
 *    @arg @c kGTLRWorkspaceEvents_Subscription_SuspensionReason_UserScopeRevoked
 *        The authorizing user has revoked the grant of one or more OAuth
 *        scopes. To learn more about authorization for Google Workspace, see
 *        [Configure the OAuth consent
 *        screen](https://developers.google.com/workspace/guides/configure-oauth-consent#choose-scopes).
 *        (Value: "USER_SCOPE_REVOKED")
 */
@property(nonatomic, copy, nullable) NSString *suspensionReason;

/**
 *  Required. Immutable. The Google Workspace resource that's monitored for
 *  events, formatted as the [full resource
 *  name](https://google.aip.dev/122#full-resource-names). To learn about target
 *  resources and the events that they support, see [Supported Google Workspace
 *  events](https://developers.google.com/workspace/events#supported-events). A
 *  user can only authorize your app to create one subscription for a given
 *  target resource. If your app tries to create another subscription with the
 *  same user credentials, the request returns an `ALREADY_EXISTS` error.
 */
@property(nonatomic, copy, nullable) NSString *targetResource;

/**
 *  Input only. The time-to-live (TTL) or duration for the subscription. If
 *  unspecified or set to `0`, uses the maximum possible duration.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

/** Output only. System-assigned unique identifier for the subscription. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last time that the subscription is updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
