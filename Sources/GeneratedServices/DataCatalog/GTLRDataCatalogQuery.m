// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Data Catalog API (datacatalog/v1)
// Description:
//   A fully managed and highly scalable data discovery and metadata management
//   service.
// Documentation:
//   https://cloud.google.com/data-catalog/docs/

#import <GoogleAPIClientForREST/GTLRDataCatalogQuery.h>

@implementation GTLRDataCatalogQuery

@dynamic fields;

@end

@implementation GTLRDataCatalogQuery_CatalogSearch

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1SearchCatalogRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/catalog:search";
  GTLRDataCatalogQuery_CatalogSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1SearchCatalogResponse class];
  query.loggingName = @"datacatalog.catalog.search";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_EntriesLookup

@dynamic fullyQualifiedName, linkedResource, sqlResource;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/entries:lookup";
  GTLRDataCatalogQuery_EntriesLookup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Entry class];
  query.loggingName = @"datacatalog.entries.lookup";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsCreate

@dynamic entryGroupId, parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1EntryGroup *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entryGroups";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1EntryGroup class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesCreate

@dynamic entryId, parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Entry *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entries";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Entry class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Entry class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.get";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesList

@dynamic pageSize, pageToken, parent, readMask;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entries";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListEntriesResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesModifyEntryContacts

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1ModifyEntryContactsRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:modifyEntryContacts";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesModifyEntryContacts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Contacts class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.modifyEntryContacts";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesModifyEntryOverview

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1ModifyEntryOverviewRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:modifyEntryOverview";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesModifyEntryOverview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1EntryOverview class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.modifyEntryOverview";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Entry *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Entry class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesStar

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1StarEntryRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:star";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesStar *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1StarEntryResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.star";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Tag *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tags";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Tag class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.tags.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.tags.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tags";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListTagsResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.tags.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Tag *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTagsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Tag class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.tags.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_TestIamPermissionsResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.testIamPermissions";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesUnstar

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1UnstarEntryRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unstar";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsEntriesUnstar *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1UnstarEntryResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.entries.unstar";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsGet

@dynamic name, readMask;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1EntryGroup class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.get";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entryGroups";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListEntryGroupsResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1EntryGroup *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1EntryGroup class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.setIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Tag *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tags";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Tag class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.tags.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.tags.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tags";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListTagsResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.tags.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Tag *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTagsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Tag class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.tags.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRDataCatalogQuery_ProjectsLocationsEntryGroupsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_TestIamPermissionsResponse class];
  query.loggingName = @"datacatalog.projects.locations.entryGroups.testIamPermissions";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesCreate

@dynamic parent, tagTemplateId;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplate *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tagTemplates";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplate class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsCreate

@dynamic parent, tagTemplateFieldId;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/fields";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.fields.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.fields.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsEnumValuesRename

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rename";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsEnumValuesRename *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.fields.enumValues.rename";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.fields.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsRename

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rename";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesFieldsRename *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplateField class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.fields.rename";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplate class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.get";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplate *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1TagTemplate class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.setIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRDataCatalogQuery_ProjectsLocationsTagTemplatesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_TestIamPermissionsResponse class];
  query.loggingName = @"datacatalog.projects.locations.tagTemplates.testIamPermissions";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/taxonomies";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesExport

@dynamic parent, serializedTaxonomies, taxonomies;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"taxonomies" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/taxonomies:export";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesExport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ExportTaxonomiesResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.export";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.get";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesImport

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1ImportTaxonomiesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/taxonomies:import";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ImportTaxonomiesResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.import";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/taxonomies";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListTaxonomiesResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1PolicyTag *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/policyTags";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1PolicyTag class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.create";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_Empty class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.delete";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1PolicyTag class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.get";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/policyTags";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1ListPolicyTagsResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.list";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1PolicyTag *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1PolicyTag class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.patch";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_TestIamPermissionsResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesReplace

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataCatalog_GoogleCloudDatacatalogV1ReplaceTaxonomyRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:replace";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesReplace *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataCatalog_GoogleCloudDatacatalogV1Taxonomy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.replace";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_Policy class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.setIamPolicy";
  return query;
}

@end

@implementation GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRDataCatalog_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRDataCatalogQuery_ProjectsLocationsTaxonomiesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRDataCatalog_TestIamPermissionsResponse class];
  query.loggingName = @"datacatalog.projects.locations.taxonomies.testIamPermissions";
  return query;
}

@end
