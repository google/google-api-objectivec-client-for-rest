// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   NetApp API (netapp/v1)
// Description:
//   Google Cloud NetApp Volumes is a fully-managed, cloud-based data storage
//   service that provides advanced data management capabilities and highly
//   scalable performance with global availability.
// Documentation:
//   https://cloud.google.com/netapp/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRNetAppFilesObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other NetApp Files query classes.
 */
@interface GTLRNetAppFilesQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  CreateActiveDirectory Creates the active directory specified in the request.
 *
 *  Method: netapp.projects.locations.activeDirectories.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesCreate : GTLRNetAppFilesQuery

/**
 *  Required. ID of the active directory to create. Must be unique within the
 *  parent resource. Must contain only letters, numbers and hyphen, with the
 *  first character a letter , the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *activeDirectoryId;

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  CreateActiveDirectory Creates the active directory specified in the request.
 *
 *  @param object The @c GTLRNetAppFiles_ActiveDirectory to include in the
 *    query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_ActiveDirectory *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete the active directory specified in the request.
 *
 *  Method: netapp.projects.locations.activeDirectories.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesDelete : GTLRNetAppFilesQuery

/** Required. Name of the active directory. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Delete the active directory specified in the request.
 *
 *  @param name Required. Name of the active directory.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Describes a specified active directory.
 *
 *  Method: netapp.projects.locations.activeDirectories.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesGet : GTLRNetAppFilesQuery

/** Required. Name of the active directory. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_ActiveDirectory.
 *
 *  Describes a specified active directory.
 *
 *  @param name Required. Name of the active directory.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists active directories.
 *
 *  Method: netapp.projects.locations.activeDirectories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesList : GTLRNetAppFilesQuery

/** Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListActiveDirectoriesRequest */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListActiveDirectoriesResponse.
 *
 *  Lists active directories.
 *
 *  @param parent Required. Parent value for ListActiveDirectoriesRequest
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update the parameters of an active directories.
 *
 *  Method: netapp.projects.locations.activeDirectories.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the active directory. Format:
 *  `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Active Directory resource by the update. The fields specified in the
 *  update_mask are relative to the resource, not the full request. A field will
 *  be overwritten if it is in the mask. If the user does not provide a mask
 *  then all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Update the parameters of an active directories.
 *
 *  @param object The @c GTLRNetAppFiles_ActiveDirectory to include in the
 *    query.
 *  @param name Identifier. The resource name of the active directory. Format:
 *    `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_ActiveDirectory *)object
                           name:(NSString *)name;

@end

/**
 *  Creates new backup policy
 *
 *  Method: netapp.projects.locations.backupPolicies.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesCreate : GTLRNetAppFilesQuery

/**
 *  Required. The ID to use for the backup policy. The ID must be unique within
 *  the specified location. Must contain only letters, numbers and hyphen, with
 *  the first character a letter, the last a letter or a number, and a 63
 *  character maximum.
 */
@property(nonatomic, copy, nullable) NSString *backupPolicyId;

/**
 *  Required. The location to create the backup policies of, in the format
 *  `projects/{project_id}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates new backup policy
 *
 *  @param object The @c GTLRNetAppFiles_BackupPolicy to include in the query.
 *  @param parent Required. The location to create the backup policies of, in
 *    the format `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupPolicy *)object
                         parent:(NSString *)parent;

@end

/**
 *  Warning! This operation will permanently delete the backup policy.
 *
 *  Method: netapp.projects.locations.backupPolicies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesDelete : GTLRNetAppFilesQuery

/**
 *  Required. The backup policy resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Warning! This operation will permanently delete the backup policy.
 *
 *  @param name Required. The backup policy resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the description of the specified backup policy by backup_policy_id.
 *
 *  Method: netapp.projects.locations.backupPolicies.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesGet : GTLRNetAppFilesQuery

/**
 *  Required. The backupPolicy resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_BackupPolicy.
 *
 *  Returns the description of the specified backup policy by backup_policy_id.
 *
 *  @param name Required. The backupPolicy resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns list of all available backup policies.
 *
 *  Method: netapp.projects.locations.backupPolicies.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesList : GTLRNetAppFilesQuery

/** Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListBackupPoliciesRequest */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListBackupPoliciesResponse.
 *
 *  Returns list of all available backup policies.
 *
 *  @param parent Required. Parent value for ListBackupPoliciesRequest
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates settings of a specific backup policy.
 *
 *  Method: netapp.projects.locations.backupPolicies.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the backup policy. Format:
 *  `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Backup Policy resource by the update. The fields specified in the
 *  update_mask are relative to the resource, not the full request. A field will
 *  be overwritten if it is in the mask. If the user does not provide a mask
 *  then all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates settings of a specific backup policy.
 *
 *  @param object The @c GTLRNetAppFiles_BackupPolicy to include in the query.
 *  @param name Identifier. The resource name of the backup policy. Format:
 *    `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupPolicy *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a backup from the volume specified in the request The backup can be
 *  created from the given snapshot if specified in the request. If no snapshot
 *  specified, there'll be a new snapshot taken to initiate the backup creation.
 *
 *  Method: netapp.projects.locations.backupVaults.backups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsCreate : GTLRNetAppFilesQuery

/**
 *  Required. The ID to use for the backup. The ID must be unique within the
 *  specified backupVault. Must contain only letters, numbers and hyphen, with
 *  the first character a letter, the last a letter or a number, and a 63
 *  character maximum.
 */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  Required. The NetApp backupVault to create the backups of, in the format
 *  `projects/ * /locations/ * /backupVaults/{backup_vault_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates a backup from the volume specified in the request The backup can be
 *  created from the given snapshot if specified in the request. If no snapshot
 *  specified, there'll be a new snapshot taken to initiate the backup creation.
 *
 *  @param object The @c GTLRNetAppFiles_Backup to include in the query.
 *  @param parent Required. The NetApp backupVault to create the backups of, in
 *    the format `projects/ * /locations/ * /backupVaults/{backup_vault_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Backup *)object
                         parent:(NSString *)parent;

@end

/**
 *  Warning! This operation will permanently delete the backup.
 *
 *  Method: netapp.projects.locations.backupVaults.backups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsDelete : GTLRNetAppFilesQuery

/**
 *  Required. The backup resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Warning! This operation will permanently delete the backup.
 *
 *  @param name Required. The backup resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the description of the specified backup
 *
 *  Method: netapp.projects.locations.backupVaults.backups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsGet : GTLRNetAppFilesQuery

/**
 *  Required. The backup resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Backup.
 *
 *  Returns the description of the specified backup
 *
 *  @param name Required. The backup resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns descriptions of all backups for a backupVault.
 *
 *  Method: netapp.projects.locations.backupVaults.backups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsList : GTLRNetAppFilesQuery

/**
 *  The standard list filter. If specified, backups will be returned based on
 *  the attribute name that matches the filter expression. If empty, then no
 *  backups are filtered out. See https://google.aip.dev/160
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of items to return. The service may return fewer than
 *  this value. The maximum value is 1000; values above 1000 will be coerced to
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value to use if there are additional results to retrieve
 *  for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The backupVault for which to retrieve backup information, in the
 *  format
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
 *  To retrieve backup information for all locations, use "-" for the
 *  `{location}` value. To retrieve backup information for all backupVaults, use
 *  "-" for the `{backup_vault_id}` value. To retrieve backup information for a
 *  volume, use "-" for the `{backup_vault_id}` value and specify volume full
 *  name with the filter.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListBackupsResponse.
 *
 *  Returns descriptions of all backups for a backupVault.
 *
 *  @param parent Required. The backupVault for which to retrieve backup
 *    information, in the format
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
 *    To retrieve backup information for all locations, use "-" for the
 *    `{location}` value. To retrieve backup information for all backupVaults,
 *    use "-" for the `{backup_vault_id}` value. To retrieve backup information
 *    for a volume, use "-" for the `{backup_vault_id}` value and specify volume
 *    full name with the filter.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update backup with full spec.
 *
 *  Method: netapp.projects.locations.backupVaults.backups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the backup. Format:
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Backup resource to be updated. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Update backup with full spec.
 *
 *  @param object The @c GTLRNetAppFiles_Backup to include in the query.
 *  @param name Identifier. The resource name of the backup. Format:
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Backup *)object
                           name:(NSString *)name;

@end

/**
 *  Creates new backup vault
 *
 *  Method: netapp.projects.locations.backupVaults.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsCreate : GTLRNetAppFilesQuery

/**
 *  Required. The ID to use for the backupVault. The ID must be unique within
 *  the specified location. Must contain only letters, numbers and hyphen, with
 *  the first character a letter, the last a letter or a number, and a 63
 *  character maximum.
 */
@property(nonatomic, copy, nullable) NSString *backupVaultId;

/**
 *  Required. The location to create the backup vaults, in the format
 *  `projects/{project_id}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates new backup vault
 *
 *  @param object The @c GTLRNetAppFiles_BackupVault to include in the query.
 *  @param parent Required. The location to create the backup vaults, in the
 *    format `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupVault *)object
                         parent:(NSString *)parent;

@end

/**
 *  Warning! This operation will permanently delete the backup vault.
 *
 *  Method: netapp.projects.locations.backupVaults.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsDelete : GTLRNetAppFilesQuery

/**
 *  Required. The backupVault resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Warning! This operation will permanently delete the backup vault.
 *
 *  @param name Required. The backupVault resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the description of the specified backup vault
 *
 *  Method: netapp.projects.locations.backupVaults.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsGet : GTLRNetAppFilesQuery

/**
 *  Required. The backupVault resource name, in the format
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_BackupVault.
 *
 *  Returns the description of the specified backup vault
 *
 *  @param name Required. The backupVault resource name, in the format
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns list of all available backup vaults.
 *
 *  Method: netapp.projects.locations.backupVaults.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsList : GTLRNetAppFilesQuery

/** List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value to use if there are additional results to retrieve
 *  for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The location for which to retrieve backupVault information, in the
 *  format `projects/{project_id}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListBackupVaultsResponse.
 *
 *  Returns list of all available backup vaults.
 *
 *  @param parent Required. The location for which to retrieve backupVault
 *    information, in the format `projects/{project_id}/locations/{location}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the settings of a specific backup vault.
 *
 *  Method: netapp.projects.locations.backupVaults.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the backup vault. Format:
 *  `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Backup resource to be updated. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the settings of a specific backup vault.
 *
 *  @param object The @c GTLRNetAppFiles_BackupVault to include in the query.
 *  @param name Identifier. The resource name of the backup vault. Format:
 *    `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupVault *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: netapp.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsGet : GTLRNetAppFilesQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new KMS config.
 *
 *  Method: netapp.projects.locations.kmsConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsCreate : GTLRNetAppFilesQuery

/**
 *  Required. Id of the requesting KmsConfig. Must be unique within the parent
 *  resource. Must contain only letters, numbers and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *kmsConfigId;

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates a new KMS config.
 *
 *  @param object The @c GTLRNetAppFiles_KmsConfig to include in the query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_KmsConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Warning! This operation will permanently delete the Kms config.
 *
 *  Method: netapp.projects.locations.kmsConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsDelete : GTLRNetAppFilesQuery

/** Required. Name of the KmsConfig. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Warning! This operation will permanently delete the Kms config.
 *
 *  @param name Required. Name of the KmsConfig.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Encrypt the existing volumes without CMEK encryption with the desired the
 *  KMS config for the whole region.
 *
 *  Method: netapp.projects.locations.kmsConfigs.encrypt
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsEncrypt : GTLRNetAppFilesQuery

/** Required. Name of the KmsConfig. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Encrypt the existing volumes without CMEK encryption with the desired the
 *  KMS config for the whole region.
 *
 *  @param object The @c GTLRNetAppFiles_EncryptVolumesRequest to include in the
 *    query.
 *  @param name Required. Name of the KmsConfig.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsEncrypt
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_EncryptVolumesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns the description of the specified KMS config by kms_config_id.
 *
 *  Method: netapp.projects.locations.kmsConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsGet : GTLRNetAppFilesQuery

/** Required. Name of the KmsConfig */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_KmsConfig.
 *
 *  Returns the description of the specified KMS config by kms_config_id.
 *
 *  @param name Required. Name of the KmsConfig
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns descriptions of all KMS configs owned by the caller.
 *
 *  Method: netapp.projects.locations.kmsConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsList : GTLRNetAppFilesQuery

/** List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value to use if there are additional results to retrieve
 *  for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListKmsConfigsResponse.
 *
 *  Returns descriptions of all KMS configs owned by the caller.
 *
 *  @param parent Required. Parent value
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the Kms config properties with the full spec
 *
 *  Method: netapp.projects.locations.kmsConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsPatch : GTLRNetAppFilesQuery

/** Identifier. Name of the KmsConfig. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  KmsConfig resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the Kms config properties with the full spec
 *
 *  @param object The @c GTLRNetAppFiles_KmsConfig to include in the query.
 *  @param name Identifier. Name of the KmsConfig.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_KmsConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Verifies KMS config reachability.
 *
 *  Method: netapp.projects.locations.kmsConfigs.verify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsVerify : GTLRNetAppFilesQuery

/** Required. Name of the KMS Config to be verified. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_VerifyKmsConfigResponse.
 *
 *  Verifies KMS config reachability.
 *
 *  @param object The @c GTLRNetAppFiles_VerifyKmsConfigRequest to include in
 *    the query.
 *  @param name Required. Name of the KMS Config to be verified.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsVerify
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_VerifyKmsConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: netapp.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsList : GTLRNetAppFilesQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRNetAppFiles_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: netapp.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsOperationsCancel : GTLRNetAppFilesQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRNetAppFiles_CancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: netapp.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsOperationsDelete : GTLRNetAppFilesQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_GoogleProtobufEmpty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: netapp.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsOperationsGet : GTLRNetAppFilesQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: netapp.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsOperationsList : GTLRNetAppFilesQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRNetAppFiles_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new storage pool.
 *
 *  Method: netapp.projects.locations.storagePools.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsCreate : GTLRNetAppFilesQuery

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. Id of the requesting storage pool. Must be unique within the
 *  parent resource. Must contain only letters, numbers and hyphen, with the
 *  first character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *storagePoolId;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates a new storage pool.
 *
 *  @param object The @c GTLRNetAppFiles_StoragePool to include in the query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_StoragePool *)object
                         parent:(NSString *)parent;

@end

/**
 *  Warning! This operation will permanently delete the storage pool.
 *
 *  Method: netapp.projects.locations.storagePools.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsDelete : GTLRNetAppFilesQuery

/** Required. Name of the storage pool */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Warning! This operation will permanently delete the storage pool.
 *
 *  @param name Required. Name of the storage pool
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the description of the specified storage pool by poolId.
 *
 *  Method: netapp.projects.locations.storagePools.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsGet : GTLRNetAppFilesQuery

/** Required. Name of the storage pool */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_StoragePool.
 *
 *  Returns the description of the specified storage pool by poolId.
 *
 *  @param name Required. Name of the storage pool
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns descriptions of all storage pools owned by the caller.
 *
 *  Method: netapp.projects.locations.storagePools.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsList : GTLRNetAppFilesQuery

/** Optional. List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Sort results. Supported values are "name", "name desc" or ""
 *  (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value to use if there are additional results
 *  to retrieve for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListStoragePoolsResponse.
 *
 *  Returns descriptions of all storage pools owned by the caller.
 *
 *  @param parent Required. Parent value
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the storage pool properties with the full spec
 *
 *  Method: netapp.projects.locations.storagePools.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsPatch : GTLRNetAppFilesQuery

/** Identifier. Name of the storage pool */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  StoragePool resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the storage pool properties with the full spec
 *
 *  @param object The @c GTLRNetAppFiles_StoragePool to include in the query.
 *  @param name Identifier. Name of the storage pool
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_StoragePool *)object
                           name:(NSString *)name;

@end

/**
 *  This operation will switch the active/replica zone for a regional
 *  storagePool.
 *
 *  Method: netapp.projects.locations.storagePools.switch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsSwitch : GTLRNetAppFilesQuery

/** Required. Name of the storage pool */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  This operation will switch the active/replica zone for a regional
 *  storagePool.
 *
 *  @param object The @c GTLRNetAppFiles_SwitchActiveReplicaZoneRequest to
 *    include in the query.
 *  @param name Required. Name of the storage pool
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsSwitch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_SwitchActiveReplicaZoneRequest *)object
                           name:(NSString *)name;

@end

/**
 *  ValidateDirectoryService does a connectivity check for a directory service
 *  policy attached to the storage pool.
 *
 *  Method: netapp.projects.locations.storagePools.validateDirectoryService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsValidateDirectoryService : GTLRNetAppFilesQuery

/** Required. Name of the storage pool */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  ValidateDirectoryService does a connectivity check for a directory service
 *  policy attached to the storage pool.
 *
 *  @param object The @c GTLRNetAppFiles_ValidateDirectoryServiceRequest to
 *    include in the query.
 *  @param name Required. Name of the storage pool
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsValidateDirectoryService
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_ValidateDirectoryServiceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Volume in a given project and location.
 *
 *  Method: netapp.projects.locations.volumes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesCreate : GTLRNetAppFilesQuery

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. Id of the requesting volume. Must be unique within the parent
 *  resource. Must contain only letters, numbers and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *volumeId;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Creates a new Volume in a given project and location.
 *
 *  @param object The @c GTLRNetAppFiles_Volume to include in the query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Volume *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Volume.
 *
 *  Method: netapp.projects.locations.volumes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesDelete : GTLRNetAppFilesQuery

/**
 *  If this field is set as true, CCFE will not block the volume resource
 *  deletion even if it has any snapshots resource. (Otherwise, the request will
 *  only work if the volume has no snapshots.)
 */
@property(nonatomic, assign) BOOL force;

/** Required. Name of the volume */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Deletes a single Volume.
 *
 *  @param name Required. Name of the volume
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Volume.
 *
 *  Method: netapp.projects.locations.volumes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesGet : GTLRNetAppFilesQuery

/** Required. Name of the volume */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Volume.
 *
 *  Gets details of a single Volume.
 *
 *  @param name Required. Name of the volume
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Volumes in a given project.
 *
 *  Method: netapp.projects.locations.volumes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesList : GTLRNetAppFilesQuery

/** Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListVolumesRequest */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListVolumesResponse.
 *
 *  Lists Volumes in a given project.
 *
 *  @param parent Required. Parent value for ListVolumesRequest
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single Volume.
 *
 *  Method: netapp.projects.locations.volumes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesPatch : GTLRNetAppFilesQuery

/** Identifier. Name of the volume */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Volume resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the parameters of a single Volume.
 *
 *  @param object The @c GTLRNetAppFiles_Volume to include in the query.
 *  @param name Identifier. Name of the volume
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Volume *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new replication for a volume.
 *
 *  Method: netapp.projects.locations.volumes.replications.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsCreate : GTLRNetAppFilesQuery

/**
 *  Required. The NetApp volume to create the replications of, in the format
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. ID of the replication to create. Must be unique within the parent
 *  resource. Must contain only letters, numbers and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *replicationId;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Create a new replication for a volume.
 *
 *  @param object The @c GTLRNetAppFiles_Replication to include in the query.
 *  @param parent Required. The NetApp volume to create the replications of, in
 *    the format
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Replication *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a replication.
 *
 *  Method: netapp.projects.locations.volumes.replications.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsDelete : GTLRNetAppFilesQuery

/**
 *  Required. The replication resource name, in the format `projects/ *
 *  /locations/ * /volumes/ * /replications/{replication_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Deletes a replication.
 *
 *  @param name Required. The replication resource name, in the format
 *    `projects/ * /locations/ * /volumes/ * /replications/{replication_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Establish replication peering.
 *
 *  Method: netapp.projects.locations.volumes.replications.establishPeering
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsEstablishPeering : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the replication, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Establish replication peering.
 *
 *  @param object The @c GTLRNetAppFiles_EstablishPeeringRequest to include in
 *    the query.
 *  @param name Required. The resource name of the replication, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsEstablishPeering
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_EstablishPeeringRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Describe a replication for a volume.
 *
 *  Method: netapp.projects.locations.volumes.replications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsGet : GTLRNetAppFilesQuery

/**
 *  Required. The replication resource name, in the format
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Replication.
 *
 *  Describe a replication for a volume.
 *
 *  @param name Required. The replication resource name, in the format
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns descriptions of all replications for a volume.
 *
 *  Method: netapp.projects.locations.volumes.replications.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsList : GTLRNetAppFilesQuery

/** List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value to use if there are additional results to retrieve
 *  for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The volume for which to retrieve replication information, in the
 *  format `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListReplicationsResponse.
 *
 *  Returns descriptions of all replications for a volume.
 *
 *  @param parent Required. The volume for which to retrieve replication
 *    information, in the format
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the settings of a specific replication.
 *
 *  Method: netapp.projects.locations.volumes.replications.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the Replication. Format:
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the settings of a specific replication.
 *
 *  @param object The @c GTLRNetAppFiles_Replication to include in the query.
 *  @param name Identifier. The resource name of the Replication. Format:
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Replication *)object
                           name:(NSString *)name;

@end

/**
 *  Resume Cross Region Replication.
 *
 *  Method: netapp.projects.locations.volumes.replications.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsResume : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the replication, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Resume Cross Region Replication.
 *
 *  @param object The @c GTLRNetAppFiles_ResumeReplicationRequest to include in
 *    the query.
 *  @param name Required. The resource name of the replication, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsResume
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_ResumeReplicationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Reverses direction of replication. Source becomes destination and
 *  destination becomes source.
 *
 *  Method: netapp.projects.locations.volumes.replications.reverseDirection
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsReverseDirection : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the replication, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Reverses direction of replication. Source becomes destination and
 *  destination becomes source.
 *
 *  @param object The @c GTLRNetAppFiles_ReverseReplicationDirectionRequest to
 *    include in the query.
 *  @param name Required. The resource name of the replication, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsReverseDirection
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_ReverseReplicationDirectionRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stop Cross Region Replication.
 *
 *  Method: netapp.projects.locations.volumes.replications.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsStop : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the replication, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Stop Cross Region Replication.
 *
 *  @param object The @c GTLRNetAppFiles_StopReplicationRequest to include in
 *    the query.
 *  @param name Required. The resource name of the replication, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsStop
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_StopReplicationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Syncs the replication. This will invoke one time volume data transfer from
 *  source to destination.
 *
 *  Method: netapp.projects.locations.volumes.replications.sync
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsSync : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the replication, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Syncs the replication. This will invoke one time volume data transfer from
 *  source to destination.
 *
 *  @param object The @c GTLRNetAppFiles_SyncReplicationRequest to include in
 *    the query.
 *  @param name Required. The resource name of the replication, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsSync
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_SyncReplicationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Revert an existing volume to a specified snapshot. Warning! This operation
 *  will permanently revert all changes made after the snapshot was created.
 *
 *  Method: netapp.projects.locations.volumes.revert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesRevert : GTLRNetAppFilesQuery

/**
 *  Required. The resource name of the volume, in the format of
 *  projects/{project_id}/locations/{location}/volumes/{volume_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Revert an existing volume to a specified snapshot. Warning! This operation
 *  will permanently revert all changes made after the snapshot was created.
 *
 *  @param object The @c GTLRNetAppFiles_RevertVolumeRequest to include in the
 *    query.
 *  @param name Required. The resource name of the volume, in the format of
 *    projects/{project_id}/locations/{location}/volumes/{volume_id}.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesRevert
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_RevertVolumeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new snapshot for a volume.
 *
 *  Method: netapp.projects.locations.volumes.snapshots.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsCreate : GTLRNetAppFilesQuery

/**
 *  Required. The NetApp volume to create the snapshots of, in the format
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. ID of the snapshot to create. Must be unique within the parent
 *  resource. Must contain only letters, numbers and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *snapshotId;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Create a new snapshot for a volume.
 *
 *  @param object The @c GTLRNetAppFiles_Snapshot to include in the query.
 *  @param parent Required. The NetApp volume to create the snapshots of, in the
 *    format `projects/{project_id}/locations/{location}/volumes/{volume_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsCreate
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Snapshot *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a snapshot.
 *
 *  Method: netapp.projects.locations.volumes.snapshots.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsDelete : GTLRNetAppFilesQuery

/**
 *  Required. The snapshot resource name, in the format `projects/ * /locations/
 *  * /volumes/ * /snapshots/{snapshot_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Deletes a snapshot.
 *
 *  @param name Required. The snapshot resource name, in the format `projects/ *
 *    /locations/ * /volumes/ * /snapshots/{snapshot_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Describe a snapshot for a volume.
 *
 *  Method: netapp.projects.locations.volumes.snapshots.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsGet : GTLRNetAppFilesQuery

/**
 *  Required. The snapshot resource name, in the format
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRNetAppFiles_Snapshot.
 *
 *  Describe a snapshot for a volume.
 *
 *  @param name Required. The snapshot resource name, in the format
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns descriptions of all snapshots for a volume.
 *
 *  Method: netapp.projects.locations.volumes.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsList : GTLRNetAppFilesQuery

/** List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort results. Supported values are "name", "name desc" or "" (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value to use if there are additional results to retrieve
 *  for this list request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The volume for which to retrieve snapshot information, in the
 *  format `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRNetAppFiles_ListSnapshotsResponse.
 *
 *  Returns descriptions of all snapshots for a volume.
 *
 *  @param parent Required. The volume for which to retrieve snapshot
 *    information, in the format
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the settings of a specific snapshot.
 *
 *  Method: netapp.projects.locations.volumes.snapshots.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeNetAppFilesCloudPlatform
 */
@interface GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsPatch : GTLRNetAppFilesQuery

/**
 *  Identifier. The resource name of the snapshot. Format:
 *  `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask of fields to update. At least one path must be supplied in
 *  this field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRNetAppFiles_Operation.
 *
 *  Updates the settings of a specific snapshot.
 *
 *  @param object The @c GTLRNetAppFiles_Snapshot to include in the query.
 *  @param name Identifier. The resource name of the snapshot. Format:
 *    `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`.
 *
 *  @return GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsPatch
 */
+ (instancetype)queryWithObject:(GTLRNetAppFiles_Snapshot *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
