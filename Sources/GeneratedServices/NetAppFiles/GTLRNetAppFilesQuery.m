// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   NetApp API (netapp/v1)
// Description:
//   Google Cloud NetApp Volumes is a fully-managed, cloud-based data storage
//   service that provides advanced data management capabilities and highly
//   scalable performance with global availability.
// Documentation:
//   https://cloud.google.com/netapp/

#import <GoogleAPIClientForREST/GTLRNetAppFilesQuery.h>

@implementation GTLRNetAppFilesQuery

@dynamic fields;

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesCreate

@dynamic activeDirectoryId, parent;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_ActiveDirectory *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/activeDirectories";
  GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.activeDirectories.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.activeDirectories.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_ActiveDirectory class];
  query.loggingName = @"netapp.projects.locations.activeDirectories.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/activeDirectories";
  GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListActiveDirectoriesResponse class];
  query.loggingName = @"netapp.projects.locations.activeDirectories.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_ActiveDirectory *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsActiveDirectoriesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.activeDirectories.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesCreate

@dynamic backupPolicyId, parent;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupPolicy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupPolicies";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupPolicies.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupPolicies.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_BackupPolicy class];
  query.loggingName = @"netapp.projects.locations.backupPolicies.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupPolicies";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListBackupPoliciesResponse class];
  query.loggingName = @"netapp.projects.locations.backupPolicies.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupPolicy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupPolicies.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsCreate

@dynamic backupId, parent;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Backup *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backups";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.backups.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.backups.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Backup class];
  query.loggingName = @"netapp.projects.locations.backupVaults.backups.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backups";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListBackupsResponse class];
  query.loggingName = @"netapp.projects.locations.backupVaults.backups.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Backup *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsBackupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.backups.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsCreate

@dynamic backupVaultId, parent;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupVault *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupVaults";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_BackupVault class];
  query.loggingName = @"netapp.projects.locations.backupVaults.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupVaults";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListBackupVaultsResponse class];
  query.loggingName = @"netapp.projects.locations.backupVaults.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_BackupVault *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsBackupVaultsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.backupVaults.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Location class];
  query.loggingName = @"netapp.projects.locations.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsCreate

@dynamic kmsConfigId, parent;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_KmsConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/kmsConfigs";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsEncrypt

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_EncryptVolumesRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:encrypt";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsEncrypt *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.encrypt";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_KmsConfig class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/kmsConfigs";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListKmsConfigsResponse class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_KmsConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsVerify

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_VerifyKmsConfigRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:verify";
  GTLRNetAppFilesQuery_ProjectsLocationsKmsConfigsVerify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_VerifyKmsConfigResponse class];
  query.loggingName = @"netapp.projects.locations.kmsConfigs.verify";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRNetAppFilesQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_ListLocationsResponse class];
  query.loggingName = @"netapp.projects.locations.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRNetAppFilesQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_GoogleProtobufEmpty class];
  query.loggingName = @"netapp.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_GoogleProtobufEmpty class];
  query.loggingName = @"netapp.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRNetAppFilesQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_ListOperationsResponse class];
  query.loggingName = @"netapp.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsCreate

@dynamic parent, storagePoolId;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_StoragePool *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/storagePools";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.storagePools.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.storagePools.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_StoragePool class];
  query.loggingName = @"netapp.projects.locations.storagePools.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/storagePools";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListStoragePoolsResponse class];
  query.loggingName = @"netapp.projects.locations.storagePools.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_StoragePool *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.storagePools.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsSwitch

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_SwitchActiveReplicaZoneRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:switch";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsSwitch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.storagePools.switch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsValidateDirectoryService

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_ValidateDirectoryServiceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:validateDirectoryService";
  GTLRNetAppFilesQuery_ProjectsLocationsStoragePoolsValidateDirectoryService *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.storagePools.validateDirectoryService";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesCreate

@dynamic parent, volumeId;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Volume *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/volumes";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Volume class];
  query.loggingName = @"netapp.projects.locations.volumes.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/volumes";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListVolumesResponse class];
  query.loggingName = @"netapp.projects.locations.volumes.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Volume *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsCreate

@dynamic parent, replicationId;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Replication *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/replications";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsEstablishPeering

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_EstablishPeeringRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:establishPeering";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsEstablishPeering *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.establishPeering";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Replication class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/replications";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListReplicationsResponse class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Replication *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.patch";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsResume

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_ResumeReplicationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:resume";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsResume *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.resume";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsReverseDirection

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_ReverseReplicationDirectionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:reverseDirection";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsReverseDirection *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.reverseDirection";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_StopReplicationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:stop";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.stop";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsSync

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_SyncReplicationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:sync";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesReplicationsSync *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.replications.sync";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesRevert

@dynamic name;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_RevertVolumeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:revert";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.revert";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsCreate

@dynamic parent, snapshotId;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Snapshot *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/snapshots";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.snapshots.create";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.snapshots.delete";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Snapshot class];
  query.loggingName = @"netapp.projects.locations.volumes.snapshots.get";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/snapshots";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRNetAppFiles_ListSnapshotsResponse class];
  query.loggingName = @"netapp.projects.locations.volumes.snapshots.list";
  return query;
}

@end

@implementation GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRNetAppFiles_Snapshot *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRNetAppFilesQuery_ProjectsLocationsVolumesSnapshotsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRNetAppFiles_Operation class];
  query.loggingName = @"netapp.projects.locations.volumes.snapshots.patch";
  return query;
}

@end
