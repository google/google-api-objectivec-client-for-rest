// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Identity API (cloudidentity/v1)
// Description:
//   API for provisioning and managing identity resources.
// Documentation:
//   https://cloud.google.com/identity/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudIdentityObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// initialGroupConfig

/**
 *  An empty group is created without any initial owners. This can only be used
 *  by admins of the domain.
 *
 *  Value: "EMPTY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigEmpty;
/**
 *  Default. Should not be used.
 *
 *  Value: "INITIAL_GROUP_CONFIG_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigInitialGroupConfigUnspecified;
/**
 *  The end user making the request will be added as the initial owner of the
 *  `Group`.
 *
 *  Value: "WITH_INITIAL_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityInitialGroupConfigWithInitialOwner;

// ----------------------------------------------------------------------------
// view

/**
 *  Only basic resource information is returned.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewBasic;
/**
 *  This view contains all devices imported by the company admin. Each device in
 *  the response contains all information specified by the company admin when
 *  importing the device (i.e. asset tags). This includes devices that may be
 *  unaassigned or assigned to users.
 *
 *  Value: "COMPANY_INVENTORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewCompanyInventory;
/**
 *  All resource information is returned.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewFull;
/**
 *  This view contains all devices with at least one user registered on the
 *  device. Each device in the response contains all device information, except
 *  for asset tags.
 *
 *  Value: "USER_ASSIGNED_DEVICES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewUserAssignedDevices;
/** Value: "VIEW_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudIdentityViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Identity query classes.
 */
@interface GTLRCloudIdentityQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Cancels a UserInvitation that was already sent.
 *
 *  Method: cloudidentity.customers.userinvitations.cancel
 */
@interface GTLRCloudIdentityQuery_CustomersUserinvitationsCancel : GTLRCloudIdentityQuery

/**
 *  Required. `UserInvitation` name in the format
 *  `customers/{customer}/userinvitations/{user_email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Cancels a UserInvitation that was already sent.
 *
 *  @param object The @c GTLRCloudIdentity_CancelUserInvitationRequest to
 *    include in the query.
 *  @param name Required. `UserInvitation` name in the format
 *    `customers/{customer}/userinvitations/{user_email_address}`
 *
 *  @return GTLRCloudIdentityQuery_CustomersUserinvitationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_CancelUserInvitationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a UserInvitation resource. **Note:** New consumer accounts with
 *  the customer's verified domain created within the previous 48 hours will not
 *  appear in the result. This delay also applies to newly-verified domains.
 *
 *  Method: cloudidentity.customers.userinvitations.get
 */
@interface GTLRCloudIdentityQuery_CustomersUserinvitationsGet : GTLRCloudIdentityQuery

/**
 *  Required. `UserInvitation` name in the format
 *  `customers/{customer}/userinvitations/{user_email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_UserInvitation.
 *
 *  Retrieves a UserInvitation resource. **Note:** New consumer accounts with
 *  the customer's verified domain created within the previous 48 hours will not
 *  appear in the result. This delay also applies to newly-verified domains.
 *
 *  @param name Required. `UserInvitation` name in the format
 *    `customers/{customer}/userinvitations/{user_email_address}`
 *
 *  @return GTLRCloudIdentityQuery_CustomersUserinvitationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Verifies whether a user account is eligible to receive a UserInvitation (is
 *  an unmanaged account). Eligibility is based on the following criteria: * the
 *  email address is a consumer account and it's the primary email address of
 *  the account, and * the domain of the email address matches an existing
 *  verified Google Workspace or Cloud Identity domain If both conditions are
 *  met, the user is eligible. **Note:** This method is not supported for
 *  Workspace Essentials customers.
 *
 *  Method: cloudidentity.customers.userinvitations.isInvitableUser
 */
@interface GTLRCloudIdentityQuery_CustomersUserinvitationsIsInvitableUser : GTLRCloudIdentityQuery

/**
 *  Required. `UserInvitation` name in the format
 *  `customers/{customer}/userinvitations/{user_email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_IsInvitableUserResponse.
 *
 *  Verifies whether a user account is eligible to receive a UserInvitation (is
 *  an unmanaged account). Eligibility is based on the following criteria: * the
 *  email address is a consumer account and it's the primary email address of
 *  the account, and * the domain of the email address matches an existing
 *  verified Google Workspace or Cloud Identity domain If both conditions are
 *  met, the user is eligible. **Note:** This method is not supported for
 *  Workspace Essentials customers.
 *
 *  @param name Required. `UserInvitation` name in the format
 *    `customers/{customer}/userinvitations/{user_email_address}`
 *
 *  @return GTLRCloudIdentityQuery_CustomersUserinvitationsIsInvitableUser
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a list of UserInvitation resources. **Note:** New consumer
 *  accounts with the customer's verified domain created within the previous 48
 *  hours will not appear in the result. This delay also applies to
 *  newly-verified domains.
 *
 *  Method: cloudidentity.customers.userinvitations.list
 */
@interface GTLRCloudIdentityQuery_CustomersUserinvitationsList : GTLRCloudIdentityQuery

/**
 *  Optional. A query string for filtering `UserInvitation` results by their
 *  current state, in the format: `"state=='invited'"`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The sort order of the list results. You can sort the results in
 *  descending order based on either email or last update timestamp but not
 *  both, using `order_by="email desc"`. Currently, sorting is supported for
 *  `update_time asc`, `update_time desc`, `email asc`, and `email desc`. If not
 *  specified, results will be returned based on `email asc` order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of UserInvitation resources to return. If
 *  unspecified, at most 100 resources will be returned. The maximum value is
 *  200; values above 200 will be set to 200.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListUserInvitations` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListBooks` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The customer ID of the Google Workspace or Cloud Identity account
 *  the UserInvitation resources are associated with.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_ListUserInvitationsResponse.
 *
 *  Retrieves a list of UserInvitation resources. **Note:** New consumer
 *  accounts with the customer's verified domain created within the previous 48
 *  hours will not appear in the result. This delay also applies to
 *  newly-verified domains.
 *
 *  @param parent Required. The customer ID of the Google Workspace or Cloud
 *    Identity account the UserInvitation resources are associated with.
 *
 *  @return GTLRCloudIdentityQuery_CustomersUserinvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sends a UserInvitation to email. If the `UserInvitation` does not exist for
 *  this request and it is a valid request, the request creates a
 *  `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour
 *  delay where newly-created consumer accounts will not appear in the results.
 *  You can still send a `UserInvitation` to those accounts if you know the
 *  unmanaged email address and IsInvitableUser==True.
 *
 *  Method: cloudidentity.customers.userinvitations.send
 */
@interface GTLRCloudIdentityQuery_CustomersUserinvitationsSend : GTLRCloudIdentityQuery

/**
 *  Required. `UserInvitation` name in the format
 *  `customers/{customer}/userinvitations/{user_email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Sends a UserInvitation to email. If the `UserInvitation` does not exist for
 *  this request and it is a valid request, the request creates a
 *  `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour
 *  delay where newly-created consumer accounts will not appear in the results.
 *  You can still send a `UserInvitation` to those accounts if you know the
 *  unmanaged email address and IsInvitableUser==True.
 *
 *  @param object The @c GTLRCloudIdentity_SendUserInvitationRequest to include
 *    in the query.
 *  @param name Required. `UserInvitation` name in the format
 *    `customers/{customer}/userinvitations/{user_email_address}`
 *
 *  @return GTLRCloudIdentityQuery_CustomersUserinvitationsSend
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_SendUserInvitationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancels an unfinished device wipe. This operation can be used to cancel
 *  device wipe in the gap between the wipe operation returning success and the
 *  device being wiped. This operation is possible when the device is in a
 *  "pending wipe" state. The device enters the "pending wipe" state when a wipe
 *  device command is issued, but has not yet been sent to the device. The
 *  cancel wipe will fail if the wipe command has already been issued to the
 *  device.
 *
 *  Method: cloudidentity.devices.cancelWipe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesCancelWipe : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}`, where device is the unique ID assigned to the
 *  Device.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Cancels an unfinished device wipe. This operation can be used to cancel
 *  device wipe in the gap between the wipe operation returning success and the
 *  device being wiped. This operation is possible when the device is in a
 *  "pending wipe" state. The device enters the "pending wipe" state when a wipe
 *  device command is issued, but has not yet been sent to the device. The
 *  cancel wipe will fail if the wipe command has already been issued to the
 *  device.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}`, where device is the unique ID assigned to
 *    the Device.
 *
 *  @return GTLRCloudIdentityQuery_DevicesCancelWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a device. Only company-owned device may be created. **Note**: This
 *  method is available only to customers who have one of the following SKUs:
 *  Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud
 *  Identity Premium
 *
 *  Method: cloudidentity.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesCreate : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a device. Only company-owned device may be created. **Note**: This
 *  method is available only to customers who have one of the following SKUs:
 *  Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud
 *  Identity Premium
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device to include in the
 *    query.
 *
 *  @return GTLRCloudIdentityQuery_DevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device *)object;

@end

/**
 *  Deletes the specified device.
 *
 *  Method: cloudidentity.devices.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDelete : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}`, where device is the unique ID assigned to the
 *  Device.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes the specified device.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}`, where device is the unique ID assigned to
 *    the Device.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Approves device to access user data.
 *
 *  Method: cloudidentity.devices.deviceUsers.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersApprove : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Approves device to access user data.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersApprove
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Blocks device from accessing user data
 *
 *  Method: cloudidentity.devices.deviceUsers.block
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersBlock : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Blocks device from accessing user data
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersBlock
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancels an unfinished user account wipe. This operation can be used to
 *  cancel device wipe in the gap between the wipe operation returning success
 *  and the device being wiped.
 *
 *  Method: cloudidentity.devices.deviceUsers.cancelWipe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersCancelWipe : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Cancels an unfinished user account wipe. This operation can be used to
 *  cancel device wipe in the gap between the wipe operation returning success
 *  and the device being wiped.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest
 *    to include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersCancelWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the client state for the device user
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesGet : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  ClientState in format:
 *  `devices/{device}/deviceUsers/{device_user}/clientStates/{partner}`, where
 *  `device` is the unique ID assigned to the Device, `device_user` is the
 *  unique ID assigned to the User and `partner` identifies the partner storing
 *  the data. To get the client state for devices belonging to your own
 *  organization, the `partnerId` is in the format: `customerId-*anystring*`.
 *  Where the `customerId` is your organization's customer ID and `anystring` is
 *  any suffix. This suffix is used in setting up Custom Access Levels in
 *  Context-Aware Access. You may use `my_customer` instead of the customer ID
 *  for devices managed by your own organization. You may specify `-` in place
 *  of the `{device}`, so the ClientState resource name can be:
 *  `devices/-/deviceUsers/{device_user_resource}/clientStates/{partner}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState.
 *
 *  Gets the client state for the device user
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    ClientState in format:
 *    `devices/{device}/deviceUsers/{device_user}/clientStates/{partner}`, where
 *    `device` is the unique ID assigned to the Device, `device_user` is the
 *    unique ID assigned to the User and `partner` identifies the partner
 *    storing the data. To get the client state for devices belonging to your
 *    own organization, the `partnerId` is in the format:
 *    `customerId-*anystring*`. Where the `customerId` is your organization's
 *    customer ID and `anystring` is any suffix. This suffix is used in setting
 *    up Custom Access Levels in Context-Aware Access. You may use `my_customer`
 *    instead of the customer ID for devices managed by your own organization.
 *    You may specify `-` in place of the `{device}`, so the ClientState
 *    resource name can be:
 *    `devices/-/deviceUsers/{device_user_resource}/clientStates/{partner}`.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the client states for the given search query.
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesList : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** Optional. Additional restrictions when fetching list of client states. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Order specification for client states in the response. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. A page token, received from a previous `ListClientStates` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListClientStates` must match the call that provided
 *  the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. To list all ClientStates, set this to "devices/-/deviceUsers/-".
 *  To list all ClientStates owned by a DeviceUser, set this to the resource
 *  name of the DeviceUser. Format: devices/{device}/deviceUsers/{deviceUser}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListClientStatesResponse.
 *
 *  Lists the client states for the given search query.
 *
 *  @param parent Required. To list all ClientStates, set this to
 *    "devices/-/deviceUsers/-". To list all ClientStates owned by a DeviceUser,
 *    set this to the resource name of the DeviceUser. Format:
 *    devices/{device}/deviceUsers/{deviceUser}
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the client state for the device user **Note**: This method is
 *  available only to customers who have one of the following SKUs: Enterprise
 *  Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity
 *  Premium
 *
 *  Method: cloudidentity.devices.deviceUsers.clientStates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesPatch : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Output only. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  ClientState in format:
 *  `devices/{device}/deviceUsers/{device_user}/clientState/{partner}`, where
 *  partner corresponds to the partner storing the data. For partners belonging
 *  to the "BeyondCorp Alliance", this is the partner ID specified to you by
 *  Google. For all other callers, this is a string of the form:
 *  `{customer}-suffix`, where `customer` is your customer ID. The *suffix* is
 *  any string the caller specifies. This string will be displayed verbatim in
 *  the administration console. This suffix is used in setting up Custom Access
 *  Levels in Context-Aware Access. Your organization's customer ID can be
 *  obtained from the URL: `GET
 *  https://www.googleapis.com/admin/directory/v1/customers/my_customer` The
 *  `id` field in the response contains the customer ID starting with the letter
 *  'C'. The customer ID to be used in this API is the string after the letter
 *  'C' (not including 'C')
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Comma-separated list of fully qualified names of fields to be
 *  updated. If not specified, all updatable fields in ClientState are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Updates the client state for the device user **Note**: This method is
 *  available only to customers who have one of the following SKUs: Enterprise
 *  Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity
 *  Premium
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState to include
 *    in the query.
 *  @param name Output only. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    ClientState in format:
 *    `devices/{device}/deviceUsers/{device_user}/clientState/{partner}`, where
 *    partner corresponds to the partner storing the data. For partners
 *    belonging to the "BeyondCorp Alliance", this is the partner ID specified
 *    to you by Google. For all other callers, this is a string of the form:
 *    `{customer}-suffix`, where `customer` is your customer ID. The *suffix* is
 *    any string the caller specifies. This string will be displayed verbatim in
 *    the administration console. This suffix is used in setting up Custom
 *    Access Levels in Context-Aware Access. Your organization's customer ID can
 *    be obtained from the URL: `GET
 *    https://www.googleapis.com/admin/directory/v1/customers/my_customer` The
 *    `id` field in the response contains the customer ID starting with the
 *    letter 'C'. The customer ID to be used in this API is the string after the
 *    letter 'C' (not including 'C')
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersClientStatesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ClientState *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified DeviceUser. This also revokes the user's access to
 *  device data.
 *
 *  Method: cloudidentity.devices.deviceUsers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersDelete : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes the specified DeviceUser. This also revokes the user's access to
 *  device data.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves the specified DeviceUser
 *
 *  Method: cloudidentity.devices.deviceUsers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersGet : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1DeviceUser.
 *
 *  Retrieves the specified DeviceUser
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists/Searches DeviceUsers.
 *
 *  Method: cloudidentity.devices.deviceUsers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersList : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer.
 *  If you're using this API for your own organization, use
 *  `customers/my_customer` If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. Additional restrictions when fetching list of devices. For a list
 *  of search fields, refer to [Mobile device search
 *  fields](https://developers.google.com/admin-sdk/directory/v1/search-operators).
 *  Multiple search fields are separated by the space character.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Order specification for devices in the response. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of DeviceUsers to return. If unspecified, at
 *  most 5 DeviceUsers will be returned. The maximum value is 20; values above
 *  20 will be coerced to 20.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListDeviceUsers` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListBooks` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. To list all DeviceUsers, set this to "devices/-". To list all
 *  DeviceUsers owned by a device, set this to the resource name of the device.
 *  Format: devices/{device}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse.
 *
 *  Lists/Searches DeviceUsers.
 *
 *  @param parent Required. To list all DeviceUsers, set this to "devices/-". To
 *    list all DeviceUsers owned by a device, set this to the resource name of
 *    the device. Format: devices/{device}
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Looks up resource names of the DeviceUsers associated with the caller's
 *  credentials, as well as the properties provided in the request. This method
 *  must be called with end-user credentials with the scope:
 *  https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple
 *  properties are provided, only DeviceUsers having all of these properties are
 *  considered as matches - i.e. the query behaves like an AND. Different
 *  platforms require different amounts of information from the caller to ensure
 *  that the DeviceUser is uniquely identified. - iOS: No properties need to be
 *  passed, the caller's credentials are sufficient to identify the
 *  corresponding DeviceUser. - Android: Specifying the 'android_id' field is
 *  required. - Desktop: Specifying the 'raw_resource_id' field is required.
 *
 *  Method: cloudidentity.devices.deviceUsers.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesLookup
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersLookup : GTLRCloudIdentityQuery

/**
 *  Android Id returned by
 *  [Settings.Secure#ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).
 */
@property(nonatomic, copy, nullable) NSString *androidId;

/**
 *  The maximum number of DeviceUsers to return. If unspecified, at most 20
 *  DeviceUsers will be returned. The maximum value is 20; values above 20 will
 *  be coerced to 20.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `LookupDeviceUsers` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `LookupDeviceUsers` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Must be set to "devices/-/deviceUsers" to search across all DeviceUser
 *  belonging to the user.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Raw Resource Id used by Google Endpoint Verification. If the user is
 *  enrolled into Google Endpoint Verification, this id will be saved as the
 *  'device_resource_id' field in the following platform dependent files. Mac:
 *  ~/.secureConnect/context_aware_config.json Windows:
 *  C:\\Users\\%USERPROFILE%\\.secureConnect\\context_aware_config.json Linux:
 *  ~/.secureConnect/context_aware_config.json
 */
@property(nonatomic, copy, nullable) NSString *rawResourceId;

/**
 *  The user whose DeviceUser's resource name will be fetched. Must be set to
 *  'me' to fetch the DeviceUser's resource name for the calling user.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse.
 *
 *  Looks up resource names of the DeviceUsers associated with the caller's
 *  credentials, as well as the properties provided in the request. This method
 *  must be called with end-user credentials with the scope:
 *  https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple
 *  properties are provided, only DeviceUsers having all of these properties are
 *  considered as matches - i.e. the query behaves like an AND. Different
 *  platforms require different amounts of information from the caller to ensure
 *  that the DeviceUser is uniquely identified. - iOS: No properties need to be
 *  passed, the caller's credentials are sufficient to identify the
 *  corresponding DeviceUser. - Android: Specifying the 'android_id' field is
 *  required. - Desktop: Specifying the 'raw_resource_id' field is required.
 *
 *  @param parent Must be set to "devices/-/deviceUsers" to search across all
 *    DeviceUser belonging to the user.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersLookup
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Wipes the user's account on a device. Other data on the device that is not
 *  associated with the user's work account is not affected. For example, if a
 *  Gmail app is installed on a device that is used for personal and work
 *  purposes, and the user is logged in to the Gmail app with their personal
 *  account as well as their work account, wiping the "deviceUser" by their work
 *  administrator will not affect their personal account within Gmail or other
 *  apps such as Photos.
 *
 *  Method: cloudidentity.devices.deviceUsers.wipe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesDeviceUsersWipe : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Wipes the user's account on a device. Other data on the device that is not
 *  associated with the user's work account is not affected. For example, if a
 *  Gmail app is installed on a device that is used for personal and work
 *  purposes, and the user is logged in to the Gmail app with their personal
 *  account as well as their work account, wiping the "deviceUser" by their work
 *  administrator will not affect their personal account within Gmail or other
 *  apps such as Photos.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest to
 *    include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesDeviceUsersWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves the specified device.
 *
 *  Method: cloudidentity.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesGet : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Customer
 *  in the format: `customers/{customer}`, where customer is the customer to
 *  whom the device belongs. If you're using this API for your own organization,
 *  use `customers/my_customer`. If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  the format: `devices/{device}`, where device is the unique ID assigned to
 *  the Device.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1Device.
 *
 *  Retrieves the specified device.
 *
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in the format: `devices/{device}`, where device is the unique ID assigned
 *    to the Device.
 *
 *  @return GTLRCloudIdentityQuery_DevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists/Searches devices.
 *
 *  Method: cloudidentity.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevicesReadonly
 */
@interface GTLRCloudIdentityQuery_DevicesList : GTLRCloudIdentityQuery

/**
 *  Optional. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the customer
 *  in the format: `customers/{customer}`, where customer is the customer to
 *  whom the device belongs. If you're using this API for your own organization,
 *  use `customers/my_customer`. If you're using this API to manage another
 *  organization, use `customers/{customer}`, where customer is the customer to
 *  whom the device belongs.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. Additional restrictions when fetching list of devices. For a list
 *  of search fields, refer to [Mobile device search
 *  fields](https://developers.google.com/admin-sdk/directory/v1/search-operators).
 *  Multiple search fields are separated by the space character.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Order specification for devices in the response. Only one of the
 *  following field names may be used to specify the order: `create_time`,
 *  `last_sync_time`, `model`, `os_version`, `device_type` and `serial_number`.
 *  `desc` may be specified optionally at the end to specify results to be
 *  sorted in descending order. Default order is ascending.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of Devices to return. If unspecified, at most
 *  20 Devices will be returned. The maximum value is 100; values above 100 will
 *  be coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListDevices` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListDevices` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. The view to use for the List request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default value. The value is
 *        unused. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewCompanyInventory This view contains all
 *        devices imported by the company admin. Each device in the response
 *        contains all information specified by the company admin when importing
 *        the device (i.e. asset tags). This includes devices that may be
 *        unaassigned or assigned to users. (Value: "COMPANY_INVENTORY")
 *    @arg @c kGTLRCloudIdentityViewUserAssignedDevices This view contains all
 *        devices with at least one user registered on the device. Each device
 *        in the response contains all device information, except for asset
 *        tags. (Value: "USER_ASSIGNED_DEVICES")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c
 *  GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1ListDevicesResponse.
 *
 *  Lists/Searches devices.
 *
 *  @return GTLRCloudIdentityQuery_DevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Wipes all data on the specified device.
 *
 *  Method: cloudidentity.devices.wipe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityDevices
 */
@interface GTLRCloudIdentityQuery_DevicesWipe : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the Device in
 *  format: `devices/{device}/deviceUsers/{device_user}`, where device is the
 *  unique ID assigned to the Device, and device_user is the unique ID assigned
 *  to the User.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Wipes all data on the specified device.
 *
 *  @param object The @c
 *    GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceRequest to
 *    include in the query.
 *  @param name Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the Device
 *    in format: `devices/{device}/deviceUsers/{device_user}`, where device is
 *    the unique ID assigned to the Device, and device_user is the unique ID
 *    assigned to the User.
 *
 *  @return GTLRCloudIdentityQuery_DevicesWipe
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_GoogleAppsCloudidentityDevicesV1WipeDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Group.
 *
 *  Method: cloudidentity.groups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsCreate : GTLRCloudIdentityQuery

/**
 *  Optional. The initial configuration option for the `Group`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigInitialGroupConfigUnspecified
 *        Default. Should not be used. (Value:
 *        "INITIAL_GROUP_CONFIG_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigWithInitialOwner The end user
 *        making the request will be added as the initial owner of the `Group`.
 *        (Value: "WITH_INITIAL_OWNER")
 *    @arg @c kGTLRCloudIdentityInitialGroupConfigEmpty An empty group is
 *        created without any initial owners. This can only be used by admins of
 *        the domain. (Value: "EMPTY")
 */
@property(nonatomic, copy, nullable) NSString *initialGroupConfig;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a Group.
 *
 *  @param object The @c GTLRCloudIdentity_Group to include in the query.
 *
 *  @return GTLRCloudIdentityQuery_GroupsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Group *)object;

@end

/**
 *  Deletes a `Group`.
 *
 *  Method: cloudidentity.groups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsDelete : GTLRCloudIdentityQuery

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the `Group` to
 *  retrieve. Must be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes a `Group`.
 *
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the `Group`
 *    to retrieve. Must be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a `Group`.
 *
 *  Method: cloudidentity.groups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsGet : GTLRCloudIdentityQuery

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the `Group` to
 *  retrieve. Must be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Group.
 *
 *  Retrieves a `Group`.
 *
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the `Group`
 *    to retrieve. Must be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get Security Settings
 *
 *  Method: cloudidentity.groups.getSecuritySettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsGetSecuritySettings : GTLRCloudIdentityQuery

/**
 *  Required. The security settings to retrieve. Format:
 *  `groups/{group_id}/securitySettings`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Field-level read mask of which fields to return. "*" returns all fields. If
 *  not specified, all fields will be returned. May only contain the following
 *  field: `member_restriction`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c GTLRCloudIdentity_SecuritySettings.
 *
 *  Get Security Settings
 *
 *  @param name Required. The security settings to retrieve. Format:
 *    `groups/{group_id}/securitySettings`
 *
 *  @return GTLRCloudIdentityQuery_GroupsGetSecuritySettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the `Group` resources under a customer or namespace.
 *
 *  Method: cloudidentity.groups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsList : GTLRCloudIdentityQuery

/**
 *  The maximum number of results to return. Note that the number of results
 *  returned may be less than this value even if there are more available
 *  results. To fetch all results, clients must continue calling this method
 *  repeatedly until the response no longer contains a `next_page_token`. If
 *  unspecified, defaults to 200 for `View.BASIC` and to 50 for `View.FULL`.
 *  Must not be greater than 1000 for `View.BASIC` or 500 for `View.FULL`.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous list request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource under which to list all `Group` resources.
 *  Must be of the form `identitysources/{identity_source}` for external-
 *  identity-mapped groups or `customers/{customer}` for Google Groups. The
 *  `customer` must begin with "C" (for example, 'C046psxkn').
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The level of detail to be returned. If unspecified, defaults to
 *  `View.BASIC`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Only basic resource information is
 *        returned. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull All resource information is returned.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_ListGroupsResponse.
 *
 *  Lists the `Group` resources under a customer or namespace.
 *
 *  @return GTLRCloudIdentityQuery_GroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Looks up the [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a `Group` by
 *  its `EntityKey`.
 *
 *  Method: cloudidentity.groups.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsLookup : GTLRCloudIdentityQuery

/**
 *  The ID of the entity. For Google-managed entities, the `id` should be the
 *  email address of an existing group or user. For external-identity-mapped
 *  entities, the `id` must be a string conforming to the Identity Source's
 *  requirements. Must be unique within a `namespace`.
 */
@property(nonatomic, copy, nullable) NSString *groupKeyId;

/**
 *  The namespace in which the entity exists. If not specified, the `EntityKey`
 *  represents a Google-managed entity such as a Google user or a Google Group.
 *  If specified, the `EntityKey` represents an external-identity-mapped group.
 *  The namespace must correspond to an identity source created in Admin Console
 *  and must be in the form of `identitysources/{identity_source}`.
 */
@property(nonatomic, copy, nullable) NSString *groupKeyNamespace;

/**
 *  Fetches a @c GTLRCloudIdentity_LookupGroupNameResponse.
 *
 *  Looks up the [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a `Group` by
 *  its `EntityKey`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsLookup
 */
+ (instancetype)query;

@end

/**
 *  Check a potential member for membership in a group. **Note:** This feature
 *  is only available to Google Workspace Enterprise Standard, Enterprise Plus,
 *  and Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A member has membership to a group as long as
 *  there is a single viewable transitive membership between the group and the
 *  member. The actor must have view permissions to at least one transitive
 *  membership between the member and group.
 *
 *  Method: cloudidentity.groups.memberships.checkTransitiveMembership
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsCheckTransitiveMembership : GTLRCloudIdentityQuery

/**
 *  [Resource name](https://cloud.google.com/apis/design/resource_names) of the
 *  group to check the transitive membership in. Format: `groups/{group}`, where
 *  `group` is the unique id assigned to the Group to which the Membership
 *  belongs to.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A CEL expression that MUST include member specification. This is a
 *  `required` field. Certain groups are uniquely identified by both a
 *  'member_key_id' and a 'member_key_namespace', which requires an additional
 *  query input: 'member_key_namespace'. Example query: `member_key_id ==
 *  'member_key_id_value'`
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRCloudIdentity_CheckTransitiveMembershipResponse.
 *
 *  Check a potential member for membership in a group. **Note:** This feature
 *  is only available to Google Workspace Enterprise Standard, Enterprise Plus,
 *  and Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A member has membership to a group as long as
 *  there is a single viewable transitive membership between the group and the
 *  member. The actor must have view permissions to at least one transitive
 *  membership between the member and group.
 *
 *  @param parent [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the group to
 *    check the transitive membership in. Format: `groups/{group}`, where
 *    `group` is the unique id assigned to the Group to which the Membership
 *    belongs to.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsCheckTransitiveMembership
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a `Membership`.
 *
 *  Method: cloudidentity.groups.memberships.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsCreate : GTLRCloudIdentityQuery

/**
 *  Required. The parent `Group` resource under which to create the
 *  `Membership`. Must be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Creates a `Membership`.
 *
 *  @param object The @c GTLRCloudIdentity_Membership to include in the query.
 *  @param parent Required. The parent `Group` resource under which to create
 *    the `Membership`. Must be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Membership *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a `Membership`.
 *
 *  Method: cloudidentity.groups.memberships.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsDelete : GTLRCloudIdentityQuery

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  `Membership` to delete. Must be of the form
 *  `groups/{group}/memberships/{membership}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Deletes a `Membership`.
 *
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    `Membership` to delete. Must be of the form
 *    `groups/{group}/memberships/{membership}`
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a `Membership`.
 *
 *  Method: cloudidentity.groups.memberships.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsGet : GTLRCloudIdentityQuery

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  `Membership` to retrieve. Must be of the form
 *  `groups/{group}/memberships/{membership}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_Membership.
 *
 *  Retrieves a `Membership`.
 *
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    `Membership` to retrieve. Must be of the form
 *    `groups/{group}/memberships/{membership}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a membership graph of just a member or both a member and a group.
 *  **Note:** This feature is only available to Google Workspace Enterprise
 *  Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity
 *  Premium accounts. If the account of the member is not one of these, a 403
 *  (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the
 *  response will contain all membership paths from the member. Given both a
 *  group and a member, the response will contain all membership paths between
 *  the group and the member.
 *
 *  Method: cloudidentity.groups.memberships.getMembershipGraph
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsGetMembershipGraph : GTLRCloudIdentityQuery

/**
 *  Required. [Resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the group to
 *  search transitive memberships in. Format: `groups/{group}`, where `group` is
 *  the unique ID assigned to the Group to which the Membership belongs to.
 *  group can be a wildcard collection id "-". When a group is specified, the
 *  membership graph will be constrained to paths between the member (defined in
 *  the query) and the parent. If a wildcard collection is provided, all
 *  membership paths connected to the member will be returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A CEL expression that MUST include member specification AND
 *  label(s). Certain groups are uniquely identified by both a 'member_key_id'
 *  and a 'member_key_namespace', which requires an additional query input:
 *  'member_key_namespace'. Example query: `member_key_id ==
 *  'member_key_id_value' && in labels`
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Get a membership graph of just a member or both a member and a group.
 *  **Note:** This feature is only available to Google Workspace Enterprise
 *  Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity
 *  Premium accounts. If the account of the member is not one of these, a 403
 *  (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the
 *  response will contain all membership paths from the member. Given both a
 *  group and a member, the response will contain all membership paths between
 *  the group and the member.
 *
 *  @param parent Required. [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the group to
 *    search transitive memberships in. Format: `groups/{group}`, where `group`
 *    is the unique ID assigned to the Group to which the Membership belongs to.
 *    group can be a wildcard collection id "-". When a group is specified, the
 *    membership graph will be constrained to paths between the member (defined
 *    in the query) and the parent. If a wildcard collection is provided, all
 *    membership paths connected to the member will be returned.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsGetMembershipGraph
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists the `Membership`s within a `Group`.
 *
 *  Method: cloudidentity.groups.memberships.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsList : GTLRCloudIdentityQuery

/**
 *  The maximum number of results to return. Note that the number of results
 *  returned may be less than this value even if there are more available
 *  results. To fetch all results, clients must continue calling this method
 *  repeatedly until the response no longer contains a `next_page_token`. If
 *  unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for
 *  `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500
 *  for `GroupView.FULL`.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous search request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent `Group` resource under which to lookup the `Membership`
 *  name. Must be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The level of detail to be returned. If unspecified, defaults to
 *  `View.BASIC`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Only basic resource information is
 *        returned. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull All resource information is returned.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_ListMembershipsResponse.
 *
 *  Lists the `Membership`s within a `Group`.
 *
 *  @param parent Required. The parent `Group` resource under which to lookup
 *    the `Membership` name. Must be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Looks up the [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a `Membership`
 *  by its `EntityKey`.
 *
 *  Method: cloudidentity.groups.memberships.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsLookup : GTLRCloudIdentityQuery

/**
 *  The ID of the entity. For Google-managed entities, the `id` should be the
 *  email address of an existing group or user. For external-identity-mapped
 *  entities, the `id` must be a string conforming to the Identity Source's
 *  requirements. Must be unique within a `namespace`.
 */
@property(nonatomic, copy, nullable) NSString *memberKeyId;

/**
 *  The namespace in which the entity exists. If not specified, the `EntityKey`
 *  represents a Google-managed entity such as a Google user or a Google Group.
 *  If specified, the `EntityKey` represents an external-identity-mapped group.
 *  The namespace must correspond to an identity source created in Admin Console
 *  and must be in the form of `identitysources/{identity_source}`.
 */
@property(nonatomic, copy, nullable) NSString *memberKeyNamespace;

/**
 *  Required. The parent `Group` resource under which to lookup the `Membership`
 *  name. Must be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_LookupMembershipNameResponse.
 *
 *  Looks up the [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of a `Membership`
 *  by its `EntityKey`.
 *
 *  @param parent Required. The parent `Group` resource under which to lookup
 *    the `Membership` name. Must be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsLookup
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Modifies the `MembershipRole`s of a `Membership`.
 *
 *  Method: cloudidentity.groups.memberships.modifyMembershipRoles
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsModifyMembershipRoles : GTLRCloudIdentityQuery

/**
 *  Required. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the
 *  `Membership` whose roles are to be modified. Must be of the form
 *  `groups/{group}/memberships/{membership}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudIdentity_ModifyMembershipRolesResponse.
 *
 *  Modifies the `MembershipRole`s of a `Membership`.
 *
 *  @param object The @c GTLRCloudIdentity_ModifyMembershipRolesRequest to
 *    include in the query.
 *  @param name Required. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the
 *    `Membership` whose roles are to be modified. Must be of the form
 *    `groups/{group}/memberships/{membership}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsModifyMembershipRoles
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_ModifyMembershipRolesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Search transitive groups of a member. **Note:** This feature is only
 *  available to Google Workspace Enterprise Standard, Enterprise Plus, and
 *  Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A transitive group is any group that has a
 *  direct or indirect membership to the member. Actor must have view
 *  permissions all transitive groups.
 *
 *  Method: cloudidentity.groups.memberships.searchTransitiveGroups
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsSearchTransitiveGroups : GTLRCloudIdentityQuery

/** The default page size is 200 (max 1000). */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous list request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  [Resource name](https://cloud.google.com/apis/design/resource_names) of the
 *  group to search transitive memberships in. Format: `groups/{group}`, where
 *  `group` is always '-' as this API will search across all groups for a given
 *  member.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A CEL expression that MUST include member specification AND
 *  label(s). This is a `required` field. Users can search on label attributes
 *  of groups. CONTAINS match ('in') is supported on labels. Identity-mapped
 *  groups are uniquely identified by both a `member_key_id` and a
 *  `member_key_namespace`, which requires an additional query input:
 *  `member_key_namespace`. Example query: `member_key_id ==
 *  'member_key_id_value' && in labels`
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRCloudIdentity_SearchTransitiveGroupsResponse.
 *
 *  Search transitive groups of a member. **Note:** This feature is only
 *  available to Google Workspace Enterprise Standard, Enterprise Plus, and
 *  Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A transitive group is any group that has a
 *  direct or indirect membership to the member. Actor must have view
 *  permissions all transitive groups.
 *
 *  @param parent [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the group to
 *    search transitive memberships in. Format: `groups/{group}`, where `group`
 *    is always '-' as this API will search across all groups for a given
 *    member.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsSearchTransitiveGroups
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Search transitive memberships of a group. **Note:** This feature is only
 *  available to Google Workspace Enterprise Standard, Enterprise Plus, and
 *  Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A transitive membership is any direct or
 *  indirect membership of a group. Actor must have view permissions to all
 *  transitive memberships.
 *
 *  Method: cloudidentity.groups.memberships.searchTransitiveMemberships
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsMembershipsSearchTransitiveMemberships : GTLRCloudIdentityQuery

/** The default page size is 200 (max 1000). */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous list request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  [Resource name](https://cloud.google.com/apis/design/resource_names) of the
 *  group to search transitive memberships in. Format: `groups/{group}`, where
 *  `group` is the unique ID assigned to the Group.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudIdentity_SearchTransitiveMembershipsResponse.
 *
 *  Search transitive memberships of a group. **Note:** This feature is only
 *  available to Google Workspace Enterprise Standard, Enterprise Plus, and
 *  Enterprise for Education; and Cloud Identity Premium accounts. If the
 *  account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP
 *  status code will be returned. A transitive membership is any direct or
 *  indirect membership of a group. Actor must have view permissions to all
 *  transitive memberships.
 *
 *  @param parent [Resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the group to
 *    search transitive memberships in. Format: `groups/{group}`, where `group`
 *    is the unique ID assigned to the Group.
 *
 *  @return GTLRCloudIdentityQuery_GroupsMembershipsSearchTransitiveMemberships
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a `Group`.
 *
 *  Method: cloudidentity.groups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsPatch : GTLRCloudIdentityQuery

/**
 *  Output only. The [resource
 *  name](https://cloud.google.com/apis/design/resource_names) of the `Group`.
 *  Shall be of the form `groups/{group}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The names of fields to update. May only contain the following
 *  field names: `display_name`, `description`, `labels`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Updates a `Group`.
 *
 *  @param object The @c GTLRCloudIdentity_Group to include in the query.
 *  @param name Output only. The [resource
 *    name](https://cloud.google.com/apis/design/resource_names) of the `Group`.
 *    Shall be of the form `groups/{group}`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_Group *)object
                           name:(NSString *)name;

@end

/**
 *  Searches for `Group` resources matching a specified query.
 *
 *  Method: cloudidentity.groups.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroupsReadonly
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsSearch : GTLRCloudIdentityQuery

/**
 *  The maximum number of results to return. Note that the number of results
 *  returned may be less than this value even if there are more available
 *  results. To fetch all results, clients must continue calling this method
 *  repeatedly until the response no longer contains a `next_page_token`. If
 *  unspecified, defaults to 200 for `GroupView.BASIC` and 50 for
 *  `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500
 *  for `GroupView.FULL`.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous search request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The search query. Must be specified in [Common Expression
 *  Language](https://opensource.google/projects/cel). May only contain equality
 *  operators on the parent and inclusion operators on labels (e.g., `parent ==
 *  'customers/{customer}' &&
 *  'cloudidentity.googleapis.com/groups.discussion_forum' in labels`). The
 *  `customer` must begin with "C" (for example, 'C046psxkn').
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  The level of detail to be returned. If unspecified, defaults to
 *  `View.BASIC`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIdentityViewViewUnspecified Default. Should not be used.
 *        (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudIdentityViewBasic Only basic resource information is
 *        returned. (Value: "BASIC")
 *    @arg @c kGTLRCloudIdentityViewFull All resource information is returned.
 *        (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudIdentity_SearchGroupsResponse.
 *
 *  Searches for `Group` resources matching a specified query.
 *
 *  @return GTLRCloudIdentityQuery_GroupsSearch
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Update Security Settings
 *
 *  Method: cloudidentity.groups.updateSecuritySettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudIdentityCloudIdentityGroups
 *    @c kGTLRAuthScopeCloudIdentityCloudPlatform
 */
@interface GTLRCloudIdentityQuery_GroupsUpdateSecuritySettings : GTLRCloudIdentityQuery

/**
 *  Output only. The resource name of the security settings. Shall be of the
 *  form `groups/{group_id}/securitySettings`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The fully-qualified names of fields to update. May only contain
 *  the following field: `member_restriction.query`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudIdentity_Operation.
 *
 *  Update Security Settings
 *
 *  @param object The @c GTLRCloudIdentity_SecuritySettings to include in the
 *    query.
 *  @param name Output only. The resource name of the security settings. Shall
 *    be of the form `groups/{group_id}/securitySettings`.
 *
 *  @return GTLRCloudIdentityQuery_GroupsUpdateSecuritySettings
 */
+ (instancetype)queryWithObject:(GTLRCloudIdentity_SecuritySettings *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
