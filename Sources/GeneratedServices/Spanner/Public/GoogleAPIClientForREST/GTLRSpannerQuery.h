// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Spanner API (spanner/v1)
// Description:
//   Cloud Spanner is a managed, mission-critical, globally consistent and
//   scalable relational database service.
// Documentation:
//   https://cloud.google.com/spanner/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSpannerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// encryptionConfigEncryptionType

/**
 *  Use customer managed encryption. If specified, `kms_key_name` must contain a
 *  valid Cloud KMS key.
 *
 *  Value: "CUSTOMER_MANAGED_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerEncryptionConfigEncryptionTypeCustomerManagedEncryption;
/**
 *  Unspecified. Do not use.
 *
 *  Value: "ENCRYPTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerEncryptionConfigEncryptionTypeEncryptionTypeUnspecified;
/**
 *  Use Google default encryption.
 *
 *  Value: "GOOGLE_DEFAULT_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerEncryptionConfigEncryptionTypeGoogleDefaultEncryption;
/**
 *  Use the same encryption configuration as the database. This is the default
 *  option when encryption_config is empty. For example, if the database is
 *  using `Customer_Managed_Encryption`, the backup will be using the same Cloud
 *  KMS key as the database.
 *
 *  Value: "USE_DATABASE_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerEncryptionConfigEncryptionTypeUseDatabaseEncryption;

// ----------------------------------------------------------------------------
// view

/**
 *  Full representation of the scan is returned in the server response,
 *  including `data`.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerViewFull;
/**
 *  Server responses only include `name`, `details`, `start_time` and
 *  `end_time`. The default value. Note, the ListScans method may only use this
 *  view type, others view types are not supported.
 *
 *  Value: "SUMMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerViewSummary;
/**
 *  Not specified, equivalent to SUMMARY.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSpannerViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Spanner query classes.
 */
@interface GTLRSpannerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists the user-managed instance config long-running operations in the given
 *  project. An instance config operation has a name of the form
 *  `projects//instanceConfigs//operations/`. The long-running operation
 *  metadata field type `metadata.type_url` describes the type of the metadata.
 *  Operations returned include those that have completed/failed/canceled within
 *  the last 7 days, and pending operations. Operations returned are ordered by
 *  `operation.metadata.value.start_time` in descending order starting from the
 *  most recently started operation.
 *
 *  Method: spanner.projects.instanceConfigOperations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigOperationsList : GTLRSpannerQuery

/**
 *  An expression that filters the list of returned operations. A filter
 *  expression consists of a field name, a comparison operator, and a value for
 *  filtering. The value must be a string, a number, or a boolean. The
 *  comparison operator must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
 *  Colon `:` is the contains operator. Filter rules are not case sensitive. The
 *  following fields in the Operation are eligible for filtering: * `name` - The
 *  name of the long-running operation * `done` - False if the operation is in
 *  progress, else true. * `metadata.\@type` - the type of metadata. For
 *  example, the type string for CreateInstanceConfigMetadata is
 *  `type.googleapis.com/google.spanner.admin.instance.v1.CreateInstanceConfigMetadata`.
 *  * `metadata.` - any field in metadata.value. `metadata.\@type` must be
 *  specified first, if filtering on metadata fields. * `error` - Error
 *  associated with the long-running operation. * `response.\@type` - the type
 *  of response. * `response.` - any field in response.value. You can combine
 *  multiple expressions by enclosing each expression in parentheses. By
 *  default, expressions are combined with AND logic. However, you can specify
 *  AND, OR, and NOT logic explicitly. Here are a few examples: * `done:true` -
 *  The operation is complete. * `(metadata.\@type=` \\
 *  `type.googleapis.com/google.spanner.admin.instance.v1.CreateInstanceConfigMetadata)
 *  AND` \\ `(metadata.instance_config.name:custom-config) AND` \\
 *  `(metadata.progress.start_time < \\"2021-03-28T14:50:00Z\\") AND` \\
 *  `(error:*)` - Return operations where: * The operation's metadata type is
 *  CreateInstanceConfigMetadata. * The instance config name contains
 *  "custom-config". * The operation started before 2021-03-28T14:50:00Z. * The
 *  operation resulted in an error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of operations to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListInstanceConfigOperationsResponse to the same `parent` and with the same
 *  `filter`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project of the instance config operations. Values are of the
 *  form `projects/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListInstanceConfigOperationsResponse.
 *
 *  Lists the user-managed instance config long-running operations in the given
 *  project. An instance config operation has a name of the form
 *  `projects//instanceConfigs//operations/`. The long-running operation
 *  metadata field type `metadata.type_url` describes the type of the metadata.
 *  Operations returned include those that have completed/failed/canceled within
 *  the last 7 days, and pending operations. Operations returned are ordered by
 *  `operation.metadata.value.start_time` in descending order starting from the
 *  most recently started operation.
 *
 *  @param parent Required. The project of the instance config operations.
 *    Values are of the form `projects/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates an instance config and begins preparing it to be used. The returned
 *  long-running operation can be used to track the progress of preparing the
 *  new instance config. The instance config name is assigned by the caller. If
 *  the named instance config already exists, `CreateInstanceConfig` returns
 *  `ALREADY_EXISTS`. Immediately after the request returns: * The instance
 *  config is readable via the API, with all requested attributes. The instance
 *  config's reconciling field is set to true. Its state is `CREATING`. While
 *  the operation is pending: * Cancelling the operation renders the instance
 *  config immediately unreadable via the API. * Except for deleting the
 *  creating resource, all other attempts to modify the instance config are
 *  rejected. Upon completion of the returned operation: * Instances can be
 *  created using the instance configuration. * The instance config's
 *  reconciling field becomes false. Its state becomes `READY`. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track creation of the instance config. The metadata field type is
 *  CreateInstanceConfigMetadata. The response field type is InstanceConfig, if
 *  successful. Authorization requires `spanner.instanceConfigs.create`
 *  permission on the resource parent.
 *
 *  Method: spanner.projects.instanceConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsCreate : GTLRSpannerQuery

/**
 *  Required. The name of the project in which to create the instance config.
 *  Values are of the form `projects/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Creates an instance config and begins preparing it to be used. The returned
 *  long-running operation can be used to track the progress of preparing the
 *  new instance config. The instance config name is assigned by the caller. If
 *  the named instance config already exists, `CreateInstanceConfig` returns
 *  `ALREADY_EXISTS`. Immediately after the request returns: * The instance
 *  config is readable via the API, with all requested attributes. The instance
 *  config's reconciling field is set to true. Its state is `CREATING`. While
 *  the operation is pending: * Cancelling the operation renders the instance
 *  config immediately unreadable via the API. * Except for deleting the
 *  creating resource, all other attempts to modify the instance config are
 *  rejected. Upon completion of the returned operation: * Instances can be
 *  created using the instance configuration. * The instance config's
 *  reconciling field becomes false. Its state becomes `READY`. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track creation of the instance config. The metadata field type is
 *  CreateInstanceConfigMetadata. The response field type is InstanceConfig, if
 *  successful. Authorization requires `spanner.instanceConfigs.create`
 *  permission on the resource parent.
 *
 *  @param object The @c GTLRSpanner_CreateInstanceConfigRequest to include in
 *    the query.
 *  @param parent Required. The name of the project in which to create the
 *    instance config. Values are of the form `projects/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateInstanceConfigRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the instance config. Deletion is only allowed when no instances are
 *  using the configuration. If any instances are using the config, returns
 *  `FAILED_PRECONDITION`. Only user managed configurations can be deleted.
 *  Authorization requires `spanner.instanceConfigs.delete` permission on the
 *  resource name.
 *
 *  Method: spanner.projects.instanceConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsDelete : GTLRSpannerQuery

/**
 *  Used for optimistic concurrency control as a way to help prevent
 *  simultaneous deletes of an instance config from overwriting each other. If
 *  not empty, the API only deletes the instance config when the etag provided
 *  matches the current status of the requested instance config. Otherwise,
 *  deletes the instance config without checking the current status of the
 *  requested instance config.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. The name of the instance configuration to be deleted. Values are
 *  of the form `projects//instanceConfigs/`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  An option to validate, but not actually execute, a request, and provide the
 *  same response.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes the instance config. Deletion is only allowed when no instances are
 *  using the configuration. If any instances are using the config, returns
 *  `FAILED_PRECONDITION`. Only user managed configurations can be deleted.
 *  Authorization requires `spanner.instanceConfigs.delete` permission on the
 *  resource name.
 *
 *  @param name Required. The name of the instance configuration to be deleted.
 *    Values are of the form `projects//instanceConfigs/`
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a particular instance configuration.
 *
 *  Method: spanner.projects.instanceConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsGet : GTLRSpannerQuery

/**
 *  Required. The name of the requested instance configuration. Values are of
 *  the form `projects//instanceConfigs/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_InstanceConfig.
 *
 *  Gets information about a particular instance configuration.
 *
 *  @param name Required. The name of the requested instance configuration.
 *    Values are of the form `projects//instanceConfigs/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the supported instance configurations for a given project.
 *
 *  Method: spanner.projects.instanceConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsList : GTLRSpannerQuery

/**
 *  Number of instance configurations to be returned in the response. If 0 or
 *  less, defaults to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListInstanceConfigsResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project for which a list of supported instance
 *  configurations is requested. Values are of the form `projects/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListInstanceConfigsResponse.
 *
 *  Lists the supported instance configurations for a given project.
 *
 *  @param parent Required. The name of the project for which a list of
 *    supported instance configurations is requested. Values are of the form
 *    `projects/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instanceConfigs.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsOperationsCancel : GTLRSpannerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instanceConfigs.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsOperationsDelete : GTLRSpannerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instanceConfigs.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsOperationsGet : GTLRSpannerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: spanner.projects.instanceConfigs.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsOperationsList : GTLRSpannerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an instance config. The returned long-running operation can be used
 *  to track the progress of updating the instance. If the named instance config
 *  does not exist, returns `NOT_FOUND`. Only user managed configurations can be
 *  updated. Immediately after the request returns: * The instance config's
 *  reconciling field is set to true. While the operation is pending: *
 *  Cancelling the operation sets its metadata's cancel_time. The operation is
 *  guaranteed to succeed at undoing all changes, after which point it
 *  terminates with a `CANCELLED` status. * All other attempts to modify the
 *  instance config are rejected. * Reading the instance config via the API
 *  continues to give the pre-request values. Upon completion of the returned
 *  operation: * Creating instances using the instance configuration uses the
 *  new values. * The instance config's new values are readable via the API. *
 *  The instance config's reconciling field becomes false. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track the instance config modification. The metadata field type
 *  is UpdateInstanceConfigMetadata. The response field type is InstanceConfig,
 *  if successful. Authorization requires `spanner.instanceConfigs.update`
 *  permission on the resource name.
 *
 *  Method: spanner.projects.instanceConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstanceConfigsPatch : GTLRSpannerQuery

/**
 *  A unique identifier for the instance configuration. Values are of the form
 *  `projects//instanceConfigs/a-z*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Updates an instance config. The returned long-running operation can be used
 *  to track the progress of updating the instance. If the named instance config
 *  does not exist, returns `NOT_FOUND`. Only user managed configurations can be
 *  updated. Immediately after the request returns: * The instance config's
 *  reconciling field is set to true. While the operation is pending: *
 *  Cancelling the operation sets its metadata's cancel_time. The operation is
 *  guaranteed to succeed at undoing all changes, after which point it
 *  terminates with a `CANCELLED` status. * All other attempts to modify the
 *  instance config are rejected. * Reading the instance config via the API
 *  continues to give the pre-request values. Upon completion of the returned
 *  operation: * Creating instances using the instance configuration uses the
 *  new values. * The instance config's new values are readable via the API. *
 *  The instance config's reconciling field becomes false. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track the instance config modification. The metadata field type
 *  is UpdateInstanceConfigMetadata. The response field type is InstanceConfig,
 *  if successful. Authorization requires `spanner.instanceConfigs.update`
 *  permission on the resource name.
 *
 *  @param object The @c GTLRSpanner_UpdateInstanceConfigRequest to include in
 *    the query.
 *  @param name A unique identifier for the instance configuration. Values are
 *    of the form `projects//instanceConfigs/a-z*`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstanceConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSpanner_UpdateInstanceConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the backup long-running operations in the given instance. A backup
 *  operation has a name of the form
 *  `projects//instances//backups//operations/`. The long-running operation
 *  metadata field type `metadata.type_url` describes the type of the metadata.
 *  Operations returned include those that have completed/failed/canceled within
 *  the last 7 days, and pending operations. Operations returned are ordered by
 *  `operation.metadata.value.progress.start_time` in descending order starting
 *  from the most recently started operation.
 *
 *  Method: spanner.projects.instances.backupOperations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupOperationsList : GTLRSpannerQuery

/**
 *  An expression that filters the list of returned backup operations. A filter
 *  expression consists of a field name, a comparison operator, and a value for
 *  filtering. The value must be a string, a number, or a boolean. The
 *  comparison operator must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
 *  Colon `:` is the contains operator. Filter rules are not case sensitive. The
 *  following fields in the operation are eligible for filtering: * `name` - The
 *  name of the long-running operation * `done` - False if the operation is in
 *  progress, else true. * `metadata.\@type` - the type of metadata. For
 *  example, the type string for CreateBackupMetadata is
 *  `type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata`.
 *  * `metadata.` - any field in metadata.value. `metadata.\@type` must be
 *  specified first if filtering on metadata fields. * `error` - Error
 *  associated with the long-running operation. * `response.\@type` - the type
 *  of response. * `response.` - any field in response.value. You can combine
 *  multiple expressions by enclosing each expression in parentheses. By
 *  default, expressions are combined with AND logic, but you can specify AND,
 *  OR, and NOT logic explicitly. Here are a few examples: * `done:true` - The
 *  operation is complete. *
 *  `(metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata)
 *  AND` \\ `metadata.database:prod` - Returns operations where: * The
 *  operation's metadata type is CreateBackupMetadata. * The source database
 *  name of backup contains the string "prod". *
 *  `(metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata)
 *  AND` \\ `(metadata.name:howl) AND` \\ `(metadata.progress.start_time <
 *  \\"2018-03-28T14:50:00Z\\") AND` \\ `(error:*)` - Returns operations where:
 *  * The operation's metadata type is CreateBackupMetadata. * The backup name
 *  contains the string "howl". * The operation started before
 *  2018-03-28T14:50:00Z. * The operation resulted in an error. *
 *  `(metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata)
 *  AND` \\ `(metadata.source_backup:test) AND` \\
 *  `(metadata.progress.start_time < \\"2022-01-18T14:50:00Z\\") AND` \\
 *  `(error:*)` - Returns operations where: * The operation's metadata type is
 *  CopyBackupMetadata. * The source backup name contains the string "test". *
 *  The operation started before 2022-01-18T14:50:00Z. * The operation resulted
 *  in an error. *
 *  `((metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata)
 *  AND` \\ `(metadata.database:test_db)) OR` \\
 *  `((metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata)
 *  AND` \\ `(metadata.source_backup:test_bkp)) AND` \\ `(error:*)` - Returns
 *  operations where: * The operation's metadata matches either of criteria: *
 *  The operation's metadata type is CreateBackupMetadata AND the source
 *  database name of the backup contains the string "test_db" * The operation's
 *  metadata type is CopyBackupMetadata AND the source backup name contains the
 *  string "test_bkp" * The operation resulted in an error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of operations to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListBackupOperationsResponse to the same `parent` and with the same
 *  `filter`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The instance of the backup operations. Values are of the form
 *  `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListBackupOperationsResponse.
 *
 *  Lists the backup long-running operations in the given instance. A backup
 *  operation has a name of the form
 *  `projects//instances//backups//operations/`. The long-running operation
 *  metadata field type `metadata.type_url` describes the type of the metadata.
 *  Operations returned include those that have completed/failed/canceled within
 *  the last 7 days, and pending operations. Operations returned are ordered by
 *  `operation.metadata.value.progress.start_time` in descending order starting
 *  from the most recently started operation.
 *
 *  @param parent Required. The instance of the backup operations. Values are of
 *    the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts copying a Cloud Spanner Backup. The returned backup long-running
 *  operation will have a name of the format
 *  `projects//instances//backups//operations/` and can be used to track copying
 *  of the backup. The operation is associated with the destination backup. The
 *  metadata field type is CopyBackupMetadata. The response field type is
 *  Backup, if successful. Cancelling the returned operation will stop the
 *  copying and delete the destination backup. Concurrent CopyBackup requests
 *  can run on the same source backup.
 *
 *  Method: spanner.projects.instances.backups.copy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsCopy : GTLRSpannerQuery

/**
 *  Required. The name of the destination instance that will contain the backup
 *  copy. Values are of the form: `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Starts copying a Cloud Spanner Backup. The returned backup long-running
 *  operation will have a name of the format
 *  `projects//instances//backups//operations/` and can be used to track copying
 *  of the backup. The operation is associated with the destination backup. The
 *  metadata field type is CopyBackupMetadata. The response field type is
 *  Backup, if successful. Cancelling the returned operation will stop the
 *  copying and delete the destination backup. Concurrent CopyBackup requests
 *  can run on the same source backup.
 *
 *  @param object The @c GTLRSpanner_CopyBackupRequest to include in the query.
 *  @param parent Required. The name of the destination instance that will
 *    contain the backup copy. Values are of the form: `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsCopy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CopyBackupRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Starts creating a new Cloud Spanner Backup. The returned backup long-running
 *  operation will have a name of the format
 *  `projects//instances//backups//operations/` and can be used to track
 *  creation of the backup. The metadata field type is CreateBackupMetadata. The
 *  response field type is Backup, if successful. Cancelling the returned
 *  operation will stop the creation and delete the backup. There can be only
 *  one pending backup creation per database. Backup creation of different
 *  databases can run concurrently.
 *
 *  Method: spanner.projects.instances.backups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsCreate : GTLRSpannerQuery

/**
 *  Required. The id of the backup to be created. The `backup_id` appended to
 *  `parent` forms the full backup name of the form
 *  `projects//instances//backups/`.
 */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  Required. The encryption type of the backup.
 *
 *  Likely values:
 *    @arg @c kGTLRSpannerEncryptionConfigEncryptionTypeEncryptionTypeUnspecified
 *        Unspecified. Do not use. (Value: "ENCRYPTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSpannerEncryptionConfigEncryptionTypeUseDatabaseEncryption
 *        Use the same encryption configuration as the database. This is the
 *        default option when encryption_config is empty. For example, if the
 *        database is using `Customer_Managed_Encryption`, the backup will be
 *        using the same Cloud KMS key as the database. (Value:
 *        "USE_DATABASE_ENCRYPTION")
 *    @arg @c kGTLRSpannerEncryptionConfigEncryptionTypeGoogleDefaultEncryption
 *        Use Google default encryption. (Value: "GOOGLE_DEFAULT_ENCRYPTION")
 *    @arg @c kGTLRSpannerEncryptionConfigEncryptionTypeCustomerManagedEncryption
 *        Use customer managed encryption. If specified, `kms_key_name` must
 *        contain a valid Cloud KMS key. (Value: "CUSTOMER_MANAGED_ENCRYPTION")
 */
@property(nonatomic, copy, nullable) NSString *encryptionConfigEncryptionType;

/**
 *  Optional. The Cloud KMS key that will be used to protect the backup. This
 *  field should be set only when encryption_type is
 *  `CUSTOMER_MANAGED_ENCRYPTION`. Values are of the form
 *  `projects//locations//keyRings//cryptoKeys/`.
 */
@property(nonatomic, copy, nullable) NSString *encryptionConfigKmsKeyName;

/**
 *  Required. The name of the instance in which the backup will be created. This
 *  must be the same instance that contains the database the backup will be
 *  created from. The backup will be stored in the location(s) specified in the
 *  instance configuration of this instance. Values are of the form
 *  `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Starts creating a new Cloud Spanner Backup. The returned backup long-running
 *  operation will have a name of the format
 *  `projects//instances//backups//operations/` and can be used to track
 *  creation of the backup. The metadata field type is CreateBackupMetadata. The
 *  response field type is Backup, if successful. Cancelling the returned
 *  operation will stop the creation and delete the backup. There can be only
 *  one pending backup creation per database. Backup creation of different
 *  databases can run concurrently.
 *
 *  @param object The @c GTLRSpanner_Backup to include in the query.
 *  @param parent Required. The name of the instance in which the backup will be
 *    created. This must be the same instance that contains the database the
 *    backup will be created from. The backup will be stored in the location(s)
 *    specified in the instance configuration of this instance. Values are of
 *    the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_Backup *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a pending or completed Backup.
 *
 *  Method: spanner.projects.instances.backups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsDelete : GTLRSpannerQuery

/**
 *  Required. Name of the backup to delete. Values are of the form
 *  `projects//instances//backups/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a pending or completed Backup.
 *
 *  @param name Required. Name of the backup to delete. Values are of the form
 *    `projects//instances//backups/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets metadata on a pending or completed Backup.
 *
 *  Method: spanner.projects.instances.backups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsGet : GTLRSpannerQuery

/**
 *  Required. Name of the backup. Values are of the form
 *  `projects//instances//backups/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Backup.
 *
 *  Gets metadata on a pending or completed Backup.
 *
 *  @param name Required. Name of the backup. Values are of the form
 *    `projects//instances//backups/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a database or backup resource. Returns an
 *  empty policy if a database or backup exists but does not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource. For backups, authorization requires `spanner.backups.getIamPolicy`
 *  permission on resource.
 *
 *  Method: spanner.projects.instances.backups.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsGetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being
 *  retrieved. The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Gets the access control policy for a database or backup resource. Returns an
 *  empty policy if a database or backup exists but does not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource. For backups, authorization requires `spanner.backups.getIamPolicy`
 *  permission on resource.
 *
 *  @param object The @c GTLRSpanner_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being retrieved. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists completed and pending backups. Backups returned are ordered by
 *  `create_time` in descending order, starting from the most recent
 *  `create_time`.
 *
 *  Method: spanner.projects.instances.backups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsList : GTLRSpannerQuery

/**
 *  An expression that filters the list of returned backups. A filter expression
 *  consists of a field name, a comparison operator, and a value for filtering.
 *  The value must be a string, a number, or a boolean. The comparison operator
 *  must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`. Colon `:` is the
 *  contains operator. Filter rules are not case sensitive. The following fields
 *  in the Backup are eligible for filtering: * `name` * `database` * `state` *
 *  `create_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) *
 *  `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) *
 *  `version_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ) *
 *  `size_bytes` You can combine multiple expressions by enclosing each
 *  expression in parentheses. By default, expressions are combined with AND
 *  logic, but you can specify AND, OR, and NOT logic explicitly. Here are a few
 *  examples: * `name:Howl` - The backup's name contains the string "howl". *
 *  `database:prod` - The database's name contains the string "prod". *
 *  `state:CREATING` - The backup is pending creation. * `state:READY` - The
 *  backup is fully created and ready for use. * `(name:howl) AND (create_time <
 *  \\"2018-03-28T14:50:00Z\\")` - The backup name contains the string "howl"
 *  and `create_time` of the backup is before 2018-03-28T14:50:00Z. *
 *  `expire_time < \\"2018-03-28T14:50:00Z\\"` - The backup `expire_time` is
 *  before 2018-03-28T14:50:00Z. * `size_bytes > 10000000000` - The backup's
 *  size is greater than 10GB
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of backups to be returned in the response. If 0 or less, defaults to
 *  the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListBackupsResponse to the same `parent` and with the same `filter`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The instance to list backups from. Values are of the form
 *  `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListBackupsResponse.
 *
 *  Lists completed and pending backups. Backups returned are ordered by
 *  `create_time` in descending order, starting from the most recent
 *  `create_time`.
 *
 *  @param parent Required. The instance to list backups from. Values are of the
 *    form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instances.backups.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsOperationsCancel : GTLRSpannerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instances.backups.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsOperationsDelete : GTLRSpannerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instances.backups.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsOperationsGet : GTLRSpannerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: spanner.projects.instances.backups.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsOperationsList : GTLRSpannerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a pending or completed Backup.
 *
 *  Method: spanner.projects.instances.backups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsPatch : GTLRSpannerQuery

/**
 *  Output only for the CreateBackup operation. Required for the UpdateBackup
 *  operation. A globally unique identifier for the backup which cannot be
 *  changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]`
 *  The final segment of the name must be between 2 and 60 characters in length.
 *  The backup is stored in the location(s) specified in the instance
 *  configuration of the instance containing the backup, identified by the
 *  prefix of the backup name of the form `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A mask specifying which fields (e.g. `expire_time`) in the Backup
 *  resource should be updated. This mask is relative to the Backup resource,
 *  not to the request message. The field mask must always be specified; this
 *  prevents any future fields from being erased accidentally by clients that do
 *  not know about them.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSpanner_Backup.
 *
 *  Updates a pending or completed Backup.
 *
 *  @param object The @c GTLRSpanner_Backup to include in the query.
 *  @param name Output only for the CreateBackup operation. Required for the
 *    UpdateBackup operation. A globally unique identifier for the backup which
 *    cannot be changed. Values are of the form
 *    `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name
 *    must be between 2 and 60 characters in length. The backup is stored in the
 *    location(s) specified in the instance configuration of the instance
 *    containing the backup, identified by the prefix of the backup name of the
 *    form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsPatch
 */
+ (instancetype)queryWithObject:(GTLRSpanner_Backup *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on a database or backup resource. Replaces
 *  any existing policy. Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource. For backups, authorization requires
 *  `spanner.backups.setIamPolicy` permission on resource.
 *
 *  Method: spanner.projects.instances.backups.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsSetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being set. The
 *  format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for databases resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Sets the access control policy on a database or backup resource. Replaces
 *  any existing policy. Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource. For backups, authorization requires
 *  `spanner.backups.setIamPolicy` permission on resource.
 *
 *  @param object The @c GTLRSpanner_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being set. The format is `projects//instances/` for instance resources and
 *    `projects//instances//databases/` for databases resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  Method: spanner.projects.instances.backups.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesBackupsTestIamPermissions : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesBackupsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates an instance and begins preparing it to begin serving. The returned
 *  long-running operation can be used to track the progress of preparing the
 *  new instance. The instance name is assigned by the caller. If the named
 *  instance already exists, `CreateInstance` returns `ALREADY_EXISTS`.
 *  Immediately upon completion of this request: * The instance is readable via
 *  the API, with all requested attributes but no allocated resources. Its state
 *  is `CREATING`. Until completion of the returned operation: * Cancelling the
 *  operation renders the instance immediately unreadable via the API. * The
 *  instance can be deleted. * All other attempts to modify the instance are
 *  rejected. Upon completion of the returned operation: * Billing for all
 *  successfully-allocated resources begins (some types may have lower than the
 *  requested levels). * Databases can be created in the instance. * The
 *  instance's allocated resource levels are readable via the API. * The
 *  instance's state becomes `READY`. The returned long-running operation will
 *  have a name of the format `/operations/` and can be used to track creation
 *  of the instance. The metadata field type is CreateInstanceMetadata. The
 *  response field type is Instance, if successful.
 *
 *  Method: spanner.projects.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesCreate : GTLRSpannerQuery

/**
 *  Required. The name of the project in which to create the instance. Values
 *  are of the form `projects/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Creates an instance and begins preparing it to begin serving. The returned
 *  long-running operation can be used to track the progress of preparing the
 *  new instance. The instance name is assigned by the caller. If the named
 *  instance already exists, `CreateInstance` returns `ALREADY_EXISTS`.
 *  Immediately upon completion of this request: * The instance is readable via
 *  the API, with all requested attributes but no allocated resources. Its state
 *  is `CREATING`. Until completion of the returned operation: * Cancelling the
 *  operation renders the instance immediately unreadable via the API. * The
 *  instance can be deleted. * All other attempts to modify the instance are
 *  rejected. Upon completion of the returned operation: * Billing for all
 *  successfully-allocated resources begins (some types may have lower than the
 *  requested levels). * Databases can be created in the instance. * The
 *  instance's allocated resource levels are readable via the API. * The
 *  instance's state becomes `READY`. The returned long-running operation will
 *  have a name of the format `/operations/` and can be used to track creation
 *  of the instance. The metadata field type is CreateInstanceMetadata. The
 *  response field type is Instance, if successful.
 *
 *  @param object The @c GTLRSpanner_CreateInstanceRequest to include in the
 *    query.
 *  @param parent Required. The name of the project in which to create the
 *    instance. Values are of the form `projects/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists database longrunning-operations. A database operation has a name of
 *  the form `projects//instances//databases//operations/`. The long-running
 *  operation metadata field type `metadata.type_url` describes the type of the
 *  metadata. Operations returned include those that have
 *  completed/failed/canceled within the last 7 days, and pending operations.
 *
 *  Method: spanner.projects.instances.databaseOperations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabaseOperationsList : GTLRSpannerQuery

/**
 *  An expression that filters the list of returned operations. A filter
 *  expression consists of a field name, a comparison operator, and a value for
 *  filtering. The value must be a string, a number, or a boolean. The
 *  comparison operator must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
 *  Colon `:` is the contains operator. Filter rules are not case sensitive. The
 *  following fields in the Operation are eligible for filtering: * `name` - The
 *  name of the long-running operation * `done` - False if the operation is in
 *  progress, else true. * `metadata.\@type` - the type of metadata. For
 *  example, the type string for RestoreDatabaseMetadata is
 *  `type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata`.
 *  * `metadata.` - any field in metadata.value. `metadata.\@type` must be
 *  specified first, if filtering on metadata fields. * `error` - Error
 *  associated with the long-running operation. * `response.\@type` - the type
 *  of response. * `response.` - any field in response.value. You can combine
 *  multiple expressions by enclosing each expression in parentheses. By
 *  default, expressions are combined with AND logic. However, you can specify
 *  AND, OR, and NOT logic explicitly. Here are a few examples: * `done:true` -
 *  The operation is complete. *
 *  `(metadata.\@type=type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata)
 *  AND` \\ `(metadata.source_type:BACKUP) AND` \\
 *  `(metadata.backup_info.backup:backup_howl) AND` \\
 *  `(metadata.name:restored_howl) AND` \\ `(metadata.progress.start_time <
 *  \\"2018-03-28T14:50:00Z\\") AND` \\ `(error:*)` - Return operations where: *
 *  The operation's metadata type is RestoreDatabaseMetadata. * The database is
 *  restored from a backup. * The backup name contains "backup_howl". * The
 *  restored database's name contains "restored_howl". * The operation started
 *  before 2018-03-28T14:50:00Z. * The operation resulted in an error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of operations to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListDatabaseOperationsResponse to the same `parent` and with the same
 *  `filter`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The instance of the database operations. Values are of the form
 *  `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListDatabaseOperationsResponse.
 *
 *  Lists database longrunning-operations. A database operation has a name of
 *  the form `projects//instances//databases//operations/`. The long-running
 *  operation metadata field type `metadata.type_url` describes the type of the
 *  metadata. Operations returned include those that have
 *  completed/failed/canceled within the last 7 days, and pending operations.
 *
 *  @param parent Required. The instance of the database operations. Values are
 *    of the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabaseOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new Cloud Spanner database and starts to prepare it for serving.
 *  The returned long-running operation will have a name of the format
 *  `/operations/` and can be used to track preparation of the database. The
 *  metadata field type is CreateDatabaseMetadata. The response field type is
 *  Database, if successful.
 *
 *  Method: spanner.projects.instances.databases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesCreate : GTLRSpannerQuery

/**
 *  Required. The name of the instance that will serve the new database. Values
 *  are of the form `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Creates a new Cloud Spanner database and starts to prepare it for serving.
 *  The returned long-running operation will have a name of the format
 *  `/operations/` and can be used to track preparation of the database. The
 *  metadata field type is CreateDatabaseMetadata. The response field type is
 *  Database, if successful.
 *
 *  @param object The @c GTLRSpanner_CreateDatabaseRequest to include in the
 *    query.
 *  @param parent Required. The name of the instance that will serve the new
 *    database. Values are of the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateDatabaseRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists Cloud Spanner database roles.
 *
 *  Method: spanner.projects.instances.databases.databaseRoles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesDatabaseRolesList : GTLRSpannerQuery

/**
 *  Number of database roles to be returned in the response. If 0 or less,
 *  defaults to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListDatabaseRolesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The database whose roles should be listed. Values are of the form
 *  `projects//instances//databases/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListDatabaseRolesResponse.
 *
 *  Lists Cloud Spanner database roles.
 *
 *  @param parent Required. The database whose roles should be listed. Values
 *    are of the form `projects//instances//databases/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesDatabaseRolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  Method: spanner.projects.instances.databases.databaseRoles.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesDatabaseRolesTestIamPermissions : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesDatabaseRolesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Drops (aka deletes) a Cloud Spanner database. Completed backups for the
 *  database will be retained according to their `expire_time`. Note: Cloud
 *  Spanner might continue to accept requests for a few seconds after the
 *  database has been deleted.
 *
 *  Method: spanner.projects.instances.databases.dropDatabase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesDropDatabase : GTLRSpannerQuery

/** Required. The database to be dropped. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Drops (aka deletes) a Cloud Spanner database. Completed backups for the
 *  database will be retained according to their `expire_time`. Note: Cloud
 *  Spanner might continue to accept requests for a few seconds after the
 *  database has been deleted.
 *
 *  @param database Required. The database to be dropped.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesDropDatabase
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Gets the state of a Cloud Spanner database.
 *
 *  Method: spanner.projects.instances.databases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGet : GTLRSpannerQuery

/**
 *  Required. The name of the requested database. Values are of the form
 *  `projects//instances//databases/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Database.
 *
 *  Gets the state of a Cloud Spanner database.
 *
 *  @param name Required. The name of the requested database. Values are of the
 *    form `projects//instances//databases/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the schema of a Cloud Spanner database as a list of formatted DDL
 *  statements. This method does not show pending schema updates, those may be
 *  queried using the Operations API.
 *
 *  Method: spanner.projects.instances.databases.getDdl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGetDdl : GTLRSpannerQuery

/**
 *  Required. The database whose schema we wish to get. Values are of the form
 *  `projects//instances//databases/`
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_GetDatabaseDdlResponse.
 *
 *  Returns the schema of a Cloud Spanner database as a list of formatted DDL
 *  statements. This method does not show pending schema updates, those may be
 *  queried using the Operations API.
 *
 *  @param database Required. The database whose schema we wish to get. Values
 *    are of the form `projects//instances//databases/`
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGetDdl
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Gets the access control policy for a database or backup resource. Returns an
 *  empty policy if a database or backup exists but does not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource. For backups, authorization requires `spanner.backups.getIamPolicy`
 *  permission on resource.
 *
 *  Method: spanner.projects.instances.databases.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being
 *  retrieved. The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Gets the access control policy for a database or backup resource. Returns an
 *  empty policy if a database or backup exists but does not have a policy set.
 *  Authorization requires `spanner.databases.getIamPolicy` permission on
 *  resource. For backups, authorization requires `spanner.backups.getIamPolicy`
 *  permission on resource.
 *
 *  @param object The @c GTLRSpanner_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being retrieved. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Request a specific scan with Database-specific data for Cloud Key
 *  Visualizer.
 *
 *  Method: spanner.projects.instances.databases.getScans
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesGetScans : GTLRSpannerQuery

/** The upper bound for the time range to retrieve Scan data for. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Required. The unique name of the scan containing the requested information,
 *  specific to the Database service implementing this interface.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  These fields restrict the Database-specific information returned in the
 *  `Scan.data` field. If a `View` is provided that does not include the
 *  `Scan.data` field, these are ignored. This range of time must be entirely
 *  contained within the defined time range of the targeted scan. The lower
 *  bound for the time range to retrieve Scan data for.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Specifies which parts of the Scan should be returned in the response. Note,
 *  if left unspecified, the FULL view is assumed.
 *
 *  Likely values:
 *    @arg @c kGTLRSpannerViewViewUnspecified Not specified, equivalent to
 *        SUMMARY. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRSpannerViewSummary Server responses only include `name`,
 *        `details`, `start_time` and `end_time`. The default value. Note, the
 *        ListScans method may only use this view type, others view types are
 *        not supported. (Value: "SUMMARY")
 *    @arg @c kGTLRSpannerViewFull Full representation of the scan is returned
 *        in the server response, including `data`. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRSpanner_Scan.
 *
 *  Request a specific scan with Database-specific data for Cloud Key
 *  Visualizer.
 *
 *  @param name Required. The unique name of the scan containing the requested
 *    information, specific to the Database service implementing this interface.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesGetScans
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Cloud Spanner databases.
 *
 *  Method: spanner.projects.instances.databases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesList : GTLRSpannerQuery

/**
 *  Number of databases to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListDatabasesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The instance whose databases should be listed. Values are of the
 *  form `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListDatabasesResponse.
 *
 *  Lists Cloud Spanner databases.
 *
 *  @param parent Required. The instance whose databases should be listed.
 *    Values are of the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instances.databases.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsCancel : GTLRSpannerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instances.databases.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsDelete : GTLRSpannerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instances.databases.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsGet : GTLRSpannerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: spanner.projects.instances.databases.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsList : GTLRSpannerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Create a new database by restoring from a completed backup. The new database
 *  must be in the same project and in an instance with the same instance
 *  configuration as the instance containing the backup. The returned database
 *  long-running operation has a name of the format
 *  `projects//instances//databases//operations/`, and can be used to track the
 *  progress of the operation, and to cancel it. The metadata field type is
 *  RestoreDatabaseMetadata. The response type is Database, if successful.
 *  Cancelling the returned operation will stop the restore and delete the
 *  database. There can be only one database being restored into an instance at
 *  a time. Once the restore operation completes, a new restore operation can be
 *  initiated, without waiting for the optimize operation associated with the
 *  first restore to complete.
 *
 *  Method: spanner.projects.instances.databases.restore
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesRestore : GTLRSpannerQuery

/**
 *  Required. The name of the instance in which to create the restored database.
 *  This instance must be in the same project and have the same instance
 *  configuration as the instance containing the source backup. Values are of
 *  the form `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Create a new database by restoring from a completed backup. The new database
 *  must be in the same project and in an instance with the same instance
 *  configuration as the instance containing the backup. The returned database
 *  long-running operation has a name of the format
 *  `projects//instances//databases//operations/`, and can be used to track the
 *  progress of the operation, and to cancel it. The metadata field type is
 *  RestoreDatabaseMetadata. The response type is Database, if successful.
 *  Cancelling the returned operation will stop the restore and delete the
 *  database. There can be only one database being restored into an instance at
 *  a time. Once the restore operation completes, a new restore operation can be
 *  initiated, without waiting for the optimize operation associated with the
 *  first restore to complete.
 *
 *  @param object The @c GTLRSpanner_RestoreDatabaseRequest to include in the
 *    query.
 *  @param parent Required. The name of the instance in which to create the
 *    restored database. This instance must be in the same project and have the
 *    same instance configuration as the instance containing the source backup.
 *    Values are of the form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesRestore
 */
+ (instancetype)queryWithObject:(GTLRSpanner_RestoreDatabaseRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates multiple new sessions. This API can be used to initialize a session
 *  cache on the clients. See https://goo.gl/TgSFN2 for best practices on
 *  session cache management.
 *
 *  Method: spanner.projects.instances.databases.sessions.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBatchCreate : GTLRSpannerQuery

/** Required. The database in which the new sessions are created. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_BatchCreateSessionsResponse.
 *
 *  Creates multiple new sessions. This API can be used to initialize a session
 *  cache on the clients. See https://goo.gl/TgSFN2 for best practices on
 *  session cache management.
 *
 *  @param object The @c GTLRSpanner_BatchCreateSessionsRequest to include in
 *    the query.
 *  @param database Required. The database in which the new sessions are
 *    created.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_BatchCreateSessionsRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Begins a new transaction. This step can often be skipped: Read, ExecuteSql
 *  and Commit can begin a new transaction as a side-effect.
 *
 *  Method: spanner.projects.instances.databases.sessions.beginTransaction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBeginTransaction : GTLRSpannerQuery

/** Required. The session in which the transaction runs. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_Transaction.
 *
 *  Begins a new transaction. This step can often be skipped: Read, ExecuteSql
 *  and Commit can begin a new transaction as a side-effect.
 *
 *  @param object The @c GTLRSpanner_BeginTransactionRequest to include in the
 *    query.
 *  @param session Required. The session in which the transaction runs.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsBeginTransaction
 */
+ (instancetype)queryWithObject:(GTLRSpanner_BeginTransactionRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Commits a transaction. The request includes the mutations to be applied to
 *  rows in the database. `Commit` might return an `ABORTED` error. This can
 *  occur at any time; commonly, the cause is conflicts with concurrent
 *  transactions. However, it can also happen for a variety of other reasons. If
 *  `Commit` returns `ABORTED`, the caller should re-attempt the transaction
 *  from the beginning, re-using the same session. On very rare occasions,
 *  `Commit` might return `UNKNOWN`. This can happen, for example, if the client
 *  job experiences a 1+ hour networking failure. At that point, Cloud Spanner
 *  has lost track of the transaction outcome and we recommend that you perform
 *  another read from the database to see the state of things as they are now.
 *
 *  Method: spanner.projects.instances.databases.sessions.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCommit : GTLRSpannerQuery

/**
 *  Required. The session in which the transaction to be committed is running.
 */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_CommitResponse.
 *
 *  Commits a transaction. The request includes the mutations to be applied to
 *  rows in the database. `Commit` might return an `ABORTED` error. This can
 *  occur at any time; commonly, the cause is conflicts with concurrent
 *  transactions. However, it can also happen for a variety of other reasons. If
 *  `Commit` returns `ABORTED`, the caller should re-attempt the transaction
 *  from the beginning, re-using the same session. On very rare occasions,
 *  `Commit` might return `UNKNOWN`. This can happen, for example, if the client
 *  job experiences a 1+ hour networking failure. At that point, Cloud Spanner
 *  has lost track of the transaction outcome and we recommend that you perform
 *  another read from the database to see the state of things as they are now.
 *
 *  @param object The @c GTLRSpanner_CommitRequest to include in the query.
 *  @param session Required. The session in which the transaction to be
 *    committed is running.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCommit
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CommitRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Creates a new session. A session can be used to perform transactions that
 *  read and/or modify data in a Cloud Spanner database. Sessions are meant to
 *  be reused for many consecutive transactions. Sessions can only execute one
 *  transaction at a time. To execute multiple concurrent read-write/write-only
 *  transactions, create multiple sessions. Note that standalone reads and
 *  queries use a transaction internally, and count toward the one transaction
 *  limit. Active sessions use additional server resources, so it is a good idea
 *  to delete idle and unneeded sessions. Aside from explicit deletes, Cloud
 *  Spanner may delete sessions for which no operations are sent for more than
 *  an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle
 *  sessions can be kept alive by sending a trivial SQL query periodically,
 *  e.g., `"SELECT 1"`.
 *
 *  Method: spanner.projects.instances.databases.sessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCreate : GTLRSpannerQuery

/** Required. The database in which the new session is created. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Session.
 *
 *  Creates a new session. A session can be used to perform transactions that
 *  read and/or modify data in a Cloud Spanner database. Sessions are meant to
 *  be reused for many consecutive transactions. Sessions can only execute one
 *  transaction at a time. To execute multiple concurrent read-write/write-only
 *  transactions, create multiple sessions. Note that standalone reads and
 *  queries use a transaction internally, and count toward the one transaction
 *  limit. Active sessions use additional server resources, so it is a good idea
 *  to delete idle and unneeded sessions. Aside from explicit deletes, Cloud
 *  Spanner may delete sessions for which no operations are sent for more than
 *  an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle
 *  sessions can be kept alive by sending a trivial SQL query periodically,
 *  e.g., `"SELECT 1"`.
 *
 *  @param object The @c GTLRSpanner_CreateSessionRequest to include in the
 *    query.
 *  @param database Required. The database in which the new session is created.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRSpanner_CreateSessionRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Ends a session, releasing server resources associated with it. This will
 *  asynchronously trigger cancellation of any operations that are running with
 *  this session.
 *
 *  Method: spanner.projects.instances.databases.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsDelete : GTLRSpannerQuery

/** Required. The name of the session to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Ends a session, releasing server resources associated with it. This will
 *  asynchronously trigger cancellation of any operations that are running with
 *  this session.
 *
 *  @param name Required. The name of the session to delete.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Executes a batch of SQL DML statements. This method allows many statements
 *  to be run with lower latency than submitting them sequentially with
 *  ExecuteSql. Statements are executed in sequential order. A request can
 *  succeed even if a statement fails. The ExecuteBatchDmlResponse.status field
 *  in the response provides information about the statement that failed.
 *  Clients must inspect this field to determine whether an error occurred.
 *  Execution stops after the first failed statement; the remaining statements
 *  are not executed.
 *
 *  Method: spanner.projects.instances.databases.sessions.executeBatchDml
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteBatchDml : GTLRSpannerQuery

/** Required. The session in which the DML statements should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_ExecuteBatchDmlResponse.
 *
 *  Executes a batch of SQL DML statements. This method allows many statements
 *  to be run with lower latency than submitting them sequentially with
 *  ExecuteSql. Statements are executed in sequential order. A request can
 *  succeed even if a statement fails. The ExecuteBatchDmlResponse.status field
 *  in the response provides information about the statement that failed.
 *  Clients must inspect this field to determine whether an error occurred.
 *  Execution stops after the first failed statement; the remaining statements
 *  are not executed.
 *
 *  @param object The @c GTLRSpanner_ExecuteBatchDmlRequest to include in the
 *    query.
 *  @param session Required. The session in which the DML statements should be
 *    performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteBatchDml
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ExecuteBatchDmlRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Executes an SQL statement, returning all results in a single reply. This
 *  method cannot be used to return a result set larger than 10 MiB; if the
 *  query yields more data than that, the query fails with a
 *  `FAILED_PRECONDITION` error. Operations inside read-write transactions might
 *  return `ABORTED`. If this occurs, the application should restart the
 *  transaction from the beginning. See Transaction for more details. Larger
 *  result sets can be fetched in streaming fashion by calling
 *  ExecuteStreamingSql instead.
 *
 *  Method: spanner.projects.instances.databases.sessions.executeSql
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteSql : GTLRSpannerQuery

/** Required. The session in which the SQL query should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_ResultSet.
 *
 *  Executes an SQL statement, returning all results in a single reply. This
 *  method cannot be used to return a result set larger than 10 MiB; if the
 *  query yields more data than that, the query fails with a
 *  `FAILED_PRECONDITION` error. Operations inside read-write transactions might
 *  return `ABORTED`. If this occurs, the application should restart the
 *  transaction from the beginning. See Transaction for more details. Larger
 *  result sets can be fetched in streaming fashion by calling
 *  ExecuteStreamingSql instead.
 *
 *  @param object The @c GTLRSpanner_ExecuteSqlRequest to include in the query.
 *  @param session Required. The session in which the SQL query should be
 *    performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteSql
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ExecuteSqlRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Like ExecuteSql, except returns the result set as a stream. Unlike
 *  ExecuteSql, there is no limit on the size of the returned result set.
 *  However, no individual row in the result set can exceed 100 MiB, and no
 *  column value can exceed 10 MiB.
 *
 *  Method: spanner.projects.instances.databases.sessions.executeStreamingSql
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteStreamingSql : GTLRSpannerQuery

/** Required. The session in which the SQL query should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartialResultSet.
 *
 *  Like ExecuteSql, except returns the result set as a stream. Unlike
 *  ExecuteSql, there is no limit on the size of the returned result set.
 *  However, no individual row in the result set can exceed 100 MiB, and no
 *  column value can exceed 10 MiB.
 *
 *  @param object The @c GTLRSpanner_ExecuteSqlRequest to include in the query.
 *  @param session Required. The session in which the SQL query should be
 *    performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsExecuteStreamingSql
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ExecuteSqlRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Gets a session. Returns `NOT_FOUND` if the session does not exist. This is
 *  mainly useful for determining whether a session is still alive.
 *
 *  Method: spanner.projects.instances.databases.sessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsGet : GTLRSpannerQuery

/** Required. The name of the session to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Session.
 *
 *  Gets a session. Returns `NOT_FOUND` if the session does not exist. This is
 *  mainly useful for determining whether a session is still alive.
 *
 *  @param name Required. The name of the session to retrieve.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all sessions in a given database.
 *
 *  Method: spanner.projects.instances.databases.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsList : GTLRSpannerQuery

/** Required. The database in which to list sessions. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  An expression for filtering the results of the request. Filter rules are
 *  case insensitive. The fields eligible for filtering are: * `labels.key`
 *  where key is the name of a label Some examples of using filters are: *
 *  `labels.env:*` --> The session has the label "env". * `labels.env:dev` -->
 *  The session has the label "env" and the value of the label contains the
 *  string "dev".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Number of sessions to be returned in the response. If 0 or less, defaults to
 *  the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListSessionsResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListSessionsResponse.
 *
 *  Lists all sessions in a given database.
 *
 *  @param database Required. The database in which to list sessions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithDatabase:(NSString *)database;

@end

/**
 *  Creates a set of partition tokens that can be used to execute a query
 *  operation in parallel. Each of the returned partition tokens can be used by
 *  ExecuteStreamingSql to specify a subset of the query result to read. The
 *  same session and read-only transaction must be used by the
 *  PartitionQueryRequest used to create the partition tokens and the
 *  ExecuteSqlRequests that use the partition tokens. Partition tokens become
 *  invalid when the session used to create them is deleted, is idle for too
 *  long, begins a new transaction, or becomes too old. When any of these
 *  happen, it is not possible to resume the query, and the whole operation must
 *  be restarted from the beginning.
 *
 *  Method: spanner.projects.instances.databases.sessions.partitionQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionQuery : GTLRSpannerQuery

/** Required. The session used to create the partitions. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartitionResponse.
 *
 *  Creates a set of partition tokens that can be used to execute a query
 *  operation in parallel. Each of the returned partition tokens can be used by
 *  ExecuteStreamingSql to specify a subset of the query result to read. The
 *  same session and read-only transaction must be used by the
 *  PartitionQueryRequest used to create the partition tokens and the
 *  ExecuteSqlRequests that use the partition tokens. Partition tokens become
 *  invalid when the session used to create them is deleted, is idle for too
 *  long, begins a new transaction, or becomes too old. When any of these
 *  happen, it is not possible to resume the query, and the whole operation must
 *  be restarted from the beginning.
 *
 *  @param object The @c GTLRSpanner_PartitionQueryRequest to include in the
 *    query.
 *  @param session Required. The session used to create the partitions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionQuery
 */
+ (instancetype)queryWithObject:(GTLRSpanner_PartitionQueryRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Creates a set of partition tokens that can be used to execute a read
 *  operation in parallel. Each of the returned partition tokens can be used by
 *  StreamingRead to specify a subset of the read result to read. The same
 *  session and read-only transaction must be used by the PartitionReadRequest
 *  used to create the partition tokens and the ReadRequests that use the
 *  partition tokens. There are no ordering guarantees on rows returned among
 *  the returned partition tokens, or even within each individual StreamingRead
 *  call issued with a partition_token. Partition tokens become invalid when the
 *  session used to create them is deleted, is idle for too long, begins a new
 *  transaction, or becomes too old. When any of these happen, it is not
 *  possible to resume the read, and the whole operation must be restarted from
 *  the beginning.
 *
 *  Method: spanner.projects.instances.databases.sessions.partitionRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionRead : GTLRSpannerQuery

/** Required. The session used to create the partitions. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartitionResponse.
 *
 *  Creates a set of partition tokens that can be used to execute a read
 *  operation in parallel. Each of the returned partition tokens can be used by
 *  StreamingRead to specify a subset of the read result to read. The same
 *  session and read-only transaction must be used by the PartitionReadRequest
 *  used to create the partition tokens and the ReadRequests that use the
 *  partition tokens. There are no ordering guarantees on rows returned among
 *  the returned partition tokens, or even within each individual StreamingRead
 *  call issued with a partition_token. Partition tokens become invalid when the
 *  session used to create them is deleted, is idle for too long, begins a new
 *  transaction, or becomes too old. When any of these happen, it is not
 *  possible to resume the read, and the whole operation must be restarted from
 *  the beginning.
 *
 *  @param object The @c GTLRSpanner_PartitionReadRequest to include in the
 *    query.
 *  @param session Required. The session used to create the partitions.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsPartitionRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_PartitionReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Reads rows from the database using key lookups and scans, as a simple
 *  key/value style alternative to ExecuteSql. This method cannot be used to
 *  return a result set larger than 10 MiB; if the read matches more data than
 *  that, the read fails with a `FAILED_PRECONDITION` error. Reads inside
 *  read-write transactions might return `ABORTED`. If this occurs, the
 *  application should restart the transaction from the beginning. See
 *  Transaction for more details. Larger result sets can be yielded in streaming
 *  fashion by calling StreamingRead instead.
 *
 *  Method: spanner.projects.instances.databases.sessions.read
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRead : GTLRSpannerQuery

/** Required. The session in which the read should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_ResultSet.
 *
 *  Reads rows from the database using key lookups and scans, as a simple
 *  key/value style alternative to ExecuteSql. This method cannot be used to
 *  return a result set larger than 10 MiB; if the read matches more data than
 *  that, the read fails with a `FAILED_PRECONDITION` error. Reads inside
 *  read-write transactions might return `ABORTED`. If this occurs, the
 *  application should restart the transaction from the beginning. See
 *  Transaction for more details. Larger result sets can be yielded in streaming
 *  fashion by calling StreamingRead instead.
 *
 *  @param object The @c GTLRSpanner_ReadRequest to include in the query.
 *  @param session Required. The session in which the read should be performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Rolls back a transaction, releasing any locks it holds. It is a good idea to
 *  call this for any transaction that includes one or more Read or ExecuteSql
 *  requests and ultimately decides not to commit. `Rollback` returns `OK` if it
 *  successfully aborts the transaction, the transaction was already aborted, or
 *  the transaction is not found. `Rollback` never returns `ABORTED`.
 *
 *  Method: spanner.projects.instances.databases.sessions.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRollback : GTLRSpannerQuery

/** Required. The session in which the transaction to roll back is running. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Rolls back a transaction, releasing any locks it holds. It is a good idea to
 *  call this for any transaction that includes one or more Read or ExecuteSql
 *  requests and ultimately decides not to commit. `Rollback` returns `OK` if it
 *  successfully aborts the transaction, the transaction was already aborted, or
 *  the transaction is not found. `Rollback` never returns `ABORTED`.
 *
 *  @param object The @c GTLRSpanner_RollbackRequest to include in the query.
 *  @param session Required. The session in which the transaction to roll back
 *    is running.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsRollback
 */
+ (instancetype)queryWithObject:(GTLRSpanner_RollbackRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Like Read, except returns the result set as a stream. Unlike Read, there is
 *  no limit on the size of the returned result set. However, no individual row
 *  in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.
 *
 *  Method: spanner.projects.instances.databases.sessions.streamingRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsStreamingRead : GTLRSpannerQuery

/** Required. The session in which the read should be performed. */
@property(nonatomic, copy, nullable) NSString *session;

/**
 *  Fetches a @c GTLRSpanner_PartialResultSet.
 *
 *  Like Read, except returns the result set as a stream. Unlike Read, there is
 *  no limit on the size of the returned result set. However, no individual row
 *  in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.
 *
 *  @param object The @c GTLRSpanner_ReadRequest to include in the query.
 *  @param session Required. The session in which the read should be performed.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSessionsStreamingRead
 */
+ (instancetype)queryWithObject:(GTLRSpanner_ReadRequest *)object
                        session:(NSString *)session;

@end

/**
 *  Sets the access control policy on a database or backup resource. Replaces
 *  any existing policy. Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource. For backups, authorization requires
 *  `spanner.backups.setIamPolicy` permission on resource.
 *
 *  Method: spanner.projects.instances.databases.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesSetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being set. The
 *  format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for databases resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Sets the access control policy on a database or backup resource. Replaces
 *  any existing policy. Authorization requires `spanner.databases.setIamPolicy`
 *  permission on resource. For backups, authorization requires
 *  `spanner.backups.setIamPolicy` permission on resource.
 *
 *  @param object The @c GTLRSpanner_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being set. The format is `projects//instances/` for instance resources and
 *    `projects//instances//databases/` for databases resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  Method: spanner.projects.instances.databases.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesTestIamPermissions : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified database or backup
 *  resource. Attempting this RPC on a non-existent Cloud Spanner database will
 *  result in a NOT_FOUND error if the user has `spanner.databases.list`
 *  permission on the containing Cloud Spanner instance. Otherwise returns an
 *  empty set of permissions. Calling this method on a backup that does not
 *  exist will result in a NOT_FOUND error if the user has
 *  `spanner.backups.list` permission on the containing instance.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates the schema of a Cloud Spanner database by creating/altering/dropping
 *  tables, columns, indexes, etc. The returned long-running operation will have
 *  a name of the format `/operations/` and can be used to track execution of
 *  the schema change(s). The metadata field type is UpdateDatabaseDdlMetadata.
 *  The operation has no response.
 *
 *  Method: spanner.projects.instances.databases.updateDdl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDatabasesUpdateDdl : GTLRSpannerQuery

/** Required. The database to update. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Updates the schema of a Cloud Spanner database by creating/altering/dropping
 *  tables, columns, indexes, etc. The returned long-running operation will have
 *  a name of the format `/operations/` and can be used to track execution of
 *  the schema change(s). The metadata field type is UpdateDatabaseDdlMetadata.
 *  The operation has no response.
 *
 *  @param object The @c GTLRSpanner_UpdateDatabaseDdlRequest to include in the
 *    query.
 *  @param database Required. The database to update.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDatabasesUpdateDdl
 */
+ (instancetype)queryWithObject:(GTLRSpanner_UpdateDatabaseDdlRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Deletes an instance. Immediately upon completion of the request: * Billing
 *  ceases for all of the instance's reserved resources. Soon afterward: * The
 *  instance and *all of its databases* immediately and irrevocably disappear
 *  from the API. All data in the databases is permanently deleted.
 *
 *  Method: spanner.projects.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesDelete : GTLRSpannerQuery

/**
 *  Required. The name of the instance to be deleted. Values are of the form
 *  `projects//instances/`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes an instance. Immediately upon completion of the request: * Billing
 *  ceases for all of the instance's reserved resources. Soon afterward: * The
 *  instance and *all of its databases* immediately and irrevocably disappear
 *  from the API. All data in the databases is permanently deleted.
 *
 *  @param name Required. The name of the instance to be deleted. Values are of
 *    the form `projects//instances/`
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a particular instance.
 *
 *  Method: spanner.projects.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesGet : GTLRSpannerQuery

/**
 *  If field_mask is present, specifies the subset of Instance fields that
 *  should be returned. If absent, all Instance fields are returned.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Required. The name of the requested instance. Values are of the form
 *  `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Instance.
 *
 *  Gets information about a particular instance.
 *
 *  @param name Required. The name of the requested instance. Values are of the
 *    form `projects//instances/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set. Authorization
 *  requires `spanner.instances.getIamPolicy` on resource.
 *
 *  Method: spanner.projects.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesGetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being
 *  retrieved. The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set. Authorization
 *  requires `spanner.instances.getIamPolicy` on resource.
 *
 *  @param object The @c GTLRSpanner_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being retrieved. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all instances in the given project.
 *
 *  Method: spanner.projects.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesList : GTLRSpannerQuery

/**
 *  An expression for filtering the results of the request. Filter rules are
 *  case insensitive. The fields eligible for filtering are: * `name` *
 *  `display_name` * `labels.key` where key is the name of a label Some examples
 *  of using filters are: * `name:*` --> The instance has a name. * `name:Howl`
 *  --> The instance's name contains the string "howl". * `name:HOWL` -->
 *  Equivalent to above. * `NAME:howl` --> Equivalent to above. * `labels.env:*`
 *  --> The instance has the label "env". * `labels.env:dev` --> The instance
 *  has the label "env" and the value of the label contains the string "dev". *
 *  `name:howl labels.env:dev` --> The instance's name contains "howl" and it
 *  has the label "env" with its value containing "dev".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Deadline used while retrieving metadata for instances. Instances whose
 *  metadata cannot be retrieved within this deadline will be added to
 *  unreachable in ListInstancesResponse.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *instanceDeadline;

/**
 *  Number of instances to be returned in the response. If 0 or less, defaults
 *  to the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListInstancesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project for which a list of instances is
 *  requested. Values are of the form `projects/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSpanner_ListInstancesResponse.
 *
 *  Lists all instances in the given project.
 *
 *  @param parent Required. The name of the project for which a list of
 *    instances is requested. Values are of the form `projects/`.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: spanner.projects.instances.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsCancel : GTLRSpannerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: spanner.projects.instances.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsDelete : GTLRSpannerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: spanner.projects.instances.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsGet : GTLRSpannerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: spanner.projects.instances.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesOperationsList : GTLRSpannerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSpanner_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an instance, and begins allocating or releasing resources as
 *  requested. The returned long-running operation can be used to track the
 *  progress of updating the instance. If the named instance does not exist,
 *  returns `NOT_FOUND`. Immediately upon completion of this request: * For
 *  resource types for which a decrease in the instance's allocation has been
 *  requested, billing is based on the newly-requested level. Until completion
 *  of the returned operation: * Cancelling the operation sets its metadata's
 *  cancel_time, and begins restoring resources to their pre-request values. The
 *  operation is guaranteed to succeed at undoing all resource changes, after
 *  which point it terminates with a `CANCELLED` status. * All other attempts to
 *  modify the instance are rejected. * Reading the instance via the API
 *  continues to give the pre-request resource levels. Upon completion of the
 *  returned operation: * Billing begins for all successfully-allocated
 *  resources (some types may have lower than the requested levels). * All
 *  newly-reserved resources are available for serving the instance's tables. *
 *  The instance's new resource levels are readable via the API. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track the instance modification. The metadata field type is
 *  UpdateInstanceMetadata. The response field type is Instance, if successful.
 *  Authorization requires `spanner.instances.update` permission on the resource
 *  name.
 *
 *  Method: spanner.projects.instances.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesPatch : GTLRSpannerQuery

/**
 *  Required. A unique identifier for the instance, which cannot be changed
 *  after the instance is created. Values are of the form
 *  `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be
 *  between 2 and 64 characters in length.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSpanner_Operation.
 *
 *  Updates an instance, and begins allocating or releasing resources as
 *  requested. The returned long-running operation can be used to track the
 *  progress of updating the instance. If the named instance does not exist,
 *  returns `NOT_FOUND`. Immediately upon completion of this request: * For
 *  resource types for which a decrease in the instance's allocation has been
 *  requested, billing is based on the newly-requested level. Until completion
 *  of the returned operation: * Cancelling the operation sets its metadata's
 *  cancel_time, and begins restoring resources to their pre-request values. The
 *  operation is guaranteed to succeed at undoing all resource changes, after
 *  which point it terminates with a `CANCELLED` status. * All other attempts to
 *  modify the instance are rejected. * Reading the instance via the API
 *  continues to give the pre-request resource levels. Upon completion of the
 *  returned operation: * Billing begins for all successfully-allocated
 *  resources (some types may have lower than the requested levels). * All
 *  newly-reserved resources are available for serving the instance's tables. *
 *  The instance's new resource levels are readable via the API. The returned
 *  long-running operation will have a name of the format `/operations/` and can
 *  be used to track the instance modification. The metadata field type is
 *  UpdateInstanceMetadata. The response field type is Instance, if successful.
 *  Authorization requires `spanner.instances.update` permission on the resource
 *  name.
 *
 *  @param object The @c GTLRSpanner_UpdateInstanceRequest to include in the
 *    query.
 *  @param name Required. A unique identifier for the instance, which cannot be
 *    changed after the instance is created. Values are of the form
 *    `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be
 *    between 2 and 64 characters in length.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesPatch
 */
+ (instancetype)queryWithObject:(GTLRSpanner_UpdateInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy. Authorization requires `spanner.instances.setIamPolicy` on
 *  resource.
 *
 *  Method: spanner.projects.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesSetIamPolicy : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which the policy is being set. The
 *  format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for databases resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_Policy.
 *
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy. Authorization requires `spanner.instances.setIamPolicy` on
 *  resource.
 *
 *  @param object The @c GTLRSpanner_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which the policy is
 *    being set. The format is `projects//instances/` for instance resources and
 *    `projects//instances//databases/` for databases resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSpanner_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified instance resource.
 *  Attempting this RPC on a non-existent Cloud Spanner instance resource will
 *  result in a NOT_FOUND error if the user has `spanner.instances.list`
 *  permission on the containing Google Cloud Project. Otherwise returns an
 *  empty set of permissions.
 *
 *  Method: spanner.projects.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerAdmin
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 */
@interface GTLRSpannerQuery_ProjectsInstancesTestIamPermissions : GTLRSpannerQuery

/**
 *  REQUIRED: The Cloud Spanner resource for which permissions are being tested.
 *  The format is `projects//instances/` for instance resources and
 *  `projects//instances//databases/` for database resources.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSpanner_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified instance resource.
 *  Attempting this RPC on a non-existent Cloud Spanner instance resource will
 *  result in a NOT_FOUND error if the user has `spanner.instances.list`
 *  permission on the containing Google Cloud Project. Otherwise returns an
 *  empty set of permissions.
 *
 *  @param object The @c GTLRSpanner_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The Cloud Spanner resource for which permissions
 *    are being tested. The format is `projects//instances/` for instance
 *    resources and `projects//instances//databases/` for database resources.
 *
 *  @return GTLRSpannerQuery_ProjectsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSpanner_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Return available scans given a Database-specific resource name.
 *
 *  Method: spanner.scans.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSpannerCloudPlatform
 *    @c kGTLRAuthScopeSpannerData
 */
@interface GTLRSpannerQuery_ScansList : GTLRSpannerQuery

/**
 *  A filter expression to restrict the results based on information present in
 *  the available Scan collection. The filter applies to all fields within the
 *  Scan message except for `data`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The unique name of the parent resource, specific to the Database
 *  service implementing this interface.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Specifies which parts of the Scan should be returned in the response. Note,
 *  only the SUMMARY view (the default) is currently supported for ListScans.
 *
 *  Likely values:
 *    @arg @c kGTLRSpannerViewViewUnspecified Not specified, equivalent to
 *        SUMMARY. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRSpannerViewSummary Server responses only include `name`,
 *        `details`, `start_time` and `end_time`. The default value. Note, the
 *        ListScans method may only use this view type, others view types are
 *        not supported. (Value: "SUMMARY")
 *    @arg @c kGTLRSpannerViewFull Full representation of the scan is returned
 *        in the server response, including `data`. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRSpanner_ListScansResponse.
 *
 *  Return available scans given a Database-specific resource name.
 *
 *  @param parent Required. The unique name of the parent resource, specific to
 *    the Database service implementing this interface.
 *
 *  @return GTLRSpannerQuery_ScansList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
