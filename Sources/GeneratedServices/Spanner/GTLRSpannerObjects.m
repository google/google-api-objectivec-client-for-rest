// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Spanner API (spanner/v1)
// Description:
//   Cloud Spanner is a managed, mission-critical, globally consistent and
//   scalable relational database service.
// Documentation:
//   https://cloud.google.com/spanner/

#import <GoogleAPIClientForREST/GTLRSpannerObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRSpanner_Backup.databaseDialect
NSString * const kGTLRSpanner_Backup_DatabaseDialect_DatabaseDialectUnspecified = @"DATABASE_DIALECT_UNSPECIFIED";
NSString * const kGTLRSpanner_Backup_DatabaseDialect_GoogleStandardSql = @"GOOGLE_STANDARD_SQL";
NSString * const kGTLRSpanner_Backup_DatabaseDialect_Postgresql = @"POSTGRESQL";

// GTLRSpanner_Backup.state
NSString * const kGTLRSpanner_Backup_State_Creating         = @"CREATING";
NSString * const kGTLRSpanner_Backup_State_Ready            = @"READY";
NSString * const kGTLRSpanner_Backup_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_ContextValue.severity
NSString * const kGTLRSpanner_ContextValue_Severity_Error      = @"ERROR";
NSString * const kGTLRSpanner_ContextValue_Severity_Fatal      = @"FATAL";
NSString * const kGTLRSpanner_ContextValue_Severity_Info       = @"INFO";
NSString * const kGTLRSpanner_ContextValue_Severity_SeverityUnspecified = @"SEVERITY_UNSPECIFIED";
NSString * const kGTLRSpanner_ContextValue_Severity_Warning    = @"WARNING";

// GTLRSpanner_CopyBackupEncryptionConfig.encryptionType
NSString * const kGTLRSpanner_CopyBackupEncryptionConfig_EncryptionType_CustomerManagedEncryption = @"CUSTOMER_MANAGED_ENCRYPTION";
NSString * const kGTLRSpanner_CopyBackupEncryptionConfig_EncryptionType_EncryptionTypeUnspecified = @"ENCRYPTION_TYPE_UNSPECIFIED";
NSString * const kGTLRSpanner_CopyBackupEncryptionConfig_EncryptionType_GoogleDefaultEncryption = @"GOOGLE_DEFAULT_ENCRYPTION";
NSString * const kGTLRSpanner_CopyBackupEncryptionConfig_EncryptionType_UseConfigDefaultOrBackupEncryption = @"USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION";

// GTLRSpanner_CreateDatabaseRequest.databaseDialect
NSString * const kGTLRSpanner_CreateDatabaseRequest_DatabaseDialect_DatabaseDialectUnspecified = @"DATABASE_DIALECT_UNSPECIFIED";
NSString * const kGTLRSpanner_CreateDatabaseRequest_DatabaseDialect_GoogleStandardSql = @"GOOGLE_STANDARD_SQL";
NSString * const kGTLRSpanner_CreateDatabaseRequest_DatabaseDialect_Postgresql = @"POSTGRESQL";

// GTLRSpanner_Database.databaseDialect
NSString * const kGTLRSpanner_Database_DatabaseDialect_DatabaseDialectUnspecified = @"DATABASE_DIALECT_UNSPECIFIED";
NSString * const kGTLRSpanner_Database_DatabaseDialect_GoogleStandardSql = @"GOOGLE_STANDARD_SQL";
NSString * const kGTLRSpanner_Database_DatabaseDialect_Postgresql = @"POSTGRESQL";

// GTLRSpanner_Database.state
NSString * const kGTLRSpanner_Database_State_Creating         = @"CREATING";
NSString * const kGTLRSpanner_Database_State_Ready            = @"READY";
NSString * const kGTLRSpanner_Database_State_ReadyOptimizing  = @"READY_OPTIMIZING";
NSString * const kGTLRSpanner_Database_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_DiagnosticMessage.severity
NSString * const kGTLRSpanner_DiagnosticMessage_Severity_Error = @"ERROR";
NSString * const kGTLRSpanner_DiagnosticMessage_Severity_Fatal = @"FATAL";
NSString * const kGTLRSpanner_DiagnosticMessage_Severity_Info  = @"INFO";
NSString * const kGTLRSpanner_DiagnosticMessage_Severity_SeverityUnspecified = @"SEVERITY_UNSPECIFIED";
NSString * const kGTLRSpanner_DiagnosticMessage_Severity_Warning = @"WARNING";

// GTLRSpanner_EncryptionInfo.encryptionType
NSString * const kGTLRSpanner_EncryptionInfo_EncryptionType_CustomerManagedEncryption = @"CUSTOMER_MANAGED_ENCRYPTION";
NSString * const kGTLRSpanner_EncryptionInfo_EncryptionType_GoogleDefaultEncryption = @"GOOGLE_DEFAULT_ENCRYPTION";
NSString * const kGTLRSpanner_EncryptionInfo_EncryptionType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRSpanner_ExecuteSqlRequest.queryMode
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Normal = @"NORMAL";
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Plan = @"PLAN";
NSString * const kGTLRSpanner_ExecuteSqlRequest_QueryMode_Profile = @"PROFILE";

// GTLRSpanner_FreeInstanceMetadata.expireBehavior
NSString * const kGTLRSpanner_FreeInstanceMetadata_ExpireBehavior_ExpireBehaviorUnspecified = @"EXPIRE_BEHAVIOR_UNSPECIFIED";
NSString * const kGTLRSpanner_FreeInstanceMetadata_ExpireBehavior_FreeToProvisioned = @"FREE_TO_PROVISIONED";
NSString * const kGTLRSpanner_FreeInstanceMetadata_ExpireBehavior_RemoveAfterGracePeriod = @"REMOVE_AFTER_GRACE_PERIOD";

// GTLRSpanner_Instance.instanceType
NSString * const kGTLRSpanner_Instance_InstanceType_FreeInstance = @"FREE_INSTANCE";
NSString * const kGTLRSpanner_Instance_InstanceType_InstanceTypeUnspecified = @"INSTANCE_TYPE_UNSPECIFIED";
NSString * const kGTLRSpanner_Instance_InstanceType_Provisioned = @"PROVISIONED";

// GTLRSpanner_Instance.state
NSString * const kGTLRSpanner_Instance_State_Creating         = @"CREATING";
NSString * const kGTLRSpanner_Instance_State_Ready            = @"READY";
NSString * const kGTLRSpanner_Instance_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_InstanceConfig.configType
NSString * const kGTLRSpanner_InstanceConfig_ConfigType_GoogleManaged = @"GOOGLE_MANAGED";
NSString * const kGTLRSpanner_InstanceConfig_ConfigType_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRSpanner_InstanceConfig_ConfigType_UserManaged = @"USER_MANAGED";

// GTLRSpanner_InstanceConfig.freeInstanceAvailability
NSString * const kGTLRSpanner_InstanceConfig_FreeInstanceAvailability_Available = @"AVAILABLE";
NSString * const kGTLRSpanner_InstanceConfig_FreeInstanceAvailability_Disabled = @"DISABLED";
NSString * const kGTLRSpanner_InstanceConfig_FreeInstanceAvailability_FreeInstanceAvailabilityUnspecified = @"FREE_INSTANCE_AVAILABILITY_UNSPECIFIED";
NSString * const kGTLRSpanner_InstanceConfig_FreeInstanceAvailability_QuotaExceeded = @"QUOTA_EXCEEDED";
NSString * const kGTLRSpanner_InstanceConfig_FreeInstanceAvailability_Unsupported = @"UNSUPPORTED";

// GTLRSpanner_InstanceConfig.state
NSString * const kGTLRSpanner_InstanceConfig_State_Creating    = @"CREATING";
NSString * const kGTLRSpanner_InstanceConfig_State_Ready       = @"READY";
NSString * const kGTLRSpanner_InstanceConfig_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRSpanner_Metric.aggregation
NSString * const kGTLRSpanner_Metric_Aggregation_AggregationUnspecified = @"AGGREGATION_UNSPECIFIED";
NSString * const kGTLRSpanner_Metric_Aggregation_Max           = @"MAX";
NSString * const kGTLRSpanner_Metric_Aggregation_Sum           = @"SUM";

// GTLRSpanner_PlanNode.kind
NSString * const kGTLRSpanner_PlanNode_Kind_KindUnspecified = @"KIND_UNSPECIFIED";
NSString * const kGTLRSpanner_PlanNode_Kind_Relational      = @"RELATIONAL";
NSString * const kGTLRSpanner_PlanNode_Kind_Scalar          = @"SCALAR";

// GTLRSpanner_ReadWrite.readLockMode
NSString * const kGTLRSpanner_ReadWrite_ReadLockMode_Optimistic = @"OPTIMISTIC";
NSString * const kGTLRSpanner_ReadWrite_ReadLockMode_Pessimistic = @"PESSIMISTIC";
NSString * const kGTLRSpanner_ReadWrite_ReadLockMode_ReadLockModeUnspecified = @"READ_LOCK_MODE_UNSPECIFIED";

// GTLRSpanner_ReplicaInfo.type
NSString * const kGTLRSpanner_ReplicaInfo_Type_ReadOnly        = @"READ_ONLY";
NSString * const kGTLRSpanner_ReplicaInfo_Type_ReadWrite       = @"READ_WRITE";
NSString * const kGTLRSpanner_ReplicaInfo_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRSpanner_ReplicaInfo_Type_Witness         = @"WITNESS";

// GTLRSpanner_RequestOptions.priority
NSString * const kGTLRSpanner_RequestOptions_Priority_PriorityHigh = @"PRIORITY_HIGH";
NSString * const kGTLRSpanner_RequestOptions_Priority_PriorityLow = @"PRIORITY_LOW";
NSString * const kGTLRSpanner_RequestOptions_Priority_PriorityMedium = @"PRIORITY_MEDIUM";
NSString * const kGTLRSpanner_RequestOptions_Priority_PriorityUnspecified = @"PRIORITY_UNSPECIFIED";

// GTLRSpanner_RestoreDatabaseEncryptionConfig.encryptionType
NSString * const kGTLRSpanner_RestoreDatabaseEncryptionConfig_EncryptionType_CustomerManagedEncryption = @"CUSTOMER_MANAGED_ENCRYPTION";
NSString * const kGTLRSpanner_RestoreDatabaseEncryptionConfig_EncryptionType_EncryptionTypeUnspecified = @"ENCRYPTION_TYPE_UNSPECIFIED";
NSString * const kGTLRSpanner_RestoreDatabaseEncryptionConfig_EncryptionType_GoogleDefaultEncryption = @"GOOGLE_DEFAULT_ENCRYPTION";
NSString * const kGTLRSpanner_RestoreDatabaseEncryptionConfig_EncryptionType_UseConfigDefaultOrBackupEncryption = @"USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION";

// GTLRSpanner_RestoreDatabaseMetadata.sourceType
NSString * const kGTLRSpanner_RestoreDatabaseMetadata_SourceType_Backup = @"BACKUP";
NSString * const kGTLRSpanner_RestoreDatabaseMetadata_SourceType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRSpanner_RestoreInfo.sourceType
NSString * const kGTLRSpanner_RestoreInfo_SourceType_Backup    = @"BACKUP";
NSString * const kGTLRSpanner_RestoreInfo_SourceType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRSpanner_Type.code
NSString * const kGTLRSpanner_Type_Code_Array               = @"ARRAY";
NSString * const kGTLRSpanner_Type_Code_Bool                = @"BOOL";
NSString * const kGTLRSpanner_Type_Code_Bytes               = @"BYTES";
NSString * const kGTLRSpanner_Type_Code_Date                = @"DATE";
NSString * const kGTLRSpanner_Type_Code_Float64             = @"FLOAT64";
NSString * const kGTLRSpanner_Type_Code_Int64               = @"INT64";
NSString * const kGTLRSpanner_Type_Code_Json                = @"JSON";
NSString * const kGTLRSpanner_Type_Code_Numeric             = @"NUMERIC";
NSString * const kGTLRSpanner_Type_Code_String              = @"STRING";
NSString * const kGTLRSpanner_Type_Code_Struct              = @"STRUCT";
NSString * const kGTLRSpanner_Type_Code_Timestamp           = @"TIMESTAMP";
NSString * const kGTLRSpanner_Type_Code_TypeCodeUnspecified = @"TYPE_CODE_UNSPECIFIED";

// GTLRSpanner_Type.typeAnnotation
NSString * const kGTLRSpanner_Type_TypeAnnotation_PgJsonb      = @"PG_JSONB";
NSString * const kGTLRSpanner_Type_TypeAnnotation_PgNumeric    = @"PG_NUMERIC";
NSString * const kGTLRSpanner_Type_TypeAnnotation_TypeAnnotationCodeUnspecified = @"TYPE_ANNOTATION_CODE_UNSPECIFIED";

// GTLRSpanner_VisualizationData.keyUnit
NSString * const kGTLRSpanner_VisualizationData_KeyUnit_Chunk  = @"CHUNK";
NSString * const kGTLRSpanner_VisualizationData_KeyUnit_Key    = @"KEY";
NSString * const kGTLRSpanner_VisualizationData_KeyUnit_KeyUnitUnspecified = @"KEY_UNIT_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Backup
//

@implementation GTLRSpanner_Backup
@dynamic createTime, database, databaseDialect, encryptionInfo, expireTime,
         maxExpireTime, name, referencingBackups, referencingDatabases,
         sizeBytes, state, versionTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"referencingBackups" : [NSString class],
    @"referencingDatabases" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_BackupInfo
//

@implementation GTLRSpanner_BackupInfo
@dynamic backup, createTime, sourceDatabase, versionTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_BatchCreateSessionsRequest
//

@implementation GTLRSpanner_BatchCreateSessionsRequest
@dynamic sessionCount, sessionTemplate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_BatchCreateSessionsResponse
//

@implementation GTLRSpanner_BatchCreateSessionsResponse
@dynamic session;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"session" : [GTLRSpanner_Session class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_BeginTransactionRequest
//

@implementation GTLRSpanner_BeginTransactionRequest
@dynamic options, requestOptions;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Binding
//

@implementation GTLRSpanner_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ChildLink
//

@implementation GTLRSpanner_ChildLink
@dynamic childIndex, type, variable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CommitRequest
//

@implementation GTLRSpanner_CommitRequest
@dynamic mutations, requestOptions, returnCommitStats, singleUseTransaction,
         transactionId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mutations" : [GTLRSpanner_Mutation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CommitResponse
//

@implementation GTLRSpanner_CommitResponse
@dynamic commitStats, commitTimestamp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CommitStats
//

@implementation GTLRSpanner_CommitStats
@dynamic mutationCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ContextValue
//

@implementation GTLRSpanner_ContextValue
@dynamic label, severity, unit, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CopyBackupEncryptionConfig
//

@implementation GTLRSpanner_CopyBackupEncryptionConfig
@dynamic encryptionType, kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CopyBackupMetadata
//

@implementation GTLRSpanner_CopyBackupMetadata
@dynamic cancelTime, name, progress, sourceBackup;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CopyBackupRequest
//

@implementation GTLRSpanner_CopyBackupRequest
@dynamic backupId, encryptionConfig, expireTime, sourceBackup;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateBackupMetadata
//

@implementation GTLRSpanner_CreateBackupMetadata
@dynamic cancelTime, database, name, progress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateDatabaseMetadata
//

@implementation GTLRSpanner_CreateDatabaseMetadata
@dynamic database;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateDatabaseRequest
//

@implementation GTLRSpanner_CreateDatabaseRequest
@dynamic createStatement, databaseDialect, encryptionConfig, extraStatements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraStatements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceConfigMetadata
//

@implementation GTLRSpanner_CreateInstanceConfigMetadata
@dynamic cancelTime, instanceConfig, progress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceConfigRequest
//

@implementation GTLRSpanner_CreateInstanceConfigRequest
@dynamic instanceConfig, instanceConfigId, validateOnly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceMetadata
//

@implementation GTLRSpanner_CreateInstanceMetadata
@dynamic cancelTime, endTime, instance, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateInstanceRequest
//

@implementation GTLRSpanner_CreateInstanceRequest
@dynamic instance, instanceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_CreateSessionRequest
//

@implementation GTLRSpanner_CreateSessionRequest
@dynamic session;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Database
//

@implementation GTLRSpanner_Database
@dynamic createTime, databaseDialect, defaultLeader, earliestVersionTime,
         encryptionConfig, encryptionInfo, name, restoreInfo, state,
         versionRetentionPeriod;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"encryptionInfo" : [GTLRSpanner_EncryptionInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_DatabaseRole
//

@implementation GTLRSpanner_DatabaseRole
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Delete
//

@implementation GTLRSpanner_Delete
@dynamic keySet, table;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_DerivedMetric
//

@implementation GTLRSpanner_DerivedMetric
@dynamic denominator, numerator;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_DiagnosticMessage
//

@implementation GTLRSpanner_DiagnosticMessage
@dynamic info, metric, metricSpecific, severity, shortMessage;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Empty
//

@implementation GTLRSpanner_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_EncryptionConfig
//

@implementation GTLRSpanner_EncryptionConfig
@dynamic kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_EncryptionInfo
//

@implementation GTLRSpanner_EncryptionInfo
@dynamic encryptionStatus, encryptionType, kmsKeyVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteBatchDmlRequest
//

@implementation GTLRSpanner_ExecuteBatchDmlRequest
@dynamic requestOptions, seqno, statements, transaction;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statements" : [GTLRSpanner_Statement class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteBatchDmlResponse
//

@implementation GTLRSpanner_ExecuteBatchDmlResponse
@dynamic resultSets, status;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resultSets" : [GTLRSpanner_ResultSet class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest
//

@implementation GTLRSpanner_ExecuteSqlRequest
@dynamic params, paramTypes, partitionToken, queryMode, queryOptions,
         requestOptions, resumeToken, seqno, sql, transaction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest_Params
//

@implementation GTLRSpanner_ExecuteSqlRequest_Params

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ExecuteSqlRequest_ParamTypes
//

@implementation GTLRSpanner_ExecuteSqlRequest_ParamTypes

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_Type class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Expr
//

@implementation GTLRSpanner_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Field
//

@implementation GTLRSpanner_Field
@dynamic name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_FreeInstanceMetadata
//

@implementation GTLRSpanner_FreeInstanceMetadata
@dynamic expireBehavior, expireTime, upgradeTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_GetDatabaseDdlResponse
//

@implementation GTLRSpanner_GetDatabaseDdlResponse
@dynamic statements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_GetIamPolicyRequest
//

@implementation GTLRSpanner_GetIamPolicyRequest
@dynamic options;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_GetPolicyOptions
//

@implementation GTLRSpanner_GetPolicyOptions
@dynamic requestedPolicyVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_IndexedHotKey
//

@implementation GTLRSpanner_IndexedHotKey
@dynamic sparseHotKeys;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_IndexedHotKey_SparseHotKeys
//

@implementation GTLRSpanner_IndexedHotKey_SparseHotKeys

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_IndexedKeyRangeInfos
//

@implementation GTLRSpanner_IndexedKeyRangeInfos
@dynamic keyRangeInfos;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_IndexedKeyRangeInfos_KeyRangeInfos
//

@implementation GTLRSpanner_IndexedKeyRangeInfos_KeyRangeInfos

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_KeyRangeInfos class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Instance
//

@implementation GTLRSpanner_Instance
@dynamic config, createTime, displayName, endpointUris, freeInstanceMetadata,
         instanceType, labels, name, nodeCount, processingUnits, state,
         updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"endpointUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Instance_Labels
//

@implementation GTLRSpanner_Instance_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_InstanceConfig
//

@implementation GTLRSpanner_InstanceConfig
@dynamic baseConfig, configType, displayName, ETag, freeInstanceAvailability,
         labels, leaderOptions, name, optionalReplicas, reconciling, replicas,
         state;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"leaderOptions" : [NSString class],
    @"optionalReplicas" : [GTLRSpanner_ReplicaInfo class],
    @"replicas" : [GTLRSpanner_ReplicaInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_InstanceConfig_Labels
//

@implementation GTLRSpanner_InstanceConfig_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_InstanceOperationProgress
//

@implementation GTLRSpanner_InstanceOperationProgress
@dynamic endTime, progressPercent, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeyRange
//

@implementation GTLRSpanner_KeyRange
@dynamic endClosed, endOpen, startClosed, startOpen;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"endClosed" : [NSObject class],
    @"endOpen" : [NSObject class],
    @"startClosed" : [NSObject class],
    @"startOpen" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeyRangeInfo
//

@implementation GTLRSpanner_KeyRangeInfo
@dynamic contextValues, endKeyIndex, info, keysCount, metric, startKeyIndex,
         timeOffset, unit, value;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contextValues" : [GTLRSpanner_ContextValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeyRangeInfos
//

@implementation GTLRSpanner_KeyRangeInfos
@dynamic infos, totalSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"infos" : [GTLRSpanner_KeyRangeInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_KeySet
//

@implementation GTLRSpanner_KeySet
@dynamic all, keys, ranges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"keys" : [NSObject class],
    @"ranges" : [GTLRSpanner_KeyRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListBackupOperationsResponse
//

@implementation GTLRSpanner_ListBackupOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRSpanner_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListBackupsResponse
//

@implementation GTLRSpanner_ListBackupsResponse
@dynamic backups, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"backups" : [GTLRSpanner_Backup class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"backups";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListDatabaseOperationsResponse
//

@implementation GTLRSpanner_ListDatabaseOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRSpanner_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListDatabaseRolesResponse
//

@implementation GTLRSpanner_ListDatabaseRolesResponse
@dynamic databaseRoles, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databaseRoles" : [GTLRSpanner_DatabaseRole class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"databaseRoles";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListDatabasesResponse
//

@implementation GTLRSpanner_ListDatabasesResponse
@dynamic databases, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databases" : [GTLRSpanner_Database class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"databases";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListInstanceConfigOperationsResponse
//

@implementation GTLRSpanner_ListInstanceConfigOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRSpanner_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListInstanceConfigsResponse
//

@implementation GTLRSpanner_ListInstanceConfigsResponse
@dynamic instanceConfigs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceConfigs" : [GTLRSpanner_InstanceConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"instanceConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListInstancesResponse
//

@implementation GTLRSpanner_ListInstancesResponse
@dynamic instances, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRSpanner_Instance class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"instances";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListOperationsResponse
//

@implementation GTLRSpanner_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRSpanner_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListScansResponse
//

@implementation GTLRSpanner_ListScansResponse
@dynamic nextPageToken, scans;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scans" : [GTLRSpanner_Scan class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"scans";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ListSessionsResponse
//

@implementation GTLRSpanner_ListSessionsResponse
@dynamic nextPageToken, sessions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sessions" : [GTLRSpanner_Session class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sessions";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_LocalizedString
//

@implementation GTLRSpanner_LocalizedString
@dynamic args, message, token;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_LocalizedString_Args
//

@implementation GTLRSpanner_LocalizedString_Args

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Metric
//

@implementation GTLRSpanner_Metric
@dynamic aggregation, category, derived, displayLabel, hasNonzeroData, hotValue,
         indexedHotKeys, indexedKeyRangeInfos, info, matrix, unit, visible;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Metric_IndexedHotKeys
//

@implementation GTLRSpanner_Metric_IndexedHotKeys

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_IndexedHotKey class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Metric_IndexedKeyRangeInfos
//

@implementation GTLRSpanner_Metric_IndexedKeyRangeInfos

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_IndexedKeyRangeInfos class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_MetricMatrix
//

@implementation GTLRSpanner_MetricMatrix
@dynamic rows;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRSpanner_MetricMatrixRow class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_MetricMatrixRow
//

@implementation GTLRSpanner_MetricMatrixRow
@dynamic cols;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cols" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Mutation
//

@implementation GTLRSpanner_Mutation
@dynamic deleteProperty, insert, insertOrUpdate, replace, update;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation
//

@implementation GTLRSpanner_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation_Metadata
//

@implementation GTLRSpanner_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Operation_Response
//

@implementation GTLRSpanner_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_OperationProgress
//

@implementation GTLRSpanner_OperationProgress
@dynamic endTime, progressPercent, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_OptimizeRestoredDatabaseMetadata
//

@implementation GTLRSpanner_OptimizeRestoredDatabaseMetadata
@dynamic name, progress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartialResultSet
//

@implementation GTLRSpanner_PartialResultSet
@dynamic chunkedValue, metadata, resumeToken, stats, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Partition
//

@implementation GTLRSpanner_Partition
@dynamic partitionToken;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionedDml
//

@implementation GTLRSpanner_PartitionedDml
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionOptions
//

@implementation GTLRSpanner_PartitionOptions
@dynamic maxPartitions, partitionSizeBytes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionQueryRequest
//

@implementation GTLRSpanner_PartitionQueryRequest
@dynamic params, paramTypes, partitionOptions, sql, transaction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionQueryRequest_Params
//

@implementation GTLRSpanner_PartitionQueryRequest_Params

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionQueryRequest_ParamTypes
//

@implementation GTLRSpanner_PartitionQueryRequest_ParamTypes

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_Type class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionReadRequest
//

@implementation GTLRSpanner_PartitionReadRequest
@dynamic columns, index, keySet, partitionOptions, table, transaction;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PartitionResponse
//

@implementation GTLRSpanner_PartitionResponse
@dynamic partitions, transaction;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"partitions" : [GTLRSpanner_Partition class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode
//

@implementation GTLRSpanner_PlanNode
@dynamic childLinks, displayName, executionStats, index, kind, metadata,
         shortRepresentation;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childLinks" : [GTLRSpanner_ChildLink class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode_ExecutionStats
//

@implementation GTLRSpanner_PlanNode_ExecutionStats

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PlanNode_Metadata
//

@implementation GTLRSpanner_PlanNode_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Policy
//

@implementation GTLRSpanner_Policy
@dynamic bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bindings" : [GTLRSpanner_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_PrefixNode
//

@implementation GTLRSpanner_PrefixNode
@dynamic dataSourceNode, depth, endIndex, startIndex, word;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_QueryOptions
//

@implementation GTLRSpanner_QueryOptions
@dynamic optimizerStatisticsPackage, optimizerVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_QueryPlan
//

@implementation GTLRSpanner_QueryPlan
@dynamic planNodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"planNodes" : [GTLRSpanner_PlanNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadOnly
//

@implementation GTLRSpanner_ReadOnly
@dynamic exactStaleness, maxStaleness, minReadTimestamp, readTimestamp,
         returnReadTimestamp, strong;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadRequest
//

@implementation GTLRSpanner_ReadRequest
@dynamic columns, index, keySet, limit, partitionToken, requestOptions,
         resumeToken, table, transaction;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReadWrite
//

@implementation GTLRSpanner_ReadWrite
@dynamic readLockMode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ReplicaInfo
//

@implementation GTLRSpanner_ReplicaInfo
@dynamic defaultLeaderLocation, location, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RequestOptions
//

@implementation GTLRSpanner_RequestOptions
@dynamic priority, requestTag, transactionTag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RestoreDatabaseEncryptionConfig
//

@implementation GTLRSpanner_RestoreDatabaseEncryptionConfig
@dynamic encryptionType, kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RestoreDatabaseMetadata
//

@implementation GTLRSpanner_RestoreDatabaseMetadata
@dynamic backupInfo, cancelTime, name, optimizeDatabaseOperationName, progress,
         sourceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RestoreDatabaseRequest
//

@implementation GTLRSpanner_RestoreDatabaseRequest
@dynamic backup, databaseId, encryptionConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RestoreInfo
//

@implementation GTLRSpanner_RestoreInfo
@dynamic backupInfo, sourceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSet
//

@implementation GTLRSpanner_ResultSet
@dynamic metadata, rows, stats;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetMetadata
//

@implementation GTLRSpanner_ResultSetMetadata
@dynamic rowType, transaction, undeclaredParameters;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetStats
//

@implementation GTLRSpanner_ResultSetStats
@dynamic queryPlan, queryStats, rowCountExact, rowCountLowerBound;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ResultSetStats_QueryStats
//

@implementation GTLRSpanner_ResultSetStats_QueryStats

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_RollbackRequest
//

@implementation GTLRSpanner_RollbackRequest
@dynamic transactionId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Scan
//

@implementation GTLRSpanner_Scan
@dynamic details, endTime, name, scanData, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Scan_Details
//

@implementation GTLRSpanner_Scan_Details

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ScanData
//

@implementation GTLRSpanner_ScanData
@dynamic data, endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Session
//

@implementation GTLRSpanner_Session
@dynamic approximateLastUseTime, createTime, creatorRole, labels, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Session_Labels
//

@implementation GTLRSpanner_Session_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_SetIamPolicyRequest
//

@implementation GTLRSpanner_SetIamPolicyRequest
@dynamic policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ShortRepresentation
//

@implementation GTLRSpanner_ShortRepresentation
@dynamic descriptionProperty, subqueries;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_ShortRepresentation_Subqueries
//

@implementation GTLRSpanner_ShortRepresentation_Subqueries

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Statement
//

@implementation GTLRSpanner_Statement
@dynamic params, paramTypes, sql;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Statement_Params
//

@implementation GTLRSpanner_Statement_Params

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Statement_ParamTypes
//

@implementation GTLRSpanner_Statement_ParamTypes

+ (Class)classForAdditionalProperties {
  return [GTLRSpanner_Type class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Status
//

@implementation GTLRSpanner_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRSpanner_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Status_Details_Item
//

@implementation GTLRSpanner_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_StructType
//

@implementation GTLRSpanner_StructType
@dynamic fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRSpanner_Field class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TestIamPermissionsRequest
//

@implementation GTLRSpanner_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TestIamPermissionsResponse
//

@implementation GTLRSpanner_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Transaction
//

@implementation GTLRSpanner_Transaction
@dynamic identifier, readTimestamp;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TransactionOptions
//

@implementation GTLRSpanner_TransactionOptions
@dynamic partitionedDml, readOnly, readWrite;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_TransactionSelector
//

@implementation GTLRSpanner_TransactionSelector
@dynamic begin, identifier, singleUse;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Type
//

@implementation GTLRSpanner_Type
@dynamic arrayElementType, code, structType, typeAnnotation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateDatabaseDdlMetadata
//

@implementation GTLRSpanner_UpdateDatabaseDdlMetadata
@dynamic commitTimestamps, database, progress, statements, throttled;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"commitTimestamps" : [GTLRDateTime class],
    @"progress" : [GTLRSpanner_OperationProgress class],
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateDatabaseDdlRequest
//

@implementation GTLRSpanner_UpdateDatabaseDdlRequest
@dynamic operationId, statements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceConfigMetadata
//

@implementation GTLRSpanner_UpdateInstanceConfigMetadata
@dynamic cancelTime, instanceConfig, progress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceConfigRequest
//

@implementation GTLRSpanner_UpdateInstanceConfigRequest
@dynamic instanceConfig, updateMask, validateOnly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceMetadata
//

@implementation GTLRSpanner_UpdateInstanceMetadata
@dynamic cancelTime, endTime, instance, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_UpdateInstanceRequest
//

@implementation GTLRSpanner_UpdateInstanceRequest
@dynamic fieldMask, instance;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_VisualizationData
//

@implementation GTLRSpanner_VisualizationData
@dynamic dataSourceEndToken, dataSourceSeparatorToken, diagnosticMessages,
         endKeyStrings, hasPii, indexedKeys, keySeparator, keyUnit, metrics,
         prefixNodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"diagnosticMessages" : [GTLRSpanner_DiagnosticMessage class],
    @"endKeyStrings" : [NSString class],
    @"indexedKeys" : [NSString class],
    @"metrics" : [GTLRSpanner_Metric class],
    @"prefixNodes" : [GTLRSpanner_PrefixNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSpanner_Write
//

@implementation GTLRSpanner_Write
@dynamic columns, table, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class],
    @"values" : [NSObject class]
  };
  return map;
}

@end
