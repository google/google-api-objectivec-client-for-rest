// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Management API (chromemanagement/v1)
// Description:
//   The Chrome Management API is a suite of services that allows Chrome
//   administrators to view, manage and gain insights on their Chrome OS and
//   Chrome Browser devices.
// Documentation:
//   http://developers.google.com/chrome/management/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRChromeManagementObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// appType

/**
 *  ARC++ app.
 *
 *  Value: "ANDROID_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeAndroidApp;
/**
 *  Chrome app.
 *
 *  Value: "APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeApp;
/**
 *  App type not specified.
 *
 *  Value: "APP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeAppTypeUnspecified;
/**
 *  Chrome extension.
 *
 *  Value: "EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeExtension;
/**
 *  Chrome hosted app.
 *
 *  Value: "HOSTED_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeHostedApp;
/**
 *  Chrome theme.
 *
 *  Value: "THEME"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagementAppTypeTheme;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Chrome Management query classes.
 */
@interface GTLRChromeManagementQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get a specific app for a customer by its resource name.
 *
 *  Method: chromemanagement.customers.apps.android.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsAndroidGet : GTLRChromeManagementQuery

/**
 *  Required. The app for which details are being queried. Examples:
 *  "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *  for the Save to Google Drive Chrome extension version 2.1.2,
 *  "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *  Google Drive Android app's latest version.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleChromeManagementV1AppDetails.
 *
 *  Get a specific app for a customer by its resource name.
 *
 *  @param name Required. The app for which details are being queried. Examples:
 *    "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *    for the Save to Google Drive Chrome extension version 2.1.2,
 *    "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *    Google Drive Android app's latest version.
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsAndroidGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a specific app for a customer by its resource name.
 *
 *  Method: chromemanagement.customers.apps.chrome.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsChromeGet : GTLRChromeManagementQuery

/**
 *  Required. The app for which details are being queried. Examples:
 *  "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *  for the Save to Google Drive Chrome extension version 2.1.2,
 *  "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *  Google Drive Android app's latest version.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleChromeManagementV1AppDetails.
 *
 *  Get a specific app for a customer by its resource name.
 *
 *  @param name Required. The app for which details are being queried. Examples:
 *    "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *    for the Save to Google Drive Chrome extension version 2.1.2,
 *    "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *    Google Drive Android app's latest version.
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsChromeGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Generate summary of app installation requests.
 *
 *  Method: chromemanagement.customers.apps.countChromeAppRequests
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsCountChromeAppRequests : GTLRChromeManagementQuery

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Field used to order results. Supported fields: * request_count *
 *  latest_request_time
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The ID of the organizational unit. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Maximum number of results to return. Maximum and default are 50, anything
 *  above will be coerced to 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the request to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeAppRequestsResponse.
 *
 *  Generate summary of app installation requests.
 *
 *  @param customer Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsCountChromeAppRequests
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a list of devices that have requested to install an extension.
 *
 *  Method: chromemanagement.customers.apps.fetchDevicesRequestingExtension
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsFetchDevicesRequestingExtension : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer" prefixed with "customers/". */
@property(nonatomic, copy, nullable) NSString *customer;

/** Required. The extension for which we want to find requesting devices. */
@property(nonatomic, copy, nullable) NSString *extensionId;

/**
 *  The ID of the organizational unit. Only consider devices that directly
 *  belong to this org unit, i.e. sub-orgunits are not counted. If omitted, all
 *  data will be returned.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Optional. Maximum number of results to return. Maximum and default are 50.
 *  Any page size larger than 50 will be coerced to 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to specify the page of the request to be returned. Token
 *  expires after 1 day.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1FetchDevicesRequestingExtensionResponse.
 *
 *  Get a list of devices that have requested to install an extension.
 *
 *  @param customer Required. The customer ID or "my_customer" prefixed with
 *    "customers/".
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsFetchDevicesRequestingExtension
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a list of users that have requested to install an extension.
 *
 *  Method: chromemanagement.customers.apps.fetchUsersRequestingExtension
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsFetchUsersRequestingExtension : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer" prefixed with "customers/". */
@property(nonatomic, copy, nullable) NSString *customer;

/** Required. The extension for which we want to find the requesting users. */
@property(nonatomic, copy, nullable) NSString *extensionId;

/**
 *  The ID of the organizational unit. Only consider devices that directly
 *  belong to this org unit, i.e. sub-orgunits are not counted. If omitted, all
 *  data will be returned.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Optional. Maximum number of results to return. Maximum and default are 50.
 *  Any page size larger than 50 will be coerced to 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to specify the page of the request to be returned. Token
 *  expires after 1 day.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1FetchUsersRequestingExtensionResponse.
 *
 *  Get a list of users that have requested to install an extension.
 *
 *  @param customer Required. The customer ID or "my_customer" prefixed with
 *    "customers/".
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsFetchUsersRequestingExtension
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a specific app for a customer by its resource name.
 *
 *  Method: chromemanagement.customers.apps.web.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementAppdetailsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersAppsWebGet : GTLRChromeManagementQuery

/**
 *  Required. The app for which details are being queried. Examples:
 *  "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *  for the Save to Google Drive Chrome extension version 2.1.2,
 *  "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *  Google Drive Android app's latest version.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleChromeManagementV1AppDetails.
 *
 *  Get a specific app for a customer by its resource name.
 *
 *  @param name Required. The app for which details are being queried. Examples:
 *    "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne\@2.1.2"
 *    for the Save to Google Drive Chrome extension version 2.1.2,
 *    "customers/my_customer/apps/android/com.google.android.apps.docs" for the
 *    Google Drive Android app's latest version.
 *
 *  @return GTLRChromeManagementQuery_CustomersAppsWebGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes the data collected from a Chrome browser profile.
 *
 *  Method: chromemanagement.customers.profiles.delete
 */
@interface GTLRChromeManagementQuery_CustomersProfilesDelete : GTLRChromeManagementQuery

/**
 *  Required. Format: customers/{customer_id}/profiles/{profile_permanent_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleProtobufEmpty.
 *
 *  Deletes the data collected from a Chrome browser profile.
 *
 *  @param name Required. Format:
 *    customers/{customer_id}/profiles/{profile_permanent_id}
 *
 *  @return GTLRChromeManagementQuery_CustomersProfilesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Chrome browser profile with customer ID and profile permanent ID.
 *
 *  Method: chromemanagement.customers.profiles.get
 */
@interface GTLRChromeManagementQuery_CustomersProfilesGet : GTLRChromeManagementQuery

/**
 *  Required. Format: customers/{customer_id}/profiles/{profile_permanent_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementVersionsV1ChromeBrowserProfile.
 *
 *  Gets a Chrome browser profile with customer ID and profile permanent ID.
 *
 *  @param name Required. Format:
 *    customers/{customer_id}/profiles/{profile_permanent_id}
 *
 *  @return GTLRChromeManagementQuery_CustomersProfilesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Chrome browser profiles of a customer based on the given search and
 *  sorting criteria.
 *
 *  Method: chromemanagement.customers.profiles.list
 */
@interface GTLRChromeManagementQuery_CustomersProfilesList : GTLRChromeManagementQuery

/**
 *  Optional. The filter used to filter profiles. The following fields can be
 *  used in the filter: - profile_id - display_name - user_email -
 *  last_activity_time - last_policy_sync_time - last_status_report_time -
 *  first_enrollment_time - os_platform_type - os_version - browser_version -
 *  browser_channel - policy_count - extension_count - identity_provider -
 *  affiliation_state - ouId Any of the above fields can be used to specify a
 *  filter, and filtering by multiple fields is supported with AND operator.
 *  String type fields and enum type fields support '=' and '!=' operators. The
 *  integer type and the timestamp type fields support '=', '!=', '<', '>', '<='
 *  and '>=' operators. Timestamps expect an RFC-3339 formatted string (e.g.
 *  2012-04-21T11:30:00-04:00). Wildcard '*' can be used with a string type
 *  field filter. In addition, string literal filtering is also supported, for
 *  example, 'ABC' as a filter maps to a filter that checks if any of the
 *  filterable string type fields contains 'ABC'. Organization unit number can
 *  be used as a filtering criteria here by specifying 'ouId =
 *  ${your_org_unit_id}', please note that only single OU ID matching is
 *  supported.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The fields used to specify the ordering of the results. The
 *  supported fields are: - profile_id - display_name - user_email -
 *  last_activity_time - last_policy_sync_time - last_status_report_time -
 *  first_enrollment_time - os_platform_type - os_version - browser_version -
 *  browser_channel - policy_count - extension_count - identity_provider -
 *  affiliation_state By default, sorting is in ascending order, to specify
 *  descending order for a field, a suffix " desc" should be added to the field
 *  name. The default ordering is the descending order of
 *  last_status_report_time.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of profiles to return. The default page size is
 *  100 if page_size is unspecified, and the maximum page size allowed is 200.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The page token used to retrieve a specific page of the listing
 *  request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: customers/{customer_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementVersionsV1ListChromeBrowserProfilesResponse.
 *
 *  Lists Chrome browser profiles of a customer based on the given search and
 *  sorting criteria.
 *
 *  @param parent Required. Format: customers/{customer_id}
 *
 *  @return GTLRChromeManagementQuery_CustomersProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Count of Chrome Browsers that have been recently enrolled, have new policy
 *  to be synced, or have no recent activity.
 *
 *  Method: chromemanagement.customers.reports.countChromeBrowsersNeedingAttention
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeBrowsersNeedingAttention : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer" prefixed with "customers/". */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. The ID of the organizational unit. If omitted, all data will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse.
 *
 *  Count of Chrome Browsers that have been recently enrolled, have new policy
 *  to be synced, or have no recent activity.
 *
 *  @param customer Required. The customer ID or "my_customer" prefixed with
 *    "customers/".
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeBrowsersNeedingAttention
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a count of Chrome crash events.
 *
 *  Method: chromemanagement.customers.reports.countChromeCrashEvents
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeCrashEvents : GTLRChromeManagementQuery

/** Customer ID. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax.
 *  Supported filter fields: * major_browser_version * minor_browser_version *
 *  browser_channel * device_platform * past_number_days Example:
 *  `major_browser_version = 'M115' AND past_number_days = '28'`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. Supported order by fields: * browser_version *
 *  count * date
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  If specified, only count the number of crash events of the devices in this
 *  organizational unit.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeCrashEventsResponse.
 *
 *  Get a count of Chrome crash events.
 *
 *  @param customer Customer ID.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeCrashEvents
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Generate report of the number of devices expiring in each month of the
 *  selected time frame. Devices are grouped by auto update expiration date and
 *  model. Further information can be found
 *  [here](https://support.google.com/chrome/a/answer/10564947).
 *
 *  Method: chromemanagement.customers.reports.countChromeDevicesReachingAutoExpirationDate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeDevicesReachingAutoExpirationDate : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer" prefixed with "customers/". */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If
 *  included returns all devices that have already expired and devices with auto
 *  expiration date equal to or earlier than the maximum date.
 */
@property(nonatomic, copy, nullable) NSString *maxAueDate;

/**
 *  Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If
 *  included returns all devices that have already expired and devices with auto
 *  expiration date equal to or later than the minimum date.
 */
@property(nonatomic, copy, nullable) NSString *minAueDate;

/**
 *  Optional. The organizational unit ID, if omitted, will return data for all
 *  organizational units.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse.
 *
 *  Generate report of the number of devices expiring in each month of the
 *  selected time frame. Devices are grouped by auto update expiration date and
 *  model. Further information can be found
 *  [here](https://support.google.com/chrome/a/answer/10564947).
 *
 *  @param customer Required. The customer ID or "my_customer" prefixed with
 *    "customers/".
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeDevicesReachingAutoExpirationDate
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Counts of ChromeOS devices that have not synced policies or have lacked user
 *  activity in the past 28 days, are out of date, or are not complaint. Further
 *  information can be found here
 *  https://support.google.com/chrome/a/answer/10564947
 *
 *  Method: chromemanagement.customers.reports.countChromeDevicesThatNeedAttention
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeDevicesThatNeedAttention : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer" prefixed with "customers/". */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. The ID of the organizational unit. If omitted, all data will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Required. Mask of the fields that should be populated in the returned
 *  report.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse.
 *
 *  Counts of ChromeOS devices that have not synced policies or have lacked user
 *  activity in the past 28 days, are out of date, or are not complaint. Further
 *  information can be found here
 *  https://support.google.com/chrome/a/answer/10564947
 *
 *  @param customer Required. The customer ID or "my_customer" prefixed with
 *    "customers/".
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeDevicesThatNeedAttention
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Counts of devices with a specific hardware specification from the requested
 *  hardware type (for example model name, processor type). Further information
 *  can be found here https://support.google.com/chrome/a/answer/10564947
 *
 *  Method: chromemanagement.customers.reports.countChromeHardwareFleetDevices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeHardwareFleetDevices : GTLRChromeManagementQuery

/** Required. The customer ID or "my_customer". */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Optional. The ID of the organizational unit. If omitted, all data will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Required. Mask of the fields that should be populated in the returned
 *  report.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.
 *
 *  Counts of devices with a specific hardware specification from the requested
 *  hardware type (for example model name, processor type). Further information
 *  can be found here https://support.google.com/chrome/a/answer/10564947
 *
 *  @param customer Required. The customer ID or "my_customer".
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeHardwareFleetDevices
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Generate report of installed Chrome versions.
 *
 *  Method: chromemanagement.customers.reports.countChromeVersions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountChromeVersions : GTLRChromeManagementQuery

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Supported filter fields: *
 *  last_active_date
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The ID of the organizational unit. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Maximum number of results to return. Maximum and default are 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the request to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountChromeVersionsResponse.
 *
 *  Generate report of installed Chrome versions.
 *
 *  @param customer Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountChromeVersions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Generate report of app installations.
 *
 *  Method: chromemanagement.customers.reports.countInstalledApps
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountInstalledApps : GTLRChromeManagementQuery

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Supported filter fields: *
 *  app_name * app_type * install_type * number_of_permissions *
 *  total_install_count * latest_profile_active_date * permission_name * app_id
 *  * manifest_versions * risk_score
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. Supported order by fields: * app_name *
 *  app_type * install_type * number_of_permissions * total_install_count *
 *  app_id * manifest_versions * risk_score
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The ID of the organizational unit. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Maximum number of results to return. Maximum and default are 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the request to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountInstalledAppsResponse.
 *
 *  Generate report of app installations.
 *
 *  @param customer Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountInstalledApps
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a summary of printing done by each printer.
 *
 *  Method: chromemanagement.customers.reports.countPrintJobsByPrinter
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountPrintJobsByPrinter : GTLRChromeManagementQuery

/**
 *  Required. Customer ID prefixed with "customers/" or "customers/my_customer"
 *  to use the customer associated to the account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Note: Only >= and <=
 *  comparators are supported in this filter. Supported filter fields: *
 *  complete_time
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. If omitted, results will be ordered in
 *  ascending order of the 'printer' field. Supported order_by fields: * printer
 *  * job_count * device_count * user_count
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of results to return. Maximum and default are 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the response to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the organizational unit for printers. If specified, only data for
 *  printers from the specified organizational unit will be returned. If
 *  omitted, data for printers from all organizational units will be returned.
 */
@property(nonatomic, copy, nullable) NSString *printerOrgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountPrintJobsByPrinterResponse.
 *
 *  Get a summary of printing done by each printer.
 *
 *  @param customer Required. Customer ID prefixed with "customers/" or
 *    "customers/my_customer" to use the customer associated to the account
 *    making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountPrintJobsByPrinter
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a summary of printing done by each user.
 *
 *  Method: chromemanagement.customers.reports.countPrintJobsByUser
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsCountPrintJobsByUser : GTLRChromeManagementQuery

/**
 *  Required. Customer ID prefixed with "customers/" or "customers/my_customer"
 *  to use the customer associated to the account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Note: Only >= and <=
 *  comparators are supported in this filter. Supported filter fields: *
 *  complete_time
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. If omitted, results will be ordered in
 *  ascending order of the 'user_email' field. Supported order_by fields: *
 *  user_email * job_count * printer_count * device_count
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of results to return. Maximum and default are 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the response to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the organizational unit for printers. If specified, only print
 *  jobs initiated with printers from the specified organizational unit will be
 *  counted. If omitted, all print jobs will be counted.
 */
@property(nonatomic, copy, nullable) NSString *printerOrgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1CountPrintJobsByUserResponse.
 *
 *  Get a summary of printing done by each user.
 *
 *  @param customer Required. Customer ID prefixed with "customers/" or
 *    "customers/my_customer" to use the customer associated to the account
 *    making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsCountPrintJobsByUser
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get a list of print jobs.
 *
 *  Method: chromemanagement.customers.reports.enumeratePrintJobs
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsEnumeratePrintJobs : GTLRChromeManagementQuery

/**
 *  Required. Customer ID prefixed with "customers/" or "customers/my_customer"
 *  to use the customer associated to the account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Note: Only >= and <=
 *  comparators are supported for `complete_time`. Note: Only = comparator
 *  supported for `user_id` and `printer_id`. Supported filter fields: *
 *  complete_time * printer_id * user_id
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. If not specified, results will be ordered in
 *  descending order of the `complete_time` field. Supported order by fields: *
 *  title * state * create_time * complete_time * document_page_count *
 *  color_mode * duplex_mode * printer * user_email
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The number of print jobs in the page from 0 to 100 inclusive, if page_size
 *  is not specified or zero, the size will be 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from a previous `EnumeratePrintJobs` call. Provide
 *  this to retrieve the subsequent page. If omitted, the first page of results
 *  will be returned. When paginating, all other parameters provided to
 *  `EnumeratePrintJobs` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The ID of the organizational unit for printers. If specified, only print
 *  jobs submitted to printers from the specified organizational unit will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *printerOrgUnitId;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1EnumeratePrintJobsResponse.
 *
 *  Get a list of print jobs.
 *
 *  @param customer Required. Customer ID prefixed with "customers/" or
 *    "customers/my_customer" to use the customer associated to the account
 *    making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsEnumeratePrintJobs
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Generate report of managed Chrome browser devices that have a specified app
 *  installed.
 *
 *  Method: chromemanagement.customers.reports.findInstalledAppDevices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementReportsReadonly
 */
@interface GTLRChromeManagementQuery_CustomersReportsFindInstalledAppDevices : GTLRChromeManagementQuery

/**
 *  Unique identifier of the app. For Chrome apps and extensions, the
 *  32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps,
 *  the package name (e.g. com.evernote).
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  Type of the app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagementAppTypeAppTypeUnspecified App type not
 *        specified. (Value: "APP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagementAppTypeExtension Chrome extension. (Value:
 *        "EXTENSION")
 *    @arg @c kGTLRChromeManagementAppTypeApp Chrome app. (Value: "APP")
 *    @arg @c kGTLRChromeManagementAppTypeTheme Chrome theme. (Value: "THEME")
 *    @arg @c kGTLRChromeManagementAppTypeHostedApp Chrome hosted app. (Value:
 *        "HOSTED_APP")
 *    @arg @c kGTLRChromeManagementAppTypeAndroidApp ARC++ app. (Value:
 *        "ANDROID_APP")
 */
@property(nonatomic, copy, nullable) NSString *appType;

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Query string to filter results, AND-separated fields in EBNF syntax. Note:
 *  OR operations are not supported in this filter. Supported filter fields: *
 *  last_active_date
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Field used to order results. Supported order by fields: * machine *
 *  device_id
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The ID of the organizational unit. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Maximum number of results to return. Maximum and default are 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify the page of the request to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1FindInstalledAppDevicesResponse.
 *
 *  Generate report of managed Chrome browser devices that have a specified app
 *  installed.
 *
 *  @param customer Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersReportsFindInstalledAppDevices
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Get telemetry device.
 *
 *  Method: chromemanagement.customers.telemetry.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryDevicesGet : GTLRChromeManagementQuery

/** Required. Name of the `TelemetryDevice` to return. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Read mask to specify which fields to return. Supported read_mask
 *  paths are: - name - org_unit_id - device_id - serial_number - cpu_info -
 *  cpu_status_report - memory_info - memory_status_report - network_info -
 *  network_diagnostics_report - network_status_report - os_update_status -
 *  graphics_info - graphics_status_report - battery_info -
 *  battery_status_report - storage_info - storage_status_report -
 *  thunderbolt_info - audio_status_report - boot_performance_report -
 *  heartbeat_status_report - network_bandwidth_report - peripherals_report -
 *  kiosk_app_status_report - app_report - runtime_counters_report
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleChromeManagementV1TelemetryDevice.
 *
 *  Get telemetry device.
 *
 *  @param name Required. Name of the `TelemetryDevice` to return.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryDevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all telemetry devices.
 *
 *  Method: chromemanagement.customers.telemetry.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryDevicesList : GTLRChromeManagementQuery

/**
 *  Optional. Only include resources that match the filter. Requests that don't
 *  specify a "reports_timestamp" value will default to returning only recent
 *  reports. Specify "reports_timestamp>=0" to get all report data. Supported
 *  filter fields: - org_unit_id - serial_number - device_id - reports_timestamp
 *  The "reports_timestamp" filter accepts either the Unix Epoch milliseconds
 *  format or the RFC3339 UTC "Zulu" format with nanosecond resolution and up to
 *  nine fractional digits. Both formats should be surrounded by simple double
 *  quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z",
 *  "1679283943823".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Maximum number of results to return. Default value is 100. Maximum value is
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. Read mask to specify which fields to return. Supported read_mask
 *  paths are: - name - org_unit_id - device_id - serial_number - cpu_info -
 *  cpu_status_report - memory_info - memory_status_report - network_info -
 *  network_diagnostics_report - network_status_report - os_update_status -
 *  graphics_info - graphics_status_report - battery_info -
 *  battery_status_report - storage_info - storage_status_report -
 *  thunderbolt_info - audio_status_report - boot_performance_report -
 *  heartbeat_status_report - network_bandwidth_report - peripherals_report -
 *  kiosk_app_status_report - app_report - runtime_counters_report
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryDevicesResponse.
 *
 *  List all telemetry devices.
 *
 *  @param parent Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  List telemetry events.
 *
 *  Method: chromemanagement.customers.telemetry.events.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryEventsList : GTLRChromeManagementQuery

/**
 *  Optional. Only include resources that match the filter. Although this
 *  parameter is currently optional, this parameter will be required- please
 *  specify at least 1 event type. Supported filter fields: - device_id -
 *  user_id - device_org_unit_id - user_org_unit_id - timestamp - event_type The
 *  "timestamp" filter accepts either the Unix Epoch milliseconds format or the
 *  RFC3339 UTC "Zulu" format with nanosecond resolution and up to nine
 *  fractional digits. Both formats should be surrounded by simple double
 *  quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z",
 *  "1679283943823".
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Maximum number of results to return. Default value is 100. Maximum
 *  value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional. Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. Read mask to specify which fields to return. Although currently
 *  required, this field will become optional, while the filter parameter with
 *  an event type will be come required. Supported read_mask paths are: - device
 *  - user - audio_severe_underrun_event - usb_peripherals_event -
 *  https_latency_change_event - network_state_change_event -
 *  wifi_signal_strength_event - vpn_connection_state_change_event -
 *  app_install_event - app_uninstall_event - app_launch_event - os_crash_event
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryEventsResponse.
 *
 *  List telemetry events.
 *
 *  @param parent Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryEventsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a telemetry notification config.
 *
 *  Method: chromemanagement.customers.telemetry.notificationConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsCreate : GTLRChromeManagementQuery

/**
 *  Required. The parent resource where this notification config will be
 *  created. Format: `customers/{customer}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig.
 *
 *  Create a telemetry notification config.
 *
 *  @param object The @c
 *    GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig
 *    to include in the query.
 *  @param parent Required. The parent resource where this notification config
 *    will be created. Format: `customers/{customer}`
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a telemetry notification config.
 *
 *  Method: chromemanagement.customers.telemetry.notificationConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsDelete : GTLRChromeManagementQuery

/**
 *  Required. The name of the notification config to delete. Format:
 *  `customers/{customer}/telemetry/notificationConfigs/{notification_config}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleProtobufEmpty.
 *
 *  Delete a telemetry notification config.
 *
 *  @param name Required. The name of the notification config to delete. Format:
 *    `customers/{customer}/telemetry/notificationConfigs/{notification_config}`
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all telemetry notification configs.
 *
 *  Method: chromemanagement.customers.telemetry.notificationConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsList : GTLRChromeManagementQuery

/**
 *  The maximum number of notification configs to return. The service may return
 *  fewer than this value. If unspecified, at most 100 notification configs will
 *  be returned. The maximum value is 100; values above 100 will be coerced to
 *  100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListTelemetryNotificationConfigs`
 *  call. Provide this to retrieve the subsequent page. When paginating, all
 *  other parameters provided to `ListTelemetryNotificationConfigs` must match
 *  the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent which owns the notification configs. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse.
 *
 *  List all telemetry notification configs.
 *
 *  @param parent Required. The parent which owns the notification configs.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryNotificationConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get telemetry user.
 *
 *  Method: chromemanagement.customers.telemetry.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryUsersGet : GTLRChromeManagementQuery

/** Required. Name of the `TelemetryUser` to return. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Read mask to specify which fields to return. Supported read_mask paths are:
 *  - name - org_unit_id - user_id - user_email - user_device.device_id -
 *  user_device.audio_status_report - user_device.device_activity_report -
 *  user_device.network_bandwidth_report - user_device.peripherals_report -
 *  user_device.app_report
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c GTLRChromeManagement_GoogleChromeManagementV1TelemetryUser.
 *
 *  Get telemetry user.
 *
 *  @param name Required. Name of the `TelemetryUser` to return.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryUsersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all telemetry users.
 *
 *  Method: chromemanagement.customers.telemetry.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeChromeManagementChromeManagementTelemetryReadonly
 */
@interface GTLRChromeManagementQuery_CustomersTelemetryUsersList : GTLRChromeManagementQuery

/**
 *  Only include resources that match the filter. Supported filter fields: -
 *  user_id - user_org_unit_id
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Maximum number of results to return. Default value is 100. Maximum value is
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Customer id or "my_customer" to use the customer associated to the
 *  account making the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Read mask to specify which fields to return. Supported read_mask paths are:
 *  - name - org_unit_id - user_id - user_email - user_device.device_id -
 *  user_device.audio_status_report - user_device.device_activity_report -
 *  user_device.network_bandwidth_report - user_device.peripherals_report -
 *  user_device.app_report
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Fetches a @c
 *  GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryUsersResponse.
 *
 *  List all telemetry users.
 *
 *  @param parent Required. Customer id or "my_customer" to use the customer
 *    associated to the account making the request.
 *
 *  @return GTLRChromeManagementQuery_CustomersTelemetryUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
