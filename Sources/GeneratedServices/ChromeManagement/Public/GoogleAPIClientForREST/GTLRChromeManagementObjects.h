// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Management API (chromemanagement/v1)
// Description:
//   The Chrome Management API is a suite of services that allows Chrome
//   administrators to view, manage and gain insights on their Chrome OS and
//   Chrome Browser devices.
// Documentation:
//   http://developers.google.com/chrome/management/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRChromeManagement_GoogleChromeManagementV1AndroidAppInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1AndroidAppPermission;
@class GTLRChromeManagement_GoogleChromeManagementV1AppReport;
@class GTLRChromeManagement_GoogleChromeManagementV1AppUsageData;
@class GTLRChromeManagement_GoogleChromeManagementV1AudioStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1BatteryInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1BatterySampleReport;
@class GTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport;
@class GTLRChromeManagement_GoogleChromeManagementV1BrowserVersion;
@class GTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1ChromeAppPermission;
@class GTLRChromeManagement_GoogleChromeManagementV1ChromeAppRequest;
@class GTLRChromeManagement_GoogleChromeManagementV1ChromeAppSiteAccess;
@class GTLRChromeManagement_GoogleChromeManagementV1CountChromeCrashEventsResponseCrashEventCount;
@class GTLRChromeManagement_GoogleChromeManagementV1CpuInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1CpuStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1CpuTemperatureInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1Device;
@class GTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport;
@class GTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport;
@class GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport;
@class GTLRChromeManagement_GoogleChromeManagementV1DeviceRequestingExtensionDetails;
@class GTLRChromeManagement_GoogleChromeManagementV1DiskInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1DisplayDevice;
@class GTLRChromeManagement_GoogleChromeManagementV1DisplayInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1GraphicsAdapterInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1GraphicsInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1GraphicsStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData;
@class GTLRChromeManagement_GoogleChromeManagementV1InstalledApp;
@class GTLRChromeManagement_GoogleChromeManagementV1KioskAppStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1MemoryInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1MemoryStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1NetworkBandwidthReport;
@class GTLRChromeManagement_GoogleChromeManagementV1NetworkDevice;
@class GTLRChromeManagement_GoogleChromeManagementV1NetworkDiagnosticsReport;
@class GTLRChromeManagement_GoogleChromeManagementV1NetworkInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus;
@class GTLRChromeManagement_GoogleChromeManagementV1PeripheralsReport;
@class GTLRChromeManagement_GoogleChromeManagementV1PrinterReport;
@class GTLRChromeManagement_GoogleChromeManagementV1PrintJob;
@class GTLRChromeManagement_GoogleChromeManagementV1RuntimeCountersReport;
@class GTLRChromeManagement_GoogleChromeManagementV1StorageInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1StorageInfoDiskVolume;
@class GTLRChromeManagement_GoogleChromeManagementV1StorageStatusReport;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryDevice;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryDeviceInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationFilter;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryUsbPeripheralsEvent;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryUser;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserDevice;
@class GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1TouchScreenDevice;
@class GTLRChromeManagement_GoogleChromeManagementV1TouchScreenInfo;
@class GTLRChromeManagement_GoogleChromeManagementV1UsbPeripheralReport;
@class GTLRChromeManagement_GoogleChromeManagementV1UserPrintReport;
@class GTLRChromeManagement_GoogleChromeManagementV1UserRequestingExtensionDetails;
@class GTLRChromeManagement_GoogleRpcStatus;
@class GTLRChromeManagement_GoogleRpcStatus_Details_Item;
@class GTLRChromeManagement_GoogleTypeDate;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1AppDetails.type

/**
 *  ARC++ app.
 *
 *  Value: "ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Android;
/**
 *  App type unspecified.
 *
 *  Value: "APP_ITEM_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_AppItemTypeUnspecified;
/**
 *  Chrome app.
 *
 *  Value: "CHROME"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Chrome;
/**
 *  Web app.
 *
 *  Value: "WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Web;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1AppUsageData.appType

/**
 *  Application type arc (Android app).
 *
 *  Value: "APPLICATION_TYPE_ARC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeArc;
/**
 *  Application type borealis.
 *
 *  Value: "APPLICATION_TYPE_BOREALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBorealis;
/**
 *  Application type bruschetta.
 *
 *  Value: "APPLICATION_TYPE_BRUSCHETTA"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBruschetta;
/**
 *  Application type built-in.
 *
 *  Value: "APPLICATION_TYPE_BUILT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBuiltIn;
/**
 *  Application type Chrome app.
 *
 *  Value: "APPLICATION_TYPE_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeChromeApp;
/**
 *  Application type Linux (via Crostini).
 *
 *  Value: "APPLICATION_TYPE_CROSTINI"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeCrostini;
/**
 *  Application type extension.
 *
 *  Value: "APPLICATION_TYPE_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeExtension;
/**
 *  Application type Mac OS.
 *
 *  Value: "APPLICATION_TYPE_MAC_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeMacOs;
/**
 *  Application type Plugin VM.
 *
 *  Value: "APPLICATION_TYPE_PLUGIN_VM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypePluginVm;
/**
 *  Application type remote.
 *
 *  Value: "APPLICATION_TYPE_REMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeRemote;
/**
 *  Application type standalone browser (Lacros browser app).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowser;
/**
 *  Application type standalone browser chrome app (hosted in Lacros).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowserChromeApp;
/**
 *  Application type standalone browser extension.
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowserExtension;
/**
 *  Application type system web.
 *
 *  Value: "APPLICATION_TYPE_SYSTEM_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeSystemWeb;
/**
 *  Application type web.
 *
 *  Value: "APPLICATION_TYPE_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeWeb;
/**
 *  Application type unknown.
 *
 *  Value: "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_TelemetryApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport.batteryHealth

/**
 *  Battery is healthy, full charge capacity / design capacity > 80%
 *
 *  Value: "BATTERY_HEALTH_NORMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryHealthNormal;
/**
 *  Health unknown.
 *
 *  Value: "BATTERY_HEALTH_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryHealthUnspecified;
/**
 *  Battery is unhealthy and suggested to be replaced, full charge capacity /
 *  design capacity < 75%
 *
 *  Value: "BATTERY_REPLACE_NOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryReplaceNow;
/**
 *  Battery is moderately unhealthy and suggested to be replaced soon, full
 *  charge capacity / design capacity 75% - 80%
 *
 *  Value: "BATTERY_REPLACE_SOON"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryReplaceSoon;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport.shutdownReason

/**
 *  Shutdown due to low battery.
 *
 *  Value: "LOW_BATTERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_LowBattery;
/**
 *  Shutdown due to other reasons.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_Other;
/**
 *  Shutdown reason is not specified.
 *
 *  Value: "SHUTDOWN_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_ShutdownReasonUnspecified;
/**
 *  System update initiated.
 *
 *  Value: "SYSTEM_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_SystemUpdate;
/**
 *  User initiated.
 *
 *  Value: "USER_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_UserRequest;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1BrowserVersion.channel

/**
 *  Beta release channel.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Beta;
/**
 *  Canary release channel.
 *
 *  Value: "CANARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Canary;
/**
 *  Dev release channel.
 *
 *  Value: "DEV"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Dev;
/**
 *  No release channel specified.
 *
 *  Value: "RELEASE_CHANNEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_ReleaseChannelUnspecified;
/**
 *  Stable release channel.
 *
 *  Value: "STABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Stable;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1BrowserVersion.system

/**
 *  No operating system specified.
 *
 *  Value: "DEVICE_SYSTEM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_DeviceSystemUnspecified;
/**
 *  Android operating system.
 *
 *  Value: "SYSTEM_ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemAndroid;
/**
 *  ChromeOS operating system.
 *
 *  Value: "SYSTEM_CROS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemCros;
/**
 *  Apple iOS operating system.
 *
 *  Value: "SYSTEM_IOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemIos;
/**
 *  Linux operating system.
 *
 *  Value: "SYSTEM_LINUX"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemLinux;
/**
 *  Apple macOS operating system.
 *
 *  Value: "SYSTEM_MAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemMac;
/**
 *  Other operating system.
 *
 *  Value: "SYSTEM_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemOther;
/**
 *  Microsoft Windows operating system.
 *
 *  Value: "SYSTEM_WINDOWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemWindows;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo.type

/**
 *  Chrome Extensions.
 *
 *  Value: "EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_Extension;
/**
 *  Unspecified ItemType.
 *
 *  Value: "ITEM_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_ItemTypeUnspecified;
/**
 *  Any other type than extension.
 *
 *  Value: "OTHERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_Others;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1CpuInfo.architecture

/**
 *  Architecture unknown.
 *
 *  Value: "ARCHITECTURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1CpuInfo_Architecture_ArchitectureUnspecified;
/**
 *  x64 architecture
 *
 *  Value: "X64"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1CpuInfo_Architecture_X64;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport.deviceActivityState

/**
 *  Device is currently being used.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Active;
/**
 *  Device activity state is unspecified.
 *
 *  Value: "DEVICE_ACTIVITY_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_DeviceActivityStateUnspecified;
/**
 *  Device is currently idle.
 *
 *  Value: "IDLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Idle;
/**
 *  Device is currently locked.
 *
 *  Value: "LOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Locked;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport.aueMonth

/**
 *  The month of April.
 *
 *  Value: "APRIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_April;
/**
 *  The month of August.
 *
 *  Value: "AUGUST"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_August;
/**
 *  The month of December.
 *
 *  Value: "DECEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_December;
/**
 *  The month of February.
 *
 *  Value: "FEBRUARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_February;
/**
 *  The month of January.
 *
 *  Value: "JANUARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_January;
/**
 *  The month of July.
 *
 *  Value: "JULY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_July;
/**
 *  The month of June.
 *
 *  Value: "JUNE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_June;
/**
 *  The month of March.
 *
 *  Value: "MARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_March;
/**
 *  The month of May.
 *
 *  Value: "MAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_May;
/**
 *  The unspecified month.
 *
 *  Value: "MONTH_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_MonthUnspecified;
/**
 *  The month of November.
 *
 *  Value: "NOVEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_November;
/**
 *  The month of October.
 *
 *  Value: "OCTOBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_October;
/**
 *  The month of September.
 *
 *  Value: "SEPTEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_September;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport.state

/**
 *  Device is offline
 *
 *  Value: "OFFLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Offline;
/**
 *  Device is online
 *
 *  Value: "ONLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Online;
/**
 *  State not specified
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_StateUnspecified;
/**
 *  Device is not eligible for heartbeat monitoring
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Unknown;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData.problem

/**
 *  One or more DNS resolutions resulted in a failure.
 *
 *  Value: "FAILED_DNS_RESOLUTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_FailedDnsResolutions;
/**
 *  One or more HTTPS requests resulted in a failure.
 *
 *  Value: "FAILED_HTTPS_REQUESTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_FailedHttpsRequests;
/**
 *  Average HTTPS request latency time between 500ms and 1000ms is high.
 *
 *  Value: "HIGH_LATENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_HighLatency;
/**
 *  HTTPS latency problem not specified.
 *
 *  Value: "HTTPS_LATENCY_PROBLEM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_HttpsLatencyProblemUnspecified;
/**
 *  Average HTTPS request latency time greater than 1000ms is very high.
 *
 *  Value: "VERY_HIGH_LATENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_VeryHighLatency;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1InstalledApp.appInstallType

/**
 *  Administrator app install type.
 *
 *  Value: "ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Admin;
/**
 *  Application install type not specified.
 *
 *  Value: "APP_INSTALL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_AppInstallTypeUnspecified;
/**
 *  Development app install type.
 *
 *  Value: "DEVELOPMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Development;
/**
 *  Multiple app install types.
 *
 *  Value: "MULTIPLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Multiple;
/**
 *  Normal app install type.
 *
 *  Value: "NORMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Normal;
/**
 *  Other app install type.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Other;
/**
 *  Sideloaded app install type.
 *
 *  Value: "SIDELOAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Sideload;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1InstalledApp.appSource

/**
 *  Application source not specified.
 *
 *  Value: "APP_SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_AppSourceUnspecified;
/**
 *  Generally for extensions and Chrome apps.
 *
 *  Value: "CHROME_WEBSTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_ChromeWebstore;
/**
 *  Play Store app.
 *
 *  Value: "PLAY_STORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_PlayStore;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1InstalledApp.appType

/**
 *  ARC++ app.
 *
 *  Value: "ANDROID_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_AndroidApp;
/**
 *  Chrome app.
 *
 *  Value: "APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_App;
/**
 *  App type not specified.
 *
 *  Value: "APP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_AppTypeUnspecified;
/**
 *  Chrome extension.
 *
 *  Value: "EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_Extension;
/**
 *  Chrome hosted app.
 *
 *  Value: "HOSTED_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_HostedApp;
/**
 *  Chrome theme.
 *
 *  Value: "THEME"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_Theme;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1NetworkDevice.type

/**
 *  Cellular device.
 *
 *  Value: "CELLULAR_DEVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_CellularDevice;
/**
 *  Ethernet device.
 *
 *  Value: "ETHERNET_DEVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_EthernetDevice;
/**
 *  Network device type not specified.
 *
 *  Value: "NETWORK_DEVICE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_NetworkDeviceTypeUnspecified;
/**
 *  Wifi device.
 *
 *  Value: "WIFI_DEVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_WifiDevice;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport.connectionState

/**
 *  The network is connected and not in a detected portal state, but internet
 *  connectivity may not be available.
 *
 *  Value: "CONNECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Connected;
/**
 *  The network is in the process of connecting.
 *
 *  Value: "CONNECTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Connecting;
/**
 *  Network connection state unspecified.
 *
 *  Value: "NETWORK_CONNECTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_NetworkConnectionStateUnspecified;
/**
 *  The network is not connected.
 *
 *  Value: "NOT_CONNECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_NotConnected;
/**
 *  The network is connected and internet connectivity is available.
 *
 *  Value: "ONLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Online;
/**
 *  The network is connected but a portal state was detected. Internet
 *  connectivity may be limited.
 *
 *  Value: "PORTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Portal;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport.connectionType

/**
 *  Cellular network connection.
 *
 *  Value: "CELLULAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Cellular;
/**
 *  Ethernet network connection.
 *
 *  Value: "ETHERNET"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Ethernet;
/**
 *  Network connection type unspecified
 *
 *  Value: "NETWORK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_NetworkTypeUnspecified;
/**
 *  Tether network connection.
 *
 *  Value: "TETHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Tether;
/**
 *  VPN network connection.
 *
 *  Value: "VPN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Vpn;
/**
 *  Wifi network connection.
 *
 *  Value: "WIFI"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Wifi;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus.updateState

/**
 *  OS has started download on device.
 *
 *  Value: "OS_IMAGE_DOWNLOAD_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsImageDownloadInProgress;
/**
 *  OS has not started downloading.
 *
 *  Value: "OS_IMAGE_DOWNLOAD_NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsImageDownloadNotStarted;
/**
 *  Device needs reboot to finish upload.
 *
 *  Value: "OS_UPDATE_NEED_REBOOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsUpdateNeedReboot;
/**
 *  State unspecified.
 *
 *  Value: "UPDATE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_UpdateStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1PrintJob.colorMode

/**
 *  Black and white.
 *
 *  Value: "BLACK_AND_WHITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_BlackAndWhite;
/**
 *  Color.
 *
 *  Value: "COLOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_Color;
/**
 *  Unspecified.
 *
 *  Value: "COLOR_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_ColorModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1PrintJob.duplexMode

/**
 *  Unspecified.
 *
 *  Value: "DUPLEX_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_DuplexModeUnspecified;
/**
 *  One-sided.
 *
 *  Value: "ONE_SIDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_OneSided;
/**
 *  Two-sided flipping over long edge.
 *
 *  Value: "TWO_SIDED_LONG_EDGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_TwoSidedLongEdge;
/**
 *  Two-sided flipping over short edge.
 *
 *  Value: "TWO_SIDED_SHORT_EDGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_TwoSidedShortEdge;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1PrintJob.state

/**
 *  Print job was cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Cancelled;
/**
 *  Print job failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Failed;
/**
 *  The document was successfully printed.
 *
 *  Value: "PRINTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Printed;
/**
 *  Print job is in an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent.appInstallReason

/**
 *  Application installed by command line argument.
 *
 *  Value: "APPLICATION_INSTALL_REASON_COMMAND_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonCommandLine;
/**
 *  Application installed by default, but is not considered a system app.
 *
 *  Value: "APPLICATION_INSTALL_REASON_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonDefault;
/**
 *  Application installed by Kiosk on Chrome OS.
 *
 *  Value: "APPLICATION_INSTALL_REASON_KIOSK"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonKiosk;
/**
 *  Application installed by an original equipment manufacturer (OEM).
 *
 *  Value: "APPLICATION_INSTALL_REASON_OEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonOem;
/**
 *  Application installed by policy.
 *
 *  Value: "APPLICATION_INSTALL_REASON_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonPolicy;
/**
 *  Application installed bt SubApp API call.
 *
 *  Value: "APPLICATION_INSTALL_REASON_SUB_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSubApp;
/**
 *  Application installed by sync.
 *
 *  Value: "APPLICATION_INSTALL_REASON_SYNC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSync;
/**
 *  Application installed with the system and is considered part of the OS.
 *
 *  Value: "APPLICATION_INSTALL_REASON_SYSTEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSystem;
/**
 *  Application install reason is unknown.
 *
 *  Value: "APPLICATION_INSTALL_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonUnspecified;
/**
 *  Application installed by user action.
 *
 *  Value: "APPLICATION_INSTALL_REASON_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonUser;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent.appInstallSource

/**
 *  Application install source is a browser.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_BROWSER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceBrowser;
/**
 *  Application install source is the Chrome web store.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_CHROME_WEB_STORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceChromeWebStore;
/**
 *  Application install source is the Play store.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_PLAY_STORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourcePlayStore;
/**
 *  Application install source is a sync.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_SYNC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceSync;
/**
 *  Application installed as part of Chrome OS.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_SYSTEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceSystem;
/**
 *  Application install source is unknown.
 *
 *  Value: "APPLICATION_INSTALL_SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent.appInstallTime

/**
 *  Application install is initialized.
 *
 *  Value: "APPLICATION_INSTALL_TIME_INIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeInit;
/**
 *  Application install is currently running.
 *
 *  Value: "APPLICATION_INSTALL_TIME_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeRunning;
/**
 *  Application install time unknown.
 *
 *  Value: "APPLICATION_INSTALL_TIME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent.appType

/**
 *  Application type arc (Android app).
 *
 *  Value: "APPLICATION_TYPE_ARC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeArc;
/**
 *  Application type borealis.
 *
 *  Value: "APPLICATION_TYPE_BOREALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBorealis;
/**
 *  Application type bruschetta.
 *
 *  Value: "APPLICATION_TYPE_BRUSCHETTA"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBruschetta;
/**
 *  Application type built-in.
 *
 *  Value: "APPLICATION_TYPE_BUILT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBuiltIn;
/**
 *  Application type Chrome app.
 *
 *  Value: "APPLICATION_TYPE_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeChromeApp;
/**
 *  Application type Linux (via Crostini).
 *
 *  Value: "APPLICATION_TYPE_CROSTINI"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeCrostini;
/**
 *  Application type extension.
 *
 *  Value: "APPLICATION_TYPE_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeExtension;
/**
 *  Application type Mac OS.
 *
 *  Value: "APPLICATION_TYPE_MAC_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeMacOs;
/**
 *  Application type Plugin VM.
 *
 *  Value: "APPLICATION_TYPE_PLUGIN_VM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypePluginVm;
/**
 *  Application type remote.
 *
 *  Value: "APPLICATION_TYPE_REMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeRemote;
/**
 *  Application type standalone browser (Lacros browser app).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowser;
/**
 *  Application type standalone browser chrome app (hosted in Lacros).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp;
/**
 *  Application type standalone browser extension.
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowserExtension;
/**
 *  Application type system web.
 *
 *  Value: "APPLICATION_TYPE_SYSTEM_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeSystemWeb;
/**
 *  Application type web.
 *
 *  Value: "APPLICATION_TYPE_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeWeb;
/**
 *  Application type unknown.
 *
 *  Value: "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_TelemetryApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent.appLaunchSource

/**
 *  Application launched from app home (chrome://apps) page.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_HOME_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppHomePage;
/**
 *  Application launched from the grid of apps, not the search box.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_GRID"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListGrid;
/**
 *  Application launched from the grid of apps, off of the context menu.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_GRID_CONTEXT_MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListGridContextMenu;
/**
 *  Application launched from query-dependent results (larger icons).
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_QUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListQuery;
/**
 *  Application launched from query-dependent results, off of the context menu.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_QUERY_CONTEXT_MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListQueryContextMenu;
/**
 *  Application launched from query-less recommendations (smaller icons).
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_RECOMMENDATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListRecommendation;
/**
 *  Application launched from Arc.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_ARC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceArc;
/**
 *  Application launched from background mode.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_BACKGROUND_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceBackgroundMode;
/**
 *  Application launched from a Chrome internal call.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_CHROME_INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceChromeInternal;
/**
 *  Application launched from the command line.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_COMMAND_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceCommandLine;
/**
 *  Application launched from a discover tab notification.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_DISCOVER_TAB_NOTIFICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceDiscoverTabNotification;
/**
 *  Application launched from the file manager
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_FILE_MANAGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFileManager;
/**
 *  Count first-run Help app launches separately so that we can understand the
 *  number of user-triggered launches.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_FIRST_RUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFirstRun;
/**
 *  Applicationed launched from focus panel.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_FOCUS_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFocusMode;
/**
 *  Application launched from a full restore.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_FULL_RESTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFullRestore;
/**
 *  Application launched from the installed notification.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_INSTALLED_NOTIFICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceInstalledNotification;
/**
 *  Application launched from source installer.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_INSTALLER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceInstaller;
/**
 *  Application launched from an intent URL.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_INTENT_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceIntentUrl;
/**
 *  Application launched from keyboard shortcut for opening app.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_KEYBOARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceKeyboard;
/**
 *  Application launched from kiosk.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_KIOSK"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceKiosk;
/**
 *  Application launched from left click on a link in the browser.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceLink;
/**
 *  Application launched from lock screen app launcher.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_LOCK_SCREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceLockScreen;
/**
 *  Application launched from the Management API.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_MANAGEMENT_API"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceManagementApi;
/**
 *  Application launched from menu.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceMenu;
/**
 *  Application launched from the new tab page.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_NEW_TAB_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceNewTabPage;
/**
 *  Application launched from entering a URL in the Omnibox on the browser.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_OMNIBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOmnibox;
/**
 *  Application launched from OS login.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_OS_LOGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOsLogin;
/**
 *  Application launched from clicking a link in another app or WebUI.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_OTHER_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOtherApp;
/**
 *  Application launched from the Parental Controls Settings section and Per App
 *  time notification.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_PARENTAL_CONTROLS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceParentalControls;
/**
 *  Application launched from profile menu of installable
 *  chrome://password-manager WebUI.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_PROFILE_MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceProfileMenu;
/**
 *  Application launched from protocol handler.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_PROTOCOL_HANDLER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceProtocolHandler;
/**
 *  Application launched from the release notes notification.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_RELEASE_NOTES_NOTIFICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceReleaseNotesNotification;
/**
 *  Application launched from moving content into an app.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_REPARENTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceReparenting;
/**
 *  Application launched from Sharesheet.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_SHARESHEET"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSharesheet;
/**
 *  Application launched from shelf.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_SHELF"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceShelf;
/**
 *  Application launched from a smart text selection context menu.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_SMART_TEXT_CONTEXT_MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSmartTextContextMenu;
/**
 *  Application launched from system tray calendar.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_SYSTEM_TRAY_CALENDAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSystemTrayCalendar;
/**
 *  Application launched from a test.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_TEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceTest;
/**
 *  Application launch source unknown.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceUnspecified;
/**
 *  Application launched from URL handler.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_URL_HANDLER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceUrlHandler;
/**
 *  Application launched from welcome tour.
 *
 *  Value: "APPLICATION_LAUNCH_SOURCE_WELCOME_TOUR"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceWelcomeTour;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent.appType

/**
 *  Application type arc (Android app).
 *
 *  Value: "APPLICATION_TYPE_ARC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeArc;
/**
 *  Application type borealis.
 *
 *  Value: "APPLICATION_TYPE_BOREALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBorealis;
/**
 *  Application type bruschetta.
 *
 *  Value: "APPLICATION_TYPE_BRUSCHETTA"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBruschetta;
/**
 *  Application type built-in.
 *
 *  Value: "APPLICATION_TYPE_BUILT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBuiltIn;
/**
 *  Application type Chrome app.
 *
 *  Value: "APPLICATION_TYPE_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeChromeApp;
/**
 *  Application type Linux (via Crostini).
 *
 *  Value: "APPLICATION_TYPE_CROSTINI"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeCrostini;
/**
 *  Application type extension.
 *
 *  Value: "APPLICATION_TYPE_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeExtension;
/**
 *  Application type Mac OS.
 *
 *  Value: "APPLICATION_TYPE_MAC_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeMacOs;
/**
 *  Application type Plugin VM.
 *
 *  Value: "APPLICATION_TYPE_PLUGIN_VM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypePluginVm;
/**
 *  Application type remote.
 *
 *  Value: "APPLICATION_TYPE_REMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeRemote;
/**
 *  Application type standalone browser (Lacros browser app).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowser;
/**
 *  Application type standalone browser chrome app (hosted in Lacros).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp;
/**
 *  Application type standalone browser extension.
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowserExtension;
/**
 *  Application type system web.
 *
 *  Value: "APPLICATION_TYPE_SYSTEM_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeSystemWeb;
/**
 *  Application type web.
 *
 *  Value: "APPLICATION_TYPE_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeWeb;
/**
 *  Application type unknown.
 *
 *  Value: "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_TelemetryApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent.appType

/**
 *  Application type arc (Android app).
 *
 *  Value: "APPLICATION_TYPE_ARC"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeArc;
/**
 *  Application type borealis.
 *
 *  Value: "APPLICATION_TYPE_BOREALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBorealis;
/**
 *  Application type bruschetta.
 *
 *  Value: "APPLICATION_TYPE_BRUSCHETTA"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBruschetta;
/**
 *  Application type built-in.
 *
 *  Value: "APPLICATION_TYPE_BUILT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBuiltIn;
/**
 *  Application type Chrome app.
 *
 *  Value: "APPLICATION_TYPE_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeChromeApp;
/**
 *  Application type Linux (via Crostini).
 *
 *  Value: "APPLICATION_TYPE_CROSTINI"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeCrostini;
/**
 *  Application type extension.
 *
 *  Value: "APPLICATION_TYPE_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeExtension;
/**
 *  Application type Mac OS.
 *
 *  Value: "APPLICATION_TYPE_MAC_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeMacOs;
/**
 *  Application type Plugin VM.
 *
 *  Value: "APPLICATION_TYPE_PLUGIN_VM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypePluginVm;
/**
 *  Application type remote.
 *
 *  Value: "APPLICATION_TYPE_REMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeRemote;
/**
 *  Application type standalone browser (Lacros browser app).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowser;
/**
 *  Application type standalone browser chrome app (hosted in Lacros).
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp;
/**
 *  Application type standalone browser extension.
 *
 *  Value: "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowserExtension;
/**
 *  Application type system web.
 *
 *  Value: "APPLICATION_TYPE_SYSTEM_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeSystemWeb;
/**
 *  Application type web.
 *
 *  Value: "APPLICATION_TYPE_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeWeb;
/**
 *  Application type unknown.
 *
 *  Value: "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_TelemetryApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent.appUninstallSource

/**
 *  Application uninstalled from the App List (Launcher).
 *
 *  Value: "APPLICATION_UNINSTALL_SOURCE_APP_LIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceAppList;
/**
 *  Application uninstalled from the App Managedment page.
 *
 *  Value: "APPLICATION_UNINSTALL_SOURCE_APP_MANAGEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceAppManagement;
/**
 *  Application uninstalled by app migration.
 *
 *  Value: "APPLICATION_UNINSTALL_SOURCE_MIGRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceMigration;
/**
 *  Application uninstalled from the Shelf.
 *
 *  Value: "APPLICATION_UNINSTALL_SOURCE_SHELF"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceShelf;
/**
 *  Application uninstall source unknown.
 *
 *  Value: "APPLICATION_UNINSTALL_SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent.eventType

/**
 *  Triggered when an app is installed.
 *
 *  Value: "APP_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppInstalled;
/**
 *  Triggered when an app is launched.
 *
 *  Value: "APP_LAUNCHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppLaunched;
/**
 *  Triggered when an app is uninstalled.
 *
 *  Value: "APP_UNINSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppUninstalled;
/**
 *  Triggered when a audio devices run out of buffer data for more than 5
 *  seconds.
 *
 *  Value: "AUDIO_SEVERE_UNDERRUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AudioSevereUnderrun;
/**
 *  Event type unknown.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_EventTypeUnspecified;
/**
 *  Triggered when a new HTTPS latency problem was detected or the device has
 *  recovered form an existing HTTPS latency problem.
 *
 *  Value: "NETWORK_HTTPS_LATENCY_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_NetworkHttpsLatencyChange;
/**
 *  Triggered immediately on any changes to a network connection.
 *
 *  Value: "NETWORK_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_NetworkStateChange;
/**
 *  Triggered when USB devices are added.
 *
 *  Value: "USB_ADDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_UsbAdded;
/**
 *  Triggered when USB devices are removed.
 *
 *  Value: "USB_REMOVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_UsbRemoved;
/**
 *  Triggered on changes to VPN connections.
 *
 *  Value: "VPN_CONNECTION_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_VpnConnectionStateChange;
/**
 *  Triggered when connected WiFi network signal strength drops below -70dBm.
 *
 *  Value: "WIFI_SIGNAL_STRENGTH_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_WifiSignalStrengthLow;
/**
 *  Triggered when connected WiFi network signal strength is recovered from a
 *  signal drop.
 *
 *  Value: "WIFI_SIGNAL_STRENGTH_RECOVERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_WifiSignalStrengthRecovered;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter.eventTypes

/**
 *  Triggered when an app is installed.
 *
 *  Value: "APP_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_AppInstalled;
/**
 *  Triggered when an app is launched.
 *
 *  Value: "APP_LAUNCHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_AppLaunched;
/**
 *  Triggered when an app is uninstalled.
 *
 *  Value: "APP_UNINSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_AppUninstalled;
/**
 *  Triggered when a audio devices run out of buffer data for more than 5
 *  seconds.
 *
 *  Value: "AUDIO_SEVERE_UNDERRUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_AudioSevereUnderrun;
/**
 *  Event type unknown.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_EventTypeUnspecified;
/**
 *  Triggered when a new HTTPS latency problem was detected or the device has
 *  recovered form an existing HTTPS latency problem.
 *
 *  Value: "NETWORK_HTTPS_LATENCY_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_NetworkHttpsLatencyChange;
/**
 *  Triggered immediately on any changes to a network connection.
 *
 *  Value: "NETWORK_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_NetworkStateChange;
/**
 *  Triggered when USB devices are added.
 *
 *  Value: "USB_ADDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_UsbAdded;
/**
 *  Triggered when USB devices are removed.
 *
 *  Value: "USB_REMOVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_UsbRemoved;
/**
 *  Triggered on changes to VPN connections.
 *
 *  Value: "VPN_CONNECTION_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_VpnConnectionStateChange;
/**
 *  Triggered when connected WiFi network signal strength drops below -70dBm.
 *
 *  Value: "WIFI_SIGNAL_STRENGTH_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_WifiSignalStrengthLow;
/**
 *  Triggered when connected WiFi network signal strength is recovered from a
 *  signal drop.
 *
 *  Value: "WIFI_SIGNAL_STRENGTH_RECOVERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter_EventTypes_WifiSignalStrengthRecovered;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.httpsLatencyState

/**
 *  HTTPS latency state is unspecified.
 *
 *  Value: "HTTPS_LATENCY_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_HttpsLatencyStateUnspecified;
/**
 *  HTTPS latency problem.
 *
 *  Value: "PROBLEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_Problem;
/**
 *  HTTPS latency recovered from a problem.
 *
 *  Value: "RECOVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_Recovery;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.connectionState

/**
 *  The network is connected and not in a detected portal state, but internet
 *  connectivity may not be available.
 *
 *  Value: "CONNECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Connected;
/**
 *  The network is in the process of connecting.
 *
 *  Value: "CONNECTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Connecting;
/**
 *  Network connection state unspecified.
 *
 *  Value: "NETWORK_CONNECTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_NetworkConnectionStateUnspecified;
/**
 *  The network is not connected.
 *
 *  Value: "NOT_CONNECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_NotConnected;
/**
 *  The network is connected and internet connectivity is available.
 *
 *  Value: "ONLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Online;
/**
 *  The network is connected but a portal state was detected. Internet
 *  connectivity may be limited.
 *
 *  Value: "PORTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Portal;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo.securityLevel

/**
 *  The firmware automatically creates tunnels for Thunderbolt.
 *
 *  Value: "THUNDERBOLT_SECURITY_DP_ONLY_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityDpOnlyLevel;
/**
 *  Thunderbolt security level is not set.
 *
 *  Value: "THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityLevelUnspecified;
/**
 *  All devices are automatically connected by the firmware. No user approval is
 *  needed.
 *
 *  Value: "THUNDERBOLT_SECURITY_NONE_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityNoneLevel;
/**
 *  PCIE tunneling is disabled.
 *
 *  Value: "THUNDERBOLT_SECURITY_NO_PCIE_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityNoPcieLevel;
/**
 *  User is asked whether the device is allowed to be connected. In addition the
 *  device is sent a challenge that should match the expected one based on a
 *  random key written to the key sysfs attribute
 *
 *  Value: "THUNDERBOLT_SECURITY_SECURE_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecuritySecureLevel;
/**
 *  The firmware automatically creates tunnels for the USB controller and
 *  Display Port in a dock. All PCIe links downstream of the dock are removed.
 *
 *  Value: "THUNDERBOLT_SECURITY_USB_ONLY_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityUsbOnlyLevel;
/**
 *  User is asked whether the device is allowed to be connected.
 *
 *  Value: "THUNDERBOLT_SECURITY_USER_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityUserLevel;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo.encryptionAlgorithm

/**
 *  The memory encryption algorithm is using the AES_XTS encryption algorithm
 *  with a 128 bit block cypher.
 *
 *  Value: "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmAesXts128;
/**
 *  The memory encryption algorithm is using the AES_XTS encryption algorithm
 *  with a 256 bit block cypher.
 *
 *  Value: "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmAesXts256;
/**
 *  The memory encryption algorithm being used is unknown.
 *
 *  Value: "MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmUnknown;
/**
 *  Memory encryption algorithm is not set.
 *
 *  Value: "MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmUnspecified;

// ----------------------------------------------------------------------------
// GTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo.encryptionState

/**
 *  Memory encrpytion on the device is disabled.
 *
 *  Value: "MEMORY_ENCRYPTION_STATE_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateDisabled;
/**
 *  Memory encryption on the device uses multi-key total memory encryption.
 *
 *  Value: "MEMORY_ENCRYPTION_STATE_MKTME"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateMktme;
/**
 *  Memory encryption on the device uses total memory encryption.
 *
 *  Value: "MEMORY_ENCRYPTION_STATE_TME"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateTme;
/**
 *  The memory encryption state is unknown.
 *
 *  Value: "MEMORY_ENCRYPTION_STATE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateUnknown;
/**
 *  Memory encryption state is not set.
 *
 *  Value: "MEMORY_ENCRYPTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateUnspecified;

/**
 *  Android app information.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AndroidAppInfo : GTLRObject

/** Output only. Permissions requested by an Android app. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AndroidAppPermission *> *permissions;

@end


/**
 *  Permission requested by an Android app.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AndroidAppPermission : GTLRObject

/** Output only. The type of the permission. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Resource representing app details.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AppDetails : GTLRObject

/** Output only. Android app information. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1AndroidAppInfo *androidAppInfo;

/**
 *  Output only. Unique store identifier for the item. Examples:
 *  "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome
 *  extension, "com.google.android.apps.docs" for the Google Drive Android app.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/** Output only. Chrome Web Store app information. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo *chromeAppInfo;

/**
 *  Output only. App's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The uri for the detail page of the item. */
@property(nonatomic, copy, nullable) NSString *detailUri;

/** Output only. App's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. First published time. */
@property(nonatomic, strong, nullable) GTLRDateTime *firstPublishTime;

/** Output only. Home page or Website uri. */
@property(nonatomic, copy, nullable) NSString *homepageUri;

/**
 *  Output only. A link to an image that can be used as an icon for the product.
 */
@property(nonatomic, copy, nullable) NSString *iconUri;

/**
 *  Output only. Indicates if the app has to be paid for OR has paid content.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPaidApp;

/** Output only. Latest published time. */
@property(nonatomic, strong, nullable) GTLRDateTime *latestPublishTime;

/**
 *  Output only. Format:
 *  name=customers/{customer_id}/apps/{chrome|android|web}/{app_id}\@{version}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The URI pointing to the privacy policy of the app, if it was
 *  provided by the developer. Version-specific field that will only be set when
 *  the requested app version is found.
 */
@property(nonatomic, copy, nullable) NSString *privacyPolicyUri;

/** Output only. The publisher of the item. */
@property(nonatomic, copy, nullable) NSString *publisher;

/**
 *  Output only. Number of reviews received. Chrome Web Store review information
 *  will always be for the latest version of an app.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reviewNumber;

/**
 *  Output only. The rating of the app (on 5 stars). Chrome Web Store review
 *  information will always be for the latest version of an app.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reviewRating;

/**
 *  Output only. App version. A new revision is committed whenever a new version
 *  of the app is published.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/** Output only. Information about a partial service error if applicable. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleRpcStatus *serviceError;

/**
 *  Output only. App type.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Android
 *        ARC++ app. (Value: "ANDROID")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_AppItemTypeUnspecified
 *        App type unspecified. (Value: "APP_ITEM_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Chrome
 *        Chrome app. (Value: "CHROME")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppDetails_Type_Web
 *        Web app. (Value: "WEB")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  App report.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AppReport : GTLRObject

/** Timestamp when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** App usage data. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AppUsageData *> *usageData;

@end


/**
 *  App usage data.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AppUsageData : GTLRObject

/** App id. */
@property(nonatomic, copy, nullable) NSString *appId;

/** Application instance id. This will be unique per window/instance. */
@property(nonatomic, copy, nullable) NSString *appInstanceId;

/**
 *  Type of app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeArc
 *        Application type arc (Android app). (Value: "APPLICATION_TYPE_ARC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBorealis
 *        Application type borealis. (Value: "APPLICATION_TYPE_BOREALIS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBruschetta
 *        Application type bruschetta. (Value: "APPLICATION_TYPE_BRUSCHETTA")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeBuiltIn
 *        Application type built-in. (Value: "APPLICATION_TYPE_BUILT_IN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeChromeApp
 *        Application type Chrome app. (Value: "APPLICATION_TYPE_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeCrostini
 *        Application type Linux (via Crostini). (Value:
 *        "APPLICATION_TYPE_CROSTINI")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeExtension
 *        Application type extension. (Value: "APPLICATION_TYPE_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeMacOs
 *        Application type Mac OS. (Value: "APPLICATION_TYPE_MAC_OS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypePluginVm
 *        Application type Plugin VM. (Value: "APPLICATION_TYPE_PLUGIN_VM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeRemote
 *        Application type remote. (Value: "APPLICATION_TYPE_REMOTE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowser
 *        Application type standalone browser (Lacros browser app). (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowserChromeApp
 *        Application type standalone browser chrome app (hosted in Lacros).
 *        (Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeStandaloneBrowserExtension
 *        Application type standalone browser extension. (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeSystemWeb
 *        Application type system web. (Value: "APPLICATION_TYPE_SYSTEM_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_ApplicationTypeWeb
 *        Application type web. (Value: "APPLICATION_TYPE_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1AppUsageData_AppType_TelemetryApplicationTypeUnspecified
 *        Application type unknown. (Value:
 *        "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appType;

/** App foreground running time. */
@property(nonatomic, strong, nullable) GTLRDuration *runningDuration;

@end


/**
 *  Status data for storage. * This field is telemetry information and this will
 *  change over time as the device is utilized. * Data for this field is
 *  controlled via policy:
 *  [ReportDeviceAudioStatus](https://chromeenterprise.google/policies/#ReportDeviceAudioStatus)
 *  * Data Collection Frequency: 10 minutes * Default Data Reporting Frequency:
 *  3 hours - Policy Controlled: Yes * Cache: If the device is offline, the
 *  collected data is stored locally, and will be reported when the device is
 *  next online: No * Reported for affiliated users only: N/A * Granular
 *  permission needed: TELEMETRY_API_AUDIO_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1AudioStatusReport : GTLRObject

/** Output only. Active input device's name. */
@property(nonatomic, copy, nullable) NSString *inputDevice;

/**
 *  Output only. Active input device's gain in [0, 100].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputGain;

/**
 *  Output only. Is active input device mute or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputMute;

/** Output only. Active output device's name. */
@property(nonatomic, copy, nullable) NSString *outputDevice;

/**
 *  Output only. Is active output device mute or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputMute;

/**
 *  Output only. Active output device's volume in [0, 100].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputVolume;

/** Output only. Timestamp of when the sample was collected on device. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  Information about the battery. * This field provides device information,
 *  which is static and will not change over time. * Data for this field is
 *  controlled via policy:
 *  [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_BATTERY_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1BatteryInfo : GTLRObject

/**
 *  Output only. Design capacity (mAmpere-hours).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *designCapacity;

/**
 *  Output only. Designed minimum output voltage (mV)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *designMinVoltage;

/** Output only. The date the battery was manufactured. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleTypeDate *manufactureDate;

/** Output only. Battery manufacturer. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** Output only. Battery serial number. */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/** Output only. Technology of the battery. Example: Li-ion */
@property(nonatomic, copy, nullable) NSString *technology;

@end


/**
 *  Sampling data for battery. * This field is telemetry information and this
 *  will change over time as the device is utilized. * Data for this field is
 *  controlled via policy:
 *  [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1BatterySampleReport : GTLRObject

/**
 *  Output only. Battery charge percentage.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chargeRate;

/**
 *  Output only. Battery current (mA).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/**
 *  Output only. The battery discharge rate measured in mW. Positive if the
 *  battery is being discharged, negative if it's being charged.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dischargeRate;

/**
 *  Output only. Battery remaining capacity (mAmpere-hours).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *remainingCapacity;

/** Output only. Timestamp of when the sample was collected on device */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Output only. Battery status read from sysfs. Example: Discharging */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Output only. Temperature in Celsius degrees.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *temperature;

/**
 *  Output only. Battery voltage (millivolt).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voltage;

@end


/**
 *  Status data for battery. * This field is telemetry information and this will
 *  change over time as the device is utilized. * Data for this field is
 *  controlled via policy:
 *  [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_BATTERY_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport : GTLRObject

/**
 *  Output only. Battery health.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryHealthNormal
 *        Battery is healthy, full charge capacity / design capacity > 80%
 *        (Value: "BATTERY_HEALTH_NORMAL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryHealthUnspecified
 *        Health unknown. (Value: "BATTERY_HEALTH_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryReplaceNow
 *        Battery is unhealthy and suggested to be replaced, full charge
 *        capacity / design capacity < 75% (Value: "BATTERY_REPLACE_NOW")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport_BatteryHealth_BatteryReplaceSoon
 *        Battery is moderately unhealthy and suggested to be replaced soon,
 *        full charge capacity / design capacity 75% - 80% (Value:
 *        "BATTERY_REPLACE_SOON")
 */
@property(nonatomic, copy, nullable) NSString *batteryHealth;

/**
 *  Output only. Cycle count.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cycleCount;

/**
 *  Output only. Full charge capacity (mAmpere-hours).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullChargeCapacity;

/** Output only. Timestamp of when the sample was collected on device */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  Output only. Sampling data for the battery sorted in a decreasing order of
 *  report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1BatterySampleReport *> *sample;

/** Output only. Battery serial number. */
@property(nonatomic, copy, nullable) NSString *serialNumber;

@end


/**
 *  Boot performance report of a device. * This field is telemetry information
 *  and this will change over time as the device is utilized. * Data for this
 *  field is controlled via policy:
 *  [ReportDeviceBootMode](https://chromeenterprise.google/policies/#ReportDeviceBootMode)
 *  * Data Collection Frequency: On every boot up event * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: Yes * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_OS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport : GTLRObject

/** Total time to boot up. */
@property(nonatomic, strong, nullable) GTLRDuration *bootUpDuration;

/** The timestamp when power came on. */
@property(nonatomic, strong, nullable) GTLRDateTime *bootUpTime;

/** Timestamp when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Total time since shutdown start to power off. */
@property(nonatomic, strong, nullable) GTLRDuration *shutdownDuration;

/**
 *  The shutdown reason.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_LowBattery
 *        Shutdown due to low battery. (Value: "LOW_BATTERY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_Other
 *        Shutdown due to other reasons. (Value: "OTHER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_ShutdownReasonUnspecified
 *        Shutdown reason is not specified. (Value:
 *        "SHUTDOWN_REASON_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_SystemUpdate
 *        System update initiated. (Value: "SYSTEM_UPDATE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport_ShutdownReason_UserRequest
 *        User initiated. (Value: "USER_REQUEST")
 */
@property(nonatomic, copy, nullable) NSString *shutdownReason;

/** The timestamp when shutdown. */
@property(nonatomic, strong, nullable) GTLRDateTime *shutdownTime;

@end


/**
 *  Describes a browser version and its install count.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1BrowserVersion : GTLRObject

/**
 *  Output only. The release channel of the installed browser.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Beta
 *        Beta release channel. (Value: "BETA")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Canary
 *        Canary release channel. (Value: "CANARY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Dev
 *        Dev release channel. (Value: "DEV")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_ReleaseChannelUnspecified
 *        No release channel specified. (Value: "RELEASE_CHANNEL_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_Channel_Stable
 *        Stable release channel. (Value: "STABLE")
 */
@property(nonatomic, copy, nullable) NSString *channel;

/**
 *  Output only. Count grouped by device_system and major version
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Output only. Version of the system-specified operating system. */
@property(nonatomic, copy, nullable) NSString *deviceOsVersion;

/**
 *  Output only. The device operating system.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_DeviceSystemUnspecified
 *        No operating system specified. (Value: "DEVICE_SYSTEM_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemAndroid
 *        Android operating system. (Value: "SYSTEM_ANDROID")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemCros
 *        ChromeOS operating system. (Value: "SYSTEM_CROS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemIos
 *        Apple iOS operating system. (Value: "SYSTEM_IOS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemLinux
 *        Linux operating system. (Value: "SYSTEM_LINUX")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemMac
 *        Apple macOS operating system. (Value: "SYSTEM_MAC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemOther
 *        Other operating system. (Value: "SYSTEM_OTHER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1BrowserVersion_System_SystemWindows
 *        Microsoft Windows operating system. (Value: "SYSTEM_WINDOWS")
 */
@property(nonatomic, copy, nullable) NSString *system;

/** Output only. The full version of the installed browser. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Chrome Web Store app information.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo : GTLRObject

/**
 *  Output only. Whether the app or extension is built and maintained by Google.
 *  Version-specific field that will only be set when the requested app version
 *  is found.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *googleOwned;

/**
 *  Output only. Whether the app or extension is in a published state in the
 *  Chrome Web Store.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCwsHosted;

/**
 *  Output only. Whether an app supports policy for extensions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExtensionPolicySupported;

/**
 *  Output only. Whether the app is only for Kiosk mode on ChromeOS devices
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isKioskOnly;

/**
 *  Output only. Whether the app or extension is a theme.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isTheme;

/**
 *  Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *kioskEnabled;

/**
 *  Output only. The minimum number of users using this app.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minUserCount;

/**
 *  Output only. Every custom permission requested by the app. Version-specific
 *  field that will only be set when the requested app version is found.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1ChromeAppPermission *> *permissions;

/**
 *  Output only. Every permission giving access to domains or broad host
 *  patterns. ( e.g. www.google.com). This includes the matches from content
 *  scripts as well as hosts in the permissions node of the manifest.
 *  Version-specific field that will only be set when the requested app version
 *  is found.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1ChromeAppSiteAccess *> *siteAccess;

/**
 *  Output only. The app developer has enabled support for their app.
 *  Version-specific field that will only be set when the requested app version
 *  is found.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportEnabled;

/**
 *  Output only. Types of an item in the Chrome Web Store
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_Extension
 *        Chrome Extensions. (Value: "EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_ItemTypeUnspecified
 *        Unspecified ItemType. (Value: "ITEM_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ChromeAppInfo_Type_Others
 *        Any other type than extension. (Value: "OTHERS")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Permission requested by a Chrome app or extension.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ChromeAppPermission : GTLRObject

/**
 *  Output only. If available, whether this permissions grants the app/extension
 *  access to user data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accessUserData;

/**
 *  Output only. If available, a URI to a page that has documentation for the
 *  current permission.
 */
@property(nonatomic, copy, nullable) NSString *documentationUri;

/** Output only. The type of the permission. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details of an app installation request.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ChromeAppRequest : GTLRObject

/**
 *  Output only. Format:
 *  app_details=customers/{customer_id}/apps/chrome/{app_id}
 */
@property(nonatomic, copy, nullable) NSString *appDetails;

/**
 *  Output only. Unique store identifier for the app. Example:
 *  "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome
 *  extension.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/** Output only. The uri for the detail page of the item. */
@property(nonatomic, copy, nullable) NSString *detailUri;

/** Output only. App's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. A link to an image that can be used as an icon for the product.
 */
@property(nonatomic, copy, nullable) NSString *iconUri;

/**
 *  Output only. The timestamp of the most recently made request for this app.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *latestRequestTime;

/**
 *  Output only. Total count of requests for this app.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestCount;

@end


/**
 *  Represent one host permission.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ChromeAppSiteAccess : GTLRObject

/**
 *  Output only. This can contain very specific hosts, or patterns like "*.com"
 *  for instance.
 */
@property(nonatomic, copy, nullable) NSString *hostMatch;

@end


/**
 *  Response containing summary of requested app installations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "requestedApps" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeAppRequestsResponse : GTLRCollectionObject

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Count of requested apps matching request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1ChromeAppRequest *> *requestedApps;

/**
 *  Total number of matching app requests.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing counts for browsers that need attention.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse : GTLRObject

/**
 *  Number of browsers that haven’t had any recent activity
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noRecentActivityCount;

/**
 *  Number of browsers that are pending an OS update
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingBrowserUpdateCount;

/**
 *  Number of browsers that have been recently enrolled
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recentlyEnrolledCount;

@end


/**
 *  Response contains a list of CrashEventCountByVersionPerDay which count the
 *  chrome crash at the certain date.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeCrashEventsResponse : GTLRObject

/** Crash event counts grouped by date and browser version. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1CountChromeCrashEventsResponseCrashEventCount *> *crashEventCounts;

@end


/**
 *  The `count` of the Chrome crash events at the `date`.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeCrashEventsResponseCrashEventCount : GTLRObject

/** Browser version this is counting. */
@property(nonatomic, copy, nullable) NSString *browserVersion;

/**
 *  Total count of crash events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Date of the crash event. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleTypeDate *date;

@end


/**
 *  Response containing a list of devices expiring in each month of a selected
 *  time frame. Counts are grouped by model and Auto Update Expiration date.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse : GTLRObject

/**
 *  The list of reports sorted by auto update expiration date in ascending
 *  order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport *> *deviceAueCountReports;

@end


/**
 *  Response containing counts for devices that need attention.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse : GTLRObject

/**
 *  Number of ChromeOS devices have not synced policies in the past 28 days.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noRecentPolicySyncCount;

/**
 *  Number of ChromeOS devices that have not seen any user activity in the past
 *  28 days.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noRecentUserActivityCount;

/**
 *  Number of devices whose OS version is not compliant.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *osVersionNotCompliantCount;

/**
 *  Number of devices that are pending an OS update.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingUpdate;

/**
 *  Number of devices that are unable to apply a policy due to an OS version
 *  mismatch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unsupportedPolicyCount;

@end


/**
 *  Response containing a list of devices with a specific type of hardware
 *  specification from the requested hardware type.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse : GTLRObject

/**
 *  The DeviceHardwareCountReport for device cpu type (for example Intel(R)
 *  Core(TM) i7-10610U CPU \@ 1.80GHz).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport *> *cpuReports;

/**
 *  The DeviceHardwareCountReport for device memory amount in gigabytes (for
 *  example 16).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport *> *memoryReports;

/**
 *  The DeviceHardwareCountReport for device model type (for example Acer C7
 *  Chromebook).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport *> *modelReports;

/**
 *  The DeviceHardwareCountReport for device storage amount in gigabytes (for
 *  example 128).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport *> *storageReports;

@end


/**
 *  Response containing requested browser versions details and counts.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "browserVersions" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountChromeVersionsResponse : GTLRCollectionObject

/**
 *  List of all browser versions and their install counts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1BrowserVersion *> *browserVersions;

/** Token to specify the next page of the request. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number browser versions matching request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing details of queried installed apps.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "installedApps" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountInstalledAppsResponse : GTLRCollectionObject

/**
 *  List of installed apps matching request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1InstalledApp *> *installedApps;

/** Token to specify the next page of the request. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number of installed apps matching request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing a summary printing report for each printer from the
 *  specified organizational unit for the requested time interval.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "printerReports" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountPrintJobsByPrinterResponse : GTLRCollectionObject

/** Pagination token for requesting the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of PrinterReports matching request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1PrinterReport *> *printerReports;

/**
 *  Total number of printers matching request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing a summary printing report for each user that has
 *  initiated a print job with a printer from the specified organizational unit
 *  during the requested time interval.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "userPrintReports" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CountPrintJobsByUserResponse : GTLRCollectionObject

/** Pagination token for requesting the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number of users matching request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

/**
 *  List of UserPrintReports matching request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1UserPrintReport *> *userPrintReports;

@end


/**
 *  CPU specifications for the device * This field provides device information,
 *  which is static and will not change over time. * Data for this field is
 *  controlled via policy:
 *  [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_CPU_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CpuInfo : GTLRObject

/**
 *  Output only. Architecture type for the CPU. * This field provides device
 *  information, which is static and will not change over time. * Data for this
 *  field is controlled via policy:
 *  [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1CpuInfo_Architecture_ArchitectureUnspecified
 *        Architecture unknown. (Value: "ARCHITECTURE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1CpuInfo_Architecture_X64
 *        x64 architecture (Value: "X64")
 */
@property(nonatomic, copy, nullable) NSString *architecture;

/**
 *  Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` =
 *  disabled. Only reported if keylockerSupported = `TRUE`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keylockerConfigured;

/**
 *  Output only. Whether keylocker is supported.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keylockerSupported;

/**
 *  Output only. The max CPU clock speed in kHz.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxClockSpeed;

/**
 *  Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU \@
 *  1.60GHz
 */
@property(nonatomic, copy, nullable) NSString *model;

@end


/**
 *  Provides information about the status of the CPU. * This field is telemetry
 *  information and this will change over time as the device is utilized. * Data
 *  for this field is controlled via policy:
 *  [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo)
 *  * Data Collection Frequency: Every 10 minutes * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_CPU_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CpuStatusReport : GTLRObject

/** Output only. CPU temperature sample info per CPU core in Celsius */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1CpuTemperatureInfo *> *cpuTemperatureInfo;

/**
 *  Output only. Sample of CPU utilization (0-100 percent).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuUtilizationPct;

/**
 *  Output only. The timestamp in milliseconds representing time at which this
 *  report was sampled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Output only. Frequency the report is sampled. */
@property(nonatomic, strong, nullable) GTLRDuration *sampleFrequency;

@end


/**
 *  CPU temperature of a device. Sampled per CPU core in Celsius. * This field
 *  is telemetry information and this will change over time as the device is
 *  utilized. * Data for this field is controlled via policy:
 *  [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo)
 *  * Data Collection Frequency: Every 10 minutes * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1CpuTemperatureInfo : GTLRObject

/** Output only. CPU label. Example: Core 0 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  Output only. CPU temperature in Celsius.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *temperatureCelsius;

@end


/**
 *  Describes a device reporting Chrome browser information.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1Device : GTLRObject

/**
 *  Output only. The ID of the device that reported this Chrome browser
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** Output only. The name of the machine within its local network. */
@property(nonatomic, copy, nullable) NSString *machine;

@end


/**
 *  Device activity report. * Granular permission needed:
 *  TELEMETRY_API_DEVICE_ACTIVITY_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport : GTLRObject

/**
 *  Output only. Device activity state.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Active
 *        Device is currently being used. (Value: "ACTIVE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_DeviceActivityStateUnspecified
 *        Device activity state is unspecified. (Value:
 *        "DEVICE_ACTIVITY_STATE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Idle
 *        Device is currently idle. (Value: "IDLE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport_DeviceActivityState_Locked
 *        Device is currently locked. (Value: "LOCKED")
 */
@property(nonatomic, copy, nullable) NSString *deviceActivityState;

/** Output only. Timestamp of when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  Report for CountChromeDevicesPerAueDateResponse, contains the count of
 *  devices of a specific model and auto update expiration range.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport : GTLRObject

/**
 *  Enum value of month corresponding to the auto update expiration date in UTC
 *  time zone. If the device is already expired, this field is empty.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_April
 *        The month of April. (Value: "APRIL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_August
 *        The month of August. (Value: "AUGUST")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_December
 *        The month of December. (Value: "DECEMBER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_February
 *        The month of February. (Value: "FEBRUARY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_January
 *        The month of January. (Value: "JANUARY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_July
 *        The month of July. (Value: "JULY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_June
 *        The month of June. (Value: "JUNE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_March
 *        The month of March. (Value: "MARCH")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_May
 *        The month of May. (Value: "MAY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_MonthUnspecified
 *        The unspecified month. (Value: "MONTH_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_November
 *        The month of November. (Value: "NOVEMBER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_October
 *        The month of October. (Value: "OCTOBER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1DeviceAueCountReport_AueMonth_September
 *        The month of September. (Value: "SEPTEMBER")
 */
@property(nonatomic, copy, nullable) NSString *aueMonth;

/**
 *  Int value of year corresponding to the Auto Update Expiration date in UTC
 *  time zone. If the device is already expired, this field is empty.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aueYear;

/**
 *  Count of devices of this model.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Boolean value for whether or not the device has already expired.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expired;

/** Public model name of the devices. */
@property(nonatomic, copy, nullable) NSString *model;

@end


/**
 *  Report for CountChromeDevicesPerHardwareSpecResponse, contains the count of
 *  devices with a unique hardware specification.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DeviceHardwareCountReport : GTLRObject

/** Public name of the hardware specification. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Count of devices with a unique hardware specification.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

@end


/**
 *  Details of a device requesting an extension, including the name of the
 *  device and the justification of the request.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DeviceRequestingExtensionDetails : GTLRObject

/** The name of a device that has requested the extension. */
@property(nonatomic, copy, nullable) NSString *deviceName;

/** Request justification as entered by the user. */
@property(nonatomic, copy, nullable) NSString *justification;

@end


/**
 *  Status of the single storage device.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DiskInfo : GTLRObject

/**
 *  Output only. Number of bytes read since last boot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesReadThisSession;

/**
 *  Output only. Number of bytes written since last boot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesWrittenThisSession;

/**
 *  Output only. Time spent discarding since last boot. Discarding is writing to
 *  clear blocks which are no longer in use. Supported on kernels 4.18+.
 */
@property(nonatomic, strong, nullable) GTLRDuration *discardTimeThisSession;

/** Output only. Disk health. */
@property(nonatomic, copy, nullable) NSString *health;

/**
 *  Output only. Counts the time the disk and queue were busy, so unlike the
 *  fields above, parallel requests are not counted multiple times.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ioTimeThisSession;

/** Output only. Disk manufacturer. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** Output only. Disk model. */
@property(nonatomic, copy, nullable) NSString *model;

/** Output only. Time spent reading from disk since last boot. */
@property(nonatomic, strong, nullable) GTLRDuration *readTimeThisSession;

/** Output only. Disk serial number. */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/**
 *  Output only. Disk size.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

/** Output only. Disk type: eMMC / NVMe / ATA / SCSI. */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. Disk volumes. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *volumeIds;

/** Output only. Time spent writing to disk since last boot. */
@property(nonatomic, strong, nullable) GTLRDuration *writeTimeThisSession;

@end


/**
 *  Information of a display device.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DisplayDevice : GTLRObject

/**
 *  Output only. Display height in millimeters.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *displayHeightMm;

/** Output only. Display device name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Display width in millimeters.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *displayWidthMm;

/**
 *  Output only. Is display internal or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internal;

/** Output only. Three letter manufacturer ID. */
@property(nonatomic, copy, nullable) NSString *manufacturerId;

/**
 *  Output only. Year of manufacture.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *manufactureYear;

/**
 *  Output only. Manufacturer product code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelId;

@end


/**
 *  Information for a display.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1DisplayInfo : GTLRObject

/**
 *  Output only. Represents the graphics card device id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** Output only. Display device name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Indicates if display is internal or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isInternal;

/**
 *  Output only. Refresh rate in Hz.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *refreshRate;

/**
 *  Output only. Resolution height in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resolutionHeight;

/**
 *  Output only. Resolution width in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resolutionWidth;

@end


/**
 *  Response containing a list of print jobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "printJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1EnumeratePrintJobsResponse : GTLRCollectionObject

/**
 *  A token, which can be used in a subsequent request to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of requested print jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1PrintJob *> *printJobs;

/**
 *  Total number of print jobs matching request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing a list of devices that have requested the queried
 *  extension.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deviceDetails" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1FetchDevicesRequestingExtensionResponse : GTLRCollectionObject

/**
 *  Details of devices that have requested the queried extension.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceRequestingExtensionDetails *> *deviceDetails;

/**
 *  Optional. Token to specify the next page in the list. Token expires after 1
 *  day.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Optional. Total number of devices in response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Response containing a list of users that have requested the queried
 *  extension.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "userDetails" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1FetchUsersRequestingExtensionResponse : GTLRCollectionObject

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number of users in response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

/**
 *  Details of users that have requested the queried extension.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1UserRequestingExtensionDetails *> *userDetails;

@end


/**
 *  Response containing a list of devices with queried app installed.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1FindInstalledAppDevicesResponse : GTLRCollectionObject

/**
 *  A list of devices which have the app installed. Sorted in ascending
 *  alphabetical order on the Device.machine field.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1Device *> *devices;

/** Token to specify the next page of the request. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Total number of devices matching request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  Information of a graphics adapter (GPU).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1GraphicsAdapterInfo : GTLRObject

/**
 *  Output only. Adapter name. Example: Mesa DRI Intel(R) UHD Graphics 620
 *  (Kabylake GT2).
 */
@property(nonatomic, copy, nullable) NSString *adapter;

/**
 *  Output only. Represents the graphics card device id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceId;

/** Output only. Version of the GPU driver. */
@property(nonatomic, copy, nullable) NSString *driverVersion;

@end


/**
 *  Information of the graphics subsystem. * This field provides device
 *  information, which is static and will not change over time. * Data for this
 *  field is controlled via policy:
 *  [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1GraphicsInfo : GTLRObject

/** Output only. Information about the graphics adapter (GPU). */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1GraphicsAdapterInfo *adapterInfo;

/** Output only. Information about the display(s) of the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DisplayDevice *> *displayDevices;

/**
 *  Output only. Is ePrivacy screen supported or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eprivacySupported;

/**
 *  Output only. Information about the internal touch screen(s) of the device.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TouchScreenInfo *touchScreenInfo;

@end


/**
 *  Information of the graphics subsystem. * This field is telemetry information
 *  and this will change over time as the device is utilized. * Data for this
 *  field is controlled via policy:
 *  [ReportDeviceGraphicsInfo](https://chromeenterprise.google/policies/#ReportDeviceGraphicsInfo)
 *  * Data Collection Frequency: 3 hours. * Default Data Reporting Frequency: 3
 *  hours - Policy Controlled: Yes * Cache: If the device is offline, the
 *  collected data is stored locally, and will be reported when the device is
 *  next online: No * Reported for affiliated users only: N/A * Granular
 *  permission needed: TELEMETRY_API_GRAPHICS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1GraphicsStatusReport : GTLRObject

/** Output only. Information about the displays for the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DisplayInfo *> *displays;

/** Output only. Time at which the graphics data was reported. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  Heartbeat status report of a device. * Available for Kiosks * This field
 *  provides online/offline/unknown status of a device and will only be included
 *  if the status has changed (e.g. Online -> Offline) * Data for this field is
 *  controlled via policy:
 *  [HeartbeatEnabled](https://chromeenterprise.google/policies/#HeartbeatEnabled)
 *  [More
 *  Info](https://support.google.com/chrome/a/answer/6179663#:~:text=On%20the%20Chrome,device%20status%20alerts)
 *  * Heartbeat Frequency: 2 mins * Note: If a device goes offline, it can take
 *  up to 12 minutes for the online status of the device to be updated * Cache:
 *  If the device is offline, the collected data is stored locally, and will be
 *  reported when the device is next online: N/A * Reported for affiliated users
 *  only: N/A * Granular permission needed: TELEMETRY_API_DEVICE_ACTIVITY_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport : GTLRObject

/** Timestamp of when status changed was detected */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  State the device changed to
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Offline
 *        Device is offline (Value: "OFFLINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Online
 *        Device is online (Value: "ONLINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_StateUnspecified
 *        State not specified (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport_State_Unknown
 *        Device is not eligible for heartbeat monitoring (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Data that describes the result of the HTTPS latency diagnostics routine,
 *  with the HTTPS requests issued to Google websites.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData : GTLRObject

/**
 *  Output only. HTTPS latency if routine succeeded or failed because of
 *  HIGH_LATENCY or VERY_HIGH_LATENCY.
 */
@property(nonatomic, strong, nullable) GTLRDuration *latency;

/**
 *  Output only. HTTPS latency routine problem if a problem occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_FailedDnsResolutions
 *        One or more DNS resolutions resulted in a failure. (Value:
 *        "FAILED_DNS_RESOLUTIONS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_FailedHttpsRequests
 *        One or more HTTPS requests resulted in a failure. (Value:
 *        "FAILED_HTTPS_REQUESTS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_HighLatency
 *        Average HTTPS request latency time between 500ms and 1000ms is high.
 *        (Value: "HIGH_LATENCY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_HttpsLatencyProblemUnspecified
 *        HTTPS latency problem not specified. (Value:
 *        "HTTPS_LATENCY_PROBLEM_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData_Problem_VeryHighLatency
 *        Average HTTPS request latency time greater than 1000ms is very high.
 *        (Value: "VERY_HIGH_LATENCY")
 */
@property(nonatomic, copy, nullable) NSString *problem;

@end


/**
 *  Describes an installed app.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1InstalledApp : GTLRObject

/**
 *  Output only. Unique identifier of the app. For Chrome apps and extensions,
 *  the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android
 *  apps, the package name (e.g. com.evernote).
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  Output only. How the app was installed.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Admin
 *        Administrator app install type. (Value: "ADMIN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_AppInstallTypeUnspecified
 *        Application install type not specified. (Value:
 *        "APP_INSTALL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Development
 *        Development app install type. (Value: "DEVELOPMENT")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Multiple
 *        Multiple app install types. (Value: "MULTIPLE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Normal
 *        Normal app install type. (Value: "NORMAL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Other
 *        Other app install type. (Value: "OTHER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppInstallType_Sideload
 *        Sideloaded app install type. (Value: "SIDELOAD")
 */
@property(nonatomic, copy, nullable) NSString *appInstallType;

/**
 *  Output only. Source of the installed app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_AppSourceUnspecified
 *        Application source not specified. (Value: "APP_SOURCE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_ChromeWebstore
 *        Generally for extensions and Chrome apps. (Value: "CHROME_WEBSTORE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppSource_PlayStore
 *        Play Store app. (Value: "PLAY_STORE")
 */
@property(nonatomic, copy, nullable) NSString *appSource;

/**
 *  Output only. Type of the app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_AndroidApp
 *        ARC++ app. (Value: "ANDROID_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_App
 *        Chrome app. (Value: "APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_AppTypeUnspecified
 *        App type not specified. (Value: "APP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_Extension
 *        Chrome extension. (Value: "EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_HostedApp
 *        Chrome hosted app. (Value: "HOSTED_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1InstalledApp_AppType_Theme
 *        Chrome theme. (Value: "THEME")
 */
@property(nonatomic, copy, nullable) NSString *appType;

/**
 *  Output only. Count of browser devices with this app installed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *browserDeviceCount;

/**
 *  Output only. Description of the installed app.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. Whether the app is disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** Output only. Name of the installed app. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Homepage uri of the installed app. */
@property(nonatomic, copy, nullable) NSString *homepageUri;

/**
 *  Output only. Count of ChromeOS users with this app installed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *osUserCount;

/** Output only. Permissions of the installed app. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Kiosk app status report of a device. * Available for Kiosks * This field
 *  provides the app id and version number running on a kiosk device and the
 *  timestamp of when the report was last updated * Data for this field is
 *  controlled via policy:
 *  [ReportDeviceSessionStatus](https://chromeenterprise.google/policies/#ReportDeviceSessionStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_APPS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1KioskAppStatusReport : GTLRObject

/** App id of kiosk app for example "mdmkkicfmmkgmpkmkdikhlbggogpicma" */
@property(nonatomic, copy, nullable) NSString *appId;

/** App version number of kiosk app for example "1.10.118" */
@property(nonatomic, copy, nullable) NSString *appVersion;

/** Timestamp of when report was collected */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryDevicesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryDevicesResponse : GTLRCollectionObject

/**
 *  Telemetry devices returned in the response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TelemetryDevice *> *devices;

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for listing telemetry events for a customer.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "telemetryEvents" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryEventsResponse : GTLRCollectionObject

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Telemetry events returned in the response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent *> *telemetryEvents;

@end


/**
 *  Response message for listing notification configs for a customer.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "telemetryNotificationConfigs" property. If returned as the result
 *        of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The telemetry notification configs from the specified customer.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig *> *telemetryNotificationConfigs;

@end


/**
 *  Response message for listing telemetry users for a customer.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "telemetryUsers" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ListTelemetryUsersResponse : GTLRCollectionObject

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Telemetry users returned in the response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TelemetryUser *> *telemetryUsers;

@end


/**
 *  Memory information of a device. * This field has both telemetry and device
 *  information: - `totalRamBytes` - Device information - `availableRamBytes` -
 *  Telemetry information - `totalMemoryEncryption` - Device information * Data
 *  for this field is controlled via policy:
 *  [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo)
 *  * Data Collection Frequency: - `totalRamBytes` - Only at upload -
 *  `availableRamBytes` - Every 10 minutes - `totalMemoryEncryption` - at device
 *  startup * Default Data Reporting Frequency: - `totalRamBytes` - 3 hours -
 *  `availableRamBytes` - 3 hours - `totalMemoryEncryption` - at device startup
 *  - Policy Controlled: Yes * Cache: If the device is offline, the collected
 *  data is stored locally, and will be reported when the device is next online:
 *  only for `totalMemoryEncryption` * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_MEMORY_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1MemoryInfo : GTLRObject

/**
 *  Output only. Amount of available RAM in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *availableRamBytes;

/** Output only. Total memory encryption info for the device. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo *totalMemoryEncryption;

/**
 *  Output only. Total RAM in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRamBytes;

@end


/**
 *  Contains samples of memory status reports. * This field is telemetry
 *  information and this will change over time as the device is utilized. * Data
 *  for this field is controlled via policy:
 *  [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo)
 *  * Data Collection Frequency: Only at upload, SystemRamFreeByes is collected
 *  every 10 minutes * Default Data Reporting Frequency: Every 3 hours - Policy
 *  Controlled: Yes * Cache: If the device is offline, the collected data is
 *  stored locally, and will be reported when the device is next online: No *
 *  Reported for affiliated users only: N/A * Granular permission needed:
 *  TELEMETRY_API_MEMORY_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1MemoryStatusReport : GTLRObject

/**
 *  Output only. Number of page faults during this collection
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageFaults;

/**
 *  Output only. The timestamp in milliseconds representing time at which this
 *  report was sampled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Output only. Frequency the report is sampled. */
@property(nonatomic, strong, nullable) GTLRDuration *sampleFrequency;

/**
 *  Output only. Amount of free RAM in bytes (unreliable due to Garbage
 *  Collection).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *systemRamFreeBytes;

@end


/**
 *  Network bandwidth report. * Granular permission needed:
 *  TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1NetworkBandwidthReport : GTLRObject

/**
 *  Output only. Download speed in kilobits per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *downloadSpeedKbps;

/** Output only. Timestamp of when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  Details about the network device. * This field provides device information,
 *  which is static and will not change over time. * Data for this field is
 *  controlled via policy:
 *  [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration)
 *  * Data Collection Frequency: At device startup * Default Data Reporting
 *  Frequency: At device startup - Policy Controlled: Yes * Cache: If the device
 *  is offline, the collected data is stored locally, and will be reported when
 *  the device is next online: Yes * Reported for affiliated users only: N/A
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1NetworkDevice : GTLRObject

/**
 *  Output only. The integrated circuit card ID associated with the device's sim
 *  card.
 */
@property(nonatomic, copy, nullable) NSString *iccid;

/** Output only. IMEI (if applicable) of the corresponding network device. */
@property(nonatomic, copy, nullable) NSString *imei;

/**
 *  Output only. MAC address (if applicable) of the corresponding network
 *  device.
 */
@property(nonatomic, copy, nullable) NSString *macAddress;

/**
 *  Output only. The mobile directory number associated with the device's sim
 *  card.
 */
@property(nonatomic, copy, nullable) NSString *mdn;

/** Output only. MEID (if applicable) of the corresponding network device. */
@property(nonatomic, copy, nullable) NSString *meid;

/**
 *  Output only. Network device type.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_CellularDevice
 *        Cellular device. (Value: "CELLULAR_DEVICE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_EthernetDevice
 *        Ethernet device. (Value: "ETHERNET_DEVICE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_NetworkDeviceTypeUnspecified
 *        Network device type not specified. (Value:
 *        "NETWORK_DEVICE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkDevice_Type_WifiDevice
 *        Wifi device. (Value: "WIFI_DEVICE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Network testing results to determine the health of the device's network
 *  connection, for example whether the HTTPS latency is high or normal. *
 *  Granular permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1NetworkDiagnosticsReport : GTLRObject

/** Output only. HTTPS latency test data. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData *httpsLatencyData;

/** Output only. Timestamp of when the diagnostics were collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  Network device information. * This field provides device information, which
 *  is static and will not change over time. * Data for this field is controlled
 *  via policy:
 *  [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration)
 *  * Data Collection Frequency: At device startup * Default Data Reporting
 *  Frequency: At device startup - Policy Controlled: Yes * Cache: If the device
 *  is offline, the collected data is stored locally, and will be reported when
 *  the device is next online: Yes * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_NETWORK_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1NetworkInfo : GTLRObject

/** Output only. List of network devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1NetworkDevice *> *networkDevices;

@end


/**
 *  State of visible/configured networks. * This field is telemetry information
 *  and this will change over time as the device is utilized. * Data for this
 *  field is controlled via policy:
 *  [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus)
 *  * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency:
 *  3 hours - Policy Controlled: Yes * Cache: If the device is offline, the
 *  collected data is stored locally, and will be reported when the device is
 *  next online: Yes * Reported for affiliated users only: Yes * Granular
 *  permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport : GTLRObject

/**
 *  Output only. Current connection state of the network.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Connected
 *        The network is connected and not in a detected portal state, but
 *        internet connectivity may not be available. (Value: "CONNECTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Connecting
 *        The network is in the process of connecting. (Value: "CONNECTING")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_NetworkConnectionStateUnspecified
 *        Network connection state unspecified. (Value:
 *        "NETWORK_CONNECTION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_NotConnected
 *        The network is not connected. (Value: "NOT_CONNECTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Online
 *        The network is connected and internet connectivity is available.
 *        (Value: "ONLINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionState_Portal
 *        The network is connected but a portal state was detected. Internet
 *        connectivity may be limited. (Value: "PORTAL")
 */
@property(nonatomic, copy, nullable) NSString *connectionState;

/**
 *  Output only. Network connection type.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Cellular
 *        Cellular network connection. (Value: "CELLULAR")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Ethernet
 *        Ethernet network connection. (Value: "ETHERNET")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_NetworkTypeUnspecified
 *        Network connection type unspecified (Value:
 *        "NETWORK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Tether
 *        Tether network connection. (Value: "TETHER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Vpn
 *        VPN network connection. (Value: "VPN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport_ConnectionType_Wifi
 *        Wifi network connection. (Value: "WIFI")
 */
@property(nonatomic, copy, nullable) NSString *connectionType;

/**
 *  Output only. Whether the wifi encryption key is turned off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *encryptionOn;

/** Output only. Gateway IP address. */
@property(nonatomic, copy, nullable) NSString *gatewayIpAddress;

/** Output only. Network connection guid. */
@property(nonatomic, copy, nullable) NSString *guid;

/** Output only. LAN IP address. */
@property(nonatomic, copy, nullable) NSString *lanIpAddress;

/**
 *  Output only. Receiving bit rate measured in Megabits per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *receivingBitRateMbps;

/** Output only. Time at which the network state was reported. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Output only. Frequency the report is sampled. */
@property(nonatomic, strong, nullable) GTLRDuration *sampleFrequency;

/**
 *  Output only. Signal strength for wireless networks measured in decibels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *signalStrengthDbm;

/**
 *  Output only. Transmission bit rate measured in Megabits per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transmissionBitRateMbps;

/**
 *  Output only. Transmission power measured in decibels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transmissionPowerDbm;

/**
 *  Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no
 *  signal and 70 indicates a strong signal.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wifiLinkQuality;

/**
 *  Output only. Wifi power management enabled
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wifiPowerManagementEnabled;

@end


/**
 *  Contains information regarding the current OS update status. * This field is
 *  telemetry information and this will change over time as the device is
 *  utilized. * Data for this field is controlled via policy:
 *  [ReportDeviceOsUpdateStatus](https://chromeenterprise.google/policies/#ReportDeviceOsUpdateStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_OS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus : GTLRObject

/** Output only. Timestamp of the last reboot. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastRebootTime;

/** Output only. Timestamp of the last update check. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateCheckTime;

/** Output only. Timestamp of the last successful update. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  Output only. New platform version of the os image being downloaded and
 *  applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS
 *  or OS_UPDATE_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for
 *  OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is
 *  restarted without a reboot.
 */
@property(nonatomic, copy, nullable) NSString *newPlatformVersion NS_RETURNS_NOT_RETAINED;

/**
 *  Output only. New requested platform version from the pending updated kiosk
 *  app.
 */
@property(nonatomic, copy, nullable) NSString *newRequestedPlatformVersion NS_RETURNS_NOT_RETAINED;

/**
 *  Output only. Current state of the os update.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsImageDownloadInProgress
 *        OS has started download on device. (Value:
 *        "OS_IMAGE_DOWNLOAD_IN_PROGRESS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsImageDownloadNotStarted
 *        OS has not started downloading. (Value:
 *        "OS_IMAGE_DOWNLOAD_NOT_STARTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_OsUpdateNeedReboot
 *        Device needs reboot to finish upload. (Value: "OS_UPDATE_NEED_REBOOT")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus_UpdateState_UpdateStateUnspecified
 *        State unspecified. (Value: "UPDATE_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *updateState;

@end


/**
 *  Peripherals report. * Granular permission needed:
 *  TELEMETRY_API_PERIPHERALS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1PeripheralsReport : GTLRObject

/** Output only. Timestamp of when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/** Reports of all usb connected devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1UsbPeripheralReport *> *usbPeripheralReport;

@end


/**
 *  Report for CountPrintJobsByPrinter, contains statistics on printer usage.
 *  Contains the total number of print jobs initiated with this printer, the
 *  number of users and the number of devices that have initiated at least one
 *  print job with this printer.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1PrinterReport : GTLRObject

/**
 *  Number of chrome devices that have been used to send print jobs to the
 *  specified printer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceCount;

/**
 *  Number of print jobs sent to the printer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobCount;

/** Printer name. */
@property(nonatomic, copy, nullable) NSString *printer;

/** Printer API ID. */
@property(nonatomic, copy, nullable) NSString *printerId;

/** Printer model. */
@property(nonatomic, copy, nullable) NSString *printerModel;

/**
 *  Number of users that have sent print jobs to the printer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userCount;

@end


/**
 *  Represents a request to print a document that has been submitted to a
 *  printer.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1PrintJob : GTLRObject

/**
 *  Color mode.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_BlackAndWhite
 *        Black and white. (Value: "BLACK_AND_WHITE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_Color
 *        Color. (Value: "COLOR")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_ColorMode_ColorModeUnspecified
 *        Unspecified. (Value: "COLOR_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *colorMode;

/** Print job completion timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/**
 *  Number of copies.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copyCount NS_RETURNS_NOT_RETAINED;

/** Print job creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Number of pages in the document.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *documentPageCount;

/**
 *  Duplex mode.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_DuplexModeUnspecified
 *        Unspecified. (Value: "DUPLEX_MODE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_OneSided
 *        One-sided. (Value: "ONE_SIDED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_TwoSidedLongEdge
 *        Two-sided flipping over long edge. (Value: "TWO_SIDED_LONG_EDGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_DuplexMode_TwoSidedShortEdge
 *        Two-sided flipping over short edge. (Value: "TWO_SIDED_SHORT_EDGE")
 */
@property(nonatomic, copy, nullable) NSString *duplexMode;

/**
 *  Unique ID of the print job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Name of the printer used for printing. */
@property(nonatomic, copy, nullable) NSString *printer;

/** API ID of the printer used for printing. */
@property(nonatomic, copy, nullable) NSString *printerId;

/**
 *  The final state of the job.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Cancelled
 *        Print job was cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Failed
 *        Print job failed. (Value: "FAILED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_Printed
 *        The document was successfully printed. (Value: "PRINTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1PrintJob_State_StateUnspecified
 *        Print job is in an unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The title of the document. */
@property(nonatomic, copy, nullable) NSString *title;

/** The primary e-mail address of the user who submitted the print job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

/** The unique Directory API ID of the user who submitted the print job. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  Runtime counters retrieved from CPU. Currently the runtime counters
 *  telemetry is only supported by Intel vPro PSR on Gen 14+.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1RuntimeCountersReport : GTLRObject

/**
 *  Number of times that the device has entered into the hibernation state.
 *  Currently obtained via the PSR, count from S0->S4.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enterHibernationCount;

/**
 *  Number of times that the device has entered into the power-off state.
 *  Currently obtained via the PSR, count from S0->S5.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enterPoweroffCount;

/**
 *  Number of times that the device has entered into the sleep state. Currently
 *  obtained via the PSR, count from S0->S3.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enterSleepCount;

/** Timestamp when the report was collected. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  Total lifetime runtime. Currently always S0 runtime from Intel vPro PSR.
 */
@property(nonatomic, strong, nullable) GTLRDuration *uptimeRuntimeDuration;

@end


/**
 *  Status data for storage. * This field is telemetry information and this will
 *  change over time as the device is utilized. * Data for this field is
 *  controlled via policy:
 *  [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_STORAGE_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1StorageInfo : GTLRObject

/**
 *  The available space for user data storage in the device in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *availableDiskBytes;

/**
 *  The total space for user data storage in the device in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalDiskBytes;

/** Information for disk volumes */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1StorageInfoDiskVolume *> *volume;

@end


/**
 *  Information for disk volumes
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1StorageInfoDiskVolume : GTLRObject

/**
 *  Free storage space in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageFreeBytes;

/**
 *  Total storage space in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageTotalBytes;

/** Disk volume id. */
@property(nonatomic, copy, nullable) NSString *volumeId;

@end


/**
 *  Status data for storage. * This field is telemetry information and this will
 *  change over time as the device is utilized. * Data for this field is
 *  controlled via policy:
 *  [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus)
 *  * Data Collection Frequency: Only at Upload * Default Data Reporting
 *  Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is
 *  offline, the collected data is stored locally, and will be reported when the
 *  device is next online: No * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_STORAGE_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1StorageStatusReport : GTLRObject

/** Output only. Reports on disk. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DiskInfo *> *disk;

/** Output only. Timestamp of when the sample was collected on device */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  App installation data.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent : GTLRObject

/**
 *  App id. For PWAs this is the start URL, and for extensions this is the
 *  extension id.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  App installation reason.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonCommandLine
 *        Application installed by command line argument. (Value:
 *        "APPLICATION_INSTALL_REASON_COMMAND_LINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonDefault
 *        Application installed by default, but is not considered a system app.
 *        (Value: "APPLICATION_INSTALL_REASON_DEFAULT")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonKiosk
 *        Application installed by Kiosk on Chrome OS. (Value:
 *        "APPLICATION_INSTALL_REASON_KIOSK")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonOem
 *        Application installed by an original equipment manufacturer (OEM).
 *        (Value: "APPLICATION_INSTALL_REASON_OEM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonPolicy
 *        Application installed by policy. (Value:
 *        "APPLICATION_INSTALL_REASON_POLICY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSubApp
 *        Application installed bt SubApp API call. (Value:
 *        "APPLICATION_INSTALL_REASON_SUB_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSync
 *        Application installed by sync. (Value:
 *        "APPLICATION_INSTALL_REASON_SYNC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonSystem
 *        Application installed with the system and is considered part of the
 *        OS. (Value: "APPLICATION_INSTALL_REASON_SYSTEM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonUnspecified
 *        Application install reason is unknown. (Value:
 *        "APPLICATION_INSTALL_REASON_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallReason_ApplicationInstallReasonUser
 *        Application installed by user action. (Value:
 *        "APPLICATION_INSTALL_REASON_USER")
 */
@property(nonatomic, copy, nullable) NSString *appInstallReason;

/**
 *  App installation source.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceBrowser
 *        Application install source is a browser. (Value:
 *        "APPLICATION_INSTALL_SOURCE_BROWSER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceChromeWebStore
 *        Application install source is the Chrome web store. (Value:
 *        "APPLICATION_INSTALL_SOURCE_CHROME_WEB_STORE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourcePlayStore
 *        Application install source is the Play store. (Value:
 *        "APPLICATION_INSTALL_SOURCE_PLAY_STORE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceSync
 *        Application install source is a sync. (Value:
 *        "APPLICATION_INSTALL_SOURCE_SYNC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceSystem
 *        Application installed as part of Chrome OS. (Value:
 *        "APPLICATION_INSTALL_SOURCE_SYSTEM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallSource_ApplicationInstallSourceUnspecified
 *        Application install source is unknown. (Value:
 *        "APPLICATION_INSTALL_SOURCE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appInstallSource;

/**
 *  App installation time depending on the app lifecycle.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeInit
 *        Application install is initialized. (Value:
 *        "APPLICATION_INSTALL_TIME_INIT")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeRunning
 *        Application install is currently running. (Value:
 *        "APPLICATION_INSTALL_TIME_RUNNING")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppInstallTime_ApplicationInstallTimeUnspecified
 *        Application install time unknown. (Value:
 *        "APPLICATION_INSTALL_TIME_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appInstallTime;

/**
 *  Type of app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeArc
 *        Application type arc (Android app). (Value: "APPLICATION_TYPE_ARC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBorealis
 *        Application type borealis. (Value: "APPLICATION_TYPE_BOREALIS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBruschetta
 *        Application type bruschetta. (Value: "APPLICATION_TYPE_BRUSCHETTA")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeBuiltIn
 *        Application type built-in. (Value: "APPLICATION_TYPE_BUILT_IN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeChromeApp
 *        Application type Chrome app. (Value: "APPLICATION_TYPE_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeCrostini
 *        Application type Linux (via Crostini). (Value:
 *        "APPLICATION_TYPE_CROSTINI")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeExtension
 *        Application type extension. (Value: "APPLICATION_TYPE_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeMacOs
 *        Application type Mac OS. (Value: "APPLICATION_TYPE_MAC_OS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypePluginVm
 *        Application type Plugin VM. (Value: "APPLICATION_TYPE_PLUGIN_VM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeRemote
 *        Application type remote. (Value: "APPLICATION_TYPE_REMOTE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowser
 *        Application type standalone browser (Lacros browser app). (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp
 *        Application type standalone browser chrome app (hosted in Lacros).
 *        (Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeStandaloneBrowserExtension
 *        Application type standalone browser extension. (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeSystemWeb
 *        Application type system web. (Value: "APPLICATION_TYPE_SYSTEM_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_ApplicationTypeWeb
 *        Application type web. (Value: "APPLICATION_TYPE_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent_AppType_TelemetryApplicationTypeUnspecified
 *        Application type unknown. (Value:
 *        "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appType;

@end


/**
 *  App launch data.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent : GTLRObject

/**
 *  App id. For PWAs this is the start URL, and for extensions this is the
 *  extension id.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  App launch source.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppHomePage
 *        Application launched from app home (chrome://apps) page. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_APP_HOME_PAGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListGrid
 *        Application launched from the grid of apps, not the search box.
 *        (Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_GRID")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListGridContextMenu
 *        Application launched from the grid of apps, off of the context menu.
 *        (Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_GRID_CONTEXT_MENU")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListQuery
 *        Application launched from query-dependent results (larger icons).
 *        (Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_QUERY")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListQueryContextMenu
 *        Application launched from query-dependent results, off of the context
 *        menu. (Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_QUERY_CONTEXT_MENU")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceAppListRecommendation
 *        Application launched from query-less recommendations (smaller icons).
 *        (Value: "APPLICATION_LAUNCH_SOURCE_APP_LIST_RECOMMENDATION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceArc
 *        Application launched from Arc. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_ARC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceBackgroundMode
 *        Application launched from background mode. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_BACKGROUND_MODE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceChromeInternal
 *        Application launched from a Chrome internal call. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_CHROME_INTERNAL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceCommandLine
 *        Application launched from the command line. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_COMMAND_LINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceDiscoverTabNotification
 *        Application launched from a discover tab notification. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_DISCOVER_TAB_NOTIFICATION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFileManager
 *        Application launched from the file manager (Value:
 *        "APPLICATION_LAUNCH_SOURCE_FILE_MANAGER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFirstRun
 *        Count first-run Help app launches separately so that we can understand
 *        the number of user-triggered launches. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_FIRST_RUN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFocusMode
 *        Applicationed launched from focus panel. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_FOCUS_MODE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceFullRestore
 *        Application launched from a full restore. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_FULL_RESTORE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceInstalledNotification
 *        Application launched from the installed notification. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_INSTALLED_NOTIFICATION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceInstaller
 *        Application launched from source installer. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_INSTALLER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceIntentUrl
 *        Application launched from an intent URL. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_INTENT_URL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceKeyboard
 *        Application launched from keyboard shortcut for opening app. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_KEYBOARD")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceKiosk
 *        Application launched from kiosk. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_KIOSK")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceLink
 *        Application launched from left click on a link in the browser. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_LINK")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceLockScreen
 *        Application launched from lock screen app launcher. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_LOCK_SCREEN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceManagementApi
 *        Application launched from the Management API. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_MANAGEMENT_API")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceMenu
 *        Application launched from menu. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_MENU")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceNewTabPage
 *        Application launched from the new tab page. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_NEW_TAB_PAGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOmnibox
 *        Application launched from entering a URL in the Omnibox on the
 *        browser. (Value: "APPLICATION_LAUNCH_SOURCE_OMNIBOX")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOsLogin
 *        Application launched from OS login. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_OS_LOGIN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceOtherApp
 *        Application launched from clicking a link in another app or WebUI.
 *        (Value: "APPLICATION_LAUNCH_SOURCE_OTHER_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceParentalControls
 *        Application launched from the Parental Controls Settings section and
 *        Per App time notification. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_PARENTAL_CONTROLS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceProfileMenu
 *        Application launched from profile menu of installable
 *        chrome://password-manager WebUI. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_PROFILE_MENU")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceProtocolHandler
 *        Application launched from protocol handler. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_PROTOCOL_HANDLER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceReleaseNotesNotification
 *        Application launched from the release notes notification. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_RELEASE_NOTES_NOTIFICATION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceReparenting
 *        Application launched from moving content into an app. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_REPARENTING")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSharesheet
 *        Application launched from Sharesheet. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_SHARESHEET")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceShelf
 *        Application launched from shelf. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_SHELF")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSmartTextContextMenu
 *        Application launched from a smart text selection context menu. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_SMART_TEXT_CONTEXT_MENU")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceSystemTrayCalendar
 *        Application launched from system tray calendar. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_SYSTEM_TRAY_CALENDAR")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceTest
 *        Application launched from a test. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_TEST")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceUnspecified
 *        Application launch source unknown. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceUrlHandler
 *        Application launched from URL handler. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_URL_HANDLER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppLaunchSource_ApplicationLaunchSourceWelcomeTour
 *        Application launched from welcome tour. (Value:
 *        "APPLICATION_LAUNCH_SOURCE_WELCOME_TOUR")
 */
@property(nonatomic, copy, nullable) NSString *appLaunchSource;

/**
 *  Type of app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeArc
 *        Application type arc (Android app). (Value: "APPLICATION_TYPE_ARC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBorealis
 *        Application type borealis. (Value: "APPLICATION_TYPE_BOREALIS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBruschetta
 *        Application type bruschetta. (Value: "APPLICATION_TYPE_BRUSCHETTA")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeBuiltIn
 *        Application type built-in. (Value: "APPLICATION_TYPE_BUILT_IN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeChromeApp
 *        Application type Chrome app. (Value: "APPLICATION_TYPE_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeCrostini
 *        Application type Linux (via Crostini). (Value:
 *        "APPLICATION_TYPE_CROSTINI")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeExtension
 *        Application type extension. (Value: "APPLICATION_TYPE_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeMacOs
 *        Application type Mac OS. (Value: "APPLICATION_TYPE_MAC_OS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypePluginVm
 *        Application type Plugin VM. (Value: "APPLICATION_TYPE_PLUGIN_VM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeRemote
 *        Application type remote. (Value: "APPLICATION_TYPE_REMOTE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowser
 *        Application type standalone browser (Lacros browser app). (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp
 *        Application type standalone browser chrome app (hosted in Lacros).
 *        (Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeStandaloneBrowserExtension
 *        Application type standalone browser extension. (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeSystemWeb
 *        Application type system web. (Value: "APPLICATION_TYPE_SYSTEM_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_ApplicationTypeWeb
 *        Application type web. (Value: "APPLICATION_TYPE_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent_AppType_TelemetryApplicationTypeUnspecified
 *        Application type unknown. (Value:
 *        "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appType;

@end


/**
 *  App uninstall data.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent : GTLRObject

/**
 *  App id. For PWAs this is the start URL, and for extensions this is the
 *  extension id.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  Type of app.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeArc
 *        Application type arc (Android app). (Value: "APPLICATION_TYPE_ARC")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBorealis
 *        Application type borealis. (Value: "APPLICATION_TYPE_BOREALIS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBruschetta
 *        Application type bruschetta. (Value: "APPLICATION_TYPE_BRUSCHETTA")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeBuiltIn
 *        Application type built-in. (Value: "APPLICATION_TYPE_BUILT_IN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeChromeApp
 *        Application type Chrome app. (Value: "APPLICATION_TYPE_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeCrostini
 *        Application type Linux (via Crostini). (Value:
 *        "APPLICATION_TYPE_CROSTINI")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeExtension
 *        Application type extension. (Value: "APPLICATION_TYPE_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeMacOs
 *        Application type Mac OS. (Value: "APPLICATION_TYPE_MAC_OS")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypePluginVm
 *        Application type Plugin VM. (Value: "APPLICATION_TYPE_PLUGIN_VM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeRemote
 *        Application type remote. (Value: "APPLICATION_TYPE_REMOTE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowser
 *        Application type standalone browser (Lacros browser app). (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowserChromeApp
 *        Application type standalone browser chrome app (hosted in Lacros).
 *        (Value: "APPLICATION_TYPE_STANDALONE_BROWSER_CHROME_APP")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeStandaloneBrowserExtension
 *        Application type standalone browser extension. (Value:
 *        "APPLICATION_TYPE_STANDALONE_BROWSER_EXTENSION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeSystemWeb
 *        Application type system web. (Value: "APPLICATION_TYPE_SYSTEM_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_ApplicationTypeWeb
 *        Application type web. (Value: "APPLICATION_TYPE_WEB")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppType_TelemetryApplicationTypeUnspecified
 *        Application type unknown. (Value:
 *        "TELEMETRY_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appType;

/**
 *  App uninstall source.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceAppList
 *        Application uninstalled from the App List (Launcher). (Value:
 *        "APPLICATION_UNINSTALL_SOURCE_APP_LIST")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceAppManagement
 *        Application uninstalled from the App Managedment page. (Value:
 *        "APPLICATION_UNINSTALL_SOURCE_APP_MANAGEMENT")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceMigration
 *        Application uninstalled by app migration. (Value:
 *        "APPLICATION_UNINSTALL_SOURCE_MIGRATION")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceShelf
 *        Application uninstalled from the Shelf. (Value:
 *        "APPLICATION_UNINSTALL_SOURCE_SHELF")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent_AppUninstallSource_ApplicationUninstallSourceUnspecified
 *        Application uninstall source unknown. (Value:
 *        "APPLICATION_UNINSTALL_SOURCE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *appUninstallSource;

@end


/**
 *  `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run
 *  out of buffer data for more than 5 seconds. * Granular permission needed:
 *  TELEMETRY_API_AUDIO_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent : GTLRObject
@end


/**
 *  Telemetry data collected from a managed device. * Granular permission
 *  needed: TELEMETRY_API_DEVICE
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryDevice : GTLRObject

/**
 *  Output only. App reports collected periodically sorted in a decreasing order
 *  of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AppReport *> *appReport;

/**
 *  Output only. Audio reports collected periodically sorted in a decreasing
 *  order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AudioStatusReport *> *audioStatusReport;

/** Output only. Information on battery specs for the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1BatteryInfo *> *batteryInfo;

/** Output only. Battery reports collected periodically. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1BatteryStatusReport *> *batteryStatusReport;

/** Output only. Boot performance reports of the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1BootPerformanceReport *> *bootPerformanceReport;

/** Output only. Information regarding CPU specs for the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1CpuInfo *> *cpuInfo;

/**
 *  Output only. CPU status reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1CpuStatusReport *> *cpuStatusReport;

/**
 *  Output only. Google Workspace Customer whose enterprise enrolled the device.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Output only. The unique Directory API ID of the device. This value is the
 *  same as the Admin Console's Directory API ID in the ChromeOS Devices tab
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Output only. Contains information regarding Graphic peripherals for the
 *  device.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1GraphicsInfo *graphicsInfo;

/** Output only. Graphics reports collected periodically. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1GraphicsStatusReport *> *graphicsStatusReport;

/**
 *  Output only. Heartbeat status report containing timestamps periodically
 *  sorted in decreasing order of report_time
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1HeartbeatStatusReport *> *heartbeatStatusReport;

/** Output only. Kiosk app status report for the kiosk device */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1KioskAppStatusReport *> *kioskAppStatusReport;

/** Output only. Information regarding memory specs for the device. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1MemoryInfo *memoryInfo;

/**
 *  Output only. Memory status reports collected periodically sorted decreasing
 *  by report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1MemoryStatusReport *> *memoryStatusReport;

/** Output only. Resource name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Network bandwidth reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1NetworkBandwidthReport *> *networkBandwidthReport;

/** Output only. Network diagnostics collected periodically. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1NetworkDiagnosticsReport *> *networkDiagnosticsReport;

/** Output only. Network devices information. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1NetworkInfo *networkInfo;

/** Output only. Network specs collected periodically. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1NetworkStatusReport *> *networkStatusReport;

/** Output only. Organization unit ID of the device. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  Output only. Contains relevant information regarding ChromeOS update status.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1OsUpdateStatus *> *osUpdateStatus;

/**
 *  Output only. Peripherals reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1PeripheralsReport *> *peripheralsReport;

/**
 *  Output only. Runtime counters reports collected device lifetime runtime, as
 *  well as the counts of S0->S3, S0->S4, and S0->S5 transitions, meaning
 *  entering into sleep, hibernation, and power-off states
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1RuntimeCountersReport *> *runtimeCountersReport;

/**
 *  Output only. Device serial number. This value is the same as the Admin
 *  Console's Serial Number in the ChromeOS Devices tab.
 */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/** Output only. Information of storage specs for the device. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1StorageInfo *storageInfo;

/** Output only. Storage reports collected periodically. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1StorageStatusReport *> *storageStatusReport;

/** Output only. Information on Thunderbolt bus. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo *> *thunderboltInfo;

@end


/**
 *  Information about a device associated with telemetry data. * Granular
 *  Permission needed: TELEMETRY_API_DEVICE
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryDeviceInfo : GTLRObject

/**
 *  Output only. The unique Directory API ID of the device. This value is the
 *  same as the Admin Console's Directory API ID in the ChromeOS Devices tab.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** Output only. Organization unit ID of the device. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Telemetry data reported by a managed device.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent : GTLRObject

/**
 *  Output only. Payload for app install event. Present only when `event_type`
 *  is `APP_INSTALLED`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppInstallEvent *appInstallEvent;

/**
 *  Output only. Payload for app launch event.Present only when `event_type` is
 *  `APP_LAUNCHED`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppLaunchEvent *appLaunchEvent;

/**
 *  Output only. Payload for app uninstall event. Present only when `event_type`
 *  is `APP_UNINSTALLED`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryAppUninstallEvent *appUninstallEvent;

/**
 *  Output only. Payload for audio severe underrun event. Present only when the
 *  `event_type` field is `AUDIO_SEVERE_UNDERRUN`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent *audioSevereUnderrunEvent;

/** Output only. Information about the device associated with the event. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryDeviceInfo *device;

/**
 *  The event type of the current event.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppInstalled
 *        Triggered when an app is installed. (Value: "APP_INSTALLED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppLaunched
 *        Triggered when an app is launched. (Value: "APP_LAUNCHED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AppUninstalled
 *        Triggered when an app is uninstalled. (Value: "APP_UNINSTALLED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_AudioSevereUnderrun
 *        Triggered when a audio devices run out of buffer data for more than 5
 *        seconds. (Value: "AUDIO_SEVERE_UNDERRUN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_EventTypeUnspecified
 *        Event type unknown. (Value: "EVENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_NetworkHttpsLatencyChange
 *        Triggered when a new HTTPS latency problem was detected or the device
 *        has recovered form an existing HTTPS latency problem. (Value:
 *        "NETWORK_HTTPS_LATENCY_CHANGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_NetworkStateChange
 *        Triggered immediately on any changes to a network connection. (Value:
 *        "NETWORK_STATE_CHANGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_UsbAdded
 *        Triggered when USB devices are added. (Value: "USB_ADDED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_UsbRemoved
 *        Triggered when USB devices are removed. (Value: "USB_REMOVED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_VpnConnectionStateChange
 *        Triggered on changes to VPN connections. (Value:
 *        "VPN_CONNECTION_STATE_CHANGE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_WifiSignalStrengthLow
 *        Triggered when connected WiFi network signal strength drops below
 *        -70dBm. (Value: "WIFI_SIGNAL_STRENGTH_LOW")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryEvent_EventType_WifiSignalStrengthRecovered
 *        Triggered when connected WiFi network signal strength is recovered
 *        from a signal drop. (Value: "WIFI_SIGNAL_STRENGTH_RECOVERED")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Output only. Payload for HTTPS latency change event. Present only when
 *  `event_type` is `NETWORK_HTTPS_LATENCY_CHANGE`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent *httpsLatencyChangeEvent;

/** Output only. Resource name of the event. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Payload for network connection state change event. Present only
 *  when `event_type` is `NETWORK_STATE_CHANGE`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent *networkStateChangeEvent;

/** Timestamp that represents when the event was reported. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  Output only. Payload for usb peripherals event. Present only when the
 *  `event_type` field is either `USB_ADDED` or `USB_REMOVED`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryUsbPeripheralsEvent *usbPeripheralsEvent;

/** Output only. Information about the user associated with the event. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserInfo *user;

/**
 *  Output only. Payload for VPN connection state change event. Present only
 *  when `event_type` is `VPN_CONNECTION_STATE_CHANGE`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent *vpnConnectionStateChangeEvent;

/**
 *  Output only. Payload for WiFi signal strength events. Present only when
 *  `event_type` is `WIFI_SIGNAL_STRENGTH_LOW` or
 *  `WIFI_SIGNAL_STRENGTH_RECOVERED`.
 */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent *wifiSignalStrengthEvent;

@end


/**
 *  Configures how the telemetry events should be filtered.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter : GTLRObject

/**
 *  Only sends the notifications for events of these types. Must not be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *eventTypes;

@end


/**
 *  Https latency routine is run periodically and
 *  `TelemetryHttpsLatencyChangeEvent` is triggered if a latency problem was
 *  detected or if the device has recovered from a latency problem. * Granular
 *  permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent : GTLRObject

/** HTTPS latency routine data that triggered the event. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1HttpsLatencyRoutineData *httpsLatencyRoutineData;

/**
 *  Current HTTPS latency state.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_HttpsLatencyStateUnspecified
 *        HTTPS latency state is unspecified. (Value:
 *        "HTTPS_LATENCY_STATE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_Problem
 *        HTTPS latency problem. (Value: "PROBLEM")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent_HttpsLatencyState_Recovery
 *        HTTPS latency recovered from a problem. (Value: "RECOVERY")
 */
@property(nonatomic, copy, nullable) NSString *httpsLatencyState;

@end


/**
 *  `TelemetryNetworkConnectionStateChangeEvent` is triggered on network
 *  connection state changes. * Granular permission needed:
 *  TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent : GTLRObject

/**
 *  Current connection state of the network.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Connected
 *        The network is connected and not in a detected portal state, but
 *        internet connectivity may not be available. (Value: "CONNECTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Connecting
 *        The network is in the process of connecting. (Value: "CONNECTING")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_NetworkConnectionStateUnspecified
 *        Network connection state unspecified. (Value:
 *        "NETWORK_CONNECTION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_NotConnected
 *        The network is not connected. (Value: "NOT_CONNECTED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Online
 *        The network is connected and internet connectivity is available.
 *        (Value: "ONLINE")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent_ConnectionState_Portal
 *        The network is connected but a portal state was detected. Internet
 *        connectivity may be limited. (Value: "PORTAL")
 */
@property(nonatomic, copy, nullable) NSString *connectionState;

/** Unique identifier of the network. */
@property(nonatomic, copy, nullable) NSString *guid;

@end


/**
 *  `TelemetryNetworkSignalStrengthEvent` is triggered on WiFi signal strength
 *  events. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent : GTLRObject

/** Unique identifier of the network. */
@property(nonatomic, copy, nullable) NSString *guid;

/**
 *  Signal strength RSSI value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *signalStrengthDbm;

@end


/**
 *  Configuration to receive notifications of telemetry data.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationConfig : GTLRObject

/** Output only. Google Workspace customer that owns the resource. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Only send notifications for telemetry data matching this filter. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationFilter *filter;

/** The pubsub topic to which notifications are published to. */
@property(nonatomic, copy, nullable) NSString *googleCloudPubsubTopic;

/** Output only. Resource name of the notification configuration. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Configures how the telemetry data should be filtered.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryNotificationFilter : GTLRObject

/**
 *  If set, only sends notifications for telemetry data coming from this device.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  If set, only sends notifications for telemetry data coming from devices in
 *  this org unit.
 */
@property(nonatomic, copy, nullable) NSString *deviceOrgUnitId;

/** Only sends notifications for the telemetry events matching this filter. */
@property(nonatomic, strong, nullable) GTLRChromeManagement_GoogleChromeManagementV1TelemetryEventNotificationFilter *telemetryEventNotificationFilter;

/**
 *  If set, only sends notifications for telemetry data coming from devices
 *  owned by this user.
 */
@property(nonatomic, copy, nullable) NSString *userEmail;

/**
 *  If set, only sends notifications for telemetry data coming from devices
 *  owned by users in this org unit.
 */
@property(nonatomic, copy, nullable) NSString *userOrgUnitId;

@end


/**
 *  `TelemetryUsbPeripheralsEvent` is triggered USB devices are either added or
 *  removed. * Granular permission needed: TELEMETRY_API_PERIPHERALS_REPORT
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryUsbPeripheralsEvent : GTLRObject

/** List of usb devices that were either added or removed. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1UsbPeripheralReport *> *usbPeripheralReport;

@end


/**
 *  Telemetry data collected from a managed user. * Granular permission needed:
 *  TELEMETRY_API_USER
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryUser : GTLRObject

/** G Suite Customer whose enterprise enrolled the device. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Resource name of the user. */
@property(nonatomic, copy, nullable) NSString *name;

/** Organization unit of the user. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Telemetry data collected from a managed user and device. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserDevice *> *userDevice;

/** Email address of the user. */
@property(nonatomic, copy, nullable) NSString *userEmail;

/** Directory ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  Telemetry data collected for a managed user and device. * Granular
 *  permission needed: TELEMETRY_API_DEVICE
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserDevice : GTLRObject

/**
 *  Output only. App reports collected periodically sorted in a decreasing order
 *  of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AppReport *> *appReport;

/**
 *  Output only. Audio reports collected periodically sorted in a decreasing
 *  order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1AudioStatusReport *> *audioStatusReport;

/**
 *  Output only. Device activity reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1DeviceActivityReport *> *deviceActivityReport;

/**
 *  The unique Directory API ID of the device. This value is the same as the
 *  Admin Console's Directory API ID in the ChromeOS Devices tab.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Output only. Network bandwidth reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1NetworkBandwidthReport *> *networkBandwidthReport;

/**
 *  Output only. Peripherals reports collected periodically sorted in a
 *  decreasing order of report_time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1PeripheralsReport *> *peripheralsReport;

@end


/**
 *  Information about a user associated with telemetry data. * Granular
 *  permission needed: TELEMETRY_API_USER
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TelemetryUserInfo : GTLRObject

/** Output only. User's email. */
@property(nonatomic, copy, nullable) NSString *email;

/** Output only. Organization unit ID of the user. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Thunderbolt bus info. * This field provides device information, which is
 *  static and will not change over time. * Data for this field is controlled
 *  via policy:
 *  [ReportDeviceSecurityStatus](https://chromeenterprise.google/policies/#ReportDeviceSecurityStatus)
 *  * Data Collection Frequency: At device startup * Default Data Reporting
 *  Frequency: At device startup - Policy Controlled: No * Cache: If the device
 *  is offline, the collected data is stored locally, and will be reported when
 *  the device is next online: Yes * Reported for affiliated users only: N/A *
 *  Granular permission needed: TELEMETRY_API_BUS_DEVICE_INFO
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo : GTLRObject

/**
 *  Security level of the Thunderbolt bus.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityDpOnlyLevel
 *        The firmware automatically creates tunnels for Thunderbolt. (Value:
 *        "THUNDERBOLT_SECURITY_DP_ONLY_LEVEL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityLevelUnspecified
 *        Thunderbolt security level is not set. (Value:
 *        "THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityNoneLevel
 *        All devices are automatically connected by the firmware. No user
 *        approval is needed. (Value: "THUNDERBOLT_SECURITY_NONE_LEVEL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityNoPcieLevel
 *        PCIE tunneling is disabled. (Value:
 *        "THUNDERBOLT_SECURITY_NO_PCIE_LEVEL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecuritySecureLevel
 *        User is asked whether the device is allowed to be connected. In
 *        addition the device is sent a challenge that should match the expected
 *        one based on a random key written to the key sysfs attribute (Value:
 *        "THUNDERBOLT_SECURITY_SECURE_LEVEL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityUsbOnlyLevel
 *        The firmware automatically creates tunnels for the USB controller and
 *        Display Port in a dock. All PCIe links downstream of the dock are
 *        removed. (Value: "THUNDERBOLT_SECURITY_USB_ONLY_LEVEL")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1ThunderboltInfo_SecurityLevel_ThunderboltSecurityUserLevel
 *        User is asked whether the device is allowed to be connected. (Value:
 *        "THUNDERBOLT_SECURITY_USER_LEVEL")
 */
@property(nonatomic, copy, nullable) NSString *securityLevel;

@end


/**
 *  Memory encryption information of a device. * This field provides device
 *  information, which is static and will not change over time. * Data for this
 *  field is controlled via policy:
 *  [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo)
 *  * Data Collection Frequency: At device startup * Default Data Reporting
 *  Frequency: At device startup - Policy Controlled: Yes * Cache: If the device
 *  is offline, the collected data is stored locally, and will be reported when
 *  the device is next online: Yes * Reported for affiliated users only: N/A
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo : GTLRObject

/**
 *  Memory encryption algorithm.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmAesXts128
 *        The memory encryption algorithm is using the AES_XTS encryption
 *        algorithm with a 128 bit block cypher. (Value:
 *        "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmAesXts256
 *        The memory encryption algorithm is using the AES_XTS encryption
 *        algorithm with a 256 bit block cypher. (Value:
 *        "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmUnknown
 *        The memory encryption algorithm being used is unknown. (Value:
 *        "MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionAlgorithm_MemoryEncryptionAlgorithmUnspecified
 *        Memory encryption algorithm is not set. (Value:
 *        "MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *encryptionAlgorithm;

/**
 *  The state of memory encryption on the device.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateDisabled
 *        Memory encrpytion on the device is disabled. (Value:
 *        "MEMORY_ENCRYPTION_STATE_DISABLED")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateMktme
 *        Memory encryption on the device uses multi-key total memory
 *        encryption. (Value: "MEMORY_ENCRYPTION_STATE_MKTME")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateTme
 *        Memory encryption on the device uses total memory encryption. (Value:
 *        "MEMORY_ENCRYPTION_STATE_TME")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateUnknown
 *        The memory encryption state is unknown. (Value:
 *        "MEMORY_ENCRYPTION_STATE_UNKNOWN")
 *    @arg @c kGTLRChromeManagement_GoogleChromeManagementV1TotalMemoryEncryptionInfo_EncryptionState_MemoryEncryptionStateUnspecified
 *        Memory encryption state is not set. (Value:
 *        "MEMORY_ENCRYPTION_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *encryptionState;

/**
 *  The length of the encryption keys.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyLength;

/**
 *  The maximum number of keys that can be used for encryption.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxKeys;

@end


/**
 *  Information of an internal touch screen device.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TouchScreenDevice : GTLRObject

/** Output only. Touch screen device display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Touch screen device is stylus capable or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stylusCapable;

/**
 *  Output only. Number of touch points supported on the device.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *touchPointCount;

@end


/**
 *  Information on the device touch screen.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1TouchScreenInfo : GTLRObject

/** Output only. List of the internal touch screen devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleChromeManagementV1TouchScreenDevice *> *devices;

/** Output only. Touchpad library name used by the input stack. */
@property(nonatomic, copy, nullable) NSString *touchpadLibrary;

@end


/**
 *  USB connected peripheral report.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1UsbPeripheralReport : GTLRObject

/**
 *  Output only. Categories the device belongs to
 *  https://www.usb.org/defined-class-codes
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/**
 *  Output only. Class ID https://www.usb.org/defined-class-codes
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classId;

/** Output only. Firmware version */
@property(nonatomic, copy, nullable) NSString *firmwareVersion;

/** Output only. Device name, model name, or product name */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Product ID
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pid;

/**
 *  Output only. Subclass ID https://www.usb.org/defined-class-codes
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *subclassId;

/** Output only. Vendor name */
@property(nonatomic, copy, nullable) NSString *vendor;

/**
 *  Output only. Vendor ID
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vid;

@end


/**
 *  Report for CountPrintJobsByUser, contains printing statistics for a user.
 *  Contains the number of printers, the number of devices used to initiate
 *  print jobs, and the number of print jobs initiated.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1UserPrintReport : GTLRObject

/**
 *  Number of chrome devices that have been used to initiate print jobs by the
 *  user.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceCount;

/**
 *  Number of print jobs initiated by the user.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobCount;

/**
 *  Number of printers used by the user.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *printerCount;

/** The primary e-mail address of the user. */
@property(nonatomic, copy, nullable) NSString *userEmail;

/** The unique Directory API ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  Details of a user requesting an extension, including the email and the
 *  justification.
 */
@interface GTLRChromeManagement_GoogleChromeManagementV1UserRequestingExtensionDetails : GTLRObject

/** The e-mail address of a user that has requested the extension. */
@property(nonatomic, copy, nullable) NSString *email;

/** Request justification as entered by the user. */
@property(nonatomic, copy, nullable) NSString *justification;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRChromeManagement_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRChromeManagement_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeManagement_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRChromeManagement_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRChromeManagement_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRChromeManagement_GoogleTypeDate : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
