// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud IoT API (cloudiot/v1)
// Description:
//   Registers and manages IoT (Internet of Things) devices that connect to the
//   Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/iot

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudIot_Binding;
@class GTLRCloudIot_Device;
@class GTLRCloudIot_Device_Metadata;
@class GTLRCloudIot_DeviceConfig;
@class GTLRCloudIot_DeviceCredential;
@class GTLRCloudIot_DeviceRegistry;
@class GTLRCloudIot_DeviceState;
@class GTLRCloudIot_EventNotificationConfig;
@class GTLRCloudIot_Expr;
@class GTLRCloudIot_GatewayConfig;
@class GTLRCloudIot_GetPolicyOptions;
@class GTLRCloudIot_HttpConfig;
@class GTLRCloudIot_MqttConfig;
@class GTLRCloudIot_Policy;
@class GTLRCloudIot_PublicKeyCertificate;
@class GTLRCloudIot_PublicKeyCredential;
@class GTLRCloudIot_RegistryCredential;
@class GTLRCloudIot_StateNotificationConfig;
@class GTLRCloudIot_Status;
@class GTLRCloudIot_Status_Details_Item;
@class GTLRCloudIot_X509CertificateDetails;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudIot_Device.logLevel

/**
 *  All events will be logged.
 *
 *  Value: "DEBUG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_Device_LogLevel_Debug;
/**
 *  Error events will be logged.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_Device_LogLevel_Error;
/**
 *  Informational events will be logged, such as connections and disconnections.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_Device_LogLevel_Info;
/**
 *  No logging specified. If not specified, logging will be disabled.
 *
 *  Value: "LOG_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_Device_LogLevel_LogLevelUnspecified;
/**
 *  Disables logging.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_Device_LogLevel_None;

// ----------------------------------------------------------------------------
// GTLRCloudIot_DeviceRegistry.logLevel

/**
 *  All events will be logged.
 *
 *  Value: "DEBUG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_DeviceRegistry_LogLevel_Debug;
/**
 *  Error events will be logged.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_DeviceRegistry_LogLevel_Error;
/**
 *  Informational events will be logged, such as connections and disconnections.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_DeviceRegistry_LogLevel_Info;
/**
 *  No logging specified. If not specified, logging will be disabled.
 *
 *  Value: "LOG_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_DeviceRegistry_LogLevel_LogLevelUnspecified;
/**
 *  Disables logging.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_DeviceRegistry_LogLevel_None;

// ----------------------------------------------------------------------------
// GTLRCloudIot_GatewayConfig.gatewayAuthMethod

/**
 *  The device is authenticated through both device credentials and gateway
 *  association. The device must be bound to the gateway and must provide its
 *  own credentials.
 *
 *  Value: "ASSOCIATION_AND_DEVICE_AUTH_TOKEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_AssociationAndDeviceAuthToken;
/**
 *  The device is authenticated through the gateway association only. Device
 *  credentials are ignored even if provided.
 *
 *  Value: "ASSOCIATION_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_AssociationOnly;
/**
 *  The device is authenticated through its own credentials. Gateway association
 *  is not checked.
 *
 *  Value: "DEVICE_AUTH_TOKEN_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_DeviceAuthTokenOnly;
/**
 *  No authentication/authorization method specified. No devices are allowed to
 *  access the gateway.
 *
 *  Value: "GATEWAY_AUTH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_GatewayAuthMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudIot_GatewayConfig.gatewayType

/**
 *  The device is a gateway.
 *
 *  Value: "GATEWAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayType_Gateway;
/**
 *  If unspecified, the device is considered a non-gateway device.
 *
 *  Value: "GATEWAY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayType_GatewayTypeUnspecified;
/**
 *  The device is not a gateway.
 *
 *  Value: "NON_GATEWAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_GatewayConfig_GatewayType_NonGateway;

// ----------------------------------------------------------------------------
// GTLRCloudIot_HttpConfig.httpEnabledState

/**
 *  Disables DeviceService (HTTP) service for the registry.
 *
 *  Value: "HTTP_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpDisabled;
/**
 *  Enables DeviceService (HTTP) service for the registry.
 *
 *  Value: "HTTP_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpEnabled;
/**
 *  No HTTP state specified. If not specified, DeviceService will be enabled by
 *  default.
 *
 *  Value: "HTTP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudIot_MqttConfig.mqttEnabledState

/**
 *  Disables a MQTT connection.
 *
 *  Value: "MQTT_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttDisabled;
/**
 *  Enables a MQTT connection.
 *
 *  Value: "MQTT_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttEnabled;
/**
 *  No MQTT state specified. If not specified, MQTT will be enabled by default.
 *
 *  Value: "MQTT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudIot_PublicKeyCertificate.format

/**
 *  The format has not been specified. This is an invalid default value and must
 *  not be used.
 *
 *  Value: "UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCertificate_Format_UnspecifiedPublicKeyCertificateFormat;
/**
 *  An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)),
 *  encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and
 *  `-----END CERTIFICATE-----`.
 *
 *  Value: "X509_CERTIFICATE_PEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCertificate_Format_X509CertificatePem;

// ----------------------------------------------------------------------------
// GTLRCloudIot_PublicKeyCredential.format

/**
 *  Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in
 *  base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC
 *  KEY-----`. This can be used to verify JWT tokens with the `ES256` algorithm
 *  ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is defined in
 *  [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.
 *
 *  Value: "ES256_PEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCredential_Format_Es256Pem;
/**
 *  As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
 *  https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
 *  `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
 *
 *  Value: "ES256_X509_PEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCredential_Format_Es256X509Pem;
/**
 *  An RSA public key encoded in base64, and wrapped by `-----BEGIN PUBLIC
 *  KEY-----` and `-----END PUBLIC KEY-----`. This can be used to verify `RS256`
 *  signatures in JWT tokens ([RFC7518]( https://www.ietf.org/rfc/rfc7518.txt)).
 *
 *  Value: "RSA_PEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCredential_Format_RsaPem;
/**
 *  As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
 *  https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
 *  `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
 *
 *  Value: "RSA_X509_PEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCredential_Format_RsaX509Pem;
/**
 *  The format has not been specified. This is an invalid default value and must
 *  not be used.
 *
 *  Value: "UNSPECIFIED_PUBLIC_KEY_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudIot_PublicKeyCredential_Format_UnspecifiedPublicKeyFormat;

/**
 *  Request for `BindDeviceToGateway`.
 */
@interface GTLRCloudIot_BindDeviceToGatewayRequest : GTLRObject

/**
 *  Required. The device to associate with the specified gateway. The value of
 *  `device_id` can be either the device numeric ID or the user-defined device
 *  identifier.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Required. The value of `gateway_id` can be either the device numeric ID or
 *  the user-defined device identifier.
 */
@property(nonatomic, copy, nullable) NSString *gatewayId;

@end


/**
 *  Response for `BindDeviceToGateway`.
 */
@interface GTLRCloudIot_BindDeviceToGatewayResponse : GTLRObject
@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudIot_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The device resource.
 */
@interface GTLRCloudIot_Device : GTLRObject

/**
 *  If a device is blocked, connections or requests from this device will fail.
 *  Can be used to temporarily prevent the device from connecting if, for
 *  example, the sensor is generating bad data and needs maintenance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blocked;

/**
 *  The most recent device configuration, which is eventually sent from Cloud
 *  IoT Core to the device. If not present on creation, the configuration will
 *  be initialized with an empty payload and version value of `1`. To update
 *  this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig`
 *  method.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_DeviceConfig *config;

/**
 *  The credentials used to authenticate this device. To allow credential
 *  rotation without interruption, multiple device credentials can be bound to
 *  this device. No more than 3 credentials can be bound to a single device at a
 *  time. When new credentials are added to a device, they are verified against
 *  the registry credentials. For details, see the description of the
 *  `DeviceRegistry.credentials` field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_DeviceCredential *> *credentials;

/** Gateway-related configuration and state. */
@property(nonatomic, strong, nullable) GTLRCloudIot_GatewayConfig *gatewayConfig;

/**
 *  The user-defined device identifier. The device ID must be unique within a
 *  device registry.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  [Output only] The last time a cloud-to-device config version acknowledgment
 *  was received from the device. This field is only for configurations sent
 *  through MQTT.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastConfigAckTime;

/**
 *  [Output only] The last time a cloud-to-device config version was sent to the
 *  device.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastConfigSendTime;

/**
 *  [Output only] The error message of the most recent error, such as a failure
 *  to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this
 *  field. If no errors have occurred, this field has an empty message and the
 *  status code 0 == OK. Otherwise, this field is expected to have a status code
 *  other than OK.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_Status *lastErrorStatus;

/**
 *  [Output only] The time the most recent error occurred, such as a failure to
 *  publish to Cloud Pub/Sub. This field is the timestamp of
 *  'last_error_status'.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastErrorTime;

/**
 *  [Output only] The last time a telemetry event was received. Timestamps are
 *  periodically collected and written to storage; they may be stale by a few
 *  minutes.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastEventTime;

/**
 *  [Output only] The last time an MQTT `PINGREQ` was received. This field
 *  applies only to devices connecting through MQTT. MQTT clients usually only
 *  send `PINGREQ` messages if the connection is idle, and no other messages
 *  have been sent. Timestamps are periodically collected and written to
 *  storage; they may be stale by a few minutes.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastHeartbeatTime;

/**
 *  [Output only] The last time a state event was received. Timestamps are
 *  periodically collected and written to storage; they may be stale by a few
 *  minutes.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastStateTime;

/**
 *  **Beta Feature** The logging verbosity for device activity. If unspecified,
 *  DeviceRegistry.log_level will be used.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_Device_LogLevel_Debug All events will be logged.
 *        (Value: "DEBUG")
 *    @arg @c kGTLRCloudIot_Device_LogLevel_Error Error events will be logged.
 *        (Value: "ERROR")
 *    @arg @c kGTLRCloudIot_Device_LogLevel_Info Informational events will be
 *        logged, such as connections and disconnections. (Value: "INFO")
 *    @arg @c kGTLRCloudIot_Device_LogLevel_LogLevelUnspecified No logging
 *        specified. If not specified, logging will be disabled. (Value:
 *        "LOG_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudIot_Device_LogLevel_None Disables logging. (Value:
 *        "NONE")
 */
@property(nonatomic, copy, nullable) NSString *logLevel;

/**
 *  The metadata key-value pairs assigned to the device. This metadata is not
 *  interpreted or indexed by Cloud IoT Core. It can be used to add contextual
 *  information for the device. Keys must conform to the regular expression
 *  a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings.
 *  Each value must be less than or equal to 32 KB in size. The total size of
 *  all keys and values must be less than 256 KB, and the maximum number of
 *  key-value pairs is 500.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_Device_Metadata *metadata;

/**
 *  The resource path name. For example,
 *  `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or
 *  `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.
 *  When `name` is populated as a response from the service, it always ends in
 *  the device numeric ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output only] A server-defined unique numeric ID for the device. This is a
 *  more compact way to identify devices, and it is globally unique.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numId;

/**
 *  [Output only] The state most recently received from the device. If no state
 *  has been reported, this field is not present.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_DeviceState *state;

@end


/**
 *  The metadata key-value pairs assigned to the device. This metadata is not
 *  interpreted or indexed by Cloud IoT Core. It can be used to add contextual
 *  information for the device. Keys must conform to the regular expression
 *  a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings.
 *  Each value must be less than or equal to 32 KB in size. The total size of
 *  all keys and values must be less than 256 KB, and the maximum number of
 *  key-value pairs is 500.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudIot_Device_Metadata : GTLRObject
@end


/**
 *  The device configuration. Eventually delivered to devices.
 */
@interface GTLRCloudIot_DeviceConfig : GTLRObject

/**
 *  The device configuration data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *binaryData;

/**
 *  [Output only] The time at which this configuration version was updated in
 *  Cloud IoT Core. This timestamp is set by the server.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *cloudUpdateTime;

/**
 *  [Output only] The time at which Cloud IoT Core received the acknowledgment
 *  from the device, indicating that the device has received this configuration
 *  version. If this field is not present, the device has not yet acknowledged
 *  that it received this version. Note that when the config was sent to the
 *  device, many config versions may have been available in Cloud IoT Core while
 *  the device was disconnected, and on connection, only the latest version is
 *  sent to the device. Some versions may never be sent to the device, and
 *  therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deviceAckTime;

/**
 *  [Output only] The version of this update. The version number is assigned by
 *  the server, and is always greater than 0 after device creation. The version
 *  must be 0 on the `CreateDevice` request if a `config` is specified; the
 *  response of `CreateDevice` will always have a value of 1.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A server-stored device credential used for authentication.
 */
@interface GTLRCloudIot_DeviceCredential : GTLRObject

/**
 *  [Optional] The time at which this credential becomes invalid. This
 *  credential will be ignored for new client authentication requests after this
 *  timestamp; however, it will not be automatically deleted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  A public key used to verify the signature of JSON Web Tokens (JWTs). When
 *  adding a new device credential, either via device creation or via
 *  modifications, this public key credential may be required to be signed by
 *  one of the registry level certificates. More specifically, if the registry
 *  contains at least one certificate, any new device credential must be signed
 *  by one of the registry certificates. As a result, when the registry contains
 *  certificates, only X.509 certificates are accepted as device credentials.
 *  However, if the registry does not contain a certificate, self-signed
 *  certificates and public keys will be accepted. New device credentials must
 *  be different from every registry-level certificate.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_PublicKeyCredential *publicKey;

@end


/**
 *  A container for a group of devices.
 */
@interface GTLRCloudIot_DeviceRegistry : GTLRObject

/**
 *  The credentials used to verify the device credentials. No more than 10
 *  credentials can be bound to a single registry at a time. The verification
 *  process occurs at the time of device creation or update. If this field is
 *  empty, no verification is performed. Otherwise, the credentials of a newly
 *  created device or added credentials of an updated device should be signed
 *  with one of these registry credentials. Note, however, that existing devices
 *  will never be affected by modifications to this list of credentials: after a
 *  device has been successfully created in a registry, it should be able to
 *  connect even if its registry credentials are revoked, deleted, or modified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_RegistryCredential *> *credentials;

/**
 *  The configuration for notification of telemetry events received from the
 *  device. All telemetry events that were successfully published by the device
 *  and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud
 *  Pub/Sub. If multiple configurations match a message, only the first matching
 *  configuration is used. If you try to publish a device telemetry event using
 *  MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the
 *  connection closes automatically. If you try to do so using an HTTP
 *  connection, an error is returned. Up to 10 configurations may be provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_EventNotificationConfig *> *eventNotificationConfigs;

/** The DeviceService (HTTP) configuration for this device registry. */
@property(nonatomic, strong, nullable) GTLRCloudIot_HttpConfig *httpConfig;

/**
 *  The identifier of this device registry. For example, `myRegistry`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  **Beta Feature** The default logging verbosity for activity from devices in
 *  this registry. The verbosity level can be overridden by Device.log_level.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_DeviceRegistry_LogLevel_Debug All events will be
 *        logged. (Value: "DEBUG")
 *    @arg @c kGTLRCloudIot_DeviceRegistry_LogLevel_Error Error events will be
 *        logged. (Value: "ERROR")
 *    @arg @c kGTLRCloudIot_DeviceRegistry_LogLevel_Info Informational events
 *        will be logged, such as connections and disconnections. (Value:
 *        "INFO")
 *    @arg @c kGTLRCloudIot_DeviceRegistry_LogLevel_LogLevelUnspecified No
 *        logging specified. If not specified, logging will be disabled. (Value:
 *        "LOG_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudIot_DeviceRegistry_LogLevel_None Disables logging.
 *        (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *logLevel;

/** The MQTT configuration for this device registry. */
@property(nonatomic, strong, nullable) GTLRCloudIot_MqttConfig *mqttConfig;

/**
 *  The resource path name. For example,
 *  `projects/example-project/locations/us-central1/registries/my-registry`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The configuration for notification of new states received from the device.
 *  State updates are guaranteed to be stored in the state history, but
 *  notifications to Cloud Pub/Sub are not guaranteed. For example, if
 *  permissions are misconfigured or the specified topic doesn't exist, no
 *  notification will be published but the state will still be stored in Cloud
 *  IoT Core.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_StateNotificationConfig *stateNotificationConfig;

@end


/**
 *  The device state, as reported by the device.
 */
@interface GTLRCloudIot_DeviceState : GTLRObject

/**
 *  The device state data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *binaryData;

/**
 *  [Output only] The time at which this state version was updated in Cloud IoT
 *  Core.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudIot_Empty : GTLRObject
@end


/**
 *  The configuration for forwarding telemetry events.
 */
@interface GTLRCloudIot_EventNotificationConfig : GTLRObject

/**
 *  A Cloud Pub/Sub topic name. For example,
 *  `projects/myProject/topics/deviceEvents`.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopicName;

/**
 *  If the subfolder name matches this string exactly, this configuration will
 *  be used. The string must not include the leading '/' character. If empty,
 *  all strings are matched. This field is used only for telemetry events;
 *  subfolders are not supported for state changes.
 */
@property(nonatomic, copy, nullable) NSString *subfolderMatches;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudIot_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Gateway-related configuration and state.
 */
@interface GTLRCloudIot_GatewayConfig : GTLRObject

/**
 *  Indicates how to authorize and/or authenticate devices to access the
 *  gateway.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_AssociationAndDeviceAuthToken
 *        The device is authenticated through both device credentials and
 *        gateway association. The device must be bound to the gateway and must
 *        provide its own credentials. (Value:
 *        "ASSOCIATION_AND_DEVICE_AUTH_TOKEN")
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_AssociationOnly The
 *        device is authenticated through the gateway association only. Device
 *        credentials are ignored even if provided. (Value: "ASSOCIATION_ONLY")
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_DeviceAuthTokenOnly
 *        The device is authenticated through its own credentials. Gateway
 *        association is not checked. (Value: "DEVICE_AUTH_TOKEN_ONLY")
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayAuthMethod_GatewayAuthMethodUnspecified
 *        No authentication/authorization method specified. No devices are
 *        allowed to access the gateway. (Value:
 *        "GATEWAY_AUTH_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *gatewayAuthMethod;

/**
 *  Indicates whether the device is a gateway.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayType_Gateway The device is a
 *        gateway. (Value: "GATEWAY")
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayType_GatewayTypeUnspecified If
 *        unspecified, the device is considered a non-gateway device. (Value:
 *        "GATEWAY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudIot_GatewayConfig_GatewayType_NonGateway The device is
 *        not a gateway. (Value: "NON_GATEWAY")
 */
@property(nonatomic, copy, nullable) NSString *gatewayType;

/** [Output only] The ID of the gateway the device accessed most recently. */
@property(nonatomic, copy, nullable) NSString *lastAccessedGatewayId;

/**
 *  [Output only] The most recent time at which the device accessed the gateway
 *  specified in `last_accessed_gateway`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastAccessedGatewayTime;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRCloudIot_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRCloudIot_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  The configuration of the HTTP bridge for a device registry.
 */
@interface GTLRCloudIot_HttpConfig : GTLRObject

/**
 *  If enabled, allows devices to use DeviceService via the HTTP protocol.
 *  Otherwise, any requests to DeviceService will fail for this registry.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpDisabled Disables
 *        DeviceService (HTTP) service for the registry. (Value:
 *        "HTTP_DISABLED")
 *    @arg @c kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpEnabled Enables
 *        DeviceService (HTTP) service for the registry. (Value: "HTTP_ENABLED")
 *    @arg @c kGTLRCloudIot_HttpConfig_HttpEnabledState_HttpStateUnspecified No
 *        HTTP state specified. If not specified, DeviceService will be enabled
 *        by default. (Value: "HTTP_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *httpEnabledState;

@end


/**
 *  Response for `ListDeviceConfigVersions`.
 */
@interface GTLRCloudIot_ListDeviceConfigVersionsResponse : GTLRObject

/**
 *  The device configuration for the last few versions. Versions are listed in
 *  decreasing order, starting from the most recent one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_DeviceConfig *> *deviceConfigs;

@end


/**
 *  Response for `ListDeviceRegistries`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deviceRegistries" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRCloudIot_ListDeviceRegistriesResponse : GTLRCollectionObject

/**
 *  The registries that matched the query.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_DeviceRegistry *> *deviceRegistries;

/**
 *  If not empty, indicates that there may be more registries that match the
 *  request; this value should be passed in a new `ListDeviceRegistriesRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for `ListDevices`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "devices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudIot_ListDevicesResponse : GTLRCollectionObject

/**
 *  The devices that match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_Device *> *devices;

/**
 *  If not empty, indicates that there may be more devices that match the
 *  request; this value should be passed in a new `ListDevicesRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for `ListDeviceStates`.
 */
@interface GTLRCloudIot_ListDeviceStatesResponse : GTLRObject

/**
 *  The last few device states. States are listed in descending order of server
 *  update time, starting from the most recent one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_DeviceState *> *deviceStates;

@end


/**
 *  Request for `ModifyCloudToDeviceConfig`.
 */
@interface GTLRCloudIot_ModifyCloudToDeviceConfigRequest : GTLRObject

/**
 *  Required. The configuration data for the device.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *binaryData;

/**
 *  The version number to update. If this value is zero, it will not check the
 *  version number of the server and will always update the current version;
 *  otherwise, this update will fail if the version number found on the server
 *  does not match this version number. This is used to support multiple
 *  simultaneous updates without losing data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionToUpdate;

@end


/**
 *  The configuration of MQTT for a device registry.
 */
@interface GTLRCloudIot_MqttConfig : GTLRObject

/**
 *  If enabled, allows connections using the MQTT protocol. Otherwise, MQTT
 *  connections to this registry will fail.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttDisabled Disables a
 *        MQTT connection. (Value: "MQTT_DISABLED")
 *    @arg @c kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttEnabled Enables a
 *        MQTT connection. (Value: "MQTT_ENABLED")
 *    @arg @c kGTLRCloudIot_MqttConfig_MqttEnabledState_MqttStateUnspecified No
 *        MQTT state specified. If not specified, MQTT will be enabled by
 *        default. (Value: "MQTT_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mqttEnabledState;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudIot_Policy : GTLRObject

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A public key certificate format and data.
 */
@interface GTLRCloudIot_PublicKeyCertificate : GTLRObject

/** The certificate data. */
@property(nonatomic, copy, nullable) NSString *certificate;

/**
 *  The certificate format.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_PublicKeyCertificate_Format_UnspecifiedPublicKeyCertificateFormat
 *        The format has not been specified. This is an invalid default value
 *        and must not be used. (Value:
 *        "UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT")
 *    @arg @c kGTLRCloudIot_PublicKeyCertificate_Format_X509CertificatePem An
 *        X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)),
 *        encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and
 *        `-----END CERTIFICATE-----`. (Value: "X509_CERTIFICATE_PEM")
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  [Output only] The certificate details. Used only for X.509 certificates.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_X509CertificateDetails *x509Details;

@end


/**
 *  A public key format and data.
 */
@interface GTLRCloudIot_PublicKeyCredential : GTLRObject

/**
 *  The format of the key.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudIot_PublicKeyCredential_Format_Es256Pem Public key for
 *        the ECDSA algorithm using P-256 and SHA-256, encoded in base64, and
 *        wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC
 *        KEY-----`. This can be used to verify JWT tokens with the `ES256`
 *        algorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This
 *        curve is defined in [OpenSSL](https://www.openssl.org/) as the
 *        `prime256v1` curve. (Value: "ES256_PEM")
 *    @arg @c kGTLRCloudIot_PublicKeyCredential_Format_Es256X509Pem As
 *        ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
 *        https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped
 *        by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
 *        (Value: "ES256_X509_PEM")
 *    @arg @c kGTLRCloudIot_PublicKeyCredential_Format_RsaPem An RSA public key
 *        encoded in base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and
 *        `-----END PUBLIC KEY-----`. This can be used to verify `RS256`
 *        signatures in JWT tokens ([RFC7518](
 *        https://www.ietf.org/rfc/rfc7518.txt)). (Value: "RSA_PEM")
 *    @arg @c kGTLRCloudIot_PublicKeyCredential_Format_RsaX509Pem As RSA_PEM,
 *        but wrapped in an X.509v3 certificate ([RFC5280](
 *        https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped
 *        by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
 *        (Value: "RSA_X509_PEM")
 *    @arg @c kGTLRCloudIot_PublicKeyCredential_Format_UnspecifiedPublicKeyFormat
 *        The format has not been specified. This is an invalid default value
 *        and must not be used. (Value: "UNSPECIFIED_PUBLIC_KEY_FORMAT")
 */
@property(nonatomic, copy, nullable) NSString *format;

/** The key data. */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  A server-stored registry credential used to validate device credentials.
 */
@interface GTLRCloudIot_RegistryCredential : GTLRObject

/** A public key certificate used to verify the device credentials. */
@property(nonatomic, strong, nullable) GTLRCloudIot_PublicKeyCertificate *publicKeyCertificate;

@end


/**
 *  Request for `SendCommandToDevice`.
 */
@interface GTLRCloudIot_SendCommandToDeviceRequest : GTLRObject

/**
 *  Required. The command data to send to the device.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *binaryData;

/**
 *  Optional subfolder for the command. If empty, the command will be delivered
 *  to the /devices/{device-id}/commands topic, otherwise it will be delivered
 *  to the /devices/{device-id}/commands/{subfolder} topic. Multi-level
 *  subfolders are allowed. This field must not have more than 256 characters,
 *  and must not contain any MQTT wildcards ("+" or "#") or null characters.
 */
@property(nonatomic, copy, nullable) NSString *subfolder;

@end


/**
 *  Response for `SendCommandToDevice`.
 */
@interface GTLRCloudIot_SendCommandToDeviceResponse : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudIot_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudIot_Policy *policy;

@end


/**
 *  The configuration for notification of new states received from the device.
 */
@interface GTLRCloudIot_StateNotificationConfig : GTLRObject

/**
 *  A Cloud Pub/Sub topic name. For example,
 *  `projects/myProject/topics/deviceEvents`.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopicName;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudIot_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudIot_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudIot_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudIot_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudIot_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudIot_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request for `UnbindDeviceFromGateway`.
 */
@interface GTLRCloudIot_UnbindDeviceFromGatewayRequest : GTLRObject

/**
 *  Required. The device to disassociate from the specified gateway. The value
 *  of `device_id` can be either the device numeric ID or the user-defined
 *  device identifier.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Required. The value of `gateway_id` can be either the device numeric ID or
 *  the user-defined device identifier.
 */
@property(nonatomic, copy, nullable) NSString *gatewayId;

@end


/**
 *  Response for `UnbindDeviceFromGateway`.
 */
@interface GTLRCloudIot_UnbindDeviceFromGatewayResponse : GTLRObject
@end


/**
 *  Details of an X.509 certificate. For informational purposes only.
 */
@interface GTLRCloudIot_X509CertificateDetails : GTLRObject

/** The time the certificate becomes invalid. */
@property(nonatomic, strong, nullable) GTLRDateTime *expiryTime;

/** The entity that signed the certificate. */
@property(nonatomic, copy, nullable) NSString *issuer;

/** The type of public key in the certificate. */
@property(nonatomic, copy, nullable) NSString *publicKeyType;

/** The algorithm used to sign the certificate. */
@property(nonatomic, copy, nullable) NSString *signatureAlgorithm;

/** The time the certificate becomes valid. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The entity the certificate and public key belong to. */
@property(nonatomic, copy, nullable) NSString *subject;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
