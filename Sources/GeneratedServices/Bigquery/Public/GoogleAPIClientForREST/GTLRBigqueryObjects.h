// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Documentation:
//   https://cloud.google.com/bigquery/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigquery_AggregateClassificationMetrics;
@class GTLRBigquery_AggregationThresholdPolicy;
@class GTLRBigquery_Argument;
@class GTLRBigquery_ArimaCoefficients;
@class GTLRBigquery_ArimaFittingMetrics;
@class GTLRBigquery_ArimaForecastingMetrics;
@class GTLRBigquery_ArimaModelInfo;
@class GTLRBigquery_ArimaOrder;
@class GTLRBigquery_ArimaResult;
@class GTLRBigquery_ArimaSingleModelForecastingMetrics;
@class GTLRBigquery_AuditConfig;
@class GTLRBigquery_AuditLogConfig;
@class GTLRBigquery_AvroOptions;
@class GTLRBigquery_BiEngineReason;
@class GTLRBigquery_BiEngineStatistics;
@class GTLRBigquery_BigLakeConfiguration;
@class GTLRBigquery_BigtableColumn;
@class GTLRBigquery_BigtableColumnFamily;
@class GTLRBigquery_BigtableOptions;
@class GTLRBigquery_BinaryClassificationMetrics;
@class GTLRBigquery_BinaryConfusionMatrix;
@class GTLRBigquery_Binding;
@class GTLRBigquery_BqmlIterationResult;
@class GTLRBigquery_BqmlTrainingRun;
@class GTLRBigquery_BqmlTrainingRun_TrainingOptions;
@class GTLRBigquery_CategoricalValue;
@class GTLRBigquery_CategoryCount;
@class GTLRBigquery_CloneDefinition;
@class GTLRBigquery_Cluster;
@class GTLRBigquery_ClusterInfo;
@class GTLRBigquery_Clustering;
@class GTLRBigquery_ClusteringMetrics;
@class GTLRBigquery_ConfusionMatrix;
@class GTLRBigquery_ConnectionProperty;
@class GTLRBigquery_CsvOptions;
@class GTLRBigquery_DataFormatOptions;
@class GTLRBigquery_DataMaskingStatistics;
@class GTLRBigquery_DataPolicyOption;
@class GTLRBigquery_Dataset_Access_Item;
@class GTLRBigquery_Dataset_Labels;
@class GTLRBigquery_Dataset_ResourceTags;
@class GTLRBigquery_Dataset_Tags_Item;
@class GTLRBigquery_DatasetAccessEntry;
@class GTLRBigquery_DatasetList_Datasets_Item;
@class GTLRBigquery_DatasetList_Datasets_Item_Labels;
@class GTLRBigquery_DatasetReference;
@class GTLRBigquery_DataSplitResult;
@class GTLRBigquery_DestinationTableProperties;
@class GTLRBigquery_DestinationTableProperties_Labels;
@class GTLRBigquery_DifferentialPrivacyPolicy;
@class GTLRBigquery_DimensionalityReductionMetrics;
@class GTLRBigquery_DmlStatistics;
@class GTLRBigquery_DoubleCandidates;
@class GTLRBigquery_DoubleHparamSearchSpace;
@class GTLRBigquery_DoubleRange;
@class GTLRBigquery_EncryptionConfiguration;
@class GTLRBigquery_Entry;
@class GTLRBigquery_ErrorProto;
@class GTLRBigquery_EvaluationMetrics;
@class GTLRBigquery_ExplainQueryStage;
@class GTLRBigquery_ExplainQueryStep;
@class GTLRBigquery_Explanation;
@class GTLRBigquery_ExportDataStatistics;
@class GTLRBigquery_Expr;
@class GTLRBigquery_ExternalCatalogDatasetOptions;
@class GTLRBigquery_ExternalCatalogDatasetOptions_Parameters;
@class GTLRBigquery_ExternalCatalogTableOptions;
@class GTLRBigquery_ExternalCatalogTableOptions_Parameters;
@class GTLRBigquery_ExternalDataConfiguration;
@class GTLRBigquery_ExternalDatasetReference;
@class GTLRBigquery_ExternalServiceCost;
@class GTLRBigquery_FeatureValue;
@class GTLRBigquery_ForeignTypeInfo;
@class GTLRBigquery_ForeignViewDefinition;
@class GTLRBigquery_GetPolicyOptions;
@class GTLRBigquery_GlobalExplanation;
@class GTLRBigquery_GoogleSheetsOptions;
@class GTLRBigquery_HighCardinalityJoin;
@class GTLRBigquery_HivePartitioningOptions;
@class GTLRBigquery_HparamSearchSpaces;
@class GTLRBigquery_HparamTuningTrial;
@class GTLRBigquery_IndexUnusedReason;
@class GTLRBigquery_InputDataChange;
@class GTLRBigquery_IntArray;
@class GTLRBigquery_IntArrayHparamSearchSpace;
@class GTLRBigquery_IntCandidates;
@class GTLRBigquery_IntHparamSearchSpace;
@class GTLRBigquery_IntRange;
@class GTLRBigquery_IterationResult;
@class GTLRBigquery_Job;
@class GTLRBigquery_JobConfiguration;
@class GTLRBigquery_JobConfiguration_Labels;
@class GTLRBigquery_JobConfigurationExtract;
@class GTLRBigquery_JobConfigurationLoad;
@class GTLRBigquery_JobConfigurationQuery;
@class GTLRBigquery_JobConfigurationQuery_TableDefinitions;
@class GTLRBigquery_JobConfigurationTableCopy;
@class GTLRBigquery_JobCreationReason;
@class GTLRBigquery_JobList_Jobs_Item;
@class GTLRBigquery_JobReference;
@class GTLRBigquery_JobStatistics;
@class GTLRBigquery_JobStatistics2;
@class GTLRBigquery_JobStatistics2_ReservationUsage_Item;
@class GTLRBigquery_JobStatistics3;
@class GTLRBigquery_JobStatistics4;
@class GTLRBigquery_JobStatistics5;
@class GTLRBigquery_JobStatistics_ReservationUsage_Item;
@class GTLRBigquery_JobStatus;
@class GTLRBigquery_JoinRestrictionPolicy;
@class GTLRBigquery_JsonObject;
@class GTLRBigquery_JsonOptions;
@class GTLRBigquery_LinkedDatasetMetadata;
@class GTLRBigquery_LinkedDatasetSource;
@class GTLRBigquery_LoadQueryStatistics;
@class GTLRBigquery_MaterializedView;
@class GTLRBigquery_MaterializedViewDefinition;
@class GTLRBigquery_MaterializedViewStatistics;
@class GTLRBigquery_MaterializedViewStatus;
@class GTLRBigquery_MetadataCacheStatistics;
@class GTLRBigquery_MlStatistics;
@class GTLRBigquery_Model;
@class GTLRBigquery_Model_Labels;
@class GTLRBigquery_ModelDefinition;
@class GTLRBigquery_ModelDefinition_ModelOptions;
@class GTLRBigquery_ModelExtractOptions;
@class GTLRBigquery_ModelReference;
@class GTLRBigquery_ModelTraining;
@class GTLRBigquery_MultiClassClassificationMetrics;
@class GTLRBigquery_ParquetOptions;
@class GTLRBigquery_PartitionedColumn;
@class GTLRBigquery_PartitioningDefinition;
@class GTLRBigquery_PartitionSkew;
@class GTLRBigquery_PerformanceInsights;
@class GTLRBigquery_Policy;
@class GTLRBigquery_PrincipalComponentInfo;
@class GTLRBigquery_PrivacyPolicy;
@class GTLRBigquery_ProjectList_Projects_Item;
@class GTLRBigquery_ProjectReference;
@class GTLRBigquery_QueryInfo;
@class GTLRBigquery_QueryInfo_OptimizationDetails;
@class GTLRBigquery_QueryParameter;
@class GTLRBigquery_QueryParameterType;
@class GTLRBigquery_QueryParameterType_StructTypes_Item;
@class GTLRBigquery_QueryParameterValue;
@class GTLRBigquery_QueryParameterValue_StructValues;
@class GTLRBigquery_QueryRequest_Labels;
@class GTLRBigquery_QueryTimelineSample;
@class GTLRBigquery_RangePartitioning;
@class GTLRBigquery_RangePartitioning_Range;
@class GTLRBigquery_RangeValue;
@class GTLRBigquery_RankingMetrics;
@class GTLRBigquery_RegressionMetrics;
@class GTLRBigquery_RemoteFunctionOptions;
@class GTLRBigquery_RemoteFunctionOptions_UserDefinedContext;
@class GTLRBigquery_RemoteModelInfo;
@class GTLRBigquery_RestrictionConfig;
@class GTLRBigquery_Routine;
@class GTLRBigquery_RoutineReference;
@class GTLRBigquery_Row;
@class GTLRBigquery_RowAccessPolicy;
@class GTLRBigquery_RowAccessPolicyReference;
@class GTLRBigquery_RowLevelSecurityStatistics;
@class GTLRBigquery_ScriptOptions;
@class GTLRBigquery_ScriptStackFrame;
@class GTLRBigquery_ScriptStatistics;
@class GTLRBigquery_SearchStatistics;
@class GTLRBigquery_SerDeInfo;
@class GTLRBigquery_SerDeInfo_Parameters;
@class GTLRBigquery_SessionInfo;
@class GTLRBigquery_SkewSource;
@class GTLRBigquery_SnapshotDefinition;
@class GTLRBigquery_SparkLoggingInfo;
@class GTLRBigquery_SparkOptions;
@class GTLRBigquery_SparkOptions_Properties;
@class GTLRBigquery_SparkStatistics;
@class GTLRBigquery_SparkStatistics_Endpoints;
@class GTLRBigquery_StagePerformanceChangeInsight;
@class GTLRBigquery_StagePerformanceStandaloneInsight;
@class GTLRBigquery_StandardSqlDataType;
@class GTLRBigquery_StandardSqlField;
@class GTLRBigquery_StandardSqlStructType;
@class GTLRBigquery_StandardSqlTableType;
@class GTLRBigquery_StorageDescriptor;
@class GTLRBigquery_Streamingbuffer;
@class GTLRBigquery_StringHparamSearchSpace;
@class GTLRBigquery_SystemVariables;
@class GTLRBigquery_SystemVariables_Types;
@class GTLRBigquery_SystemVariables_Values;
@class GTLRBigquery_Table_Labels;
@class GTLRBigquery_Table_ResourceTags;
@class GTLRBigquery_TableCell;
@class GTLRBigquery_TableConstraints;
@class GTLRBigquery_TableConstraints_ForeignKeys_Item;
@class GTLRBigquery_TableConstraints_ForeignKeys_Item_ColumnReferences_Item;
@class GTLRBigquery_TableConstraints_ForeignKeys_Item_ReferencedTable;
@class GTLRBigquery_TableConstraints_PrimaryKey;
@class GTLRBigquery_TableDataInsertAllRequest_Rows_Item;
@class GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item;
@class GTLRBigquery_TableFieldSchema;
@class GTLRBigquery_TableFieldSchema_Categories;
@class GTLRBigquery_TableFieldSchema_PolicyTags;
@class GTLRBigquery_TableFieldSchema_RangeElementType;
@class GTLRBigquery_TableList_Tables_Item;
@class GTLRBigquery_TableList_Tables_Item_Labels;
@class GTLRBigquery_TableList_Tables_Item_View;
@class GTLRBigquery_TableMetadataCacheUsage;
@class GTLRBigquery_TableReference;
@class GTLRBigquery_TableReplicationInfo;
@class GTLRBigquery_TableRow;
@class GTLRBigquery_TableSchema;
@class GTLRBigquery_TimePartitioning;
@class GTLRBigquery_TrainingOptions;
@class GTLRBigquery_TrainingOptions_LabelClassWeights;
@class GTLRBigquery_TrainingRun;
@class GTLRBigquery_TransactionInfo;
@class GTLRBigquery_TransformColumn;
@class GTLRBigquery_UserDefinedFunctionResource;
@class GTLRBigquery_VectorSearchStatistics;
@class GTLRBigquery_ViewDefinition;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBigquery_Argument.argumentKind

/**
 *  The argument is any type, including struct or array, but not a table. To be
 *  added: FIXED_TABLE, ANY_TABLE
 *
 *  Value: "ANY_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_AnyType;
/**
 *  Default value.
 *
 *  Value: "ARGUMENT_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_ArgumentKindUnspecified;
/**
 *  The argument is a variable with fully specified type, which can be a struct
 *  or an array, but not a table.
 *
 *  Value: "FIXED_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_FixedType;

// ----------------------------------------------------------------------------
// GTLRBigquery_Argument.mode

/**
 *  The argument is input-only.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_In;
/**
 *  The argument is both an input and an output.
 *
 *  Value: "INOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_Inout;
/**
 *  Default value.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_ModeUnspecified;
/**
 *  The argument is output-only.
 *
 *  Value: "OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_Out;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaForecastingMetrics.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaModelInfo.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaResult.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaSingleModelForecastingMetrics.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_BiEngineReason.code

/**
 *  BiEngineReason not specified.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_CodeUnspecified;
/**
 *  Input too large for acceleration by BI Engine.
 *
 *  Value: "INPUT_TOO_LARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_InputTooLarge;
/**
 *  Not enough memory available for BI Engine acceleration.
 *
 *  Value: "INSUFFICIENT_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_InsufficientReservation;
/**
 *  No reservation available for BI Engine acceleration.
 *
 *  Value: "NO_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_NoReservation;
/**
 *  Catch-all code for all other cases for partial or disabled acceleration.
 *
 *  Value: "OTHER_REASON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_OtherReason;
/**
 *  One or more tables were not eligible for BI Engine acceleration.
 *
 *  Value: "TABLE_EXCLUDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_TableExcluded;
/**
 *  This particular SQL text is not supported for acceleration by BI Engine.
 *
 *  Value: "UNSUPPORTED_SQL_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineReason_Code_UnsupportedSqlText;

// ----------------------------------------------------------------------------
// GTLRBigquery_BiEngineStatistics.accelerationMode

/**
 *  BiEngineMode type not specified.
 *
 *  Value: "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_AccelerationMode_BiEngineAccelerationModeUnspecified;
/**
 *  BI Engine acceleration was attempted but disabled. bi_engine_reasons
 *  specifies a more detailed reason.
 *
 *  Value: "BI_ENGINE_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_AccelerationMode_BiEngineDisabled;
/**
 *  All of the query inputs were accelerated using BI Engine.
 *
 *  Value: "FULL_INPUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_AccelerationMode_FullInput;
/**
 *  All of the query was accelerated using BI Engine.
 *
 *  Value: "FULL_QUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_AccelerationMode_FullQuery;
/**
 *  Some inputs were accelerated using BI Engine. See bi_engine_reasons for why
 *  parts of the query were not accelerated.
 *
 *  Value: "PARTIAL_INPUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_AccelerationMode_PartialInput;

// ----------------------------------------------------------------------------
// GTLRBigquery_BiEngineStatistics.biEngineMode

/**
 *  BiEngineMode type not specified.
 *
 *  Value: "ACCELERATION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_BiEngineMode_AccelerationModeUnspecified;
/**
 *  BI Engine disabled the acceleration. bi_engine_reasons specifies a more
 *  detailed reason.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_BiEngineMode_Disabled;
/**
 *  All of the query was accelerated using BI Engine.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_BiEngineMode_Full;
/**
 *  Part of the query was accelerated using BI Engine. See bi_engine_reasons for
 *  why parts of the query were not accelerated.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BiEngineStatistics_BiEngineMode_Partial;

// ----------------------------------------------------------------------------
// GTLRBigquery_BigLakeConfiguration.fileFormat

/**
 *  Default Value.
 *
 *  Value: "FILE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BigLakeConfiguration_FileFormat_FileFormatUnspecified;
/**
 *  Apache Parquet format.
 *
 *  Value: "PARQUET"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BigLakeConfiguration_FileFormat_Parquet;

// ----------------------------------------------------------------------------
// GTLRBigquery_BigLakeConfiguration.tableFormat

/**
 *  Apache Iceberg format.
 *
 *  Value: "ICEBERG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BigLakeConfiguration_TableFormat_Iceberg;
/**
 *  Default Value.
 *
 *  Value: "TABLE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_BigLakeConfiguration_TableFormat_TableFormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Dataset.defaultRoundingMode

/**
 *  ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
 *
 *  Value: "ROUND_HALF_AWAY_FROM_ZERO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_DefaultRoundingMode_RoundHalfAwayFromZero;
/**
 *  ROUND_HALF_EVEN rounds half values to the nearest even value when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
 *
 *  Value: "ROUND_HALF_EVEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_DefaultRoundingMode_RoundHalfEven;
/**
 *  Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
 *
 *  Value: "ROUNDING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_DefaultRoundingMode_RoundingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Dataset.storageBillingModel

/**
 *  Billing for logical bytes.
 *
 *  Value: "LOGICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_StorageBillingModel_Logical;
/**
 *  Billing for physical bytes.
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_StorageBillingModel_Physical;
/**
 *  Value not set.
 *
 *  Value: "STORAGE_BILLING_MODEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Dataset_StorageBillingModel_StorageBillingModelUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_DatasetAccessEntry.targetTypes

/**
 *  This entry applies to routines in the dataset.
 *
 *  Value: "ROUTINES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_DatasetAccessEntry_TargetTypes_Routines;
/**
 *  Do not use. You must set a target type explicitly.
 *
 *  Value: "TARGET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_DatasetAccessEntry_TargetTypes_TargetTypeUnspecified;
/**
 *  This entry applies to views in the dataset.
 *
 *  Value: "VIEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_DatasetAccessEntry_TargetTypes_Views;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExplainQueryStage.computeMode

/**
 *  This stage was processed using BI Engine compute.
 *
 *  Value: "BI_ENGINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExplainQueryStage_ComputeMode_BiEngine;
/**
 *  This stage was processed using BigQuery slots.
 *
 *  Value: "BIGQUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExplainQueryStage_ComputeMode_Bigquery;
/**
 *  ComputeMode type not specified.
 *
 *  Value: "COMPUTE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExplainQueryStage_ComputeMode_ComputeModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExternalDataConfiguration.decimalTargetTypes

/**
 *  Decimal values could be converted to BIGNUMERIC type.
 *
 *  Value: "BIGNUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_DecimalTargetTypes_Bignumeric;
/**
 *  Invalid type.
 *
 *  Value: "DECIMAL_TARGET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_DecimalTargetTypes_DecimalTargetTypeUnspecified;
/**
 *  Decimal values could be converted to NUMERIC type.
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_DecimalTargetTypes_Numeric;
/**
 *  Decimal values could be converted to STRING type.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_DecimalTargetTypes_String;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExternalDataConfiguration.fileSetSpecType

/**
 *  This option expands source URIs by listing files from the object store. It
 *  is the default behavior if FileSetSpecType is not set.
 *
 *  Value: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_FileSetSpecType_FileSetSpecTypeFileSystemMatch;
/**
 *  This option indicates that the provided URIs are newline-delimited manifest
 *  files, with one URI per line. Wildcard URIs are not supported.
 *
 *  Value: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_FileSetSpecType_FileSetSpecTypeNewLineDelimitedManifest;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExternalDataConfiguration.jsonExtension

/**
 *  Use GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
 *
 *  Value: "GEOJSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_JsonExtension_Geojson;
/**
 *  The default if provided value is not one included in the enum, or the value
 *  is not specified. The source formate is parsed without any modification.
 *
 *  Value: "JSON_EXTENSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_JsonExtension_JsonExtensionUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExternalDataConfiguration.metadataCacheMode

/**
 *  Set this mode to trigger automatic background refresh of metadata cache from
 *  the external source. Queries will use the latest available cache version
 *  within the table's maxStaleness interval.
 *
 *  Value: "AUTOMATIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_Automatic;
/**
 *  Set this mode to enable triggering manual refresh of the metadata cache from
 *  external source. Queries will use the latest manually triggered cache
 *  version within the table's maxStaleness interval.
 *
 *  Value: "MANUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_Manual;
/**
 *  Unspecified metadata cache mode.
 *
 *  Value: "METADATA_CACHE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_MetadataCacheModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_ExternalDataConfiguration.objectMetadata

/**
 *  A synonym for `SIMPLE`.
 *
 *  Value: "DIRECTORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_Directory;
/**
 *  Unspecified by default.
 *
 *  Value: "OBJECT_METADATA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_ObjectMetadataUnspecified;
/**
 *  Directory listing of objects.
 *
 *  Value: "SIMPLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_Simple;

// ----------------------------------------------------------------------------
// GTLRBigquery_ForeignTypeInfo.typeSystem

/**
 *  Represents Hive data types.
 *
 *  Value: "HIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ForeignTypeInfo_TypeSystem_Hive;
/**
 *  TypeSystem not specified.
 *
 *  Value: "TYPE_SYSTEM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ForeignTypeInfo_TypeSystem_TypeSystemUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_HparamTuningTrial.status

/**
 *  The trial failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Failed;
/**
 *  The trial is infeasible due to the invalid params.
 *
 *  Value: "INFEASIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Infeasible;
/**
 *  Scheduled but not started.
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_NotStarted;
/**
 *  Running state.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Running;
/**
 *  Trial stopped early because it's not promising.
 *
 *  Value: "STOPPED_EARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_StoppedEarly;
/**
 *  The trial succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Succeeded;
/**
 *  Default value.
 *
 *  Value: "TRIAL_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_TrialStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_IndexUnusedReason.code

/**
 *  Indicates that the total size of indexed base tables in your organization
 *  exceeds your region's limit and the index is not used in the query. To index
 *  larger base tables, you can use your own reservation for index-management
 *  jobs.
 *
 *  Value: "BASE_TABLE_TOO_LARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_BaseTableTooLarge;
/**
 *  Indicates the base table is too small (below a certain threshold). The index
 *  does not provide noticeable search performance gains when the base table is
 *  too small.
 *
 *  Value: "BASE_TABLE_TOO_SMALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_BaseTableTooSmall;
/**
 *  Indicates the base table has been truncated (rows have been removed from
 *  table with TRUNCATE TABLE statement) since the last time the search index
 *  was refreshed.
 *
 *  Value: "BASE_TABLE_TRUNCATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_BaseTableTruncated;
/**
 *  Code not specified.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_CodeUnspecified;
/**
 *  Indicates that the estimated performance gain from using the search index is
 *  too low for the given search query.
 *
 *  Value: "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_EstimatedPerformanceGainTooLow;
/**
 *  Indicates the search index configuration has been changed since the last
 *  time the search index was refreshed.
 *
 *  Value: "INDEX_CONFIG_MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_IndexConfigModified;
/**
 *  Indicates the search index configuration has not been created.
 *
 *  Value: "INDEX_CONFIG_NOT_AVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_IndexConfigNotAvailable;
/**
 *  Indicates that an option in the search function that cannot make use of the
 *  index has been selected.
 *
 *  Value: "INDEX_SUPPRESSED_BY_FUNCTION_OPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_IndexSuppressedByFunctionOption;
/**
 *  Indicates an internal error that causes the search index to be unused.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_InternalError;
/**
 *  Indicates that the search index and the search function call do not have the
 *  same text analyzer.
 *
 *  Value: "MISMATCHED_TEXT_ANALYZER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_MismatchedTextAnalyzer;
/**
 *  Indicates the usage of search index will not contribute to any pruning
 *  improvement for the search function, e.g. when the search predicate is in a
 *  disjunction with other non-search predicates.
 *
 *  Value: "NO_PRUNING_POWER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_NoPruningPower;
/**
 *  Indicates that search indexes can not be used for search query with STANDARD
 *  edition.
 *
 *  Value: "NOT_SUPPORTED_IN_STANDARD_EDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_NotSupportedInStandardEdition;
/**
 *  Indicates the query has been optimized by using a materialized view.
 *
 *  Value: "OPTIMIZED_WITH_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_OptimizedWithMaterializedView;
/**
 *  Indicates that the reason search indexes cannot be used in the query is not
 *  covered by any of the other IndexUnusedReason options.
 *
 *  Value: "OTHER_REASON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_OtherReason;
/**
 *  Indicates the search index creation has not been completed.
 *
 *  Value: "PENDING_INDEX_CREATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_PendingIndexCreation;
/**
 *  Indicates that the query was cached, and thus the search index was not used.
 *
 *  Value: "QUERY_CACHE_HIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_QueryCacheHit;
/**
 *  Indicates the query has been secured by data masking, and thus search
 *  indexes are not applicable.
 *
 *  Value: "SECURED_BY_DATA_MASKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_SecuredByDataMasking;
/**
 *  The index cannot be used in the search query because it is stale.
 *
 *  Value: "STALE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_StaleIndex;
/**
 *  Indicates the search query accesses data at a timestamp before the last time
 *  the search index was refreshed.
 *
 *  Value: "TIME_TRAVEL_QUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_TimeTravelQuery;
/**
 *  Indicates the search index does not cover all fields in the search function.
 *
 *  Value: "UNINDEXED_SEARCH_FIELDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_UnindexedSearchFields;
/**
 *  Indicates the search index does not support the given search query pattern.
 *
 *  Value: "UNSUPPORTED_SEARCH_PATTERN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_IndexUnusedReason_Code_UnsupportedSearchPattern;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobConfigurationLoad.columnNameCharacterMap

/**
 *  Unspecified column name character map.
 *
 *  Value: "COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_ColumnNameCharacterMapUnspecified;
/**
 *  Support flexible column name and reject invalid column names.
 *
 *  Value: "STRICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_Strict;
/**
 *  Support alphanumeric + underscore characters and names must start with a
 *  letter or underscore. Invalid column names will be normalized.
 *
 *  Value: "V1"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_V1;
/**
 *  Support flexible column name. Invalid column names will be normalized.
 *
 *  Value: "V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_V2;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobConfigurationLoad.decimalTargetTypes

/**
 *  Decimal values could be converted to BIGNUMERIC type.
 *
 *  Value: "BIGNUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_DecimalTargetTypes_Bignumeric;
/**
 *  Invalid type.
 *
 *  Value: "DECIMAL_TARGET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_DecimalTargetTypes_DecimalTargetTypeUnspecified;
/**
 *  Decimal values could be converted to NUMERIC type.
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_DecimalTargetTypes_Numeric;
/**
 *  Decimal values could be converted to STRING type.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_DecimalTargetTypes_String;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobConfigurationLoad.fileSetSpecType

/**
 *  This option expands source URIs by listing files from the object store. It
 *  is the default behavior if FileSetSpecType is not set.
 *
 *  Value: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_FileSetSpecType_FileSetSpecTypeFileSystemMatch;
/**
 *  This option indicates that the provided URIs are newline-delimited manifest
 *  files, with one URI per line. Wildcard URIs are not supported.
 *
 *  Value: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_FileSetSpecType_FileSetSpecTypeNewLineDelimitedManifest;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobConfigurationLoad.jsonExtension

/**
 *  Use GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
 *
 *  Value: "GEOJSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_JsonExtension_Geojson;
/**
 *  The default if provided value is not one included in the enum, or the value
 *  is not specified. The source formate is parsed without any modification.
 *
 *  Value: "JSON_EXTENSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationLoad_JsonExtension_JsonExtensionUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobConfigurationTableCopy.operationType

/**
 *  The source and destination table have the same table type, but only bill for
 *  unique data.
 *
 *  Value: "CLONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationTableCopy_OperationType_Clone;
/**
 *  The source and destination table have the same table type.
 *
 *  Value: "COPY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationTableCopy_OperationType_Copy;
/**
 *  Unspecified operation type.
 *
 *  Value: "OPERATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationTableCopy_OperationType_OperationTypeUnspecified;
/**
 *  The source table type is SNAPSHOT and the destination table type is TABLE.
 *
 *  Value: "RESTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationTableCopy_OperationType_Restore;
/**
 *  The source table type is TABLE and the destination table type is SNAPSHOT.
 *
 *  Value: "SNAPSHOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobConfigurationTableCopy_OperationType_Snapshot;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobCreationReason.code

/**
 *  Reason is not specified.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobCreationReason_Code_CodeUnspecified;
/**
 *  The results from the query cannot fit in the response.
 *
 *  Value: "LARGE_RESULTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobCreationReason_Code_LargeResults;
/**
 *  The query request ran beyond a system defined timeout specified by the
 *  [timeoutMs field in the
 *  QueryRequest](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest).
 *  As a result it was considered a long running operation for which a job was
 *  created.
 *
 *  Value: "LONG_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobCreationReason_Code_LongRunning;
/**
 *  BigQuery has determined that the query needs to be executed as a Job.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobCreationReason_Code_Other;
/**
 *  Job creation was requested.
 *
 *  Value: "REQUESTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobCreationReason_Code_Requested;

// ----------------------------------------------------------------------------
// GTLRBigquery_JobStatistics.edition

/**
 *  Enterprise edition.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobStatistics_Edition_Enterprise;
/**
 *  Enterprise plus edition.
 *
 *  Value: "ENTERPRISE_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobStatistics_Edition_EnterprisePlus;
/**
 *  Default value, which will be treated as ENTERPRISE.
 *
 *  Value: "RESERVATION_EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobStatistics_Edition_ReservationEditionUnspecified;
/**
 *  Standard edition.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JobStatistics_Edition_Standard;

// ----------------------------------------------------------------------------
// GTLRBigquery_JoinRestrictionPolicy.joinCondition

/**
 *  A join is required on all specified columns.
 *
 *  Value: "JOIN_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinAll;
/**
 *  A join is required on at least one of the specified columns.
 *
 *  Value: "JOIN_ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinAny;
/**
 *  Joins are blocked for all queries.
 *
 *  Value: "JOIN_BLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinBlocked;
/**
 *  A join is neither required nor restricted on any column. Default value.
 *
 *  Value: "JOIN_CONDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinConditionUnspecified;
/**
 *  A join is not required, but if present it is only permitted on
 *  'join_allowed_columns'
 *
 *  Value: "JOIN_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinNotRequired;

// ----------------------------------------------------------------------------
// GTLRBigquery_LinkedDatasetMetadata.linkState

/**
 *  Normal Linked Dataset state. Data is queryable via the Linked Dataset.
 *
 *  Value: "LINKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_LinkedDatasetMetadata_LinkState_Linked;
/**
 *  The default value. Default to the LINKED state.
 *
 *  Value: "LINK_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_LinkedDatasetMetadata_LinkState_LinkStateUnspecified;
/**
 *  Data publisher or owner has unlinked this Linked Dataset. It means you can
 *  no longer query or see the data in the Linked Dataset.
 *
 *  Value: "UNLINKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_LinkedDatasetMetadata_LinkState_Unlinked;

// ----------------------------------------------------------------------------
// GTLRBigquery_MaterializedView.rejectedReason

/**
 *  View is invalidated because of a data change in one or more base tables. It
 *  could be any recent change if the
 *  [`max_staleness`](https://cloud.google.com/bigquery/docs/materialized-views-create#max_staleness)
 *  option is not set for the view, or otherwise any change outside of the
 *  staleness window.
 *
 *  Value: "BASE_TABLE_DATA_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableDataChange;
/**
 *  View is invalidated because a base table's partition has expired.
 *
 *  Value: "BASE_TABLE_EXPIRED_PARTITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableExpiredPartition;
/**
 *  View is inaccessible to the user because of a fine-grained security policy
 *  on one of its base tables.
 *
 *  Value: "BASE_TABLE_FINE_GRAINED_SECURITY_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableFineGrainedSecurityPolicy;
/**
 *  View is invalidated because a base table has an incompatible metadata
 *  change.
 *
 *  Value: "BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableIncompatibleMetadataChange;
/**
 *  View is invalidated because a base table's partition expiration has changed.
 *
 *  Value: "BASE_TABLE_PARTITION_EXPIRATION_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTablePartitionExpirationChange;
/**
 *  One of the view's base tables is too stale. For example, the cached metadata
 *  of a BigLake external table needs to be updated.
 *
 *  Value: "BASE_TABLE_TOO_STALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableTooStale;
/**
 *  View has no cached data because a base table is truncated.
 *
 *  Value: "BASE_TABLE_TRUNCATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_BaseTableTruncated;
/**
 *  The estimated cost of the view is more expensive than another view or the
 *  base table. Note: The estimate cost might not match the billed cost.
 *
 *  Value: "COST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_Cost;
/**
 *  View has no cached data because it has not refreshed yet.
 *
 *  Value: "NO_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_NoData;
/**
 *  View is outside the time travel window.
 *
 *  Value: "OUT_OF_TIME_TRAVEL_WINDOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_OutOfTimeTravelWindow;
/**
 *  Default unspecified value.
 *
 *  Value: "REJECTED_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_RejectedReasonUnspecified;
/**
 *  View is invalidated because it was refreshed with a time zone other than
 *  that of the current job.
 *
 *  Value: "TIME_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MaterializedView_RejectedReason_TimeZone;

// ----------------------------------------------------------------------------
// GTLRBigquery_MlStatistics.modelType

/**
 *  ARIMA model.
 *
 *  Value: "ARIMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Arima;
/**
 *  New name for the ARIMA model.
 *
 *  Value: "ARIMA_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_ArimaPlus;
/**
 *  ARIMA with external regressors.
 *
 *  Value: "ARIMA_PLUS_XREG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_ArimaPlusXreg;
/**
 *  Autoencoder model.
 *
 *  Value: "AUTOENCODER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Autoencoder;
/**
 *  AutoML Tables classification model.
 *
 *  Value: "AUTOML_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_AutomlClassifier;
/**
 *  AutoML Tables regression model.
 *
 *  Value: "AUTOML_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_AutomlRegressor;
/**
 *  Boosted tree classifier model.
 *
 *  Value: "BOOSTED_TREE_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_BoostedTreeClassifier;
/**
 *  Boosted tree regressor model.
 *
 *  Value: "BOOSTED_TREE_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_BoostedTreeRegressor;
/**
 *  DNN classifier model.
 *
 *  Value: "DNN_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_DnnClassifier;
/**
 *  Wide-and-deep classifier model.
 *
 *  Value: "DNN_LINEAR_COMBINED_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_DnnLinearCombinedClassifier;
/**
 *  Wide-and-deep regressor model.
 *
 *  Value: "DNN_LINEAR_COMBINED_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_DnnLinearCombinedRegressor;
/**
 *  DNN regressor model.
 *
 *  Value: "DNN_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_DnnRegressor;
/**
 *  K-means clustering model.
 *
 *  Value: "KMEANS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Kmeans;
/**
 *  Linear regression model.
 *
 *  Value: "LINEAR_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_LinearRegression;
/**
 *  Logistic regression based classification model.
 *
 *  Value: "LOGISTIC_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_LogisticRegression;
/**
 *  Matrix factorization model.
 *
 *  Value: "MATRIX_FACTORIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_MatrixFactorization;
/**
 *  Default value.
 *
 *  Value: "MODEL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_ModelTypeUnspecified;
/**
 *  An imported ONNX model.
 *
 *  Value: "ONNX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Onnx;
/**
 *  Prinpical Component Analysis model.
 *
 *  Value: "PCA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Pca;
/**
 *  Random forest classifier model.
 *
 *  Value: "RANDOM_FOREST_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_RandomForestClassifier;
/**
 *  Random forest regressor model.
 *
 *  Value: "RANDOM_FOREST_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_RandomForestRegressor;
/**
 *  An imported TensorFlow model.
 *
 *  Value: "TENSORFLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Tensorflow;
/**
 *  An imported TensorFlow Lite model.
 *
 *  Value: "TENSORFLOW_LITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_TensorflowLite;
/**
 *  Model to capture the columns and logic in the TRANSFORM clause along with
 *  statistics useful for ML analytic functions.
 *
 *  Value: "TRANSFORM_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_TransformOnly;
/**
 *  An imported XGBoost model.
 *
 *  Value: "XGBOOST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_ModelType_Xgboost;

// ----------------------------------------------------------------------------
// GTLRBigquery_MlStatistics.trainingType

/**
 *  [Hyperparameter tuning
 *  training](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
 *
 *  Value: "HPARAM_TUNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_TrainingType_HparamTuning;
/**
 *  Single training with fixed parameter space.
 *
 *  Value: "SINGLE_TRAINING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_TrainingType_SingleTraining;
/**
 *  Unspecified training type.
 *
 *  Value: "TRAINING_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_MlStatistics_TrainingType_TrainingTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Model.modelType

/**
 *  ARIMA model.
 *
 *  Value: "ARIMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Arima;
/**
 *  New name for the ARIMA model.
 *
 *  Value: "ARIMA_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_ArimaPlus;
/**
 *  ARIMA with external regressors.
 *
 *  Value: "ARIMA_PLUS_XREG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_ArimaPlusXreg;
/**
 *  Autoencoder model.
 *
 *  Value: "AUTOENCODER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Autoencoder;
/**
 *  AutoML Tables classification model.
 *
 *  Value: "AUTOML_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_AutomlClassifier;
/**
 *  AutoML Tables regression model.
 *
 *  Value: "AUTOML_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_AutomlRegressor;
/**
 *  Boosted tree classifier model.
 *
 *  Value: "BOOSTED_TREE_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeClassifier;
/**
 *  Boosted tree regressor model.
 *
 *  Value: "BOOSTED_TREE_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeRegressor;
/**
 *  DNN classifier model.
 *
 *  Value: "DNN_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnClassifier;
/**
 *  Wide-and-deep classifier model.
 *
 *  Value: "DNN_LINEAR_COMBINED_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnLinearCombinedClassifier;
/**
 *  Wide-and-deep regressor model.
 *
 *  Value: "DNN_LINEAR_COMBINED_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnLinearCombinedRegressor;
/**
 *  DNN regressor model.
 *
 *  Value: "DNN_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnRegressor;
/**
 *  K-means clustering model.
 *
 *  Value: "KMEANS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Kmeans;
/**
 *  Linear regression model.
 *
 *  Value: "LINEAR_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_LinearRegression;
/**
 *  Logistic regression based classification model.
 *
 *  Value: "LOGISTIC_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_LogisticRegression;
/**
 *  Matrix factorization model.
 *
 *  Value: "MATRIX_FACTORIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_MatrixFactorization;
/**
 *  Default value.
 *
 *  Value: "MODEL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_ModelTypeUnspecified;
/**
 *  An imported ONNX model.
 *
 *  Value: "ONNX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Onnx;
/**
 *  Prinpical Component Analysis model.
 *
 *  Value: "PCA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Pca;
/**
 *  Random forest classifier model.
 *
 *  Value: "RANDOM_FOREST_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_RandomForestClassifier;
/**
 *  Random forest regressor model.
 *
 *  Value: "RANDOM_FOREST_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_RandomForestRegressor;
/**
 *  An imported TensorFlow model.
 *
 *  Value: "TENSORFLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Tensorflow;
/**
 *  An imported TensorFlow Lite model.
 *
 *  Value: "TENSORFLOW_LITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_TensorflowLite;
/**
 *  Model to capture the columns and logic in the TRANSFORM clause along with
 *  statistics useful for ML analytic functions.
 *
 *  Value: "TRANSFORM_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_TransformOnly;
/**
 *  An imported XGBoost model.
 *
 *  Value: "XGBOOST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Xgboost;

// ----------------------------------------------------------------------------
// GTLRBigquery_ParquetOptions.mapTargetType

/**
 *  In this mode, the map will have the following schema: repeated struct
 *  map_field_name { key value }.
 *
 *  Value: "ARRAY_OF_STRUCT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ParquetOptions_MapTargetType_ArrayOfStruct;
/**
 *  In this mode, the map will have the following schema: struct map_field_name
 *  { repeated struct key_value { key value } }.
 *
 *  Value: "MAP_TARGET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ParquetOptions_MapTargetType_MapTargetTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_QueryRequest.jobCreationMode

/**
 *  If unspecified JOB_CREATION_REQUIRED is the default.
 *
 *  Value: "JOB_CREATION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationModeUnspecified;
/**
 *  Job creation is optional. Returning immediate results is prioritized.
 *  BigQuery will automatically determine if a Job needs to be created. The
 *  conditions under which BigQuery can decide to not create a Job are subject
 *  to change. If Job creation is required, JOB_CREATION_REQUIRED mode should be
 *  used, which is the default.
 *
 *  Value: "JOB_CREATION_OPTIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationOptional;
/**
 *  Default. Job creation is always required.
 *
 *  Value: "JOB_CREATION_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationRequired;

// ----------------------------------------------------------------------------
// GTLRBigquery_RemoteModelInfo.remoteServiceType

/**
 *  V1 Cloud AI Natural Language API. See more details at [REST Resource:
 *  documents](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents).
 *
 *  Value: "CLOUD_AI_NATURAL_LANGUAGE_V1"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiNaturalLanguageV1;
/**
 *  V2 Speech-to-Text API. See more details at [Google Cloud Speech-to-Text V2
 *  API](https://cloud.google.com/speech-to-text/v2/docs)
 *
 *  Value: "CLOUD_AI_SPEECH_TO_TEXT_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiSpeechToTextV2;
/**
 *  V3 Cloud AI Translation API. See more details at [Cloud Translation API]
 *  (https://cloud.google.com/translate/docs/reference/rest).
 *
 *  Value: "CLOUD_AI_TRANSLATE_V3"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiTranslateV3;
/**
 *  V1 Cloud AI Vision API See more details at [Cloud Vision API]
 *  (https://cloud.google.com/vision/docs/reference/rest).
 *
 *  Value: "CLOUD_AI_VISION_V1"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiVisionV1;
/**
 *  Unspecified remote service type.
 *
 *  Value: "REMOTE_SERVICE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RemoteModelInfo_RemoteServiceType_RemoteServiceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_RestrictionConfig.type

/**
 *  Restrict data egress. See [Data
 *  egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
 *  for more details.
 *
 *  Value: "RESTRICTED_DATA_EGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RestrictionConfig_Type_RestrictedDataEgress;
/**
 *  Should never be used.
 *
 *  Value: "RESTRICTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_RestrictionConfig_Type_RestrictionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.dataGovernanceType

/**
 *  The data governance type is unspecified.
 *
 *  Value: "DATA_GOVERNANCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DataGovernanceType_DataGovernanceTypeUnspecified;
/**
 *  The data governance type is data masking.
 *
 *  Value: "DATA_MASKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DataGovernanceType_DataMasking;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.determinismLevel

/**
 *  The determinism of the UDF is unspecified.
 *
 *  Value: "DETERMINISM_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_DeterminismLevelUnspecified;
/**
 *  The UDF is deterministic, meaning that 2 function calls with the same inputs
 *  always produce the same result, even across 2 query runs.
 *
 *  Value: "DETERMINISTIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_Deterministic;
/**
 *  The UDF is not deterministic.
 *
 *  Value: "NOT_DETERMINISTIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_NotDeterministic;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.language

/**
 *  Java language.
 *
 *  Value: "JAVA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Java;
/**
 *  JavaScript language.
 *
 *  Value: "JAVASCRIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Javascript;
/**
 *  Default value.
 *
 *  Value: "LANGUAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_LanguageUnspecified;
/**
 *  Python language.
 *
 *  Value: "PYTHON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Python;
/**
 *  Scala language.
 *
 *  Value: "SCALA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Scala;
/**
 *  SQL language.
 *
 *  Value: "SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Sql;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.routineType

/**
 *  Non-built-in persistent aggregate function.
 *
 *  Value: "AGGREGATE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_AggregateFunction;
/**
 *  Stored procedure.
 *
 *  Value: "PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_Procedure;
/**
 *  Default value.
 *
 *  Value: "ROUTINE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_RoutineTypeUnspecified;
/**
 *  Non-built-in persistent scalar function.
 *
 *  Value: "SCALAR_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_ScalarFunction;
/**
 *  Non-built-in persistent TVF.
 *
 *  Value: "TABLE_VALUED_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_TableValuedFunction;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.securityMode

/**
 *  The routine is to be executed with the privileges of the user who defines
 *  it.
 *
 *  Value: "DEFINER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_SecurityMode_Definer;
/**
 *  The routine is to be executed with the privileges of the user who invokes
 *  it.
 *
 *  Value: "INVOKER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_SecurityMode_Invoker;
/**
 *  The security mode of the routine is unspecified.
 *
 *  Value: "SECURITY_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_SecurityMode_SecurityModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_ScriptOptions.keyResultStatement

/**
 *  The first SELECT statement determines the key result.
 *
 *  Value: "FIRST_SELECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptOptions_KeyResultStatement_FirstSelect;
/**
 *  Default value.
 *
 *  Value: "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptOptions_KeyResultStatement_KeyResultStatementKindUnspecified;
/**
 *  The last result determines the key result.
 *
 *  Value: "LAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptOptions_KeyResultStatement_Last;

// ----------------------------------------------------------------------------
// GTLRBigquery_ScriptStatistics.evaluationKind

/**
 *  Default value.
 *
 *  Value: "EVALUATION_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptStatistics_EvaluationKind_EvaluationKindUnspecified;
/**
 *  The statement evaluates an expression that appears in the script.
 *
 *  Value: "EXPRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptStatistics_EvaluationKind_Expression;
/**
 *  The statement appears directly in the script.
 *
 *  Value: "STATEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ScriptStatistics_EvaluationKind_Statement;

// ----------------------------------------------------------------------------
// GTLRBigquery_SearchStatistics.indexUsageMode

/**
 *  The entire search query used search indexes.
 *
 *  Value: "FULLY_USED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_SearchStatistics_IndexUsageMode_FullyUsed;
/**
 *  Index usage mode not specified.
 *
 *  Value: "INDEX_USAGE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_SearchStatistics_IndexUsageMode_IndexUsageModeUnspecified;
/**
 *  Part of the search query used search indexes. See [`indexUnusedReasons`]
 *  (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for why other parts
 *  of the query did not use search indexes.
 *
 *  Value: "PARTIALLY_USED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_SearchStatistics_IndexUsageMode_PartiallyUsed;
/**
 *  No search indexes were used in the search query. See [`indexUnusedReasons`]
 *  (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for detailed
 *  reasons.
 *
 *  Value: "UNUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_SearchStatistics_IndexUsageMode_Unused;

// ----------------------------------------------------------------------------
// GTLRBigquery_StandardSqlDataType.typeKind

/**
 *  Encoded as a list with types matching Type.array_type.
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Array;
/**
 *  Encoded as a decimal string.
 *
 *  Value: "BIGNUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bignumeric;
/**
 *  Encoded as a boolean "false" or "true".
 *
 *  Value: "BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bool;
/**
 *  Encoded as a base64 string per RFC 4648, section 4.
 *
 *  Value: "BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bytes;
/**
 *  Encoded as RFC 3339 full-date format string: 1985-04-12
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Date;
/**
 *  Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
 *
 *  Value: "DATETIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Datetime;
/**
 *  Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
 *
 *  Value: "FLOAT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Float64;
/**
 *  Encoded as WKT
 *
 *  Value: "GEOGRAPHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Geography;
/**
 *  Encoded as a string in decimal format.
 *
 *  Value: "INT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Int64;
/**
 *  Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
 *
 *  Value: "INTERVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Interval;
/**
 *  Encoded as a string.
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Json;
/**
 *  Encoded as a decimal string.
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Numeric;
/**
 *  Encoded as a pair with types matching range_element_type. Pairs must begin
 *  with "[", end with ")", and be separated by ", ".
 *
 *  Value: "RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Range;
/**
 *  Encoded as a string value.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_String;
/**
 *  Encoded as a list with fields of type Type.struct_type[i]. List is used
 *  because a JSON object cannot have duplicate field names.
 *
 *  Value: "STRUCT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Struct;
/**
 *  Encoded as RFC 3339 partial-time format string: 23:20:50.52
 *
 *  Value: "TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Time;
/**
 *  Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
 *  1985-04-12T23:20:50.52Z
 *
 *  Value: "TIMESTAMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Timestamp;
/**
 *  Invalid type.
 *
 *  Value: "TYPE_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_TypeKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Table.defaultRoundingMode

/**
 *  ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
 *
 *  Value: "ROUND_HALF_AWAY_FROM_ZERO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Table_DefaultRoundingMode_RoundHalfAwayFromZero;
/**
 *  ROUND_HALF_EVEN rounds half values to the nearest even value when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
 *
 *  Value: "ROUND_HALF_EVEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Table_DefaultRoundingMode_RoundHalfEven;
/**
 *  Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
 *
 *  Value: "ROUNDING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Table_DefaultRoundingMode_RoundingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TableFieldSchema.roundingMode

/**
 *  ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
 *
 *  Value: "ROUND_HALF_AWAY_FROM_ZERO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableFieldSchema_RoundingMode_RoundHalfAwayFromZero;
/**
 *  ROUND_HALF_EVEN rounds half values to the nearest even value when applying
 *  precision and scale upon writing of NUMERIC and BIGNUMERIC values. For
 *  Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
 *
 *  Value: "ROUND_HALF_EVEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableFieldSchema_RoundingMode_RoundHalfEven;
/**
 *  Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
 *
 *  Value: "ROUNDING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableFieldSchema_RoundingMode_RoundingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TableMetadataCacheUsage.unusedReason

/**
 *  Metadata cache was outside the table's maxStaleness.
 *
 *  Value: "EXCEEDED_MAX_STALENESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_ExceededMaxStaleness;
/**
 *  Metadata caching feature is not enabled. [Update BigLake tables]
 *  (/bigquery/docs/create-cloud-storage-table-biglake#update-biglake-tables) to
 *  enable the metadata caching.
 *
 *  Value: "METADATA_CACHING_NOT_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_MetadataCachingNotEnabled;
/**
 *  Other unknown reason.
 *
 *  Value: "OTHER_REASON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_OtherReason;
/**
 *  Unused reasons not specified.
 *
 *  Value: "UNUSED_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_UnusedReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TableReplicationInfo.replicationStatus

/**
 *  Replication is Active with no errors.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableReplicationInfo_ReplicationStatus_Active;
/**
 *  Source revoked replication permissions.
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableReplicationInfo_ReplicationStatus_PermissionDenied;
/**
 *  Default value.
 *
 *  Value: "REPLICATION_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableReplicationInfo_ReplicationStatus_ReplicationStatusUnspecified;
/**
 *  Source object is deleted.
 *
 *  Value: "SOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableReplicationInfo_ReplicationStatus_SourceDeleted;
/**
 *  Source configuration doesn’t allow replication.
 *
 *  Value: "UNSUPPORTED_CONFIGURATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TableReplicationInfo_ReplicationStatus_UnsupportedConfiguration;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.boosterType

/**
 *  Unspecified booster type.
 *
 *  Value: "BOOSTER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_BoosterTypeUnspecified;
/**
 *  Dart booster.
 *
 *  Value: "DART"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_Dart;
/**
 *  Gbtree booster.
 *
 *  Value: "GBTREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_Gbtree;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.categoryEncodingMethod

/**
 *  Applies dummy encoding.
 *
 *  Value: "DUMMY_ENCODING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_DummyEncoding;
/**
 *  Unspecified encoding method.
 *
 *  Value: "ENCODING_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_EncodingMethodUnspecified;
/**
 *  Applies label encoding.
 *
 *  Value: "LABEL_ENCODING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_LabelEncoding;
/**
 *  Applies one-hot encoding.
 *
 *  Value: "ONE_HOT_ENCODING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_OneHotEncoding;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.colorSpace

/**
 *  Unspecified color space
 *
 *  Value: "COLOR_SPACE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_ColorSpaceUnspecified;
/**
 *  GRAYSCALE
 *
 *  Value: "GRAYSCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Grayscale;
/**
 *  HSV
 *
 *  Value: "HSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Hsv;
/**
 *  RGB
 *
 *  Value: "RGB"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Rgb;
/**
 *  YIQ
 *
 *  Value: "YIQ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Yiq;
/**
 *  YUV
 *
 *  Value: "YUV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Yuv;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dartNormalizeType

/**
 *  Unspecified dart normalize type.
 *
 *  Value: "DART_NORMALIZE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_DartNormalizeTypeUnspecified;
/**
 *  New trees have the same weight of sum of dropped trees.
 *
 *  Value: "FOREST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_Forest;
/**
 *  New trees have the same weight of each of dropped trees.
 *
 *  Value: "TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_Tree;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dataFrequency

/**
 *  Automatically inferred from timestamps.
 *
 *  Value: "AUTO_FREQUENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_AutoFrequency;
/**
 *  Daily data.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Daily;
/**
 *  Default value.
 *
 *  Value: "DATA_FREQUENCY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_DataFrequencyUnspecified;
/**
 *  Hourly data.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Hourly;
/**
 *  Monthly data.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Monthly;
/**
 *  Per-minute data.
 *
 *  Value: "PER_MINUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_PerMinute;
/**
 *  Quarterly data.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Quarterly;
/**
 *  Weekly data.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Weekly;
/**
 *  Yearly data.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dataSplitMethod

/**
 *  Splits data automatically: Uses NO_SPLIT if the data size is small.
 *  Otherwise uses RANDOM.
 *
 *  Value: "AUTO_SPLIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_AutoSplit;
/**
 *  Splits data with the user provided tags.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Custom;
/**
 *  Default value.
 *
 *  Value: "DATA_SPLIT_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_DataSplitMethodUnspecified;
/**
 *  Data split will be skipped.
 *
 *  Value: "NO_SPLIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_NoSplit;
/**
 *  Splits data randomly.
 *
 *  Value: "RANDOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Random;
/**
 *  Splits data sequentially.
 *
 *  Value: "SEQUENTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Sequential;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.distanceType

/**
 *  Cosine distance.
 *
 *  Value: "COSINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Cosine;
/**
 *  Default value.
 *
 *  Value: "DISTANCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_DistanceTypeUnspecified;
/**
 *  Eculidean distance.
 *
 *  Value: "EUCLIDEAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Euclidean;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.feedbackType

/**
 *  Use nonweighted-als for explicit feedback problems.
 *
 *  Value: "EXPLICIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Explicit;
/**
 *  Default value.
 *
 *  Value: "FEEDBACK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_FeedbackTypeUnspecified;
/**
 *  Use weighted-als for implicit feedback problems.
 *
 *  Value: "IMPLICIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Implicit;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.holidayRegion

/**
 *  United Arab Emirates
 *
 *  Value: "AE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ae;
/**
 *  Argentina
 *
 *  Value: "AR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ar;
/**
 *  Austria
 *
 *  Value: "AT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_At;
/**
 *  Australia
 *
 *  Value: "AU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Au;
/**
 *  Belgium
 *
 *  Value: "BE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Be;
/**
 *  Brazil
 *
 *  Value: "BR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Br;
/**
 *  Canada
 *
 *  Value: "CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ca;
/**
 *  Switzerland
 *
 *  Value: "CH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ch;
/**
 *  Chile
 *
 *  Value: "CL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cl;
/**
 *  China
 *
 *  Value: "CN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cn;
/**
 *  Colombia
 *
 *  Value: "CO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Co;
/**
 *  Czechoslovakia
 *
 *  Value: "CS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cs;
/**
 *  Czech Republic
 *
 *  Value: "CZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cz;
/**
 *  Germany
 *
 *  Value: "DE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_De;
/**
 *  Denmark
 *
 *  Value: "DK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Dk;
/**
 *  Algeria
 *
 *  Value: "DZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Dz;
/**
 *  Ecuador
 *
 *  Value: "EC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ec;
/**
 *  Estonia
 *
 *  Value: "EE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ee;
/**
 *  Egypt
 *
 *  Value: "EG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Eg;
/**
 *  Europe, the Middle East and Africa.
 *
 *  Value: "EMEA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Emea;
/**
 *  Spain
 *
 *  Value: "ES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Es;
/**
 *  Finland
 *
 *  Value: "FI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Fi;
/**
 *  France
 *
 *  Value: "FR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Fr;
/**
 *  Great Britain (United Kingdom)
 *
 *  Value: "GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Gb;
/**
 *  Global.
 *
 *  Value: "GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Global;
/**
 *  Greece
 *
 *  Value: "GR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Gr;
/**
 *  Hong Kong
 *
 *  Value: "HK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Hk;
/**
 *  Holiday region unspecified.
 *
 *  Value: "HOLIDAY_REGION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_HolidayRegionUnspecified;
/**
 *  Hungary
 *
 *  Value: "HU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Hu;
/**
 *  Indonesia
 *
 *  Value: "ID"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Id;
/**
 *  Ireland
 *
 *  Value: "IE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ie;
/**
 *  Israel
 *
 *  Value: "IL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Il;
/**
 *  India
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_In;
/**
 *  Iran
 *
 *  Value: "IR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ir;
/**
 *  Italy
 *
 *  Value: "IT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_It;
/**
 *  Japan and Asia Pacific: Korea, Greater China, India, Australia, and New
 *  Zealand.
 *
 *  Value: "JAPAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Japac;
/**
 *  Japan
 *
 *  Value: "JP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Jp;
/**
 *  Korea (South)
 *
 *  Value: "KR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Kr;
/**
 *  Latin America and the Caribbean.
 *
 *  Value: "LAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Lac;
/**
 *  Latvia
 *
 *  Value: "LV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Lv;
/**
 *  Morocco
 *
 *  Value: "MA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ma;
/**
 *  Mexico
 *
 *  Value: "MX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Mx;
/**
 *  Malaysia
 *
 *  Value: "MY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_My;
/**
 *  North America.
 *
 *  Value: "NA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Na;
/**
 *  Nigeria
 *
 *  Value: "NG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ng;
/**
 *  Netherlands
 *
 *  Value: "NL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Nl;
/**
 *  Norway
 *
 *  Value: "NO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_No;
/**
 *  New Zealand
 *
 *  Value: "NZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Nz;
/**
 *  Peru
 *
 *  Value: "PE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pe;
/**
 *  Philippines
 *
 *  Value: "PH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ph;
/**
 *  Pakistan
 *
 *  Value: "PK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pk;
/**
 *  Poland
 *
 *  Value: "PL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pl;
/**
 *  Portugal
 *
 *  Value: "PT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pt;
/**
 *  Romania
 *
 *  Value: "RO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ro;
/**
 *  Serbia
 *
 *  Value: "RS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Rs;
/**
 *  Russian Federation
 *
 *  Value: "RU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ru;
/**
 *  Saudi Arabia
 *
 *  Value: "SA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sa;
/**
 *  Sweden
 *
 *  Value: "SE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Se;
/**
 *  Singapore
 *
 *  Value: "SG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sg;
/**
 *  Slovenia
 *
 *  Value: "SI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Si;
/**
 *  Slovakia
 *
 *  Value: "SK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sk;
/**
 *  Thailand
 *
 *  Value: "TH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Th;
/**
 *  Turkey
 *
 *  Value: "TR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Tr;
/**
 *  Taiwan
 *
 *  Value: "TW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Tw;
/**
 *  Ukraine
 *
 *  Value: "UA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ua;
/**
 *  United States
 *
 *  Value: "US"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Us;
/**
 *  Venezuela
 *
 *  Value: "VE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ve;
/**
 *  Viet Nam
 *
 *  Value: "VN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Vn;
/**
 *  South Africa
 *
 *  Value: "ZA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Za;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.holidayRegions

/**
 *  United Arab Emirates
 *
 *  Value: "AE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ae;
/**
 *  Argentina
 *
 *  Value: "AR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ar;
/**
 *  Austria
 *
 *  Value: "AT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_At;
/**
 *  Australia
 *
 *  Value: "AU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Au;
/**
 *  Belgium
 *
 *  Value: "BE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Be;
/**
 *  Brazil
 *
 *  Value: "BR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Br;
/**
 *  Canada
 *
 *  Value: "CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ca;
/**
 *  Switzerland
 *
 *  Value: "CH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ch;
/**
 *  Chile
 *
 *  Value: "CL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Cl;
/**
 *  China
 *
 *  Value: "CN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Cn;
/**
 *  Colombia
 *
 *  Value: "CO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Co;
/**
 *  Czechoslovakia
 *
 *  Value: "CS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Cs;
/**
 *  Czech Republic
 *
 *  Value: "CZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Cz;
/**
 *  Germany
 *
 *  Value: "DE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_De;
/**
 *  Denmark
 *
 *  Value: "DK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Dk;
/**
 *  Algeria
 *
 *  Value: "DZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Dz;
/**
 *  Ecuador
 *
 *  Value: "EC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ec;
/**
 *  Estonia
 *
 *  Value: "EE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ee;
/**
 *  Egypt
 *
 *  Value: "EG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Eg;
/**
 *  Europe, the Middle East and Africa.
 *
 *  Value: "EMEA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Emea;
/**
 *  Spain
 *
 *  Value: "ES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Es;
/**
 *  Finland
 *
 *  Value: "FI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Fi;
/**
 *  France
 *
 *  Value: "FR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Fr;
/**
 *  Great Britain (United Kingdom)
 *
 *  Value: "GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Gb;
/**
 *  Global.
 *
 *  Value: "GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Global;
/**
 *  Greece
 *
 *  Value: "GR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Gr;
/**
 *  Hong Kong
 *
 *  Value: "HK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Hk;
/**
 *  Holiday region unspecified.
 *
 *  Value: "HOLIDAY_REGION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_HolidayRegionUnspecified;
/**
 *  Hungary
 *
 *  Value: "HU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Hu;
/**
 *  Indonesia
 *
 *  Value: "ID"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Id;
/**
 *  Ireland
 *
 *  Value: "IE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ie;
/**
 *  Israel
 *
 *  Value: "IL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Il;
/**
 *  India
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_In;
/**
 *  Iran
 *
 *  Value: "IR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ir;
/**
 *  Italy
 *
 *  Value: "IT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_It;
/**
 *  Japan and Asia Pacific: Korea, Greater China, India, Australia, and New
 *  Zealand.
 *
 *  Value: "JAPAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Japac;
/**
 *  Japan
 *
 *  Value: "JP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Jp;
/**
 *  Korea (South)
 *
 *  Value: "KR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Kr;
/**
 *  Latin America and the Caribbean.
 *
 *  Value: "LAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Lac;
/**
 *  Latvia
 *
 *  Value: "LV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Lv;
/**
 *  Morocco
 *
 *  Value: "MA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ma;
/**
 *  Mexico
 *
 *  Value: "MX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Mx;
/**
 *  Malaysia
 *
 *  Value: "MY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_My;
/**
 *  North America.
 *
 *  Value: "NA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Na;
/**
 *  Nigeria
 *
 *  Value: "NG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ng;
/**
 *  Netherlands
 *
 *  Value: "NL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Nl;
/**
 *  Norway
 *
 *  Value: "NO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_No;
/**
 *  New Zealand
 *
 *  Value: "NZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Nz;
/**
 *  Peru
 *
 *  Value: "PE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Pe;
/**
 *  Philippines
 *
 *  Value: "PH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ph;
/**
 *  Pakistan
 *
 *  Value: "PK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Pk;
/**
 *  Poland
 *
 *  Value: "PL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Pl;
/**
 *  Portugal
 *
 *  Value: "PT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Pt;
/**
 *  Romania
 *
 *  Value: "RO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ro;
/**
 *  Serbia
 *
 *  Value: "RS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Rs;
/**
 *  Russian Federation
 *
 *  Value: "RU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ru;
/**
 *  Saudi Arabia
 *
 *  Value: "SA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Sa;
/**
 *  Sweden
 *
 *  Value: "SE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Se;
/**
 *  Singapore
 *
 *  Value: "SG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Sg;
/**
 *  Slovenia
 *
 *  Value: "SI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Si;
/**
 *  Slovakia
 *
 *  Value: "SK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Sk;
/**
 *  Thailand
 *
 *  Value: "TH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Th;
/**
 *  Turkey
 *
 *  Value: "TR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Tr;
/**
 *  Taiwan
 *
 *  Value: "TW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Tw;
/**
 *  Ukraine
 *
 *  Value: "UA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ua;
/**
 *  United States
 *
 *  Value: "US"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Us;
/**
 *  Venezuela
 *
 *  Value: "VE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Ve;
/**
 *  Viet Nam
 *
 *  Value: "VN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Vn;
/**
 *  South Africa
 *
 *  Value: "ZA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegions_Za;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.hparamTuningObjectives

/**
 *  Accuracy is the fraction of predictions given the correct label. For
 *  multiclass this is a globally micro-averaged metric.
 *
 *  Value: "ACCURACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Accuracy;
/**
 *  Average Rank.
 *
 *  Value: "AVERAGE_RANK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_AverageRank;
/**
 *  Davies-Bouldin Index.
 *
 *  Value: "DAVIES_BOULDIN_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_DaviesBouldinIndex;
/**
 *  Explained variance. explained_variance = 1 -
 *  VAR_POP(label_error)/VAR_POP(label)
 *
 *  Value: "EXPLAINED_VARIANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_ExplainedVariance;
/**
 *  The F1 score is an average of recall and precision. For multiclass this is a
 *  macro-averaged metric.
 *
 *  Value: "F1_SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_F1Score;
/**
 *  Unspecified evaluation metric.
 *
 *  Value: "HPARAM_TUNING_OBJECTIVE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_HparamTuningObjectiveUnspecified;
/**
 *  Logorithmic Loss. For multiclass this is a macro-averaged metric.
 *
 *  Value: "LOG_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_LogLoss;
/**
 *  Mean absolute error. mean_absolute_error = AVG(ABS(label - predicted))
 *
 *  Value: "MEAN_ABSOLUTE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanAbsoluteError;
/**
 *  Mean Average Precision.
 *
 *  Value: "MEAN_AVERAGE_PRECISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanAveragePrecision;
/**
 *  Mean squared error. mean_squared_error = AVG(POW(label - predicted, 2))
 *
 *  Value: "MEAN_SQUARED_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanSquaredError;
/**
 *  Mean squared log error. mean_squared_log_error = AVG(POW(LN(1 + label) -
 *  LN(1 + predicted), 2))
 *
 *  Value: "MEAN_SQUARED_LOG_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanSquaredLogError;
/**
 *  Mean absolute error. median_absolute_error =
 *  APPROX_QUANTILES(absolute_error, 2)[OFFSET(1)]
 *
 *  Value: "MEDIAN_ABSOLUTE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MedianAbsoluteError;
/**
 *  Normalized Discounted Cumulative Gain.
 *
 *  Value: "NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_NormalizedDiscountedCumulativeGain;
/**
 *  Precision is the fraction of actual positive predictions that had positive
 *  actual labels. For multiclass this is a macro-averaged metric treating each
 *  class as a binary classifier.
 *
 *  Value: "PRECISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Precision;
/**
 *  Recall is the fraction of actual positive labels that were given a positive
 *  prediction. For multiclass this is a macro-averaged metric.
 *
 *  Value: "RECALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Recall;
/**
 *  Area Under an ROC Curve. For multiclass this is a macro-averaged metric.
 *
 *  Value: "ROC_AUC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_RocAuc;
/**
 *  R^2 score. This corresponds to r2_score in ML.EVALUATE. r_squared = 1 -
 *  SUM(squared_error)/(COUNT(label)*VAR_POP(label))
 *
 *  Value: "R_SQUARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_RSquared;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.kmeansInitializationMethod

/**
 *  Initializes the centroids using data specified in
 *  kmeans_initialization_column.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Custom;
/**
 *  Unspecified initialization method.
 *
 *  Value: "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansInitializationMethodUnspecified;
/**
 *  Initializes with kmeans++.
 *
 *  Value: "KMEANS_PLUS_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansPlusPlus;
/**
 *  Initializes the centroids randomly.
 *
 *  Value: "RANDOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Random;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.learnRateStrategy

/**
 *  Use a constant learning rate.
 *
 *  Value: "CONSTANT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_Constant;
/**
 *  Default value.
 *
 *  Value: "LEARN_RATE_STRATEGY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LearnRateStrategyUnspecified;
/**
 *  Use line search to determine learning rate.
 *
 *  Value: "LINE_SEARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LineSearch;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.lossType

/**
 *  Default value.
 *
 *  Value: "LOSS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_LossTypeUnspecified;
/**
 *  Mean log loss, used for logistic regression.
 *
 *  Value: "MEAN_LOG_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanLogLoss;
/**
 *  Mean squared loss, used for linear regression.
 *
 *  Value: "MEAN_SQUARED_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanSquaredLoss;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.modelRegistry

/**
 *  Default value.
 *
 *  Value: "MODEL_REGISTRY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ModelRegistry_ModelRegistryUnspecified;
/**
 *  Vertex AI.
 *
 *  Value: "VERTEX_AI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ModelRegistry_VertexAi;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.optimizationStrategy

/**
 *  Uses an iterative batch gradient descent algorithm.
 *
 *  Value: "BATCH_GRADIENT_DESCENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_BatchGradientDescent;
/**
 *  Uses a normal equation to solve linear regression problem.
 *
 *  Value: "NORMAL_EQUATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_NormalEquation;
/**
 *  Default value.
 *
 *  Value: "OPTIMIZATION_STRATEGY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_OptimizationStrategyUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.pcaSolver

/**
 *  Auto.
 *
 *  Value: "AUTO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_PcaSolver_Auto;
/**
 *  Full eigen-decoposition.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_PcaSolver_Full;
/**
 *  Randomized SVD.
 *
 *  Value: "RANDOMIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_PcaSolver_Randomized;
/**
 *  Default value.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_PcaSolver_Unspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.treeMethod

/**
 *  Approximate greedy algorithm using quantile sketch and gradient histogram.
 *
 *  Value: "APPROX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Approx;
/**
 *  Use heuristic to choose the fastest method.
 *
 *  Value: "AUTO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Auto;
/**
 *  Exact greedy algorithm.
 *
 *  Value: "EXACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Exact;
/**
 *  Fast histogram optimized approximate greedy algorithm.
 *
 *  Value: "HIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Hist;
/**
 *  Unspecified tree method.
 *
 *  Value: "TREE_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_TreeMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_VectorSearchStatistics.indexUsageMode

/**
 *  The entire vector search query used vector indexes.
 *
 *  Value: "FULLY_USED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_FullyUsed;
/**
 *  Index usage mode not specified.
 *
 *  Value: "INDEX_USAGE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_IndexUsageModeUnspecified;
/**
 *  Part of the vector search query used vector indexes. See
 *  [`indexUnusedReasons`]
 *  (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for why other parts
 *  of the query did not use vector indexes.
 *
 *  Value: "PARTIALLY_USED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_PartiallyUsed;
/**
 *  No vector indexes were used in the vector search query. See
 *  [`indexUnusedReasons`]
 *  (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for detailed
 *  reasons.
 *
 *  Value: "UNUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_Unused;

/**
 *  Aggregate metrics for classification/classifier models. For multi-class
 *  models, the metrics are either macro-averaged or micro-averaged. When
 *  macro-averaged, the metrics are calculated for each label and then an
 *  unweighted average is taken of those values. When micro-averaged, the metric
 *  is calculated globally by counting the total number of correctly predicted
 *  rows.
 */
@interface GTLRBigquery_AggregateClassificationMetrics : GTLRObject

/**
 *  Accuracy is the fraction of predictions given the correct label. For
 *  multiclass this is a micro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracy;

/**
 *  The F1 score is an average of recall and precision. For multiclass this is a
 *  macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Logarithmic Loss. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLoss;

/**
 *  Precision is the fraction of actual positive predictions that had positive
 *  actual labels. For multiclass this is a macro-averaged metric treating each
 *  class as a binary classifier.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Recall is the fraction of actual positive labels that were given a positive
 *  prediction. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rocAuc;

/**
 *  Threshold at which the metrics are computed. For binary classification
 *  models this is the positive class threshold. For multi-class classfication
 *  models this is the confidence threshold.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threshold;

@end


/**
 *  Represents privacy policy associated with "aggregation threshold" method.
 */
@interface GTLRBigquery_AggregationThresholdPolicy : GTLRObject

/**
 *  Optional. The privacy unit column(s) associated with this policy. For now,
 *  only one column per data source object (table, view) is allowed as a privacy
 *  unit column. Representing as a repeated field in metadata for extensibility
 *  to multiple columns in future. Duplicates and Repeated struct fields are not
 *  allowed. For nested fields, use dot notation ("outer.inner")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *privacyUnitColumns;

/**
 *  Optional. The threshold for the "aggregation threshold" policy.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threshold;

@end


/**
 *  Input/output argument of a function or a stored procedure.
 */
@interface GTLRBigquery_Argument : GTLRObject

/**
 *  Optional. Defaults to FIXED_TYPE.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_AnyType The argument is any
 *        type, including struct or array, but not a table. To be added:
 *        FIXED_TABLE, ANY_TABLE (Value: "ANY_TYPE")
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_ArgumentKindUnspecified
 *        Default value. (Value: "ARGUMENT_KIND_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_FixedType The argument is a
 *        variable with fully specified type, which can be a struct or an array,
 *        but not a table. (Value: "FIXED_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *argumentKind;

/** Required unless argument_kind = ANY_TYPE. */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *dataType;

/**
 *  Optional. Whether the argument is an aggregate function parameter. Must be
 *  Unset for routine types other than AGGREGATE_FUNCTION. For
 *  AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT
 *  AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT
 *  AGGREGATE" clause in DDL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAggregate;

/**
 *  Optional. Specifies whether the argument is input or output. Can be set for
 *  procedures only.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Argument_Mode_In The argument is input-only. (Value:
 *        "IN")
 *    @arg @c kGTLRBigquery_Argument_Mode_Inout The argument is both an input
 *        and an output. (Value: "INOUT")
 *    @arg @c kGTLRBigquery_Argument_Mode_ModeUnspecified Default value. (Value:
 *        "MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Argument_Mode_Out The argument is output-only.
 *        (Value: "OUT")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. The name of this argument. Can be absent for function return
 *  argument.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Arima coefficients.
 */
@interface GTLRBigquery_ArimaCoefficients : GTLRObject

/**
 *  Auto-regressive coefficients, an array of double.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *autoRegressiveCoefficients;

/**
 *  Intercept coefficient, just a double not an array.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interceptCoefficient;

/**
 *  Moving-average coefficients, an array of double.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *movingAverageCoefficients;

@end


/**
 *  ARIMA model fitting metrics.
 */
@interface GTLRBigquery_ArimaFittingMetrics : GTLRObject

/**
 *  AIC.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aic;

/**
 *  Log-likelihood.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLikelihood;

/**
 *  Variance.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variance;

@end


/**
 *  Model evaluation metrics for ARIMA forecasting models.
 */
@interface GTLRBigquery_ArimaForecastingMetrics : GTLRObject

/** Arima model fitting metrics. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaFittingMetrics *> *arimaFittingMetrics GTLR_DEPRECATED;

/**
 *  Repeated as there can be many metric sets (one for each model) in auto-arima
 *  and the large-scale case.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaSingleModelForecastingMetrics *> *arimaSingleModelForecastingMetrics;

/**
 *  Whether Arima model fitted with drift or not. It is always false when d is
 *  not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *hasDrift GTLR_DEPRECATED;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaOrder *> *nonSeasonalOrder GTLR_DEPRECATED;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods GTLR_DEPRECATED;

/** Id to differentiate different time series for the large-scale case. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesId GTLR_DEPRECATED;

@end


/**
 *  Arima model information.
 */
@interface GTLRBigquery_ArimaModelInfo : GTLRObject

/** Arima coefficients. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaCoefficients *arimaCoefficients;

/** Arima fitting metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaFittingMetrics *arimaFittingMetrics;

/**
 *  Whether Arima model fitted with drift or not. It is always false when d is
 *  not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDrift;

/**
 *  If true, holiday_effect is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasHolidayEffect;

/**
 *  If true, spikes_and_dips is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasSpikesAndDips;

/**
 *  If true, step_changes is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasStepChanges;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

/**
 *  The time_series_id value for this time series. It will be one of the unique
 *  values from the time_series_id_column specified during ARIMA model training.
 *  Only present when time_series_id_column training option was used.
 */
@property(nonatomic, copy, nullable) NSString *timeSeriesId;

/**
 *  The tuple of time_series_ids identifying this time series. It will be one of
 *  the unique tuples of values present in the time_series_id_columns specified
 *  during ARIMA model training. Only present when time_series_id_columns
 *  training option was used and the order of values here are same as the order
 *  of time_series_id_columns.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIds;

@end


/**
 *  Arima order, can be used for both non-seasonal and seasonal parts.
 */
@interface GTLRBigquery_ArimaOrder : GTLRObject

/**
 *  Order of the differencing part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *d;

/**
 *  Order of the autoregressive part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p;

/**
 *  Order of the moving-average part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *q;

@end


/**
 *  (Auto-)arima fitting result. Wrap everything in ArimaResult for easier
 *  refactoring if we want to use model-specific iteration results.
 */
@interface GTLRBigquery_ArimaResult : GTLRObject

/**
 *  This message is repeated because there are multiple arima models fitted in
 *  auto-arima. For non-auto-arima model, its size is one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaModelInfo *> *arimaModelInfo;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

@end


/**
 *  Model evaluation metrics for a single ARIMA forecasting model.
 */
@interface GTLRBigquery_ArimaSingleModelForecastingMetrics : GTLRObject

/** Arima fitting metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaFittingMetrics *arimaFittingMetrics;

/**
 *  Is arima model fitted with drift or not. It is always false when d is not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDrift;

/**
 *  If true, holiday_effect is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasHolidayEffect;

/**
 *  If true, spikes_and_dips is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasSpikesAndDips;

/**
 *  If true, step_changes is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasStepChanges;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

/**
 *  The time_series_id value for this time series. It will be one of the unique
 *  values from the time_series_id_column specified during ARIMA model training.
 *  Only present when time_series_id_column training option was used.
 */
@property(nonatomic, copy, nullable) NSString *timeSeriesId;

/**
 *  The tuple of time_series_ids identifying this time series. It will be one of
 *  the unique tuples of values present in the time_series_id_columns specified
 *  during ARIMA model training. Only present when time_series_id_columns
 *  training option was used and the order of values here are same as the order
 *  of time_series_id_columns.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIds;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRBigquery_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRBigquery_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Options for external data sources.
 */
@interface GTLRBigquery_AvroOptions : GTLRObject

/**
 *  Optional. If sourceFormat is set to "AVRO", indicates whether to interpret
 *  logical types as the corresponding BigQuery data type (for example,
 *  TIMESTAMP), instead of using the raw type (for example, INTEGER).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

@end


/**
 *  Reason why BI Engine didn't accelerate the query (or sub-query).
 */
@interface GTLRBigquery_BiEngineReason : GTLRObject

/**
 *  Output only. High-level BI Engine reason for partial or disabled
 *  acceleration
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_CodeUnspecified BiEngineReason
 *        not specified. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_InputTooLarge Input too large
 *        for acceleration by BI Engine. (Value: "INPUT_TOO_LARGE")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_InsufficientReservation Not
 *        enough memory available for BI Engine acceleration. (Value:
 *        "INSUFFICIENT_RESERVATION")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_NoReservation No reservation
 *        available for BI Engine acceleration. (Value: "NO_RESERVATION")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_OtherReason Catch-all code for
 *        all other cases for partial or disabled acceleration. (Value:
 *        "OTHER_REASON")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_TableExcluded One or more tables
 *        were not eligible for BI Engine acceleration. (Value:
 *        "TABLE_EXCLUDED")
 *    @arg @c kGTLRBigquery_BiEngineReason_Code_UnsupportedSqlText This
 *        particular SQL text is not supported for acceleration by BI Engine.
 *        (Value: "UNSUPPORTED_SQL_TEXT")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Output only. Free form human-readable reason for partial or disabled
 *  acceleration.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Statistics for a BI Engine specific query. Populated as part of
 *  JobStatistics2
 */
@interface GTLRBigquery_BiEngineStatistics : GTLRObject

/**
 *  Output only. Specifies which mode of BI Engine acceleration was performed
 *  (if any).
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_BiEngineStatistics_AccelerationMode_BiEngineAccelerationModeUnspecified
 *        BiEngineMode type not specified. (Value:
 *        "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_AccelerationMode_BiEngineDisabled
 *        BI Engine acceleration was attempted but disabled. bi_engine_reasons
 *        specifies a more detailed reason. (Value: "BI_ENGINE_DISABLED")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_AccelerationMode_FullInput All of
 *        the query inputs were accelerated using BI Engine. (Value:
 *        "FULL_INPUT")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_AccelerationMode_FullQuery All of
 *        the query was accelerated using BI Engine. (Value: "FULL_QUERY")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_AccelerationMode_PartialInput
 *        Some inputs were accelerated using BI Engine. See bi_engine_reasons
 *        for why parts of the query were not accelerated. (Value:
 *        "PARTIAL_INPUT")
 */
@property(nonatomic, copy, nullable) NSString *accelerationMode;

/**
 *  Output only. Specifies which mode of BI Engine acceleration was performed
 *  (if any).
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_BiEngineStatistics_BiEngineMode_AccelerationModeUnspecified
 *        BiEngineMode type not specified. (Value:
 *        "ACCELERATION_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_BiEngineMode_Disabled BI Engine
 *        disabled the acceleration. bi_engine_reasons specifies a more detailed
 *        reason. (Value: "DISABLED")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_BiEngineMode_Full All of the
 *        query was accelerated using BI Engine. (Value: "FULL")
 *    @arg @c kGTLRBigquery_BiEngineStatistics_BiEngineMode_Partial Part of the
 *        query was accelerated using BI Engine. See bi_engine_reasons for why
 *        parts of the query were not accelerated. (Value: "PARTIAL")
 */
@property(nonatomic, copy, nullable) NSString *biEngineMode;

/**
 *  In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory
 *  reasons as to why BI Engine could not accelerate. In case the full query was
 *  accelerated, this field is not populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BiEngineReason *> *biEngineReasons;

@end


/**
 *  Configuration for BigLake managed tables.
 */
@interface GTLRBigquery_BigLakeConfiguration : GTLRObject

/**
 *  Required. The connection specifying the credentials to be used to read and
 *  write to external storage, such as Cloud Storage. The connection_id can have
 *  the form `{project}.{location}.{connection_id}` or
 *  `projects/{project}/locations/{location}/connections/{connection_id}".
 */
@property(nonatomic, copy, nullable) NSString *connectionId;

/**
 *  Required. The file format the table data is stored in.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_BigLakeConfiguration_FileFormat_FileFormatUnspecified
 *        Default Value. (Value: "FILE_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_BigLakeConfiguration_FileFormat_Parquet Apache
 *        Parquet format. (Value: "PARQUET")
 */
@property(nonatomic, copy, nullable) NSString *fileFormat;

/**
 *  Required. The fully qualified location prefix of the external folder where
 *  table data is stored. The '*' wildcard character is not allowed. The URI
 *  should be in the format `gs://bucket/path_to_table/`
 */
@property(nonatomic, copy, nullable) NSString *storageUri;

/**
 *  Required. The table format the metadata only snapshots are stored in.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_BigLakeConfiguration_TableFormat_Iceberg Apache
 *        Iceberg format. (Value: "ICEBERG")
 *    @arg @c kGTLRBigquery_BigLakeConfiguration_TableFormat_TableFormatUnspecified
 *        Default Value. (Value: "TABLE_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tableFormat;

@end


/**
 *  Information related to a Bigtable column.
 */
@interface GTLRBigquery_BigtableColumn : GTLRObject

/**
 *  Optional. The encoding of the values when the type is not STRING. Acceptable
 *  encoding values are: TEXT - indicates values are alphanumeric text strings.
 *  BINARY - indicates values are encoded using HBase Bytes.toBytes family of
 *  functions. 'encoding' can also be set at the column family level. However,
 *  the setting at this level takes precedence if 'encoding' is set at both
 *  levels.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  Optional. If the qualifier is not a valid BigQuery field identifier i.e.
 *  does not match a-zA-Z*, a valid identifier must be provided as the column
 *  field name and is used as field name in queries.
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

/**
 *  Optional. If this is set, only the latest version of value in this column
 *  are exposed. 'onlyReadLatest' can also be set at the column family level.
 *  However, the setting at this level takes precedence if 'onlyReadLatest' is
 *  set at both levels.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  [Required] Qualifier of the column. Columns in the parent column family that
 *  has this exact qualifier are exposed as `.` field. If the qualifier is valid
 *  UTF-8 string, it can be specified in the qualifier_string field. Otherwise,
 *  a base-64 encoded value must be set to qualifier_encoded. The column field
 *  name is the same as the column qualifier. However, if the qualifier is not a
 *  valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid
 *  identifier must be provided as field_name.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *qualifierEncoded;

/** Qualifier string. */
@property(nonatomic, copy, nullable) NSString *qualifierString;

/**
 *  Optional. The type to convert the value in cells of this column. The values
 *  are expected to be encoded using HBase Bytes.toBytes function when using the
 *  BINARY encoding value. Following BigQuery types are allowed
 *  (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON
 *  Default type is BYTES. 'type' can also be set at the column family level.
 *  However, the setting at this level takes precedence if 'type' is set at both
 *  levels.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information related to a Bigtable column family.
 */
@interface GTLRBigquery_BigtableColumnFamily : GTLRObject

/**
 *  Optional. Lists of columns that should be exposed as individual fields as
 *  opposed to a list of (column name, value) pairs. All columns whose qualifier
 *  matches a qualifier in this list can be accessed as `.`. Other columns can
 *  be accessed as a list through the `.Column` field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumn *> *columns;

/**
 *  Optional. The encoding of the values when the type is not STRING. Acceptable
 *  encoding values are: TEXT - indicates values are alphanumeric text strings.
 *  BINARY - indicates values are encoded using HBase Bytes.toBytes family of
 *  functions. This can be overridden for a specific column by listing that
 *  column in 'columns' and specifying an encoding for it.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/** Identifier of the column family. */
@property(nonatomic, copy, nullable) NSString *familyId;

/**
 *  Optional. If this is set only the latest version of value are exposed for
 *  all columns in this column family. This can be overridden for a specific
 *  column by listing that column in 'columns' and specifying a different
 *  setting for that column.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  Optional. The type to convert the value in cells of this column family. The
 *  values are expected to be encoded using HBase Bytes.toBytes function when
 *  using the BINARY encoding value. Following BigQuery types are allowed
 *  (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON
 *  Default type is BYTES. This can be overridden for a specific column by
 *  listing that column in 'columns' and specifying a type for it.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Options specific to Google Cloud Bigtable data sources.
 */
@interface GTLRBigquery_BigtableOptions : GTLRObject

/**
 *  Optional. List of column families to expose in the table schema along with
 *  their types. This list restricts the column families that can be referenced
 *  in queries and specifies their value types. You can use this list to do type
 *  conversions - see the 'type' field for more details. If you leave this list
 *  empty, all column families are present in the table schema and their values
 *  are read as BYTES. During a query only the column families referenced in
 *  that query are read from Bigtable.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumnFamily *> *columnFamilies;

/**
 *  Optional. If field is true, then the column families that are not specified
 *  in columnFamilies list are not exposed in the table schema. Otherwise, they
 *  are read with BYTES type values. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnspecifiedColumnFamilies;

/**
 *  Optional. If field is true, then each column family will be read as a single
 *  JSON column. Otherwise they are read as a repeated cell structure containing
 *  timestamp/value tuples. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputColumnFamiliesAsJson;

/**
 *  Optional. If field is true, then the rowkey column families will be read and
 *  converted to string. Otherwise they are read with BYTES type values and
 *  users need to manually cast them with CAST if necessary. The default value
 *  is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRowkeyAsString;

@end


/**
 *  Evaluation metrics for binary classification/classifier models.
 */
@interface GTLRBigquery_BinaryClassificationMetrics : GTLRObject

/** Aggregate classification metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_AggregateClassificationMetrics *aggregateClassificationMetrics;

/** Binary confusion matrix at multiple thresholds. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BinaryConfusionMatrix *> *binaryConfusionMatrixList;

/** Label representing the negative class. */
@property(nonatomic, copy, nullable) NSString *negativeLabel;

/** Label representing the positive class. */
@property(nonatomic, copy, nullable) NSString *positiveLabel;

@end


/**
 *  Confusion matrix for binary classification models.
 */
@interface GTLRBigquery_BinaryConfusionMatrix : GTLRObject

/**
 *  The fraction of predictions given the correct label.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracy;

/**
 *  The equally weighted average of recall and precision.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Number of false samples predicted as false.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falseNegatives;

/**
 *  Number of false samples predicted as true.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositives;

/**
 *  Threshold value used when computing each of the following metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *positiveClassThreshold;

/**
 *  The fraction of actual positive predictions that had positive actual labels.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  The fraction of actual positive labels that were given a positive
 *  prediction.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  Number of true samples predicted as false.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trueNegatives;

/**
 *  Number of true samples predicted as true.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truePositives;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRBigquery_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  GTLRBigquery_BqmlIterationResult
 */
@interface GTLRBigquery_BqmlIterationResult : GTLRObject

/**
 *  Deprecated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

@end


/**
 *  GTLRBigquery_BqmlTrainingRun
 */
@interface GTLRBigquery_BqmlTrainingRun : GTLRObject

/** Deprecated. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BqmlIterationResult *> *iterationResults;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** Deprecated. */
@property(nonatomic, copy, nullable) NSString *state;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRBigquery_BqmlTrainingRun_TrainingOptions *trainingOptions;

@end


/**
 *  Deprecated.
 */
@interface GTLRBigquery_BqmlTrainingRun_TrainingOptions : GTLRObject

/**
 *  earlyStop
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *earlyStop;

/**
 *  l1Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1Reg;

/**
 *  l2Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l2Reg;

/**
 *  learnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

@property(nonatomic, copy, nullable) NSString *learnRateStrategy;

/**
 *  lineSearchInitLearnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSearchInitLearnRate;

/**
 *  maxIteration
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIteration;

/**
 *  minRelProgress
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRelProgress;

/**
 *  warmStart
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warmStart;

@end


/**
 *  Representative value of a categorical feature.
 */
@interface GTLRBigquery_CategoricalValue : GTLRObject

/**
 *  Counts of all categories for the categorical feature. If there are more than
 *  ten categories, we return top ten (by count) and return one more
 *  CategoryCount with category "_OTHER_" and count as aggregate counts of
 *  remaining categories.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_CategoryCount *> *categoryCounts;

@end


/**
 *  Represents the count of a single category within the cluster.
 */
@interface GTLRBigquery_CategoryCount : GTLRObject

/** The name of category. */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  The count of training samples matching the category within the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

@end


/**
 *  Information about base table and clone time of a table clone.
 */
@interface GTLRBigquery_CloneDefinition : GTLRObject

/** Required. Reference describing the ID of the table that was cloned. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTableReference;

/**
 *  Required. The time at which the base table was cloned. This value is
 *  reported in the JSON response using RFC3339 format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *cloneTime;

@end


/**
 *  Message containing the information about one cluster.
 */
@interface GTLRBigquery_Cluster : GTLRObject

/**
 *  Centroid id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *centroidId;

/**
 *  Count of training data rows that were assigned to this cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Values of highly variant features for this cluster. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_FeatureValue *> *featureValues;

@end


/**
 *  Information about a single cluster for clustering model.
 */
@interface GTLRBigquery_ClusterInfo : GTLRObject

/**
 *  Centroid id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *centroidId;

/**
 *  Cluster radius, the average distance from centroid to each point assigned to
 *  the cluster.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clusterRadius;

/**
 *  Cluster size, the total number of points assigned to the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clusterSize;

@end


/**
 *  Configures table clustering.
 */
@interface GTLRBigquery_Clustering : GTLRObject

/**
 *  One or more fields on which data should be clustered. Only top-level,
 *  non-repeated, simple-type fields are supported. The ordering of the
 *  clustering fields should be prioritized from most to least important for
 *  filtering purposes. Additional information on limitations can be found here:
 *  https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fields;

@end


/**
 *  Evaluation metrics for clustering models.
 */
@interface GTLRBigquery_ClusteringMetrics : GTLRObject

/** Information for all clusters. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Cluster *> *clusters;

/**
 *  Davies-Bouldin index.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *daviesBouldinIndex;

/**
 *  Mean of squared distances between each sample to its cluster centroid.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredDistance;

@end


/**
 *  Confusion matrix for multi-class classification models.
 */
@interface GTLRBigquery_ConfusionMatrix : GTLRObject

/**
 *  Confidence threshold used when computing the entries of the confusion
 *  matrix.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/** One row per actual label. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Row *> *rows;

@end


/**
 *  A connection-level property to customize query behavior. Under JDBC, these
 *  correspond directly to connection properties passed to the DriverManager.
 *  Under ODBC, these correspond to properties in the connection string.
 *  Currently supported connection properties: * **dataset_project_id**:
 *  represents the default project for datasets that are used in the query.
 *  Setting the system variable `\@\@dataset_project_id` achieves the same
 *  behavior. For more information about system variables, see:
 *  https://cloud.google.com/bigquery/docs/reference/system-variables *
 *  **time_zone**: represents the default timezone used to run the query. *
 *  **session_id**: associates the query with a given session. *
 *  **query_label**: associates the query with a given job label. If set, all
 *  subsequent queries in a script or session will have this label. For the
 *  format in which a you can specify a query label, see labels in the
 *  JobConfiguration resource type:
 *  https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration
 *  * **service_account**: indicates the service account to use to run a
 *  continuous query. If set, the query job uses the service account to access
 *  Google Cloud resources. Service account access is bounded by the IAM
 *  permissions that you have granted to the service account. Additional
 *  properties are allowed, but ignored. Specifying multiple connection
 *  properties with the same key returns an error.
 */
@interface GTLRBigquery_ConnectionProperty : GTLRObject

/** The key of the property to set. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the property to set. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Information related to a CSV data source.
 */
@interface GTLRBigquery_CsvOptions : GTLRObject

/**
 *  Optional. Indicates if BigQuery should accept rows that are missing trailing
 *  optional columns. If true, BigQuery treats missing trailing columns as null
 *  values. If false, records with missing trailing columns are treated as bad
 *  records, and if there are too many bad records, an invalid error is returned
 *  in the job result. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  Optional. Indicates if BigQuery should allow quoted data sections that
 *  contain newline characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  Optional. The character encoding of the data. The supported values are
 *  UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default
 *  value is UTF-8. BigQuery decodes the data after the raw, binary data has
 *  been split using the values of the quote and fieldDelimiter properties.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  Optional. The separator character for fields in a CSV file. The separator is
 *  interpreted as a single byte. For files encoded in ISO-8859-1, any single
 *  character can be used as a separator. For files encoded in UTF-8, characters
 *  represented in decimal range 1-127 (U+0001-U+007F) can be used without any
 *  modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and
 *  above) will have only the first byte used for separating fields. The
 *  remaining bytes will be treated as a part of the field. BigQuery also
 *  supports the escape sequence "\\t" (U+0009) to specify a tab separator. The
 *  default value is comma (",", U+002C).
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  Optional. Specifies a string that represents a null value in a CSV file. For
 *  example, if you specify "\\N", BigQuery interprets "\\N" as a null value
 *  when querying a CSV file. The default value is the empty string. If you set
 *  this property to a custom value, BigQuery throws an error if an empty string
 *  is present for all data types except for STRING and BYTE. For STRING and
 *  BYTE columns, BigQuery interprets the empty string as an empty value.
 */
@property(nonatomic, copy, nullable) NSString *nullMarker;

/**
 *  Optional. Indicates if the embedded ASCII control characters (the first 32
 *  characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveAsciiControlCharacters;

/**
 *  Optional. The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ("). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true. To include the specific quote character within a quoted
 *  value, precede it with an additional matching quote character. For example,
 *  if you want to escape the default character ' " ', use ' "" '.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  Optional. The number of rows at the top of a CSV file that BigQuery will
 *  skip when reading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped. When autodetect
 *  is on, the behavior is the following: * skipLeadingRows unspecified -
 *  Autodetect tries to detect headers in the first row. If they are not
 *  detected, the row is read as data. Otherwise data is read starting from the
 *  second row. * skipLeadingRows is 0 - Instructs autodetect that there are no
 *  headers and data should be read starting from the first row. *
 *  skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
 *  headers in row N. If headers are not detected, row N is just skipped.
 *  Otherwise row N is used to extract column names for the detected schema.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  Options for data format adjustments.
 */
@interface GTLRBigquery_DataFormatOptions : GTLRObject

/**
 *  Optional. Output timestamp as usec int64. Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useInt64Timestamp;

@end


/**
 *  Statistics for data-masking.
 */
@interface GTLRBigquery_DataMaskingStatistics : GTLRObject

/**
 *  Whether any accessed data was protected by the data masking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataMaskingApplied;

@end


/**
 *  Data policy option proto, it currently supports name only, will support
 *  precedence later.
 */
@interface GTLRBigquery_DataPolicyOption : GTLRObject

/**
 *  Data policy resource name in the form of
 *  projects/project_id/locations/location_id/dataPolicies/data_policy_id.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents a BigQuery dataset.
 */
@interface GTLRBigquery_Dataset : GTLRObject

/**
 *  Optional. An array of objects that define dataset access for one or more
 *  entities. You can set this property when inserting or updating a dataset in
 *  order to control who is allowed to access the data. If unspecified at
 *  dataset creation time, BigQuery adds default dataset access for the
 *  following entities: access.specialGroup: projectReaders; access.role:
 *  READER; access.specialGroup: projectWriters; access.role: WRITER;
 *  access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail:
 *  [dataset creator email]; access.role: OWNER; If you patch a dataset, then
 *  this field is overwritten by the patched dataset's access field. To add
 *  entities, you must supply the entire existing access array in addition to
 *  any new entities that you want to add.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Dataset_Access_Item *> *access;

/**
 *  Output only. The time when this dataset was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** Required. A reference that identifies the dataset. */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/**
 *  Optional. Defines the default collation specification of future tables
 *  created in the dataset. If a table is created in this dataset without
 *  table-level default collation, then the table inherits the dataset default
 *  collation, which is applied to the string fields that do not have explicit
 *  collation specified. A change to this field affects only tables created
 *  afterwards, and does not alter the existing tables. The following values are
 *  supported: * 'und:ci': undetermined locale, case insensitive. * '': empty
 *  string. Default to case-sensitive behavior.
 */
@property(nonatomic, copy, nullable) NSString *defaultCollation;

/**
 *  The default encryption key for all tables in the dataset. After this
 *  property is set, the encryption key of all newly-created tables in the
 *  dataset is set to this value unless the table creation request or query
 *  explicitly overrides the key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *defaultEncryptionConfiguration;

/**
 *  This default partition expiration, expressed in milliseconds. When new
 *  time-partitioned tables are created in a dataset where this property is set,
 *  the table will inherit this value, propagated as the
 *  `TimePartitioning.expirationMs` property on the new table. If you set
 *  `TimePartitioning.expirationMs` explicitly when creating a table, the
 *  `defaultPartitionExpirationMs` of the containing dataset is ignored. When
 *  creating a partitioned table, if `defaultPartitionExpirationMs` is set, the
 *  `defaultTableExpirationMs` value is ignored and the table will not be
 *  inherit a table expiration deadline.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultPartitionExpirationMs;

/**
 *  Optional. Defines the default rounding mode specification of new tables
 *  created within this dataset. During table creation, if this field is
 *  specified, the table within this dataset will inherit the default rounding
 *  mode of the dataset. Setting the default rounding mode on a table overrides
 *  this option. Existing tables in the dataset are unaffected. If columns are
 *  defined during that table creation, they will immediately inherit the
 *  table's default rounding mode, unless otherwise specified.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Dataset_DefaultRoundingMode_RoundHalfAwayFromZero
 *        ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9
 *        => 2 (Value: "ROUND_HALF_AWAY_FROM_ZERO")
 *    @arg @c kGTLRBigquery_Dataset_DefaultRoundingMode_RoundHalfEven
 *        ROUND_HALF_EVEN rounds half values to the nearest even value when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8,
 *        1.9 => 2 2.5 => 2 (Value: "ROUND_HALF_EVEN")
 *    @arg @c kGTLRBigquery_Dataset_DefaultRoundingMode_RoundingModeUnspecified
 *        Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO. (Value:
 *        "ROUNDING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *defaultRoundingMode;

/**
 *  Optional. The default lifetime of all tables in the dataset, in
 *  milliseconds. The minimum lifetime value is 3600000 milliseconds (one hour).
 *  To clear an existing default expiration with a PATCH request, set to 0. Once
 *  this property is set, all newly-created tables in the dataset will have an
 *  expirationTime property set to the creation time plus the value in this
 *  property, and changing the value will only affect new tables, not existing
 *  ones. When the expirationTime for a given table is reached, that table will
 *  be deleted automatically. If a table's expirationTime is modified or removed
 *  before the table expires, or if you provide an explicit expirationTime when
 *  creating a table, that value takes precedence over the default expiration
 *  time indicated by this property.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultTableExpirationMs;

/**
 *  Optional. A user-friendly description of the dataset.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. A hash of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Options defining open source compatible datasets living in the
 *  BigQuery catalog. Contains metadata of open source database, schema or
 *  namespace represented by the current dataset.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalCatalogDatasetOptions *externalCatalogDatasetOptions;

/**
 *  Optional. Reference to a read-only external dataset defined in data catalogs
 *  outside of BigQuery. Filled out when the dataset type is EXTERNAL.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalDatasetReference *externalDatasetReference;

/** Optional. A descriptive name for the dataset. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  Output only. The fully-qualified unique name of the dataset in the format
 *  projectId:datasetId. The dataset name without the project name is given in
 *  the datasetId field. When creating a new dataset, leave this field blank,
 *  and instead specify the datasetId field.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. TRUE if the dataset and its table names are case-insensitive,
 *  otherwise FALSE. By default, this is FALSE, which means the dataset and its
 *  table names are case-sensitive. This field does not affect routine
 *  references.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCaseInsensitive;

/** Output only. The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See [Creating and Updating Dataset
 *  Labels](https://cloud.google.com/bigquery/docs/creating-managing-labels#creating_and_updating_dataset_labels)
 *  for more information.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Dataset_Labels *labels;

/**
 *  Output only. The date when this dataset was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  Output only. Metadata about the LinkedDataset. Filled out when the dataset
 *  type is LINKED.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_LinkedDatasetMetadata *linkedDatasetMetadata;

/**
 *  Optional. The source dataset reference when the dataset is of type LINKED.
 *  For all other dataset types it is not set. This field cannot be updated once
 *  it is set. Any attempt to update this field using Update and Patch API
 *  Operations will be ignored.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_LinkedDatasetSource *linkedDatasetSource;

/**
 *  The geographic location where the dataset should reside. See
 *  https://cloud.google.com/bigquery/docs/locations for supported locations.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Defines the time travel window in hours. The value can be from 48
 *  to 168 hours (2 to 7 days). The default value is 168 hours if this is not
 *  set.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTimeTravelHours;

/**
 *  Optional. The [tags](https://cloud.google.com/bigquery/docs/tags) attached
 *  to this dataset. Tag keys are globally unique. Tag key is expected to be in
 *  the namespaced format, for example "123456789012/environment" where
 *  123456789012 is the ID of the parent organization or project resource for
 *  this tag key. Tag value is expected to be the short name, for example
 *  "Production". See [Tag
 *  definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
 *  for more details.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Dataset_ResourceTags *resourceTags;

/**
 *  Optional. Output only. Restriction config for all tables and dataset. If
 *  set, restrict certain accesses on the dataset and all its tables based on
 *  the config. See [Data
 *  egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
 *  for more details.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RestrictionConfig *restrictions;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzi;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. A URL that can be used to access the resource again. You can
 *  use this URL in Get or Update requests to the resource.
 */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Optional. Updates storage_billing_model for the dataset.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Dataset_StorageBillingModel_Logical Billing for
 *        logical bytes. (Value: "LOGICAL")
 *    @arg @c kGTLRBigquery_Dataset_StorageBillingModel_Physical Billing for
 *        physical bytes. (Value: "PHYSICAL")
 *    @arg @c kGTLRBigquery_Dataset_StorageBillingModel_StorageBillingModelUnspecified
 *        Value not set. (Value: "STORAGE_BILLING_MODEL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *storageBillingModel;

/**
 *  Output only. Tags for the dataset. To provide tags as inputs, use the
 *  `resourceTags` field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Dataset_Tags_Item *> *tags GTLR_DEPRECATED;

/**
 *  Output only. Same as `type` in `ListFormatDataset`. The type of the dataset,
 *  one of: * DEFAULT - only accessible by owner and authorized accounts, *
 *  PUBLIC - accessible by everyone, * LINKED - linked dataset, * EXTERNAL -
 *  dataset with definition in external metadata catalog.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  An object that defines dataset access for an entity.
 */
@interface GTLRBigquery_Dataset_Access_Item : GTLRObject

/**
 *  [Pick one] A grant authorizing all resources of a particular type in a
 *  particular dataset access to this dataset. Only views are supported for now.
 *  The role field is not required when this field is set. If that dataset is
 *  deleted and re-created, its access needs to be granted again via an update
 *  operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetAccessEntry *dataset;

/**
 *  [Pick one] A domain to grant access to. Any users signed in with the domain
 *  specified will be granted the specified access. Example: "example.com". Maps
 *  to IAM policy member "domain:DOMAIN".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  [Pick one] An email address of a Google Group to grant access to. Maps to
 *  IAM policy member "group:GROUP".
 */
@property(nonatomic, copy, nullable) NSString *groupByEmail;

/**
 *  [Pick one] Some other type of member that appears in the IAM Policy but
 *  isn't a user, group, domain, or special group.
 */
@property(nonatomic, copy, nullable) NSString *iamMember;

/**
 *  An IAM role ID that should be granted to the user, group, or domain
 *  specified in this access entry. The following legacy mappings will be
 *  applied: * `OWNER`: `roles/bigquery.dataOwner` * `WRITER`:
 *  `roles/bigquery.dataEditor` * `READER`: `roles/bigquery.dataViewer` This
 *  field will accept any of the above formats, but will return only the legacy
 *  format. For example, if you set this field to "roles/bigquery.dataOwner", it
 *  will be returned back as "OWNER".
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  [Pick one] A routine from a different dataset to grant access to. Queries
 *  executed against that routine will have read access to views/tables/routines
 *  in this dataset. Only UDF is supported for now. The role field is not
 *  required when this field is set. If that routine is updated by any user,
 *  access to the routine needs to be granted again via an update operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *routine;

/**
 *  [Pick one] A special group to grant access to. Possible values include: *
 *  projectOwners: Owners of the enclosing project. * projectReaders: Readers of
 *  the enclosing project. * projectWriters: Writers of the enclosing project. *
 *  allAuthenticatedUsers: All authenticated BigQuery users. Maps to
 *  similarly-named IAM members.
 */
@property(nonatomic, copy, nullable) NSString *specialGroup;

/**
 *  [Pick one] An email address of a user to grant access to. For example:
 *  fred\@example.com. Maps to IAM policy member "user:EMAIL" or
 *  "serviceAccount:EMAIL".
 */
@property(nonatomic, copy, nullable) NSString *userByEmail;

/**
 *  [Pick one] A view from a different dataset to grant access to. Queries
 *  executed against that view will have read access to views/tables/routines in
 *  this dataset. The role field is not required when this field is set. If that
 *  view is updated by any user, access to the view needs to be granted again
 *  via an update operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *view;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See [Creating and Updating Dataset
 *  Labels](https://cloud.google.com/bigquery/docs/creating-managing-labels#creating_and_updating_dataset_labels)
 *  for more information.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Dataset_Labels : GTLRObject
@end


/**
 *  Optional. The [tags](https://cloud.google.com/bigquery/docs/tags) attached
 *  to this dataset. Tag keys are globally unique. Tag key is expected to be in
 *  the namespaced format, for example "123456789012/environment" where
 *  123456789012 is the ID of the parent organization or project resource for
 *  this tag key. Tag value is expected to be the short name, for example
 *  "Production". See [Tag
 *  definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
 *  for more details.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Dataset_ResourceTags : GTLRObject
@end


/**
 *  A global tag managed by Resource Manager.
 *  https://cloud.google.com/iam/docs/tags-access-control#definitions
 */
@interface GTLRBigquery_Dataset_Tags_Item : GTLRObject

/**
 *  Required. The namespaced friendly name of the tag key, e.g.
 *  "12345/environment" where 12345 is org id.
 */
@property(nonatomic, copy, nullable) NSString *tagKey;

/** Required. The friendly short name of the tag value, e.g. "production". */
@property(nonatomic, copy, nullable) NSString *tagValue;

@end


/**
 *  Grants all resources of particular types in a particular dataset read access
 *  to the current dataset. Similar to how individually authorized views work,
 *  updates to any resource granted through its dataset (including creation of
 *  new resources) requires read permission to referenced resources, plus write
 *  permission to the authorizing dataset.
 */
@interface GTLRBigquery_DatasetAccessEntry : GTLRObject

/** The dataset this entry applies to */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *dataset;

/**
 *  Which resources in the dataset this entry applies to. Currently, only views
 *  are supported, but additional target types may be added in the future.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *targetTypes;

@end


/**
 *  Response format for a page of results when listing datasets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "datasets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_DatasetList : GTLRCollectionObject

/**
 *  An array of the dataset resources in the project. Each resource contains
 *  basic information. For full information about a particular dataset resource,
 *  use the Datasets: get method. This property is omitted when there are no
 *  datasets in the project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_DatasetList_Datasets_Item *> *datasets;

/**
 *  Output only. A hash value of the results page. You can use this property to
 *  determine if the page has changed since the last request.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. The resource type. This property always returns the value
 *  "bigquery#datasetList"
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token that can be used to request the next results page. This property is
 *  omitted on the final results page.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of skipped locations that were unreachable. For more information
 *  about BigQuery locations, see:
 *  https://cloud.google.com/bigquery/docs/locations. Example: "europe-west5"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A dataset resource with only a subset of fields, to be returned in a list of
 *  datasets.
 */
@interface GTLRBigquery_DatasetList_Datasets_Item : GTLRObject

/**
 *  The dataset reference. Use this property to access specific parts of the
 *  dataset's ID, such as project ID or dataset ID.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/**
 *  An alternate name for the dataset. The friendly name is purely decorative in
 *  nature.
 */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  The fully-qualified, unique, opaque ID of the dataset.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The resource type. This property always returns the value "bigquery#dataset"
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetList_Datasets_Item_Labels *labels;

/** The geographic location where the dataset resides. */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_DatasetList_Datasets_Item_Labels : GTLRObject
@end


/**
 *  Identifier for a dataset.
 */
@interface GTLRBigquery_DatasetReference : GTLRObject

/**
 *  Required. A unique ID for this dataset, without the project name. The ID
 *  must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The
 *  maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** Optional. The ID of the project containing this dataset. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Data split result. This contains references to the training and evaluation
 *  data tables that were used to train the model.
 */
@interface GTLRBigquery_DataSplitResult : GTLRObject

/** Table reference of the evaluation data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *evaluationTable;

/** Table reference of the test data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *testTable;

/** Table reference of the training data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *trainingTable;

@end


/**
 *  Properties for the destination table.
 */
@interface GTLRBigquery_DestinationTableProperties : GTLRObject

/**
 *  Optional. The description for the destination table. This will only be used
 *  if the destination table is newly created. If the table already exists and a
 *  value different than the current description is provided, the job will fail.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Internal use only. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  Optional. Friendly name for the destination table. If the table already
 *  exists, it should be same as the existing friendly name.
 */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  Optional. The labels associated with this table. You can use these to
 *  organize and group your tables. This will only be used if the destination
 *  table is newly created. If the table already exists and labels are different
 *  than the current labels are provided, the job will fail.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DestinationTableProperties_Labels *labels;

@end


/**
 *  Optional. The labels associated with this table. You can use these to
 *  organize and group your tables. This will only be used if the destination
 *  table is newly created. If the table already exists and labels are different
 *  than the current labels are provided, the job will fail.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_DestinationTableProperties_Labels : GTLRObject
@end


/**
 *  Represents privacy policy associated with "differential privacy" method.
 */
@interface GTLRBigquery_DifferentialPrivacyPolicy : GTLRObject

/**
 *  Optional. The total delta budget for all queries against the
 *  privacy-protected view. Each subscriber query against this view charges the
 *  amount of delta that is pre-defined by the contributor through the privacy
 *  policy delta_per_query field. If there is sufficient budget, then the
 *  subscriber query attempts to complete. It might still fail due to other
 *  reasons, in which case the charge is refunded. If there is insufficient
 *  budget the query is rejected. There might be multiple charge attempts if a
 *  single query references multiple views. In this case there must be
 *  sufficient budget for all charges or the query is rejected and charges are
 *  refunded in best effort. The budget does not have a refresh policy and can
 *  only be updated via ALTER VIEW or circumvented by creating a new view that
 *  can be queried with a fresh budget.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deltaBudget;

/**
 *  Output only. The delta budget remaining. If budget is exhausted, no more
 *  queries are allowed. Note that the budget for queries that are in progress
 *  is deducted before the query executes. If the query fails or is cancelled
 *  then the budget is refunded. In this case the amount of budget remaining can
 *  increase.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deltaBudgetRemaining;

/**
 *  Optional. The delta value that is used per query. Delta represents the
 *  probability that any row will fail to be epsilon differentially private.
 *  Indicates the risk associated with exposing aggregate rows in the result of
 *  a query.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deltaPerQuery;

/**
 *  Optional. The total epsilon budget for all queries against the
 *  privacy-protected view. Each subscriber query against this view charges the
 *  amount of epsilon they request in their query. If there is sufficient
 *  budget, then the subscriber query attempts to complete. It might still fail
 *  due to other reasons, in which case the charge is refunded. If there is
 *  insufficient budget the query is rejected. There might be multiple charge
 *  attempts if a single query references multiple views. In this case there
 *  must be sufficient budget for all charges or the query is rejected and
 *  charges are refunded in best effort. The budget does not have a refresh
 *  policy and can only be updated via ALTER VIEW or circumvented by creating a
 *  new view that can be queried with a fresh budget.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *epsilonBudget;

/**
 *  Output only. The epsilon budget remaining. If budget is exhausted, no more
 *  queries are allowed. Note that the budget for queries that are in progress
 *  is deducted before the query executes. If the query fails or is cancelled
 *  then the budget is refunded. In this case the amount of budget remaining can
 *  increase.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *epsilonBudgetRemaining;

/**
 *  Optional. The maximum epsilon value that a query can consume. If the
 *  subscriber specifies epsilon as a parameter in a SELECT query, it must be
 *  less than or equal to this value. The epsilon parameter controls the amount
 *  of noise that is added to the groups — a higher epsilon means less noise.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxEpsilonPerQuery;

/**
 *  Optional. The maximum groups contributed value that is used per query.
 *  Represents the maximum number of groups to which each protected entity can
 *  contribute. Changing this value does not improve or worsen privacy. The best
 *  value for accuracy and utility depends on the query and data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxGroupsContributed;

/**
 *  Optional. The privacy unit column associated with this policy. Differential
 *  privacy policies can only have one privacy unit column per data source
 *  object (table, view).
 */
@property(nonatomic, copy, nullable) NSString *privacyUnitColumn;

@end


/**
 *  Model evaluation metrics for dimensionality reduction models.
 */
@interface GTLRBigquery_DimensionalityReductionMetrics : GTLRObject

/**
 *  Total percentage of variance explained by the selected principal components.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalExplainedVarianceRatio;

@end


/**
 *  Detailed statistics for DML statements
 */
@interface GTLRBigquery_DmlStatistics : GTLRObject

/**
 *  Output only. Number of deleted Rows. populated by DML DELETE, MERGE and
 *  TRUNCATE statements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletedRowCount;

/**
 *  Output only. Number of inserted Rows. Populated by DML INSERT and MERGE
 *  statements
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertedRowCount;

/**
 *  Output only. Number of updated Rows. Populated by DML UPDATE and MERGE
 *  statements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updatedRowCount;

@end


/**
 *  Discrete candidates of a double hyperparameter.
 */
@interface GTLRBigquery_DoubleCandidates : GTLRObject

/**
 *  Candidates for the double parameter in increasing order.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *candidates;

@end


/**
 *  Search space for a double hyperparameter.
 */
@interface GTLRBigquery_DoubleHparamSearchSpace : GTLRObject

/** Candidates of the double hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleCandidates *candidates;

/** Range of the double hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleRange *range;

@end


/**
 *  Range of a double hyperparameter.
 */
@interface GTLRBigquery_DoubleRange : GTLRObject

/**
 *  Max value of the double parameter.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  Min value of the double parameter.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

@end


/**
 *  Configuration for Cloud KMS encryption settings.
 */
@interface GTLRBigquery_EncryptionConfiguration : GTLRObject

/**
 *  Optional. Describes the Cloud KMS encryption key that will be used to
 *  protect destination BigQuery table. The BigQuery Service Account associated
 *  with your project requires access to this encryption key.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  A single entry in the confusion matrix.
 */
@interface GTLRBigquery_Entry : GTLRObject

/**
 *  Number of items being predicted as this label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *itemCount;

/**
 *  The predicted label. For confidence_threshold > 0, we will also add an entry
 *  indicating the number of items under the confidence threshold.
 */
@property(nonatomic, copy, nullable) NSString *predictedLabel;

@end


/**
 *  Error details.
 */
@interface GTLRBigquery_ErrorProto : GTLRObject

/**
 *  Debugging information. This property is internal to Google and should not be
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *debugInfo;

/** Specifies where the error occurred, if present. */
@property(nonatomic, copy, nullable) NSString *location;

/** A human-readable description of the error. */
@property(nonatomic, copy, nullable) NSString *message;

/** A short error code that summarizes the error. */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Evaluation metrics of a model. These are either computed on all training
 *  data or just the eval data based on whether eval data was used during
 *  training. These are not present for imported models.
 */
@interface GTLRBigquery_EvaluationMetrics : GTLRObject

/** Populated for ARIMA models. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaForecastingMetrics *arimaForecastingMetrics;

/** Populated for binary classification/classifier models. */
@property(nonatomic, strong, nullable) GTLRBigquery_BinaryClassificationMetrics *binaryClassificationMetrics;

/** Populated for clustering models. */
@property(nonatomic, strong, nullable) GTLRBigquery_ClusteringMetrics *clusteringMetrics;

/**
 *  Evaluation metrics when the model is a dimensionality reduction model, which
 *  currently includes PCA.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DimensionalityReductionMetrics *dimensionalityReductionMetrics;

/** Populated for multi-class classification/classifier models. */
@property(nonatomic, strong, nullable) GTLRBigquery_MultiClassClassificationMetrics *multiClassClassificationMetrics;

/** Populated for implicit feedback type matrix factorization models. */
@property(nonatomic, strong, nullable) GTLRBigquery_RankingMetrics *rankingMetrics;

/**
 *  Populated for regression models and explicit feedback type matrix
 *  factorization models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RegressionMetrics *regressionMetrics;

@end


/**
 *  A single stage of query execution.
 */
@interface GTLRBigquery_ExplainQueryStage : GTLRObject

/**
 *  Number of parallel input segments completed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedParallelInputs;

/**
 *  Output only. Compute mode for this stage.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ExplainQueryStage_ComputeMode_BiEngine This stage
 *        was processed using BI Engine compute. (Value: "BI_ENGINE")
 *    @arg @c kGTLRBigquery_ExplainQueryStage_ComputeMode_Bigquery This stage
 *        was processed using BigQuery slots. (Value: "BIGQUERY")
 *    @arg @c kGTLRBigquery_ExplainQueryStage_ComputeMode_ComputeModeUnspecified
 *        ComputeMode type not specified. (Value: "COMPUTE_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *computeMode;

/**
 *  Milliseconds the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsAvg;

/**
 *  Milliseconds the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsMax;

/**
 *  Relative amount of time the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioMax;

/**
 *  Stage end time represented as milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endMs;

/**
 *  Unique ID for the stage within the plan.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  IDs for stages that are inputs to this stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *inputStages;

/** Human-readable name for the stage. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Number of parallel input segments to be processed
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelInputs;

/**
 *  Milliseconds the average shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsAvg;

/**
 *  Milliseconds the slowest shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsMax;

/**
 *  Relative amount of time the average shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioAvg;

/**
 *  Relative amount of time the slowest shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioMax;

/**
 *  Number of records read into the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsRead;

/**
 *  Number of records written by the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsWritten;

/**
 *  Total number of bytes written to shuffle.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytes;

/**
 *  Total number of bytes written to shuffle and spilled to disk.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytesSpilled;

/**
 *  Slot-milliseconds used by the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

/**
 *  Stage start time represented as milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startMs;

/** Current status for this stage. */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  List of operations within the stage in dependency order (approximately
 *  chronological).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStep *> *steps;

/**
 *  Milliseconds the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsAvg;

/**
 *  Milliseconds the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsMax;

/**
 *  Relative amount of time the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioAvg;

/**
 *  Relative amount of time the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioMax;

/**
 *  Milliseconds the average shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsAvg;

/**
 *  Milliseconds the slowest shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsMax;

/**
 *  Relative amount of time the average shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioMax;

@end


/**
 *  An operation within a stage.
 */
@interface GTLRBigquery_ExplainQueryStep : GTLRObject

/** Machine-readable operation type. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Human-readable description of the step(s). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *substeps;

@end


/**
 *  Explanation for a single feature.
 */
@interface GTLRBigquery_Explanation : GTLRObject

/**
 *  Attribution of feature.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attribution;

/**
 *  The full feature name. For non-numerical features, will be formatted like
 *  `.`. Overall size of feature name will always be truncated to first 120
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *featureName;

@end


/**
 *  Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT JOB
 *  statistics are populated in JobStatistics4.
 */
@interface GTLRBigquery_ExportDataStatistics : GTLRObject

/**
 *  Number of destination files generated in case of EXPORT DATA statement only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileCount;

/**
 *  [Alpha] Number of destination rows generated in case of EXPORT DATA
 *  statement only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowCount;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRBigquery_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Options defining open source compatible datasets living in the BigQuery
 *  catalog. Contains metadata of open source database, schema or namespace
 *  represented by the current dataset.
 */
@interface GTLRBigquery_ExternalCatalogDatasetOptions : GTLRObject

/**
 *  Optional. The storage location URI for all tables in the dataset. Equivalent
 *  to hive metastore's database locationUri. Maximum length of 1024 characters.
 */
@property(nonatomic, copy, nullable) NSString *defaultStorageLocationUri;

/**
 *  Optional. A map of key value pairs defining the parameters and properties of
 *  the open source schema. Maximum size of 2Mib.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalCatalogDatasetOptions_Parameters *parameters;

@end


/**
 *  Optional. A map of key value pairs defining the parameters and properties of
 *  the open source schema. Maximum size of 2Mib.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_ExternalCatalogDatasetOptions_Parameters : GTLRObject
@end


/**
 *  Metadata about open source compatible table. The fields contained in these
 *  options correspond to hive metastore's table level properties.
 */
@interface GTLRBigquery_ExternalCatalogTableOptions : GTLRObject

/**
 *  Optional. The connection specifying the credentials to be used to read
 *  external storage, such as Azure Blob, Cloud Storage, or S3. The connection
 *  is needed to read the open source table from BigQuery Engine. The
 *  connection_id can have the form `..` or `projects//locations//connections/`.
 */
@property(nonatomic, copy, nullable) NSString *connectionId;

/**
 *  Optional. A map of key value pairs defining the parameters and properties of
 *  the open source table. Corresponds with hive meta store table parameters.
 *  Maximum size of 4Mib.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalCatalogTableOptions_Parameters *parameters;

/**
 *  Optional. A storage descriptor containing information about the physical
 *  storage of this table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StorageDescriptor *storageDescriptor;

@end


/**
 *  Optional. A map of key value pairs defining the parameters and properties of
 *  the open source table. Corresponds with hive meta store table parameters.
 *  Maximum size of 4Mib.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_ExternalCatalogTableOptions_Parameters : GTLRObject
@end


/**
 *  GTLRBigquery_ExternalDataConfiguration
 */
@interface GTLRBigquery_ExternalDataConfiguration : GTLRObject

/**
 *  Try to detect schema and format options automatically. Any option specified
 *  explicitly will be honored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/** Optional. Additional properties to set if sourceFormat is set to AVRO. */
@property(nonatomic, strong, nullable) GTLRBigquery_AvroOptions *avroOptions;

/** Optional. Additional options if sourceFormat is set to BIGTABLE. */
@property(nonatomic, strong, nullable) GTLRBigquery_BigtableOptions *bigtableOptions;

/**
 *  Optional. The compression type of the data source. Possible values include
 *  GZIP and NONE. The default value is NONE. This setting is ignored for Google
 *  Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet
 *  formats. An empty string is an invalid value.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/**
 *  Optional. The connection specifying the credentials to be used to read
 *  external storage, such as Azure Blob, Cloud Storage, or S3. The
 *  connection_id can have the form `{project_id}.{location_id};{connection_id}`
 *  or
 *  `projects/{project_id}/locations/{location_id}/connections/{connection_id}`.
 */
@property(nonatomic, copy, nullable) NSString *connectionId;

/** Optional. Additional properties to set if sourceFormat is set to CSV. */
@property(nonatomic, strong, nullable) GTLRBigquery_CsvOptions *csvOptions;

/**
 *  Defines the list of possible SQL data types to which the source decimal
 *  values are converted. This list and the precision and the scale parameters
 *  of the decimal field determine the target type. In the order of NUMERIC,
 *  BIGNUMERIC, and STRING, a type is picked if it is in the specified list and
 *  if it supports the precision and the scale. STRING supports all precision
 *  and scale values. If none of the listed types supports the precision and the
 *  scale, the type supporting the widest range in the specified list is picked,
 *  and if a value exceeds the supported range when reading the data, an error
 *  will be thrown. Example: Suppose the value of this field is ["NUMERIC",
 *  "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) ->
 *  BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC
 *  (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; *
 *  (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field
 *  cannot contain duplicate types. The order of the types in this field is
 *  ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC",
 *  "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults
 *  to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *decimalTargetTypes;

/**
 *  Optional. Specifies how source URIs are interpreted for constructing the
 *  file set to load. By default source URIs are expanded against the underlying
 *  storage. Other options include specifying manifest files. Only applicable to
 *  object storage systems.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_FileSetSpecType_FileSetSpecTypeFileSystemMatch
 *        This option expands source URIs by listing files from the object
 *        store. It is the default behavior if FileSetSpecType is not set.
 *        (Value: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_FileSetSpecType_FileSetSpecTypeNewLineDelimitedManifest
 *        This option indicates that the provided URIs are newline-delimited
 *        manifest files, with one URI per line. Wildcard URIs are not
 *        supported. (Value: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST")
 */
@property(nonatomic, copy, nullable) NSString *fileSetSpecType;

/** Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS. */
@property(nonatomic, strong, nullable) GTLRBigquery_GoogleSheetsOptions *googleSheetsOptions;

/**
 *  Optional. When set, configures hive partitioning support. Not all storage
 *  formats support hive partitioning -- requesting hive partitioning on an
 *  unsupported format will lead to an error, as will providing an invalid
 *  specification.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_HivePartitioningOptions *hivePartitioningOptions;

/**
 *  Optional. Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names Google Cloud Bigtable: This setting is
 *  ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This
 *  setting is ignored. ORC: This setting is ignored. Parquet: This setting is
 *  ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  Optional. Load option to be used together with source_format
 *  newline-delimited JSON to indicate that a variant of JSON is being loaded.
 *  To load newline-delimited GeoJSON, specify GEOJSON (and source_format must
 *  be set to NEWLINE_DELIMITED_JSON).
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_JsonExtension_Geojson Use
 *        GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
 *        (Value: "GEOJSON")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_JsonExtension_JsonExtensionUnspecified
 *        The default if provided value is not one included in the enum, or the
 *        value is not specified. The source formate is parsed without any
 *        modification. (Value: "JSON_EXTENSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *jsonExtension;

/** Optional. Additional properties to set if sourceFormat is set to JSON. */
@property(nonatomic, strong, nullable) GTLRBigquery_JsonOptions *jsonOptions;

/**
 *  Optional. The maximum number of bad records that BigQuery can ignore when
 *  reading data. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. The default value is 0, which requires
 *  that all records are valid. This setting is ignored for Google Cloud
 *  Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  Optional. Metadata Cache Mode for the table. Set this to enable caching of
 *  metadata from external data source.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_Automatic
 *        Set this mode to trigger automatic background refresh of metadata
 *        cache from the external source. Queries will use the latest available
 *        cache version within the table's maxStaleness interval. (Value:
 *        "AUTOMATIC")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_Manual
 *        Set this mode to enable triggering manual refresh of the metadata
 *        cache from external source. Queries will use the latest manually
 *        triggered cache version within the table's maxStaleness interval.
 *        (Value: "MANUAL")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_MetadataCacheMode_MetadataCacheModeUnspecified
 *        Unspecified metadata cache mode. (Value:
 *        "METADATA_CACHE_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *metadataCacheMode;

/**
 *  Optional. ObjectMetadata is used to create Object Tables. Object Tables
 *  contain a listing of objects (with their metadata) found at the source_uris.
 *  If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE
 *  is the only supported Object Metadata type.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_Directory A
 *        synonym for `SIMPLE`. (Value: "DIRECTORY")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_ObjectMetadataUnspecified
 *        Unspecified by default. (Value: "OBJECT_METADATA_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_ExternalDataConfiguration_ObjectMetadata_Simple
 *        Directory listing of objects. (Value: "SIMPLE")
 */
@property(nonatomic, copy, nullable) NSString *objectMetadata;

/**
 *  Optional. Additional properties to set if sourceFormat is set to PARQUET.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ParquetOptions *parquetOptions;

/**
 *  Optional. When creating an external table, the user can provide a reference
 *  file with the table schema. This is enabled for the following formats: AVRO,
 *  PARQUET, ORC.
 */
@property(nonatomic, copy, nullable) NSString *referenceFileSchemaUri;

/**
 *  Optional. The schema for the data. Schema is required for CSV and JSON
 *  formats if autodetect is not on. Schema is disallowed for Google Cloud
 *  Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Required] The data format. For CSV files, specify "CSV". For Google sheets,
 *  specify "GOOGLE_SHEETS". For newline-delimited JSON, specify
 *  "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud
 *  Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables,
 *  specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify
 *  "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups, exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

@end


/**
 *  Configures the access a dataset defined in an external metadata storage.
 */
@interface GTLRBigquery_ExternalDatasetReference : GTLRObject

/**
 *  Required. The connection id that is used to access the external_source.
 *  Format:
 *  projects/{project_id}/locations/{location_id}/connections/{connection_id}
 */
@property(nonatomic, copy, nullable) NSString *connection;

/** Required. External source that backs this dataset. */
@property(nonatomic, copy, nullable) NSString *externalSource;

@end


/**
 *  The external service cost is a portion of the total cost, these costs are
 *  not additive with total_bytes_billed. Moreover, this field only track
 *  external service costs that will show up as BigQuery costs (e.g. training
 *  BigQuery ML job with google cloud CAIP or Automl Tables services), not other
 *  costs which may be accrued by running the query (e.g. reading from Bigtable
 *  or Cloud Storage). The external service costs with different billing sku
 *  (e.g. CAIP job is charged based on VM usage) are converted to BigQuery
 *  billed_bytes and slot_ms with equivalent amount of US dollars. Services may
 *  not directly correlate to these metrics, but these are the equivalents for
 *  billing purposes. Output only.
 */
@interface GTLRBigquery_ExternalServiceCost : GTLRObject

/**
 *  External service cost in terms of bigquery bytes billed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesBilled;

/**
 *  External service cost in terms of bigquery bytes processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesProcessed;

/** External service name. */
@property(nonatomic, copy, nullable) NSString *externalService;

/**
 *  Non-preemptable reserved slots used for external job. For example, reserved
 *  slots for Cloua AI Platform job are the VM usages converted to BigQuery slot
 *  with equivalent mount of price.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reservedSlotCount;

/**
 *  External service cost in terms of bigquery slot milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  Representative value of a single feature within the cluster.
 */
@interface GTLRBigquery_FeatureValue : GTLRObject

/** The categorical feature value. */
@property(nonatomic, strong, nullable) GTLRBigquery_CategoricalValue *categoricalValue;

/** The feature column name. */
@property(nonatomic, copy, nullable) NSString *featureColumn;

/**
 *  The numerical feature value. This is the centroid value for this feature.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numericalValue;

@end


/**
 *  Metadata about the foreign data type definition such as the system in which
 *  the type is defined.
 */
@interface GTLRBigquery_ForeignTypeInfo : GTLRObject

/**
 *  Required. Specifies the system which defines the foreign data type.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ForeignTypeInfo_TypeSystem_Hive Represents Hive data
 *        types. (Value: "HIVE")
 *    @arg @c kGTLRBigquery_ForeignTypeInfo_TypeSystem_TypeSystemUnspecified
 *        TypeSystem not specified. (Value: "TYPE_SYSTEM_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *typeSystem;

@end


/**
 *  A view can be represented in multiple ways. Each representation has its own
 *  dialect. This message stores the metadata required for these
 *  representations.
 */
@interface GTLRBigquery_ForeignViewDefinition : GTLRObject

/** Optional. Represents the dialect of the query. */
@property(nonatomic, copy, nullable) NSString *dialect;

/** Required. The query that defines the view. */
@property(nonatomic, copy, nullable) NSString *query;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRBigquery_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRBigquery_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  Response object of GetQueryResults.
 */
@interface GTLRBigquery_GetQueryResultsResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  Output only. The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful. For more information about error messages,
 *  see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/** A hash of this response. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Reference to the BigQuery Job that was created to run the query. This field
 *  will be present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/**
 *  A token used for paging results. When this token is non-empty, it indicates
 *  additional results are available.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above. Present only
 *  when the query completes successfully. The REST-based representation of this
 *  data leverages a series of JSON f,v objects for indicating fields and
 *  values.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  The total number of bytes processed for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results. Present only when
 *  the query completes successfully.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  Response object of GetServiceAccount
 */
@interface GTLRBigquery_GetServiceAccountResponse : GTLRObject

/** The service account email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Global explanations containing the top most important features after
 *  training.
 */
@interface GTLRBigquery_GlobalExplanation : GTLRObject

/**
 *  Class label for this set of global explanations. Will be empty/null for
 *  binary logistic and linear regression models. Sorted alphabetically in
 *  descending order.
 */
@property(nonatomic, copy, nullable) NSString *classLabel;

/**
 *  A list of the top global explanations. Sorted by absolute value of
 *  attribution in descending order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Explanation *> *explanations;

@end


/**
 *  Options specific to Google Sheets data sources.
 */
@interface GTLRBigquery_GoogleSheetsOptions : GTLRObject

/**
 *  Optional. Range of a sheet to query from. Only used when non-empty. Typical
 *  format: sheet_name!top_left_cell_id:bottom_right_cell_id For example:
 *  sheet1!A1:B20
 */
@property(nonatomic, copy, nullable) NSString *range;

/**
 *  Optional. The number of rows at the top of a sheet that BigQuery will skip
 *  when reading the data. The default value is 0. This property is useful if
 *  you have header rows that should be skipped. When autodetect is on, the
 *  behavior is the following: * skipLeadingRows unspecified - Autodetect tries
 *  to detect headers in the first row. If they are not detected, the row is
 *  read as data. Otherwise data is read starting from the second row. *
 *  skipLeadingRows is 0 - Instructs autodetect that there are no headers and
 *  data should be read starting from the first row. * skipLeadingRows = N > 0 -
 *  Autodetect skips N-1 rows and tries to detect headers in row N. If headers
 *  are not detected, row N is just skipped. Otherwise row N is used to extract
 *  column names for the detected schema.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  High cardinality join detailed information.
 */
@interface GTLRBigquery_HighCardinalityJoin : GTLRObject

/**
 *  Output only. Count of left input rows.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leftRows;

/**
 *  Output only. Count of the output rows.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputRows;

/**
 *  Output only. Count of right input rows.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rightRows;

/**
 *  Output only. The index of the join operator in the ExplainQueryStep lists.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stepIndex;

@end


/**
 *  Options for configuring hive partitioning detect.
 */
@interface GTLRBigquery_HivePartitioningOptions : GTLRObject

/**
 *  Output only. For permanent external tables, this field is populated with the
 *  hive partition keys in the order they were inferred. The types of the
 *  partition keys can be deduced by checking the table schema (which will
 *  include the partition keys). Not every API will populate this field in the
 *  output. For example, Tables.Get will populate it, but Tables.List will not
 *  contain this field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fields;

/**
 *  Optional. When set, what mode of hive partitioning to use when reading data.
 *  The following modes are supported: * AUTO: automatically infer partition key
 *  name(s) and type(s). * STRINGS: automatically infer partition key name(s).
 *  All types are strings. * CUSTOM: partition key schema is encoded in the
 *  source URI prefix. Not all storage formats support hive partitioning.
 *  Requesting hive partitioning on an unsupported format will lead to an error.
 *  Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. If set to true, queries over this table require a partition filter
 *  that can be used for partition elimination to be specified. Note that this
 *  field should only be true when creating a permanent external table or
 *  querying a temporary external table. Hive-partitioned loads with
 *  require_partition_filter explicitly set to true will fail.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/**
 *  Optional. When hive partition detection is requested, a common prefix for
 *  all source uris must be required. The prefix must end immediately before the
 *  partition key encoding begins. For example, consider files following this
 *  data layout:
 *  gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro
 *  gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive
 *  partitioning is requested with either AUTO or STRINGS detection, the common
 *  prefix can be either of gs://bucket/path_to_table or
 *  gs://bucket/path_to_table/. CUSTOM detection requires encoding the
 *  partitioning schema immediately after the common prefix. For CUSTOM, any of
 *  * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} *
 *  gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} *
 *  gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all
 *  be valid source URI prefixes.
 */
@property(nonatomic, copy, nullable) NSString *sourceUriPrefix;

@end


/**
 *  Hyperparameter search spaces. These should be a subset of training_options.
 */
@interface GTLRBigquery_HparamSearchSpaces : GTLRObject

/** Activation functions of neural network models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *activationFn;

/** Mini batch sample size. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *batchSize;

/** Booster type for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *boosterType;

/** Subsample ratio of columns for each level for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBylevel;

/**
 *  Subsample ratio of columns for each node(split) for boosted tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBynode;

/**
 *  Subsample ratio of columns when constructing each tree for boosted tree
 *  models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBytree;

/** Dart normalization type for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *dartNormalizeType;

/**
 *  Dropout probability for dnn model training and boosted tree models using
 *  dart booster.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *dropout;

/** Hidden units for neural network models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntArrayHparamSearchSpace *hiddenUnits;

/** L1 regularization coefficient. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *l1Reg;

/** L2 regularization coefficient. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *l2Reg;

/** Learning rate of training jobs. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *learnRate;

/** Maximum depth of a tree for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *maxTreeDepth;

/** Minimum split loss for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *minSplitLoss;

/**
 *  Minimum sum of instance weight needed in a child for boosted tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *minTreeChildWeight;

/** Number of clusters for k-means. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numClusters;

/** Number of latent factors to train on. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numFactors;

/** Number of parallel trees for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numParallelTree;

/** Optimizer of TF models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *optimizer;

/**
 *  Subsample the training data to grow tree to prevent overfitting for boosted
 *  tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *subsample;

/** Tree construction algorithm for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *treeMethod;

/**
 *  Hyperparameter for matrix factoration when implicit feedback type is
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *walsAlpha;

@end


/**
 *  Training info of a trial in [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models.
 */
@interface GTLRBigquery_HparamTuningTrial : GTLRObject

/**
 *  Ending time of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTimeMs;

/** Error message for FAILED and INFEASIBLE trial. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Loss computed on the eval data at the end of trial.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  Evaluation metrics of this trial calculated on the test data. Empty in Job
 *  API.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *evaluationMetrics;

/** The hyperprameters selected for this trial. */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions *hparams;

/**
 *  Hyperparameter tuning evaluation metrics of this trial calculated on the
 *  eval data. Unlike evaluation_metrics, only the fields corresponding to the
 *  hparam_tuning_objectives are set.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *hparamTuningEvaluationMetrics;

/**
 *  Starting time of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimeMs;

/**
 *  The status of the trial.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Failed The trial failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Infeasible The trial is
 *        infeasible due to the invalid params. (Value: "INFEASIBLE")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_NotStarted Scheduled but
 *        not started. (Value: "NOT_STARTED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Running Running state.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_StoppedEarly Trial stopped
 *        early because it's not promising. (Value: "STOPPED_EARLY")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Succeeded The trial
 *        succeeded. (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_TrialStatusUnspecified
 *        Default value. (Value: "TRIAL_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Loss computed on the training data at the end of trial.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

/**
 *  1-based index of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trialId;

@end


/**
 *  Reason about why no search index was used in the search query (or
 *  sub-query).
 */
@interface GTLRBigquery_IndexUnusedReason : GTLRObject

/**
 *  Specifies the base table involved in the reason that no search index was
 *  used.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTable;

/**
 *  Specifies the high-level reason for the scenario when no search index was
 *  used.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_BaseTableTooLarge Indicates
 *        that the total size of indexed base tables in your organization
 *        exceeds your region's limit and the index is not used in the query. To
 *        index larger base tables, you can use your own reservation for
 *        index-management jobs. (Value: "BASE_TABLE_TOO_LARGE")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_BaseTableTooSmall Indicates
 *        the base table is too small (below a certain threshold). The index
 *        does not provide noticeable search performance gains when the base
 *        table is too small. (Value: "BASE_TABLE_TOO_SMALL")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_BaseTableTruncated Indicates
 *        the base table has been truncated (rows have been removed from table
 *        with TRUNCATE TABLE statement) since the last time the search index
 *        was refreshed. (Value: "BASE_TABLE_TRUNCATED")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_CodeUnspecified Code not
 *        specified. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_EstimatedPerformanceGainTooLow
 *        Indicates that the estimated performance gain from using the search
 *        index is too low for the given search query. (Value:
 *        "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_IndexConfigModified Indicates
 *        the search index configuration has been changed since the last time
 *        the search index was refreshed. (Value: "INDEX_CONFIG_MODIFIED")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_IndexConfigNotAvailable
 *        Indicates the search index configuration has not been created. (Value:
 *        "INDEX_CONFIG_NOT_AVAILABLE")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_IndexSuppressedByFunctionOption
 *        Indicates that an option in the search function that cannot make use
 *        of the index has been selected. (Value:
 *        "INDEX_SUPPRESSED_BY_FUNCTION_OPTION")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_InternalError Indicates an
 *        internal error that causes the search index to be unused. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_MismatchedTextAnalyzer
 *        Indicates that the search index and the search function call do not
 *        have the same text analyzer. (Value: "MISMATCHED_TEXT_ANALYZER")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_NoPruningPower Indicates the
 *        usage of search index will not contribute to any pruning improvement
 *        for the search function, e.g. when the search predicate is in a
 *        disjunction with other non-search predicates. (Value:
 *        "NO_PRUNING_POWER")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_NotSupportedInStandardEdition
 *        Indicates that search indexes can not be used for search query with
 *        STANDARD edition. (Value: "NOT_SUPPORTED_IN_STANDARD_EDITION")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_OptimizedWithMaterializedView
 *        Indicates the query has been optimized by using a materialized view.
 *        (Value: "OPTIMIZED_WITH_MATERIALIZED_VIEW")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_OtherReason Indicates that
 *        the reason search indexes cannot be used in the query is not covered
 *        by any of the other IndexUnusedReason options. (Value: "OTHER_REASON")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_PendingIndexCreation
 *        Indicates the search index creation has not been completed. (Value:
 *        "PENDING_INDEX_CREATION")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_QueryCacheHit Indicates that
 *        the query was cached, and thus the search index was not used. (Value:
 *        "QUERY_CACHE_HIT")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_SecuredByDataMasking
 *        Indicates the query has been secured by data masking, and thus search
 *        indexes are not applicable. (Value: "SECURED_BY_DATA_MASKING")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_StaleIndex The index cannot
 *        be used in the search query because it is stale. (Value:
 *        "STALE_INDEX")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_TimeTravelQuery Indicates the
 *        search query accesses data at a timestamp before the last time the
 *        search index was refreshed. (Value: "TIME_TRAVEL_QUERY")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_UnindexedSearchFields
 *        Indicates the search index does not cover all fields in the search
 *        function. (Value: "UNINDEXED_SEARCH_FIELDS")
 *    @arg @c kGTLRBigquery_IndexUnusedReason_Code_UnsupportedSearchPattern
 *        Indicates the search index does not support the given search query
 *        pattern. (Value: "UNSUPPORTED_SEARCH_PATTERN")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Specifies the name of the unused search index, if available. */
@property(nonatomic, copy, nullable) NSString *indexName;

/**
 *  Free form human-readable reason for the scenario when no search index was
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Details about the input data change insight.
 */
@interface GTLRBigquery_InputDataChange : GTLRObject

/**
 *  Output only. Records read difference percentage compared to a previous run.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsReadDiffPercentage;

@end


/**
 *  An array of int.
 */
@interface GTLRBigquery_IntArray : GTLRObject

/**
 *  Elements in the int array.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *elements;

@end


/**
 *  Search space for int array.
 */
@interface GTLRBigquery_IntArrayHparamSearchSpace : GTLRObject

/** Candidates for the int array parameter. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IntArray *> *candidates;

@end


/**
 *  Discrete candidates of an int hyperparameter.
 */
@interface GTLRBigquery_IntCandidates : GTLRObject

/**
 *  Candidates for the int parameter in increasing order.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *candidates;

@end


/**
 *  Search space for an int hyperparameter.
 */
@interface GTLRBigquery_IntHparamSearchSpace : GTLRObject

/** Candidates of the int hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntCandidates *candidates;

/** Range of the int hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntRange *range;

@end


/**
 *  Range of an int hyperparameter.
 */
@interface GTLRBigquery_IntRange : GTLRObject

/**
 *  Max value of the int parameter.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  Min value of the int parameter.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

@end


/**
 *  Information about a single iteration of the training run.
 */
@interface GTLRBigquery_IterationResult : GTLRObject

/** Arima result. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaResult *arimaResult;

/** Information about top clusters for clustering models. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ClusterInfo *> *clusterInfos;

/**
 *  Time taken to run the iteration in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  Loss computed on the eval data at the end of iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  Index of the iteration, 0 based.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  Learn rate used for this iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/** The information of the principal components. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_PrincipalComponentInfo *> *principalComponentInfos;

/**
 *  Loss computed on the training data at the end of iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

@end


/**
 *  GTLRBigquery_Job
 */
@interface GTLRBigquery_Job : GTLRObject

/** Required. Describes the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Opaque ID field of the job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. The reason why a Job was created.
 *  [Preview](https://cloud.google.com/products/#product-launch-stages)
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobCreationReason *jobCreationReason;

/** Optional. Reference describing the unique-per-user name of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** Output only. The type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. [Full-projection-only] String representation of identity of
 *  requesting party. Populated for both first- and third-party identities. Only
 *  present for APIs that support third-party identities.
 */
@property(nonatomic, copy, nullable) NSString *principalSubject;

/** Output only. A URL that can be used to access the resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Output only. Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/**
 *  Output only. The status of this job. Examine this value when polling an
 *  asynchronous job to see if the job is complete.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** Output only. Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  Describes format of a jobs cancellation response.
 */
@interface GTLRBigquery_JobCancelResponse : GTLRObject

/** The final state of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_Job *job;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_JobConfiguration
 */
@interface GTLRBigquery_JobConfiguration : GTLRObject

/**
 *  [Pick one] Copies a table.
 *
 *  Remapped to 'copyProperty' to avoid NSObject's 'copy'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationTableCopy *copyProperty NS_RETURNS_NOT_RETAINED;

/**
 *  Optional. If set, don't actually run this job. A valid query will return a
 *  mostly empty response with some processing statistics, while an invalid
 *  query will return the same error it would if it wasn't a dry run. Behavior
 *  of non-query jobs is undefined.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** [Pick one] Configures an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationExtract *extract;

/**
 *  Optional. Job timeout in milliseconds. If this time limit is exceeded,
 *  BigQuery will attempt to stop a longer job, but may not always succeed in
 *  canceling it before the job completes. For example, a job that takes more
 *  than 60 seconds to complete has a better chance of being stopped than a job
 *  that takes 10 seconds to complete.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobTimeoutMs;

/**
 *  Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or
 *  UNKNOWN.
 */
@property(nonatomic, copy, nullable) NSString *jobType;

/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration_Labels *labels;

/** [Pick one] Configures a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationLoad *load;

/** [Pick one] Configures a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery *query;

@end


/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_JobConfiguration_Labels : GTLRObject
@end


/**
 *  JobConfigurationExtract configures a job that exports data from a BigQuery
 *  table into Google Cloud Storage.
 */
@interface GTLRBigquery_JobConfigurationExtract : GTLRObject

/**
 *  Optional. The compression type to use for exported files. Possible values
 *  include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE.
 *  Not all compression formats are support for all file formats. DEFLATE is
 *  only supported for Avro. ZSTD is only supported for Parquet. Not applicable
 *  when extracting models.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/**
 *  Optional. The exported file format. Possible values include CSV,
 *  NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or
 *  ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables
 *  with nested or repeated fields cannot be exported as CSV. The default value
 *  for models is ML_TF_SAVED_MODEL.
 */
@property(nonatomic, copy, nullable) NSString *destinationFormat;

/**
 *  [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as
 *  necessary. The fully-qualified Google Cloud Storage URI where the extracted
 *  table should be written.
 */
@property(nonatomic, copy, nullable) NSString *destinationUri;

/**
 *  [Pick one] A list of fully-qualified Google Cloud Storage URIs where the
 *  extracted table should be written.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinationUris;

/**
 *  Optional. When extracting data in CSV format, this defines the delimiter to
 *  use between fields in the exported data. Default is ','. Not applicable when
 *  extracting models.
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/** Optional. Model extract options only applicable when extracting models. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelExtractOptions *modelExtractOptions;

/**
 *  Optional. Whether to print out a header row in the results. Default is true.
 *  Not applicable when extracting models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *printHeader;

/** A reference to the model being exported. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelReference *sourceModel;

/** A reference to the table being exported. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

/**
 *  Whether to use logical types when extracting to AVRO format. Not applicable
 *  when extracting models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

@end


/**
 *  JobConfigurationLoad contains the configuration properties for loading data
 *  into a destination table.
 */
@interface GTLRBigquery_JobConfigurationLoad : GTLRObject

/**
 *  Optional. Accept rows that are missing trailing optional columns. The
 *  missing values are treated as nulls. If false, records with missing trailing
 *  columns are treated as bad records, and if there are too many bad records,
 *  an invalid error is returned in the job result. The default value is false.
 *  Only applicable to CSV, ignored for other formats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  Indicates if BigQuery should allow quoted data sections that contain newline
 *  characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  Optional. Indicates if we should automatically infer the options and schema
 *  for CSV and JSON sources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/** Clustering specification for the destination table. */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  Optional. Character map supported for column names in CSV/Parquet loads.
 *  Defaults to STRICT and can be overridden by Project Config Service. Using
 *  this option with unsupporting load formats will result in an error.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_ColumnNameCharacterMapUnspecified
 *        Unspecified column name character map. (Value:
 *        "COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_Strict
 *        Support flexible column name and reject invalid column names. (Value:
 *        "STRICT")
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_V1
 *        Support alphanumeric + underscore characters and names must start with
 *        a letter or underscore. Invalid column names will be normalized.
 *        (Value: "V1")
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_ColumnNameCharacterMap_V2
 *        Support flexible column name. Invalid column names will be normalized.
 *        (Value: "V2")
 */
@property(nonatomic, copy, nullable) NSString *columnNameCharacterMap;

/**
 *  Optional. Connection properties which can modify the load job behavior.
 *  Currently, only the 'session_id' connection property is supported, and is
 *  used to resolve _SESSION appearing as the dataset id.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  Optional. [Experimental] Configures the load job to copy files directly to
 *  the destination BigLake managed table, bypassing file content reading and
 *  rewriting. Copying files only is supported when all the following are true:
 *  * `source_uris` are located in the same Cloud Storage location as the
 *  destination table's `storage_uri` location. * `source_format` is `PARQUET`.
 *  * `destination_table` is an existing BigLake managed table. The table's
 *  schema does not have flexible column names. The table's columns do not have
 *  type parameters other than precision and scale. * No options other than the
 *  above are specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copyFilesOnly NS_RETURNS_NOT_RETAINED;

/**
 *  Optional. Specifies whether the job is allowed to create new tables. The
 *  following values are supported: * CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. * CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/**
 *  Optional. If this property is true, the job creates a new session using a
 *  randomly generated session_id. To continue using a created session with
 *  subsequent queries, pass the existing session identifier as a
 *  `ConnectionProperty` value. The session identifier is returned as part of
 *  the `SessionInfo` message within the query statistics. The new session's
 *  location will be set to `Job.JobReference.location` if it is present,
 *  otherwise it's set to the default location based on existing routing logic.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  Defines the list of possible SQL data types to which the source decimal
 *  values are converted. This list and the precision and the scale parameters
 *  of the decimal field determine the target type. In the order of NUMERIC,
 *  BIGNUMERIC, and STRING, a type is picked if it is in the specified list and
 *  if it supports the precision and the scale. STRING supports all precision
 *  and scale values. If none of the listed types supports the precision and the
 *  scale, the type supporting the widest range in the specified list is picked,
 *  and if a value exceeds the supported range when reading the data, an error
 *  will be thrown. Example: Suppose the value of this field is ["NUMERIC",
 *  "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) ->
 *  BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC
 *  (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; *
 *  (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field
 *  cannot contain duplicate types. The order of the types in this field is
 *  ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC",
 *  "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults
 *  to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *decimalTargetTypes;

/** Custom encryption configuration (e.g., Cloud KMS keys) */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/** [Required] The destination table to load the data into. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  Optional. [Experimental] Properties with which to create the destination
 *  table if it is new.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DestinationTableProperties *destinationTableProperties;

/**
 *  Optional. The character encoding of the data. The supported values are
 *  UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default
 *  value is UTF-8. BigQuery decodes the data after the raw, binary data has
 *  been split using the values of the `quote` and `fieldDelimiter` properties.
 *  If you don't specify an encoding, or if you specify a UTF-8 encoding when
 *  the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to
 *  UTF-8. Generally, your data loads successfully, but it may not match
 *  byte-for-byte what you expect. To avoid this, specify the correct encoding
 *  by using the `--encoding` flag. If BigQuery can't convert a character other
 *  than the ASCII `0` character, BigQuery converts the character to the
 *  standard Unicode replacement character: �.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  Optional. The separator character for fields in a CSV file. The separator is
 *  interpreted as a single byte. For files encoded in ISO-8859-1, any single
 *  character can be used as a separator. For files encoded in UTF-8, characters
 *  represented in decimal range 1-127 (U+0001-U+007F) can be used without any
 *  modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and
 *  above) will have only the first byte used for separating fields. The
 *  remaining bytes will be treated as a part of the field. BigQuery also
 *  supports the escape sequence "\\t" (U+0009) to specify a tab separator. The
 *  default value is comma (",", U+002C).
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  Optional. Specifies how source URIs are interpreted for constructing the
 *  file set to load. By default, source URIs are expanded against the
 *  underlying storage. You can also specify manifest files to control how the
 *  file set is constructed. This option is only applicable to object storage
 *  systems.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_FileSetSpecType_FileSetSpecTypeFileSystemMatch
 *        This option expands source URIs by listing files from the object
 *        store. It is the default behavior if FileSetSpecType is not set.
 *        (Value: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH")
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_FileSetSpecType_FileSetSpecTypeNewLineDelimitedManifest
 *        This option indicates that the provided URIs are newline-delimited
 *        manifest files, with one URI per line. Wildcard URIs are not
 *        supported. (Value: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST")
 */
@property(nonatomic, copy, nullable) NSString *fileSetSpecType;

/**
 *  Optional. When set, configures hive partitioning support. Not all storage
 *  formats support hive partitioning -- requesting hive partitioning on an
 *  unsupported format will lead to an error, as will providing an invalid
 *  specification.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_HivePartitioningOptions *hivePartitioningOptions;

/**
 *  Optional. Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names in the table schema Avro, Parquet, ORC:
 *  Fields in the file schema that don't exist in the table schema.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  Optional. Load option to be used together with source_format
 *  newline-delimited JSON to indicate that a variant of JSON is being loaded.
 *  To load newline-delimited GeoJSON, specify GEOJSON (and source_format must
 *  be set to NEWLINE_DELIMITED_JSON).
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_JsonExtension_Geojson Use
 *        GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
 *        (Value: "GEOJSON")
 *    @arg @c kGTLRBigquery_JobConfigurationLoad_JsonExtension_JsonExtensionUnspecified
 *        The default if provided value is not one included in the enum, or the
 *        value is not specified. The source formate is parsed without any
 *        modification. (Value: "JSON_EXTENSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *jsonExtension;

/**
 *  Optional. The maximum number of bad records that BigQuery can ignore when
 *  running the job. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. The default value is 0, which requires
 *  that all records are valid. This is only supported for CSV and
 *  NEWLINE_DELIMITED_JSON file formats.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  Optional. Specifies a string that represents a null value in a CSV file. For
 *  example, if you specify "\\N", BigQuery interprets "\\N" as a null value
 *  when loading a CSV file. The default value is the empty string. If you set
 *  this property to a custom value, BigQuery throws an error if an empty string
 *  is present for all data types except for STRING and BYTE. For STRING and
 *  BYTE columns, BigQuery interprets the empty string as an empty value.
 */
@property(nonatomic, copy, nullable) NSString *nullMarker;

/**
 *  Optional. Additional properties to set if sourceFormat is set to PARQUET.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ParquetOptions *parquetOptions;

/**
 *  Optional. When sourceFormat is set to "CSV", this indicates whether the
 *  embedded ASCII control characters (the first 32 characters in the
 *  ASCII-table, from '\\x00' to '\\x1F') are preserved.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveAsciiControlCharacters;

/**
 *  If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity
 *  properties to load into BigQuery from a Cloud Datastore backup. Property
 *  names are case sensitive and must be top-level properties. If no properties
 *  are specified, BigQuery loads all properties. If any named property isn't
 *  found in the Cloud Datastore backup, an invalid error is returned in the job
 *  result.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectionFields;

/**
 *  Optional. The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ('"'). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true. To include the specific quote character within a quoted
 *  value, precede it with an additional matching quote character. For example,
 *  if you want to escape the default character ' " ', use ' "" '. \@default "
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  Range partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Optional. The user can provide a reference file with the reader schema. This
 *  file is only loaded if it is part of source URIs, but is not loaded
 *  otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
 */
@property(nonatomic, copy, nullable) NSString *referenceFileSchemaUri;

/**
 *  Optional. The schema for the destination table. The schema can be omitted if
 *  the destination table already exists, or if you're loading data from Google
 *  Cloud Datastore.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Deprecated] The inline schema. For CSV schemas, specify as
 *  "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER,
 *  baz:FLOAT".
 */
@property(nonatomic, copy, nullable) NSString *schemaInline;

/** [Deprecated] The format of the schemaInline property. */
@property(nonatomic, copy, nullable) NSString *schemaInlineFormat;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the load job if a schema is autodetected or supplied in the job
 *  configuration. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified: *
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. *
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/**
 *  Optional. The number of rows at the top of a CSV file that BigQuery will
 *  skip when loading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped. When autodetect
 *  is on, the behavior is the following: * skipLeadingRows unspecified -
 *  Autodetect tries to detect headers in the first row. If they are not
 *  detected, the row is read as data. Otherwise data is read starting from the
 *  second row. * skipLeadingRows is 0 - Instructs autodetect that there are no
 *  headers and data should be read starting from the first row. *
 *  skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
 *  headers in row N. If headers are not detected, row N is just skipped.
 *  Otherwise row N is used to extract column names for the detected schema.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

/**
 *  Optional. The format of the data files. For CSV files, specify "CSV". For
 *  datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON,
 *  specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet,
 *  specify "PARQUET". For orc, specify "ORC". The default value is CSV.
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups: Exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  Optional. If sourceFormat is set to "AVRO", indicates whether to interpret
 *  logical types as the corresponding BigQuery data type (for example,
 *  TIMESTAMP), instead of using the raw type (for example, INTEGER).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

/**
 *  Optional. Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: * WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the data, removes the constraints and
 *  uses the schema from the load job. * WRITE_APPEND: If the table already
 *  exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table
 *  already exists and contains data, a 'duplicate' error is returned in the job
 *  result. The default value is WRITE_APPEND. Each action is atomic and only
 *  occurs if BigQuery is able to complete the job successfully. Creation,
 *  truncation and append actions occur as one atomic update upon job
 *  completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  JobConfigurationQuery configures a BigQuery query job.
 */
@interface GTLRBigquery_JobConfigurationQuery : GTLRObject

/**
 *  Optional. If true and query uses legacy SQL dialect, allows the query to
 *  produce arbitrarily large result tables at a slight cost in performance.
 *  Requires destinationTable to be set. For GoogleSQL queries, this flag is
 *  ignored and large results are always allowed. However, you must still set
 *  destinationTable when result size exceeds the allowed maximum response size.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowLargeResults;

/** Clustering specification for the destination table. */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/** Connection properties which can modify the query behavior. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  [Optional] Specifies whether the query should be executed as a continuous
 *  query. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *continuous;

/**
 *  Optional. Specifies whether the job is allowed to create new tables. The
 *  following values are supported: * CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. * CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/**
 *  If this property is true, the job creates a new session using a randomly
 *  generated session_id. To continue using a created session with subsequent
 *  queries, pass the existing session identifier as a `ConnectionProperty`
 *  value. The session identifier is returned as part of the `SessionInfo`
 *  message within the query statistics. The new session's location will be set
 *  to `Job.JobReference.location` if it is present, otherwise it's set to the
 *  default location based on existing routing logic.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  Optional. Specifies the default dataset to use for unqualified table names
 *  in the query. This setting does not alter behavior of unqualified dataset
 *  names. Setting the system variable `\@\@dataset_id` achieves the same
 *  behavior. See
 *  https://cloud.google.com/bigquery/docs/reference/system-variables for more
 *  information on system variables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/** Custom encryption configuration (e.g., Cloud KMS keys) */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/**
 *  Optional. Describes the table where the query results should be stored. This
 *  property must be set for large results that exceed the maximum response
 *  size. For queries that produce anonymous (cached) results, this field will
 *  be populated by BigQuery.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  Optional. If true and query uses legacy SQL dialect, flattens all nested and
 *  repeated fields in the query results. allowLargeResults must be true if this
 *  is set to false. For GoogleSQL queries, this flag is ignored and results are
 *  never flattened.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flattenResults;

/**
 *  Optional. [Deprecated] Maximum billing tier allowed for this query. The
 *  billing tier controls the amount of compute resources allotted to the query,
 *  and multiplies the on-demand cost of the query accordingly. A query that
 *  runs within its allotted resources will succeed and indicate its billing
 *  tier in statistics.query.billingTier, but if the query exceeds its allotted
 *  resources, it will fail with billingTierLimitExceeded. WARNING: The billed
 *  byte amount can be multiplied by an amount up to this number! Most users
 *  should not need to alter this setting, and we recommend that you avoid
 *  introducing new uses of it.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBillingTier;

/**
 *  Limits the bytes billed for this job. Queries that will have bytes billed
 *  beyond this limit will fail (without incurring a charge). If unspecified,
 *  this will be set to your project default.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBytesBilled;

/**
 *  GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or
 *  to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  [Deprecated] This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls;

/**
 *  Optional. Specifies a priority for the query. Possible values include
 *  INTERACTIVE and BATCH. The default value is INTERACTIVE.
 */
@property(nonatomic, copy, nullable) NSString *priority;

/**
 *  [Required] SQL query text to execute. The useLegacySql field can be used to
 *  indicate whether the query uses legacy SQL or GoogleSQL.
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for GoogleSQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  Range partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the query job. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified: *
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. *
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/** Options controlling the execution of scripts. */
@property(nonatomic, strong, nullable) GTLRBigquery_ScriptOptions *scriptOptions;

/**
 *  Output only. System variables for GoogleSQL queries. A system variable is
 *  output if the variable is settable and its value differs from the system
 *  default. "\@\@" prefix is not included in the name of the System variables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SystemVariables *systemVariables;

/**
 *  Optional. You can specify external table definitions, which operate as
 *  ephemeral tables that can be queried. These definitions are configured using
 *  a JSON map, where the string key represents the table identifier, and the
 *  value is the corresponding external data configuration object.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery_TableDefinitions *tableDefinitions;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  Optional. Specifies whether to use BigQuery's legacy SQL dialect for this
 *  query. The default value is true. If set to false, the query will use
 *  BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  Optional. Whether to look for the result in the query cache. The query cache
 *  is a best-effort cache that will be flushed whenever tables in the query are
 *  modified. Moreover, the query cache is only available when a query does not
 *  have a destination table specified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

/**
 *  Optional. Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: * WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the data, removes the constraints, and
 *  uses the schema from the query result. * WRITE_APPEND: If the table already
 *  exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table
 *  already exists and contains data, a 'duplicate' error is returned in the job
 *  result. The default value is WRITE_EMPTY. Each action is atomic and only
 *  occurs if BigQuery is able to complete the job successfully. Creation,
 *  truncation and append actions occur as one atomic update upon job
 *  completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  Optional. You can specify external table definitions, which operate as
 *  ephemeral tables that can be queried. These definitions are configured using
 *  a JSON map, where the string key represents the table identifier, and the
 *  value is the corresponding external data configuration object.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_ExternalDataConfiguration. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JobConfigurationQuery_TableDefinitions : GTLRObject
@end


/**
 *  JobConfigurationTableCopy configures a job that copies data from one table
 *  to another. For more information on copying tables, see [Copy a
 *  table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
 */
@interface GTLRBigquery_JobConfigurationTableCopy : GTLRObject

/**
 *  Optional. Specifies whether the job is allowed to create new tables. The
 *  following values are supported: * CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. * CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/**
 *  Optional. The time when the destination table expires. Expired tables will
 *  be deleted and their storage reclaimed.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *destinationExpirationTime;

/** [Required] The destination table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  Optional. Supported operation types in table copy job.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobConfigurationTableCopy_OperationType_Clone The
 *        source and destination table have the same table type, but only bill
 *        for unique data. (Value: "CLONE")
 *    @arg @c kGTLRBigquery_JobConfigurationTableCopy_OperationType_Copy The
 *        source and destination table have the same table type. (Value: "COPY")
 *    @arg @c kGTLRBigquery_JobConfigurationTableCopy_OperationType_OperationTypeUnspecified
 *        Unspecified operation type. (Value: "OPERATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_JobConfigurationTableCopy_OperationType_Restore The
 *        source table type is SNAPSHOT and the destination table type is TABLE.
 *        (Value: "RESTORE")
 *    @arg @c kGTLRBigquery_JobConfigurationTableCopy_OperationType_Snapshot The
 *        source table type is TABLE and the destination table type is SNAPSHOT.
 *        (Value: "SNAPSHOT")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** [Pick one] Source table to copy. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

/** [Pick one] Source tables to copy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *sourceTables;

/**
 *  Optional. Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: * WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data and uses the schema and
 *  table constraints from the source table. * WRITE_APPEND: If the table
 *  already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If
 *  the table already exists and contains data, a 'duplicate' error is returned
 *  in the job result. The default value is WRITE_EMPTY. Each action is atomic
 *  and only occurs if BigQuery is able to complete the job successfully.
 *  Creation, truncation and append actions occur as one atomic update upon job
 *  completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  Reason about why a Job was created from a
 *  [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query)
 *  method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For
 *  [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert)
 *  method calls it will always be `REQUESTED`.
 *  [Preview](https://cloud.google.com/products/#product-launch-stages)
 */
@interface GTLRBigquery_JobCreationReason : GTLRObject

/**
 *  Output only. Specifies the high level reason why a Job was created.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobCreationReason_Code_CodeUnspecified Reason is not
 *        specified. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_JobCreationReason_Code_LargeResults The results from
 *        the query cannot fit in the response. (Value: "LARGE_RESULTS")
 *    @arg @c kGTLRBigquery_JobCreationReason_Code_LongRunning The query request
 *        ran beyond a system defined timeout specified by the [timeoutMs field
 *        in the
 *        QueryRequest](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest).
 *        As a result it was considered a long running operation for which a job
 *        was created. (Value: "LONG_RUNNING")
 *    @arg @c kGTLRBigquery_JobCreationReason_Code_Other BigQuery has determined
 *        that the query needs to be executed as a Job. (Value: "OTHER")
 *    @arg @c kGTLRBigquery_JobCreationReason_Code_Requested Job creation was
 *        requested. (Value: "REQUESTED")
 */
@property(nonatomic, copy, nullable) NSString *code;

@end


/**
 *  JobList is the response format for a jobs.list call.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_JobList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  List of jobs that were requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobList_Jobs_Item *> *jobs;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of skipped locations that were unreachable. For more information
 *  about BigQuery locations, see:
 *  https://cloud.google.com/bigquery/docs/locations. Example: "europe-west5"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListFormatJob is a partial projection of job information returned as part of
 *  a jobs.list response.
 */
@interface GTLRBigquery_JobList_Jobs_Item : GTLRObject

/** Required. Describes the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** A result object that will be present only if the job has failed. */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  Unique opaque ID of the job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Unique opaque ID of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  [Full-projection-only] String representation of identity of requesting
 *  party. Populated for both first- and third-party identities. Only present
 *  for APIs that support third-party identities.
 */
@property(nonatomic, copy, nullable) NSString *principalSubject;

/**
 *  Running state of the job. When the state is DONE, errorResult can be checked
 *  to determine whether the job succeeded or failed.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/** [Full-projection-only] Describes the status of this job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** [Full-projection-only] Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  A job reference is a fully qualified identifier for referring to a job.
 */
@interface GTLRBigquery_JobReference : GTLRObject

/**
 *  Required. The ID of the job. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  Optional. The geographic location of the job. The default value is US. For
 *  more information about BigQuery locations, see:
 *  https://cloud.google.com/bigquery/docs/locations
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the project containing this job. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Statistics for a single job execution.
 */
@interface GTLRBigquery_JobStatistics : GTLRObject

/**
 *  Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT
 *  jobs.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completionRatio;

/**
 *  Output only. Statistics for a copy job.
 *
 *  Remapped to 'copyProperty' to avoid NSObject's 'copy'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics5 *copyProperty NS_RETURNS_NOT_RETAINED;

/**
 *  Output only. Creation time of this job, in milliseconds since the epoch.
 *  This field will be present on all jobs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Output only. Statistics for data-masking. Present only for query and extract
 *  jobs.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DataMaskingStatistics *dataMaskingStatistics;

/**
 *  Output only. Name of edition corresponding to the reservation for this job
 *  at the time of this update.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JobStatistics_Edition_Enterprise Enterprise edition.
 *        (Value: "ENTERPRISE")
 *    @arg @c kGTLRBigquery_JobStatistics_Edition_EnterprisePlus Enterprise plus
 *        edition. (Value: "ENTERPRISE_PLUS")
 *    @arg @c kGTLRBigquery_JobStatistics_Edition_ReservationEditionUnspecified
 *        Default value, which will be treated as ENTERPRISE. (Value:
 *        "RESERVATION_EDITION_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_JobStatistics_Edition_Standard Standard edition.
 *        (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *edition;

/**
 *  Output only. End time of this job, in milliseconds since the epoch. This
 *  field will be present whenever a job is in the DONE state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTime;

/** Output only. Statistics for an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics4 *extract;

/**
 *  Output only. The duration in milliseconds of the execution of the final
 *  attempt of this job, as BigQuery may internally re-attempt to execute the
 *  job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *finalExecutionDurationMs;

/** Output only. Statistics for a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics3 *load;

/**
 *  Output only. Number of child jobs executed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numChildJobs;

/**
 *  Output only. If this is a child job, specifies the job ID of the parent.
 */
@property(nonatomic, copy, nullable) NSString *parentJobId;

/** Output only. Statistics for a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics2 *query;

/** Output only. Quotas which delayed this job's start time. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *quotaDeferments;

/**
 *  Output only. Name of the primary reservation assigned to this job. Note that
 *  this could be different than reservations reported in the reservation usage
 *  field if parent reservations were used to execute this job.
 */
@property(nonatomic, copy, nullable) NSString *reservationId;

/**
 *  Output only. Job resource usage breakdown by reservation. This field
 *  reported misleading information and will no longer be populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics_ReservationUsage_Item *> *reservationUsage GTLR_DEPRECATED;

/**
 *  Output only. Statistics for row-level security. Present only for query and
 *  extract jobs.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RowLevelSecurityStatistics *rowLevelSecurityStatistics;

/**
 *  Output only. If this a child job of a script, specifies information about
 *  the context of this job within the script.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ScriptStatistics *scriptStatistics;

/** Output only. Information of the session if this job is part of one. */
@property(nonatomic, strong, nullable) GTLRBigquery_SessionInfo *sessionInfo;

/**
 *  Output only. Start time of this job, in milliseconds since the epoch. This
 *  field will be present when the job transitions from the PENDING state to
 *  either RUNNING or DONE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTime;

/**
 *  Output only. Total bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  Output only. Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

/**
 *  Output only. [Alpha] Information of the multi-statement transaction if this
 *  job is part of one. This property is only expected on a child job or a job
 *  that is in a session. A script parent job is not part of the transaction
 *  started in the script.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TransactionInfo *transactionInfo;

@end


/**
 *  Job resource usage breakdown by reservation.
 */
@interface GTLRBigquery_JobStatistics_ReservationUsage_Item : GTLRObject

/**
 *  Reservation name or "unreserved" for on-demand resource usage and
 *  multi-statement queries.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Total slot milliseconds used by the reservation for a particular job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  Statistics for a query job.
 */
@interface GTLRBigquery_JobStatistics2 : GTLRObject

/** Output only. BI Engine specific Statistics. */
@property(nonatomic, strong, nullable) GTLRBigquery_BiEngineStatistics *biEngineStatistics;

/**
 *  Output only. Billing tier for the job. This is a BigQuery-specific concept
 *  which is not related to the Google Cloud notion of "free tier". The value
 *  here is a measure of the query's resource consumption relative to the amount
 *  of data scanned. For on-demand queries, the limit is 100, and all queries
 *  within this limit are billed at the standard on-demand rates. On-demand
 *  queries that exceed this limit will fail with a billingTierLimitExceeded
 *  error.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *billingTier;

/**
 *  Output only. Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/** Output only. Referenced dataset for DCL statement. */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *dclTargetDataset;

/** Output only. Referenced table for DCL statement. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *dclTargetTable;

/** Output only. Referenced view for DCL statement. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *dclTargetView;

/**
 *  Output only. The number of row access policies affected by a DDL statement.
 *  Present only for DROP ALL ROW ACCESS POLICIES queries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ddlAffectedRowAccessPolicyCount;

/**
 *  Output only. The table after rename. Present only for ALTER TABLE RENAME TO
 *  query.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *ddlDestinationTable;

/**
 *  Output only. The DDL operation performed, possibly dependent on the
 *  pre-existence of the DDL target.
 */
@property(nonatomic, copy, nullable) NSString *ddlOperationPerformed;

/**
 *  Output only. The DDL target dataset. Present only for CREATE/ALTER/DROP
 *  SCHEMA(dataset) queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *ddlTargetDataset;

/**
 *  Output only. [Beta] The DDL target routine. Present only for CREATE/DROP
 *  FUNCTION/PROCEDURE queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *ddlTargetRoutine;

/**
 *  Output only. The DDL target row access policy. Present only for CREATE/DROP
 *  ROW ACCESS POLICY queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RowAccessPolicyReference *ddlTargetRowAccessPolicy;

/**
 *  Output only. The DDL target table. Present only for CREATE/DROP TABLE/VIEW
 *  and DROP ALL ROW ACCESS POLICIES queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *ddlTargetTable;

/**
 *  Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE,
 *  MERGE or TRUNCATE.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DmlStatistics *dmlStats;

/**
 *  Output only. The original estimate of bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytesProcessed;

/** Output only. Stats for EXPORT DATA statement. */
@property(nonatomic, strong, nullable) GTLRBigquery_ExportDataStatistics *exportDataStatistics;

/**
 *  Output only. Job cost breakdown as bigquery internal cost and external
 *  service costs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExternalServiceCost *> *externalServiceCosts;

/** Output only. Statistics for a LOAD query. */
@property(nonatomic, strong, nullable) GTLRBigquery_LoadQueryStatistics *loadQueryStatistics;

/** Output only. Statistics of materialized views of a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_MaterializedViewStatistics *materializedViewStatistics;

/**
 *  Output only. Statistics of metadata cache usage in a query for BigLake
 *  tables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_MetadataCacheStatistics *metadataCacheStatistics;

/** Output only. Statistics of a BigQuery ML training job. */
@property(nonatomic, strong, nullable) GTLRBigquery_MlStatistics *mlStatistics;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelTraining *modelTraining;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingCurrentIteration;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingExpectedTotalIteration;

/**
 *  Output only. The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** Output only. Performance insights. */
@property(nonatomic, strong, nullable) GTLRBigquery_PerformanceInsights *performanceInsights;

/** Output only. Query optimization information for a QUERY job. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryInfo *queryInfo;

/** Output only. Describes execution plan for the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStage *> *queryPlan;

/** Output only. Referenced routines for the job. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_RoutineReference *> *referencedRoutines;

/**
 *  Output only. Referenced tables for the job. Queries that reference more than
 *  50 tables will not have a complete list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *referencedTables;

/**
 *  Output only. Job resource usage breakdown by reservation. This field
 *  reported misleading information and will no longer be populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics2_ReservationUsage_Item *> *reservationUsage GTLR_DEPRECATED;

/**
 *  Output only. The schema of the results. Present only for successful dry run
 *  of non-legacy SQL queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** Output only. Search query specific statistics. */
@property(nonatomic, strong, nullable) GTLRBigquery_SearchStatistics *searchStatistics;

/** Output only. Statistics of a Spark procedure job. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkStatistics *sparkStatistics;

/**
 *  Output only. The type of query statement, if valid. Possible values: *
 *  `SELECT`:
 *  [`SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list)
 *  statement. * `ASSERT`:
 *  [`ASSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements#assert)
 *  statement. * `INSERT`:
 *  [`INSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement)
 *  statement. * `UPDATE`:
 *  [`UPDATE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#update_statement)
 *  statement. * `DELETE`:
 *  [`DELETE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
 *  statement. * `MERGE`:
 *  [`MERGE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
 *  statement. * `CREATE_TABLE`: [`CREATE
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement)
 *  statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE
 *  AS
 *  SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#query_statement)
 *  statement. * `CREATE_VIEW`: [`CREATE
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement)
 *  statement. * `CREATE_MODEL`: [`CREATE
 *  MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement)
 *  statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement)
 *  statement. * `CREATE_FUNCTION`: [`CREATE
 *  FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement)
 *  statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE
 *  FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement)
 *  statement. * `CREATE_PROCEDURE`: [`CREATE
 *  PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure)
 *  statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS
 *  POLICY`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement)
 *  statement. * `CREATE_SCHEMA`: [`CREATE
 *  SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement)
 *  statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement)
 *  statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH
 *  INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement)
 *  statement. * `DROP_TABLE`: [`DROP
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement)
 *  statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement)
 *  statement. * `DROP_VIEW`: [`DROP
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement)
 *  statement. * `DROP_MODEL`: [`DROP
 *  MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model)
 *  statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement)
 *  statement. * `DROP_FUNCTION` : [`DROP
 *  FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement)
 *  statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE
 *  FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function)
 *  statement. * `DROP_PROCEDURE`: [`DROP
 *  PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement)
 *  statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH
 *  INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index)
 *  statement. * `DROP_SCHEMA`: [`DROP
 *  SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement)
 *  statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement)
 *  statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS
 *  POLICY|POLICIES`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement)
 *  statement. * `ALTER_TABLE`: [`ALTER
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement)
 *  statement. * `ALTER_VIEW`: [`ALTER
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement)
 *  statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED
 *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement)
 *  statement. * `ALTER_SCHEMA`: [`ALTER
 *  SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement)
 *  statement. * `SCRIPT`:
 *  [`SCRIPT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language).
 *  * `TRUNCATE_TABLE`: [`TRUNCATE
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement)
 *  statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL
 *  TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement)
 *  statement. * `EXPORT_DATA`: [`EXPORT
 *  DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#export_data_statement)
 *  statement. * `EXPORT_MODEL`: [`EXPORT
 *  MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model)
 *  statement. * `LOAD_DATA`: [`LOAD
 *  DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#load_data_statement)
 *  statement. * `CALL`:
 *  [`CALL`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language#call)
 *  statement.
 */
@property(nonatomic, copy, nullable) NSString *statementType;

/** Output only. Describes a timeline of job execution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryTimelineSample *> *timeline;

/**
 *  Output only. If the project is configured to use on-demand pricing, then
 *  this field contains the total bytes billed for the job. If the project is
 *  configured to use flat-rate pricing, then you are not billed for bytes and
 *  this field is informational only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesBilled;

/**
 *  Output only. Total bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  Output only. For dry-run jobs, totalBytesProcessed is an estimate and this
 *  field specifies the accuracy of the estimate. Possible values can be:
 *  UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise.
 *  LOWER_BOUND: estimate is lower bound of what the query would cost.
 *  UPPER_BOUND: estimate is upper bound of what the query would cost.
 */
@property(nonatomic, copy, nullable) NSString *totalBytesProcessedAccuracy;

/**
 *  Output only. Total number of partitions processed from all partitioned
 *  tables referenced in the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalPartitionsProcessed;

/**
 *  Output only. Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

/**
 *  Output only. Total bytes transferred for cross-cloud queries such as Cross
 *  Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transferredBytes;

/**
 *  Output only. GoogleSQL only: list of undeclared query parameters detected
 *  during a dry run validation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *undeclaredQueryParameters;

/** Output only. Vector Search query specific statistics. */
@property(nonatomic, strong, nullable) GTLRBigquery_VectorSearchStatistics *vectorSearchStatistics;

@end


/**
 *  Job resource usage breakdown by reservation.
 */
@interface GTLRBigquery_JobStatistics2_ReservationUsage_Item : GTLRObject

/**
 *  Reservation name or "unreserved" for on-demand resource usage and
 *  multi-statement queries.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Total slot milliseconds used by the reservation for a particular job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  Statistics for a load job.
 */
@interface GTLRBigquery_JobStatistics3 : GTLRObject

/**
 *  Output only. The number of bad records encountered. Note that if the job has
 *  failed because of more bad records encountered than the maximum allowed in
 *  the load job configuration, then this number can be less than the total
 *  number of bad records present in the input data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *badRecords;

/**
 *  Output only. Number of bytes of source data in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFileBytes;

/**
 *  Output only. Number of source files in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFiles;

/**
 *  Output only. Size of the loaded data in bytes. Note that while a load job is
 *  in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputBytes;

/**
 *  Output only. Number of rows imported in a load job. Note that while an
 *  import job is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputRows;

/** Output only. Describes a timeline of job execution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryTimelineSample *> *timeline;

@end


/**
 *  Statistics for an extract job.
 */
@interface GTLRBigquery_JobStatistics4 : GTLRObject

/**
 *  Output only. Number of files per destination URI or URI pattern specified in
 *  the extract configuration. These values will be in the same order as the
 *  URIs specified in the 'destinationUris' field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *destinationUriFileCounts;

/**
 *  Output only. Number of user bytes extracted into the result. This is the
 *  byte count as computed by BigQuery for billing purposes and doesn't have any
 *  relationship with the number of actual result bytes extracted in the desired
 *  format.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputBytes;

/** Output only. Describes a timeline of job execution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryTimelineSample *> *timeline;

@end


/**
 *  Statistics for a copy job.
 */
@interface GTLRBigquery_JobStatistics5 : GTLRObject

/**
 *  Output only. Number of logical bytes copied to the destination table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copiedLogicalBytes;

/**
 *  Output only. Number of rows copied to the destination table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copiedRows;

@end


/**
 *  GTLRBigquery_JobStatus
 */
@interface GTLRBigquery_JobStatus : GTLRObject

/**
 *  Output only. Final error result of the job. If present, indicates that the
 *  job has completed and was unsuccessful.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  Output only. The first errors encountered during the running of the job. The
 *  final message includes the number of errors that caused the process to stop.
 *  Errors here do not necessarily mean that the job has not completed or was
 *  unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  Output only. Running state of the job. Valid states include 'PENDING',
 *  'RUNNING', and 'DONE'.
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Represents privacy policy associated with "join restrictions". Join
 *  restriction gives data providers the ability to enforce joins on the
 *  'join_allowed_columns' when data is queried from a privacy protected view.
 */
@interface GTLRBigquery_JoinRestrictionPolicy : GTLRObject

/**
 *  Optional. The only columns that joins are allowed on. This field is must be
 *  specified for join_conditions JOIN_ANY and JOIN_ALL and it cannot be set for
 *  JOIN_BLOCKED.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *joinAllowedColumns;

/**
 *  Optional. Specifies if a join is required or not on queries for the view.
 *  Default is JOIN_CONDITION_UNSPECIFIED.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinAll A join
 *        is required on all specified columns. (Value: "JOIN_ALL")
 *    @arg @c kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinAny A join
 *        is required on at least one of the specified columns. (Value:
 *        "JOIN_ANY")
 *    @arg @c kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinBlocked
 *        Joins are blocked for all queries. (Value: "JOIN_BLOCKED")
 *    @arg @c kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinConditionUnspecified
 *        A join is neither required nor restricted on any column. Default
 *        value. (Value: "JOIN_CONDITION_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_JoinRestrictionPolicy_JoinCondition_JoinNotRequired
 *        A join is not required, but if present it is only permitted on
 *        'join_allowed_columns' (Value: "JOIN_NOT_REQUIRED")
 */
@property(nonatomic, copy, nullable) NSString *joinCondition;

@end


/**
 *  Represents a single JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JsonObject : GTLRObject
@end


/**
 *  Json Options for load and make external tables.
 */
@interface GTLRBigquery_JsonOptions : GTLRObject

/**
 *  Optional. The character encoding of the data. The supported values are
 *  UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is
 *  UTF-8.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

@end


/**
 *  Metadata about the Linked Dataset.
 */
@interface GTLRBigquery_LinkedDatasetMetadata : GTLRObject

/**
 *  Output only. Specifies whether Linked Dataset is currently in a linked state
 *  or not.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_LinkedDatasetMetadata_LinkState_Linked Normal Linked
 *        Dataset state. Data is queryable via the Linked Dataset. (Value:
 *        "LINKED")
 *    @arg @c kGTLRBigquery_LinkedDatasetMetadata_LinkState_LinkStateUnspecified
 *        The default value. Default to the LINKED state. (Value:
 *        "LINK_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_LinkedDatasetMetadata_LinkState_Unlinked Data
 *        publisher or owner has unlinked this Linked Dataset. It means you can
 *        no longer query or see the data in the Linked Dataset. (Value:
 *        "UNLINKED")
 */
@property(nonatomic, copy, nullable) NSString *linkState;

@end


/**
 *  A dataset source type which refers to another BigQuery dataset.
 */
@interface GTLRBigquery_LinkedDatasetSource : GTLRObject

/**
 *  The source dataset reference contains project numbers and not project ids.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *sourceDataset;

@end


/**
 *  Response format for a single page when listing BigQuery ML models.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "models" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ListModelsResponse : GTLRCollectionObject

/**
 *  Models in the requested dataset. Only the following fields are populated:
 *  model_reference, model_type, creation_time, last_modified_time and labels.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Model *> *models;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Describes the format of a single result page when listing routines.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "routines" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ListRoutinesResponse : GTLRCollectionObject

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Routines in the requested dataset. Unless read_mask is set in the request,
 *  only the following fields are populated: etag, project_id, dataset_id,
 *  routine_id, routine_type, creation_time, last_modified_time, language, and
 *  remote_function_options.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Routine *> *routines;

@end


/**
 *  Response message for the ListRowAccessPolicies method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rowAccessPolicies" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRBigquery_ListRowAccessPoliciesResponse : GTLRCollectionObject

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Row access policies on the requested table.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_RowAccessPolicy *> *rowAccessPolicies;

@end


/**
 *  Statistics for a LOAD query.
 */
@interface GTLRBigquery_LoadQueryStatistics : GTLRObject

/**
 *  Output only. The number of bad records encountered while processing a LOAD
 *  query. Note that if the job has failed because of more bad records
 *  encountered than the maximum allowed in the load job configuration, then
 *  this number can be less than the total number of bad records present in the
 *  input data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *badRecords;

/**
 *  Output only. This field is deprecated. The number of bytes of source data
 *  copied over the network for a `LOAD` query. `transferred_bytes` has the
 *  canonical value for physical transferred bytes, which is used for BigQuery
 *  Omni billing.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesTransferred GTLR_DEPRECATED;

/**
 *  Output only. Number of bytes of source data in a LOAD query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFileBytes;

/**
 *  Output only. Number of source files in a LOAD query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFiles;

/**
 *  Output only. Size of the loaded data in bytes. Note that while a LOAD query
 *  is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputBytes;

/**
 *  Output only. Number of rows imported in a LOAD query. Note that while a LOAD
 *  query is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputRows;

@end


/**
 *  BigQuery-specific metadata about a location. This will be set on
 *  google.cloud.location.Location.metadata in Cloud Location API responses.
 */
@interface GTLRBigquery_LocationMetadata : GTLRObject

/**
 *  The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This
 *  is for any API consumers that need the legacy “US” and “EU” locations.
 */
@property(nonatomic, copy, nullable) NSString *legacyLocationId;

@end


/**
 *  A materialized view considered for a query job.
 */
@interface GTLRBigquery_MaterializedView : GTLRObject

/**
 *  Whether the materialized view is chosen for the query. A materialized view
 *  can be chosen to rewrite multiple parts of the same query. If a materialized
 *  view is chosen to rewrite any part of the query, then this field is true,
 *  even if the materialized view was not chosen to rewrite others parts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chosen;

/**
 *  If present, specifies a best-effort estimation of the bytes saved by using
 *  the materialized view rather than its base tables.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytesSaved;

/**
 *  If present, specifies the reason why the materialized view was not chosen
 *  for the query.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableDataChange
 *        View is invalidated because of a data change in one or more base
 *        tables. It could be any recent change if the
 *        [`max_staleness`](https://cloud.google.com/bigquery/docs/materialized-views-create#max_staleness)
 *        option is not set for the view, or otherwise any change outside of the
 *        staleness window. (Value: "BASE_TABLE_DATA_CHANGE")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableExpiredPartition
 *        View is invalidated because a base table's partition has expired.
 *        (Value: "BASE_TABLE_EXPIRED_PARTITION")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableFineGrainedSecurityPolicy
 *        View is inaccessible to the user because of a fine-grained security
 *        policy on one of its base tables. (Value:
 *        "BASE_TABLE_FINE_GRAINED_SECURITY_POLICY")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableIncompatibleMetadataChange
 *        View is invalidated because a base table has an incompatible metadata
 *        change. (Value: "BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTablePartitionExpirationChange
 *        View is invalidated because a base table's partition expiration has
 *        changed. (Value: "BASE_TABLE_PARTITION_EXPIRATION_CHANGE")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableTooStale
 *        One of the view's base tables is too stale. For example, the cached
 *        metadata of a BigLake external table needs to be updated. (Value:
 *        "BASE_TABLE_TOO_STALE")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_BaseTableTruncated
 *        View has no cached data because a base table is truncated. (Value:
 *        "BASE_TABLE_TRUNCATED")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_Cost The estimated
 *        cost of the view is more expensive than another view or the base
 *        table. Note: The estimate cost might not match the billed cost.
 *        (Value: "COST")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_NoData View has no
 *        cached data because it has not refreshed yet. (Value: "NO_DATA")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_OutOfTimeTravelWindow
 *        View is outside the time travel window. (Value:
 *        "OUT_OF_TIME_TRAVEL_WINDOW")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_RejectedReasonUnspecified
 *        Default unspecified value. (Value: "REJECTED_REASON_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_MaterializedView_RejectedReason_TimeZone View is
 *        invalidated because it was refreshed with a time zone other than that
 *        of the current job. (Value: "TIME_ZONE")
 */
@property(nonatomic, copy, nullable) NSString *rejectedReason;

/** The candidate materialized view. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

@end


/**
 *  Definition and configuration of a materialized view.
 */
@interface GTLRBigquery_MaterializedViewDefinition : GTLRObject

/**
 *  Optional. This option declares the intention to construct a materialized
 *  view that isn't refreshed incrementally.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowNonIncrementalDefinition;

/**
 *  Optional. Enable automatic refresh of the materialized view when the base
 *  table is updated. The default value is "true".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableRefresh;

/**
 *  Output only. The time when this materialized view was last refreshed, in
 *  milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastRefreshTime;

/**
 *  [Optional] Max staleness of data that could be returned when materizlized
 *  view is queried (formatted as Google SQL Interval type).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *maxStaleness;

/** Required. A query whose results are persisted. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Optional. The maximum frequency at which this materialized view will be
 *  refreshed. The default value is "1800000" (30 minutes).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *refreshIntervalMs;

@end


/**
 *  Statistics of materialized views considered in a query job.
 */
@interface GTLRBigquery_MaterializedViewStatistics : GTLRObject

/**
 *  Materialized views considered for the query job. Only certain materialized
 *  views are used. For a detailed list, see the child message. If many
 *  materialized views are considered, then the list might be incomplete.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_MaterializedView *> *materializedView;

@end


/**
 *  Status of a materialized view. The last refresh timestamp status is omitted
 *  here, but is present in the MaterializedViewDefinition message.
 */
@interface GTLRBigquery_MaterializedViewStatus : GTLRObject

/**
 *  Output only. Error result of the last automatic refresh. If present,
 *  indicates that the last automatic refresh was unsuccessful.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *lastRefreshStatus;

/**
 *  Output only. Refresh watermark of materialized view. The base tables' data
 *  were collected into the materialized view cache until this time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *refreshWatermark;

@end


/**
 *  Statistics for metadata caching in BigLake tables.
 */
@interface GTLRBigquery_MetadataCacheStatistics : GTLRObject

/** Set for the Metadata caching eligible tables referenced in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableMetadataCacheUsage *> *tableMetadataCacheUsage;

@end


/**
 *  Job statistics specific to a BigQuery ML training job.
 */
@interface GTLRBigquery_MlStatistics : GTLRObject

/**
 *  Output only. Trials of a [hyperparameter tuning
 *  job](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  sorted by trial_id.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_HparamTuningTrial *> *hparamTrials;

/**
 *  Results for all completed iterations. Empty for [hyperparameter tuning
 *  jobs](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IterationResult *> *iterationResults;

/**
 *  Output only. Maximum number of iterations specified as max_iterations in the
 *  'CREATE MODEL' query. The actual number of iterations may be less than this
 *  number due to early stop.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIterations;

/**
 *  Output only. The type of the model that is being trained.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Arima ARIMA model. (Value:
 *        "ARIMA")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_ArimaPlus New name for the
 *        ARIMA model. (Value: "ARIMA_PLUS")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_ArimaPlusXreg ARIMA with
 *        external regressors. (Value: "ARIMA_PLUS_XREG")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Autoencoder Autoencoder
 *        model. (Value: "AUTOENCODER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_AutomlClassifier AutoML
 *        Tables classification model. (Value: "AUTOML_CLASSIFIER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_AutomlRegressor AutoML Tables
 *        regression model. (Value: "AUTOML_REGRESSOR")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_BoostedTreeClassifier Boosted
 *        tree classifier model. (Value: "BOOSTED_TREE_CLASSIFIER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_BoostedTreeRegressor Boosted
 *        tree regressor model. (Value: "BOOSTED_TREE_REGRESSOR")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_DnnClassifier DNN classifier
 *        model. (Value: "DNN_CLASSIFIER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_DnnLinearCombinedClassifier
 *        Wide-and-deep classifier model. (Value:
 *        "DNN_LINEAR_COMBINED_CLASSIFIER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_DnnLinearCombinedRegressor
 *        Wide-and-deep regressor model. (Value:
 *        "DNN_LINEAR_COMBINED_REGRESSOR")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_DnnRegressor DNN regressor
 *        model. (Value: "DNN_REGRESSOR")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Kmeans K-means clustering
 *        model. (Value: "KMEANS")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_LinearRegression Linear
 *        regression model. (Value: "LINEAR_REGRESSION")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_LogisticRegression Logistic
 *        regression based classification model. (Value: "LOGISTIC_REGRESSION")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_MatrixFactorization Matrix
 *        factorization model. (Value: "MATRIX_FACTORIZATION")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_ModelTypeUnspecified Default
 *        value. (Value: "MODEL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Onnx An imported ONNX model.
 *        (Value: "ONNX")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Pca Prinpical Component
 *        Analysis model. (Value: "PCA")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_RandomForestClassifier Random
 *        forest classifier model. (Value: "RANDOM_FOREST_CLASSIFIER")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_RandomForestRegressor Random
 *        forest regressor model. (Value: "RANDOM_FOREST_REGRESSOR")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Tensorflow An imported
 *        TensorFlow model. (Value: "TENSORFLOW")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_TensorflowLite An imported
 *        TensorFlow Lite model. (Value: "TENSORFLOW_LITE")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_TransformOnly Model to
 *        capture the columns and logic in the TRANSFORM clause along with
 *        statistics useful for ML analytic functions. (Value: "TRANSFORM_ONLY")
 *    @arg @c kGTLRBigquery_MlStatistics_ModelType_Xgboost An imported XGBoost
 *        model. (Value: "XGBOOST")
 */
@property(nonatomic, copy, nullable) NSString *modelType;

/**
 *  Output only. Training type of the job.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_MlStatistics_TrainingType_HparamTuning
 *        [Hyperparameter tuning
 *        training](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
 *        (Value: "HPARAM_TUNING")
 *    @arg @c kGTLRBigquery_MlStatistics_TrainingType_SingleTraining Single
 *        training with fixed parameter space. (Value: "SINGLE_TRAINING")
 *    @arg @c kGTLRBigquery_MlStatistics_TrainingType_TrainingTypeUnspecified
 *        Unspecified training type. (Value: "TRAINING_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *trainingType;

@end


/**
 *  GTLRBigquery_Model
 */
@interface GTLRBigquery_Model : GTLRObject

/**
 *  The best trial_id across all training runs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bestTrialId GTLR_DEPRECATED;

/**
 *  Output only. The time when this model was created, in millisecs since the
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Output only. The default trial_id to use in TVFs when the trial_id is not
 *  passed in. For single-objective [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, this is the best trial ID. For multi-objective [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, this is the smallest trial ID among all Pareto optimal trials.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultTrialId;

/**
 *  Optional. A user-friendly description of this model.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Custom encryption configuration (e.g., Cloud KMS keys). This shows the
 *  encryption configuration of the model data while stored in BigQuery storage.
 *  This field can be used with PatchModel to update encryption key for an
 *  already encrypted model.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *encryptionConfiguration;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The time when this model expires, in milliseconds since the epoch.
 *  If not present, the model will persist indefinitely. Expired models will be
 *  deleted and their storage reclaimed. The defaultTableExpirationMs property
 *  of the encapsulating dataset can be used to set a default expirationTime on
 *  newly created models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/**
 *  Output only. Input feature columns for the model inference. If the model is
 *  trained with TRANSFORM clause, these are the input of the TRANSFORM clause.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *featureColumns;

/** Optional. A descriptive name for this model. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/** Output only. All hyperparameter search spaces in this model. */
@property(nonatomic, strong, nullable) GTLRBigquery_HparamSearchSpaces *hparamSearchSpaces;

/**
 *  Output only. Trials of a [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  model sorted by trial_id.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_HparamTuningTrial *> *hparamTrials;

/**
 *  Output only. Label columns that were used to train this model. The output of
 *  the model will have a "predicted_" prefix to these columns.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *labelColumns;

/**
 *  The labels associated with this model. You can use these to organize and
 *  group your models. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Model_Labels *labels;

/**
 *  Output only. The time when this model was last modified, in millisecs since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  Output only. The geographic location where the model resides. This value is
 *  inherited from the dataset.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. Unique identifier for this model. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelReference *modelReference;

/**
 *  Output only. Type of the model resource.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Model_ModelType_Arima ARIMA model. (Value: "ARIMA")
 *    @arg @c kGTLRBigquery_Model_ModelType_ArimaPlus New name for the ARIMA
 *        model. (Value: "ARIMA_PLUS")
 *    @arg @c kGTLRBigquery_Model_ModelType_ArimaPlusXreg ARIMA with external
 *        regressors. (Value: "ARIMA_PLUS_XREG")
 *    @arg @c kGTLRBigquery_Model_ModelType_Autoencoder Autoencoder model.
 *        (Value: "AUTOENCODER")
 *    @arg @c kGTLRBigquery_Model_ModelType_AutomlClassifier AutoML Tables
 *        classification model. (Value: "AUTOML_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_AutomlRegressor AutoML Tables
 *        regression model. (Value: "AUTOML_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_BoostedTreeClassifier Boosted tree
 *        classifier model. (Value: "BOOSTED_TREE_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_BoostedTreeRegressor Boosted tree
 *        regressor model. (Value: "BOOSTED_TREE_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnClassifier DNN classifier model.
 *        (Value: "DNN_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnLinearCombinedClassifier
 *        Wide-and-deep classifier model. (Value:
 *        "DNN_LINEAR_COMBINED_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnLinearCombinedRegressor
 *        Wide-and-deep regressor model. (Value:
 *        "DNN_LINEAR_COMBINED_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnRegressor DNN regressor model.
 *        (Value: "DNN_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_Kmeans K-means clustering model.
 *        (Value: "KMEANS")
 *    @arg @c kGTLRBigquery_Model_ModelType_LinearRegression Linear regression
 *        model. (Value: "LINEAR_REGRESSION")
 *    @arg @c kGTLRBigquery_Model_ModelType_LogisticRegression Logistic
 *        regression based classification model. (Value: "LOGISTIC_REGRESSION")
 *    @arg @c kGTLRBigquery_Model_ModelType_MatrixFactorization Matrix
 *        factorization model. (Value: "MATRIX_FACTORIZATION")
 *    @arg @c kGTLRBigquery_Model_ModelType_ModelTypeUnspecified Default value.
 *        (Value: "MODEL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Model_ModelType_Onnx An imported ONNX model. (Value:
 *        "ONNX")
 *    @arg @c kGTLRBigquery_Model_ModelType_Pca Prinpical Component Analysis
 *        model. (Value: "PCA")
 *    @arg @c kGTLRBigquery_Model_ModelType_RandomForestClassifier Random forest
 *        classifier model. (Value: "RANDOM_FOREST_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_RandomForestRegressor Random forest
 *        regressor model. (Value: "RANDOM_FOREST_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_Tensorflow An imported TensorFlow
 *        model. (Value: "TENSORFLOW")
 *    @arg @c kGTLRBigquery_Model_ModelType_TensorflowLite An imported
 *        TensorFlow Lite model. (Value: "TENSORFLOW_LITE")
 *    @arg @c kGTLRBigquery_Model_ModelType_TransformOnly Model to capture the
 *        columns and logic in the TRANSFORM clause along with statistics useful
 *        for ML analytic functions. (Value: "TRANSFORM_ONLY")
 *    @arg @c kGTLRBigquery_Model_ModelType_Xgboost An imported XGBoost model.
 *        (Value: "XGBOOST")
 */
@property(nonatomic, copy, nullable) NSString *modelType;

/**
 *  Output only. For single-objective [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, it only contains the best trial. For multi-objective [hyperparameter
 *  tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, it contains all Pareto optimal trials sorted by trial_id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *optimalTrialIds;

/** Output only. Remote model info */
@property(nonatomic, strong, nullable) GTLRBigquery_RemoteModelInfo *remoteModelInfo;

/** Information for all training runs in increasing order of start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TrainingRun *> *trainingRuns;

/**
 *  Output only. This field will be populated if a TRANSFORM clause was used to
 *  train a model. TRANSFORM clause (if used) takes feature_columns as input and
 *  outputs transform_columns. transform_columns then are used to train the
 *  model.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TransformColumn *> *transformColumns;

@end


/**
 *  The labels associated with this model. You can use these to organize and
 *  group your models. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Model_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_ModelDefinition
 */
@interface GTLRBigquery_ModelDefinition : GTLRObject

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition_ModelOptions *modelOptions;

/** Deprecated. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BqmlTrainingRun *> *trainingRuns;

@end


/**
 *  Deprecated.
 */
@interface GTLRBigquery_ModelDefinition_ModelOptions : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *labels;
@property(nonatomic, copy, nullable) NSString *lossType;
@property(nonatomic, copy, nullable) NSString *modelType;

@end


/**
 *  Options related to model extraction.
 */
@interface GTLRBigquery_ModelExtractOptions : GTLRObject

/**
 *  The 1-based ID of the trial to be exported from a hyperparameter tuning
 *  model. If not specified, the trial with id =
 *  [Model](https://cloud.google.com/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId
 *  is exported. This field is ignored for models not trained with
 *  hyperparameter tuning.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trialId;

@end


/**
 *  Id path of a model.
 */
@interface GTLRBigquery_ModelReference : GTLRObject

/** Required. The ID of the dataset containing this model. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  Required. The ID of the model. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *modelId;

/** Required. The ID of the project containing this model. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_ModelTraining
 */
@interface GTLRBigquery_ModelTraining : GTLRObject

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentIteration;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedTotalIterations;

@end


/**
 *  Evaluation metrics for multi-class classification/classifier models.
 */
@interface GTLRBigquery_MultiClassClassificationMetrics : GTLRObject

/** Aggregate classification metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_AggregateClassificationMetrics *aggregateClassificationMetrics;

/** Confusion matrix at different thresholds. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConfusionMatrix *> *confusionMatrixList;

@end


/**
 *  Parquet Options for load and make external tables.
 */
@interface GTLRBigquery_ParquetOptions : GTLRObject

/**
 *  Optional. Indicates whether to use schema inference specifically for Parquet
 *  LIST logical type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableListInference;

/**
 *  Optional. Indicates whether to infer Parquet ENUM logical type as STRING
 *  instead of BYTES by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enumAsString;

/**
 *  Optional. Indicates how to represent a Parquet map if present.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ParquetOptions_MapTargetType_ArrayOfStruct In this
 *        mode, the map will have the following schema: repeated struct
 *        map_field_name { key value }. (Value: "ARRAY_OF_STRUCT")
 *    @arg @c kGTLRBigquery_ParquetOptions_MapTargetType_MapTargetTypeUnspecified
 *        In this mode, the map will have the following schema: struct
 *        map_field_name { repeated struct key_value { key value } }. (Value:
 *        "MAP_TARGET_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mapTargetType;

@end


/**
 *  The partitioning column information.
 */
@interface GTLRBigquery_PartitionedColumn : GTLRObject

/** Required. The name of the partition column. */
@property(nonatomic, copy, nullable) NSString *field;

@end


/**
 *  The partitioning information, which includes managed table, external table
 *  and metastore partitioned table partition information.
 */
@interface GTLRBigquery_PartitioningDefinition : GTLRObject

/**
 *  Optional. Details about each partitioning column. This field is output only
 *  for all partitioning types other than metastore partitioned tables. BigQuery
 *  native tables only support 1 partitioning column. Other table types may
 *  support 0, 1 or more partitioning columns. For metastore partitioned tables,
 *  the order must match the definition order in the Hive Metastore, where it
 *  must match the physical layout of the table. For example, CREATE TABLE
 *  a_table(id BIGINT, name STRING) PARTITIONED BY (city STRING, state STRING).
 *  In this case the values must be ['city', 'state'] in that order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_PartitionedColumn *> *partitionedColumn;

@end


/**
 *  Partition skew detailed information.
 */
@interface GTLRBigquery_PartitionSkew : GTLRObject

/** Output only. Source stages which produce skewed data. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_SkewSource *> *skewSources;

@end


/**
 *  Performance insights for the job.
 */
@interface GTLRBigquery_PerformanceInsights : GTLRObject

/**
 *  Output only. Average execution ms of previous runs. Indicates the job ran
 *  slow compared to previous executions. To find previous executions, use
 *  INFORMATION_SCHEMA tables and filter jobs with same query hash.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *avgPreviousExecutionMs;

/**
 *  Output only. Query stage performance insights compared to previous runs, for
 *  diagnosing performance regression.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StagePerformanceChangeInsight *> *stagePerformanceChangeInsights;

/**
 *  Output only. Standalone query stage performance insights, for exploring
 *  potential improvements.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StagePerformanceStandaloneInsight *> *stagePerformanceStandaloneInsights;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRBigquery_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Principal component infos, used only for eigen decomposition based models,
 *  e.g., PCA. Ordered by explained_variance in the descending order.
 */
@interface GTLRBigquery_PrincipalComponentInfo : GTLRObject

/**
 *  The explained_variance is pre-ordered in the descending order to compute the
 *  cumulative explained variance ratio.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cumulativeExplainedVarianceRatio;

/**
 *  Explained variance by this principal component, which is simply the
 *  eigenvalue.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *explainedVariance;

/**
 *  Explained_variance over the total explained variance.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *explainedVarianceRatio;

/**
 *  Id of the principal component.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *principalComponentId;

@end


/**
 *  Represents privacy policy that contains the privacy requirements specified
 *  by the data owner. Currently, this is only supported on views.
 */
@interface GTLRBigquery_PrivacyPolicy : GTLRObject

/** Optional. Policy used for aggregation thresholds. */
@property(nonatomic, strong, nullable) GTLRBigquery_AggregationThresholdPolicy *aggregationThresholdPolicy;

/** Optional. Policy used for differential privacy. */
@property(nonatomic, strong, nullable) GTLRBigquery_DifferentialPrivacyPolicy *differentialPrivacyPolicy;

/**
 *  Optional. Join restriction policy is outside of the one of policies, since
 *  this policy can be set along with other policies. This policy gives data
 *  providers the ability to enforce joins on the 'join_allowed_columns' when
 *  data is queried from a privacy protected view.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JoinRestrictionPolicy *joinRestrictionPolicy;

@end


/**
 *  Response object of ListProjects
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "projects" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ProjectList : GTLRCollectionObject

/** A hash of the page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Use this token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Projects to which the user has at least READ access.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ProjectList_Projects_Item *> *projects;

/**
 *  The total number of projects in the page. A wrapper is used here because the
 *  field should still be in the response when the value is 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  Information about a single project.
 */
@interface GTLRBigquery_ProjectList_Projects_Item : GTLRObject

/**
 *  A descriptive name for this project. A wrapper is used here because
 *  friendlyName can be set to the empty string.
 */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of this project.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The numeric ID of this project.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numericId;

/** A unique reference to this project. */
@property(nonatomic, strong, nullable) GTLRBigquery_ProjectReference *projectReference;

@end


/**
 *  A unique reference to a project.
 */
@interface GTLRBigquery_ProjectReference : GTLRObject

/**
 *  Required. ID of the project. Can be either the numeric ID or the assigned ID
 *  of the project.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Query optimization information for a QUERY job.
 */
@interface GTLRBigquery_QueryInfo : GTLRObject

/** Output only. Information about query optimizations. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryInfo_OptimizationDetails *optimizationDetails;

@end


/**
 *  Output only. Information about query optimizations.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_QueryInfo_OptimizationDetails : GTLRObject
@end


/**
 *  A parameter given to a query.
 */
@interface GTLRBigquery_QueryParameter : GTLRObject

/**
 *  Optional. If unset, this is a positional parameter. Otherwise, should be
 *  unique within a query.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. The type of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *parameterType;

/** Required. The value of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue *parameterValue;

@end


/**
 *  The type of a query parameter.
 */
@interface GTLRBigquery_QueryParameterType : GTLRObject

/** Optional. The type of the array's elements, if this is an array. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *arrayType;

/** Optional. The element type of the range, if this is a range. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *rangeElementType;

/**
 *  Optional. The types of the fields of this struct, in order, if this is a
 *  struct.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterType_StructTypes_Item *> *structTypes;

/** Required. The top level type of this field. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The type of a struct parameter.
 */
@interface GTLRBigquery_QueryParameterType_StructTypes_Item : GTLRObject

/**
 *  Optional. Human-oriented description of the field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. The name of this field. */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. The type of this field. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *type;

@end


/**
 *  The value of a query parameter.
 */
@interface GTLRBigquery_QueryParameterValue : GTLRObject

/** Optional. The array values, if this is an array type. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterValue *> *arrayValues;

/** Optional. The range value, if this is a range type. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangeValue *rangeValue;

/** The struct field values. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue_StructValues *structValues;

/** Optional. The value of this value, if a simple scalar type. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The struct field values.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_QueryParameterValue. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_QueryParameterValue_StructValues : GTLRObject
@end


/**
 *  Describes the format of the jobs.query request.
 */
@interface GTLRBigquery_QueryRequest : GTLRObject

/** Optional. Connection properties which can modify the query behavior. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  [Optional] Specifies whether the query should be executed as a continuous
 *  query. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *continuous;

/**
 *  Optional. If true, creates a new session using a randomly generated
 *  session_id. If false, runs query with an existing session_id passed in
 *  ConnectionProperty, otherwise runs query in non-session mode. The session
 *  location will be set to QueryRequest.location if it is present, otherwise
 *  it's set to the default location based on existing routing logic.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  Optional. Specifies the default datasetId and projectId to assume for any
 *  unqualified table names in the query. If not set, all table names in the
 *  query string must be qualified in the format 'datasetId.tableId'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/**
 *  Optional. If set to true, BigQuery doesn't run the job. Instead, if the
 *  query is valid, BigQuery returns statistics about the job such as how many
 *  bytes would be processed. If the query is invalid, an error returns. The
 *  default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** Optional. Output format adjustments. */
@property(nonatomic, strong, nullable) GTLRBigquery_DataFormatOptions *formatOptions;

/**
 *  Optional. If not set, jobs are always required. If set, the query request
 *  will follow the behavior described JobCreationMode.
 *  [Preview](https://cloud.google.com/products/#product-launch-stages)
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationModeUnspecified
 *        If unspecified JOB_CREATION_REQUIRED is the default. (Value:
 *        "JOB_CREATION_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationOptional Job
 *        creation is optional. Returning immediate results is prioritized.
 *        BigQuery will automatically determine if a Job needs to be created.
 *        The conditions under which BigQuery can decide to not create a Job are
 *        subject to change. If Job creation is required, JOB_CREATION_REQUIRED
 *        mode should be used, which is the default. (Value:
 *        "JOB_CREATION_OPTIONAL")
 *    @arg @c kGTLRBigquery_QueryRequest_JobCreationMode_JobCreationRequired
 *        Default. Job creation is always required. (Value:
 *        "JOB_CREATION_REQUIRED")
 */
@property(nonatomic, copy, nullable) NSString *jobCreationMode;

/** The resource type of the request. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Optional. The labels associated with this query. Labels can be used to
 *  organize and group query jobs. Label keys and values can be no longer than
 *  63 characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryRequest_Labels *labels;

/**
 *  The geographic location where the job should run. See details at
 *  https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Limits the bytes billed for this query. Queries with bytes billed
 *  above this limit will fail (without incurring a charge). If unspecified, the
 *  project default is used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBytesBilled;

/**
 *  Optional. The maximum number of rows of data to return per page of results.
 *  Setting this flag to a small value such as 1000 and then paging through
 *  results might improve reliability when the query result set is large. In
 *  addition to this limit, responses are also limited to 10 MB. By default,
 *  there is no maximum row count, and only the byte limit applies.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResults;

/**
 *  GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or
 *  to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls GTLR_DEPRECATED;

/**
 *  Required. A query string to execute, using Google Standard SQL or legacy SQL
 *  syntax. Example: "SELECT COUNT(f1) FROM myProjectId.myDatasetId.myTableId".
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for GoogleSQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  Optional. A unique user provided identifier to ensure idempotent behavior
 *  for queries. Note that this is different from the job_id. It has the
 *  following properties: 1. It is case-sensitive, limited to up to 36 ASCII
 *  characters. A UUID is recommended. 2. Read only queries can ignore this
 *  token since they are nullipotent by definition. 3. For the purposes of
 *  idempotency ensured by the request_id, a request is considered duplicate of
 *  another only if they have the same request_id and are actually duplicates.
 *  When determining whether a request is a duplicate of another request, all
 *  parameters in the request that may affect the result are considered. For
 *  example, query, connection_properties, query_parameters, use_legacy_sql are
 *  parameters that affect the result and are considered when determining
 *  whether a request is a duplicate, but properties like timeout_ms don't
 *  affect the result and are thus not considered. Dry run query requests are
 *  never considered duplicate of another request. 4. When a duplicate mutating
 *  query request is detected, it returns: a. the results of the mutation if it
 *  completes successfully within the timeout. b. the running operation if it is
 *  still in progress at the end of the timeout. 5. Its lifetime is limited to
 *  15 minutes. In other words, if two requests are sent with the same
 *  request_id, but more than 15 minutes apart, idempotency is not guaranteed.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Optional: Specifies the maximum amount of time, in milliseconds,
 *  that the client is willing to wait for the query to complete. By default,
 *  this limit is 10 seconds (10,000 milliseconds). If the query is complete,
 *  the jobComplete field in the response is true. If the query has not yet
 *  completed, jobComplete is false. You can request a longer timeout period in
 *  the timeoutMs field. However, the call is not guaranteed to wait for the
 *  specified timeout; it typically returns after around 200 seconds (200,000
 *  milliseconds), even if the query is not complete. If jobComplete is false,
 *  you can continue to wait for the query to complete by calling the
 *  getQueryResults method until the jobComplete field in the getQueryResults
 *  response is true.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeoutMs;

/**
 *  Specifies whether to use BigQuery's legacy SQL dialect for this query. The
 *  default value is true. If set to false, the query will use BigQuery's
 *  GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  Optional. Whether to look for the result in the query cache. The query cache
 *  is a best-effort cache that will be flushed whenever tables in the query are
 *  modified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

@end


/**
 *  Optional. The labels associated with this query. Labels can be used to
 *  organize and group query jobs. Label keys and values can be no longer than
 *  63 characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_QueryRequest_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_QueryResponse
 */
@interface GTLRBigquery_QueryResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE,
 *  MERGE or TRUNCATE.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DmlStatistics *dmlStats;

/**
 *  Output only. The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful. For more information about error messages,
 *  see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Optional. The reason why a Job was created. Only relevant when a
 *  job_reference is present in the response. If job_reference is not present it
 *  will always be unset.
 *  [Preview](https://cloud.google.com/products/#product-launch-stages)
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobCreationReason *jobCreationReason;

/**
 *  Reference to the Job that was created to run the query. This field will be
 *  present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults). If
 *  job_creation_mode was set to `JOB_CREATION_OPTIONAL` and the query completes
 *  without creating a job, this field will be empty.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/**
 *  A token used for paging results. A non-empty token indicates that additional
 *  results are available. To see additional results, query the
 *  [`jobs.getQueryResults`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults)
 *  method. For more information, see [Paging through table
 *  data](https://cloud.google.com/bigquery/docs/paging-results).
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Auto-generated ID for the query.
 *  [Preview](https://cloud.google.com/products/#product-launch-stages)
 */
@property(nonatomic, copy, nullable) NSString *queryId;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** Output only. Information of the session if this job is part of one. */
@property(nonatomic, strong, nullable) GTLRBigquery_SessionInfo *sessionInfo;

/**
 *  The total number of bytes processed for this query. If this query was a dry
 *  run, this is the number of bytes that would be processed if the query were
 *  run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  Summary of the state of query execution at a given time.
 */
@interface GTLRBigquery_QueryTimelineSample : GTLRObject

/**
 *  Total number of active workers. This does not correspond directly to slot
 *  usage. This is the largest value observed since the last sample.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeUnits;

/**
 *  Total parallel units of work completed by this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedUnits;

/**
 *  Milliseconds elapsed since the start of query execution.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *elapsedMs;

/**
 *  Units of work that can be scheduled immediately. Providing additional slots
 *  for these units of work will accelerate the query, if no other query in the
 *  reservation needs additional slots.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedRunnableUnits;

/**
 *  Total units of work remaining for the query. This number can be revised
 *  (increased or decreased) while the query is running.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingUnits;

/**
 *  Cumulative slot-ms consumed by the query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

@end


/**
 *  GTLRBigquery_RangePartitioning
 */
@interface GTLRBigquery_RangePartitioning : GTLRObject

/**
 *  Required. The name of the column to partition the table on. It must be a
 *  top-level, INT64 column whose mode is NULLABLE or REQUIRED.
 */
@property(nonatomic, copy, nullable) NSString *field;

/** [Experimental] Defines the ranges for range partitioning. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning_Range *range;

@end


/**
 *  [Experimental] Defines the ranges for range partitioning.
 */
@interface GTLRBigquery_RangePartitioning_Range : GTLRObject

/**
 *  [Experimental] The end of range partitioning, exclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  [Experimental] The width of each interval.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interval;

/**
 *  [Experimental] The start of range partitioning, inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Represents the value of a range.
 */
@interface GTLRBigquery_RangeValue : GTLRObject

/**
 *  Optional. The end value of the range. A missing value represents an
 *  unbounded end.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue *end;

/**
 *  Optional. The start value of the range. A missing value represents an
 *  unbounded start.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue *start;

@end


/**
 *  Evaluation metrics used by weighted-ALS models specified by
 *  feedback_type=implicit.
 */
@interface GTLRBigquery_RankingMetrics : GTLRObject

/**
 *  Determines the goodness of a ranking by computing the percentile rank from
 *  the predicted confidence and dividing it by the original rank.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageRank;

/**
 *  Calculates a precision per user for all the items by ranking them and then
 *  averages all the precisions across all the users.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAveragePrecision;

/**
 *  Similar to the mean squared error computed in regression and explicit
 *  recommendation models except instead of computing the rating directly, the
 *  output from evaluate is computed against a preference which is 1 or 0
 *  depending on if the rating exists or not.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredError;

/**
 *  A metric to determine the goodness of a ranking calculated from the
 *  predicted confidence by comparing it to an ideal rank measured by the
 *  original ratings.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *normalizedDiscountedCumulativeGain;

@end


/**
 *  Evaluation metrics for regression and explicit feedback type matrix
 *  factorization models.
 */
@interface GTLRBigquery_RegressionMetrics : GTLRObject

/**
 *  Mean absolute error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsoluteError;

/**
 *  Mean squared error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredError;

/**
 *  Mean squared log error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredLogError;

/**
 *  Median absolute error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *medianAbsoluteError;

/**
 *  R^2 score. This corresponds to r2_score in ML.EVALUATE.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rSquared;

@end


/**
 *  Options for a remote user-defined function.
 */
@interface GTLRBigquery_RemoteFunctionOptions : GTLRObject

/**
 *  Fully qualified name of the user-provided connection object which holds the
 *  authentication information to send requests to the remote service. Format:
 *  ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
 */
@property(nonatomic, copy, nullable) NSString *connection;

/**
 *  Endpoint of the user-provided remote service, e.g.
 *  ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
 */
@property(nonatomic, copy, nullable) NSString *endpoint;

/**
 *  Max number of rows in each batch sent to the remote service. If absent or if
 *  0, BigQuery dynamically decides the number of rows in a batch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBatchingRows;

/**
 *  User-defined context as a set of key/value pairs, which will be sent as
 *  function invocation context together with batched arguments in the requests
 *  to the remote service. The total number of bytes of keys and values must be
 *  less than 8KB.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RemoteFunctionOptions_UserDefinedContext *userDefinedContext;

@end


/**
 *  User-defined context as a set of key/value pairs, which will be sent as
 *  function invocation context together with batched arguments in the requests
 *  to the remote service. The total number of bytes of keys and values must be
 *  less than 8KB.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_RemoteFunctionOptions_UserDefinedContext : GTLRObject
@end


/**
 *  Remote Model Info
 */
@interface GTLRBigquery_RemoteModelInfo : GTLRObject

/**
 *  Output only. Fully qualified name of the user-provided connection object of
 *  the remote model. Format:
 *  ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
 */
@property(nonatomic, copy, nullable) NSString *connection;

/** Output only. The endpoint for remote model. */
@property(nonatomic, copy, nullable) NSString *endpoint;

/**
 *  Output only. Max number of rows in each batch sent to the remote service. If
 *  unset, the number of rows in each batch is set dynamically.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBatchingRows;

/** Output only. The model version for LLM. */
@property(nonatomic, copy, nullable) NSString *remoteModelVersion;

/**
 *  Output only. The remote service type for remote model.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiNaturalLanguageV1
 *        V1 Cloud AI Natural Language API. See more details at [REST Resource:
 *        documents](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents).
 *        (Value: "CLOUD_AI_NATURAL_LANGUAGE_V1")
 *    @arg @c kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiSpeechToTextV2
 *        V2 Speech-to-Text API. See more details at [Google Cloud
 *        Speech-to-Text V2
 *        API](https://cloud.google.com/speech-to-text/v2/docs) (Value:
 *        "CLOUD_AI_SPEECH_TO_TEXT_V2")
 *    @arg @c kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiTranslateV3
 *        V3 Cloud AI Translation API. See more details at [Cloud Translation
 *        API] (https://cloud.google.com/translate/docs/reference/rest). (Value:
 *        "CLOUD_AI_TRANSLATE_V3")
 *    @arg @c kGTLRBigquery_RemoteModelInfo_RemoteServiceType_CloudAiVisionV1 V1
 *        Cloud AI Vision API See more details at [Cloud Vision API]
 *        (https://cloud.google.com/vision/docs/reference/rest). (Value:
 *        "CLOUD_AI_VISION_V1")
 *    @arg @c kGTLRBigquery_RemoteModelInfo_RemoteServiceType_RemoteServiceTypeUnspecified
 *        Unspecified remote service type. (Value:
 *        "REMOTE_SERVICE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *remoteServiceType;

/**
 *  Output only. The name of the speech recognizer to use for speech
 *  recognition. The expected format is
 *  `projects/{project}/locations/{location}/recognizers/{recognizer}`.
 *  Customers can specify this field at model creation. If not specified, a
 *  default recognizer `projects/{model project}/locations/global/recognizers/_`
 *  will be used. See more details at
 *  [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)
 */
@property(nonatomic, copy, nullable) NSString *speechRecognizer;

@end


/**
 *  GTLRBigquery_RestrictionConfig
 */
@interface GTLRBigquery_RestrictionConfig : GTLRObject

/**
 *  Output only. Specifies the type of dataset/table restriction.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_RestrictionConfig_Type_RestrictedDataEgress Restrict
 *        data egress. See [Data
 *        egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
 *        for more details. (Value: "RESTRICTED_DATA_EGRESS")
 *    @arg @c kGTLRBigquery_RestrictionConfig_Type_RestrictionTypeUnspecified
 *        Should never be used. (Value: "RESTRICTION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A user-defined function or a stored procedure.
 */
@interface GTLRBigquery_Routine : GTLRObject

/** Optional. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Argument *> *arguments;

/**
 *  Output only. The time when this routine was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Optional. If set to `DATA_MASKING`, the function is validated and made
 *  available as a masking function. For more information, see [Create custom
 *  masking
 *  routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_DataGovernanceType_DataGovernanceTypeUnspecified
 *        The data governance type is unspecified. (Value:
 *        "DATA_GOVERNANCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Routine_DataGovernanceType_DataMasking The data
 *        governance type is data masking. (Value: "DATA_MASKING")
 */
@property(nonatomic, copy, nullable) NSString *dataGovernanceType;

/**
 *  Required. The body of the routine. For functions, this is the expression in
 *  the AS clause. If language=SQL, it is the substring inside (but excluding)
 *  the parentheses. For example, for the function created with the following
 *  statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x,
 *  "\\n", y))` The definition_body is `concat(x, "\\n", y)` (\\n is not
 *  replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string
 *  in the AS clause. For example, for the function created with the following
 *  statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return
 *  "\\n";\\n'` The definition_body is `return "\\n";\\n` Note that both \\n are
 *  replaced with linebreaks.
 */
@property(nonatomic, copy, nullable) NSString *definitionBody;

/**
 *  Optional. The description of the routine, if defined.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. The determinism level of the JavaScript UDF, if defined.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_DeterminismLevelUnspecified
 *        The determinism of the UDF is unspecified. (Value:
 *        "DETERMINISM_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_Deterministic The UDF is
 *        deterministic, meaning that 2 function calls with the same inputs
 *        always produce the same result, even across 2 query runs. (Value:
 *        "DETERMINISTIC")
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_NotDeterministic The UDF is
 *        not deterministic. (Value: "NOT_DETERMINISTIC")
 */
@property(nonatomic, copy, nullable) NSString *determinismLevel;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If language = "JAVASCRIPT", this field stores the path of the
 *  imported JAVASCRIPT libraries.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *importedLibraries;

/**
 *  Optional. Defaults to "SQL" if remote_function_options field is absent, not
 *  set otherwise.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_Language_Java Java language. (Value: "JAVA")
 *    @arg @c kGTLRBigquery_Routine_Language_Javascript JavaScript language.
 *        (Value: "JAVASCRIPT")
 *    @arg @c kGTLRBigquery_Routine_Language_LanguageUnspecified Default value.
 *        (Value: "LANGUAGE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Routine_Language_Python Python language. (Value:
 *        "PYTHON")
 *    @arg @c kGTLRBigquery_Routine_Language_Scala Scala language. (Value:
 *        "SCALA")
 *    @arg @c kGTLRBigquery_Routine_Language_Sql SQL language. (Value: "SQL")
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Output only. The time when this routine was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/** Optional. Remote function specific options. */
@property(nonatomic, strong, nullable) GTLRBigquery_RemoteFunctionOptions *remoteFunctionOptions;

/**
 *  Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION". If
 *  absent, the return table type is inferred from definition_body at query time
 *  in each query that references this routine. If present, then the columns in
 *  the evaluated table result will be cast to match the column types specified
 *  in return table type, at query time.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlTableType *returnTableType;

/**
 *  Optional if language = "SQL"; required otherwise. Cannot be set if
 *  routine_type = "TABLE_VALUED_FUNCTION". If absent, the return type is
 *  inferred from definition_body at query time in each query that references
 *  this routine. If present, then the evaluated result will be cast to the
 *  specified returned type at query time. For example, for the functions
 *  created with the following statements: * `CREATE FUNCTION Add(x FLOAT64, y
 *  FLOAT64) RETURNS FLOAT64 AS (x + y);` * `CREATE FUNCTION Increment(x
 *  FLOAT64) AS (Add(x, 1));` * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS
 *  FLOAT64 AS (Add(x, -1));` The return_type is `{type_kind: "FLOAT64"}` for
 *  `Add` and `Decrement`, and is absent for `Increment` (inferred as FLOAT64 at
 *  query time). Suppose the function `Add` is replaced by `CREATE OR REPLACE
 *  FUNCTION Add(x INT64, y INT64) AS (x + y);` Then the inferred return type of
 *  `Increment` is automatically changed to INT64 at query time, while the
 *  return type of `Decrement` remains FLOAT64.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *returnType;

/** Required. Reference describing the ID of this routine. */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *routineReference;

/**
 *  Required. The type of routine.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_RoutineType_AggregateFunction Non-built-in
 *        persistent aggregate function. (Value: "AGGREGATE_FUNCTION")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_Procedure Stored procedure.
 *        (Value: "PROCEDURE")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_RoutineTypeUnspecified Default
 *        value. (Value: "ROUTINE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_ScalarFunction Non-built-in
 *        persistent scalar function. (Value: "SCALAR_FUNCTION")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_TableValuedFunction Non-built-in
 *        persistent TVF. (Value: "TABLE_VALUED_FUNCTION")
 */
@property(nonatomic, copy, nullable) NSString *routineType;

/**
 *  Optional. The security mode of the routine, if defined. If not defined, the
 *  security mode is automatically determined from the routine's configuration.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_SecurityMode_Definer The routine is to be
 *        executed with the privileges of the user who defines it. (Value:
 *        "DEFINER")
 *    @arg @c kGTLRBigquery_Routine_SecurityMode_Invoker The routine is to be
 *        executed with the privileges of the user who invokes it. (Value:
 *        "INVOKER")
 *    @arg @c kGTLRBigquery_Routine_SecurityMode_SecurityModeUnspecified The
 *        security mode of the routine is unspecified. (Value:
 *        "SECURITY_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *securityMode;

/** Optional. Spark specific options. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkOptions *sparkOptions;

/**
 *  Optional. Use this option to catch many common errors. Error checking is not
 *  exhaustive, and successfully creating a procedure doesn't guarantee that the
 *  procedure will successfully execute at runtime. If `strictMode` is set to
 *  `TRUE`, the procedure body is further checked for errors such as
 *  non-existent tables or columns. The `CREATE PROCEDURE` statement fails if
 *  the body fails any of these checks. If `strictMode` is set to `FALSE`, the
 *  procedure body is checked only for syntax. For procedures that invoke
 *  themselves recursively, specify `strictMode=FALSE` to avoid non-existent
 *  procedure errors during validation. Default value is `TRUE`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strictMode;

@end


/**
 *  Id path of a routine.
 */
@interface GTLRBigquery_RoutineReference : GTLRObject

/** Required. The ID of the dataset containing this routine. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** Required. The ID of the project containing this routine. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Required. The ID of the routine. The ID must contain only letters (a-z,
 *  A-Z), numbers (0-9), or underscores (_). The maximum length is 256
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *routineId;

@end


/**
 *  A single row in the confusion matrix.
 */
@interface GTLRBigquery_Row : GTLRObject

/** The original label of this row. */
@property(nonatomic, copy, nullable) NSString *actualLabel;

/** Info describing predicted label distribution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Entry *> *entries;

@end


/**
 *  Represents access on a subset of rows on the specified table, defined by its
 *  filter predicate. Access to the subset of rows is controlled by its IAM
 *  policy.
 */
@interface GTLRBigquery_RowAccessPolicy : GTLRObject

/**
 *  Output only. The time when this row access policy was created, in
 *  milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. A SQL boolean expression that represents the rows defined by this
 *  row access policy, similar to the boolean expression in a WHERE clause of a
 *  SELECT query on a table. References to other tables, routines, and temporary
 *  functions are not supported. Examples: region="EU" date_field =
 *  CAST('2019-9-27' as DATE) nullable_field is not NULL numeric_field BETWEEN
 *  1.0 AND 5.0
 */
@property(nonatomic, copy, nullable) NSString *filterPredicate;

/**
 *  Output only. The time when this row access policy was last modified, in
 *  milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedTime;

/** Required. Reference describing the ID of this row access policy. */
@property(nonatomic, strong, nullable) GTLRBigquery_RowAccessPolicyReference *rowAccessPolicyReference;

@end


/**
 *  Id path of a row access policy.
 */
@interface GTLRBigquery_RowAccessPolicyReference : GTLRObject

/** Required. The ID of the dataset containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  Required. The ID of the row access policy. The ID must contain only letters
 *  (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *policyId;

/** Required. The ID of the project containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. The ID of the table containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  Statistics for row-level security.
 */
@interface GTLRBigquery_RowLevelSecurityStatistics : GTLRObject

/**
 *  Whether any accessed data was protected by row access policies.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowLevelSecurityApplied;

@end


/**
 *  Options related to script execution.
 */
@interface GTLRBigquery_ScriptOptions : GTLRObject

/**
 *  Determines which statement in the script represents the "key result", used
 *  to populate the schema and query results of the script job. Default is LAST.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ScriptOptions_KeyResultStatement_FirstSelect The
 *        first SELECT statement determines the key result. (Value:
 *        "FIRST_SELECT")
 *    @arg @c kGTLRBigquery_ScriptOptions_KeyResultStatement_KeyResultStatementKindUnspecified
 *        Default value. (Value: "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_ScriptOptions_KeyResultStatement_Last The last
 *        result determines the key result. (Value: "LAST")
 */
@property(nonatomic, copy, nullable) NSString *keyResultStatement;

/**
 *  Limit on the number of bytes billed per statement. Exceeding this budget
 *  results in an error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statementByteBudget;

/**
 *  Timeout period for each statement in a script.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statementTimeoutMs;

@end


/**
 *  Represents the location of the statement/expression being evaluated. Line
 *  and column numbers are defined as follows: - Line and column numbers start
 *  with one. That is, line 1 column 1 denotes the start of the script. - When
 *  inside a stored procedure, all line/column numbers are relative to the
 *  procedure body, not the script in which the procedure was defined. -
 *  Start/end positions exclude leading/trailing comments and whitespace. The
 *  end position always ends with a ";", when present. - Multi-byte Unicode
 *  characters are treated as just one column. - If the original script (or
 *  procedure definition) contains TAB characters, a tab "snaps" the indentation
 *  forward to the nearest multiple of 8 characters, plus 1. For example, a TAB
 *  on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column
 *  9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next
 *  character to column 17.
 */
@interface GTLRBigquery_ScriptStackFrame : GTLRObject

/**
 *  Output only. One-based end column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endColumn;

/**
 *  Output only. One-based end line.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endLine;

/**
 *  Output only. Name of the active procedure, empty if in a top-level script.
 */
@property(nonatomic, copy, nullable) NSString *procedureId;

/**
 *  Output only. One-based start column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startColumn;

/**
 *  Output only. One-based start line.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startLine;

/** Output only. Text of the current statement/expression. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Job statistics specific to the child job of a script.
 */
@interface GTLRBigquery_ScriptStatistics : GTLRObject

/**
 *  Whether this child job was a statement or expression.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_ScriptStatistics_EvaluationKind_EvaluationKindUnspecified
 *        Default value. (Value: "EVALUATION_KIND_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_ScriptStatistics_EvaluationKind_Expression The
 *        statement evaluates an expression that appears in the script. (Value:
 *        "EXPRESSION")
 *    @arg @c kGTLRBigquery_ScriptStatistics_EvaluationKind_Statement The
 *        statement appears directly in the script. (Value: "STATEMENT")
 */
@property(nonatomic, copy, nullable) NSString *evaluationKind;

/**
 *  Stack trace showing the line/column/procedure name of each frame on the
 *  stack at the point where the current evaluation happened. The leaf frame is
 *  first, the primary script is last. Never empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ScriptStackFrame *> *stackFrames;

@end


/**
 *  Statistics for a search query. Populated as part of JobStatistics2.
 */
@interface GTLRBigquery_SearchStatistics : GTLRObject

/**
 *  When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
 *  why indexes were not used in all or part of the search query. If
 *  `indexUsageMode` is `FULLY_USED`, this field is not populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IndexUnusedReason *> *indexUnusedReasons;

/**
 *  Specifies the index usage mode for the query.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_SearchStatistics_IndexUsageMode_FullyUsed The entire
 *        search query used search indexes. (Value: "FULLY_USED")
 *    @arg @c kGTLRBigquery_SearchStatistics_IndexUsageMode_IndexUsageModeUnspecified
 *        Index usage mode not specified. (Value:
 *        "INDEX_USAGE_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_SearchStatistics_IndexUsageMode_PartiallyUsed Part
 *        of the search query used search indexes. See [`indexUnusedReasons`]
 *        (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for why other
 *        parts of the query did not use search indexes. (Value:
 *        "PARTIALLY_USED")
 *    @arg @c kGTLRBigquery_SearchStatistics_IndexUsageMode_Unused No search
 *        indexes were used in the search query. See [`indexUnusedReasons`]
 *        (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for detailed
 *        reasons. (Value: "UNUSED")
 */
@property(nonatomic, copy, nullable) NSString *indexUsageMode;

@end


/**
 *  Serializer and deserializer information.
 */
@interface GTLRBigquery_SerDeInfo : GTLRObject

/** Optional. Name of the SerDe. The maximum length is 256 characters. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Key-value pairs that define the initialization parameters for the
 *  serialization library. Maximum size 10 Kib.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SerDeInfo_Parameters *parameters;

/**
 *  Required. Specifies a fully-qualified class name of the serialization
 *  library that is responsible for the translation of data between table
 *  representation and the underlying low-level input and output format
 *  structures. The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *serializationLibrary;

@end


/**
 *  Optional. Key-value pairs that define the initialization parameters for the
 *  serialization library. Maximum size 10 Kib.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_SerDeInfo_Parameters : GTLRObject
@end


/**
 *  [Preview] Information related to sessions.
 */
@interface GTLRBigquery_SessionInfo : GTLRObject

/** Output only. The id of the session. */
@property(nonatomic, copy, nullable) NSString *sessionId;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRBigquery_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Details about source stages which produce skewed data.
 */
@interface GTLRBigquery_SkewSource : GTLRObject

/**
 *  Output only. Stage id of the skew source stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stageId;

@end


/**
 *  Information about base table and snapshot time of the snapshot.
 */
@interface GTLRBigquery_SnapshotDefinition : GTLRObject

/** Required. Reference describing the ID of the table that was snapshot. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTableReference;

/**
 *  Required. The time at which the base table was snapshot. This value is
 *  reported in the JSON response using RFC3339 format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *snapshotTime;

@end


/**
 *  Spark job logs can be filtered by these fields in Cloud Logging.
 */
@interface GTLRBigquery_SparkLoggingInfo : GTLRObject

/** Output only. Project ID where the Spark logs were written. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Output only. Resource type used for logging. */
@property(nonatomic, copy, nullable) NSString *resourceType;

@end


/**
 *  Options for a user-defined Spark routine.
 */
@interface GTLRBigquery_SparkOptions : GTLRObject

/**
 *  Archive files to be extracted into the working directory of each executor.
 *  For more information about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *archiveUris;

/**
 *  Fully qualified name of the user-provided Spark connection object. Format:
 *  ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
 */
@property(nonatomic, copy, nullable) NSString *connection;

/** Custom container image for the runtime environment. */
@property(nonatomic, copy, nullable) NSString *containerImage;

/**
 *  Files to be placed in the working directory of each executor. For more
 *  information about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileUris;

/**
 *  JARs to include on the driver and executor CLASSPATH. For more information
 *  about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarUris;

/**
 *  The fully qualified name of a class in jar_uris, for example,
 *  com.example.wordcount. Exactly one of main_class and main_jar_uri field
 *  should be set for Java/Scala language type.
 */
@property(nonatomic, copy, nullable) NSString *mainClass;

/**
 *  The main file/jar URI of the Spark application. Exactly one of the
 *  definition_body field and the main_file_uri field must be set for Python.
 *  Exactly one of main_class and main_file_uri field should be set for
 *  Java/Scala language type.
 */
@property(nonatomic, copy, nullable) NSString *mainFileUri;

/**
 *  Configuration properties as a set of key/value pairs, which will be passed
 *  on to the Spark application. For more information, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure
 *  option
 *  list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkOptions_Properties *properties;

/**
 *  Python files to be placed on the PYTHONPATH for PySpark application.
 *  Supported file types: `.py`, `.egg`, and `.zip`. For more information about
 *  Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pyFileUris;

/** Runtime version. If not specified, the default runtime version is used. */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

@end


/**
 *  Configuration properties as a set of key/value pairs, which will be passed
 *  on to the Spark application. For more information, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure
 *  option
 *  list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_SparkOptions_Properties : GTLRObject
@end


/**
 *  Statistics for a BigSpark query. Populated as part of JobStatistics2
 */
@interface GTLRBigquery_SparkStatistics : GTLRObject

/**
 *  Output only. Endpoints returned from Dataproc. Key list: -
 *  history_server_endpoint: A link to Spark job UI.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkStatistics_Endpoints *endpoints;

/**
 *  Output only. The Google Cloud Storage bucket that is used as the default
 *  file system by the Spark application. This field is only filled when the
 *  Spark procedure uses the invoker security mode. The `gcsStagingBucket`
 *  bucket is inferred from the `\@\@spark_proc_properties.staging_bucket`
 *  system variable (if it is provided). Otherwise, BigQuery creates a default
 *  staging bucket for the job and returns the bucket name in this field.
 *  Example: * `gs://[bucket_name]`
 */
@property(nonatomic, copy, nullable) NSString *gcsStagingBucket;

/**
 *  Output only. The Cloud KMS encryption key that is used to protect the
 *  resources created by the Spark job. If the Spark procedure uses the invoker
 *  security mode, the Cloud KMS encryption key is either inferred from the
 *  provided system variable, `\@\@spark_proc_properties.kms_key_name`, or the
 *  default key of the BigQuery job's project (if the CMEK organization policy
 *  is enforced). Otherwise, the Cloud KMS key is either inferred from the Spark
 *  connection associated with the procedure (if it is provided), or from the
 *  default key of the Spark connection's project if the CMEK organization
 *  policy is enforced. Example: *
 *  `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/** Output only. Logging info is used to generate a link to Cloud Logging. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkLoggingInfo *loggingInfo;

/** Output only. Spark job ID if a Spark job is created successfully. */
@property(nonatomic, copy, nullable) NSString *sparkJobId;

/**
 *  Output only. Location where the Spark job is executed. A location is
 *  selected by BigQueury for jobs configured to run in a multi-region.
 */
@property(nonatomic, copy, nullable) NSString *sparkJobLocation;

@end


/**
 *  Output only. Endpoints returned from Dataproc. Key list: -
 *  history_server_endpoint: A link to Spark job UI.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_SparkStatistics_Endpoints : GTLRObject
@end


/**
 *  Performance insights compared to the previous executions for a specific
 *  stage.
 */
@interface GTLRBigquery_StagePerformanceChangeInsight : GTLRObject

/** Output only. Input data change insight of the query stage. */
@property(nonatomic, strong, nullable) GTLRBigquery_InputDataChange *inputDataChange;

/**
 *  Output only. The stage id that the insight mapped to.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stageId;

@end


/**
 *  Standalone performance insights for a specific stage.
 */
@interface GTLRBigquery_StagePerformanceStandaloneInsight : GTLRObject

/**
 *  Output only. If present, the stage had the following reasons for being
 *  disqualified from BI Engine execution.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BiEngineReason *> *biEngineReasons;

/** Output only. High cardinality joins in the stage. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_HighCardinalityJoin *> *highCardinalityJoins;

/**
 *  Output only. True if the stage has insufficient shuffle quota.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insufficientShuffleQuota;

/** Output only. Partition skew in the stage. */
@property(nonatomic, strong, nullable) GTLRBigquery_PartitionSkew *partitionSkew;

/**
 *  Output only. True if the stage has a slot contention issue.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotContention;

/**
 *  Output only. The stage id that the insight mapped to.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stageId;

@end


/**
 *  The data type of a variable such as a function argument. Examples include: *
 *  INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY",
 *  "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind":
 *  "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind":
 *  "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY",
 *  "arrayElementType": {"typeKind": "DATE"} } } ] } } * RANGE: { "typeKind":
 *  "RANGE", "rangeElementType": {"typeKind": "DATE"} }
 */
@interface GTLRBigquery_StandardSqlDataType : GTLRObject

/** The type of the array's elements, if type_kind = "ARRAY". */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *arrayElementType;

/** The type of the range's elements, if type_kind = "RANGE". */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *rangeElementType;

/** The fields of this struct, in order, if type_kind = "STRUCT". */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlStructType *structType;

/**
 *  Required. The top level type of this field. Can be any GoogleSQL data type
 *  (e.g., "INT64", "DATE", "ARRAY").
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Array Encoded as a list
 *        with types matching Type.array_type. (Value: "ARRAY")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bignumeric Encoded as a
 *        decimal string. (Value: "BIGNUMERIC")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bool Encoded as a
 *        boolean "false" or "true". (Value: "BOOL")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bytes Encoded as a
 *        base64 string per RFC 4648, section 4. (Value: "BYTES")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Date Encoded as RFC
 *        3339 full-date format string: 1985-04-12 (Value: "DATE")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Datetime Encoded as RFC
 *        3339 full-date "T" partial-time: 1985-04-12T23:20:50.52 (Value:
 *        "DATETIME")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Float64 Encoded as a
 *        number, or string "NaN", "Infinity" or "-Infinity". (Value: "FLOAT64")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Geography Encoded as
 *        WKT (Value: "GEOGRAPHY")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Int64 Encoded as a
 *        string in decimal format. (Value: "INT64")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Interval Encoded as
 *        fully qualified 3 part: 0-5 15 2:30:45.6 (Value: "INTERVAL")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Json Encoded as a
 *        string. (Value: "JSON")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Numeric Encoded as a
 *        decimal string. (Value: "NUMERIC")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Range Encoded as a pair
 *        with types matching range_element_type. Pairs must begin with "[", end
 *        with ")", and be separated by ", ". (Value: "RANGE")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_String Encoded as a
 *        string value. (Value: "STRING")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Struct Encoded as a
 *        list with fields of type Type.struct_type[i]. List is used because a
 *        JSON object cannot have duplicate field names. (Value: "STRUCT")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Time Encoded as RFC
 *        3339 partial-time format string: 23:20:50.52 (Value: "TIME")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Timestamp Encoded as an
 *        RFC 3339 timestamp with mandatory "Z" time zone string:
 *        1985-04-12T23:20:50.52Z (Value: "TIMESTAMP")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_TypeKindUnspecified
 *        Invalid type. (Value: "TYPE_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *typeKind;

@end


/**
 *  A field or a column.
 */
@interface GTLRBigquery_StandardSqlField : GTLRObject

/** Optional. The name of this field. Can be absent for struct fields. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The type of this parameter. Absent if not explicitly specified
 *  (e.g., CREATE FUNCTION statement can omit the return type; in this case the
 *  output parameter does not have this "type" field).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *type;

@end


/**
 *  The representation of a SQL STRUCT type.
 */
@interface GTLRBigquery_StandardSqlStructType : GTLRObject

/** Fields within the struct. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *fields;

@end


/**
 *  A table type
 */
@interface GTLRBigquery_StandardSqlTableType : GTLRObject

/** The columns in this table type */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *columns;

@end


/**
 *  Contains information about how a table's data is stored and accessed by open
 *  source query engines.
 */
@interface GTLRBigquery_StorageDescriptor : GTLRObject

/**
 *  Optional. Specifies the fully qualified class name of the InputFormat (e.g.
 *  "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"). The maximum length is
 *  128 characters.
 */
@property(nonatomic, copy, nullable) NSString *inputFormat;

/**
 *  Optional. The physical location of the table (e.g.
 *  `gs://spark-dataproc-data/pangea-data/case_sensitive/` or
 *  `gs://spark-dataproc-data/pangea-data/ *`). The maximum length is 2056
 *  bytes.
 */
@property(nonatomic, copy, nullable) NSString *locationUri;

/**
 *  Optional. Specifies the fully qualified class name of the OutputFormat (e.g.
 *  "org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"). The maximum length is
 *  128 characters.
 */
@property(nonatomic, copy, nullable) NSString *outputFormat;

/** Optional. Serializer and deserializer information. */
@property(nonatomic, strong, nullable) GTLRBigquery_SerDeInfo *serdeInfo;

@end


/**
 *  GTLRBigquery_Streamingbuffer
 */
@interface GTLRBigquery_Streamingbuffer : GTLRObject

/**
 *  Output only. A lower-bound estimate of the number of bytes currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytes;

/**
 *  Output only. A lower-bound estimate of the number of rows currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedRows;

/**
 *  Output only. Contains the timestamp of the oldest entry in the streaming
 *  buffer, in milliseconds since the epoch, if the streaming buffer is
 *  available.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oldestEntryTime;

@end


/**
 *  Search space for string and enum.
 */
@interface GTLRBigquery_StringHparamSearchSpace : GTLRObject

/** Canididates for the string or enum parameter in lower case. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *candidates;

@end


/**
 *  System variables given to a query.
 */
@interface GTLRBigquery_SystemVariables : GTLRObject

/** Output only. Data type for each system variable. */
@property(nonatomic, strong, nullable) GTLRBigquery_SystemVariables_Types *types;

/** Output only. Value for each system variable. */
@property(nonatomic, strong, nullable) GTLRBigquery_SystemVariables_Values *values;

@end


/**
 *  Output only. Data type for each system variable.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_StandardSqlDataType. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_SystemVariables_Types : GTLRObject
@end


/**
 *  Output only. Value for each system variable.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_SystemVariables_Values : GTLRObject
@end


/**
 *  GTLRBigquery_Table
 */
@interface GTLRBigquery_Table : GTLRObject

/** Optional. Specifies the configuration of a BigLake managed table. */
@property(nonatomic, strong, nullable) GTLRBigquery_BigLakeConfiguration *biglakeConfiguration;

/**
 *  Output only. Contains information about the clone. This value is set via the
 *  clone operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_CloneDefinition *cloneDefinition;

/**
 *  Clustering specification for the table. Must be specified with time-based
 *  partitioning, data in the table will be first partitioned and subsequently
 *  clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  Output only. The time when this table was created, in milliseconds since the
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Optional. Defines the default collation specification of new STRING fields
 *  in the table. During table creation or update, if a STRING field is added to
 *  this table without explicit collation specified, then the table inherits the
 *  table default collation. A change to this field affects only fields added
 *  afterwards, and does not alter the existing fields. The following values are
 *  supported: * 'und:ci': undetermined locale, case insensitive. * '': empty
 *  string. Default to case-sensitive behavior.
 */
@property(nonatomic, copy, nullable) NSString *defaultCollation;

/**
 *  Optional. Defines the default rounding mode specification of new decimal
 *  fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or
 *  update, if a decimal field is added to this table without an explicit
 *  rounding mode specified, then the field inherits the table default rounding
 *  mode. Changing this field doesn't affect existing fields.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Table_DefaultRoundingMode_RoundHalfAwayFromZero
 *        ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9
 *        => 2 (Value: "ROUND_HALF_AWAY_FROM_ZERO")
 *    @arg @c kGTLRBigquery_Table_DefaultRoundingMode_RoundHalfEven
 *        ROUND_HALF_EVEN rounds half values to the nearest even value when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8,
 *        1.9 => 2 2.5 => 2 (Value: "ROUND_HALF_EVEN")
 *    @arg @c kGTLRBigquery_Table_DefaultRoundingMode_RoundingModeUnspecified
 *        Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO. (Value:
 *        "ROUNDING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *defaultRoundingMode;

/**
 *  Optional. A user-friendly description of this table.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *encryptionConfiguration;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The time when this table expires, in milliseconds since the epoch.
 *  If not present, the table will persist indefinitely. Expired tables will be
 *  deleted and their storage reclaimed. The defaultTableExpirationMs property
 *  of the encapsulating dataset can be used to set a default expirationTime on
 *  newly created tables.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/** Optional. Options defining open source compatible table. */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalCatalogTableOptions *externalCatalogTableOptions;

/**
 *  Optional. Describes the data format, location, and other properties of a
 *  table stored outside of BigQuery. By defining these properties, the data
 *  source can then be queried as if it were a standard BigQuery table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalDataConfiguration *externalDataConfiguration;

/** Optional. A descriptive name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  Output only. An opaque ID uniquely identifying the table.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The type of resource ID. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Table_Labels *labels;

/**
 *  Output only. The time when this table was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  Output only. The geographic location where the table resides. This value is
 *  inherited from the dataset.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Optional. The materialized view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_MaterializedViewDefinition *materializedView;

/** Output only. The materialized view status. */
@property(nonatomic, strong, nullable) GTLRBigquery_MaterializedViewStatus *materializedViewStatus;

/**
 *  Optional. The maximum staleness of data that could be returned when the
 *  table (or stale MV) is queried. Staleness encoded as a string encoding of
 *  sql IntervalValue type.
 */
@property(nonatomic, copy, nullable) NSString *maxStaleness;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition *model;

/**
 *  Output only. Number of logical bytes that are less than 90 days old.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numActiveLogicalBytes;

/**
 *  Output only. Number of physical bytes less than 90 days old. This data is
 *  not kept in real time, and might be delayed by a few seconds to a few
 *  minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numActivePhysicalBytes;

/**
 *  Output only. The size of this table in logical bytes, excluding any data in
 *  the streaming buffer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numBytes;

/**
 *  Output only. Number of physical bytes used by current live data storage.
 *  This data is not kept in real time, and might be delayed by a few seconds to
 *  a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numCurrentPhysicalBytes;

/**
 *  Output only. The number of logical bytes in the table that are considered
 *  "long-term storage".
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermBytes;

/**
 *  Output only. Number of logical bytes that are more than 90 days old.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermLogicalBytes;

/**
 *  Output only. Number of physical bytes more than 90 days old. This data is
 *  not kept in real time, and might be delayed by a few seconds to a few
 *  minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermPhysicalBytes;

/**
 *  Output only. The number of partitions present in the table or materialized
 *  view. This data is not kept in real time, and might be delayed by a few
 *  seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPartitions;

/**
 *  Output only. The physical size of this table in bytes. This includes storage
 *  used for time travel.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPhysicalBytes;

/**
 *  Output only. The number of rows of data in this table, excluding any data in
 *  the streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numRows;

/**
 *  Output only. Number of physical bytes used by time travel storage (deleted
 *  or changed data). This data is not kept in real time, and might be delayed
 *  by a few seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTimeTravelPhysicalBytes;

/**
 *  Output only. Total number of logical bytes in the table or materialized
 *  view.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTotalLogicalBytes;

/**
 *  Output only. The physical size of this table in bytes. This also includes
 *  storage used for time travel. This data is not kept in real time, and might
 *  be delayed by a few seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTotalPhysicalBytes;

/**
 *  Optional. The partition information for all table formats, including managed
 *  partitioned tables, hive partitioned tables, iceberg partitioned, and
 *  metastore partitioned tables. This field is only populated for metastore
 *  partitioned tables. For other table formats, this is an output only field.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_PartitioningDefinition *partitionDefinition;

/** If specified, configures range partitioning for this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Optional. Output only. Table references of all replicas currently active on
 *  the table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *replicas;

/**
 *  Optional. If set to true, queries over this table require a partition filter
 *  that can be used for partition elimination to be specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/**
 *  [Optional] The tags associated with this table. Tag keys are globally
 *  unique. See additional information on
 *  [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions).
 *  An object containing a list of "key": value pairs. The key is the namespaced
 *  friendly name of the tag key, e.g. "12345/environment" where 12345 is parent
 *  id. The value is the friendly short name of the tag value, e.g.
 *  "production".
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Table_ResourceTags *resourceTags;

/**
 *  Optional. Output only. Restriction config for table. If set, restrict
 *  certain accesses on the table based on the config. See [Data
 *  egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
 *  for more details.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RestrictionConfig *restrictions;

/** Optional. Describes the schema of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** Output only. A URL that can be used to access this resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Output only. Contains information about the snapshot. This value is set via
 *  snapshot creation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SnapshotDefinition *snapshotDefinition;

/**
 *  Output only. Contains information regarding this table's streaming buffer,
 *  if one is present. This field will be absent if the table is not being
 *  streamed to or if there is no data in the streaming buffer.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Streamingbuffer *streamingBuffer;

/** Optional. Tables Primary Key and Foreign Key information */
@property(nonatomic, strong, nullable) GTLRBigquery_TableConstraints *tableConstraints;

/** Required. Reference describing the ID of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  Optional. Table replication info for table created `AS REPLICA` DDL like:
 *  `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReplicationInfo *tableReplicationInfo;

/** If specified, configures time-based partitioning for this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  Output only. Describes the table type. The following values are supported: *
 *  `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL
 *  query. * `EXTERNAL`: A table that references data stored in an external
 *  storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A
 *  precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery
 *  table that preserves the contents of a base table at a particular time. See
 *  additional information on [table
 *  snapshots](https://cloud.google.com/bigquery/docs/table-snapshots-intro).
 *  The default value is `TABLE`.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Optional. The view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_ViewDefinition *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Table_Labels : GTLRObject
@end


/**
 *  [Optional] The tags associated with this table. Tag keys are globally
 *  unique. See additional information on
 *  [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions).
 *  An object containing a list of "key": value pairs. The key is the namespaced
 *  friendly name of the tag key, e.g. "12345/environment" where 12345 is parent
 *  id. The value is the friendly short name of the tag value, e.g.
 *  "production".
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Table_ResourceTags : GTLRObject
@end


/**
 *  GTLRBigquery_TableCell
 */
@interface GTLRBigquery_TableCell : GTLRObject

/**
 *  v
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id v;

@end


/**
 *  The TableConstraints defines the primary key and foreign key.
 */
@interface GTLRBigquery_TableConstraints : GTLRObject

/**
 *  Optional. Present only if the table has a foreign key. The foreign key is
 *  not enforced.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableConstraints_ForeignKeys_Item *> *foreignKeys;

/** Represents the primary key constraint on a table's columns. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableConstraints_PrimaryKey *primaryKey;

@end


/**
 *  Represents a foreign key constraint on a table's columns.
 */
@interface GTLRBigquery_TableConstraints_ForeignKeys_Item : GTLRObject

/** Required. The columns that compose the foreign key. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableConstraints_ForeignKeys_Item_ColumnReferences_Item *> *columnReferences;

/** Optional. Set only if the foreign key constraint is named. */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRBigquery_TableConstraints_ForeignKeys_Item_ReferencedTable *referencedTable;

@end


/**
 *  Represents the primary key constraint on a table's columns.
 */
@interface GTLRBigquery_TableConstraints_PrimaryKey : GTLRObject

/** Required. The columns that are composed of the primary key constraint. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *columns;

@end


/**
 *  The pair of the foreign key column and primary key column.
 */
@interface GTLRBigquery_TableConstraints_ForeignKeys_Item_ColumnReferences_Item : GTLRObject

/**
 *  Required. The column in the primary key that are referenced by the
 *  referencing_column.
 */
@property(nonatomic, copy, nullable) NSString *referencedColumn;

/** Required. The column that composes the foreign key. */
@property(nonatomic, copy, nullable) NSString *referencingColumn;

@end


/**
 *  GTLRBigquery_TableConstraints_ForeignKeys_Item_ReferencedTable
 */
@interface GTLRBigquery_TableConstraints_ForeignKeys_Item_ReferencedTable : GTLRObject

@property(nonatomic, copy, nullable) NSString *datasetId;
@property(nonatomic, copy, nullable) NSString *projectId;
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  Request for sending a single streaming insert.
 */
@interface GTLRBigquery_TableDataInsertAllRequest : GTLRObject

/**
 *  Optional. Accept rows that contain values that do not match the schema. The
 *  unknown values are ignored. Default is false, which treats unknown values as
 *  errors.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  Optional. The resource type of the response. The value is not checked at the
 *  backend. Historically, it has been set to
 *  "bigquery#tableDataInsertAllRequest" but you are not required to set it.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllRequest_Rows_Item *> *rows;

/**
 *  Optional. Insert all valid rows of a request, even if invalid rows exist.
 *  The default value is false, which causes the entire request to fail if any
 *  invalid rows exist.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipInvalidRows;

/**
 *  Optional. If specified, treats the destination table as a base template, and
 *  inserts the rows into an instance table named
 *  "{destination}{templateSuffix}". BigQuery will manage creation of the
 *  instance table, using the schema of the base template table. See
 *  https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables
 *  for considerations when working with templates tables.
 */
@property(nonatomic, copy, nullable) NSString *templateSuffix;

/**
 *  Optional. Unique request trace id. Used for debugging purposes only. It is
 *  case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.
 */
@property(nonatomic, copy, nullable) NSString *traceId;

@end


/**
 *  Data for a single insertion row.
 */
@interface GTLRBigquery_TableDataInsertAllRequest_Rows_Item : GTLRObject

/**
 *  Insertion ID for best-effort deduplication. This feature is not recommended,
 *  and users seeking stronger insertion semantics are encouraged to use other
 *  mechanisms such as the BigQuery Write API.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/** Data for a single row. */
@property(nonatomic, strong, nullable) GTLRBigquery_JsonObject *json;

@end


/**
 *  Describes the format of a streaming insert response.
 */
@interface GTLRBigquery_TableDataInsertAllResponse : GTLRObject

/** Describes specific errors encountered while processing the request. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item *> *insertErrors;

/** Returns "bigquery#tableDataInsertAllResponse". */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Error details about a single row's insertion.
 */
@interface GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item : GTLRObject

/** Error information for the row indicated by the index property. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  The index of the row that error applies to.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

@end


/**
 *  GTLRBigquery_TableDataList
 */
@interface GTLRBigquery_TableDataList : GTLRObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token used for paging results. Providing this token instead of the
 *  startIndex parameter can help you retrieve stable results when an underlying
 *  table is changing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Rows of results. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  Total rows of the entire table. In order to show default value 0 we have to
 *  present it as string.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  A field in TableSchema
 */
@interface GTLRBigquery_TableFieldSchema : GTLRObject

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableFieldSchema_Categories *categories;

/**
 *  Optional. Field collation can be set only when the type of field is STRING.
 *  The following values are supported: * 'und:ci': undetermined locale, case
 *  insensitive. * '': empty string. Default to case-sensitive behavior.
 */
@property(nonatomic, copy, nullable) NSString *collation;

/** Optional. Data policy options, will replace the data_policies. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_DataPolicyOption *> *dataPolicies;

/**
 *  Optional. A SQL expression to specify the [default value]
 *  (https://cloud.google.com/bigquery/docs/default-values) for this field.
 */
@property(nonatomic, copy, nullable) NSString *defaultValueExpression;

/**
 *  Optional. The field description. The maximum length is 1,024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Describes the nested schema fields if the type property is set to
 *  RECORD.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

/**
 *  Optional. Definition of the foreign data type. Only valid for top-level
 *  schema fields (not nested fields). If the type is FOREIGN, this field is
 *  required.
 */
@property(nonatomic, copy, nullable) NSString *foreignTypeDefinition;

/**
 *  Optional. Maximum length of values of this field for STRINGS or BYTES. If
 *  max_length is not specified, no maximum length constraint is imposed on this
 *  field. If type = "STRING", then max_length represents the maximum UTF-8
 *  length of strings in this field. If type = "BYTES", then max_length
 *  represents the maximum number of bytes in this field. It is invalid to set
 *  this field if type ≠ "STRING" and ≠ "BYTES".
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLength;

/**
 *  Optional. The field mode. Possible values include NULLABLE, REQUIRED and
 *  REPEATED. The default value is NULLABLE.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Required. The field name. The name must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_), and must start with a letter or
 *  underscore. The maximum length is 300 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The policy tags attached to this field, used for field-level
 *  access control. If not set, defaults to empty policy_tags.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableFieldSchema_PolicyTags *policyTags;

/**
 *  Optional. Precision (maximum number of total digits in base 10) and scale
 *  (maximum number of digits in the fractional part in base 10) constraints for
 *  values of this field for NUMERIC or BIGNUMERIC. It is invalid to set
 *  precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and
 *  scale are not specified, no value range constraint is imposed on this field
 *  insofar as values are permitted by the type. Values of this NUMERIC or
 *  BIGNUMERIC field must be in this range when: * Precision (P) and scale (S)
 *  are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified
 *  but not scale (and thus scale is interpreted to be equal to zero): [-10P +
 *  1, 10P - 1]. Acceptable values for precision and scale if both are
 *  specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤
 *  9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38.
 *  Acceptable values for precision if only precision is specified but not scale
 *  (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC":
 *  1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale
 *  is specified but not precision, then it is invalid.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/** Represents the type of a field element. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableFieldSchema_RangeElementType *rangeElementType;

/**
 *  Optional. Specifies the rounding mode to be used when storing values of
 *  NUMERIC and BIGNUMERIC type.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TableFieldSchema_RoundingMode_RoundHalfAwayFromZero
 *        ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9
 *        => 2 (Value: "ROUND_HALF_AWAY_FROM_ZERO")
 *    @arg @c kGTLRBigquery_TableFieldSchema_RoundingMode_RoundHalfEven
 *        ROUND_HALF_EVEN rounds half values to the nearest even value when
 *        applying precision and scale upon writing of NUMERIC and BIGNUMERIC
 *        values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8,
 *        1.9 => 2 2.5 => 2 (Value: "ROUND_HALF_EVEN")
 *    @arg @c kGTLRBigquery_TableFieldSchema_RoundingMode_RoundingModeUnspecified
 *        Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO. (Value:
 *        "ROUNDING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *roundingMode;

/**
 *  Optional. See documentation for precision.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

/**
 *  Required. The field data type. Possible values include: * STRING * BYTES *
 *  INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP *
 *  DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD
 *  (or STRUCT) * RANGE Use of RECORD/STRUCT indicates that the field contains a
 *  nested schema.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Deprecated.
 */
@interface GTLRBigquery_TableFieldSchema_Categories : GTLRObject

/** Deprecated. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  Optional. The policy tags attached to this field, used for field-level
 *  access control. If not set, defaults to empty policy_tags.
 */
@interface GTLRBigquery_TableFieldSchema_PolicyTags : GTLRObject

/**
 *  A list of policy tag resource names. For example,
 *  "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is
 *  currently allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  Represents the type of a field element.
 */
@interface GTLRBigquery_TableFieldSchema_RangeElementType : GTLRObject

/**
 *  Required. The type of a field element. For more information, see
 *  TableFieldSchema.type.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Partial projection of the metadata for a given table in a list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tables" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_TableList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of list. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Tables in the requested dataset.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableList_Tables_Item *> *tables;

/**
 *  The total number of tables in the dataset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  GTLRBigquery_TableList_Tables_Item
 */
@interface GTLRBigquery_TableList_Tables_Item : GTLRObject

/** Clustering specification for this table, if configured. */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  Output only. The time when this table was created, in milliseconds since the
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  The time when this table expires, in milliseconds since the epoch. If not
 *  present, the table will persist indefinitely. Expired tables will be deleted
 *  and their storage reclaimed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/** The user-friendly name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of the table.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_Labels *labels;

/** The range partitioning for this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Optional. If set to true, queries including this table must specify a
 *  partition filter. This filter is used for partition elimination.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/** A reference uniquely identifying table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/** The time-based partitioning for this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/** The type of table. */
@property(nonatomic, copy, nullable) NSString *type;

/** Information about a logical view. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_View *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_TableList_Tables_Item_Labels : GTLRObject
@end


/**
 *  Information about a logical view.
 */
@interface GTLRBigquery_TableList_Tables_Item_View : GTLRObject

/** Specifices the privacy policy for the view. */
@property(nonatomic, strong, nullable) GTLRBigquery_PrivacyPolicy *privacyPolicy;

/**
 *  True if view is defined in legacy SQL dialect, false if in GoogleSQL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

@end


/**
 *  Table level detail on the usage of metadata caching. Only set for Metadata
 *  caching eligible tables referenced in the query.
 */
@interface GTLRBigquery_TableMetadataCacheUsage : GTLRObject

/**
 *  Free form human-readable reason metadata caching was unused for the job.
 */
@property(nonatomic, copy, nullable) NSString *explanation;

/**
 *  Duration since last refresh as of this job for managed tables (indicates
 *  metadata cache staleness as seen by this job).
 */
@property(nonatomic, strong, nullable) GTLRDuration *staleness;

/** Metadata caching eligible table referenced in the query. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  [Table
 *  type](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
 */
@property(nonatomic, copy, nullable) NSString *tableType;

/**
 *  Reason for not using metadata caching for the table.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_ExceededMaxStaleness
 *        Metadata cache was outside the table's maxStaleness. (Value:
 *        "EXCEEDED_MAX_STALENESS")
 *    @arg @c kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_MetadataCachingNotEnabled
 *        Metadata caching feature is not enabled. [Update BigLake tables]
 *        (/bigquery/docs/create-cloud-storage-table-biglake#update-biglake-tables)
 *        to enable the metadata caching. (Value:
 *        "METADATA_CACHING_NOT_ENABLED")
 *    @arg @c kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_OtherReason
 *        Other unknown reason. (Value: "OTHER_REASON")
 *    @arg @c kGTLRBigquery_TableMetadataCacheUsage_UnusedReason_UnusedReasonUnspecified
 *        Unused reasons not specified. (Value: "UNUSED_REASON_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *unusedReason;

@end


/**
 *  GTLRBigquery_TableReference
 */
@interface GTLRBigquery_TableReference : GTLRObject

/** Required. The ID of the dataset containing this table. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** Required. The ID of the project containing this table. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Required. The ID of the table. The ID can contain Unicode characters in
 *  category L (letter), M (mark), N (number), Pc (connector, including
 *  underscore), Pd (dash), and Zs (space). For more information, see [General
 *  Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category).
 *  The maximum length is 1,024 characters. Certain operations allow suffixing
 *  of the table ID with a partition decorator, such as `sample_table$20190123`.
 */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  Replication info of a table created using `AS REPLICA` DDL like: `CREATE
 *  MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
 */
@interface GTLRBigquery_TableReplicationInfo : GTLRObject

/**
 *  Optional. Output only. If source is a materialized view, this field
 *  signifies the last refresh time of the source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicatedSourceLastRefreshTime;

/**
 *  Optional. Output only. Replication error that will permanently stopped table
 *  replication.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *replicationError;

/**
 *  Optional. Specifies the interval at which the source table is polled for
 *  updates. It's Optional. If not specified, default replication interval would
 *  be applied.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicationIntervalMs;

/**
 *  Optional. Output only. Replication status of configured replication.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TableReplicationInfo_ReplicationStatus_Active
 *        Replication is Active with no errors. (Value: "ACTIVE")
 *    @arg @c kGTLRBigquery_TableReplicationInfo_ReplicationStatus_PermissionDenied
 *        Source revoked replication permissions. (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRBigquery_TableReplicationInfo_ReplicationStatus_ReplicationStatusUnspecified
 *        Default value. (Value: "REPLICATION_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TableReplicationInfo_ReplicationStatus_SourceDeleted
 *        Source object is deleted. (Value: "SOURCE_DELETED")
 *    @arg @c kGTLRBigquery_TableReplicationInfo_ReplicationStatus_UnsupportedConfiguration
 *        Source configuration doesn’t allow replication. (Value:
 *        "UNSUPPORTED_CONFIGURATION")
 */
@property(nonatomic, copy, nullable) NSString *replicationStatus;

/** Required. Source table reference that is replicated. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

@end


/**
 *  GTLRBigquery_TableRow
 */
@interface GTLRBigquery_TableRow : GTLRObject

/**
 *  Represents a single row in the result set, consisting of one or more fields.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableCell *> *f;

@end


/**
 *  Schema of a table
 */
@interface GTLRBigquery_TableSchema : GTLRObject

/** Describes the fields in a table. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

/**
 *  Optional. Specifies metadata of the foreign data type definition in field
 *  schema (TableFieldSchema.foreign_type_definition).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ForeignTypeInfo *foreignTypeInfo;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRBigquery_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRBigquery_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  GTLRBigquery_TimePartitioning
 */
@interface GTLRBigquery_TimePartitioning : GTLRObject

/**
 *  Optional. Number of milliseconds for which to keep the storage for a
 *  partition. A wrapper is used here because 0 is an invalid value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationMs;

/**
 *  Optional. If not set, the table is partitioned by pseudo column
 *  '_PARTITIONTIME'; if set, the table is partitioned by this field. The field
 *  must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or
 *  REQUIRED. A wrapper is used here because an empty string is an invalid
 *  value.
 */
@property(nonatomic, copy, nullable) NSString *field;

/**
 *  If set to true, queries over this table require a partition filter that can
 *  be used for partition elimination to be specified. This field is deprecated;
 *  please set the field with the same name on the table itself instead. This
 *  field needs a wrapper because we want to output the default value, false, if
 *  the user explicitly set it.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter GTLR_DEPRECATED;

/**
 *  Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will
 *  generate one partition per day, hour, month, and year, respectively.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Options used in model training.
 */
@interface GTLRBigquery_TrainingOptions : GTLRObject

/** Activation function of the neural nets. */
@property(nonatomic, copy, nullable) NSString *activationFn;

/**
 *  If true, detect step changes and make data adjustment in the input time
 *  series.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *adjustStepChanges;

/**
 *  Whether to use approximate feature contribution method in XGBoost model
 *  explanation for global explain.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approxGlobalFeatureContrib;

/**
 *  Whether to enable auto ARIMA or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoArima;

/**
 *  The max value of the sum of non-seasonal p and q.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoArimaMaxOrder;

/**
 *  The min value of the sum of non-seasonal p and q.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoArimaMinOrder;

/**
 *  Whether to calculate class weights automatically based on the popularity of
 *  each label.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoClassWeights;

/**
 *  Batch size for dnn models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *batchSize;

/**
 *  Booster type for boosted tree models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_BoosterTypeUnspecified
 *        Unspecified booster type. (Value: "BOOSTER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_Dart Dart booster.
 *        (Value: "DART")
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_Gbtree Gbtree booster.
 *        (Value: "GBTREE")
 */
@property(nonatomic, copy, nullable) NSString *boosterType;

/**
 *  Budget in hours for AutoML training.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *budgetHours;

/**
 *  Whether or not p-value test should be computed for this model. Only
 *  available for linear and logistic regression models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *calculatePValues;

/**
 *  Categorical feature encoding method.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_DummyEncoding
 *        Applies dummy encoding. (Value: "DUMMY_ENCODING")
 *    @arg @c kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_EncodingMethodUnspecified
 *        Unspecified encoding method. (Value: "ENCODING_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_LabelEncoding
 *        Applies label encoding. (Value: "LABEL_ENCODING")
 *    @arg @c kGTLRBigquery_TrainingOptions_CategoryEncodingMethod_OneHotEncoding
 *        Applies one-hot encoding. (Value: "ONE_HOT_ENCODING")
 */
@property(nonatomic, copy, nullable) NSString *categoryEncodingMethod;

/**
 *  If true, clean spikes and dips in the input time series.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cleanSpikesAndDips;

/**
 *  Enums for color space, used for processing images in Object Table. See more
 *  details at https://www.tensorflow.org/io/tutorials/colorspace.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_ColorSpaceUnspecified
 *        Unspecified color space (Value: "COLOR_SPACE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Grayscale GRAYSCALE
 *        (Value: "GRAYSCALE")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Hsv HSV (Value: "HSV")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Rgb RGB (Value: "RGB")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Yiq YIQ (Value: "YIQ")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Yuv YUV (Value: "YUV")
 */
@property(nonatomic, copy, nullable) NSString *colorSpace;

/**
 *  Subsample ratio of columns for each level for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBylevel;

/**
 *  Subsample ratio of columns for each node(split) for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBynode;

/**
 *  Subsample ratio of columns when constructing each tree for boosted tree
 *  models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBytree;

/**
 *  Type of normalization algorithm for boosted tree models using dart booster.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_DartNormalizeTypeUnspecified
 *        Unspecified dart normalize type. (Value:
 *        "DART_NORMALIZE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_Forest New trees
 *        have the same weight of sum of dropped trees. (Value: "FOREST")
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_Tree New trees
 *        have the same weight of each of dropped trees. (Value: "TREE")
 */
@property(nonatomic, copy, nullable) NSString *dartNormalizeType;

/**
 *  The data frequency of a time series.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_AutoFrequency
 *        Automatically inferred from timestamps. (Value: "AUTO_FREQUENCY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Daily Daily data.
 *        (Value: "DAILY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_DataFrequencyUnspecified
 *        Default value. (Value: "DATA_FREQUENCY_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Hourly Hourly data.
 *        (Value: "HOURLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Monthly Monthly data.
 *        (Value: "MONTHLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_PerMinute Per-minute
 *        data. (Value: "PER_MINUTE")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Quarterly Quarterly
 *        data. (Value: "QUARTERLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Weekly Weekly data.
 *        (Value: "WEEKLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Yearly Yearly data.
 *        (Value: "YEARLY")
 */
@property(nonatomic, copy, nullable) NSString *dataFrequency;

/**
 *  The column to split data with. This column won't be used as a feature. 1.
 *  When data_split_method is CUSTOM, the corresponding column should be
 *  boolean. The rows with true value tag are eval data, and the false are
 *  training data. 2. When data_split_method is SEQ, the first
 *  DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the
 *  corresponding column are used as training data, and the rest are eval data.
 *  It respects the order in Orderable data types:
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
 */
@property(nonatomic, copy, nullable) NSString *dataSplitColumn;

/**
 *  The fraction of evaluation data over the whole input data. The rest of data
 *  will be used as training data. The format should be double. Accurate to two
 *  decimal places. Default value is 0.2.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataSplitEvalFraction;

/**
 *  The data split type for training and evaluation, e.g. RANDOM.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_AutoSplit Splits
 *        data automatically: Uses NO_SPLIT if the data size is small. Otherwise
 *        uses RANDOM. (Value: "AUTO_SPLIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Custom Splits data
 *        with the user provided tags. (Value: "CUSTOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_DataSplitMethodUnspecified
 *        Default value. (Value: "DATA_SPLIT_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_NoSplit Data split
 *        will be skipped. (Value: "NO_SPLIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Random Splits data
 *        randomly. (Value: "RANDOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Sequential Splits
 *        data sequentially. (Value: "SEQUENTIAL")
 */
@property(nonatomic, copy, nullable) NSString *dataSplitMethod;

/**
 *  If true, perform decompose time series and save the results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *decomposeTimeSeries;

/**
 *  Distance type for clustering models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_Cosine Cosine distance.
 *        (Value: "COSINE")
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_DistanceTypeUnspecified
 *        Default value. (Value: "DISTANCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_Euclidean Eculidean
 *        distance. (Value: "EUCLIDEAN")
 */
@property(nonatomic, copy, nullable) NSString *distanceType;

/**
 *  Dropout probability for dnn models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dropout;

/**
 *  Whether to stop early when the loss doesn't improve significantly any more
 *  (compared to min_relative_progress). Used only for iterative training
 *  algorithms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *earlyStop;

/**
 *  If true, enable global explanation during training.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableGlobalExplain;

/**
 *  Feedback type that specifies which algorithm to run for matrix
 *  factorization.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_Explicit Use
 *        nonweighted-als for explicit feedback problems. (Value: "EXPLICIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_FeedbackTypeUnspecified
 *        Default value. (Value: "FEEDBACK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_Implicit Use
 *        weighted-als for implicit feedback problems. (Value: "IMPLICIT")
 */
@property(nonatomic, copy, nullable) NSString *feedbackType;

/**
 *  Whether the model should include intercept during model training.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fitIntercept;

/**
 *  Hidden units for dnn models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *hiddenUnits;

/**
 *  The geographical region based on which the holidays are considered in time
 *  series modeling. If a valid value is specified, then holiday effects
 *  modeling is enabled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ae United Arab
 *        Emirates (Value: "AE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ar Argentina (Value:
 *        "AR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_At Austria (Value:
 *        "AT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Au Australia (Value:
 *        "AU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Be Belgium (Value:
 *        "BE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Br Brazil (Value:
 *        "BR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ca Canada (Value:
 *        "CA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ch Switzerland (Value:
 *        "CH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cl Chile (Value: "CL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cn China (Value: "CN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Co Colombia (Value:
 *        "CO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cs Czechoslovakia
 *        (Value: "CS")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cz Czech Republic
 *        (Value: "CZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_De Germany (Value:
 *        "DE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Dk Denmark (Value:
 *        "DK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Dz Algeria (Value:
 *        "DZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ec Ecuador (Value:
 *        "EC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ee Estonia (Value:
 *        "EE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Eg Egypt (Value: "EG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Emea Europe, the
 *        Middle East and Africa. (Value: "EMEA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Es Spain (Value: "ES")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Fi Finland (Value:
 *        "FI")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Fr France (Value:
 *        "FR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Gb Great Britain
 *        (United Kingdom) (Value: "GB")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Global Global. (Value:
 *        "GLOBAL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Gr Greece (Value:
 *        "GR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Hk Hong Kong (Value:
 *        "HK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_HolidayRegionUnspecified
 *        Holiday region unspecified. (Value: "HOLIDAY_REGION_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Hu Hungary (Value:
 *        "HU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Id Indonesia (Value:
 *        "ID")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ie Ireland (Value:
 *        "IE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Il Israel (Value:
 *        "IL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_In India (Value: "IN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ir Iran (Value: "IR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_It Italy (Value: "IT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Japac Japan and Asia
 *        Pacific: Korea, Greater China, India, Australia, and New Zealand.
 *        (Value: "JAPAC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Jp Japan (Value: "JP")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Kr Korea (South)
 *        (Value: "KR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Lac Latin America and
 *        the Caribbean. (Value: "LAC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Lv Latvia (Value:
 *        "LV")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ma Morocco (Value:
 *        "MA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Mx Mexico (Value:
 *        "MX")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_My Malaysia (Value:
 *        "MY")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Na North America.
 *        (Value: "NA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ng Nigeria (Value:
 *        "NG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Nl Netherlands (Value:
 *        "NL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_No Norway (Value:
 *        "NO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Nz New Zealand (Value:
 *        "NZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pe Peru (Value: "PE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ph Philippines (Value:
 *        "PH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pk Pakistan (Value:
 *        "PK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pl Poland (Value:
 *        "PL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pt Portugal (Value:
 *        "PT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ro Romania (Value:
 *        "RO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Rs Serbia (Value:
 *        "RS")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ru Russian Federation
 *        (Value: "RU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sa Saudi Arabia
 *        (Value: "SA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Se Sweden (Value:
 *        "SE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sg Singapore (Value:
 *        "SG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Si Slovenia (Value:
 *        "SI")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sk Slovakia (Value:
 *        "SK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Th Thailand (Value:
 *        "TH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Tr Turkey (Value:
 *        "TR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Tw Taiwan (Value:
 *        "TW")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ua Ukraine (Value:
 *        "UA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Us United States
 *        (Value: "US")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ve Venezuela (Value:
 *        "VE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Vn Viet Nam (Value:
 *        "VN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Za South Africa
 *        (Value: "ZA")
 */
@property(nonatomic, copy, nullable) NSString *holidayRegion;

/** A list of geographical regions that are used for time series modeling. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *holidayRegions;

/**
 *  The number of periods ahead that need to be forecasted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *horizon;

/** The target evaluation metrics to optimize the hyperparameters for. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *hparamTuningObjectives;

/**
 *  Include drift when fitting an ARIMA model.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeDrift;

/**
 *  Specifies the initial learning rate for the line search learn rate strategy.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialLearnRate;

/** Name of input label columns in training data. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inputLabelColumns;

/**
 *  Name of the instance weight column for training data. This column isn't be
 *  used as a feature.
 */
@property(nonatomic, copy, nullable) NSString *instanceWeightColumn;

/**
 *  Number of integral steps for the integrated gradients explain method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integratedGradientsNumSteps;

/** Item column specified for matrix factorization models. */
@property(nonatomic, copy, nullable) NSString *itemColumn;

/**
 *  The column used to provide the initial centroids for kmeans algorithm when
 *  kmeans_initialization_method is CUSTOM.
 */
@property(nonatomic, copy, nullable) NSString *kmeansInitializationColumn;

/**
 *  The method used to initialize the centroids for kmeans algorithm.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Custom
 *        Initializes the centroids using data specified in
 *        kmeans_initialization_column. (Value: "CUSTOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansInitializationMethodUnspecified
 *        Unspecified initialization method. (Value:
 *        "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansPlusPlus
 *        Initializes with kmeans++. (Value: "KMEANS_PLUS_PLUS")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Random
 *        Initializes the centroids randomly. (Value: "RANDOM")
 */
@property(nonatomic, copy, nullable) NSString *kmeansInitializationMethod;

/**
 *  L1 regularization coefficient to activations.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1RegActivation;

/**
 *  L1 regularization coefficient.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1Regularization;

/**
 *  L2 regularization coefficient.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l2Regularization;

/**
 *  Weights associated with each label class, for rebalancing the training data.
 *  Only applicable for classification models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions_LabelClassWeights *labelClassWeights;

/**
 *  Learning rate in training. Used only for iterative training algorithms.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  The strategy to determine learn rate for the current iteration.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_Constant Use a
 *        constant learning rate. (Value: "CONSTANT")
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_LearnRateStrategyUnspecified
 *        Default value. (Value: "LEARN_RATE_STRATEGY_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_LineSearch Use
 *        line search to determine learning rate. (Value: "LINE_SEARCH")
 */
@property(nonatomic, copy, nullable) NSString *learnRateStrategy;

/**
 *  Type of loss function used during training run.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_LossTypeUnspecified Default
 *        value. (Value: "LOSS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_MeanLogLoss Mean log loss,
 *        used for logistic regression. (Value: "MEAN_LOG_LOSS")
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_MeanSquaredLoss Mean
 *        squared loss, used for linear regression. (Value: "MEAN_SQUARED_LOSS")
 */
@property(nonatomic, copy, nullable) NSString *lossType;

/**
 *  The maximum number of iterations in training. Used only for iterative
 *  training algorithms.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIterations;

/**
 *  Maximum number of trials to run in parallel.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxParallelTrials;

/**
 *  The maximum number of time points in a time series that can be used in
 *  modeling the trend component of the time series. Don't use this option with
 *  the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTimeSeriesLength;

/**
 *  Maximum depth of a tree for boosted tree models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTreeDepth;

/**
 *  When early_stop is true, stops training when accuracy improvement is less
 *  than 'min_relative_progress'. Used only for iterative training algorithms.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRelativeProgress;

/**
 *  Minimum split loss for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minSplitLoss;

/**
 *  The minimum number of time points in a time series that are used in modeling
 *  the trend component of the time series. If you use this option you must also
 *  set the `timeSeriesLengthFraction` option. This training option ensures that
 *  enough time points are available when you use `timeSeriesLengthFraction` in
 *  trend modeling. This is particularly important when forecasting multiple
 *  time series in a single query using `timeSeriesIdColumn`. If the total
 *  number of time points is less than the `minTimeSeriesLength` value, then the
 *  query uses all available time points.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minTimeSeriesLength;

/**
 *  Minimum sum of instance weight needed in a child for boosted tree models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minTreeChildWeight;

/**
 *  The model registry.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_ModelRegistry_ModelRegistryUnspecified
 *        Default value. (Value: "MODEL_REGISTRY_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_ModelRegistry_VertexAi Vertex AI.
 *        (Value: "VERTEX_AI")
 */
@property(nonatomic, copy, nullable) NSString *modelRegistry;

/**
 *  Google Cloud Storage URI from which the model was imported. Only applicable
 *  for imported models.
 */
@property(nonatomic, copy, nullable) NSString *modelUri;

/**
 *  A specification of the non-seasonal part of the ARIMA model: the three
 *  components (p, d, q) are the AR order, the degree of differencing, and the
 *  MA order.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Number of clusters for clustering models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numClusters;

/**
 *  Num factors specified for matrix factorization models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numFactors;

/**
 *  Number of parallel trees constructed during each iteration for boosted tree
 *  models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numParallelTree;

/**
 *  Number of principal components to keep in the PCA model. Must be <= the
 *  number of features.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPrincipalComponents;

/**
 *  Number of trials to run this hyperparameter tuning job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTrials;

/**
 *  Optimization strategy for training linear regression models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_BatchGradientDescent
 *        Uses an iterative batch gradient descent algorithm. (Value:
 *        "BATCH_GRADIENT_DESCENT")
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_NormalEquation
 *        Uses a normal equation to solve linear regression problem. (Value:
 *        "NORMAL_EQUATION")
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_OptimizationStrategyUnspecified
 *        Default value. (Value: "OPTIMIZATION_STRATEGY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *optimizationStrategy;

/** Optimizer used for training the neural nets. */
@property(nonatomic, copy, nullable) NSString *optimizer;

/**
 *  The minimum ratio of cumulative explained variance that needs to be given by
 *  the PCA model.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pcaExplainedVarianceRatio;

/**
 *  The solver for PCA.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_PcaSolver_Auto Auto. (Value: "AUTO")
 *    @arg @c kGTLRBigquery_TrainingOptions_PcaSolver_Full Full
 *        eigen-decoposition. (Value: "FULL")
 *    @arg @c kGTLRBigquery_TrainingOptions_PcaSolver_Randomized Randomized SVD.
 *        (Value: "RANDOMIZED")
 *    @arg @c kGTLRBigquery_TrainingOptions_PcaSolver_Unspecified Default value.
 *        (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *pcaSolver;

/**
 *  Number of paths for the sampled Shapley explain method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sampledShapleyNumPaths;

/**
 *  If true, scale the feature values by dividing the feature standard
 *  deviation. Currently only apply to PCA.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scaleFeatures;

/**
 *  Whether to standardize numerical features. Default to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *standardizeFeatures;

/**
 *  Subsample fraction of the training data to grow tree to prevent overfitting
 *  for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *subsample;

/**
 *  Based on the selected TF version, the corresponding docker image is used to
 *  train external models.
 */
@property(nonatomic, copy, nullable) NSString *tfVersion;

/** Column to be designated as time series data for ARIMA model. */
@property(nonatomic, copy, nullable) NSString *timeSeriesDataColumn;

/** The time series id column that was used during ARIMA model training. */
@property(nonatomic, copy, nullable) NSString *timeSeriesIdColumn;

/** The time series id columns that were used during ARIMA model training. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIdColumns;

/**
 *  The fraction of the interpolated length of the time series that's used to
 *  model the time series trend component. All of the time points of the time
 *  series are used to model the non-trend component. This training option
 *  accelerates modeling training without sacrificing much forecasting accuracy.
 *  You can use this option with `minTimeSeriesLength` but not with
 *  `maxTimeSeriesLength`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeSeriesLengthFraction;

/** Column to be designated as time series timestamp for ARIMA model. */
@property(nonatomic, copy, nullable) NSString *timeSeriesTimestampColumn;

/**
 *  Tree construction algorithm for boosted tree models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Approx Approximate greedy
 *        algorithm using quantile sketch and gradient histogram. (Value:
 *        "APPROX")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Auto Use heuristic to
 *        choose the fastest method. (Value: "AUTO")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Exact Exact greedy
 *        algorithm. (Value: "EXACT")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Hist Fast histogram
 *        optimized approximate greedy algorithm. (Value: "HIST")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_TreeMethodUnspecified
 *        Unspecified tree method. (Value: "TREE_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *treeMethod;

/**
 *  Smoothing window size for the trend component. When a positive value is
 *  specified, a center moving average smoothing is applied on the history
 *  trend. When the smoothing window is out of the boundary at the beginning or
 *  the end of the trend, the first element or the last element is padded to
 *  fill the smoothing window before the average is applied.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trendSmoothingWindowSize;

/** User column specified for matrix factorization models. */
@property(nonatomic, copy, nullable) NSString *userColumn;

/**
 *  The version aliases to apply in Vertex AI model registry. Always overwrite
 *  if the version aliases exists in a existing model.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *vertexAiModelVersionAliases;

/**
 *  Hyperparameter for matrix factoration when implicit feedback type is
 *  specified.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *walsAlpha;

/**
 *  Whether to train a model from the last checkpoint.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warmStart;

/** User-selected XGBoost versions for training of XGBoost models. */
@property(nonatomic, copy, nullable) NSString *xgboostVersion;

@end


/**
 *  Weights associated with each label class, for rebalancing the training data.
 *  Only applicable for classification models.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of doubleValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_TrainingOptions_LabelClassWeights : GTLRObject
@end


/**
 *  Information about a single training query run for the model.
 */
@interface GTLRBigquery_TrainingRun : GTLRObject

/**
 *  Output only. Global explanation contains the explanation of top features on
 *  the class level. Applies to classification models only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_GlobalExplanation *> *classLevelGlobalExplanations;

/**
 *  Output only. Data split result of the training run. Only set when the input
 *  data is actually split.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DataSplitResult *dataSplitResult;

/**
 *  Output only. The evaluation metrics over training/eval data that were
 *  computed at the end of training.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *evaluationMetrics;

/**
 *  Output only. Global explanation contains the explanation of top features on
 *  the model level. Applies to both regression and classification models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_GlobalExplanation *modelLevelGlobalExplanation;

/**
 *  Output only. Output of each iteration run, results.size() <= max_iterations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IterationResult *> *results;

/** Output only. The start time of this training run. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Options that were used for this training run, includes user
 *  specified and default options that were used.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions *trainingOptions;

/**
 *  Output only. The start time of this training run, in milliseconds since
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingStartTime GTLR_DEPRECATED;

/**
 *  The model id in the [Vertex AI Model
 *  Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction)
 *  for this training run.
 */
@property(nonatomic, copy, nullable) NSString *vertexAiModelId;

/**
 *  Output only. The model version in the [Vertex AI Model
 *  Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction)
 *  for this training run.
 */
@property(nonatomic, copy, nullable) NSString *vertexAiModelVersion;

@end


/**
 *  [Alpha] Information of a multi-statement transaction.
 */
@interface GTLRBigquery_TransactionInfo : GTLRObject

/** Output only. [Alpha] Id of the transaction. */
@property(nonatomic, copy, nullable) NSString *transactionId;

@end


/**
 *  Information about a single transform column.
 */
@interface GTLRBigquery_TransformColumn : GTLRObject

/** Output only. Name of the column. */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The SQL expression used in the column transform. */
@property(nonatomic, copy, nullable) NSString *transformSql;

/** Output only. Data type of the column after the transform. */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *type;

@end


/**
 *  Request format for undeleting a dataset.
 */
@interface GTLRBigquery_UndeleteDatasetRequest : GTLRObject

/**
 *  Optional. The exact time when the dataset was deleted. If not specified, the
 *  most recently deleted version is undeleted. Undeleting a dataset using
 *  deletion time is not supported.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deletionTime;

@end


/**
 *  This is used for defining User Defined Function (UDF) resources only when
 *  using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE
 *  [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For
 *  additional information on migrating, see:
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
 */
@interface GTLRBigquery_UserDefinedFunctionResource : GTLRObject

/**
 *  [Pick one] An inline resource that contains code for a user-defined function
 *  (UDF). Providing a inline code resource is equivalent to providing a URI for
 *  a file containing the same code.
 */
@property(nonatomic, copy, nullable) NSString *inlineCode;

/**
 *  [Pick one] A code resource to load from a Google Cloud Storage URI
 *  (gs://bucket/path).
 */
@property(nonatomic, copy, nullable) NSString *resourceUri;

@end


/**
 *  Statistics for a vector search query. Populated as part of JobStatistics2.
 */
@interface GTLRBigquery_VectorSearchStatistics : GTLRObject

/**
 *  When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
 *  why indexes were not used in all or part of the vector search query. If
 *  `indexUsageMode` is `FULLY_USED`, this field is not populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IndexUnusedReason *> *indexUnusedReasons;

/**
 *  Specifies the index usage mode for the query.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_FullyUsed The
 *        entire vector search query used vector indexes. (Value: "FULLY_USED")
 *    @arg @c kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_IndexUsageModeUnspecified
 *        Index usage mode not specified. (Value:
 *        "INDEX_USAGE_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_PartiallyUsed
 *        Part of the vector search query used vector indexes. See
 *        [`indexUnusedReasons`]
 *        (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for why other
 *        parts of the query did not use vector indexes. (Value:
 *        "PARTIALLY_USED")
 *    @arg @c kGTLRBigquery_VectorSearchStatistics_IndexUsageMode_Unused No
 *        vector indexes were used in the vector search query. See
 *        [`indexUnusedReasons`]
 *        (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason) for detailed
 *        reasons. (Value: "UNUSED")
 */
@property(nonatomic, copy, nullable) NSString *indexUsageMode;

@end


/**
 *  Describes the definition of a logical view.
 */
@interface GTLRBigquery_ViewDefinition : GTLRObject

/** Optional. Foreign view representations. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ForeignViewDefinition *> *foreignDefinitions;

/** Optional. Specifices the privacy policy for the view. */
@property(nonatomic, strong, nullable) GTLRBigquery_PrivacyPolicy *privacyPolicy;

/** Required. A query that BigQuery executes when the view is referenced. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  True if the column names are explicitly specified. For example by using the
 *  'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useExplicitColumnNames;

/**
 *  Specifies whether to use BigQuery's legacy SQL for this view. The default
 *  value is true. If set to false, the view will use BigQuery's GoogleSQL:
 *  https://cloud.google.com/bigquery/sql-reference/ Queries and views that
 *  reference this view must use the same flag value. A wrapper is used here
 *  because the default value is True.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
