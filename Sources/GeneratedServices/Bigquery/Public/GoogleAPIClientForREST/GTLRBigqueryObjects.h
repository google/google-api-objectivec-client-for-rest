// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Documentation:
//   https://cloud.google.com/bigquery/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigquery_AggregateClassificationMetrics;
@class GTLRBigquery_Argument;
@class GTLRBigquery_ArimaCoefficients;
@class GTLRBigquery_ArimaFittingMetrics;
@class GTLRBigquery_ArimaForecastingMetrics;
@class GTLRBigquery_ArimaModelInfo;
@class GTLRBigquery_ArimaOrder;
@class GTLRBigquery_ArimaSingleModelForecastingMetrics;
@class GTLRBigquery_AuditConfig;
@class GTLRBigquery_AuditLogConfig;
@class GTLRBigquery_AvroOptions;
@class GTLRBigquery_BiEngineReason;
@class GTLRBigquery_BiEngineStatistics;
@class GTLRBigquery_BigtableColumn;
@class GTLRBigquery_BigtableColumnFamily;
@class GTLRBigquery_BigtableOptions;
@class GTLRBigquery_BinaryClassificationMetrics;
@class GTLRBigquery_BinaryConfusionMatrix;
@class GTLRBigquery_Binding;
@class GTLRBigquery_BqmlIterationResult;
@class GTLRBigquery_BqmlTrainingRun;
@class GTLRBigquery_BqmlTrainingRun_TrainingOptions;
@class GTLRBigquery_CategoricalValue;
@class GTLRBigquery_CategoryCount;
@class GTLRBigquery_CloneDefinition;
@class GTLRBigquery_Cluster;
@class GTLRBigquery_Clustering;
@class GTLRBigquery_ClusteringMetrics;
@class GTLRBigquery_ConfusionMatrix;
@class GTLRBigquery_ConnectionProperty;
@class GTLRBigquery_CsvOptions;
@class GTLRBigquery_DataMaskingStatistics;
@class GTLRBigquery_Dataset_Access_Item;
@class GTLRBigquery_Dataset_Labels;
@class GTLRBigquery_Dataset_Tags_Item;
@class GTLRBigquery_DatasetAccessEntry;
@class GTLRBigquery_DatasetList_Datasets_Item;
@class GTLRBigquery_DatasetList_Datasets_Item_Labels;
@class GTLRBigquery_DatasetReference;
@class GTLRBigquery_DataSplitResult;
@class GTLRBigquery_DestinationTableProperties;
@class GTLRBigquery_DestinationTableProperties_Labels;
@class GTLRBigquery_DimensionalityReductionMetrics;
@class GTLRBigquery_DmlStatistics;
@class GTLRBigquery_DoubleCandidates;
@class GTLRBigquery_DoubleHparamSearchSpace;
@class GTLRBigquery_DoubleRange;
@class GTLRBigquery_EncryptionConfiguration;
@class GTLRBigquery_Entry;
@class GTLRBigquery_ErrorProto;
@class GTLRBigquery_EvaluationMetrics;
@class GTLRBigquery_ExplainQueryStage;
@class GTLRBigquery_ExplainQueryStep;
@class GTLRBigquery_Explanation;
@class GTLRBigquery_Expr;
@class GTLRBigquery_ExternalDataConfiguration;
@class GTLRBigquery_FeatureValue;
@class GTLRBigquery_GetPolicyOptions;
@class GTLRBigquery_GlobalExplanation;
@class GTLRBigquery_GoogleSheetsOptions;
@class GTLRBigquery_HivePartitioningOptions;
@class GTLRBigquery_HparamSearchSpaces;
@class GTLRBigquery_HparamTuningTrial;
@class GTLRBigquery_IndexUnusedReason;
@class GTLRBigquery_IntArray;
@class GTLRBigquery_IntArrayHparamSearchSpace;
@class GTLRBigquery_IntCandidates;
@class GTLRBigquery_IntHparamSearchSpace;
@class GTLRBigquery_IntRange;
@class GTLRBigquery_IterationResult;
@class GTLRBigquery_Job;
@class GTLRBigquery_JobConfiguration;
@class GTLRBigquery_JobConfiguration_Labels;
@class GTLRBigquery_JobConfigurationExtract;
@class GTLRBigquery_JobConfigurationLoad;
@class GTLRBigquery_JobConfigurationQuery;
@class GTLRBigquery_JobConfigurationQuery_TableDefinitions;
@class GTLRBigquery_JobConfigurationTableCopy;
@class GTLRBigquery_JobList_Jobs_Item;
@class GTLRBigquery_JobReference;
@class GTLRBigquery_JobStatistics;
@class GTLRBigquery_JobStatistics2;
@class GTLRBigquery_JobStatistics2_ReservationUsage_Item;
@class GTLRBigquery_JobStatistics3;
@class GTLRBigquery_JobStatistics4;
@class GTLRBigquery_JobStatistics5;
@class GTLRBigquery_JobStatistics_ReservationUsage_Item;
@class GTLRBigquery_JobStatus;
@class GTLRBigquery_JsonObject;
@class GTLRBigquery_MaterializedViewDefinition;
@class GTLRBigquery_MlStatistics;
@class GTLRBigquery_Model;
@class GTLRBigquery_Model_Labels;
@class GTLRBigquery_ModelDefinition;
@class GTLRBigquery_ModelDefinition_ModelOptions;
@class GTLRBigquery_ModelReference;
@class GTLRBigquery_ModelTraining;
@class GTLRBigquery_MultiClassClassificationMetrics;
@class GTLRBigquery_ParquetOptions;
@class GTLRBigquery_Policy;
@class GTLRBigquery_ProjectList_Projects_Item;
@class GTLRBigquery_ProjectReference;
@class GTLRBigquery_QueryParameter;
@class GTLRBigquery_QueryParameterType;
@class GTLRBigquery_QueryParameterType_StructTypes_Item;
@class GTLRBigquery_QueryParameterValue;
@class GTLRBigquery_QueryParameterValue_StructValues;
@class GTLRBigquery_QueryRequest_Labels;
@class GTLRBigquery_QueryTimelineSample;
@class GTLRBigquery_RangePartitioning;
@class GTLRBigquery_RangePartitioning_Range;
@class GTLRBigquery_RankingMetrics;
@class GTLRBigquery_RegressionMetrics;
@class GTLRBigquery_RemoteFunctionOptions;
@class GTLRBigquery_RemoteFunctionOptions_UserDefinedContext;
@class GTLRBigquery_Routine;
@class GTLRBigquery_RoutineReference;
@class GTLRBigquery_Row;
@class GTLRBigquery_RowAccessPolicy;
@class GTLRBigquery_RowAccessPolicyReference;
@class GTLRBigquery_RowLevelSecurityStatistics;
@class GTLRBigquery_ScriptStackFrame;
@class GTLRBigquery_ScriptStatistics;
@class GTLRBigquery_SearchStatistics;
@class GTLRBigquery_SessionInfo;
@class GTLRBigquery_SnapshotDefinition;
@class GTLRBigquery_SparkLoggingInfo;
@class GTLRBigquery_SparkOptions;
@class GTLRBigquery_SparkOptions_Properties;
@class GTLRBigquery_SparkStatistics;
@class GTLRBigquery_SparkStatistics_Endpoints;
@class GTLRBigquery_StandardSqlDataType;
@class GTLRBigquery_StandardSqlField;
@class GTLRBigquery_StandardSqlStructType;
@class GTLRBigquery_StandardSqlTableType;
@class GTLRBigquery_Streamingbuffer;
@class GTLRBigquery_StringHparamSearchSpace;
@class GTLRBigquery_Table_Labels;
@class GTLRBigquery_TableCell;
@class GTLRBigquery_TableDataInsertAllRequest_Rows_Item;
@class GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item;
@class GTLRBigquery_TableFieldSchema;
@class GTLRBigquery_TableFieldSchema_Categories;
@class GTLRBigquery_TableFieldSchema_PolicyTags;
@class GTLRBigquery_TableList_Tables_Item;
@class GTLRBigquery_TableList_Tables_Item_Labels;
@class GTLRBigquery_TableList_Tables_Item_View;
@class GTLRBigquery_TableReference;
@class GTLRBigquery_TableRow;
@class GTLRBigquery_TableSchema;
@class GTLRBigquery_TimePartitioning;
@class GTLRBigquery_TrainingOptions;
@class GTLRBigquery_TrainingOptions_LabelClassWeights;
@class GTLRBigquery_TrainingRun;
@class GTLRBigquery_TransactionInfo;
@class GTLRBigquery_UserDefinedFunctionResource;
@class GTLRBigquery_ViewDefinition;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBigquery_Argument.argumentKind

/**
 *  The argument is any type, including struct or array, but not a table. To be
 *  added: FIXED_TABLE, ANY_TABLE
 *
 *  Value: "ANY_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_AnyType;
/** Value: "ARGUMENT_KIND_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_ArgumentKindUnspecified;
/**
 *  The argument is a variable with fully specified type, which can be a struct
 *  or an array, but not a table.
 *
 *  Value: "FIXED_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_ArgumentKind_FixedType;

// ----------------------------------------------------------------------------
// GTLRBigquery_Argument.mode

/**
 *  The argument is input-only.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_In;
/**
 *  The argument is both an input and an output.
 *
 *  Value: "INOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_Inout;
/** Value: "MODE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_ModeUnspecified;
/**
 *  The argument is output-only.
 *
 *  Value: "OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Argument_Mode_Out;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaForecastingMetrics.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaForecastingMetrics_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaModelInfo.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaResult.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_ArimaSingleModelForecastingMetrics.seasonalPeriods

/**
 *  Daily period, 24 hours.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Daily;
/**
 *  Monthly period, 30 days or irregular.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Monthly;
/**
 *  No seasonality
 *
 *  Value: "NO_SEASONALITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_NoSeasonality;
/**
 *  Quarterly period, 90 days or irregular.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Quarterly;
/**
 *  Unspecified seasonal period.
 *
 *  Value: "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_SeasonalPeriodTypeUnspecified;
/**
 *  Weekly period, 7 days.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Weekly;
/**
 *  Yearly period, 365 days or irregular.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_ArimaSingleModelForecastingMetrics_SeasonalPeriods_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_DatasetAccessEntry.targetTypes

/**
 *  Do not use. You must set a target type explicitly.
 *
 *  Value: "TARGET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_DatasetAccessEntry_TargetTypes_TargetTypeUnspecified;
/**
 *  This entry applies to views in the dataset.
 *
 *  Value: "VIEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_DatasetAccessEntry_TargetTypes_Views;

// ----------------------------------------------------------------------------
// GTLRBigquery_HparamTuningTrial.status

/**
 *  The trial failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Failed;
/**
 *  The trial is infeasible due to the invalid params.
 *
 *  Value: "INFEASIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Infeasible;
/**
 *  Scheduled but not started.
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_NotStarted;
/**
 *  Running state.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Running;
/**
 *  Trial stopped early because it's not promising.
 *
 *  Value: "STOPPED_EARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_StoppedEarly;
/**
 *  The trial succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_Succeeded;
/** Value: "TRIAL_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_HparamTuningTrial_Status_TrialStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_Model.modelType

/**
 *  ARIMA model.
 *
 *  Value: "ARIMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Arima;
/**
 *  New name for the ARIMA model.
 *
 *  Value: "ARIMA_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_ArimaPlus;
/**
 *  Autoencoder model.
 *
 *  Value: "AUTOENCODER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Autoencoder;
/**
 *  AutoML Tables classification model.
 *
 *  Value: "AUTOML_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_AutomlClassifier;
/**
 *  AutoML Tables regression model.
 *
 *  Value: "AUTOML_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_AutomlRegressor;
/**
 *  Boosted tree classifier model.
 *
 *  Value: "BOOSTED_TREE_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeClassifier;
/**
 *  Boosted tree regressor model.
 *
 *  Value: "BOOSTED_TREE_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeRegressor;
/**
 *  DNN classifier model.
 *
 *  Value: "DNN_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnClassifier;
/**
 *  Wide-and-deep classifier model.
 *
 *  Value: "DNN_LINEAR_COMBINED_CLASSIFIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnLinearCombinedClassifier;
/**
 *  Wide-and-deep regressor model.
 *
 *  Value: "DNN_LINEAR_COMBINED_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnLinearCombinedRegressor;
/**
 *  DNN regressor model.
 *
 *  Value: "DNN_REGRESSOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_DnnRegressor;
/**
 *  K-means clustering model.
 *
 *  Value: "KMEANS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Kmeans;
/**
 *  Linear regression model.
 *
 *  Value: "LINEAR_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_LinearRegression;
/**
 *  Logistic regression based classification model.
 *
 *  Value: "LOGISTIC_REGRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_LogisticRegression;
/**
 *  Matrix factorization model.
 *
 *  Value: "MATRIX_FACTORIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_MatrixFactorization;
/** Value: "MODEL_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_ModelTypeUnspecified;
/**
 *  Prinpical Component Analysis model.
 *
 *  Value: "PCA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Pca;
/**
 *  An imported TensorFlow model.
 *
 *  Value: "TENSORFLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Model_ModelType_Tensorflow;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.determinismLevel

/**
 *  The determinism of the UDF is unspecified.
 *
 *  Value: "DETERMINISM_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_DeterminismLevelUnspecified;
/**
 *  The UDF is deterministic, meaning that 2 function calls with the same inputs
 *  always produce the same result, even across 2 query runs.
 *
 *  Value: "DETERMINISTIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_Deterministic;
/**
 *  The UDF is not deterministic.
 *
 *  Value: "NOT_DETERMINISTIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_DeterminismLevel_NotDeterministic;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.language

/**
 *  JavaScript language.
 *
 *  Value: "JAVASCRIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Javascript;
/** Value: "LANGUAGE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_LanguageUnspecified;
/**
 *  Python language.
 *
 *  Value: "PYTHON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Python;
/**
 *  SQL language.
 *
 *  Value: "SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_Language_Sql;

// ----------------------------------------------------------------------------
// GTLRBigquery_Routine.routineType

/**
 *  Stored procedure.
 *
 *  Value: "PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_Procedure;
/** Value: "ROUTINE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_RoutineTypeUnspecified;
/**
 *  Non-builtin permanent scalar function.
 *
 *  Value: "SCALAR_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_ScalarFunction;
/**
 *  Non-builtin permanent TVF.
 *
 *  Value: "TABLE_VALUED_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_Routine_RoutineType_TableValuedFunction;

// ----------------------------------------------------------------------------
// GTLRBigquery_StandardSqlDataType.typeKind

/**
 *  Encoded as a list with types matching Type.array_type.
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Array;
/**
 *  Encoded as a decimal string.
 *
 *  Value: "BIGNUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bignumeric;
/**
 *  Encoded as a boolean "false" or "true".
 *
 *  Value: "BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bool;
/**
 *  Encoded as a base64 string per RFC 4648, section 4.
 *
 *  Value: "BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bytes;
/**
 *  Encoded as RFC 3339 full-date format string: 1985-04-12
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Date;
/**
 *  Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
 *
 *  Value: "DATETIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Datetime;
/**
 *  Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
 *
 *  Value: "FLOAT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Float64;
/**
 *  Encoded as WKT
 *
 *  Value: "GEOGRAPHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Geography;
/**
 *  Encoded as a string in decimal format.
 *
 *  Value: "INT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Int64;
/**
 *  Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
 *
 *  Value: "INTERVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Interval;
/**
 *  Encoded as a string.
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Json;
/**
 *  Encoded as a decimal string.
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Numeric;
/**
 *  Encoded as a string value.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_String;
/**
 *  Encoded as a list with fields of type Type.struct_type[i]. List is used
 *  because a JSON object cannot have duplicate field names.
 *
 *  Value: "STRUCT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Struct;
/**
 *  Encoded as RFC 3339 partial-time format string: 23:20:50.52
 *
 *  Value: "TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Time;
/**
 *  Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
 *  1985-04-12T23:20:50.52Z
 *
 *  Value: "TIMESTAMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Timestamp;
/**
 *  Invalid type.
 *
 *  Value: "TYPE_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_TypeKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.boosterType

/**
 *  Unspecified booster type.
 *
 *  Value: "BOOSTER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_BoosterTypeUnspecified;
/**
 *  Dart booster.
 *
 *  Value: "DART"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_Dart;
/**
 *  Gbtree booster.
 *
 *  Value: "GBTREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_BoosterType_Gbtree;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.colorSpace

/**
 *  Unspecified color space
 *
 *  Value: "COLOR_SPACE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_ColorSpaceUnspecified;
/**
 *  GRAYSCALE
 *
 *  Value: "GRAYSCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Grayscale;
/**
 *  HSV
 *
 *  Value: "HSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Hsv;
/**
 *  RGB
 *
 *  Value: "RGB"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Rgb;
/**
 *  YIQ
 *
 *  Value: "YIQ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Yiq;
/**
 *  YUV
 *
 *  Value: "YUV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_ColorSpace_Yuv;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dartNormalizeType

/**
 *  Unspecified dart normalize type.
 *
 *  Value: "DART_NORMALIZE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_DartNormalizeTypeUnspecified;
/**
 *  New trees have the same weight of sum of dropped trees.
 *
 *  Value: "FOREST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_Forest;
/**
 *  New trees have the same weight of each of dropped trees.
 *
 *  Value: "TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DartNormalizeType_Tree;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dataFrequency

/**
 *  Automatically inferred from timestamps.
 *
 *  Value: "AUTO_FREQUENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_AutoFrequency;
/**
 *  Daily data.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Daily;
/** Value: "DATA_FREQUENCY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_DataFrequencyUnspecified;
/**
 *  Hourly data.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Hourly;
/**
 *  Monthly data.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Monthly;
/**
 *  Per-minute data.
 *
 *  Value: "PER_MINUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_PerMinute;
/**
 *  Quarterly data.
 *
 *  Value: "QUARTERLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Quarterly;
/**
 *  Weekly data.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Weekly;
/**
 *  Yearly data.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataFrequency_Yearly;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.dataSplitMethod

/**
 *  Splits data automatically: Uses NO_SPLIT if the data size is small.
 *  Otherwise uses RANDOM.
 *
 *  Value: "AUTO_SPLIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_AutoSplit;
/**
 *  Splits data with the user provided tags.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Custom;
/** Value: "DATA_SPLIT_METHOD_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_DataSplitMethodUnspecified;
/**
 *  Data split will be skipped.
 *
 *  Value: "NO_SPLIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_NoSplit;
/**
 *  Splits data randomly.
 *
 *  Value: "RANDOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Random;
/**
 *  Splits data sequentially.
 *
 *  Value: "SEQUENTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Sequential;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.distanceType

/**
 *  Cosine distance.
 *
 *  Value: "COSINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Cosine;
/** Value: "DISTANCE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_DistanceTypeUnspecified;
/**
 *  Eculidean distance.
 *
 *  Value: "EUCLIDEAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Euclidean;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.feedbackType

/**
 *  Use nonweighted-als for explicit feedback problems.
 *
 *  Value: "EXPLICIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Explicit;
/** Value: "FEEDBACK_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_FeedbackTypeUnspecified;
/**
 *  Use weighted-als for implicit feedback problems.
 *
 *  Value: "IMPLICIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Implicit;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.holidayRegion

/**
 *  United Arab Emirates
 *
 *  Value: "AE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ae;
/**
 *  Argentina
 *
 *  Value: "AR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ar;
/**
 *  Austria
 *
 *  Value: "AT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_At;
/**
 *  Australia
 *
 *  Value: "AU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Au;
/**
 *  Belgium
 *
 *  Value: "BE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Be;
/**
 *  Brazil
 *
 *  Value: "BR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Br;
/**
 *  Canada
 *
 *  Value: "CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ca;
/**
 *  Switzerland
 *
 *  Value: "CH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ch;
/**
 *  Chile
 *
 *  Value: "CL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cl;
/**
 *  China
 *
 *  Value: "CN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cn;
/**
 *  Colombia
 *
 *  Value: "CO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Co;
/**
 *  Czechoslovakia
 *
 *  Value: "CS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cs;
/**
 *  Czech Republic
 *
 *  Value: "CZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Cz;
/**
 *  Germany
 *
 *  Value: "DE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_De;
/**
 *  Denmark
 *
 *  Value: "DK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Dk;
/**
 *  Algeria
 *
 *  Value: "DZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Dz;
/**
 *  Ecuador
 *
 *  Value: "EC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ec;
/**
 *  Estonia
 *
 *  Value: "EE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ee;
/**
 *  Egypt
 *
 *  Value: "EG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Eg;
/**
 *  Europe, the Middle East and Africa.
 *
 *  Value: "EMEA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Emea;
/**
 *  Spain
 *
 *  Value: "ES"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Es;
/**
 *  Finland
 *
 *  Value: "FI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Fi;
/**
 *  France
 *
 *  Value: "FR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Fr;
/**
 *  Great Britain (United Kingdom)
 *
 *  Value: "GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Gb;
/**
 *  Global.
 *
 *  Value: "GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Global;
/**
 *  Greece
 *
 *  Value: "GR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Gr;
/**
 *  Hong Kong
 *
 *  Value: "HK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Hk;
/**
 *  Holiday region unspecified.
 *
 *  Value: "HOLIDAY_REGION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_HolidayRegionUnspecified;
/**
 *  Hungary
 *
 *  Value: "HU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Hu;
/**
 *  Indonesia
 *
 *  Value: "ID"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Id;
/**
 *  Ireland
 *
 *  Value: "IE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ie;
/**
 *  Israel
 *
 *  Value: "IL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Il;
/**
 *  India
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_In;
/**
 *  Iran
 *
 *  Value: "IR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ir;
/**
 *  Italy
 *
 *  Value: "IT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_It;
/**
 *  Japan and Asia Pacific: Korea, Greater China, India, Australia, and New
 *  Zealand.
 *
 *  Value: "JAPAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Japac;
/**
 *  Japan
 *
 *  Value: "JP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Jp;
/**
 *  Korea (South)
 *
 *  Value: "KR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Kr;
/**
 *  Latin America and the Caribbean.
 *
 *  Value: "LAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Lac;
/**
 *  Latvia
 *
 *  Value: "LV"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Lv;
/**
 *  Morocco
 *
 *  Value: "MA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ma;
/**
 *  Mexico
 *
 *  Value: "MX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Mx;
/**
 *  Malaysia
 *
 *  Value: "MY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_My;
/**
 *  North America.
 *
 *  Value: "NA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Na;
/**
 *  Nigeria
 *
 *  Value: "NG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ng;
/**
 *  Netherlands
 *
 *  Value: "NL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Nl;
/**
 *  Norway
 *
 *  Value: "NO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_No;
/**
 *  New Zealand
 *
 *  Value: "NZ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Nz;
/**
 *  Peru
 *
 *  Value: "PE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pe;
/**
 *  Philippines
 *
 *  Value: "PH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ph;
/**
 *  Pakistan
 *
 *  Value: "PK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pk;
/**
 *  Poland
 *
 *  Value: "PL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pl;
/**
 *  Portugal
 *
 *  Value: "PT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Pt;
/**
 *  Romania
 *
 *  Value: "RO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ro;
/**
 *  Serbia
 *
 *  Value: "RS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Rs;
/**
 *  Russian Federation
 *
 *  Value: "RU"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ru;
/**
 *  Saudi Arabia
 *
 *  Value: "SA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sa;
/**
 *  Sweden
 *
 *  Value: "SE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Se;
/**
 *  Singapore
 *
 *  Value: "SG"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sg;
/**
 *  Slovenia
 *
 *  Value: "SI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Si;
/**
 *  Slovakia
 *
 *  Value: "SK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Sk;
/**
 *  Thailand
 *
 *  Value: "TH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Th;
/**
 *  Turkey
 *
 *  Value: "TR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Tr;
/**
 *  Taiwan
 *
 *  Value: "TW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Tw;
/**
 *  Ukraine
 *
 *  Value: "UA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ua;
/**
 *  United States
 *
 *  Value: "US"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Us;
/**
 *  Venezuela
 *
 *  Value: "VE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Ve;
/**
 *  Viet Nam
 *
 *  Value: "VN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Vn;
/**
 *  South Africa
 *
 *  Value: "ZA"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HolidayRegion_Za;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.hparamTuningObjectives

/**
 *  Accuracy is the fraction of predictions given the correct label. For
 *  multiclass this is a globally micro-averaged metric.
 *
 *  Value: "ACCURACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Accuracy;
/**
 *  Average Rank.
 *
 *  Value: "AVERAGE_RANK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_AverageRank;
/**
 *  Davies-Bouldin Index.
 *
 *  Value: "DAVIES_BOULDIN_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_DaviesBouldinIndex;
/**
 *  Explained variance. explained_variance = 1 -
 *  VAR_POP(label_error)/VAR_POP(label)
 *
 *  Value: "EXPLAINED_VARIANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_ExplainedVariance;
/**
 *  The F1 score is an average of recall and precision. For multiclass this is a
 *  macro-averaged metric.
 *
 *  Value: "F1_SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_F1Score;
/**
 *  Unspecified evaluation metric.
 *
 *  Value: "HPARAM_TUNING_OBJECTIVE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_HparamTuningObjectiveUnspecified;
/**
 *  Logorithmic Loss. For multiclass this is a macro-averaged metric.
 *
 *  Value: "LOG_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_LogLoss;
/**
 *  Mean absolute error. mean_absolute_error = AVG(ABS(label - predicted))
 *
 *  Value: "MEAN_ABSOLUTE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanAbsoluteError;
/**
 *  Mean Average Precision.
 *
 *  Value: "MEAN_AVERAGE_PRECISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanAveragePrecision;
/**
 *  Mean squared error. mean_squared_error = AVG(POW(label - predicted, 2))
 *
 *  Value: "MEAN_SQUARED_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanSquaredError;
/**
 *  Mean squared log error. mean_squared_log_error = AVG(POW(LN(1 + label) -
 *  LN(1 + predicted), 2))
 *
 *  Value: "MEAN_SQUARED_LOG_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MeanSquaredLogError;
/**
 *  Mean absolute error. median_absolute_error =
 *  APPROX_QUANTILES(absolute_error, 2)[OFFSET(1)]
 *
 *  Value: "MEDIAN_ABSOLUTE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_MedianAbsoluteError;
/**
 *  Normalized Discounted Cumulative Gain.
 *
 *  Value: "NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_NormalizedDiscountedCumulativeGain;
/**
 *  Precision is the fraction of actual positive predictions that had positive
 *  actual labels. For multiclass this is a macro-averaged metric treating each
 *  class as a binary classifier.
 *
 *  Value: "PRECISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Precision;
/**
 *  Recall is the fraction of actual positive labels that were given a positive
 *  prediction. For multiclass this is a macro-averaged metric.
 *
 *  Value: "RECALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_Recall;
/**
 *  Area Under an ROC Curve. For multiclass this is a macro-averaged metric.
 *
 *  Value: "ROC_AUC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_RocAuc;
/**
 *  R^2 score. This corresponds to r2_score in ML.EVALUATE. r_squared = 1 -
 *  SUM(squared_error)/(COUNT(label)*VAR_POP(label))
 *
 *  Value: "R_SQUARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_HparamTuningObjectives_RSquared;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.kmeansInitializationMethod

/**
 *  Initializes the centroids using data specified in
 *  kmeans_initialization_column.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Custom;
/**
 *  Unspecified initialization method.
 *
 *  Value: "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansInitializationMethodUnspecified;
/**
 *  Initializes with kmeans++.
 *
 *  Value: "KMEANS_PLUS_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansPlusPlus;
/**
 *  Initializes the centroids randomly.
 *
 *  Value: "RANDOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Random;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.learnRateStrategy

/**
 *  Use a constant learning rate.
 *
 *  Value: "CONSTANT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_Constant;
/** Value: "LEARN_RATE_STRATEGY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LearnRateStrategyUnspecified;
/**
 *  Use line search to determine learning rate.
 *
 *  Value: "LINE_SEARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LineSearch;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.lossType

/** Value: "LOSS_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_LossTypeUnspecified;
/**
 *  Mean log loss, used for logistic regression.
 *
 *  Value: "MEAN_LOG_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanLogLoss;
/**
 *  Mean squared loss, used for linear regression.
 *
 *  Value: "MEAN_SQUARED_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanSquaredLoss;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.optimizationStrategy

/**
 *  Uses an iterative batch gradient descent algorithm.
 *
 *  Value: "BATCH_GRADIENT_DESCENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_BatchGradientDescent;
/**
 *  Uses a normal equation to solve linear regression problem.
 *
 *  Value: "NORMAL_EQUATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_NormalEquation;
/** Value: "OPTIMIZATION_STRATEGY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_OptimizationStrategyUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigquery_TrainingOptions.treeMethod

/**
 *  Approximate greedy algorithm using quantile sketch and gradient histogram.
 *
 *  Value: "APPROX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Approx;
/**
 *  Use heuristic to choose the fastest method.
 *
 *  Value: "AUTO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Auto;
/**
 *  Exact greedy algorithm.
 *
 *  Value: "EXACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Exact;
/**
 *  Fast histogram optimized approximate greedy algorithm.
 *
 *  Value: "HIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_Hist;
/**
 *  Unspecified tree method.
 *
 *  Value: "TREE_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigquery_TrainingOptions_TreeMethod_TreeMethodUnspecified;

/**
 *  Aggregate metrics for classification/classifier models. For multi-class
 *  models, the metrics are either macro-averaged or micro-averaged. When
 *  macro-averaged, the metrics are calculated for each label and then an
 *  unweighted average is taken of those values. When micro-averaged, the metric
 *  is calculated globally by counting the total number of correctly predicted
 *  rows.
 */
@interface GTLRBigquery_AggregateClassificationMetrics : GTLRObject

/**
 *  Accuracy is the fraction of predictions given the correct label. For
 *  multiclass this is a micro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracy;

/**
 *  The F1 score is an average of recall and precision. For multiclass this is a
 *  macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Logarithmic Loss. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLoss;

/**
 *  Precision is the fraction of actual positive predictions that had positive
 *  actual labels. For multiclass this is a macro-averaged metric treating each
 *  class as a binary classifier.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Recall is the fraction of actual positive labels that were given a positive
 *  prediction. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rocAuc;

/**
 *  Threshold at which the metrics are computed. For binary classification
 *  models this is the positive class threshold. For multi-class classfication
 *  models this is the confidence threshold.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threshold;

@end


/**
 *  Input/output argument of a function or a stored procedure.
 */
@interface GTLRBigquery_Argument : GTLRObject

/**
 *  Optional. Defaults to FIXED_TYPE.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_AnyType The argument is any
 *        type, including struct or array, but not a table. To be added:
 *        FIXED_TABLE, ANY_TABLE (Value: "ANY_TYPE")
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_ArgumentKindUnspecified Value
 *        "ARGUMENT_KIND_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_Argument_ArgumentKind_FixedType The argument is a
 *        variable with fully specified type, which can be a struct or an array,
 *        but not a table. (Value: "FIXED_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *argumentKind;

/** Required unless argument_kind = ANY_TYPE. */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *dataType;

/**
 *  Optional. Specifies whether the argument is input or output. Can be set for
 *  procedures only.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Argument_Mode_In The argument is input-only. (Value:
 *        "IN")
 *    @arg @c kGTLRBigquery_Argument_Mode_Inout The argument is both an input
 *        and an output. (Value: "INOUT")
 *    @arg @c kGTLRBigquery_Argument_Mode_ModeUnspecified Value
 *        "MODE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_Argument_Mode_Out The argument is output-only.
 *        (Value: "OUT")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. The name of this argument. Can be absent for function return
 *  argument.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Arima coefficients.
 */
@interface GTLRBigquery_ArimaCoefficients : GTLRObject

/**
 *  Auto-regressive coefficients, an array of double.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *autoRegressiveCoefficients;

/**
 *  Intercept coefficient, just a double not an array.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interceptCoefficient;

/**
 *  Moving-average coefficients, an array of double.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *movingAverageCoefficients;

@end


/**
 *  ARIMA model fitting metrics.
 */
@interface GTLRBigquery_ArimaFittingMetrics : GTLRObject

/**
 *  AIC.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aic;

/**
 *  Log-likelihood.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLikelihood;

/**
 *  Variance.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variance;

@end


/**
 *  Model evaluation metrics for ARIMA forecasting models.
 */
@interface GTLRBigquery_ArimaForecastingMetrics : GTLRObject

/** Arima model fitting metrics. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaFittingMetrics *> *arimaFittingMetrics;

/**
 *  Repeated as there can be many metric sets (one for each model) in auto-arima
 *  and the large-scale case.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaSingleModelForecastingMetrics *> *arimaSingleModelForecastingMetrics;

/**
 *  Whether Arima model fitted with drift or not. It is always false when d is
 *  not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *hasDrift;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaOrder *> *nonSeasonalOrder;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

/** Id to differentiate different time series for the large-scale case. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesId;

@end


/**
 *  Arima model information.
 */
@interface GTLRBigquery_ArimaModelInfo : GTLRObject

/** Arima coefficients. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaCoefficients *arimaCoefficients;

/** Arima fitting metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaFittingMetrics *arimaFittingMetrics;

/**
 *  Whether Arima model fitted with drift or not. It is always false when d is
 *  not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDrift;

/**
 *  If true, holiday_effect is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasHolidayEffect;

/**
 *  If true, spikes_and_dips is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasSpikesAndDips;

/**
 *  If true, step_changes is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasStepChanges;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

/**
 *  The time_series_id value for this time series. It will be one of the unique
 *  values from the time_series_id_column specified during ARIMA model training.
 *  Only present when time_series_id_column training option was used.
 */
@property(nonatomic, copy, nullable) NSString *timeSeriesId;

/**
 *  The tuple of time_series_ids identifying this time series. It will be one of
 *  the unique tuples of values present in the time_series_id_columns specified
 *  during ARIMA model training. Only present when time_series_id_columns
 *  training option was used and the order of values here are same as the order
 *  of time_series_id_columns.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIds;

@end


/**
 *  Arima order, can be used for both non-seasonal and seasonal parts.
 */
@interface GTLRBigquery_ArimaOrder : GTLRObject

/**
 *  Order of the differencing part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *d;

/**
 *  Order of the autoregressive part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p;

/**
 *  Order of the moving-average part.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *q;

@end


/**
 *  (Auto-)arima fitting result. Wrap everything in ArimaResult for easier
 *  refactoring if we want to use model-specific iteration results.
 */
@interface GTLRBigquery_ArimaResult : GTLRObject

/**
 *  This message is repeated because there are multiple arima models fitted in
 *  auto-arima. For non-auto-arima model, its size is one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ArimaModelInfo *> *arimaModelInfo;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

@end


/**
 *  Model evaluation metrics for a single ARIMA forecasting model.
 */
@interface GTLRBigquery_ArimaSingleModelForecastingMetrics : GTLRObject

/** Arima fitting metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaFittingMetrics *arimaFittingMetrics;

/**
 *  Is arima model fitted with drift or not. It is always false when d is not 1.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDrift;

/**
 *  If true, holiday_effect is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasHolidayEffect;

/**
 *  If true, spikes_and_dips is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasSpikesAndDips;

/**
 *  If true, step_changes is a part of time series decomposition result.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasStepChanges;

/** Non-seasonal order. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Seasonal periods. Repeated because multiple periods are supported for one
 *  time series.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *seasonalPeriods;

/**
 *  The time_series_id value for this time series. It will be one of the unique
 *  values from the time_series_id_column specified during ARIMA model training.
 *  Only present when time_series_id_column training option was used.
 */
@property(nonatomic, copy, nullable) NSString *timeSeriesId;

/**
 *  The tuple of time_series_ids identifying this time series. It will be one of
 *  the unique tuples of values present in the time_series_id_columns specified
 *  during ARIMA model training. Only present when time_series_id_columns
 *  training option was used and the order of values here are same as the order
 *  of time_series_id_columns.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIds;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRBigquery_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRBigquery_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRBigquery_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  GTLRBigquery_AvroOptions
 */
@interface GTLRBigquery_AvroOptions : GTLRObject

/**
 *  [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret
 *  logical types as the corresponding BigQuery data type (for example,
 *  TIMESTAMP), instead of using the raw type (for example, INTEGER).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

@end


/**
 *  GTLRBigquery_BiEngineReason
 */
@interface GTLRBigquery_BiEngineReason : GTLRObject

/**
 *  [Output-only] High-level BI Engine reason for partial or disabled
 *  acceleration.
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  [Output-only] Free form human-readable reason for partial or disabled
 *  acceleration.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRBigquery_BiEngineStatistics
 */
@interface GTLRBigquery_BiEngineStatistics : GTLRObject

/**
 *  [Output-only] Specifies which mode of BI Engine acceleration was performed
 *  (if any).
 */
@property(nonatomic, copy, nullable) NSString *biEngineMode;

/**
 *  In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory
 *  reasons as to why BI Engine could not accelerate. In case the full query was
 *  accelerated, this field is not populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BiEngineReason *> *biEngineReasons;

@end


/**
 *  GTLRBigquery_BigtableColumn
 */
@interface GTLRBigquery_BigtableColumn : GTLRObject

/**
 *  [Optional] The encoding of the values when the type is not STRING.
 *  Acceptable encoding values are: TEXT - indicates values are alphanumeric
 *  text strings. BINARY - indicates values are encoded using HBase
 *  Bytes.toBytes family of functions. 'encoding' can also be set at the column
 *  family level. However, the setting at this level takes precedence if
 *  'encoding' is set at both levels.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] If the qualifier is not a valid BigQuery field identifier i.e.
 *  does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as
 *  the column field name and is used as field name in queries.
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

/**
 *  [Optional] If this is set, only the latest version of value in this column
 *  are exposed. 'onlyReadLatest' can also be set at the column family level.
 *  However, the setting at this level takes precedence if 'onlyReadLatest' is
 *  set at both levels.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  [Required] Qualifier of the column. Columns in the parent column family that
 *  has this exact qualifier are exposed as . field. If the qualifier is valid
 *  UTF-8 string, it can be specified in the qualifier_string field. Otherwise,
 *  a base-64 encoded value must be set to qualifier_encoded. The column field
 *  name is the same as the column qualifier. However, if the qualifier is not a
 *  valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a
 *  valid identifier must be provided as field_name.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *qualifierEncoded;

@property(nonatomic, copy, nullable) NSString *qualifierString;

/**
 *  [Optional] The type to convert the value in cells of this column. The values
 *  are expected to be encoded using HBase Bytes.toBytes function when using the
 *  BINARY encoding value. Following BigQuery types are allowed (case-sensitive)
 *  - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also
 *  be set at the column family level. However, the setting at this level takes
 *  precedence if 'type' is set at both levels.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_BigtableColumnFamily
 */
@interface GTLRBigquery_BigtableColumnFamily : GTLRObject

/**
 *  [Optional] Lists of columns that should be exposed as individual fields as
 *  opposed to a list of (column name, value) pairs. All columns whose qualifier
 *  matches a qualifier in this list can be accessed as .. Other columns can be
 *  accessed as a list through .Column field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumn *> *columns;

/**
 *  [Optional] The encoding of the values when the type is not STRING.
 *  Acceptable encoding values are: TEXT - indicates values are alphanumeric
 *  text strings. BINARY - indicates values are encoded using HBase
 *  Bytes.toBytes family of functions. This can be overridden for a specific
 *  column by listing that column in 'columns' and specifying an encoding for
 *  it.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/** Identifier of the column family. */
@property(nonatomic, copy, nullable) NSString *familyId;

/**
 *  [Optional] If this is set only the latest version of value are exposed for
 *  all columns in this column family. This can be overridden for a specific
 *  column by listing that column in 'columns' and specifying a different
 *  setting for that column.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  [Optional] The type to convert the value in cells of this column family. The
 *  values are expected to be encoded using HBase Bytes.toBytes function when
 *  using the BINARY encoding value. Following BigQuery types are allowed
 *  (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES.
 *  This can be overridden for a specific column by listing that column in
 *  'columns' and specifying a type for it.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_BigtableOptions
 */
@interface GTLRBigquery_BigtableOptions : GTLRObject

/**
 *  [Optional] List of column families to expose in the table schema along with
 *  their types. This list restricts the column families that can be referenced
 *  in queries and specifies their value types. You can use this list to do type
 *  conversions - see the 'type' field for more details. If you leave this list
 *  empty, all column families are present in the table schema and their values
 *  are read as BYTES. During a query only the column families referenced in
 *  that query are read from Bigtable.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumnFamily *> *columnFamilies;

/**
 *  [Optional] If field is true, then the column families that are not specified
 *  in columnFamilies list are not exposed in the table schema. Otherwise, they
 *  are read with BYTES type values. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnspecifiedColumnFamilies;

/**
 *  [Optional] If field is true, then the rowkey column families will be read
 *  and converted to string. Otherwise they are read with BYTES type values and
 *  users need to manually cast them with CAST if necessary. The default value
 *  is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRowkeyAsString;

@end


/**
 *  Evaluation metrics for binary classification/classifier models.
 */
@interface GTLRBigquery_BinaryClassificationMetrics : GTLRObject

/** Aggregate classification metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_AggregateClassificationMetrics *aggregateClassificationMetrics;

/** Binary confusion matrix at multiple thresholds. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BinaryConfusionMatrix *> *binaryConfusionMatrixList;

/** Label representing the negative class. */
@property(nonatomic, copy, nullable) NSString *negativeLabel;

/** Label representing the positive class. */
@property(nonatomic, copy, nullable) NSString *positiveLabel;

@end


/**
 *  Confusion matrix for binary classification models.
 */
@interface GTLRBigquery_BinaryConfusionMatrix : GTLRObject

/**
 *  The fraction of predictions given the correct label.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracy;

/**
 *  The equally weighted average of recall and precision.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Number of false samples predicted as false.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falseNegatives;

/**
 *  Number of false samples predicted as true.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositives;

/**
 *  Threshold value used when computing each of the following metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *positiveClassThreshold;

/**
 *  The fraction of actual positive predictions that had positive actual labels.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  The fraction of actual positive labels that were given a positive
 *  prediction.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  Number of true samples predicted as false.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trueNegatives;

/**
 *  Number of true samples predicted as true.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truePositives;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRBigquery_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  GTLRBigquery_BqmlIterationResult
 */
@interface GTLRBigquery_BqmlIterationResult : GTLRObject

/**
 *  [Output-only, Beta] Time taken to run the training iteration in
 *  milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  [Output-only, Beta] Eval loss computed on the eval data at the end of the
 *  iteration. The eval loss is used for early stopping to avoid overfitting. No
 *  eval loss if eval_split_method option is specified as no_split or auto_split
 *  with input data size less than 500 rows.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  [Output-only, Beta] Index of the ML training iteration, starting from zero
 *  for each training run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  [Output-only, Beta] Learning rate used for this iteration, it varies for
 *  different training iterations if learn_rate_strategy option is not constant.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  [Output-only, Beta] Training loss computed on the training data at the end
 *  of the iteration. The training loss function is defined by model type.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

@end


/**
 *  GTLRBigquery_BqmlTrainingRun
 */
@interface GTLRBigquery_BqmlTrainingRun : GTLRObject

/** [Output-only, Beta] List of each iteration results. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BqmlIterationResult *> *iterationResults;

/**
 *  [Output-only, Beta] Training run start time in milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  [Output-only, Beta] Different state applicable for a training run. IN
 *  PROGRESS: Training run is in progress. FAILED: Training run ended due to a
 *  non-retryable failure. SUCCEEDED: Training run successfully completed.
 *  CANCELLED: Training run cancelled by the user.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  [Output-only, Beta] Training options used by this training run. These
 *  options are mutable for subsequent training runs. Default values are
 *  explicitly stored for options not specified in the input query of the first
 *  training run. For subsequent training runs, any option not explicitly
 *  specified in the input query will be copied from the previous training run.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_BqmlTrainingRun_TrainingOptions *trainingOptions;

@end


/**
 *  [Output-only, Beta] Training options used by this training run. These
 *  options are mutable for subsequent training runs. Default values are
 *  explicitly stored for options not specified in the input query of the first
 *  training run. For subsequent training runs, any option not explicitly
 *  specified in the input query will be copied from the previous training run.
 */
@interface GTLRBigquery_BqmlTrainingRun_TrainingOptions : GTLRObject

/**
 *  earlyStop
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *earlyStop;

/**
 *  l1Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1Reg;

/**
 *  l2Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l2Reg;

/**
 *  learnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

@property(nonatomic, copy, nullable) NSString *learnRateStrategy;

/**
 *  lineSearchInitLearnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSearchInitLearnRate;

/**
 *  maxIteration
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIteration;

/**
 *  minRelProgress
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRelProgress;

/**
 *  warmStart
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warmStart;

@end


/**
 *  Representative value of a categorical feature.
 */
@interface GTLRBigquery_CategoricalValue : GTLRObject

/**
 *  Counts of all categories for the categorical feature. If there are more than
 *  ten categories, we return top ten (by count) and return one more
 *  CategoryCount with category "_OTHER_" and count as aggregate counts of
 *  remaining categories.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_CategoryCount *> *categoryCounts;

@end


/**
 *  Represents the count of a single category within the cluster.
 */
@interface GTLRBigquery_CategoryCount : GTLRObject

/** The name of category. */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  The count of training samples matching the category within the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

@end


/**
 *  GTLRBigquery_CloneDefinition
 */
@interface GTLRBigquery_CloneDefinition : GTLRObject

/** [Required] Reference describing the ID of the table that was cloned. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTableReference;

/**
 *  [Required] The time at which the base table was cloned. This value is
 *  reported in the JSON response using RFC3339 format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *cloneTime;

@end


/**
 *  Message containing the information about one cluster.
 */
@interface GTLRBigquery_Cluster : GTLRObject

/**
 *  Centroid id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *centroidId;

/**
 *  Count of training data rows that were assigned to this cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Values of highly variant features for this cluster. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_FeatureValue *> *featureValues;

@end


/**
 *  Information about a single cluster for clustering model.
 */
@interface GTLRBigquery_ClusterInfo : GTLRObject

/**
 *  Centroid id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *centroidId;

/**
 *  Cluster radius, the average distance from centroid to each point assigned to
 *  the cluster.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clusterRadius;

/**
 *  Cluster size, the total number of points assigned to the cluster.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clusterSize;

@end


/**
 *  GTLRBigquery_Clustering
 */
@interface GTLRBigquery_Clustering : GTLRObject

/**
 *  [Repeated] One or more fields on which data should be clustered. Only
 *  top-level, non-repeated, simple-type fields are supported. When you cluster
 *  a table using multiple columns, the order of columns you specify is
 *  important. The order of the specified columns determines the sort order of
 *  the data.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fields;

@end


/**
 *  Evaluation metrics for clustering models.
 */
@interface GTLRBigquery_ClusteringMetrics : GTLRObject

/** Information for all clusters. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Cluster *> *clusters;

/**
 *  Davies-Bouldin index.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *daviesBouldinIndex;

/**
 *  Mean of squared distances between each sample to its cluster centroid.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredDistance;

@end


/**
 *  Confusion matrix for multi-class classification models.
 */
@interface GTLRBigquery_ConfusionMatrix : GTLRObject

/**
 *  Confidence threshold used when computing the entries of the confusion
 *  matrix.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/** One row per actual label. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Row *> *rows;

@end


/**
 *  GTLRBigquery_ConnectionProperty
 */
@interface GTLRBigquery_ConnectionProperty : GTLRObject

/** [Required] Name of the connection property to set. */
@property(nonatomic, copy, nullable) NSString *key;

/** [Required] Value of the connection property. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRBigquery_CsvOptions
 */
@interface GTLRBigquery_CsvOptions : GTLRObject

/**
 *  [Optional] Indicates if BigQuery should accept rows that are missing
 *  trailing optional columns. If true, BigQuery treats missing trailing columns
 *  as null values. If false, records with missing trailing columns are treated
 *  as bad records, and if there are too many bad records, an invalid error is
 *  returned in the job result. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  [Optional] Indicates if BigQuery should allow quoted data sections that
 *  contain newline characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  [Optional] The character encoding of the data. The supported values are
 *  UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data
 *  after the raw, binary data has been split using the values of the quote and
 *  fieldDelimiter properties.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] The separator for fields in a CSV file. BigQuery converts the
 *  string to ISO-8859-1 encoding, and then uses the first byte of the encoded
 *  string to split the data in its raw, binary state. BigQuery also supports
 *  the escape sequence "\\t" to specify a tab separator. The default value is a
 *  comma (',').
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  [Optional] An custom string that will represent a NULL value in CSV import
 *  data.
 */
@property(nonatomic, copy, nullable) NSString *nullMarker;

/**
 *  [Optional] Preserves the embedded ASCII control characters (the first 32
 *  characters in the ASCII-table, from '\\x00' to '\\x1F') when loading from
 *  CSV. Only applicable to CSV, ignored for other formats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveAsciiControlCharacters;

/**
 *  [Optional] The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ('"'). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  [Optional] The number of rows at the top of a CSV file that BigQuery will
 *  skip when reading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped. When autodetect
 *  is on, the behavior is the following: * skipLeadingRows unspecified -
 *  Autodetect tries to detect headers in the first row. If they are not
 *  detected, the row is read as data. Otherwise data is read starting from the
 *  second row. * skipLeadingRows is 0 - Instructs autodetect that there are no
 *  headers and data should be read starting from the first row. *
 *  skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
 *  headers in row N. If headers are not detected, row N is just skipped.
 *  Otherwise row N is used to extract column names for the detected schema.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  GTLRBigquery_DataMaskingStatistics
 */
@interface GTLRBigquery_DataMaskingStatistics : GTLRObject

/**
 *  [Output-only] [Preview] Whether any accessed data was protected by data
 *  masking. The actual evaluation is done by accessStats.masked_field_count >
 *  0. Since this is only used for the discovery_doc generation purpose, as long
 *  as the type (boolean) matches, client library can leverage this. The actual
 *  evaluation of the variable is done else-where.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataMaskingApplied;

@end


/**
 *  GTLRBigquery_Dataset
 */
@interface GTLRBigquery_Dataset : GTLRObject

/**
 *  [Optional] An array of objects that define dataset access for one or more
 *  entities. You can set this property when inserting or updating a dataset in
 *  order to control who is allowed to access the data. If unspecified at
 *  dataset creation time, BigQuery adds default dataset access for the
 *  following entities: access.specialGroup: projectReaders; access.role:
 *  READER; access.specialGroup: projectWriters; access.role: WRITER;
 *  access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail:
 *  [dataset creator email]; access.role: OWNER;
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Dataset_Access_Item *> *access;

/**
 *  [Output-only] The time when this dataset was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** [Required] A reference that identifies the dataset. */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/** [Output-only] The default collation of the dataset. */
@property(nonatomic, copy, nullable) NSString *defaultCollation;

@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *defaultEncryptionConfiguration;

/**
 *  [Optional] The default partition expiration for all partitioned tables in
 *  the dataset, in milliseconds. Once this property is set, all newly-created
 *  partitioned tables in the dataset will have an expirationMs property in the
 *  timePartitioning settings set to this value, and changing the value will
 *  only affect new tables, not existing ones. The storage in a partition will
 *  have an expiration time of its partition time plus this value. Setting this
 *  property overrides the use of defaultTableExpirationMs for partitioned
 *  tables: only one of defaultTableExpirationMs and
 *  defaultPartitionExpirationMs will be used for any new partitioned table. If
 *  you provide an explicit timePartitioning.expirationMs when creating or
 *  updating a partitioned table, that value takes precedence over the default
 *  partition expiration time indicated by this property.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultPartitionExpirationMs;

/**
 *  [Optional] The default lifetime of all tables in the dataset, in
 *  milliseconds. The minimum value is 3600000 milliseconds (one hour). Once
 *  this property is set, all newly-created tables in the dataset will have an
 *  expirationTime property set to the creation time plus the value in this
 *  property, and changing the value will only affect new tables, not existing
 *  ones. When the expirationTime for a given table is reached, that table will
 *  be deleted automatically. If a table's expirationTime is modified or removed
 *  before the table expires, or if you provide an explicit expirationTime when
 *  creating a table, that value takes precedence over the default expiration
 *  time indicated by this property.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultTableExpirationMs;

/**
 *  [Optional] A user-friendly description of the dataset.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** [Output-only] A hash of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** [Optional] A descriptive name for the dataset. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  [Output-only] The fully-qualified unique name of the dataset in the format
 *  projectId:datasetId. The dataset name without the project name is given in
 *  the datasetId field. When creating a new dataset, leave this field blank,
 *  and instead specify the datasetId field.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  [Optional] Indicates if table names are case insensitive in the dataset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCaseInsensitive;

/** [Output-only] The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See Creating and Updating Dataset Labels for more information.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Dataset_Labels *labels;

/**
 *  [Output-only] The date when this dataset or any of its tables was last
 *  modified, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  The geographic location where the dataset should reside. The default value
 *  is US. See details at https://cloud.google.com/bigquery/docs/locations.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  [Optional] Number of hours for the max time travel for all tables in the
 *  dataset.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTimeTravelHours;

/**
 *  [Output-only] Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  [Output-only] A URL that can be used to access the resource again. You can
 *  use this URL in Get or Update requests to the resource.
 */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Optional] Storage billing model to be used for all tables in the dataset.
 *  Can be set to PHYSICAL. Default is LOGICAL.
 */
@property(nonatomic, copy, nullable) NSString *storageBillingModel;

/**
 *  [Optional]The tags associated with this dataset. Tag keys are globally
 *  unique.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Dataset_Tags_Item *> *tags;

@end


/**
 *  GTLRBigquery_Dataset_Access_Item
 */
@interface GTLRBigquery_Dataset_Access_Item : GTLRObject

/**
 *  [Pick one] A grant authorizing all resources of a particular type in a
 *  particular dataset access to this dataset. Only views are supported for now.
 *  The role field is not required when this field is set. If that dataset is
 *  deleted and re-created, its access needs to be granted again via an update
 *  operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetAccessEntry *dataset;

/**
 *  [Pick one] A domain to grant access to. Any users signed in with the domain
 *  specified will be granted the specified access. Example: "example.com". Maps
 *  to IAM policy member "domain:DOMAIN".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  [Pick one] An email address of a Google Group to grant access to. Maps to
 *  IAM policy member "group:GROUP".
 */
@property(nonatomic, copy, nullable) NSString *groupByEmail;

/**
 *  [Pick one] Some other type of member that appears in the IAM Policy but
 *  isn't a user, group, domain, or special group.
 */
@property(nonatomic, copy, nullable) NSString *iamMember;

/**
 *  [Required] An IAM role ID that should be granted to the user, group, or
 *  domain specified in this access entry. The following legacy mappings will be
 *  applied: OWNER roles/bigquery.dataOwner WRITER roles/bigquery.dataEditor
 *  READER roles/bigquery.dataViewer This field will accept any of the above
 *  formats, but will return only the legacy format. For example, if you set
 *  this field to "roles/bigquery.dataOwner", it will be returned back as
 *  "OWNER".
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  [Pick one] A routine from a different dataset to grant access to. Queries
 *  executed against that routine will have read access to views/tables/routines
 *  in this dataset. Only UDF is supported for now. The role field is not
 *  required when this field is set. If that routine is updated by any user,
 *  access to the routine needs to be granted again via an update operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *routine;

/**
 *  [Pick one] A special group to grant access to. Possible values include:
 *  projectOwners: Owners of the enclosing project. projectReaders: Readers of
 *  the enclosing project. projectWriters: Writers of the enclosing project.
 *  allAuthenticatedUsers: All authenticated BigQuery users. Maps to
 *  similarly-named IAM members.
 */
@property(nonatomic, copy, nullable) NSString *specialGroup;

/**
 *  [Pick one] An email address of a user to grant access to. For example:
 *  fred\@example.com. Maps to IAM policy member "user:EMAIL" or
 *  "serviceAccount:EMAIL".
 */
@property(nonatomic, copy, nullable) NSString *userByEmail;

/**
 *  [Pick one] A view from a different dataset to grant access to. Queries
 *  executed against that view will have read access to tables in this dataset.
 *  The role field is not required when this field is set. If that view is
 *  updated by any user, access to the view needs to be granted again via an
 *  update operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *view;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See Creating and Updating Dataset Labels for more information.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Dataset_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_Dataset_Tags_Item
 */
@interface GTLRBigquery_Dataset_Tags_Item : GTLRObject

/**
 *  [Required] The namespaced friendly name of the tag key, e.g.
 *  "12345/environment" where 12345 is org id.
 */
@property(nonatomic, copy, nullable) NSString *tagKey;

/** [Required] Friendly short name of the tag value, e.g. "production". */
@property(nonatomic, copy, nullable) NSString *tagValue;

@end


/**
 *  GTLRBigquery_DatasetAccessEntry
 */
@interface GTLRBigquery_DatasetAccessEntry : GTLRObject

/** [Required] The dataset this entry applies to. */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *dataset;

@property(nonatomic, strong, nullable) NSArray<NSString *> *targetTypes;

@end


/**
 *  GTLRBigquery_DatasetList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "datasets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_DatasetList : GTLRCollectionObject

/**
 *  An array of the dataset resources in the project. Each resource contains
 *  basic information. For full information about a particular dataset resource,
 *  use the Datasets: get method. This property is omitted when there are no
 *  datasets in the project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_DatasetList_Datasets_Item *> *datasets;

/**
 *  A hash value of the results page. You can use this property to determine if
 *  the page has changed since the last request.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The list type. This property always returns the value
 *  "bigquery#datasetList".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token that can be used to request the next results page. This property is
 *  omitted on the final results page.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRBigquery_DatasetList_Datasets_Item
 */
@interface GTLRBigquery_DatasetList_Datasets_Item : GTLRObject

/**
 *  The dataset reference. Use this property to access specific parts of the
 *  dataset's ID, such as project ID or dataset ID.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/** A descriptive name for the dataset, if one exists. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  The fully-qualified, unique, opaque ID of the dataset.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The resource type. This property always returns the value
 *  "bigquery#dataset".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetList_Datasets_Item_Labels *labels;

/** The geographic location where the data resides. */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_DatasetList_Datasets_Item_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_DatasetReference
 */
@interface GTLRBigquery_DatasetReference : GTLRObject

/**
 *  [Required] A unique ID for this dataset, without the project name. The ID
 *  must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The
 *  maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** [Optional] The ID of the project containing this dataset. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Data split result. This contains references to the training and evaluation
 *  data tables that were used to train the model.
 */
@interface GTLRBigquery_DataSplitResult : GTLRObject

/** Table reference of the evaluation data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *evaluationTable;

/** Table reference of the test data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *testTable;

/** Table reference of the training data after split. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *trainingTable;

@end


/**
 *  GTLRBigquery_DestinationTableProperties
 */
@interface GTLRBigquery_DestinationTableProperties : GTLRObject

/**
 *  [Optional] The description for the destination table. This will only be used
 *  if the destination table is newly created. If the table already exists and a
 *  value different than the current description is provided, the job will fail.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** [Internal] This field is for Google internal use only. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  [Optional] The friendly name for the destination table. This will only be
 *  used if the destination table is newly created. If the table already exists
 *  and a value different than the current friendly name is provided, the job
 *  will fail.
 */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  [Optional] The labels associated with this table. You can use these to
 *  organize and group your tables. This will only be used if the destination
 *  table is newly created. If the table already exists and labels are different
 *  than the current labels are provided, the job will fail.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DestinationTableProperties_Labels *labels;

@end


/**
 *  [Optional] The labels associated with this table. You can use these to
 *  organize and group your tables. This will only be used if the destination
 *  table is newly created. If the table already exists and labels are different
 *  than the current labels are provided, the job will fail.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_DestinationTableProperties_Labels : GTLRObject
@end


/**
 *  Model evaluation metrics for dimensionality reduction models.
 */
@interface GTLRBigquery_DimensionalityReductionMetrics : GTLRObject

/**
 *  Total percentage of variance explained by the selected principal components.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalExplainedVarianceRatio;

@end


/**
 *  GTLRBigquery_DmlStatistics
 */
@interface GTLRBigquery_DmlStatistics : GTLRObject

/**
 *  Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE
 *  statements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletedRowCount;

/**
 *  Number of inserted Rows. Populated by DML INSERT and MERGE statements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertedRowCount;

/**
 *  Number of updated Rows. Populated by DML UPDATE and MERGE statements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updatedRowCount;

@end


/**
 *  Discrete candidates of a double hyperparameter.
 */
@interface GTLRBigquery_DoubleCandidates : GTLRObject

/**
 *  Candidates for the double parameter in increasing order.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *candidates;

@end


/**
 *  Search space for a double hyperparameter.
 */
@interface GTLRBigquery_DoubleHparamSearchSpace : GTLRObject

/** Candidates of the double hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleCandidates *candidates;

/** Range of the double hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleRange *range;

@end


/**
 *  Range of a double hyperparameter.
 */
@interface GTLRBigquery_DoubleRange : GTLRObject

/**
 *  Max value of the double parameter.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  Min value of the double parameter.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

@end


/**
 *  GTLRBigquery_EncryptionConfiguration
 */
@interface GTLRBigquery_EncryptionConfiguration : GTLRObject

/**
 *  [Optional] Describes the Cloud KMS encryption key that will be used to
 *  protect destination BigQuery table. The BigQuery Service Account associated
 *  with your project requires access to this encryption key.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  A single entry in the confusion matrix.
 */
@interface GTLRBigquery_Entry : GTLRObject

/**
 *  Number of items being predicted as this label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *itemCount;

/**
 *  The predicted label. For confidence_threshold > 0, we will also add an entry
 *  indicating the number of items under the confidence threshold.
 */
@property(nonatomic, copy, nullable) NSString *predictedLabel;

@end


/**
 *  GTLRBigquery_ErrorProto
 */
@interface GTLRBigquery_ErrorProto : GTLRObject

/**
 *  Debugging information. This property is internal to Google and should not be
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *debugInfo;

/** Specifies where the error occurred, if present. */
@property(nonatomic, copy, nullable) NSString *location;

/** A human-readable description of the error. */
@property(nonatomic, copy, nullable) NSString *message;

/** A short error code that summarizes the error. */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Evaluation metrics of a model. These are either computed on all training
 *  data or just the eval data based on whether eval data was used during
 *  training. These are not present for imported models.
 */
@interface GTLRBigquery_EvaluationMetrics : GTLRObject

/** Populated for ARIMA models. */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaForecastingMetrics *arimaForecastingMetrics;

/** Populated for binary classification/classifier models. */
@property(nonatomic, strong, nullable) GTLRBigquery_BinaryClassificationMetrics *binaryClassificationMetrics;

/** Populated for clustering models. */
@property(nonatomic, strong, nullable) GTLRBigquery_ClusteringMetrics *clusteringMetrics;

/**
 *  Evaluation metrics when the model is a dimensionality reduction model, which
 *  currently includes PCA.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DimensionalityReductionMetrics *dimensionalityReductionMetrics;

/** Populated for multi-class classification/classifier models. */
@property(nonatomic, strong, nullable) GTLRBigquery_MultiClassClassificationMetrics *multiClassClassificationMetrics;

/** Populated for implicit feedback type matrix factorization models. */
@property(nonatomic, strong, nullable) GTLRBigquery_RankingMetrics *rankingMetrics;

/**
 *  Populated for regression models and explicit feedback type matrix
 *  factorization models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RegressionMetrics *regressionMetrics;

@end


/**
 *  GTLRBigquery_ExplainQueryStage
 */
@interface GTLRBigquery_ExplainQueryStage : GTLRObject

/**
 *  Number of parallel input segments completed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedParallelInputs;

/**
 *  Milliseconds the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsAvg;

/**
 *  Milliseconds the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsMax;

/**
 *  Relative amount of time the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioMax;

/**
 *  Stage end time represented as milliseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endMs;

/**
 *  Unique ID for stage within plan.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  IDs for stages that are inputs to this stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *inputStages;

/** Human-readable name for stage. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Number of parallel input segments to be processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelInputs;

/**
 *  Milliseconds the average shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsAvg;

/**
 *  Milliseconds the slowest shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsMax;

/**
 *  Relative amount of time the average shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioAvg;

/**
 *  Relative amount of time the slowest shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioMax;

/**
 *  Number of records read into the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsRead;

/**
 *  Number of records written by the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsWritten;

/**
 *  Total number of bytes written to shuffle.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytes;

/**
 *  Total number of bytes written to shuffle and spilled to disk.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytesSpilled;

/**
 *  Slot-milliseconds used by the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

/**
 *  Stage start time represented as milliseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startMs;

/** Current status for the stage. */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  List of operations within the stage in dependency order (approximately
 *  chronological).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStep *> *steps;

/**
 *  Milliseconds the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsAvg;

/**
 *  Milliseconds the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsMax;

/**
 *  Relative amount of time the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioAvg;

/**
 *  Relative amount of time the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioMax;

/**
 *  Milliseconds the average shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsAvg;

/**
 *  Milliseconds the slowest shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsMax;

/**
 *  Relative amount of time the average shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioMax;

@end


/**
 *  GTLRBigquery_ExplainQueryStep
 */
@interface GTLRBigquery_ExplainQueryStep : GTLRObject

/** Machine-readable operation type. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Human-readable stage descriptions. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *substeps;

@end


/**
 *  Explanation for a single feature.
 */
@interface GTLRBigquery_Explanation : GTLRObject

/**
 *  Attribution of feature.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attribution;

/**
 *  The full feature name. For non-numerical features, will be formatted like
 *  `.`. Overall size of feature name will always be truncated to first 120
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *featureName;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRBigquery_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRBigquery_ExternalDataConfiguration
 */
@interface GTLRBigquery_ExternalDataConfiguration : GTLRObject

/**
 *  Try to detect schema and format options automatically. Any option specified
 *  explicitly will be honored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/** Additional properties to set if sourceFormat is set to Avro. */
@property(nonatomic, strong, nullable) GTLRBigquery_AvroOptions *avroOptions;

/** [Optional] Additional options if sourceFormat is set to BIGTABLE. */
@property(nonatomic, strong, nullable) GTLRBigquery_BigtableOptions *bigtableOptions;

/**
 *  [Optional] The compression type of the data source. Possible values include
 *  GZIP and NONE. The default value is NONE. This setting is ignored for Google
 *  Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/** [Optional, Trusted Tester] Connection for external data source. */
@property(nonatomic, copy, nullable) NSString *connectionId;

/** Additional properties to set if sourceFormat is set to CSV. */
@property(nonatomic, strong, nullable) GTLRBigquery_CsvOptions *csvOptions;

/**
 *  [Optional] Defines the list of possible SQL data types to which the source
 *  decimal values are converted. This list and the precision and the scale
 *  parameters of the decimal field determine the target type. In the order of
 *  NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified
 *  list and if it supports the precision and the scale. STRING supports all
 *  precision and scale values. If none of the listed types supports the
 *  precision and the scale, the type supporting the widest range in the
 *  specified list is picked, and if a value exceeds the supported range when
 *  reading the data, an error will be thrown. Example: Suppose the value of
 *  this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) ->
 *  NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits);
 *  (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) ->
 *  BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range).
 *  This field cannot contain duplicate types. The order of the types in this
 *  field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as
 *  ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over
 *  BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for
 *  the other file formats.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *decimalTargetTypes;

/** [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS. */
@property(nonatomic, strong, nullable) GTLRBigquery_GoogleSheetsOptions *googleSheetsOptions;

/** [Optional] Options to configure hive partitioning support. */
@property(nonatomic, strong, nullable) GTLRBigquery_HivePartitioningOptions *hivePartitioningOptions;

/**
 *  [Optional] Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names Google Cloud Bigtable: This setting is
 *  ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This
 *  setting is ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  [Optional] The maximum number of bad records that BigQuery can ignore when
 *  reading data. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. This is only valid for CSV, JSON, and
 *  Google Sheets. The default value is 0, which requires that all records are
 *  valid. This setting is ignored for Google Cloud Bigtable, Google Cloud
 *  Datastore backups and Avro formats.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  [Optional] Metadata Cache Mode for the table. Set this to enable caching of
 *  metadata from external data source.
 */
@property(nonatomic, copy, nullable) NSString *metadataCacheMode;

/**
 *  ObjectMetadata is used to create Object Tables. Object Tables contain a
 *  listing of objects (with their metadata) found at the source_uris. If
 *  ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is
 *  the only supported Object Metadata type.
 */
@property(nonatomic, copy, nullable) NSString *objectMetadata;

/** Additional properties to set if sourceFormat is set to Parquet. */
@property(nonatomic, strong, nullable) GTLRBigquery_ParquetOptions *parquetOptions;

/**
 *  [Optional] Provide a referencing file with the expected table schema.
 *  Enabled for the format: AVRO, PARQUET, ORC.
 */
@property(nonatomic, copy, nullable) NSString *referenceFileSchemaUri;

/**
 *  [Optional] The schema for the data. Schema is required for CSV and JSON
 *  formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore
 *  backups, and Avro formats.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Required] The data format. For CSV files, specify "CSV". For Google sheets,
 *  specify "GOOGLE_SHEETS". For newline-delimited JSON, specify
 *  "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud
 *  Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud
 *  Bigtable, specify "BIGTABLE".
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups, exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

@end


/**
 *  Representative value of a single feature within the cluster.
 */
@interface GTLRBigquery_FeatureValue : GTLRObject

/** The categorical feature value. */
@property(nonatomic, strong, nullable) GTLRBigquery_CategoricalValue *categoricalValue;

/** The feature column name. */
@property(nonatomic, copy, nullable) NSString *featureColumn;

/**
 *  The numerical feature value. This is the centroid value for this feature.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numericalValue;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRBigquery_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRBigquery_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  GTLRBigquery_GetQueryResultsResponse
 */
@interface GTLRBigquery_GetQueryResultsResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  [Output-only] The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/** A hash of this response. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Reference to the BigQuery Job that was created to run the query. This field
 *  will be present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  [Output-only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** A token used for paging results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above. Present only
 *  when the query completes successfully.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  The total number of bytes processed for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results. Present only when
 *  the query completes successfully.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_GetServiceAccountResponse
 */
@interface GTLRBigquery_GetServiceAccountResponse : GTLRObject

/** The service account email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Global explanations containing the top most important features after
 *  training.
 */
@interface GTLRBigquery_GlobalExplanation : GTLRObject

/**
 *  Class label for this set of global explanations. Will be empty/null for
 *  binary logistic and linear regression models. Sorted alphabetically in
 *  descending order.
 */
@property(nonatomic, copy, nullable) NSString *classLabel;

/**
 *  A list of the top global explanations. Sorted by absolute value of
 *  attribution in descending order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Explanation *> *explanations;

@end


/**
 *  GTLRBigquery_GoogleSheetsOptions
 */
@interface GTLRBigquery_GoogleSheetsOptions : GTLRObject

/**
 *  [Optional] Range of a sheet to query from. Only used when non-empty. Typical
 *  format: sheet_name!top_left_cell_id:bottom_right_cell_id For example:
 *  sheet1!A1:B20
 */
@property(nonatomic, copy, nullable) NSString *range;

/**
 *  [Optional] The number of rows at the top of a sheet that BigQuery will skip
 *  when reading the data. The default value is 0. This property is useful if
 *  you have header rows that should be skipped. When autodetect is on, behavior
 *  is the following: * skipLeadingRows unspecified - Autodetect tries to detect
 *  headers in the first row. If they are not detected, the row is read as data.
 *  Otherwise data is read starting from the second row. * skipLeadingRows is 0
 *  - Instructs autodetect that there are no headers and data should be read
 *  starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips
 *  N-1 rows and tries to detect headers in row N. If headers are not detected,
 *  row N is just skipped. Otherwise row N is used to extract column names for
 *  the detected schema.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  GTLRBigquery_HivePartitioningOptions
 */
@interface GTLRBigquery_HivePartitioningOptions : GTLRObject

/**
 *  [Optional] When set, what mode of hive partitioning to use when reading
 *  data. The following modes are supported. (1) AUTO: automatically infer
 *  partition key name(s) and type(s). (2) STRINGS: automatically infer
 *  partition key name(s). All types are interpreted as strings. (3) CUSTOM:
 *  partition key schema is encoded in the source URI prefix. Not all storage
 *  formats support hive partitioning. Requesting hive partitioning on an
 *  unsupported format will lead to an error. Currently supported types include:
 *  AVRO, CSV, JSON, ORC and Parquet.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  [Optional] If set to true, queries over this table require a partition
 *  filter that can be used for partition elimination to be specified. Note that
 *  this field should only be true when creating a permanent external table or
 *  querying a temporary external table. Hive-partitioned loads with
 *  requirePartitionFilter explicitly set to true will fail.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/**
 *  [Optional] When hive partition detection is requested, a common prefix for
 *  all source uris should be supplied. The prefix must end immediately before
 *  the partition key encoding begins. For example, consider files following
 *  this data layout.
 *  gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro
 *  gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive
 *  partitioning is requested with either AUTO or STRINGS detection, the common
 *  prefix can be either of gs://bucket/path_to_table or
 *  gs://bucket/path_to_table/ (trailing slash does not matter).
 */
@property(nonatomic, copy, nullable) NSString *sourceUriPrefix;

@end


/**
 *  Hyperparameter search spaces. These should be a subset of training_options.
 */
@interface GTLRBigquery_HparamSearchSpaces : GTLRObject

/** Activation functions of neural network models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *activationFn;

/** Mini batch sample size. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *batchSize;

/** Booster type for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *boosterType;

/** Subsample ratio of columns for each level for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBylevel;

/**
 *  Subsample ratio of columns for each node(split) for boosted tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBynode;

/**
 *  Subsample ratio of columns when constructing each tree for boosted tree
 *  models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *colsampleBytree;

/** Dart normalization type for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *dartNormalizeType;

/**
 *  Dropout probability for dnn model training and boosted tree models using
 *  dart booster.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *dropout;

/** Hidden units for neural network models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntArrayHparamSearchSpace *hiddenUnits;

/** L1 regularization coefficient. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *l1Reg;

/** L2 regularization coefficient. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *l2Reg;

/** Learning rate of training jobs. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *learnRate;

/** Maximum depth of a tree for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *maxTreeDepth;

/** Minimum split loss for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *minSplitLoss;

/**
 *  Minimum sum of instance weight needed in a child for boosted tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *minTreeChildWeight;

/** Number of clusters for k-means. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numClusters;

/** Number of latent factors to train on. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numFactors;

/** Number of parallel trees for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntHparamSearchSpace *numParallelTree;

/** Optimizer of TF models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *optimizer;

/**
 *  Subsample the training data to grow tree to prevent overfitting for boosted
 *  tree models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *subsample;

/** Tree construction algorithm for boosted tree models. */
@property(nonatomic, strong, nullable) GTLRBigquery_StringHparamSearchSpace *treeMethod;

/**
 *  Hyperparameter for matrix factoration when implicit feedback type is
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DoubleHparamSearchSpace *walsAlpha;

@end


/**
 *  Training info of a trial in [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models.
 */
@interface GTLRBigquery_HparamTuningTrial : GTLRObject

/**
 *  Ending time of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTimeMs;

/** Error message for FAILED and INFEASIBLE trial. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Loss computed on the eval data at the end of trial.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  Evaluation metrics of this trial calculated on the test data. Empty in Job
 *  API.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *evaluationMetrics;

/** The hyperprameters selected for this trial. */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions *hparams;

/**
 *  Hyperparameter tuning evaluation metrics of this trial calculated on the
 *  eval data. Unlike evaluation_metrics, only the fields corresponding to the
 *  hparam_tuning_objectives are set.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *hparamTuningEvaluationMetrics;

/**
 *  Starting time of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimeMs;

/**
 *  The status of the trial.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Failed The trial failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Infeasible The trial is
 *        infeasible due to the invalid params. (Value: "INFEASIBLE")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_NotStarted Scheduled but
 *        not started. (Value: "NOT_STARTED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Running Running state.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_StoppedEarly Trial stopped
 *        early because it's not promising. (Value: "STOPPED_EARLY")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_Succeeded The trial
 *        succeeded. (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigquery_HparamTuningTrial_Status_TrialStatusUnspecified
 *        Value "TRIAL_STATUS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Loss computed on the training data at the end of trial.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

/**
 *  1-based index of the trial.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trialId;

@end


/**
 *  GTLRBigquery_IndexUnusedReason
 */
@interface GTLRBigquery_IndexUnusedReason : GTLRObject

/**
 *  [Output-only] Specifies the base table involved in the reason that no search
 *  index was used.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTable;

/**
 *  [Output-only] Specifies the high-level reason for the scenario when no
 *  search index was used.
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  [Output-only] Specifies the name of the unused search index, if available.
 */
@property(nonatomic, copy, nullable) NSString *indexName;

/**
 *  [Output-only] Free form human-readable reason for the scenario when no
 *  search index was used.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  An array of int.
 */
@interface GTLRBigquery_IntArray : GTLRObject

/**
 *  Elements in the int array.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *elements;

@end


/**
 *  Search space for int array.
 */
@interface GTLRBigquery_IntArrayHparamSearchSpace : GTLRObject

/** Candidates for the int array parameter. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IntArray *> *candidates;

@end


/**
 *  Discrete candidates of an int hyperparameter.
 */
@interface GTLRBigquery_IntCandidates : GTLRObject

/**
 *  Candidates for the int parameter in increasing order.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *candidates;

@end


/**
 *  Search space for an int hyperparameter.
 */
@interface GTLRBigquery_IntHparamSearchSpace : GTLRObject

/** Candidates of the int hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntCandidates *candidates;

/** Range of the int hyperparameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_IntRange *range;

@end


/**
 *  Range of an int hyperparameter.
 */
@interface GTLRBigquery_IntRange : GTLRObject

/**
 *  Max value of the int parameter.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  Min value of the int parameter.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

@end


/**
 *  GTLRBigquery_IterationResult
 */
@interface GTLRBigquery_IterationResult : GTLRObject

/**
 *  Time taken to run the iteration in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  Loss computed on the eval data at the end of iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  Index of the iteration, 0 based.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  Learn rate used for this iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  Loss computed on the training data at the end of iteration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

@end


/**
 *  GTLRBigquery_Job
 */
@interface GTLRBigquery_Job : GTLRObject

/** [Required] Describes the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** [Output-only] A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  [Output-only] Opaque ID field of the job
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** [Optional] Reference describing the unique-per-user name of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** [Output-only] The type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/** [Output-only] A URL that can be used to access this resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output-only] Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/**
 *  [Output-only] The status of this job. Examine this value when polling an
 *  asynchronous job to see if the job is complete.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** [Output-only] Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  GTLRBigquery_JobCancelResponse
 */
@interface GTLRBigquery_JobCancelResponse : GTLRObject

/** The final state of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_Job *job;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_JobConfiguration
 */
@interface GTLRBigquery_JobConfiguration : GTLRObject

/**
 *  [Pick one] Copies a table.
 *
 *  Remapped to 'copyProperty' to avoid NSObject's 'copy'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationTableCopy *copyProperty NS_RETURNS_NOT_RETAINED;

/**
 *  [Optional] If set, don't actually run this job. A valid query will return a
 *  mostly empty response with some processing statistics, while an invalid
 *  query will return the same error it would if it wasn't a dry run. Behavior
 *  of non-query jobs is undefined.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** [Pick one] Configures an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationExtract *extract;

/**
 *  [Optional] Job timeout in milliseconds. If this time limit is exceeded,
 *  BigQuery may attempt to terminate the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobTimeoutMs;

/**
 *  [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or
 *  UNKNOWN.
 */
@property(nonatomic, copy, nullable) NSString *jobType;

/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration_Labels *labels;

/** [Pick one] Configures a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationLoad *load;

/** [Pick one] Configures a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery *query;

@end


/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_JobConfiguration_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_JobConfigurationExtract
 */
@interface GTLRBigquery_JobConfigurationExtract : GTLRObject

/**
 *  [Optional] The compression type to use for exported files. Possible values
 *  include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE
 *  and SNAPPY are only supported for Avro. Not applicable when extracting
 *  models.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/**
 *  [Optional] The exported file format. Possible values include CSV,
 *  NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or
 *  ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables
 *  with nested or repeated fields cannot be exported as CSV. The default value
 *  for models is ML_TF_SAVED_MODEL.
 */
@property(nonatomic, copy, nullable) NSString *destinationFormat;

/**
 *  [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as
 *  necessary. The fully-qualified Google Cloud Storage URI where the extracted
 *  table should be written.
 */
@property(nonatomic, copy, nullable) NSString *destinationUri;

/**
 *  [Pick one] A list of fully-qualified Google Cloud Storage URIs where the
 *  extracted table should be written.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinationUris;

/**
 *  [Optional] Delimiter to use between fields in the exported data. Default is
 *  ','. Not applicable when extracting models.
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  [Optional] Whether to print out a header row in the results. Default is
 *  true. Not applicable when extracting models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *printHeader;

/** A reference to the model being exported. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelReference *sourceModel;

/** A reference to the table being exported. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

/**
 *  [Optional] If destinationFormat is set to "AVRO", this flag indicates
 *  whether to enable extracting applicable column types (such as TIMESTAMP) to
 *  their corresponding AVRO logical types (timestamp-micros), instead of only
 *  using their raw types (avro-long). Not applicable when extracting models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

@end


/**
 *  GTLRBigquery_JobConfigurationLoad
 */
@interface GTLRBigquery_JobConfigurationLoad : GTLRObject

/**
 *  [Optional] Accept rows that are missing trailing optional columns. The
 *  missing values are treated as nulls. If false, records with missing trailing
 *  columns are treated as bad records, and if there are too many bad records,
 *  an invalid error is returned in the job result. The default value is false.
 *  Only applicable to CSV, ignored for other formats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  Indicates if BigQuery should allow quoted data sections that contain newline
 *  characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  [Optional] Indicates if we should automatically infer the options and schema
 *  for CSV and JSON sources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/**
 *  [Beta] Clustering specification for the destination table. Must be specified
 *  with time-based partitioning, data in the table will be first partitioned
 *  and subsequently clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/** Connection properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/**
 *  If true, creates a new session, where session id will be a server generated
 *  random id. If false, runs query with an existing session_id passed in
 *  ConnectionProperty, otherwise runs the load job in non-session mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  [Optional] Defines the list of possible SQL data types to which the source
 *  decimal values are converted. This list and the precision and the scale
 *  parameters of the decimal field determine the target type. In the order of
 *  NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified
 *  list and if it supports the precision and the scale. STRING supports all
 *  precision and scale values. If none of the listed types supports the
 *  precision and the scale, the type supporting the widest range in the
 *  specified list is picked, and if a value exceeds the supported range when
 *  reading the data, an error will be thrown. Example: Suppose the value of
 *  this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) ->
 *  NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits);
 *  (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) ->
 *  BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range).
 *  This field cannot contain duplicate types. The order of the types in this
 *  field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as
 *  ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over
 *  BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for
 *  the other file formats.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *decimalTargetTypes;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/** [Required] The destination table to load the data into. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  [Beta] [Optional] Properties with which to create the destination table if
 *  it is new.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DestinationTableProperties *destinationTableProperties;

/**
 *  [Optional] The character encoding of the data. The supported values are
 *  UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data
 *  after the raw, binary data has been split using the values of the quote and
 *  fieldDelimiter properties.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] The separator for fields in a CSV file. The separator can be any
 *  ISO-8859-1 single-byte character. To use a character in the range 128-255,
 *  you must encode the character as UTF8. BigQuery converts the string to
 *  ISO-8859-1 encoding, and then uses the first byte of the encoded string to
 *  split the data in its raw, binary state. BigQuery also supports the escape
 *  sequence "\\t" to specify a tab separator. The default value is a comma
 *  (',').
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/** [Optional] Options to configure hive partitioning support. */
@property(nonatomic, strong, nullable) GTLRBigquery_HivePartitioningOptions *hivePartitioningOptions;

/**
 *  [Optional] Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  [Optional] If sourceFormat is set to newline-delimited JSON, indicates
 *  whether it should be processed as a JSON variant such as GeoJSON. For a
 *  sourceFormat other than JSON, omit this field. If the sourceFormat is
 *  newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
 */
@property(nonatomic, copy, nullable) NSString *jsonExtension;

/**
 *  [Optional] The maximum number of bad records that BigQuery can ignore when
 *  running the job. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. This is only valid for CSV and JSON.
 *  The default value is 0, which requires that all records are valid.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  [Optional] Specifies a string that represents a null value in a CSV file.
 *  For example, if you specify "\\N", BigQuery interprets "\\N" as a null value
 *  when loading a CSV file. The default value is the empty string. If you set
 *  this property to a custom value, BigQuery throws an error if an empty string
 *  is present for all data types except for STRING and BYTE. For STRING and
 *  BYTE columns, BigQuery interprets the empty string as an empty value.
 */
@property(nonatomic, copy, nullable) NSString *nullMarker;

/** [Optional] Options to configure parquet support. */
@property(nonatomic, strong, nullable) GTLRBigquery_ParquetOptions *parquetOptions;

/**
 *  [Optional] Preserves the embedded ASCII control characters (the first 32
 *  characters in the ASCII-table, from '\\x00' to '\\x1F') when loading from
 *  CSV. Only applicable to CSV, ignored for other formats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveAsciiControlCharacters;

/**
 *  If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity
 *  properties to load into BigQuery from a Cloud Datastore backup. Property
 *  names are case sensitive and must be top-level properties. If no properties
 *  are specified, BigQuery loads all properties. If any named property isn't
 *  found in the Cloud Datastore backup, an invalid error is returned in the job
 *  result.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectionFields;

/**
 *  [Optional] The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ('"'). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  User provided referencing file with the expected reader schema, Available
 *  for the format: AVRO, PARQUET, ORC.
 */
@property(nonatomic, copy, nullable) NSString *referenceFileSchemaUri;

/**
 *  [Optional] The schema for the destination table. The schema can be omitted
 *  if the destination table already exists, or if you're loading data from
 *  Google Cloud Datastore.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Deprecated] The inline schema. For CSV schemas, specify as
 *  "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER,
 *  baz:FLOAT".
 */
@property(nonatomic, copy, nullable) NSString *schemaInline;

/** [Deprecated] The format of the schemaInline property. */
@property(nonatomic, copy, nullable) NSString *schemaInlineFormat;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the load job if a schema is autodetected or supplied in the job
 *  configuration. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified:
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/**
 *  [Optional] The number of rows at the top of a CSV file that BigQuery will
 *  skip when loading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

/**
 *  [Optional] The format of the data files. For CSV files, specify "CSV". For
 *  datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON,
 *  specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet,
 *  specify "PARQUET". For orc, specify "ORC". The default value is CSV.
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups: Exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret
 *  logical types as the corresponding BigQuery data type (for example,
 *  TIMESTAMP), instead of using the raw type (for example, INTEGER).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data. WRITE_APPEND: If the
 *  table already exists, BigQuery appends the data to the table. WRITE_EMPTY:
 *  If the table already exists and contains data, a 'duplicate' error is
 *  returned in the job result. The default value is WRITE_APPEND. Each action
 *  is atomic and only occurs if BigQuery is able to complete the job
 *  successfully. Creation, truncation and append actions occur as one atomic
 *  update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  GTLRBigquery_JobConfigurationQuery
 */
@interface GTLRBigquery_JobConfigurationQuery : GTLRObject

/**
 *  [Optional] If true and query uses legacy SQL dialect, allows the query to
 *  produce arbitrarily large result tables at a slight cost in performance.
 *  Requires destinationTable to be set. For standard SQL queries, this flag is
 *  ignored and large results are always allowed. However, you must still set
 *  destinationTable when result size exceeds the allowed maximum response size.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowLargeResults;

/**
 *  [Beta] Clustering specification for the destination table. Must be specified
 *  with time-based partitioning, data in the table will be first partitioned
 *  and subsequently clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/** Connection properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/**
 *  If true, creates a new session, where session id will be a server generated
 *  random id. If false, runs query with an existing session_id passed in
 *  ConnectionProperty, otherwise runs query in non-session mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  [Optional] Specifies the default dataset to use for unqualified table names
 *  in the query. Note that this does not alter behavior of unqualified dataset
 *  names.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/**
 *  [Optional] Describes the table where the query results should be stored. If
 *  not present, a new table will be created to store the results. This property
 *  must be set for large results that exceed the maximum response size.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  [Optional] If true and query uses legacy SQL dialect, flattens all nested
 *  and repeated fields in the query results. allowLargeResults must be true if
 *  this is set to false. For standard SQL queries, this flag is ignored and
 *  results are never flattened.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flattenResults;

/**
 *  [Optional] Limits the billing tier for this job. Queries that have resource
 *  usage beyond this tier will fail (without incurring a charge). If
 *  unspecified, this will be set to your project default.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBillingTier;

/**
 *  [Optional] Limits the bytes billed for this job. Queries that will have
 *  bytes billed beyond this limit will fail (without incurring a charge). If
 *  unspecified, this will be set to your project default.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBytesBilled;

/**
 *  Standard SQL only. Set to POSITIONAL to use positional (?) query parameters
 *  or to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  [Deprecated] This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls;

/**
 *  [Optional] Specifies a priority for the query. Possible values include
 *  INTERACTIVE and BATCH. The default value is INTERACTIVE.
 */
@property(nonatomic, copy, nullable) NSString *priority;

/**
 *  [Required] SQL query text to execute. The useLegacySql field can be used to
 *  indicate whether the query uses legacy SQL or standard SQL.
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for standard SQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the query job. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified:
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/**
 *  [Optional] If querying an external data source outside of BigQuery,
 *  describes the data format, location and other properties of the data source.
 *  By defining these properties, the data source can then be queried as if it
 *  were a standard BigQuery table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery_TableDefinitions *tableDefinitions;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  Specifies whether to use BigQuery's legacy SQL dialect for this query. The
 *  default value is true. If set to false, the query will use BigQuery's
 *  standard SQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  [Optional] Whether to look for the result in the query cache. The query
 *  cache is a best-effort cache that will be flushed whenever tables in the
 *  query are modified. Moreover, the query cache is only available when a query
 *  does not have a destination table specified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data and uses the schema from
 *  the query result. WRITE_APPEND: If the table already exists, BigQuery
 *  appends the data to the table. WRITE_EMPTY: If the table already exists and
 *  contains data, a 'duplicate' error is returned in the job result. The
 *  default value is WRITE_EMPTY. Each action is atomic and only occurs if
 *  BigQuery is able to complete the job successfully. Creation, truncation and
 *  append actions occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  [Optional] If querying an external data source outside of BigQuery,
 *  describes the data format, location and other properties of the data source.
 *  By defining these properties, the data source can then be queried as if it
 *  were a standard BigQuery table.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_ExternalDataConfiguration. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JobConfigurationQuery_TableDefinitions : GTLRObject
@end


/**
 *  GTLRBigquery_JobConfigurationTableCopy
 */
@interface GTLRBigquery_JobConfigurationTableCopy : GTLRObject

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/**
 *  [Optional] The time when the destination table expires. Expired tables will
 *  be deleted and their storage reclaimed.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id destinationExpirationTime;

/** [Required] The destination table */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/** [Optional] Supported operation types in table copy job. */
@property(nonatomic, copy, nullable) NSString *operationType;

/** [Pick one] Source table to copy. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

/** [Pick one] Source tables to copy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *sourceTables;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data. WRITE_APPEND: If the
 *  table already exists, BigQuery appends the data to the table. WRITE_EMPTY:
 *  If the table already exists and contains data, a 'duplicate' error is
 *  returned in the job result. The default value is WRITE_EMPTY. Each action is
 *  atomic and only occurs if BigQuery is able to complete the job successfully.
 *  Creation, truncation and append actions occur as one atomic update upon job
 *  completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  GTLRBigquery_JobList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_JobList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  List of jobs that were requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobList_Jobs_Item *> *jobs;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRBigquery_JobList_Jobs_Item
 */
@interface GTLRBigquery_JobList_Jobs_Item : GTLRObject

/** [Full-projection-only] Specifies the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** A result object that will be present only if the job has failed. */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  Unique opaque ID of the job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Job reference uniquely identifying the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Running state of the job. When the state is DONE, errorResult can be checked
 *  to determine whether the job succeeded or failed.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  [Output-only] Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/** [Full-projection-only] Describes the state of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** [Full-projection-only] Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  GTLRBigquery_JobReference
 */
@interface GTLRBigquery_JobReference : GTLRObject

/**
 *  [Required] The ID of the job. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  The geographic location of the job. See details at
 *  https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** [Required] The ID of the project containing this job. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_JobStatistics
 */
@interface GTLRBigquery_JobStatistics : GTLRObject

/**
 *  [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT
 *  jobs.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completionRatio;

/**
 *  [Output-only] Statistics for a copy job.
 *
 *  Remapped to 'copyProperty' to avoid NSObject's 'copy'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics5 *copyProperty NS_RETURNS_NOT_RETAINED;

/**
 *  [Output-only] Creation time of this job, in milliseconds since the epoch.
 *  This field will be present on all jobs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  [Output-only] Statistics for data masking. Present only for query and
 *  extract jobs.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DataMaskingStatistics *dataMaskingStatistics;

/**
 *  [Output-only] End time of this job, in milliseconds since the epoch. This
 *  field will be present whenever a job is in the DONE state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTime;

/** [Output-only] Statistics for an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics4 *extract;

/** [Output-only] Statistics for a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics3 *load;

/**
 *  [Output-only] Number of child jobs executed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numChildJobs;

/** [Output-only] If this is a child job, the id of the parent. */
@property(nonatomic, copy, nullable) NSString *parentJobId;

/** [Output-only] Statistics for a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics2 *query;

/** [Output-only] Quotas which delayed this job's start time. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *quotaDeferments;

/**
 *  [Output-only] Name of the primary reservation assigned to this job. Note
 *  that this could be different than reservations reported in the reservation
 *  usage field if parent reservations were used to execute this job.
 */
@property(nonatomic, copy, nullable) NSString *reservationId;

/** [Output-only] Job resource usage breakdown by reservation. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics_ReservationUsage_Item *> *reservationUsage;

/**
 *  [Output-only] [Preview] Statistics for row-level security. Present only for
 *  query and extract jobs.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RowLevelSecurityStatistics *rowLevelSecurityStatistics;

/** [Output-only] Statistics for a child job of a script. */
@property(nonatomic, strong, nullable) GTLRBigquery_ScriptStatistics *scriptStatistics;

/**
 *  [Output-only] [Preview] Information of the session if this job is part of
 *  one.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SessionInfo *sessionInfo;

/**
 *  [Output-only] Start time of this job, in milliseconds since the epoch. This
 *  field will be present when the job transitions from the PENDING state to
 *  either RUNNING or DONE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTime;

/**
 *  [Output-only] [Deprecated] Use the bytes processed in the query statistics
 *  instead.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  [Output-only] Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

/**
 *  [Output-only] [Alpha] Information of the multi-statement transaction if this
 *  job is part of one.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TransactionInfo *transactionInfo;

@end


/**
 *  GTLRBigquery_JobStatistics_ReservationUsage_Item
 */
@interface GTLRBigquery_JobStatistics_ReservationUsage_Item : GTLRObject

/**
 *  [Output-only] Reservation name or "unreserved" for on-demand resources
 *  usage.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output-only] Slot-milliseconds the job spent in the given reservation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  GTLRBigquery_JobStatistics2
 */
@interface GTLRBigquery_JobStatistics2 : GTLRObject

/**
 *  BI Engine specific Statistics. [Output only] BI Engine specific Statistics.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_BiEngineStatistics *biEngineStatistics;

/**
 *  [Output only] Billing tier for the job.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *billingTier;

/**
 *  [Output only] Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  [Output only] [Preview] The number of row access policies affected by a DDL
 *  statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ddlAffectedRowAccessPolicyCount;

/**
 *  [Output only] The DDL destination table. Present only for ALTER TABLE RENAME
 *  TO queries. Note that ddl_target_table is used just for its type
 *  information.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *ddlDestinationTable;

/**
 *  The DDL operation performed, possibly dependent on the pre-existence of the
 *  DDL target. Possible values (new values might be added in the future):
 *  "CREATE": The query created the DDL target. "SKIP": No-op. Example cases:
 *  the query is CREATE TABLE IF NOT EXISTS while the table already exists, or
 *  the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE":
 *  The query replaced the DDL target. Example case: the query is CREATE OR
 *  REPLACE TABLE, and the table already exists. "DROP": The query deleted the
 *  DDL target.
 */
@property(nonatomic, copy, nullable) NSString *ddlOperationPerformed;

/**
 *  [Output only] The DDL target dataset. Present only for CREATE/ALTER/DROP
 *  SCHEMA queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *ddlTargetDataset;

/**
 *  The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE
 *  queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *ddlTargetRoutine;

/**
 *  [Output only] [Preview] The DDL target row access policy. Present only for
 *  CREATE/DROP ROW ACCESS POLICY queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RowAccessPolicyReference *ddlTargetRowAccessPolicy;

/**
 *  [Output only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW
 *  and DROP ALL ROW ACCESS POLICIES queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *ddlTargetTable;

/**
 *  [Output only] Detailed statistics for DML statements Present only for DML
 *  statements INSERT, UPDATE, DELETE or TRUNCATE.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DmlStatistics *dmlStats;

/**
 *  [Output only] The original estimate of bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytesProcessed;

/** [Output only] Statistics of a BigQuery ML training job. */
@property(nonatomic, strong, nullable) GTLRBigquery_MlStatistics *mlStatistics;

/** [Output only, Beta] Information about create model query job progress. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelTraining *modelTraining;

/**
 *  [Output only, Beta] Deprecated; do not use.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingCurrentIteration;

/**
 *  [Output only, Beta] Deprecated; do not use.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingExpectedTotalIteration;

/**
 *  [Output only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** [Output only] Describes execution plan for the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStage *> *queryPlan;

/**
 *  [Output only] Referenced routines (persistent user-defined functions and
 *  stored procedures) for the job.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_RoutineReference *> *referencedRoutines;

/**
 *  [Output only] Referenced tables for the job. Queries that reference more
 *  than 50 tables will not have a complete list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *referencedTables;

/** [Output only] Job resource usage breakdown by reservation. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics2_ReservationUsage_Item *> *reservationUsage;

/**
 *  [Output only] The schema of the results. Present only for successful dry run
 *  of non-legacy SQL queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** [Output only] Search query specific statistics. */
@property(nonatomic, strong, nullable) GTLRBigquery_SearchStatistics *searchStatistics;

/** [Output only] Statistics of a Spark procedure job. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkStatistics *sparkStatistics;

/**
 *  The type of query statement, if valid. Possible values (new values might be
 *  added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "UPDATE": UPDATE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "DELETE": DELETE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "MERGE": MERGE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT":
 *  ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query.
 *  "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... .
 *  "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR
 *  REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR
 *  REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW
 *  ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE":
 *  DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW
 *  query.
 */
@property(nonatomic, copy, nullable) NSString *statementType;

/** [Output only] [Beta] Describes a timeline of job execution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryTimelineSample *> *timeline;

/**
 *  [Output only] Total bytes billed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesBilled;

/**
 *  [Output only] Total bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this
 *  field specifies the accuracy of the estimate. Possible values can be:
 *  UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise.
 *  LOWER_BOUND: estimate is lower bound of what the query would cost.
 *  UPPER_BOUND: estimate is upper bound of what the query would cost.
 */
@property(nonatomic, copy, nullable) NSString *totalBytesProcessedAccuracy;

/**
 *  [Output only] Total number of partitions processed from all partitioned
 *  tables referenced in the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalPartitionsProcessed;

/**
 *  [Output only] Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

/**
 *  [Output-only] Total bytes transferred for cross-cloud queries such as Cross
 *  Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transferredBytes;

/**
 *  Standard SQL only: list of undeclared query parameters detected during a dry
 *  run validation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *undeclaredQueryParameters;

@end


/**
 *  GTLRBigquery_JobStatistics2_ReservationUsage_Item
 */
@interface GTLRBigquery_JobStatistics2_ReservationUsage_Item : GTLRObject

/**
 *  [Output only] Reservation name or "unreserved" for on-demand resources
 *  usage.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output only] Slot-milliseconds the job spent in the given reservation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  GTLRBigquery_JobStatistics3
 */
@interface GTLRBigquery_JobStatistics3 : GTLRObject

/**
 *  [Output-only] The number of bad records encountered. Note that if the job
 *  has failed because of more bad records encountered than the maximum allowed
 *  in the load job configuration, then this number can be less than the total
 *  number of bad records present in the input data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *badRecords;

/**
 *  [Output-only] Number of bytes of source data in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFileBytes;

/**
 *  [Output-only] Number of source files in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFiles;

/**
 *  [Output-only] Size of the loaded data in bytes. Note that while a load job
 *  is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputBytes;

/**
 *  [Output-only] Number of rows imported in a load job. Note that while an
 *  import job is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputRows;

@end


/**
 *  GTLRBigquery_JobStatistics4
 */
@interface GTLRBigquery_JobStatistics4 : GTLRObject

/**
 *  [Output-only] Number of files per destination URI or URI pattern specified
 *  in the extract configuration. These values will be in the same order as the
 *  URIs specified in the 'destinationUris' field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *destinationUriFileCounts;

/**
 *  [Output-only] Number of user bytes extracted into the result. This is the
 *  byte count as computed by BigQuery for billing purposes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputBytes;

@end


/**
 *  GTLRBigquery_JobStatistics5
 */
@interface GTLRBigquery_JobStatistics5 : GTLRObject

/**
 *  [Output-only] Number of logical bytes copied to the destination table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copiedLogicalBytes;

/**
 *  [Output-only] Number of rows copied to the destination table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copiedRows;

@end


/**
 *  GTLRBigquery_JobStatus
 */
@interface GTLRBigquery_JobStatus : GTLRObject

/**
 *  [Output-only] Final error result of the job. If present, indicates that the
 *  job has completed and was unsuccessful.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  [Output-only] The first errors encountered during the running of the job.
 *  The final message includes the number of errors that caused the process to
 *  stop. Errors here do not necessarily mean that the job has completed or was
 *  unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/** [Output-only] Running state of the job. */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Represents a single JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JsonObject : GTLRObject
@end


/**
 *  GTLRBigquery_ListModelsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "models" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ListModelsResponse : GTLRCollectionObject

/**
 *  Models in the requested dataset. Only the following fields are populated:
 *  model_reference, model_type, creation_time, last_modified_time and labels.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Model *> *models;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRBigquery_ListRoutinesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "routines" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ListRoutinesResponse : GTLRCollectionObject

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Routines in the requested dataset. Unless read_mask is set in the request,
 *  only the following fields are populated: etag, project_id, dataset_id,
 *  routine_id, routine_type, creation_time, last_modified_time, and language.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Routine *> *routines;

@end


/**
 *  Response message for the ListRowAccessPolicies method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rowAccessPolicies" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRBigquery_ListRowAccessPoliciesResponse : GTLRCollectionObject

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Row access policies on the requested table.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_RowAccessPolicy *> *rowAccessPolicies;

@end


/**
 *  BigQuery-specific metadata about a location. This will be set on
 *  google.cloud.location.Location.metadata in Cloud Location API responses.
 */
@interface GTLRBigquery_LocationMetadata : GTLRObject

/**
 *  The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This
 *  is for any API consumers that need the legacy “US” and “EU” locations.
 */
@property(nonatomic, copy, nullable) NSString *legacyLocationId;

@end


/**
 *  GTLRBigquery_MaterializedViewDefinition
 */
@interface GTLRBigquery_MaterializedViewDefinition : GTLRObject

/**
 *  [Optional] [TrustedTester] Enable automatic refresh of the materialized view
 *  when the base table is updated. The default value is "true".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableRefresh;

/**
 *  [Output-only] [TrustedTester] The time when this materialized view was last
 *  modified, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastRefreshTime;

/**
 *  [Optional] Max staleness of data that could be returned when materizlized
 *  view is queried (formatted as Google SQL Interval type).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *maxStaleness;

/** [Required] A query whose result is persisted. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  [Optional] [TrustedTester] The maximum frequency at which this materialized
 *  view will be refreshed. The default value is "1800000" (30 minutes).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *refreshIntervalMs;

@end


/**
 *  GTLRBigquery_MlStatistics
 */
@interface GTLRBigquery_MlStatistics : GTLRObject

/** Results for all completed iterations. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IterationResult *> *iterationResults;

/**
 *  Maximum number of iterations specified as max_iterations in the 'CREATE
 *  MODEL' query. The actual number of iterations may be less than this number
 *  due to early stop.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIterations;

@end


/**
 *  GTLRBigquery_Model
 */
@interface GTLRBigquery_Model : GTLRObject

/**
 *  The best trial_id across all training runs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bestTrialId;

/**
 *  Output only. The time when this model was created, in millisecs since the
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Output only. The default trial_id to use in TVFs when the trial_id is not
 *  passed in. For single-objective [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, this is the best trial ID. For multi-objective [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, this is the smallest trial ID among all Pareto optimal trials.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultTrialId;

/**
 *  Optional. A user-friendly description of this model.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Custom encryption configuration (e.g., Cloud KMS keys). This shows the
 *  encryption configuration of the model data while stored in BigQuery storage.
 *  This field can be used with PatchModel to update encryption key for an
 *  already encrypted model.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *encryptionConfiguration;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The time when this model expires, in milliseconds since the epoch.
 *  If not present, the model will persist indefinitely. Expired models will be
 *  deleted and their storage reclaimed. The defaultTableExpirationMs property
 *  of the encapsulating dataset can be used to set a default expirationTime on
 *  newly created models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/** Output only. Input feature columns that were used to train this model. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *featureColumns;

/** Optional. A descriptive name for this model. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/** Output only. All hyperparameter search spaces in this model. */
@property(nonatomic, strong, nullable) GTLRBigquery_HparamSearchSpaces *hparamSearchSpaces;

/**
 *  Output only. Trials of a [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  model sorted by trial_id.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_HparamTuningTrial *> *hparamTrials;

/**
 *  Output only. Label columns that were used to train this model. The output of
 *  the model will have a "predicted_" prefix to these columns.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *labelColumns;

/**
 *  The labels associated with this model. You can use these to organize and
 *  group your models. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Model_Labels *labels;

/**
 *  Output only. The time when this model was last modified, in millisecs since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  Output only. The geographic location where the model resides. This value is
 *  inherited from the dataset.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. Unique identifier for this model. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelReference *modelReference;

/**
 *  Output only. Type of the model resource.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Model_ModelType_Arima ARIMA model. (Value: "ARIMA")
 *    @arg @c kGTLRBigquery_Model_ModelType_ArimaPlus New name for the ARIMA
 *        model. (Value: "ARIMA_PLUS")
 *    @arg @c kGTLRBigquery_Model_ModelType_Autoencoder Autoencoder model.
 *        (Value: "AUTOENCODER")
 *    @arg @c kGTLRBigquery_Model_ModelType_AutomlClassifier AutoML Tables
 *        classification model. (Value: "AUTOML_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_AutomlRegressor AutoML Tables
 *        regression model. (Value: "AUTOML_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_BoostedTreeClassifier Boosted tree
 *        classifier model. (Value: "BOOSTED_TREE_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_BoostedTreeRegressor Boosted tree
 *        regressor model. (Value: "BOOSTED_TREE_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnClassifier DNN classifier model.
 *        (Value: "DNN_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnLinearCombinedClassifier
 *        Wide-and-deep classifier model. (Value:
 *        "DNN_LINEAR_COMBINED_CLASSIFIER")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnLinearCombinedRegressor
 *        Wide-and-deep regressor model. (Value:
 *        "DNN_LINEAR_COMBINED_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_DnnRegressor DNN regressor model.
 *        (Value: "DNN_REGRESSOR")
 *    @arg @c kGTLRBigquery_Model_ModelType_Kmeans K-means clustering model.
 *        (Value: "KMEANS")
 *    @arg @c kGTLRBigquery_Model_ModelType_LinearRegression Linear regression
 *        model. (Value: "LINEAR_REGRESSION")
 *    @arg @c kGTLRBigquery_Model_ModelType_LogisticRegression Logistic
 *        regression based classification model. (Value: "LOGISTIC_REGRESSION")
 *    @arg @c kGTLRBigquery_Model_ModelType_MatrixFactorization Matrix
 *        factorization model. (Value: "MATRIX_FACTORIZATION")
 *    @arg @c kGTLRBigquery_Model_ModelType_ModelTypeUnspecified Value
 *        "MODEL_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_Model_ModelType_Pca Prinpical Component Analysis
 *        model. (Value: "PCA")
 *    @arg @c kGTLRBigquery_Model_ModelType_Tensorflow An imported TensorFlow
 *        model. (Value: "TENSORFLOW")
 */
@property(nonatomic, copy, nullable) NSString *modelType;

/**
 *  Output only. For single-objective [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, it only contains the best trial. For multi-objective [hyperparameter
 *  tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
 *  models, it contains all Pareto optimal trials sorted by trial_id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *optimalTrialIds;

/** Information for all training runs in increasing order of start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TrainingRun *> *trainingRuns;

@end


/**
 *  The labels associated with this model. You can use these to organize and
 *  group your models. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Model_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_ModelDefinition
 */
@interface GTLRBigquery_ModelDefinition : GTLRObject

/**
 *  [Output-only, Beta] Model options used for the first training run. These
 *  options are immutable for subsequent training runs. Default values are used
 *  for any options not specified in the input query.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition_ModelOptions *modelOptions;

/**
 *  [Output-only, Beta] Information about ml training runs, each training run
 *  comprises of multiple iterations and there may be multiple training runs for
 *  the model if warm start is used or if a user decides to continue a
 *  previously cancelled query.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BqmlTrainingRun *> *trainingRuns;

@end


/**
 *  [Output-only, Beta] Model options used for the first training run. These
 *  options are immutable for subsequent training runs. Default values are used
 *  for any options not specified in the input query.
 */
@interface GTLRBigquery_ModelDefinition_ModelOptions : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *labels;
@property(nonatomic, copy, nullable) NSString *lossType;
@property(nonatomic, copy, nullable) NSString *modelType;

@end


/**
 *  GTLRBigquery_ModelReference
 */
@interface GTLRBigquery_ModelReference : GTLRObject

/** [Required] The ID of the dataset containing this model. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  [Required] The ID of the model. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *modelId;

/** [Required] The ID of the project containing this model. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_ModelTraining
 */
@interface GTLRBigquery_ModelTraining : GTLRObject

/**
 *  [Output-only, Beta] Index of current ML training iteration. Updated during
 *  create model query job to show job progress.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentIteration;

/**
 *  [Output-only, Beta] Expected number of iterations for the create model query
 *  job specified as num_iterations in the input query. The actual total number
 *  of iterations may be less than this number due to early stop.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedTotalIterations;

@end


/**
 *  Evaluation metrics for multi-class classification/classifier models.
 */
@interface GTLRBigquery_MultiClassClassificationMetrics : GTLRObject

/** Aggregate classification metrics. */
@property(nonatomic, strong, nullable) GTLRBigquery_AggregateClassificationMetrics *aggregateClassificationMetrics;

/** Confusion matrix at different thresholds. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConfusionMatrix *> *confusionMatrixList;

@end


/**
 *  GTLRBigquery_ParquetOptions
 */
@interface GTLRBigquery_ParquetOptions : GTLRObject

/**
 *  [Optional] Indicates whether to use schema inference specifically for
 *  Parquet LIST logical type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableListInference;

/**
 *  [Optional] Indicates whether to infer Parquet ENUM logical type as STRING
 *  instead of BYTES by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enumAsString;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRBigquery_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Principal component infos, used only for eigen decomposition based models,
 *  e.g., PCA. Ordered by explained_variance in the descending order.
 */
@interface GTLRBigquery_PrincipalComponentInfo : GTLRObject

/**
 *  The explained_variance is pre-ordered in the descending order to compute the
 *  cumulative explained variance ratio.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cumulativeExplainedVarianceRatio;

/**
 *  Explained variance by this principal component, which is simply the
 *  eigenvalue.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *explainedVariance;

/**
 *  Explained_variance over the total explained variance.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *explainedVarianceRatio;

/**
 *  Id of the principal component.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *principalComponentId;

@end


/**
 *  GTLRBigquery_ProjectList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "projects" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ProjectList : GTLRCollectionObject

/** A hash of the page of results */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of list. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Projects to which you have at least READ access.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ProjectList_Projects_Item *> *projects;

/**
 *  The total number of projects in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  GTLRBigquery_ProjectList_Projects_Item
 */
@interface GTLRBigquery_ProjectList_Projects_Item : GTLRObject

/** A descriptive name for this project. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of this project.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The numeric ID of this project.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numericId;

/** A unique reference to this project. */
@property(nonatomic, strong, nullable) GTLRBigquery_ProjectReference *projectReference;

@end


/**
 *  GTLRBigquery_ProjectReference
 */
@interface GTLRBigquery_ProjectReference : GTLRObject

/**
 *  [Required] ID of the project. Can be either the numeric ID or the assigned
 *  ID of the project.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_QueryParameter
 */
@interface GTLRBigquery_QueryParameter : GTLRObject

/**
 *  [Optional] If unset, this is a positional parameter. Otherwise, should be
 *  unique within a query.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** [Required] The type of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *parameterType;

/** [Required] The value of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue *parameterValue;

@end


/**
 *  GTLRBigquery_QueryParameterType
 */
@interface GTLRBigquery_QueryParameterType : GTLRObject

/** [Optional] The type of the array's elements, if this is an array. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *arrayType;

/**
 *  [Optional] The types of the fields of this struct, in order, if this is a
 *  struct.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterType_StructTypes_Item *> *structTypes;

/** [Required] The top level type of this field. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_QueryParameterType_StructTypes_Item
 */
@interface GTLRBigquery_QueryParameterType_StructTypes_Item : GTLRObject

/**
 *  [Optional] Human-oriented description of the field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** [Optional] The name of this field. */
@property(nonatomic, copy, nullable) NSString *name;

/** [Required] The type of this field. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *type;

@end


/**
 *  GTLRBigquery_QueryParameterValue
 */
@interface GTLRBigquery_QueryParameterValue : GTLRObject

/** [Optional] The array values, if this is an array type. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterValue *> *arrayValues;

/**
 *  [Optional] The struct field values, in order of the struct type's
 *  declaration.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue_StructValues *structValues;

/** [Optional] The value of this value, if a simple scalar type. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  [Optional] The struct field values, in order of the struct type's
 *  declaration.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_QueryParameterValue. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_QueryParameterValue_StructValues : GTLRObject
@end


/**
 *  GTLRBigquery_QueryRequest
 */
@interface GTLRBigquery_QueryRequest : GTLRObject

/** Connection properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ConnectionProperty *> *connectionProperties;

/**
 *  If true, creates a new session, where session id will be a server generated
 *  random id. If false, runs query with an existing session_id passed in
 *  ConnectionProperty, otherwise runs query in non-session mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createSession;

/**
 *  [Optional] Specifies the default datasetId and projectId to assume for any
 *  unqualified table names in the query. If not set, all table names in the
 *  query string must be qualified in the format 'datasetId.tableId'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/**
 *  [Optional] If set to true, BigQuery doesn't run the job. Instead, if the
 *  query is valid, BigQuery returns statistics about the job such as how many
 *  bytes would be processed. If the query is invalid, an error returns. The
 *  default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** The resource type of the request. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryRequest_Labels *labels;

/**
 *  The geographic location where the job should run. See details at
 *  https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  [Optional] Limits the bytes billed for this job. Queries that will have
 *  bytes billed beyond this limit will fail (without incurring a charge). If
 *  unspecified, this will be set to your project default.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBytesBilled;

/**
 *  [Optional] The maximum number of rows of data to return per page of results.
 *  Setting this flag to a small value such as 1000 and then paging through
 *  results might improve reliability when the query result set is large. In
 *  addition to this limit, responses are also limited to 10 MB. By default,
 *  there is no maximum row count, and only the byte limit applies.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResults;

/**
 *  Standard SQL only. Set to POSITIONAL to use positional (?) query parameters
 *  or to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  [Deprecated] This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls;

/**
 *  [Required] A query string, following the BigQuery query syntax, of the query
 *  to execute. Example: "SELECT count(f1) FROM
 *  [myProjectId:myDatasetId.myTableId]".
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for Standard SQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  A unique user provided identifier to ensure idempotent behavior for queries.
 *  Note that this is different from the job_id. It has the following
 *  properties: 1. It is case-sensitive, limited to up to 36 ASCII characters. A
 *  UUID is recommended. 2. Read only queries can ignore this token since they
 *  are nullipotent by definition. 3. For the purposes of idempotency ensured by
 *  the request_id, a request is considered duplicate of another only if they
 *  have the same request_id and are actually duplicates. When determining
 *  whether a request is a duplicate of the previous request, all parameters in
 *  the request that may affect the behavior are considered. For example, query,
 *  connection_properties, query_parameters, use_legacy_sql are parameters that
 *  affect the result and are considered when determining whether a request is a
 *  duplicate, but properties like timeout_ms don't affect the result and are
 *  thus not considered. Dry run query requests are never considered duplicate
 *  of another request. 4. When a duplicate mutating query request is detected,
 *  it returns: a. the results of the mutation if it completes successfully
 *  within the timeout. b. the running operation if it is still in progress at
 *  the end of the timeout. 5. Its lifetime is limited to 15 minutes. In other
 *  words, if two requests are sent with the same request_id, but more than 15
 *  minutes apart, idempotency is not guaranteed.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  [Optional] How long to wait for the query to complete, in milliseconds,
 *  before the request times out and returns. Note that this is only a timeout
 *  for the request, not the query. If the query takes longer to run than the
 *  timeout value, the call returns without any results and with the
 *  'jobComplete' flag set to false. You can call GetQueryResults() to wait for
 *  the query to complete and read the results. The default value is 10000
 *  milliseconds (10 seconds).
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeoutMs;

/**
 *  Specifies whether to use BigQuery's legacy SQL dialect for this query. The
 *  default value is true. If set to false, the query will use BigQuery's
 *  standard SQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  [Optional] Whether to look for the result in the query cache. The query
 *  cache is a best-effort cache that will be flushed whenever tables in the
 *  query are modified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

@end


/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_QueryRequest_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_QueryResponse
 */
@interface GTLRBigquery_QueryResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  [Output-only] Detailed statistics for DML statements Present only for DML
 *  statements INSERT, UPDATE, DELETE or TRUNCATE.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DmlStatistics *dmlStats;

/**
 *  [Output-only] The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Reference to the Job that was created to run the query. This field will be
 *  present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  [Output-only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** A token used for paging results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Output-only] [Preview] Information of the session if this job is part of
 *  one.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SessionInfo *sessionInfo;

/**
 *  The total number of bytes processed for this query. If this query was a dry
 *  run, this is the number of bytes that would be processed if the query were
 *  run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_QueryTimelineSample
 */
@interface GTLRBigquery_QueryTimelineSample : GTLRObject

/**
 *  Total number of units currently being processed by workers. This does not
 *  correspond directly to slot usage. This is the largest value observed since
 *  the last sample.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeUnits;

/**
 *  Total parallel units of work completed by this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedUnits;

/**
 *  Milliseconds elapsed since the start of query execution.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *elapsedMs;

/**
 *  Units of work that can be scheduled immediately. Providing additional slots
 *  for these units of work will speed up the query, provided no other query in
 *  the reservation needs additional slots.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedRunnableUnits;

/**
 *  Total units of work remaining for the query. This number can be revised
 *  (increased or decreased) while the query is running.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingUnits;

/**
 *  Cumulative slot-ms consumed by the query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

@end


/**
 *  GTLRBigquery_RangePartitioning
 */
@interface GTLRBigquery_RangePartitioning : GTLRObject

/**
 *  [TrustedTester] [Required] The table is partitioned by this field. The field
 *  must be a top-level NULLABLE/REQUIRED field. The only supported type is
 *  INTEGER/INT64.
 */
@property(nonatomic, copy, nullable) NSString *field;

/** [TrustedTester] [Required] Defines the ranges for range partitioning. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning_Range *range;

@end


/**
 *  [TrustedTester] [Required] Defines the ranges for range partitioning.
 */
@interface GTLRBigquery_RangePartitioning_Range : GTLRObject

/**
 *  [TrustedTester] [Required] The end of range partitioning, exclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  [TrustedTester] [Required] The width of each interval.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interval;

/**
 *  [TrustedTester] [Required] The start of range partitioning, inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Evaluation metrics used by weighted-ALS models specified by
 *  feedback_type=implicit.
 */
@interface GTLRBigquery_RankingMetrics : GTLRObject

/**
 *  Determines the goodness of a ranking by computing the percentile rank from
 *  the predicted confidence and dividing it by the original rank.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageRank;

/**
 *  Calculates a precision per user for all the items by ranking them and then
 *  averages all the precisions across all the users.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAveragePrecision;

/**
 *  Similar to the mean squared error computed in regression and explicit
 *  recommendation models except instead of computing the rating directly, the
 *  output from evaluate is computed against a preference which is 1 or 0
 *  depending on if the rating exists or not.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredError;

/**
 *  A metric to determine the goodness of a ranking calculated from the
 *  predicted confidence by comparing it to an ideal rank measured by the
 *  original ratings.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *normalizedDiscountedCumulativeGain;

@end


/**
 *  Evaluation metrics for regression and explicit feedback type matrix
 *  factorization models.
 */
@interface GTLRBigquery_RegressionMetrics : GTLRObject

/**
 *  Mean absolute error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsoluteError;

/**
 *  Mean squared error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredError;

/**
 *  Mean squared log error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredLogError;

/**
 *  Median absolute error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *medianAbsoluteError;

/**
 *  R^2 score. This corresponds to r2_score in ML.EVALUATE.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rSquared;

@end


/**
 *  Options for a remote user-defined function.
 */
@interface GTLRBigquery_RemoteFunctionOptions : GTLRObject

/**
 *  Fully qualified name of the user-provided connection object which holds the
 *  authentication information to send requests to the remote service. Format:
 *  ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
 */
@property(nonatomic, copy, nullable) NSString *connection;

/**
 *  Endpoint of the user-provided remote service, e.g.
 *  ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
 */
@property(nonatomic, copy, nullable) NSString *endpoint;

/**
 *  Max number of rows in each batch sent to the remote service. If absent or if
 *  0, BigQuery dynamically decides the number of rows in a batch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBatchingRows;

/**
 *  User-defined context as a set of key/value pairs, which will be sent as
 *  function invocation context together with batched arguments in the requests
 *  to the remote service. The total number of bytes of keys and values must be
 *  less than 8KB.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RemoteFunctionOptions_UserDefinedContext *userDefinedContext;

@end


/**
 *  User-defined context as a set of key/value pairs, which will be sent as
 *  function invocation context together with batched arguments in the requests
 *  to the remote service. The total number of bytes of keys and values must be
 *  less than 8KB.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_RemoteFunctionOptions_UserDefinedContext : GTLRObject
@end


/**
 *  A user-defined function or a stored procedure.
 */
@interface GTLRBigquery_Routine : GTLRObject

/** Optional. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Argument *> *arguments;

/**
 *  Output only. The time when this routine was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  Required. The body of the routine. For functions, this is the expression in
 *  the AS clause. If language=SQL, it is the substring inside (but excluding)
 *  the parentheses. For example, for the function created with the following
 *  statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x,
 *  "\\n", y))` The definition_body is `concat(x, "\\n", y)` (\\n is not
 *  replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string
 *  in the AS clause. For example, for the function created with the following
 *  statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return
 *  "\\n";\\n'` The definition_body is `return "\\n";\\n` Note that both \\n are
 *  replaced with linebreaks.
 */
@property(nonatomic, copy, nullable) NSString *definitionBody;

/**
 *  Optional. The description of the routine, if defined.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. The determinism level of the JavaScript UDF, if defined.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_DeterminismLevelUnspecified
 *        The determinism of the UDF is unspecified. (Value:
 *        "DETERMINISM_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_Deterministic The UDF is
 *        deterministic, meaning that 2 function calls with the same inputs
 *        always produce the same result, even across 2 query runs. (Value:
 *        "DETERMINISTIC")
 *    @arg @c kGTLRBigquery_Routine_DeterminismLevel_NotDeterministic The UDF is
 *        not deterministic. (Value: "NOT_DETERMINISTIC")
 */
@property(nonatomic, copy, nullable) NSString *determinismLevel;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If language = "JAVASCRIPT", this field stores the path of the
 *  imported JAVASCRIPT libraries.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *importedLibraries;

/**
 *  Optional. Defaults to "SQL".
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_Language_Javascript JavaScript language.
 *        (Value: "JAVASCRIPT")
 *    @arg @c kGTLRBigquery_Routine_Language_LanguageUnspecified Value
 *        "LANGUAGE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_Routine_Language_Python Python language. (Value:
 *        "PYTHON")
 *    @arg @c kGTLRBigquery_Routine_Language_Sql SQL language. (Value: "SQL")
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Output only. The time when this routine was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/** Optional. Remote function specific options. */
@property(nonatomic, strong, nullable) GTLRBigquery_RemoteFunctionOptions *remoteFunctionOptions;

/**
 *  Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION". If
 *  absent, the return table type is inferred from definition_body at query time
 *  in each query that references this routine. If present, then the columns in
 *  the evaluated table result will be cast to match the column types specificed
 *  in return table type, at query time.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlTableType *returnTableType;

/**
 *  Optional if language = "SQL"; required otherwise. Cannot be set if
 *  routine_type = "TABLE_VALUED_FUNCTION". If absent, the return type is
 *  inferred from definition_body at query time in each query that references
 *  this routine. If present, then the evaluated result will be cast to the
 *  specified returned type at query time. For example, for the functions
 *  created with the following statements: * `CREATE FUNCTION Add(x FLOAT64, y
 *  FLOAT64) RETURNS FLOAT64 AS (x + y);` * `CREATE FUNCTION Increment(x
 *  FLOAT64) AS (Add(x, 1));` * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS
 *  FLOAT64 AS (Add(x, -1));` The return_type is `{type_kind: "FLOAT64"}` for
 *  `Add` and `Decrement`, and is absent for `Increment` (inferred as FLOAT64 at
 *  query time). Suppose the function `Add` is replaced by `CREATE OR REPLACE
 *  FUNCTION Add(x INT64, y INT64) AS (x + y);` Then the inferred return type of
 *  `Increment` is automatically changed to INT64 at query time, while the
 *  return type of `Decrement` remains FLOAT64.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *returnType;

/** Required. Reference describing the ID of this routine. */
@property(nonatomic, strong, nullable) GTLRBigquery_RoutineReference *routineReference;

/**
 *  Required. The type of routine.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_Routine_RoutineType_Procedure Stored procedure.
 *        (Value: "PROCEDURE")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_RoutineTypeUnspecified Value
 *        "ROUTINE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_Routine_RoutineType_ScalarFunction Non-builtin
 *        permanent scalar function. (Value: "SCALAR_FUNCTION")
 *    @arg @c kGTLRBigquery_Routine_RoutineType_TableValuedFunction Non-builtin
 *        permanent TVF. (Value: "TABLE_VALUED_FUNCTION")
 */
@property(nonatomic, copy, nullable) NSString *routineType;

/** Optional. Spark specific options. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkOptions *sparkOptions;

/**
 *  Optional. Can be set for procedures only. If true (default), the definition
 *  body will be validated in the creation and the updates of the procedure. For
 *  procedures with an argument of ANY TYPE, the definition body validtion is
 *  not supported at creation/update time, and thus this field must be set to
 *  false explicitly.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strictMode;

@end


/**
 *  GTLRBigquery_RoutineReference
 */
@interface GTLRBigquery_RoutineReference : GTLRObject

/** [Required] The ID of the dataset containing this routine. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** [Required] The ID of the project containing this routine. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  [Required] The ID of the routine. The ID must contain only letters (a-z,
 *  A-Z), numbers (0-9), or underscores (_). The maximum length is 256
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *routineId;

@end


/**
 *  A single row in the confusion matrix.
 */
@interface GTLRBigquery_Row : GTLRObject

/** The original label of this row. */
@property(nonatomic, copy, nullable) NSString *actualLabel;

/** Info describing predicted label distribution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Entry *> *entries;

@end


/**
 *  Represents access on a subset of rows on the specified table, defined by its
 *  filter predicate. Access to the subset of rows is controlled by its IAM
 *  policy.
 */
@interface GTLRBigquery_RowAccessPolicy : GTLRObject

/**
 *  Output only. The time when this row access policy was created, in
 *  milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/** Output only. A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. A SQL boolean expression that represents the rows defined by this
 *  row access policy, similar to the boolean expression in a WHERE clause of a
 *  SELECT query on a table. References to other tables, routines, and temporary
 *  functions are not supported. Examples: region="EU" date_field =
 *  CAST('2019-9-27' as DATE) nullable_field is not NULL numeric_field BETWEEN
 *  1.0 AND 5.0
 */
@property(nonatomic, copy, nullable) NSString *filterPredicate;

/**
 *  Output only. The time when this row access policy was last modified, in
 *  milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedTime;

/** Required. Reference describing the ID of this row access policy. */
@property(nonatomic, strong, nullable) GTLRBigquery_RowAccessPolicyReference *rowAccessPolicyReference;

@end


/**
 *  GTLRBigquery_RowAccessPolicyReference
 */
@interface GTLRBigquery_RowAccessPolicyReference : GTLRObject

/** [Required] The ID of the dataset containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  [Required] The ID of the row access policy. The ID must contain only letters
 *  (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *policyId;

/** [Required] The ID of the project containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** [Required] The ID of the table containing this row access policy. */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  GTLRBigquery_RowLevelSecurityStatistics
 */
@interface GTLRBigquery_RowLevelSecurityStatistics : GTLRObject

/**
 *  [Output-only] [Preview] Whether any accessed data was protected by row
 *  access policies.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowLevelSecurityApplied;

@end


/**
 *  GTLRBigquery_ScriptStackFrame
 */
@interface GTLRBigquery_ScriptStackFrame : GTLRObject

/**
 *  [Output-only] One-based end column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endColumn;

/**
 *  [Output-only] One-based end line.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endLine;

/**
 *  [Output-only] Name of the active procedure, empty if in a top-level script.
 */
@property(nonatomic, copy, nullable) NSString *procedureId;

/**
 *  [Output-only] One-based start column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startColumn;

/**
 *  [Output-only] One-based start line.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startLine;

/** [Output-only] Text of the current statement/expression. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  GTLRBigquery_ScriptStatistics
 */
@interface GTLRBigquery_ScriptStatistics : GTLRObject

/** [Output-only] Whether this child job was a statement or expression. */
@property(nonatomic, copy, nullable) NSString *evaluationKind;

/**
 *  Stack trace showing the line/column/procedure name of each frame on the
 *  stack at the point where the current evaluation happened. The leaf frame is
 *  first, the primary script is last. Never empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ScriptStackFrame *> *stackFrames;

@end


/**
 *  GTLRBigquery_SearchStatistics
 */
@interface GTLRBigquery_SearchStatistics : GTLRObject

/**
 *  When index_usage_mode is UNUSED or PARTIALLY_USED, this field explains why
 *  index was not used in all or part of the search query. If index_usage_mode
 *  is FULLLY_USED, this field is not populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IndexUnusedReason *> *indexUnusedReason;

/** Specifies index usage mode for the query. */
@property(nonatomic, copy, nullable) NSString *indexUsageMode;

@end


/**
 *  GTLRBigquery_SessionInfo
 */
@interface GTLRBigquery_SessionInfo : GTLRObject

/** [Output-only] // [Preview] Id of the session. */
@property(nonatomic, copy, nullable) NSString *sessionId;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRBigquery_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  GTLRBigquery_SnapshotDefinition
 */
@interface GTLRBigquery_SnapshotDefinition : GTLRObject

/** [Required] Reference describing the ID of the table that was snapshot. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *baseTableReference;

/**
 *  [Required] The time at which the base table was snapshot. This value is
 *  reported in the JSON response using RFC3339 format.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *snapshotTime;

@end


/**
 *  GTLRBigquery_SparkLoggingInfo
 */
@interface GTLRBigquery_SparkLoggingInfo : GTLRObject

/** [Output-only] Project ID used for logging */
@property(nonatomic, copy, nullable) NSString *projectId;

/** [Output-only] Resource type used for logging */
@property(nonatomic, copy, nullable) NSString *resourceType;

@end


/**
 *  Options for a user-defined Spark routine.
 */
@interface GTLRBigquery_SparkOptions : GTLRObject

/**
 *  Archive files to be extracted into the working directory of each executor.
 *  For more information about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *archiveUris;

/**
 *  Fully qualified name of the user-provided Spark connection object. Format:
 *  ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
 */
@property(nonatomic, copy, nullable) NSString *connection;

/** Custom container image for the runtime environment. */
@property(nonatomic, copy, nullable) NSString *containerImage;

/**
 *  Files to be placed in the working directory of each executor. For more
 *  information about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileUris;

/**
 *  JARs to include on the driver and executor CLASSPATH. For more information
 *  about Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jarUris;

/**
 *  The main file URI of the Spark application. Exactly one of the
 *  definition_body field and the main_file_uri field must be set.
 */
@property(nonatomic, copy, nullable) NSString *mainFileUri;

/**
 *  Configuration properties as a set of key/value pairs, which will be passed
 *  on to the Spark application. For more information, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkOptions_Properties *properties;

/**
 *  Python files to be placed on the PYTHONPATH for PySpark application.
 *  Supported file types: `.py`, `.egg`, and `.zip`. For more information about
 *  Apache Spark, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pyFileUris;

/** Runtime version. If not specified, the default runtime version is used. */
@property(nonatomic, copy, nullable) NSString *runtimeVersion;

@end


/**
 *  Configuration properties as a set of key/value pairs, which will be passed
 *  on to the Spark application. For more information, see [Apache
 *  Spark](https://spark.apache.org/docs/latest/index.html).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_SparkOptions_Properties : GTLRObject
@end


/**
 *  GTLRBigquery_SparkStatistics
 */
@interface GTLRBigquery_SparkStatistics : GTLRObject

/** [Output-only] Endpoints generated for the Spark job. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkStatistics_Endpoints *endpoints;

/** [Output-only] Logging info is used to generate a link to Cloud Logging. */
@property(nonatomic, strong, nullable) GTLRBigquery_SparkLoggingInfo *loggingInfo;

/** [Output-only] Spark job id if a Spark job is created successfully. */
@property(nonatomic, copy, nullable) NSString *sparkJobId;

/** [Output-only] Location where the Spark job is executed. */
@property(nonatomic, copy, nullable) NSString *sparkJobLocation;

@end


/**
 *  [Output-only] Endpoints generated for the Spark job.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_SparkStatistics_Endpoints : GTLRObject
@end


/**
 *  The data type of a variable such as a function argument. Examples include: *
 *  INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY",
 *  "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind":
 *  "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind":
 *  "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY",
 *  "arrayElementType": {"typeKind": "DATE"} } } ] } }
 */
@interface GTLRBigquery_StandardSqlDataType : GTLRObject

/** The type of the array's elements, if type_kind = "ARRAY". */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *arrayElementType;

/** The fields of this struct, in order, if type_kind = "STRUCT". */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlStructType *structType;

/**
 *  Required. The top level type of this field. Can be any standard SQL data
 *  type (e.g., "INT64", "DATE", "ARRAY").
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Array Encoded as a list
 *        with types matching Type.array_type. (Value: "ARRAY")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bignumeric Encoded as a
 *        decimal string. (Value: "BIGNUMERIC")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bool Encoded as a
 *        boolean "false" or "true". (Value: "BOOL")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Bytes Encoded as a
 *        base64 string per RFC 4648, section 4. (Value: "BYTES")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Date Encoded as RFC
 *        3339 full-date format string: 1985-04-12 (Value: "DATE")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Datetime Encoded as RFC
 *        3339 full-date "T" partial-time: 1985-04-12T23:20:50.52 (Value:
 *        "DATETIME")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Float64 Encoded as a
 *        number, or string "NaN", "Infinity" or "-Infinity". (Value: "FLOAT64")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Geography Encoded as
 *        WKT (Value: "GEOGRAPHY")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Int64 Encoded as a
 *        string in decimal format. (Value: "INT64")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Interval Encoded as
 *        fully qualified 3 part: 0-5 15 2:30:45.6 (Value: "INTERVAL")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Json Encoded as a
 *        string. (Value: "JSON")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Numeric Encoded as a
 *        decimal string. (Value: "NUMERIC")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_String Encoded as a
 *        string value. (Value: "STRING")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Struct Encoded as a
 *        list with fields of type Type.struct_type[i]. List is used because a
 *        JSON object cannot have duplicate field names. (Value: "STRUCT")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Time Encoded as RFC
 *        3339 partial-time format string: 23:20:50.52 (Value: "TIME")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_Timestamp Encoded as an
 *        RFC 3339 timestamp with mandatory "Z" time zone string:
 *        1985-04-12T23:20:50.52Z (Value: "TIMESTAMP")
 *    @arg @c kGTLRBigquery_StandardSqlDataType_TypeKind_TypeKindUnspecified
 *        Invalid type. (Value: "TYPE_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *typeKind;

@end


/**
 *  A field or a column.
 */
@interface GTLRBigquery_StandardSqlField : GTLRObject

/** Optional. The name of this field. Can be absent for struct fields. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The type of this parameter. Absent if not explicitly specified
 *  (e.g., CREATE FUNCTION statement can omit the return type; in this case the
 *  output parameter does not have this "type" field).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_StandardSqlDataType *type;

@end


/**
 *  GTLRBigquery_StandardSqlStructType
 */
@interface GTLRBigquery_StandardSqlStructType : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *fields;

@end


/**
 *  A table type
 */
@interface GTLRBigquery_StandardSqlTableType : GTLRObject

/** The columns in this table type */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_StandardSqlField *> *columns;

@end


/**
 *  GTLRBigquery_Streamingbuffer
 */
@interface GTLRBigquery_Streamingbuffer : GTLRObject

/**
 *  [Output-only] A lower-bound estimate of the number of bytes currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytes;

/**
 *  [Output-only] A lower-bound estimate of the number of rows currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedRows;

/**
 *  [Output-only] Contains the timestamp of the oldest entry in the streaming
 *  buffer, in milliseconds since the epoch, if the streaming buffer is
 *  available.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oldestEntryTime;

@end


/**
 *  Search space for string and enum.
 */
@interface GTLRBigquery_StringHparamSearchSpace : GTLRObject

/** Canididates for the string or enum parameter in lower case. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *candidates;

@end


/**
 *  GTLRBigquery_Table
 */
@interface GTLRBigquery_Table : GTLRObject

/** [Output-only] Clone definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_CloneDefinition *cloneDefinition;

/**
 *  [Beta] Clustering specification for the table. Must be specified with
 *  partitioning, data in the table will be first partitioned and subsequently
 *  clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  [Output-only] The time when this table was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** [Output-only] The default collation of the table. */
@property(nonatomic, copy, nullable) NSString *defaultCollation;

/**
 *  [Optional] A user-friendly description of this table.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *encryptionConfiguration;

/**
 *  [Output-only] A hash of the table metadata. Used to ensure there were no
 *  concurrent modifications to the resource when attempting an update. Not
 *  guaranteed to change when the table contents or the fields numRows,
 *  numBytes, numLongTermBytes or lastModifiedTime change.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  [Optional] The time when this table expires, in milliseconds since the
 *  epoch. If not present, the table will persist indefinitely. Expired tables
 *  will be deleted and their storage reclaimed. The defaultTableExpirationMs
 *  property of the encapsulating dataset can be used to set a default
 *  expirationTime on newly created tables.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/**
 *  [Optional] Describes the data format, location, and other properties of a
 *  table stored outside of BigQuery. By defining these properties, the data
 *  source can then be queried as if it were a standard BigQuery table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalDataConfiguration *externalDataConfiguration;

/** [Optional] A descriptive name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  [Output-only] An opaque ID uniquely identifying the table.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** [Output-only] The type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Table_Labels *labels;

/**
 *  [Output-only] The time when this table was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  [Output-only] The geographic location where the table resides. This value is
 *  inherited from the dataset.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** [Optional] Materialized view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_MaterializedViewDefinition *materializedView;

/**
 *  [Optional] Max staleness of data that could be returned when table or
 *  materialized view is queried (formatted as Google SQL Interval type).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *maxStaleness;

/**
 *  [Output-only, Beta] Present iff this table represents a ML model. Describes
 *  the training information for the model, and it is required to run 'PREDICT'
 *  queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition *model;

/**
 *  [Output-only] Number of logical bytes that are less than 90 days old.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numActiveLogicalBytes;

/**
 *  [Output-only] Number of physical bytes less than 90 days old. This data is
 *  not kept in real time, and might be delayed by a few seconds to a few
 *  minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numActivePhysicalBytes;

/**
 *  [Output-only] Number of logical bytes that are more than 90 days old.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermLogicalBytes;

/**
 *  [Output-only] Number of physical bytes more than 90 days old. This data is
 *  not kept in real time, and might be delayed by a few seconds to a few
 *  minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermPhysicalBytes;

/**
 *  [Output-only] The number of partitions present in the table or materialized
 *  view. This data is not kept in real time, and might be delayed by a few
 *  seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPartitions;

/**
 *  [Output-only] Number of physical bytes used by time travel storage (deleted
 *  or changed data). This data is not kept in real time, and might be delayed
 *  by a few seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTimeTravelPhysicalBytes;

/**
 *  [Output-only] Total number of logical bytes in the table or materialized
 *  view.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTotalLogicalBytes;

/**
 *  [Output-only] The physical size of this table in bytes. This also includes
 *  storage used for time travel. This data is not kept in real time, and might
 *  be delayed by a few seconds to a few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTotalPhysicalBytes;

/**
 *  [Output-only] The size of this table in bytes, excluding any data in the
 *  streaming buffer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numBytes;

/**
 *  [Output-only] The number of bytes in the table that are considered
 *  "long-term storage".
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermBytes;

/**
 *  [Output-only] [TrustedTester] The physical size of this table in bytes,
 *  excluding any data in the streaming buffer. This includes compression and
 *  storage used for time travel.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPhysicalBytes;

/**
 *  [Output-only] The number of rows of data in this table, excluding any data
 *  in the streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numRows;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  [Optional] If set to true, queries over this table require a partition
 *  filter that can be used for partition elimination to be specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/** [Optional] Describes the schema of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** [Output-only] A URL that can be used to access this resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** [Output-only] Snapshot definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_SnapshotDefinition *snapshotDefinition;

/**
 *  [Output-only] Contains information regarding this table's streaming buffer,
 *  if one is present. This field will be absent if the table is not being
 *  streamed to or if there is no data in the streaming buffer.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Streamingbuffer *streamingBuffer;

/** [Required] Reference describing the ID of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  Time-based partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  [Output-only] Describes the table type. The following values are supported:
 *  TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL
 *  query. SNAPSHOT: An immutable, read-only table that is a copy of another
 *  table. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is
 *  persisted. EXTERNAL: A table that references data stored in an external
 *  storage system, such as Google Cloud Storage. The default value is TABLE.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** [Optional] The view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_ViewDefinition *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Table_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_TableCell
 */
@interface GTLRBigquery_TableCell : GTLRObject

/**
 *  v
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id v;

@end


/**
 *  GTLRBigquery_TableDataInsertAllRequest
 */
@interface GTLRBigquery_TableDataInsertAllRequest : GTLRObject

/**
 *  [Optional] Accept rows that contain values that do not match the schema. The
 *  unknown values are ignored. Default is false, which treats unknown values as
 *  errors.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The rows to insert. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllRequest_Rows_Item *> *rows;

/**
 *  [Optional] Insert all valid rows of a request, even if invalid rows exist.
 *  The default value is false, which causes the entire request to fail if any
 *  invalid rows exist.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipInvalidRows;

/**
 *  If specified, treats the destination table as a base template, and inserts
 *  the rows into an instance table named "{destination}{templateSuffix}".
 *  BigQuery will manage creation of the instance table, using the schema of the
 *  base template table. See
 *  https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables
 *  for considerations when working with templates tables.
 */
@property(nonatomic, copy, nullable) NSString *templateSuffix;

@end


/**
 *  GTLRBigquery_TableDataInsertAllRequest_Rows_Item
 */
@interface GTLRBigquery_TableDataInsertAllRequest_Rows_Item : GTLRObject

/**
 *  [Optional] A unique ID for each row. BigQuery uses this property to detect
 *  duplicate insertion requests on a best-effort basis.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/**
 *  [Required] A JSON object that contains a row of data. The object's
 *  properties and values must match the destination table's schema.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JsonObject *json;

@end


/**
 *  GTLRBigquery_TableDataInsertAllResponse
 */
@interface GTLRBigquery_TableDataInsertAllResponse : GTLRObject

/** An array of errors for rows that were not inserted. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item *> *insertErrors;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item
 */
@interface GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item : GTLRObject

/** Error information for the row indicated by the index property. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  The index of the row that error applies to.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

@end


/**
 *  GTLRBigquery_TableDataList
 */
@interface GTLRBigquery_TableDataList : GTLRObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token used for paging results. Providing this token instead of the
 *  startIndex parameter can help you retrieve stable results when an underlying
 *  table is changing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Rows of results. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The total number of rows in the complete table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_TableFieldSchema
 */
@interface GTLRBigquery_TableFieldSchema : GTLRObject

/**
 *  [Optional] The categories attached to this field, used for field-level
 *  access control.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableFieldSchema_Categories *categories;

/**
 *  Optional. Collation specification of the field. It only can be set on string
 *  type field.
 */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  Optional. A SQL expression to specify the default value for this field. It
 *  can only be set for top level fields (columns). You can use struct or array
 *  expression to specify default value for the entire struct or array. The
 *  valid SQL expressions are: - Literals for all data types, including STRUCT
 *  and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME -
 *  CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER -
 *  ST_GEOGPOINT - Struct or array composed with the above allowed functions,
 *  for example, [CURRENT_DATE(), DATE '2020-01-01']
 */
@property(nonatomic, copy, nullable) NSString *defaultValueExpression;

/**
 *  [Optional] The field description. The maximum length is 1,024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  [Optional] Describes the nested schema fields if the type property is set to
 *  RECORD.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

/**
 *  [Optional] Maximum length of values of this field for STRINGS or BYTES. If
 *  max_length is not specified, no maximum length constraint is imposed on this
 *  field. If type = "STRING", then max_length represents the maximum UTF-8
 *  length of strings in this field. If type = "BYTES", then max_length
 *  represents the maximum number of bytes in this field. It is invalid to set
 *  this field if type ≠ "STRING" and ≠ "BYTES".
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLength;

/**
 *  [Optional] The field mode. Possible values include NULLABLE, REQUIRED and
 *  REPEATED. The default value is NULLABLE.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  [Required] The field name. The name must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_), and must start with a letter or
 *  underscore. The maximum length is 300 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRBigquery_TableFieldSchema_PolicyTags *policyTags;

/**
 *  [Optional] Precision (maximum number of total digits in base 10) and scale
 *  (maximum number of digits in the fractional part in base 10) constraints for
 *  values of this field for NUMERIC or BIGNUMERIC. It is invalid to set
 *  precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and
 *  scale are not specified, no value range constraint is imposed on this field
 *  insofar as values are permitted by the type. Values of this NUMERIC or
 *  BIGNUMERIC field must be in this range when: - Precision (P) and scale (S)
 *  are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified
 *  but not scale (and thus scale is interpreted to be equal to zero): [-10P +
 *  1, 10P - 1]. Acceptable values for precision and scale if both are
 *  specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤
 *  9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38.
 *  Acceptable values for precision if only precision is specified but not scale
 *  (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC":
 *  1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale
 *  is specified but not precision, then it is invalid.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  [Optional] See documentation for precision.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

/**
 *  [Required] The field data type. Possible values include STRING, BYTES,
 *  INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC,
 *  BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME,
 *  DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a
 *  nested schema) or STRUCT (same as RECORD).
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  [Optional] The categories attached to this field, used for field-level
 *  access control.
 */
@interface GTLRBigquery_TableFieldSchema_Categories : GTLRObject

/**
 *  A list of category resource names. For example,
 *  "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  GTLRBigquery_TableFieldSchema_PolicyTags
 */
@interface GTLRBigquery_TableFieldSchema_PolicyTags : GTLRObject

/**
 *  A list of category resource names. For example,
 *  "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  GTLRBigquery_TableList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tables" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_TableList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of list. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Tables in the requested dataset.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableList_Tables_Item *> *tables;

/**
 *  The total number of tables in the dataset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  GTLRBigquery_TableList_Tables_Item
 */
@interface GTLRBigquery_TableList_Tables_Item : GTLRObject

/** [Beta] Clustering specification for this table, if configured. */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  The time when this table was created, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  [Optional] The time when this table expires, in milliseconds since the
 *  epoch. If not present, the table will persist indefinitely. Expired tables
 *  will be deleted and their storage reclaimed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/** The user-friendly name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of the table
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_Labels *labels;

/** The range partitioning specification for this table, if configured. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/** A reference uniquely identifying the table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  The time-based partitioning specification for this table, if configured.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/** The type of table. Possible values are: TABLE, VIEW. */
@property(nonatomic, copy, nullable) NSString *type;

/** Additional details for a view. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_View *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_TableList_Tables_Item_Labels : GTLRObject
@end


/**
 *  Additional details for a view.
 */
@interface GTLRBigquery_TableList_Tables_Item_View : GTLRObject

/**
 *  True if view is defined in legacy SQL dialect, false if in standard SQL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

@end


/**
 *  GTLRBigquery_TableReference
 */
@interface GTLRBigquery_TableReference : GTLRObject

/** [Required] The ID of the dataset containing this table. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** [Required] The ID of the project containing this table. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  [Required] The ID of the table. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  GTLRBigquery_TableRow
 */
@interface GTLRBigquery_TableRow : GTLRObject

/**
 *  Represents a single row in the result set, consisting of one or more fields.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableCell *> *f;

@end


/**
 *  GTLRBigquery_TableSchema
 */
@interface GTLRBigquery_TableSchema : GTLRObject

/** Describes the fields in a table. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRBigquery_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRBigquery_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  GTLRBigquery_TimePartitioning
 */
@interface GTLRBigquery_TimePartitioning : GTLRObject

/**
 *  [Optional] Number of milliseconds for which to keep the storage for
 *  partitions in the table. The storage in a partition will have an expiration
 *  time of its partition time plus this value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationMs;

/**
 *  [Beta] [Optional] If not set, the table is partitioned by pseudo column,
 *  referenced via either '_PARTITIONTIME' as TIMESTAMP type, or
 *  '_PARTITIONDATE' as DATE type. If field is specified, the table is instead
 *  partitioned by this field. The field must be a top-level TIMESTAMP or DATE
 *  field. Its mode must be NULLABLE or REQUIRED.
 */
@property(nonatomic, copy, nullable) NSString *field;

/**
 *  requirePartitionFilter
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/**
 *  [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will
 *  generate one partition per day, hour, month, and year, respectively. When
 *  the type is not specified, the default behavior is DAY.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Options used in model training.
 */
@interface GTLRBigquery_TrainingOptions : GTLRObject

/**
 *  If true, detect step changes and make data adjustment in the input time
 *  series.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *adjustStepChanges;

/**
 *  Whether to enable auto ARIMA or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoArima;

/**
 *  The max value of non-seasonal p and q.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoArimaMaxOrder;

/**
 *  Batch size for dnn models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *batchSize;

/**
 *  Booster type for boosted tree models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_BoosterTypeUnspecified
 *        Unspecified booster type. (Value: "BOOSTER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_Dart Dart booster.
 *        (Value: "DART")
 *    @arg @c kGTLRBigquery_TrainingOptions_BoosterType_Gbtree Gbtree booster.
 *        (Value: "GBTREE")
 */
@property(nonatomic, copy, nullable) NSString *boosterType;

/**
 *  Whether or not p-value test should be computed for this model. Only
 *  available for linear and logistic regression models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *calculatePValues;

/**
 *  If true, clean spikes and dips in the input time series.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cleanSpikesAndDips;

/**
 *  Enums for color space, used for processing images in Object Table. See more
 *  details at https://www.tensorflow.org/io/tutorials/colorspace.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_ColorSpaceUnspecified
 *        Unspecified color space (Value: "COLOR_SPACE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Grayscale GRAYSCALE
 *        (Value: "GRAYSCALE")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Hsv HSV (Value: "HSV")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Rgb RGB (Value: "RGB")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Yiq YIQ (Value: "YIQ")
 *    @arg @c kGTLRBigquery_TrainingOptions_ColorSpace_Yuv YUV (Value: "YUV")
 */
@property(nonatomic, copy, nullable) NSString *colorSpace;

/**
 *  Subsample ratio of columns for each level for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBylevel;

/**
 *  Subsample ratio of columns for each node(split) for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBynode;

/**
 *  Subsample ratio of columns when constructing each tree for boosted tree
 *  models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colsampleBytree;

/**
 *  Type of normalization algorithm for boosted tree models using dart booster.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_DartNormalizeTypeUnspecified
 *        Unspecified dart normalize type. (Value:
 *        "DART_NORMALIZE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_Forest New trees
 *        have the same weight of sum of dropped trees. (Value: "FOREST")
 *    @arg @c kGTLRBigquery_TrainingOptions_DartNormalizeType_Tree New trees
 *        have the same weight of each of dropped trees. (Value: "TREE")
 */
@property(nonatomic, copy, nullable) NSString *dartNormalizeType;

/**
 *  The data frequency of a time series.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_AutoFrequency
 *        Automatically inferred from timestamps. (Value: "AUTO_FREQUENCY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Daily Daily data.
 *        (Value: "DAILY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_DataFrequencyUnspecified
 *        Value "DATA_FREQUENCY_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Hourly Hourly data.
 *        (Value: "HOURLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Monthly Monthly data.
 *        (Value: "MONTHLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_PerMinute Per-minute
 *        data. (Value: "PER_MINUTE")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Quarterly Quarterly
 *        data. (Value: "QUARTERLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Weekly Weekly data.
 *        (Value: "WEEKLY")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataFrequency_Yearly Yearly data.
 *        (Value: "YEARLY")
 */
@property(nonatomic, copy, nullable) NSString *dataFrequency;

/**
 *  The column to split data with. This column won't be used as a feature. 1.
 *  When data_split_method is CUSTOM, the corresponding column should be
 *  boolean. The rows with true value tag are eval data, and the false are
 *  training data. 2. When data_split_method is SEQ, the first
 *  DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the
 *  corresponding column are used as training data, and the rest are eval data.
 *  It respects the order in Orderable data types:
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
 */
@property(nonatomic, copy, nullable) NSString *dataSplitColumn;

/**
 *  The fraction of evaluation data over the whole input data. The rest of data
 *  will be used as training data. The format should be double. Accurate to two
 *  decimal places. Default value is 0.2.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataSplitEvalFraction;

/**
 *  The data split type for training and evaluation, e.g. RANDOM.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_AutoSplit Splits
 *        data automatically: Uses NO_SPLIT if the data size is small. Otherwise
 *        uses RANDOM. (Value: "AUTO_SPLIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Custom Splits data
 *        with the user provided tags. (Value: "CUSTOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_DataSplitMethodUnspecified
 *        Value "DATA_SPLIT_METHOD_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_NoSplit Data split
 *        will be skipped. (Value: "NO_SPLIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Random Splits data
 *        randomly. (Value: "RANDOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_DataSplitMethod_Sequential Splits
 *        data sequentially. (Value: "SEQUENTIAL")
 */
@property(nonatomic, copy, nullable) NSString *dataSplitMethod;

/**
 *  If true, perform decompose time series and save the results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *decomposeTimeSeries;

/**
 *  Distance type for clustering models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_Cosine Cosine distance.
 *        (Value: "COSINE")
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_DistanceTypeUnspecified
 *        Value "DISTANCE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_DistanceType_Euclidean Eculidean
 *        distance. (Value: "EUCLIDEAN")
 */
@property(nonatomic, copy, nullable) NSString *distanceType;

/**
 *  Dropout probability for dnn models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dropout;

/**
 *  Whether to stop early when the loss doesn't improve significantly any more
 *  (compared to min_relative_progress). Used only for iterative training
 *  algorithms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *earlyStop;

/**
 *  If true, enable global explanation during training.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableGlobalExplain;

/**
 *  Feedback type that specifies which algorithm to run for matrix
 *  factorization.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_Explicit Use
 *        nonweighted-als for explicit feedback problems. (Value: "EXPLICIT")
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_FeedbackTypeUnspecified
 *        Value "FEEDBACK_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_FeedbackType_Implicit Use
 *        weighted-als for implicit feedback problems. (Value: "IMPLICIT")
 */
@property(nonatomic, copy, nullable) NSString *feedbackType;

/**
 *  Hidden units for dnn models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *hiddenUnits;

/**
 *  The geographical region based on which the holidays are considered in time
 *  series modeling. If a valid value is specified, then holiday effects
 *  modeling is enabled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ae United Arab
 *        Emirates (Value: "AE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ar Argentina (Value:
 *        "AR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_At Austria (Value:
 *        "AT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Au Australia (Value:
 *        "AU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Be Belgium (Value:
 *        "BE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Br Brazil (Value:
 *        "BR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ca Canada (Value:
 *        "CA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ch Switzerland (Value:
 *        "CH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cl Chile (Value: "CL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cn China (Value: "CN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Co Colombia (Value:
 *        "CO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cs Czechoslovakia
 *        (Value: "CS")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Cz Czech Republic
 *        (Value: "CZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_De Germany (Value:
 *        "DE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Dk Denmark (Value:
 *        "DK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Dz Algeria (Value:
 *        "DZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ec Ecuador (Value:
 *        "EC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ee Estonia (Value:
 *        "EE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Eg Egypt (Value: "EG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Emea Europe, the
 *        Middle East and Africa. (Value: "EMEA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Es Spain (Value: "ES")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Fi Finland (Value:
 *        "FI")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Fr France (Value:
 *        "FR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Gb Great Britain
 *        (United Kingdom) (Value: "GB")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Global Global. (Value:
 *        "GLOBAL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Gr Greece (Value:
 *        "GR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Hk Hong Kong (Value:
 *        "HK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_HolidayRegionUnspecified
 *        Holiday region unspecified. (Value: "HOLIDAY_REGION_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Hu Hungary (Value:
 *        "HU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Id Indonesia (Value:
 *        "ID")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ie Ireland (Value:
 *        "IE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Il Israel (Value:
 *        "IL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_In India (Value: "IN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ir Iran (Value: "IR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_It Italy (Value: "IT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Japac Japan and Asia
 *        Pacific: Korea, Greater China, India, Australia, and New Zealand.
 *        (Value: "JAPAC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Jp Japan (Value: "JP")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Kr Korea (South)
 *        (Value: "KR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Lac Latin America and
 *        the Caribbean. (Value: "LAC")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Lv Latvia (Value:
 *        "LV")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ma Morocco (Value:
 *        "MA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Mx Mexico (Value:
 *        "MX")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_My Malaysia (Value:
 *        "MY")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Na North America.
 *        (Value: "NA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ng Nigeria (Value:
 *        "NG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Nl Netherlands (Value:
 *        "NL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_No Norway (Value:
 *        "NO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Nz New Zealand (Value:
 *        "NZ")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pe Peru (Value: "PE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ph Philippines (Value:
 *        "PH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pk Pakistan (Value:
 *        "PK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pl Poland (Value:
 *        "PL")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Pt Portugal (Value:
 *        "PT")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ro Romania (Value:
 *        "RO")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Rs Serbia (Value:
 *        "RS")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ru Russian Federation
 *        (Value: "RU")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sa Saudi Arabia
 *        (Value: "SA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Se Sweden (Value:
 *        "SE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sg Singapore (Value:
 *        "SG")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Si Slovenia (Value:
 *        "SI")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Sk Slovakia (Value:
 *        "SK")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Th Thailand (Value:
 *        "TH")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Tr Turkey (Value:
 *        "TR")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Tw Taiwan (Value:
 *        "TW")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ua Ukraine (Value:
 *        "UA")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Us United States
 *        (Value: "US")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Ve Venezuela (Value:
 *        "VE")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Vn Viet Nam (Value:
 *        "VN")
 *    @arg @c kGTLRBigquery_TrainingOptions_HolidayRegion_Za South Africa
 *        (Value: "ZA")
 */
@property(nonatomic, copy, nullable) NSString *holidayRegion;

/**
 *  The number of periods ahead that need to be forecasted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *horizon;

/** The target evaluation metrics to optimize the hyperparameters for. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *hparamTuningObjectives;

/**
 *  Include drift when fitting an ARIMA model.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeDrift;

/**
 *  Specifies the initial learning rate for the line search learn rate strategy.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialLearnRate;

/** Name of input label columns in training data. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inputLabelColumns;

/**
 *  Number of integral steps for the integrated gradients explain method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integratedGradientsNumSteps;

/** Item column specified for matrix factorization models. */
@property(nonatomic, copy, nullable) NSString *itemColumn;

/**
 *  The column used to provide the initial centroids for kmeans algorithm when
 *  kmeans_initialization_method is CUSTOM.
 */
@property(nonatomic, copy, nullable) NSString *kmeansInitializationColumn;

/**
 *  The method used to initialize the centroids for kmeans algorithm.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Custom
 *        Initializes the centroids using data specified in
 *        kmeans_initialization_column. (Value: "CUSTOM")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansInitializationMethodUnspecified
 *        Unspecified initialization method. (Value:
 *        "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansPlusPlus
 *        Initializes with kmeans++. (Value: "KMEANS_PLUS_PLUS")
 *    @arg @c kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Random
 *        Initializes the centroids randomly. (Value: "RANDOM")
 */
@property(nonatomic, copy, nullable) NSString *kmeansInitializationMethod;

/**
 *  L1 regularization coefficient.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1Regularization;

/**
 *  L2 regularization coefficient.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l2Regularization;

/**
 *  Weights associated with each label class, for rebalancing the training data.
 *  Only applicable for classification models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions_LabelClassWeights *labelClassWeights;

/**
 *  Learning rate in training. Used only for iterative training algorithms.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  The strategy to determine learn rate for the current iteration.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_Constant Use a
 *        constant learning rate. (Value: "CONSTANT")
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_LearnRateStrategyUnspecified
 *        Value "LEARN_RATE_STRATEGY_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_LearnRateStrategy_LineSearch Use
 *        line search to determine learning rate. (Value: "LINE_SEARCH")
 */
@property(nonatomic, copy, nullable) NSString *learnRateStrategy;

/**
 *  Type of loss function used during training run.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_LossTypeUnspecified Value
 *        "LOSS_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_MeanLogLoss Mean log loss,
 *        used for logistic regression. (Value: "MEAN_LOG_LOSS")
 *    @arg @c kGTLRBigquery_TrainingOptions_LossType_MeanSquaredLoss Mean
 *        squared loss, used for linear regression. (Value: "MEAN_SQUARED_LOSS")
 */
@property(nonatomic, copy, nullable) NSString *lossType;

/**
 *  The maximum number of iterations in training. Used only for iterative
 *  training algorithms.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIterations;

/**
 *  Maximum number of trials to run in parallel.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxParallelTrials;

/**
 *  Get truncated length by last n points in time series. Use separately from
 *  time_series_length_fraction and min_time_series_length.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTimeSeriesLength;

/**
 *  Maximum depth of a tree for boosted tree models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxTreeDepth;

/**
 *  When early_stop is true, stops training when accuracy improvement is less
 *  than 'min_relative_progress'. Used only for iterative training algorithms.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRelativeProgress;

/**
 *  Minimum split loss for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minSplitLoss;

/**
 *  Set fast trend ARIMA_PLUS model minimum training length. Use in pair with
 *  time_series_length_fraction.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minTimeSeriesLength;

/**
 *  Minimum sum of instance weight needed in a child for boosted tree models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minTreeChildWeight;

/**
 *  Google Cloud Storage URI from which the model was imported. Only applicable
 *  for imported models.
 */
@property(nonatomic, copy, nullable) NSString *modelUri;

/**
 *  A specification of the non-seasonal part of the ARIMA model: the three
 *  components (p, d, q) are the AR order, the degree of differencing, and the
 *  MA order.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ArimaOrder *nonSeasonalOrder;

/**
 *  Number of clusters for clustering models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numClusters;

/**
 *  Num factors specified for matrix factorization models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numFactors;

/**
 *  Number of parallel trees constructed during each iteration for boosted tree
 *  models.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numParallelTree;

/**
 *  Number of trials to run this hyperparameter tuning job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numTrials;

/**
 *  Optimization strategy for training linear regression models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_BatchGradientDescent
 *        Uses an iterative batch gradient descent algorithm. (Value:
 *        "BATCH_GRADIENT_DESCENT")
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_NormalEquation
 *        Uses a normal equation to solve linear regression problem. (Value:
 *        "NORMAL_EQUATION")
 *    @arg @c kGTLRBigquery_TrainingOptions_OptimizationStrategy_OptimizationStrategyUnspecified
 *        Value "OPTIMIZATION_STRATEGY_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *optimizationStrategy;

/**
 *  Whether to preserve the input structs in output feature names. Suppose there
 *  is a struct A with field b. When false (default), the output feature name is
 *  A_b. When true, the output feature name is A.b.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveInputStructs;

/**
 *  Number of paths for the sampled Shapley explain method.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sampledShapleyNumPaths;

/**
 *  Subsample fraction of the training data to grow tree to prevent overfitting
 *  for boosted tree models.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *subsample;

/** Column to be designated as time series data for ARIMA model. */
@property(nonatomic, copy, nullable) NSString *timeSeriesDataColumn;

/** The time series id column that was used during ARIMA model training. */
@property(nonatomic, copy, nullable) NSString *timeSeriesIdColumn;

/** The time series id columns that were used during ARIMA model training. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *timeSeriesIdColumns;

/**
 *  Get truncated length by fraction in time series.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeSeriesLengthFraction;

/** Column to be designated as time series timestamp for ARIMA model. */
@property(nonatomic, copy, nullable) NSString *timeSeriesTimestampColumn;

/**
 *  Tree construction algorithm for boosted tree models.
 *
 *  Likely values:
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Approx Approximate greedy
 *        algorithm using quantile sketch and gradient histogram. (Value:
 *        "APPROX")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Auto Use heuristic to
 *        choose the fastest method. (Value: "AUTO")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Exact Exact greedy
 *        algorithm. (Value: "EXACT")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_Hist Fast histogram
 *        optimized approximate greedy algorithm. (Value: "HIST")
 *    @arg @c kGTLRBigquery_TrainingOptions_TreeMethod_TreeMethodUnspecified
 *        Unspecified tree method. (Value: "TREE_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *treeMethod;

/**
 *  The smoothing window size for the trend component of the time series.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trendSmoothingWindowSize;

/** User column specified for matrix factorization models. */
@property(nonatomic, copy, nullable) NSString *userColumn;

/**
 *  Hyperparameter for matrix factoration when implicit feedback type is
 *  specified.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *walsAlpha;

/**
 *  Whether to train a model from the last checkpoint.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warmStart;

@end


/**
 *  Weights associated with each label class, for rebalancing the training data.
 *  Only applicable for classification models.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of doubleValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_TrainingOptions_LabelClassWeights : GTLRObject
@end


/**
 *  Information about a single training query run for the model.
 */
@interface GTLRBigquery_TrainingRun : GTLRObject

/**
 *  Output only. Global explanation contains the explanation of top features on
 *  the class level. Applies to classification models only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_GlobalExplanation *> *classLevelGlobalExplanations;

/**
 *  Output only. Data split result of the training run. Only set when the input
 *  data is actually split.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DataSplitResult *dataSplitResult;

/**
 *  Output only. The evaluation metrics over training/eval data that were
 *  computed at the end of training.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_EvaluationMetrics *evaluationMetrics;

/**
 *  Output only. Global explanation contains the explanation of top features on
 *  the model level. Applies to both regression and classification models.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_GlobalExplanation *modelLevelGlobalExplanation;

/**
 *  Output only. Output of each iteration run, results.size() <= max_iterations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IterationResult *> *results;

/** Output only. The start time of this training run. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Options that were used for this training run, includes user
 *  specified and default options that were used.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingOptions *trainingOptions;

/**
 *  Output only. The start time of this training run, in milliseconds since
 *  epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingStartTime;

/**
 *  The model id in the [Vertex AI Model
 *  Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction)
 *  for this training run.
 */
@property(nonatomic, copy, nullable) NSString *vertexAiModelId;

/**
 *  Output only. The model version in the [Vertex AI Model
 *  Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction)
 *  for this training run.
 */
@property(nonatomic, copy, nullable) NSString *vertexAiModelVersion;

@end


/**
 *  GTLRBigquery_TransactionInfo
 */
@interface GTLRBigquery_TransactionInfo : GTLRObject

/** [Output-only] // [Alpha] Id of the transaction. */
@property(nonatomic, copy, nullable) NSString *transactionId;

@end


/**
 *  This is used for defining User Defined Function (UDF) resources only when
 *  using legacy SQL. Users of Standard SQL should leverage either DDL (e.g.
 *  CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF
 *  resources. For additional information on migrating, see:
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
 */
@interface GTLRBigquery_UserDefinedFunctionResource : GTLRObject

/**
 *  [Pick one] An inline resource that contains code for a user-defined function
 *  (UDF). Providing a inline code resource is equivalent to providing a URI for
 *  a file containing the same code.
 */
@property(nonatomic, copy, nullable) NSString *inlineCode;

/**
 *  [Pick one] A code resource to load from a Google Cloud Storage URI
 *  (gs://bucket/path).
 */
@property(nonatomic, copy, nullable) NSString *resourceUri;

@end


/**
 *  GTLRBigquery_ViewDefinition
 */
@interface GTLRBigquery_ViewDefinition : GTLRObject

/** [Required] A query that BigQuery executes when the view is referenced. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  True if the column names are explicitly specified. For example by using the
 *  'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's
 *  standard SQL: https://cloud.google.com/bigquery/sql-reference/
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useExplicitColumnNames;

/**
 *  Specifies whether to use BigQuery's legacy SQL for this view. The default
 *  value is true. If set to false, the view will use BigQuery's standard SQL:
 *  https://cloud.google.com/bigquery/sql-reference/ Queries and views that
 *  reference this view must use the same flag value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
