// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Parallelstore API (parallelstore/v1)
// Documentation:
//   https://cloud.google.com/parallelstore

#import <GoogleAPIClientForREST/GTLRParallelstoreQuery.h>

@implementation GTLRParallelstoreQuery

@dynamic fields;

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Location class];
  query.loggingName = @"parallelstore.projects.locations.get";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesCreate

@dynamic instanceId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRParallelstore_Instance *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.instances.create";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.instances.delete";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesExportData

@dynamic name;

+ (instancetype)queryWithObject:(GTLRParallelstore_ExportDataRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:exportData";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesExportData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.instances.exportData";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Instance class];
  query.loggingName = @"parallelstore.projects.locations.instances.get";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesImportData

@dynamic name;

+ (instancetype)queryWithObject:(GTLRParallelstore_ImportDataRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:importData";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesImportData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.instances.importData";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRParallelstore_ListInstancesResponse class];
  query.loggingName = @"parallelstore.projects.locations.instances.list";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsInstancesPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRParallelstore_Instance *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsInstancesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.instances.patch";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRParallelstoreQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_ListLocationsResponse class];
  query.loggingName = @"parallelstore.projects.locations.list";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRParallelstore_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRParallelstoreQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_GoogleProtobufEmpty class];
  query.loggingName = @"parallelstore.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_GoogleProtobufEmpty class];
  query.loggingName = @"parallelstore.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParallelstoreQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_Operation class];
  query.loggingName = @"parallelstore.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRParallelstoreQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRParallelstoreQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParallelstore_ListOperationsResponse class];
  query.loggingName = @"parallelstore.projects.locations.operations.list";
  return query;
}

@end
