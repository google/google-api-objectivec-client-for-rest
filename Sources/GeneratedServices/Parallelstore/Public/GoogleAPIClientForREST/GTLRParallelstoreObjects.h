// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Parallelstore API (parallelstore/v1)
// Documentation:
//   https://cloud.google.com/parallelstore

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRParallelstore_DestinationGcsBucket;
@class GTLRParallelstore_DestinationParallelstore;
@class GTLRParallelstore_Instance;
@class GTLRParallelstore_Instance_Labels;
@class GTLRParallelstore_Location;
@class GTLRParallelstore_Location_Labels;
@class GTLRParallelstore_Location_Metadata;
@class GTLRParallelstore_Operation;
@class GTLRParallelstore_Operation_Metadata;
@class GTLRParallelstore_Operation_Response;
@class GTLRParallelstore_SourceGcsBucket;
@class GTLRParallelstore_SourceParallelstore;
@class GTLRParallelstore_Status;
@class GTLRParallelstore_Status_Details_Item;
@class GTLRParallelstore_TransferMetadataOptions;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRParallelstore_Instance.deploymentType

/**
 *  Default Deployment Type It is equivalent to SCRATCH
 *
 *  Value: "DEPLOYMENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DeploymentType_DeploymentTypeUnspecified;
/**
 *  Persistent
 *
 *  Value: "PERSISTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DeploymentType_Persistent;
/**
 *  Scratch
 *
 *  Value: "SCRATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DeploymentType_Scratch;

// ----------------------------------------------------------------------------
// GTLRParallelstore_Instance.directoryStripeLevel

/**
 *  Medium directory striping
 *
 *  Value: "DIRECTORY_STRIPE_LEVEL_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelBalanced;
/**
 *  Maximum directory striping
 *
 *  Value: "DIRECTORY_STRIPE_LEVEL_MAX"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelMax;
/**
 *  Minimum directory striping
 *
 *  Value: "DIRECTORY_STRIPE_LEVEL_MIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelMin;
/**
 *  If not set, DirectoryStripeLevel will default to DIRECTORY_STRIPE_LEVEL_MAX
 *
 *  Value: "DIRECTORY_STRIPE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelUnspecified;

// ----------------------------------------------------------------------------
// GTLRParallelstore_Instance.fileStripeLevel

/**
 *  Medium file striping
 *
 *  Value: "FILE_STRIPE_LEVEL_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelBalanced;
/**
 *  Maximum file striping
 *
 *  Value: "FILE_STRIPE_LEVEL_MAX"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelMax;
/**
 *  Minimum file striping
 *
 *  Value: "FILE_STRIPE_LEVEL_MIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelMin;
/**
 *  If not set, FileStripeLevel will default to FILE_STRIPE_LEVEL_BALANCED
 *
 *  Value: "FILE_STRIPE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelUnspecified;

// ----------------------------------------------------------------------------
// GTLRParallelstore_Instance.state

/**
 *  The instance is available for use.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Active;
/**
 *  The instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Creating;
/**
 *  The instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Deleting;
/**
 *  The instance is not usable.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Failed;
/**
 *  The instance is being repaired. This should only be used by instances using
 *  the `PERSISTENT` deployment type.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Repairing;
/**
 *  Not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_StateUnspecified;
/**
 *  The instance is being upgraded.
 *
 *  Value: "UPGRADING"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_Instance_State_Upgrading;

// ----------------------------------------------------------------------------
// GTLRParallelstore_ReconciliationOperationMetadata.exclusiveAction

/**
 *  The resource has to be deleted. When using this bit, the CLH should fail the
 *  operation. DEPRECATED. Instead use DELETE_RESOURCE OperationSignal in
 *  SideChannel.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_Delete GTLR_DEPRECATED;
/**
 *  This resource could not be repaired but the repair should be tried again at
 *  a later time. This can happen if there is a dependency that needs to be
 *  resolved first- e.g. if a parent resource must be repaired before a child
 *  resource.
 *
 *  Value: "RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_Retry;
/**
 *  Unknown repair action.
 *
 *  Value: "UNKNOWN_REPAIR_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_UnknownRepairAction;

// ----------------------------------------------------------------------------
// GTLRParallelstore_TransferMetadataOptions.gid

/**
 *  Preserve GID that is in number format during a transfer job.
 *
 *  Value: "GID_NUMBER_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Gid_GidNumberPreserve;
/**
 *  Do not preserve GID during a transfer job.
 *
 *  Value: "GID_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Gid_GidSkip;
/**
 *  default is GID_NUMBER_PRESERVE.
 *
 *  Value: "GID_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Gid_GidUnspecified;

// ----------------------------------------------------------------------------
// GTLRParallelstore_TransferMetadataOptions.mode

/**
 *  Preserve mode during a transfer job.
 *
 *  Value: "MODE_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Mode_ModePreserve;
/**
 *  Do not preserve mode during a transfer job.
 *
 *  Value: "MODE_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Mode_ModeSkip;
/**
 *  default is MODE_PRESERVE.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Mode_ModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRParallelstore_TransferMetadataOptions.uid

/**
 *  Preserve UID that is in number format during a transfer job.
 *
 *  Value: "UID_NUMBER_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Uid_UidNumberPreserve;
/**
 *  Do not preserve UID during a transfer job.
 *
 *  Value: "UID_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Uid_UidSkip;
/**
 *  default is UID_NUMBER_PRESERVE.
 *
 *  Value: "UID_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParallelstore_TransferMetadataOptions_Uid_UidUnspecified;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRParallelstore_CancelOperationRequest : GTLRObject
@end


/**
 *  Cloud Storage as the destination of a data transfer.
 */
@interface GTLRParallelstore_DestinationGcsBucket : GTLRObject

/**
 *  Required. URI to a Cloud Storage bucket in the format: `gs:///`. The path
 *  inside the bucket is optional.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Parallelstore as the destination of a data transfer.
 */
@interface GTLRParallelstore_DestinationParallelstore : GTLRObject

/**
 *  Optional. Root directory path to the Paralellstore filesystem, starting with
 *  `/`. Defaults to `/` if unset.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Export data from Parallelstore to Cloud Storage.
 */
@interface GTLRParallelstore_ExportDataRequest : GTLRObject

/** Cloud Storage destination. */
@property(nonatomic, strong, nullable) GTLRParallelstore_DestinationGcsBucket *destinationGcsBucket;

/** Optional. The metadata options for the export data. */
@property(nonatomic, strong, nullable) GTLRParallelstore_TransferMetadataOptions *metadataOptions;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. User-specified Service Account (SA) credentials to be used when
 *  performing the transfer. Use one of the following formats: *
 *  `{EMAIL_ADDRESS_OR_UNIQUE_ID}` *
 *  `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
 *  * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}` If unspecified,
 *  the Parallelstore service agent is used:
 *  `service-\@gcp-sa-parallelstore.iam.gserviceaccount.com`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Parallelstore source. */
@property(nonatomic, strong, nullable) GTLRParallelstore_SourceParallelstore *sourceParallelstore;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRParallelstore_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  Import data from Cloud Storage into a Parallelstore instance.
 */
@interface GTLRParallelstore_ImportDataRequest : GTLRObject

/** Parallelstore destination. */
@property(nonatomic, strong, nullable) GTLRParallelstore_DestinationParallelstore *destinationParallelstore;

/** Optional. The transfer metadata options for the import data. */
@property(nonatomic, strong, nullable) GTLRParallelstore_TransferMetadataOptions *metadataOptions;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. User-specified service account credentials to be used when
 *  performing the transfer. Use one of the following formats: *
 *  `{EMAIL_ADDRESS_OR_UNIQUE_ID}` *
 *  `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
 *  * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}` If unspecified,
 *  the Parallelstore service agent is used:
 *  `service-\@gcp-sa-parallelstore.iam.gserviceaccount.com`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  The Cloud Storage source bucket and, optionally, path inside the bucket.
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_SourceGcsBucket *sourceGcsBucket;

@end


/**
 *  A Parallelstore instance.
 */
@interface GTLRParallelstore_Instance : GTLRObject

/**
 *  Output only. A list of IPv4 addresses used for client side configuration.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessPoints;

/**
 *  Required. Immutable. The instance's storage capacity in Gibibytes (GiB).
 *  Allowed values are between 12000 and 100000, in multiples of 4000; e.g.,
 *  12000, 16000, 20000, ...
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *capacityGib;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Deprecated 'daos_version' field. Output only. The version of
 *  DAOS software running in the instance.
 */
@property(nonatomic, copy, nullable) NSString *daosVersion GTLR_DEPRECATED;

/**
 *  Optional. Immutable. The deployment type of the instance. Allowed values
 *  are: * `SCRATCH`: the instance is a scratch instance. * `PERSISTENT`: the
 *  instance is a persistent instance.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_Instance_DeploymentType_DeploymentTypeUnspecified
 *        Default Deployment Type It is equivalent to SCRATCH (Value:
 *        "DEPLOYMENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRParallelstore_Instance_DeploymentType_Persistent Persistent
 *        (Value: "PERSISTENT")
 *    @arg @c kGTLRParallelstore_Instance_DeploymentType_Scratch Scratch (Value:
 *        "SCRATCH")
 */
@property(nonatomic, copy, nullable) NSString *deploymentType;

/**
 *  Optional. The description of the instance. 2048 characters or less.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Immutable. Stripe level for directories. Allowed values are: *
 *  `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories contain a small
 *  number of files. * `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance
 *  for workloads involving a mix of small and large directories. *
 *  `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a large
 *  number of files.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelBalanced
 *        Medium directory striping (Value: "DIRECTORY_STRIPE_LEVEL_BALANCED")
 *    @arg @c kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelMax
 *        Maximum directory striping (Value: "DIRECTORY_STRIPE_LEVEL_MAX")
 *    @arg @c kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelMin
 *        Minimum directory striping (Value: "DIRECTORY_STRIPE_LEVEL_MIN")
 *    @arg @c kGTLRParallelstore_Instance_DirectoryStripeLevel_DirectoryStripeLevelUnspecified
 *        If not set, DirectoryStripeLevel will default to
 *        DIRECTORY_STRIPE_LEVEL_MAX (Value:
 *        "DIRECTORY_STRIPE_LEVEL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *directoryStripeLevel;

/**
 *  Output only. Immutable. The ID of the IP address range being used by the
 *  instance's VPC network. This field is populated by the service and contains
 *  the value currently used by the service.
 */
@property(nonatomic, copy, nullable) NSString *effectiveReservedIpRange;

/**
 *  Optional. Immutable. Stripe level for files. Allowed values are: *
 *  `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size files. *
 *  `FILE_STRIPE_LEVEL_BALANCED`: balances performance for workloads involving a
 *  mix of small and large files. * `FILE_STRIPE_LEVEL_MAX`: higher throughput
 *  performance for larger files.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelBalanced
 *        Medium file striping (Value: "FILE_STRIPE_LEVEL_BALANCED")
 *    @arg @c kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelMax
 *        Maximum file striping (Value: "FILE_STRIPE_LEVEL_MAX")
 *    @arg @c kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelMin
 *        Minimum file striping (Value: "FILE_STRIPE_LEVEL_MIN")
 *    @arg @c kGTLRParallelstore_Instance_FileStripeLevel_FileStripeLevelUnspecified
 *        If not set, FileStripeLevel will default to FILE_STRIPE_LEVEL_BALANCED
 *        (Value: "FILE_STRIPE_LEVEL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *fileStripeLevel;

/**
 *  Optional. Cloud Labels are a flexible and lightweight mechanism for
 *  organizing cloud resources into groups that reflect a customer's
 *  organizational needs and deployment strategies. See
 *  https://cloud.google.com/resource-manager/docs/labels-overview for details.
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_Instance_Labels *labels;

/**
 *  Identifier. The resource name of the instance, in the format
 *  `projects/{project}/locations/{location}/instances/{instance_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Immutable. The name of the Compute Engine [VPC
 *  network](https://cloud.google.com/vpc/docs/vpc) to which the instance is
 *  connected.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. Immutable. The ID of the IP address range being used by the
 *  instance's VPC network. See [Configure a VPC
 *  network](https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc).
 *  If no ID is provided, all ranges are considered.
 */
@property(nonatomic, copy, nullable) NSString *reservedIpRange;

/**
 *  Output only. The instance state.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_Instance_State_Active The instance is available
 *        for use. (Value: "ACTIVE")
 *    @arg @c kGTLRParallelstore_Instance_State_Creating The instance is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRParallelstore_Instance_State_Deleting The instance is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRParallelstore_Instance_State_Failed The instance is not
 *        usable. (Value: "FAILED")
 *    @arg @c kGTLRParallelstore_Instance_State_Repairing The instance is being
 *        repaired. This should only be used by instances using the `PERSISTENT`
 *        deployment type. (Value: "REPAIRING")
 *    @arg @c kGTLRParallelstore_Instance_State_StateUnspecified Not set.
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRParallelstore_Instance_State_Upgrading The instance is being
 *        upgraded. (Value: "UPGRADING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Cloud Labels are a flexible and lightweight mechanism for
 *  organizing cloud resources into groups that reflect a customer's
 *  organizational needs and deployment strategies. See
 *  https://cloud.google.com/resource-manager/docs/labels-overview for details.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRParallelstore_Instance_Labels : GTLRObject
@end


/**
 *  Response from ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRParallelstore_ListInstancesResponse : GTLRCollectionObject

/**
 *  The list of Parallelstore instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRParallelstore_Instance *> *instances;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRParallelstore_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRParallelstore_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRParallelstore_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRParallelstore_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRParallelstore_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRParallelstore_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRParallelstore_Location_Metadata : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRParallelstore_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRParallelstore_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRParallelstore_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRParallelstore_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRParallelstore_Operation_Response : GTLRObject
@end


/**
 *  Long-running operation metadata.
 */
@interface GTLRParallelstore_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Operation metadata returned by the CLH during resource state reconciliation.
 */
@interface GTLRParallelstore_ReconciliationOperationMetadata : GTLRObject

/**
 *  DEPRECATED. Use exclusive_action instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteResource GTLR_DEPRECATED;

/**
 *  Excluisive action returned by the CLH.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_Delete
 *        The resource has to be deleted. When using this bit, the CLH should
 *        fail the operation. DEPRECATED. Instead use DELETE_RESOURCE
 *        OperationSignal in SideChannel. (Value: "DELETE")
 *    @arg @c kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_Retry
 *        This resource could not be repaired but the repair should be tried
 *        again at a later time. This can happen if there is a dependency that
 *        needs to be resolved first- e.g. if a parent resource must be repaired
 *        before a child resource. (Value: "RETRY")
 *    @arg @c kGTLRParallelstore_ReconciliationOperationMetadata_ExclusiveAction_UnknownRepairAction
 *        Unknown repair action. (Value: "UNKNOWN_REPAIR_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *exclusiveAction;

@end


/**
 *  Cloud Storage as the source of a data transfer.
 */
@interface GTLRParallelstore_SourceGcsBucket : GTLRObject

/**
 *  Required. URI to a Cloud Storage bucket in the format: `gs:///`. The path
 *  inside the bucket is optional.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Parallelstore as the source of a data transfer.
 */
@interface GTLRParallelstore_SourceParallelstore : GTLRObject

/**
 *  Optional. Root directory path to the Paralellstore filesystem, starting with
 *  `/`. Defaults to `/` if unset.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRParallelstore_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRParallelstore_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRParallelstore_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRParallelstore_Status_Details_Item : GTLRObject
@end


/**
 *  Transfer metadata options for the instance.
 */
@interface GTLRParallelstore_TransferMetadataOptions : GTLRObject

/**
 *  Optional. The GID preservation behavior.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Gid_GidNumberPreserve
 *        Preserve GID that is in number format during a transfer job. (Value:
 *        "GID_NUMBER_PRESERVE")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Gid_GidSkip Do not
 *        preserve GID during a transfer job. (Value: "GID_SKIP")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Gid_GidUnspecified
 *        default is GID_NUMBER_PRESERVE. (Value: "GID_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *gid;

/**
 *  Optional. The mode preservation behavior.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Mode_ModePreserve
 *        Preserve mode during a transfer job. (Value: "MODE_PRESERVE")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Mode_ModeSkip Do not
 *        preserve mode during a transfer job. (Value: "MODE_SKIP")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Mode_ModeUnspecified
 *        default is MODE_PRESERVE. (Value: "MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. The UID preservation behavior.
 *
 *  Likely values:
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Uid_UidNumberPreserve
 *        Preserve UID that is in number format during a transfer job. (Value:
 *        "UID_NUMBER_PRESERVE")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Uid_UidSkip Do not
 *        preserve UID during a transfer job. (Value: "UID_SKIP")
 *    @arg @c kGTLRParallelstore_TransferMetadataOptions_Uid_UidUnspecified
 *        default is UID_NUMBER_PRESERVE. (Value: "UID_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *uid;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
