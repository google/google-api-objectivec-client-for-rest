// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   SaaS Runtime API (saasservicemgmt/v1beta1)
// Description:
//   Model, deploy, and operate your SaaS at scale.
// Documentation:
//   https://cloud.google.com/saas-runtime/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSaaSServiceManagement_Aggregate;
@class GTLRSaaSServiceManagement_Blueprint;
@class GTLRSaaSServiceManagement_Dependency;
@class GTLRSaaSServiceManagement_Deprovision;
@class GTLRSaaSServiceManagement_ErrorBudget;
@class GTLRSaaSServiceManagement_FromMapping;
@class GTLRSaaSServiceManagement_GoogleCloudLocationLocation;
@class GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Labels;
@class GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Metadata;
@class GTLRSaaSServiceManagement_Location;
@class GTLRSaaSServiceManagement_MaintenanceSettings;
@class GTLRSaaSServiceManagement_Provision;
@class GTLRSaaSServiceManagement_Release;
@class GTLRSaaSServiceManagement_Release_Annotations;
@class GTLRSaaSServiceManagement_Release_Labels;
@class GTLRSaaSServiceManagement_ReleaseRequirements;
@class GTLRSaaSServiceManagement_Rollout;
@class GTLRSaaSServiceManagement_Rollout_Annotations;
@class GTLRSaaSServiceManagement_Rollout_Labels;
@class GTLRSaaSServiceManagement_RolloutControl;
@class GTLRSaaSServiceManagement_RolloutKind;
@class GTLRSaaSServiceManagement_RolloutKind_Annotations;
@class GTLRSaaSServiceManagement_RolloutKind_Labels;
@class GTLRSaaSServiceManagement_RolloutStats;
@class GTLRSaaSServiceManagement_RunRolloutActionParams;
@class GTLRSaaSServiceManagement_Saas;
@class GTLRSaaSServiceManagement_Saas_Annotations;
@class GTLRSaaSServiceManagement_Saas_Labels;
@class GTLRSaaSServiceManagement_Schedule;
@class GTLRSaaSServiceManagement_Tenant;
@class GTLRSaaSServiceManagement_Tenant_Annotations;
@class GTLRSaaSServiceManagement_Tenant_Labels;
@class GTLRSaaSServiceManagement_ToMapping;
@class GTLRSaaSServiceManagement_Unit;
@class GTLRSaaSServiceManagement_Unit_Annotations;
@class GTLRSaaSServiceManagement_Unit_Labels;
@class GTLRSaaSServiceManagement_UnitCondition;
@class GTLRSaaSServiceManagement_UnitDependency;
@class GTLRSaaSServiceManagement_UnitKind;
@class GTLRSaaSServiceManagement_UnitKind_Annotations;
@class GTLRSaaSServiceManagement_UnitKind_Labels;
@class GTLRSaaSServiceManagement_UnitOperation;
@class GTLRSaaSServiceManagement_UnitOperation_Annotations;
@class GTLRSaaSServiceManagement_UnitOperation_Labels;
@class GTLRSaaSServiceManagement_UnitOperationCondition;
@class GTLRSaaSServiceManagement_UnitVariable;
@class GTLRSaaSServiceManagement_Upgrade;
@class GTLRSaaSServiceManagement_VariableMapping;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_Rollout.state

/**
 *  Rollout has been canceled.
 *
 *  Value: "ROLLOUT_STATE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateCancelled;
/**
 *  Rollout is being canceled.
 *
 *  Value: "ROLLOUT_STATE_CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateCancelling;
/**
 *  Rollout has failed.
 *
 *  Value: "ROLLOUT_STATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateFailed;
/**
 *  Rollout has been paused.
 *
 *  Value: "ROLLOUT_STATE_PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStatePaused;
/**
 *  Rollout is being paused.
 *
 *  Value: "ROLLOUT_STATE_PAUSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStatePausing;
/**
 *  Rollout is being resumed.
 *
 *  Value: "ROLLOUT_STATE_RESUMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateResuming;
/**
 *  Rollout is in progress.
 *
 *  Value: "ROLLOUT_STATE_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateRunning;
/**
 *  Rollout completed successfully.
 *
 *  Value: "ROLLOUT_STATE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateSucceeded;
/**
 *  Unspecified state.
 *
 *  Value: "ROLLOUT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateUnspecified;
/**
 *  Rollout is waiting for some condition to be met before starting.
 *
 *  Value: "ROLLOUT_STATE_WAITING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Rollout_State_RolloutStateWaiting;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_RolloutControl.action

/**
 *  Cancel the Rollout permanently.
 *
 *  Value: "ROLLOUT_ACTION_CANCEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionCancel;
/**
 *  Pause the Rollout until it is resumed (i.e. RUN is requested).
 *
 *  Value: "ROLLOUT_ACTION_PAUSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionPause;
/**
 *  Run the Rollout until it naturally reaches a terminal state. A rollout
 *  requested to run will progress through all natural Rollout States (such as
 *  RUNNING -> SUCCEEDED or RUNNING -> FAILED). If retriable errors are
 *  encountered during the rollout, the rollout will paused by default and can
 *  be resumed by re-requesting this RUN action.
 *
 *  Value: "ROLLOUT_ACTION_RUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionRun;
/**
 *  Unspecified action, will be treated as RUN by default.
 *
 *  Value: "ROLLOUT_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_RolloutKind.updateUnitKindStrategy

/**
 *  Never update the unit kind.
 *
 *  Value: "UPDATE_UNIT_KIND_STRATEGY_NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyNever;
/**
 *  Update the unit kind strategy on the rollout start.
 *
 *  Value: "UPDATE_UNIT_KIND_STRATEGY_ON_START"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyOnStart;
/**
 *  Strategy unspecified.
 *
 *  Value: "UPDATE_UNIT_KIND_STRATEGY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_Unit.managementMode

/**
 *  The system will decide when to deprovision and delete the unit. User still
 *  can deprovision or delete the unit manually.
 *
 *  Value: "MANAGEMENT_MODE_SYSTEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeSystem;
/** Value: "MANAGEMENT_MODE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeUnspecified;
/**
 *  Unit's lifecycle is managed by the user.
 *
 *  Value: "MANAGEMENT_MODE_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeUser;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_Unit.state

/**
 *  Unit is being deleted.
 *
 *  Value: "UNIT_STATE_DEPROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateDeprovisioning;
/**
 *  Unit has error, when it is not ready and some error operation
 *
 *  Value: "UNIT_STATE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateError;
/**
 *  Unit is not provisioned.
 *
 *  Value: "UNIT_STATE_NOT_PROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateNotProvisioned;
/**
 *  Unit is being provisioned.
 *
 *  Value: "UNIT_STATE_PROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateProvisioning;
/**
 *  Unit has been provisioned and is ready for use
 *
 *  Value: "UNIT_STATE_READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateReady;
/**
 *  Unspecified state.
 *
 *  Value: "UNIT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateUnspecified;
/**
 *  Unit is being updated. This is typically when a unit is being upgraded to a
 *  new release or some of the input variables on the Unit is being changed.
 *  Certain kinds of updates may cause the Unit to become unusable while the
 *  update is in progress.
 *
 *  Value: "UNIT_STATE_UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_State_UnitStateUpdating;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_Unit.systemManagedState

/**
 *  Unit has dependents attached.
 *
 *  Value: "SYSTEM_MANAGED_STATE_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateActive;
/**
 *  Unit has no dependencies attached, and attachment is not allowed.
 *
 *  Value: "SYSTEM_MANAGED_STATE_DECOMMISSIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateDecommissioned;
/**
 *  Unit has no dependencies attached, but attachment is allowed.
 *
 *  Value: "SYSTEM_MANAGED_STATE_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateInactive;
/** Value: "SYSTEM_MANAGED_STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitCondition.status

/**
 *  Condition is false.
 *
 *  Value: "STATUS_FALSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Status_StatusFalse;
/**
 *  Condition is true.
 *
 *  Value: "STATUS_TRUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Status_StatusTrue;
/**
 *  Condition is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Status_StatusUnknown;
/**
 *  Condition status is unspecified.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitCondition.type

/**
 *  Condition type is operationError. True when the last unit operation fails
 *  with a non-ignorable error.
 *
 *  Value: "TYPE_OPERATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Type_TypeOperationError;
/**
 *  Condition type is provisioned.
 *
 *  Value: "TYPE_PROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Type_TypeProvisioned;
/**
 *  Condition type is ready.
 *
 *  Value: "TYPE_READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Type_TypeReady;
/**
 *  Condition type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Type_TypeUnspecified;
/**
 *  Condition type is updating.
 *
 *  Value: "TYPE_UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitCondition_Type_TypeUpdating;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitOperation.errorCategory

/**
 *  Unit operation error category is fatal
 *
 *  Value: "FATAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Fatal;
/**
 *  Unit operation error category is ignorable
 *
 *  Value: "IGNORABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Ignorable;
/**
 *  Unit operation error category is not applicable, or it is not an error
 *
 *  Value: "NOT_APPLICABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_NotApplicable;
/**
 *  Unit operation error category is retriable
 *
 *  Value: "RETRIABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Retriable;
/**
 *  Unit operation error category is standard, counts towards Rollout error
 *  budget
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Standard;
/**
 *  Unit operation error category is unspecified
 *
 *  Value: "UNIT_OPERATION_ERROR_CATEGORY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_UnitOperationErrorCategoryUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitOperation.state

/**
 *  Unit operation was cancelled.
 *
 *  Value: "UNIT_OPERATION_STATE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateCancelled;
/**
 *  Unit operation has failed.
 *
 *  Value: "UNIT_OPERATION_STATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateFailed;
/**
 *  Unit operation is accepted but not ready to run.
 *
 *  Value: "UNIT_OPERATION_STATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStatePending;
/**
 *  Unit operation is running.
 *
 *  Value: "UNIT_OPERATION_STATE_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateRunning;
/**
 *  Unit operation is accepted and scheduled.
 *
 *  Value: "UNIT_OPERATION_STATE_SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateScheduled;
/**
 *  Unit operation has completed successfully.
 *
 *  Value: "UNIT_OPERATION_STATE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateSucceeded;
/** Value: "UNIT_OPERATION_STATE_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateUnknown;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitOperationCondition.status

/**
 *  Condition is false.
 *
 *  Value: "STATUS_FALSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusFalse;
/**
 *  Condition is true.
 *
 *  Value: "STATUS_TRUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusTrue;
/**
 *  Condition is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusUnknown;
/**
 *  Condition status is unspecified.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitOperationCondition.type

/**
 *  Condition type is cancelled.
 *
 *  Value: "TYPE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeCancelled;
/**
 *  Condition type is running.
 *
 *  Value: "TYPE_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeRunning;
/**
 *  Condition type is scheduled.
 *
 *  Value: "TYPE_SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeScheduled;
/**
 *  Condition type is succeeded.
 *
 *  Value: "TYPE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeSucceeded;
/**
 *  Condition type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSaaSServiceManagement_UnitVariable.type

/**
 *  Variable type is bool.
 *
 *  Value: "BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitVariable_Type_Bool;
/**
 *  Variable type is int.
 *
 *  Value: "INT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitVariable_Type_Int;
/**
 *  Variable type is string.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitVariable_Type_String;
/**
 *  Variable type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSaaSServiceManagement_UnitVariable_Type_TypeUnspecified;

/**
 *  Represents the aggregation of a set of population of like records by a
 *  certain group. For example, a collection of unit counts can be aggregated
 *  and grouped by their state.
 */
@interface GTLRSaaSServiceManagement_Aggregate : GTLRObject

/**
 *  Required. Number of records in the group.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Required. Group by which to aggregate. */
@property(nonatomic, copy, nullable) NSString *group;

@end


/**
 *  Blueprints are OCI Images that contain all of the artifacts needed to
 *  provision a unit. Metadata such as, type of the engine used to actuate the
 *  blueprint (e.g. terraform, helm etc) and version will come from the image
 *  manifest. If the hostname is omitted, it will be assumed to be the regional
 *  path to Artifact Registry (eg. us-east1-docker.pkg.dev).
 */
@interface GTLRSaaSServiceManagement_Blueprint : GTLRObject

/**
 *  Output only. Type of the engine used to actuate the blueprint. e.g.
 *  terraform, helm etc.
 */
@property(nonatomic, copy, nullable) NSString *engine;

/**
 *  Optional. Immutable. URI to a blueprint used by the Unit (required unless
 *  unitKind or release is set).
 */
@property(nonatomic, copy, nullable) NSString *package;

/** Output only. Version metadata if present on the blueprint. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Dependency represent a single dependency with another unit kind by alias.
 */
@interface GTLRSaaSServiceManagement_Dependency : GTLRObject

/** Required. An alias for the dependency. Used for input variable mapping. */
@property(nonatomic, copy, nullable) NSString *alias;

/** Required. Immutable. The unit kind of the dependency. */
@property(nonatomic, copy, nullable) NSString *unitKind;

@end


/**
 *  Deprovision is the unit operation that deprovision the underlying resources
 *  represented by a Unit. Can only execute if the Unit is currently
 *  provisioned.
 */
@interface GTLRSaaSServiceManagement_Deprovision : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRSaaSServiceManagement_Empty : GTLRObject
@end


/**
 *  The configuration for error budget. If the number of failed units exceeds
 *  max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
 */
@interface GTLRSaaSServiceManagement_ErrorBudget : GTLRObject

/**
 *  Optional. The maximum number of failed units allowed in a location without
 *  pausing the rollout.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowedCount;

/**
 *  Optional. The maximum percentage of units allowed to fail (0, 100] within a
 *  location without pausing the rollout.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowedPercentage;

@end


/**
 *  Output variables whose values will be passed on to dependencies
 */
@interface GTLRSaaSServiceManagement_FromMapping : GTLRObject

/**
 *  Required. Alias of the dependency that the outputVariable will pass its
 *  value to
 */
@property(nonatomic, copy, nullable) NSString *dependency;

/** Required. Name of the outputVariable on the dependency */
@property(nonatomic, copy, nullable) NSString *outputVariable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRSaaSServiceManagement_GoogleCloudLocationLocation : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_GoogleCloudLocationLocation_Metadata : GTLRObject
@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_GoogleCloudLocationLocation *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response structure for the ListReleases method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListReleasesResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent ListReleases
 *  call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting releases.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Release *> *releases;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListRolloutKinds method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rolloutKinds" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListRolloutKindsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent
 *  ListRolloutKinds call to list the next page. If empty, there are no more
 *  pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting rollout kinds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_RolloutKind *> *rolloutKinds;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListRollouts method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rollouts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListRolloutsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent ListRollouts
 *  call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting rollouts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Rollout *> *rollouts;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListSaas method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "saas" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListSaasResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent ListSaas
 *  call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting saas.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Saas *> *saas;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListTenants method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tenants" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListTenantsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent ListTenants
 *  call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting tenants.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Tenant *> *tenants;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListUnitKinds method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "unitKinds" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListUnitKindsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent
 *  ListUnitKinds call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting unit kinds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitKind *> *unitKinds;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListUnitOperations method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "unitOperations" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRSaaSServiceManagement_ListUnitOperationsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent
 *  ListUnitOperations call to list the next page. If empty, there are no more
 *  pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting unit operations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitOperation *> *unitOperations;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response structure for the ListUnits method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "units" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSaaSServiceManagement_ListUnitsResponse : GTLRCollectionObject

/**
 *  If present, the next page token can be provided to a subsequent ListUnits
 *  call to list the next page. If empty, there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting units.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Unit *> *units;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Location information that the service is available in.
 */
@interface GTLRSaaSServiceManagement_Location : GTLRObject

/** Optional. Name of location. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Captures requested directives for performing future maintenance on the unit.
 *  This includes a request for the unit to skip maintenance for a period of
 *  time and remain pinned to its current release as well as controls for
 *  postponing maintenance scheduled in future.
 */
@interface GTLRSaaSServiceManagement_MaintenanceSettings : GTLRObject

/**
 *  Optional. If present, it fixes the release on the unit until the given time;
 *  i.e. changes to the release field will be rejected. Rollouts should and will
 *  also respect this by not requesting an upgrade in the first place.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *pinnedUntilTime;

@end


/**
 *  Provision is the unit operation that provision the underlying resources
 *  represented by a Unit. Can only execute if the Unit is not currently
 *  provisioned.
 */
@interface GTLRSaaSServiceManagement_Provision : GTLRObject

/** Optional. Set of input variables. Maximum 100. (optional) */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *inputVariables;

/**
 *  Optional. Reference to the Release object to use for the Unit. (optional).
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

@end


/**
 *  A new version to be propagated and deployed to units. This includes pointers
 *  to packaged blueprints for actuation (e.g Helm or Terraform configuration
 *  packages) via artifact registry.
 */
@interface GTLRSaaSServiceManagement_Release : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Release_Annotations *annotations;

/**
 *  Optional. Blueprints are OCI Images that contain all of the artifacts needed
 *  to provision a unit.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Blueprint *blueprint;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Mapping of input variables to default values. Maximum 100 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *inputVariableDefaults;

/**
 *  Optional. Output only. List of input variables declared on the blueprint and
 *  can be present with their values on the unit spec
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *inputVariables;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Release_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/releases/{release}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Output only. List of output variables declared on the blueprint
 *  and can be present with their values on the unit status
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *outputVariables;

/**
 *  Optional. Set of requirements to be fulfilled on the Unit when using this
 *  Release.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_ReleaseRequirements *releaseRequirements;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Required. Immutable. Reference to the UnitKind this Release corresponds to
 *  (required and immutable once created).
 */
@property(nonatomic, copy, nullable) NSString *unitKind;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Release_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Release_Labels : GTLRObject
@end


/**
 *  Set of requirements to be fulfilled on the Unit when using this Release.
 */
@interface GTLRSaaSServiceManagement_ReleaseRequirements : GTLRObject

/**
 *  Optional. A list of releases from which a unit can be upgraded to this one
 *  (optional). If left empty no constraints will be applied. When provided,
 *  unit upgrade requests to this release will check and enforce this
 *  constraint.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *upgradeableFromReleases;

@end


/**
 *  Represents a single rollout execution and its results
 */
@interface GTLRSaaSServiceManagement_Rollout : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Rollout_Annotations *annotations;

/**
 *  Optional. Requested change to the execution of this rollout. Default
 *  RolloutControl.action is ROLLOUT_ACTION_RUN meaning the rollout will be
 *  executed to completion while progressing through all natural Rollout States
 *  (such as RUNNING -> SUCCEEDED or RUNNING -> FAILED). Requests can only be
 *  made when the Rollout is in a non-terminal state.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_RolloutControl *control;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Output only. The time when the rollout finished execution
 *  (regardless of success, failure, or cancellation). Will be empty if the
 *  rollout hasn't finished yet. Once set, the rollout is in terminal state and
 *  all the results are final.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Rollout_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/rollout/{rollout_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Output only. The direct parent rollout that this rollout is
 *  stemming from. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/rollouts/{rollout_id}"
 */
@property(nonatomic, copy, nullable) NSString *parentRollout;

/**
 *  Optional. Immutable. Name of the Release that gets rolled out to target
 *  Units. Required if no other type of release is specified.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/**
 *  Optional. Immutable. Name of the RolloutKind this rollout is stemming from
 *  and adhering to.
 */
@property(nonatomic, copy, nullable) NSString *rolloutKind;

/**
 *  Optional. The strategy used for executing this Rollout. This strategy will
 *  override whatever strategy is specified in the RolloutType. If not specified
 *  on creation, the strategy from RolloutType will be used. There are two
 *  supported values strategies which are used to control -
 *  "Google.Cloud.Simple.AllAtOnce" - "Google.Cloud.Simple.OneLocationAtATime" A
 *  rollout with one of these simple strategies will rollout across all
 *  locations defined in the targeted UnitKind's Saas Locations.
 */
@property(nonatomic, copy, nullable) NSString *rolloutOrchestrationStrategy;

/**
 *  Optional. Output only. The root rollout that this rollout is stemming from.
 *  The resource name (full URI of the resource) following the standard naming
 *  scheme: "projects/{project}/locations/{location}/rollouts/{rollout_id}"
 */
@property(nonatomic, copy, nullable) NSString *rootRollout;

/**
 *  Optional. Output only. The time when the rollout started executing. Will be
 *  empty if the rollout hasn't started yet.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Current state of the rollout.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateCancelled
 *        Rollout has been canceled. (Value: "ROLLOUT_STATE_CANCELLED")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateCancelling
 *        Rollout is being canceled. (Value: "ROLLOUT_STATE_CANCELLING")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateFailed
 *        Rollout has failed. (Value: "ROLLOUT_STATE_FAILED")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStatePaused
 *        Rollout has been paused. (Value: "ROLLOUT_STATE_PAUSED")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStatePausing
 *        Rollout is being paused. (Value: "ROLLOUT_STATE_PAUSING")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateResuming
 *        Rollout is being resumed. (Value: "ROLLOUT_STATE_RESUMING")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateRunning
 *        Rollout is in progress. (Value: "ROLLOUT_STATE_RUNNING")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateSucceeded
 *        Rollout completed successfully. (Value: "ROLLOUT_STATE_SUCCEEDED")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateUnspecified
 *        Unspecified state. (Value: "ROLLOUT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSaaSServiceManagement_Rollout_State_RolloutStateWaiting
 *        Rollout is waiting for some condition to be met before starting.
 *        (Value: "ROLLOUT_STATE_WAITING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Human readable message indicating details about the last state
 *  transition.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/**
 *  Optional. Output only. The time when the rollout transitioned into its
 *  current state.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTransitionTime;

/** Optional. Output only. Details about the progress of the rollout. */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_RolloutStats *stats;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Optional. CEL(https://github.com/google/cel-spec) formatted filter string
 *  against Unit. The filter will be applied to determine the eligible unit
 *  population. This filter can only reduce, but not expand the scope of the
 *  rollout. If not provided, the unit_filter from the RolloutType will be used.
 */
@property(nonatomic, copy, nullable) NSString *unitFilter;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Rollout_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Rollout_Labels : GTLRObject
@end


/**
 *  RolloutControl provides a way to request a change to the execution of a
 *  Rollout by pausing or canceling it.
 */
@interface GTLRSaaSServiceManagement_RolloutControl : GTLRObject

/**
 *  Required. Action to be performed on the Rollout. The default behavior is to
 *  run the rollout until it naturally reaches a terminal state.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionCancel
 *        Cancel the Rollout permanently. (Value: "ROLLOUT_ACTION_CANCEL")
 *    @arg @c kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionPause
 *        Pause the Rollout until it is resumed (i.e. RUN is requested). (Value:
 *        "ROLLOUT_ACTION_PAUSE")
 *    @arg @c kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionRun
 *        Run the Rollout until it naturally reaches a terminal state. A rollout
 *        requested to run will progress through all natural Rollout States
 *        (such as RUNNING -> SUCCEEDED or RUNNING -> FAILED). If retriable
 *        errors are encountered during the rollout, the rollout will paused by
 *        default and can be resumed by re-requesting this RUN action. (Value:
 *        "ROLLOUT_ACTION_RUN")
 *    @arg @c kGTLRSaaSServiceManagement_RolloutControl_Action_RolloutActionUnspecified
 *        Unspecified action, will be treated as RUN by default. (Value:
 *        "ROLLOUT_ACTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Optional. Parameters for the RUN action. It is an error to specify this if
 *  the RolloutAction is not set to RUN. By default, the rollout will retry
 *  failed operations when resumed.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_RunRolloutActionParams *runParams;

@end


/**
 *  An object that describes various settings of Rollout execution. Includes
 *  built-in policies across GCP and GDC, and customizable policies.
 */
@interface GTLRSaaSServiceManagement_RolloutKind : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_RolloutKind_Annotations *annotations;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The configuration for error budget. If the number of failed units
 *  exceeds max(allowed_count, allowed_ratio * total_units), the rollout will be
 *  paused. If not set, all units will be attempted to be updated regardless of
 *  the number of failures encountered.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_ErrorBudget *errorBudget;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_RolloutKind_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The strategy used for executing a Rollout. This is a required
 *  field. There are two supported values strategies which are used to control -
 *  "Google.Cloud.Simple.AllAtOnce" - "Google.Cloud.Simple.OneLocationAtATime" A
 *  rollout with one of these simple strategies will rollout across all
 *  locations defined in the associated UnitKind's Saas Locations.
 */
@property(nonatomic, copy, nullable) NSString *rolloutOrchestrationStrategy;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Optional. CEL(https://github.com/google/cel-spec) formatted filter string
 *  against Unit. The filter will be applied to determine the eligible unit
 *  population. This filter can only reduce, but not expand the scope of the
 *  rollout.
 */
@property(nonatomic, copy, nullable) NSString *unitFilter;

/**
 *  Required. Immutable. UnitKind that this rollout kind corresponds to.
 *  Rollouts stemming from this rollout kind will target the units of this unit
 *  kind. In other words, this defines the population of target units to be
 *  upgraded by rollouts.
 */
@property(nonatomic, copy, nullable) NSString *unitKind;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. The config for updating the unit kind. By default, the unit kind
 *  will be updated on the rollout start.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyNever
 *        Never update the unit kind. (Value: "UPDATE_UNIT_KIND_STRATEGY_NEVER")
 *    @arg @c kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyOnStart
 *        Update the unit kind strategy on the rollout start. (Value:
 *        "UPDATE_UNIT_KIND_STRATEGY_ON_START")
 *    @arg @c kGTLRSaaSServiceManagement_RolloutKind_UpdateUnitKindStrategy_UpdateUnitKindStrategyUnspecified
 *        Strategy unspecified. (Value: "UPDATE_UNIT_KIND_STRATEGY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *updateUnitKindStrategy;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_RolloutKind_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_RolloutKind_Labels : GTLRObject
@end


/**
 *  RolloutStats contains information about the progress of a rollout.
 */
@interface GTLRSaaSServiceManagement_RolloutStats : GTLRObject

/**
 *  Output only. A breakdown of the progress of operations triggered by the
 *  rollout. Provides a count of Operations by their state. This can be used to
 *  determine the number of units which have been updated, or are scheduled to
 *  be updated. There will be at most one entry per group. Possible values for
 *  operation groups are: - "SCHEDULED" - "PENDING" - "RUNNING" - "SUCCEEDED" -
 *  "FAILED" - "CANCELLED"
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Aggregate *> *operationsByState;

@end


/**
 *  Parameters for the RUN action controlling the behavior of the rollout when
 *  it is resumed from a PAUSED state.
 */
@interface GTLRSaaSServiceManagement_RunRolloutActionParams : GTLRObject

/**
 *  Required. If true, the rollout will retry failed operations when resumed.
 *  This is applicable only the current state of the Rollout is PAUSED and the
 *  requested action is RUN.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retryFailedOperations;

@end


/**
 *  Saas is a representation of a SaaS service managed by the Producer.
 */
@interface GTLRSaaSServiceManagement_Saas : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Saas_Annotations *annotations;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Saas_Labels *labels;

/**
 *  Optional. List of locations that the service is available in. Rollout refers
 *  to the list to generate a rollout plan.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Location *> *locations;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/saas/{saas}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Saas_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Saas_Labels : GTLRObject
@end


/**
 *  A time specification to schedule the maintenance.
 */
@interface GTLRSaaSServiceManagement_Schedule : GTLRObject

/**
 *  Optional. Start of operation. If not set, will be set to the start of the
 *  next window. (optional)
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Tenant represents the service producer side of an instance of the service
 *  created based on a request from a consumer. In a typical scenario a Tenant
 *  has a one-to-one mapping with a resource given out to a service consumer.
 *  Example: tenant: name: "projects/svc1/locations/loc/tenants/inst-068afff8"
 *  consumer_resource: "projects/gshoe/locations/loc/shoes/black-shoe"
 */
@interface GTLRSaaSServiceManagement_Tenant : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Tenant_Annotations *annotations;

/**
 *  Optional. Immutable. A reference to the consumer resource this SaaS Tenant
 *  is representing. The relationship with a consumer resource can be used by
 *  SaaS Runtime for retrieving consumer-defined settings and policies such as
 *  maintenance policies (using Unified Maintenance Policy API).
 */
@property(nonatomic, copy, nullable) NSString *consumerResource;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Tenant_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/tenants/{tenant}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Immutable. A reference to the Saas that defines the product
 *  (managed service) that the producer wants to manage with SaaS Runtime. Part
 *  of the SaaS Runtime common data model.
 */
@property(nonatomic, copy, nullable) NSString *saas;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Tenant_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Tenant_Labels : GTLRObject
@end


/**
 *  Input variables whose values will be passed on to dependencies
 */
@interface GTLRSaaSServiceManagement_ToMapping : GTLRObject

/**
 *  Required. Alias of the dependency that the inputVariable will pass its value
 *  to
 */
@property(nonatomic, copy, nullable) NSString *dependency;

/**
 *  Optional. Tells SaaS Runtime if this mapping should be used during lookup or
 *  not
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreForLookup;

/** Required. Name of the inputVariable on the dependency */
@property(nonatomic, copy, nullable) NSString *inputVariable;

@end


/**
 *  A unit of deployment that has its lifecycle via a CRUD API using an
 *  actuation engine under the hood (e.g. based on Terraform, Helm or a custom
 *  implementation provided by a service producer). A building block of a SaaS
 *  Tenant.
 */
@interface GTLRSaaSServiceManagement_Unit : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Unit_Annotations *annotations;

/**
 *  Optional. Output only. A set of conditions which indicate the various
 *  conditions this resource can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitCondition *> *conditions;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Output only. Set of dependencies for this unit. Maximum 10. */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitDependency *> *dependencies;

/**
 *  Optional. Output only. List of Units that depend on this unit. Unit can only
 *  be deprovisioned if this list is empty. Maximum 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitDependency *> *dependents;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Output only. Indicates the current input variables deployed by the
 *  unit
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *inputVariables;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Unit_Labels *labels;

/**
 *  Optional. Captures requested directives for performing future maintenance on
 *  the unit. This includes a request for the unit to skip maintenance for a
 *  period of time and remain pinned to its current release as well as controls
 *  for postponing maintenance scheduled in future.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_MaintenanceSettings *maintenance;

/**
 *  Optional. Immutable. Indicates whether the Unit life cycle is controlled by
 *  the user or by the system. Immutable once created.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeSystem
 *        The system will decide when to deprovision and delete the unit. User
 *        still can deprovision or delete the unit manually. (Value:
 *        "MANAGEMENT_MODE_SYSTEM")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeUnspecified
 *        Value "MANAGEMENT_MODE_UNSPECIFIED"
 *    @arg @c kGTLRSaaSServiceManagement_Unit_ManagementMode_ManagementModeUser
 *        Unit's lifecycle is managed by the user. (Value:
 *        "MANAGEMENT_MODE_USER")
 */
@property(nonatomic, copy, nullable) NSString *managementMode;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/units/{unit}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Output only. List of concurrent UnitOperations that are operating
 *  on this Unit.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ongoingOperations;

/**
 *  Optional. Output only. Set of key/value pairs corresponding to output
 *  variables from execution of actuation templates. The variables are declared
 *  in actuation configs (e.g in helm chart or terraform) and the values are
 *  fetched and returned by the actuation engine upon completion of execution.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *outputVariables;

/**
 *  Optional. Output only. List of pending (wait to be executed) UnitOperations
 *  for this unit.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pendingOperations;

/**
 *  Optional. Output only. The current Release object for this Unit.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/** Optional. Output only. List of scheduled UnitOperations for this unit. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scheduledOperations;

/**
 *  Optional. Output only. Current lifecycle state of the resource (e.g. if it's
 *  being created or ready to use).
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateDeprovisioning Unit
 *        is being deleted. (Value: "UNIT_STATE_DEPROVISIONING")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateError Unit has
 *        error, when it is not ready and some error operation (Value:
 *        "UNIT_STATE_ERROR")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateNotProvisioned Unit
 *        is not provisioned. (Value: "UNIT_STATE_NOT_PROVISIONED")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateProvisioning Unit
 *        is being provisioned. (Value: "UNIT_STATE_PROVISIONING")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateReady Unit has been
 *        provisioned and is ready for use (Value: "UNIT_STATE_READY")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateUnspecified
 *        Unspecified state. (Value: "UNIT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_State_UnitStateUpdating Unit is
 *        being updated. This is typically when a unit is being upgraded to a
 *        new release or some of the input variables on the Unit is being
 *        changed. Certain kinds of updates may cause the Unit to become
 *        unusable while the update is in progress. (Value:
 *        "UNIT_STATE_UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. Output only. If set, indicates the time when the system will start
 *  removing the unit.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *systemCleanupAt;

/**
 *  Optional. Output only. Indicates the system managed state of the unit.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateActive
 *        Unit has dependents attached. (Value: "SYSTEM_MANAGED_STATE_ACTIVE")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateDecommissioned
 *        Unit has no dependencies attached, and attachment is not allowed.
 *        (Value: "SYSTEM_MANAGED_STATE_DECOMMISSIONED")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateInactive
 *        Unit has no dependencies attached, but attachment is allowed. (Value:
 *        "SYSTEM_MANAGED_STATE_INACTIVE")
 *    @arg @c kGTLRSaaSServiceManagement_Unit_SystemManagedState_SystemManagedStateUnspecified
 *        Value "SYSTEM_MANAGED_STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *systemManagedState;

/**
 *  Optional. Reference to the Saas Tenant resource this unit belongs to. This
 *  for example informs the maintenance policies to use for scheduling future
 *  updates on a unit. (optional and immutable once created)
 */
@property(nonatomic, copy, nullable) NSString *tenant;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Optional. Reference to the UnitKind this Unit belongs to. Immutable once
 *  set.
 */
@property(nonatomic, copy, nullable) NSString *unitKind;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Unit_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_Unit_Labels : GTLRObject
@end


/**
 *  UnitCondition describes the status of an Unit. UnitCondition is individual
 *  components that contribute to an overall state.
 */
@interface GTLRSaaSServiceManagement_UnitCondition : GTLRObject

/** Required. Last time the condition transited from one status to another. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastTransitionTime;

/**
 *  Required. Human readable message indicating details about the last
 *  transition.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** Required. Brief reason for the condition's last transition. */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Required. Status of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Status_StatusFalse
 *        Condition is false. (Value: "STATUS_FALSE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Status_StatusTrue
 *        Condition is true. (Value: "STATUS_TRUE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Status_StatusUnknown
 *        Condition is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Status_StatusUnspecified
 *        Condition status is unspecified. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Required. Type of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Type_TypeOperationError
 *        Condition type is operationError. True when the last unit operation
 *        fails with a non-ignorable error. (Value: "TYPE_OPERATION_ERROR")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Type_TypeProvisioned
 *        Condition type is provisioned. (Value: "TYPE_PROVISIONED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Type_TypeReady Condition
 *        type is ready. (Value: "TYPE_READY")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Type_TypeUnspecified
 *        Condition type is unspecified. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitCondition_Type_TypeUpdating
 *        Condition type is updating. (Value: "TYPE_UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Set of dependencies for this unit. Maximum 10.
 */
@interface GTLRSaaSServiceManagement_UnitDependency : GTLRObject

/** Output only. Alias for the name of the dependency. */
@property(nonatomic, copy, nullable) NSString *alias;

/** Output only. A reference to the Unit object. */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  Definition of a Unit. Units belonging to the same UnitKind are managed
 *  together; for example they follow the same release model (blueprints,
 *  versions etc.) and are typically rolled out together.
 */
@interface GTLRSaaSServiceManagement_UnitKind : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_UnitKind_Annotations *annotations;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A reference to the Release object to use as default for creating
 *  new units of this UnitKind (optional). If not specified, a new unit must
 *  explicitly reference which release to use for its creation.
 */
@property(nonatomic, copy, nullable) NSString *defaultRelease;

/**
 *  Optional. Immutable. List of other unit kinds that this release will depend
 *  on. Dependencies will be automatically provisioned if not found. Maximum 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_Dependency *> *dependencies;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. List of inputVariables for this release that will either be
 *  retrieved from a dependency’s outputVariables, or will be passed on to a
 *  dependency’s inputVariables. Maximum 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_VariableMapping *> *inputVariableMappings;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_UnitKind_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/unitKinds/{unitKind}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. List of outputVariables for this unit kind will be passed to this
 *  unit's outputVariables. Maximum 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_VariableMapping *> *outputVariableMappings;

/**
 *  Required. Immutable. A reference to the Saas that defines the product
 *  (managed service) that the producer wants to manage with SaaS Runtime. Part
 *  of the SaaS Runtime common data model. Immutable once set.
 */
@property(nonatomic, copy, nullable) NSString *saas;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_UnitKind_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_UnitKind_Labels : GTLRObject
@end


/**
 *  UnitOperation encapsulates the intent of changing/interacting with the
 *  service component represented by the specific Unit. Multiple UnitOperations
 *  can be created (requested) and scheduled in the future, however only one
 *  will be allowed to execute at a time (that can change in the future for
 *  non-mutating operations). UnitOperations allow different actors interacting
 *  with the same unit to focus only on the change they have requested. This is
 *  a base object that contains the common fields in all unit operations. Next:
 *  19
 */
@interface GTLRSaaSServiceManagement_UnitOperation : GTLRObject

/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_UnitOperation_Annotations *annotations;

/**
 *  Optional. When true, attempt to cancel the operation. Cancellation may fail
 *  if the operation is already executing. (Optional)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancel;

/**
 *  Optional. Output only. A set of conditions which indicate the various
 *  conditions this resource can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitOperationCondition *> *conditions;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Deprovision *deprovision;

/**
 *  Optional. Output only. The engine state for on-going deployment engine
 *  operation(s). This field is opaque for external usage.
 */
@property(nonatomic, copy, nullable) NSString *engineState;

/**
 *  Optional. Output only. UnitOperationErrorCategory describe the error
 *  category.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Fatal Unit
 *        operation error category is fatal (Value: "FATAL")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Ignorable
 *        Unit operation error category is ignorable (Value: "IGNORABLE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_NotApplicable
 *        Unit operation error category is not applicable, or it is not an error
 *        (Value: "NOT_APPLICABLE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Retriable
 *        Unit operation error category is retriable (Value: "RETRIABLE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_Standard
 *        Unit operation error category is standard, counts towards Rollout
 *        error budget (Value: "STANDARD")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_ErrorCategory_UnitOperationErrorCategoryUnspecified
 *        Unit operation error category is unspecified (Value:
 *        "UNIT_OPERATION_ERROR_CATEGORY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *errorCategory;

/**
 *  Output only. An opaque value that uniquely identifies a version or
 *  generation of a resource. It can be used to confirm that the client and
 *  server agree on the ordering of a resource being written.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_UnitOperation_Labels *labels;

/**
 *  Identifier. The resource name (full URI of the resource) following the
 *  standard naming scheme:
 *  "projects/{project}/locations/{location}/unitOperations/{unitOperation}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Reference to parent resource: UnitOperation. If an operation needs
 *  to create other operations as part of its workflow, each of the child
 *  operations should have this field set to the parent. This can be used for
 *  tracing. (Optional)
 */
@property(nonatomic, copy, nullable) NSString *parentUnitOperation;

@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Provision *provision;

/**
 *  Optional. Specifies which rollout created this Unit Operation. This cannot
 *  be modified and is used for filtering purposes only. If a dependent unit and
 *  unit operation are created as part of another unit operation, they will use
 *  the same rolloutId.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Optional. When to schedule this operation. */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Schedule *schedule;

/**
 *  Optional. Output only. UnitOperationState describes the current state of the
 *  unit operation.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateCancelled
 *        Unit operation was cancelled. (Value:
 *        "UNIT_OPERATION_STATE_CANCELLED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateFailed
 *        Unit operation has failed. (Value: "UNIT_OPERATION_STATE_FAILED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStatePending
 *        Unit operation is accepted but not ready to run. (Value:
 *        "UNIT_OPERATION_STATE_PENDING")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateRunning
 *        Unit operation is running. (Value: "UNIT_OPERATION_STATE_RUNNING")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateScheduled
 *        Unit operation is accepted and scheduled. (Value:
 *        "UNIT_OPERATION_STATE_SCHEDULED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateSucceeded
 *        Unit operation has completed successfully. (Value:
 *        "UNIT_OPERATION_STATE_SUCCEEDED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperation_State_UnitOperationStateUnknown
 *        Value "UNIT_OPERATION_STATE_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The unique identifier of the resource. UID is unique in the
 *  time and space for this resource within the scope of the service. It is
 *  typically generated by the server on successful creation of a resource and
 *  must not be changed. UID is used to uniquely identify resources with
 *  resource name reuses. This should be a UUID4.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Required. Immutable. The Unit a given UnitOperation will act upon. */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Output only. The timestamp when the resource was last updated. Any change to
 *  the resource made by users must refresh this value. Changes to a resource
 *  made by the service should refresh this value.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_Upgrade *upgrade;

@end


/**
 *  Optional. Annotations is an unstructured key-value map stored with a
 *  resource that may be set by external tools to store and retrieve arbitrary
 *  metadata. They are not queryable and should be preserved when modifying
 *  objects. More info: https://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_UnitOperation_Annotations : GTLRObject
@end


/**
 *  Optional. The labels on the resource, which can be used for categorization.
 *  similar to Kubernetes resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSaaSServiceManagement_UnitOperation_Labels : GTLRObject
@end


/**
 *  UnitOperationCondition describes the status of an Unit Operation.
 *  UnitOperationCondition is individual components that contribute to an
 *  overall state.
 */
@interface GTLRSaaSServiceManagement_UnitOperationCondition : GTLRObject

/** Required. Last time the condition transited from one status to another. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastTransitionTime;

/**
 *  Required. Human readable message indicating details about the last
 *  transition.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** Required. Brief reason for the condition's last transition. */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Required. Status of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusFalse
 *        Condition is false. (Value: "STATUS_FALSE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusTrue
 *        Condition is true. (Value: "STATUS_TRUE")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusUnknown
 *        Condition is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Status_StatusUnspecified
 *        Condition status is unspecified. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Required. Type of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeCancelled
 *        Condition type is cancelled. (Value: "TYPE_CANCELLED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeRunning
 *        Condition type is running. (Value: "TYPE_RUNNING")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeScheduled
 *        Condition type is scheduled. (Value: "TYPE_SCHEDULED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeSucceeded
 *        Condition type is succeeded. (Value: "TYPE_SUCCEEDED")
 *    @arg @c kGTLRSaaSServiceManagement_UnitOperationCondition_Type_TypeUnspecified
 *        Condition type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  UnitVariable describes a parameter for a Unit.
 */
@interface GTLRSaaSServiceManagement_UnitVariable : GTLRObject

/**
 *  Optional. Immutable. Name of a supported variable type. Supported types are
 *  string, int, bool.
 *
 *  Likely values:
 *    @arg @c kGTLRSaaSServiceManagement_UnitVariable_Type_Bool Variable type is
 *        bool. (Value: "BOOL")
 *    @arg @c kGTLRSaaSServiceManagement_UnitVariable_Type_Int Variable type is
 *        int. (Value: "INT")
 *    @arg @c kGTLRSaaSServiceManagement_UnitVariable_Type_String Variable type
 *        is string. (Value: "STRING")
 *    @arg @c kGTLRSaaSServiceManagement_UnitVariable_Type_TypeUnspecified
 *        Variable type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Optional. String encoded value for the variable. */
@property(nonatomic, copy, nullable) NSString *value;

/** Required. Immutable. Name of the variable from actuation configs. */
@property(nonatomic, copy, nullable) NSString *variable;

@end


/**
 *  Upgrade is the unit operation that upgrades a provisioned unit, which may
 *  also include the underlying resources represented by a Unit. Can only
 *  execute if the Unit is currently provisioned.
 */
@interface GTLRSaaSServiceManagement_Upgrade : GTLRObject

/** Optional. Set of input variables. Maximum 100. (optional) */
@property(nonatomic, strong, nullable) NSArray<GTLRSaaSServiceManagement_UnitVariable *> *inputVariables;

/**
 *  Optional. Reference to the Release object to use for the Unit. (optional).
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

@end


/**
 *  Mapping of input variables to their respective output variable for
 *  depedenencies
 */
@interface GTLRSaaSServiceManagement_VariableMapping : GTLRObject

/**
 *  Optional. Output variables which will get their values from dependencies
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_FromMapping *from;

/**
 *  Optional. Input variables whose values will be passed on to dependencies.
 */
@property(nonatomic, strong, nullable) GTLRSaaSServiceManagement_ToMapping *to;

/** Required. name of the variable */
@property(nonatomic, copy, nullable) NSString *variable;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
