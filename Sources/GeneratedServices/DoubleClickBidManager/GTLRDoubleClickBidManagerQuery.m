// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   DoubleClick Bid Manager API (doubleclickbidmanager/v2)
// Description:
//   DoubleClick Bid Manager API allows users to manage and create campaigns and
//   reports.
// Documentation:
//   https://developers.google.com/bid-manager/

#import <GoogleAPIClientForREST/GTLRDoubleClickBidManagerQuery.h>

@implementation GTLRDoubleClickBidManagerQuery

@dynamic fields;

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesCreate

+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_Query *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"queries";
  GTLRDoubleClickBidManagerQuery_QueriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Query class];
  query.loggingName = @"doubleclickbidmanager.queries.create";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesDelete

@dynamic queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"queries/{queryId}";
  GTLRDoubleClickBidManagerQuery_QueriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.loggingName = @"doubleclickbidmanager.queries.delete";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesGet

@dynamic queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"queries/{queryId}";
  GTLRDoubleClickBidManagerQuery_QueriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Query class];
  query.loggingName = @"doubleclickbidmanager.queries.get";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesList

@dynamic orderBy, pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"queries";
  GTLRDoubleClickBidManagerQuery_QueriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDoubleClickBidManager_ListQueriesResponse class];
  query.loggingName = @"doubleclickbidmanager.queries.list";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesReportsGet

@dynamic queryId, reportId;

+ (instancetype)queryWithQueryId:(long long)queryId
                        reportId:(long long)reportId {
  NSArray *pathParams = @[
    @"queryId", @"reportId"
  ];
  NSString *pathURITemplate = @"queries/{queryId}/reports/{reportId}";
  GTLRDoubleClickBidManagerQuery_QueriesReportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.reportId = reportId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Report class];
  query.loggingName = @"doubleclickbidmanager.queries.reports.get";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesReportsList

@dynamic orderBy, pageSize, pageToken, queryId;

+ (instancetype)queryWithQueryId:(long long)queryId {
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"queries/{queryId}/reports";
  GTLRDoubleClickBidManagerQuery_QueriesReportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.queryId = queryId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_ListReportsResponse class];
  query.loggingName = @"doubleclickbidmanager.queries.reports.list";
  return query;
}

@end

@implementation GTLRDoubleClickBidManagerQuery_QueriesRun

@dynamic queryId, synchronous;

+ (instancetype)queryWithObject:(GTLRDoubleClickBidManager_RunQueryRequest *)object
                        queryId:(long long)queryId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"queryId" ];
  NSString *pathURITemplate = @"queries/{queryId}:run";
  GTLRDoubleClickBidManagerQuery_QueriesRun *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.queryId = queryId;
  query.expectedObjectClass = [GTLRDoubleClickBidManager_Report class];
  query.loggingName = @"doubleclickbidmanager.queries.run";
  return query;
}

@end
