// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigLake API (biglake/v1)
// Description:
//   The BigLake API provides access to BigLake Metastore, a serverless, fully
//   managed, and highly available metastore for open-source data that can be
//   used for querying Apache Iceberg tables in BigQuery.
// Documentation:
//   https://cloud.google.com/bigquery/

#import <GoogleAPIClientForREST/GTLRBigLakeServiceQuery.h>

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRBigLakeServiceViewBasic                = @"BASIC";
NSString * const kGTLRBigLakeServiceViewFull                 = @"FULL";
NSString * const kGTLRBigLakeServiceViewTableViewUnspecified = @"TABLE_VIEW_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRBigLakeServiceQuery

@dynamic fields;

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsCreate

@dynamic catalogId, parent;

+ (instancetype)queryWithObject:(GTLRBigLakeService_Catalog *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/catalogs";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_Catalog class];
  query.loggingName = @"biglake.projects.locations.catalogs.create";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesCreate

@dynamic databaseId, parent;

+ (instancetype)queryWithObject:(GTLRBigLakeService_Database *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/databases";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_Database class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.create";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Database class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.delete";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Database class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.get";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/databases";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_ListDatabasesResponse class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.list";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBigLakeService_Database *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Database class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.patch";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesCreate

@dynamic parent, tableId;

+ (instancetype)queryWithObject:(GTLRBigLakeService_Table *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tables";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_Table class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.create";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Table class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.delete";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Table class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.get";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesList

@dynamic pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/tables";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_ListTablesResponse class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.list";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBigLakeService_Table *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Table class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.patch";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesRename

@dynamic name;

+ (instancetype)queryWithObject:(GTLRBigLakeService_RenameTableRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rename";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesRename *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Table class];
  query.loggingName = @"biglake.projects.locations.catalogs.databases.tables.rename";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Catalog class];
  query.loggingName = @"biglake.projects.locations.catalogs.delete";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigLakeService_Catalog class];
  query.loggingName = @"biglake.projects.locations.catalogs.get";
  return query;
}

@end

@implementation GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/catalogs";
  GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigLakeService_ListCatalogsResponse class];
  query.loggingName = @"biglake.projects.locations.catalogs.list";
  return query;
}

@end
