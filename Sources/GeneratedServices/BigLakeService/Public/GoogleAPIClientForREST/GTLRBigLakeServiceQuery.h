// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigLake API (biglake/v1)
// Description:
//   The BigLake API provides access to BigLake Metastore, a serverless, fully
//   managed, and highly available metastore for open-source data that can be
//   used for querying Apache Iceberg tables in BigQuery.
// Documentation:
//   https://cloud.google.com/bigquery/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRBigLakeServiceObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Include only table names. This is the default value.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigLakeServiceViewBasic;
/**
 *  Include everything.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigLakeServiceViewFull;
/**
 *  Default value. The API will default to the BASIC view.
 *
 *  Value: "TABLE_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigLakeServiceViewTableViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other BigLake Service query classes.
 */
@interface GTLRBigLakeServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new catalog.
 *
 *  Method: biglake.projects.locations.catalogs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsCreate : GTLRBigLakeServiceQuery

/**
 *  Required. The ID to use for the catalog, which will become the final
 *  component of the catalog's resource name.
 */
@property(nonatomic, copy, nullable) NSString *catalogId;

/**
 *  Required. The parent resource where this catalog will be created. Format:
 *  projects/{project_id_or_number}/locations/{location_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigLakeService_Catalog.
 *
 *  Creates a new catalog.
 *
 *  @param object The @c GTLRBigLakeService_Catalog to include in the query.
 *  @param parent Required. The parent resource where this catalog will be
 *    created. Format: projects/{project_id_or_number}/locations/{location_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_Catalog *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new database.
 *
 *  Method: biglake.projects.locations.catalogs.databases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesCreate : GTLRBigLakeServiceQuery

/**
 *  Required. The ID to use for the database, which will become the final
 *  component of the database's resource name.
 */
@property(nonatomic, copy, nullable) NSString *databaseId;

/**
 *  Required. The parent resource where this database will be created. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigLakeService_Database.
 *
 *  Creates a new database.
 *
 *  @param object The @c GTLRBigLakeService_Database to include in the query.
 *  @param parent Required. The parent resource where this database will be
 *    created. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_Database *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing database specified by the database ID.
 *
 *  Method: biglake.projects.locations.catalogs.databases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesDelete : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the database to delete. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Database.
 *
 *  Deletes an existing database specified by the database ID.
 *
 *  @param name Required. The name of the database to delete. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the database specified by the resource name.
 *
 *  Method: biglake.projects.locations.catalogs.databases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesGet : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the database to retrieve. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Database.
 *
 *  Gets the database specified by the resource name.
 *
 *  @param name Required. The name of the database to retrieve. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all databases in a specified catalog.
 *
 *  Method: biglake.projects.locations.catalogs.databases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesList : GTLRBigLakeServiceQuery

/**
 *  The maximum number of databases to return. The service may return fewer than
 *  this value. If unspecified, at most 50 databases will be returned. The
 *  maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListDatabases` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListDatabases` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of databases. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigLakeService_ListDatabasesResponse.
 *
 *  List all databases in a specified catalog.
 *
 *  @param parent Required. The parent, which owns this collection of databases.
 *    Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing database specified by the database ID.
 *
 *  Method: biglake.projects.locations.catalogs.databases.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesPatch : GTLRBigLakeServiceQuery

/**
 *  Output only. The resource name. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If not set, defaults to all of the fields that are allowed to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigLakeService_Database.
 *
 *  Updates an existing database specified by the database ID.
 *
 *  @param object The @c GTLRBigLakeService_Database to include in the query.
 *  @param name Output only. The resource name. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesPatch
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_Database *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new table.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesCreate : GTLRBigLakeServiceQuery

/**
 *  Required. The parent resource where this table will be created. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The ID to use for the table, which will become the final component
 *  of the table's resource name.
 */
@property(nonatomic, copy, nullable) NSString *tableId;

/**
 *  Fetches a @c GTLRBigLakeService_Table.
 *
 *  Creates a new table.
 *
 *  @param object The @c GTLRBigLakeService_Table to include in the query.
 *  @param parent Required. The parent resource where this table will be
 *    created. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_Table *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing table specified by the table ID.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesDelete : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the table to delete. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Table.
 *
 *  Deletes an existing table specified by the table ID.
 *
 *  @param name Required. The name of the table to delete. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the table specified by the resource name.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesGet : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the table to retrieve. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Table.
 *
 *  Gets the table specified by the resource name.
 *
 *  @param name Required. The name of the table to retrieve. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all tables in a specified database.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesList : GTLRBigLakeServiceQuery

/**
 *  The maximum number of tables to return. The service may return fewer than
 *  this value. If unspecified, at most 50 tables will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListTables` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListTables` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of tables. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The view for the returned tables.
 *
 *  Likely values:
 *    @arg @c kGTLRBigLakeServiceViewTableViewUnspecified Default value. The API
 *        will default to the BASIC view. (Value: "TABLE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRBigLakeServiceViewBasic Include only table names. This is the
 *        default value. (Value: "BASIC")
 *    @arg @c kGTLRBigLakeServiceViewFull Include everything. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBigLakeService_ListTablesResponse.
 *
 *  List all tables in a specified database.
 *
 *  @param parent Required. The parent, which owns this collection of tables.
 *    Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing table specified by the table ID.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesPatch : GTLRBigLakeServiceQuery

/**
 *  Output only. The resource name. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *  If not set, defaults to all of the fields that are allowed to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigLakeService_Table.
 *
 *  Updates an existing table specified by the table ID.
 *
 *  @param object The @c GTLRBigLakeService_Table to include in the query.
 *  @param name Output only. The resource name. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesPatch
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_Table *)object
                           name:(NSString *)name;

@end

/**
 *  Renames an existing table specified by the table ID.
 *
 *  Method: biglake.projects.locations.catalogs.databases.tables.rename
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesRename : GTLRBigLakeServiceQuery

/**
 *  Required. The table's `name` field is used to identify the table to rename.
 *  Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Table.
 *
 *  Renames an existing table specified by the table ID.
 *
 *  @param object The @c GTLRBigLakeService_RenameTableRequest to include in the
 *    query.
 *  @param name Required. The table's `name` field is used to identify the table
 *    to rename. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDatabasesTablesRename
 */
+ (instancetype)queryWithObject:(GTLRBigLakeService_RenameTableRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an existing catalog specified by the catalog ID.
 *
 *  Method: biglake.projects.locations.catalogs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDelete : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the catalog to delete. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Catalog.
 *
 *  Deletes an existing catalog specified by the catalog ID.
 *
 *  @param name Required. The name of the catalog to delete. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the catalog specified by the resource name.
 *
 *  Method: biglake.projects.locations.catalogs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsGet : GTLRBigLakeServiceQuery

/**
 *  Required. The name of the catalog to retrieve. Format:
 *  projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigLakeService_Catalog.
 *
 *  Gets the catalog specified by the resource name.
 *
 *  @param name Required. The name of the catalog to retrieve. Format:
 *    projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all catalogs in a specified project.
 *
 *  Method: biglake.projects.locations.catalogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigLakeServiceBigquery
 *    @c kGTLRAuthScopeBigLakeServiceCloudPlatform
 */
@interface GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsList : GTLRBigLakeServiceQuery

/**
 *  The maximum number of catalogs to return. The service may return fewer than
 *  this value. If unspecified, at most 50 catalogs will be returned. The
 *  maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListCatalogs` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListCatalogs` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of catalogs. Format:
 *  projects/{project_id_or_number}/locations/{location_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigLakeService_ListCatalogsResponse.
 *
 *  List all catalogs in a specified project.
 *
 *  @param parent Required. The parent, which owns this collection of catalogs.
 *    Format: projects/{project_id_or_number}/locations/{location_id}
 *
 *  @return GTLRBigLakeServiceQuery_ProjectsLocationsCatalogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
