// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Solar API (solar/v1)
// Description:
//   Solar API.
// Documentation:
//   https://developers.google.com/maps/documentation/solar

#import <GoogleAPIClientForREST/GTLRSolarQuery.h>

#import <GoogleAPIClientForREST/GTLRSolarObjects.h>

// ----------------------------------------------------------------------------
// Constants

// requiredQuality
NSString * const kGTLRSolarRequiredQualityHigh                 = @"HIGH";
NSString * const kGTLRSolarRequiredQualityImageryQualityUnspecified = @"IMAGERY_QUALITY_UNSPECIFIED";
NSString * const kGTLRSolarRequiredQualityLow                  = @"LOW";
NSString * const kGTLRSolarRequiredQualityMedium               = @"MEDIUM";

// view
NSString * const kGTLRSolarViewDataLayerViewUnspecified   = @"DATA_LAYER_VIEW_UNSPECIFIED";
NSString * const kGTLRSolarViewDsmLayer                   = @"DSM_LAYER";
NSString * const kGTLRSolarViewFullLayers                 = @"FULL_LAYERS";
NSString * const kGTLRSolarViewImageryAndAllFluxLayers    = @"IMAGERY_AND_ALL_FLUX_LAYERS";
NSString * const kGTLRSolarViewImageryAndAnnualFluxLayers = @"IMAGERY_AND_ANNUAL_FLUX_LAYERS";
NSString * const kGTLRSolarViewImageryLayers              = @"IMAGERY_LAYERS";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRSolarQuery

@dynamic fields;

@end

@implementation GTLRSolarQuery_BuildingInsightsFindClosest

@dynamic locationLatitude, locationLongitude, requiredQuality;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"locationLatitude" : @"location.latitude",
    @"locationLongitude" : @"location.longitude"
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/buildingInsights:findClosest";
  GTLRSolarQuery_BuildingInsightsFindClosest *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRSolar_BuildingInsights class];
  query.loggingName = @"solar.buildingInsights.findClosest";
  return query;
}

@end

@implementation GTLRSolarQuery_DataLayersGet

@dynamic locationLatitude, locationLongitude, pixelSizeMeters, radiusMeters,
         requiredQuality, view;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"locationLatitude" : @"location.latitude",
    @"locationLongitude" : @"location.longitude"
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/dataLayers:get";
  GTLRSolarQuery_DataLayersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRSolar_DataLayers class];
  query.loggingName = @"solar.dataLayers.get";
  return query;
}

@end

@implementation GTLRSolarQuery_GeoTiffGet

@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/geoTiff:get";
  GTLRSolarQuery_GeoTiffGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRSolar_HttpBody class];
  query.loggingName = @"solar.geoTiff.get";
  return query;
}

@end
