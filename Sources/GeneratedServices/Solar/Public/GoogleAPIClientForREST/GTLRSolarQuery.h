// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Solar API (solar/v1)
// Description:
//   Solar API.
// Documentation:
//   https://developers.google.com/maps/documentation/solar

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// experiments

/**
 *  Expands the geographic region available for querying solar data.
 *
 *  Value: "EXPANDED_COVERAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarExperimentsExpandedCoverage;
/**
 *  No experiments are specified.
 *
 *  Value: "EXPERIMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarExperimentsExperimentUnspecified;

// ----------------------------------------------------------------------------
// requiredQuality

/**
 *  Solar data is derived from enhanced satellite imagery processed at 0.25
 *  m/pixel.
 *
 *  Value: "BASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarRequiredQualityBase;
/**
 *  Solar data is derived from aerial imagery captured at low-altitude and
 *  processed at 0.1 m/pixel.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarRequiredQualityHigh;
/**
 *  No quality is known.
 *
 *  Value: "IMAGERY_QUALITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarRequiredQualityImageryQualityUnspecified;
/**
 *  Solar data is derived from enhanced satellite imagery processed at 0.25
 *  m/pixel.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarRequiredQualityLow;
/**
 *  Solar data is derived from enhanced aerial imagery captured at high-altitude
 *  and processed at 0.25 m/pixel.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarRequiredQualityMedium;

// ----------------------------------------------------------------------------
// view

/**
 *  Equivalent to FULL.
 *
 *  Value: "DATA_LAYER_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewDataLayerViewUnspecified;
/**
 *  Get the DSM only.
 *
 *  Value: "DSM_LAYER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewDsmLayer;
/**
 *  Get all data.
 *
 *  Value: "FULL_LAYERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewFullLayers;
/**
 *  Get the DSM, RGB, mask, annual flux, and monthly flux.
 *
 *  Value: "IMAGERY_AND_ALL_FLUX_LAYERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewImageryAndAllFluxLayers;
/**
 *  Get the DSM, RGB, mask, and annual flux.
 *
 *  Value: "IMAGERY_AND_ANNUAL_FLUX_LAYERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewImageryAndAnnualFluxLayers;
/**
 *  Get the DSM, RGB, and mask.
 *
 *  Value: "IMAGERY_LAYERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSolarViewImageryLayers;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Solar query classes.
 */
@interface GTLRSolarQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Locates the closest building to a query point. Returns an error with code
 *  `NOT_FOUND` if there are no buildings within approximately 50m of the query
 *  point.
 *
 *  Method: solar.buildingInsights.findClosest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSolarCloudPlatform
 */
@interface GTLRSolarQuery_BuildingInsightsFindClosest : GTLRSolarQuery

/**
 *  Optional. Specifies the pre-GA features to enable.
 *
 *  Likely values:
 *    @arg @c kGTLRSolarExperimentsExperimentUnspecified No experiments are
 *        specified. (Value: "EXPERIMENT_UNSPECIFIED")
 *    @arg @c kGTLRSolarExperimentsExpandedCoverage Expands the geographic
 *        region available for querying solar data. (Value: "EXPANDED_COVERAGE")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *experiments;

/** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
@property(nonatomic, assign) double locationLatitude;

/** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
@property(nonatomic, assign) double locationLongitude;

/**
 *  Optional. The minimum quality level allowed in the results. No result with
 *  lower quality than this will be returned. Not specifying this is equivalent
 *  to restricting to HIGH quality only.
 *
 *  Likely values:
 *    @arg @c kGTLRSolarRequiredQualityImageryQualityUnspecified No quality is
 *        known. (Value: "IMAGERY_QUALITY_UNSPECIFIED")
 *    @arg @c kGTLRSolarRequiredQualityHigh Solar data is derived from aerial
 *        imagery captured at low-altitude and processed at 0.1 m/pixel. (Value:
 *        "HIGH")
 *    @arg @c kGTLRSolarRequiredQualityMedium Solar data is derived from
 *        enhanced aerial imagery captured at high-altitude and processed at
 *        0.25 m/pixel. (Value: "MEDIUM")
 *    @arg @c kGTLRSolarRequiredQualityLow Solar data is derived from enhanced
 *        satellite imagery processed at 0.25 m/pixel. (Value: "LOW")
 *    @arg @c kGTLRSolarRequiredQualityBase Solar data is derived from enhanced
 *        satellite imagery processed at 0.25 m/pixel. (Value: "BASE")
 */
@property(nonatomic, copy, nullable) NSString *requiredQuality;

/**
 *  Fetches a @c GTLRSolar_BuildingInsights.
 *
 *  Locates the closest building to a query point. Returns an error with code
 *  `NOT_FOUND` if there are no buildings within approximately 50m of the query
 *  point.
 *
 *  @return GTLRSolarQuery_BuildingInsightsFindClosest
 */
+ (instancetype)query;

@end

/**
 *  Gets solar information for a region surrounding a location. Returns an error
 *  with code `NOT_FOUND` if the location is outside the coverage area.
 *
 *  Method: solar.dataLayers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSolarCloudPlatform
 */
@interface GTLRSolarQuery_DataLayersGet : GTLRSolarQuery

/**
 *  Optional. Whether to require exact quality of the imagery. If set to false,
 *  the `required_quality` field is interpreted as the minimum required quality,
 *  such that HIGH quality imagery may be returned when `required_quality` is
 *  set to MEDIUM. If set to true, `required_quality` is interpreted as the
 *  exact required quality and only `MEDIUM` quality imagery is returned if
 *  `required_quality` is set to `MEDIUM`.
 */
@property(nonatomic, assign) BOOL exactQualityRequired;

/**
 *  Optional. Specifies the pre-GA experiments to enable.
 *
 *  Likely values:
 *    @arg @c kGTLRSolarExperimentsExperimentUnspecified No experiments are
 *        specified. (Value: "EXPERIMENT_UNSPECIFIED")
 *    @arg @c kGTLRSolarExperimentsExpandedCoverage Expands the geographic
 *        region available for querying solar data. (Value: "EXPANDED_COVERAGE")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *experiments;

/** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
@property(nonatomic, assign) double locationLatitude;

/** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
@property(nonatomic, assign) double locationLongitude;

/**
 *  Optional. The minimum scale, in meters per pixel, of the data to return.
 *  Values of 0.1 (the default, if this field is not set explicitly), 0.25, 0.5,
 *  and 1.0 are supported. Imagery components whose normal resolution is less
 *  than `pixel_size_meters` will be returned at the resolution specified by
 *  `pixel_size_meters`; imagery components whose normal resolution is equal to
 *  or greater than `pixel_size_meters` will be returned at that normal
 *  resolution.
 */
@property(nonatomic, assign) float pixelSizeMeters;

/**
 *  Required. The radius, in meters, defining the region surrounding that centre
 *  point for which data should be returned. The limitations on this value are:
 *  * Any value up to 100m can always be specified. * Values over 100m can be
 *  specified, as long as `radius_meters` <= `pixel_size_meters * 1000`. *
 *  However, for values over 175m, the `DataLayerView` in the request must not
 *  include monthly flux or hourly shade.
 */
@property(nonatomic, assign) float radiusMeters;

/**
 *  Optional. The minimum quality level allowed in the results. No result with
 *  lower quality than this will be returned. Not specifying this is equivalent
 *  to restricting to HIGH quality only.
 *
 *  Likely values:
 *    @arg @c kGTLRSolarRequiredQualityImageryQualityUnspecified No quality is
 *        known. (Value: "IMAGERY_QUALITY_UNSPECIFIED")
 *    @arg @c kGTLRSolarRequiredQualityHigh Solar data is derived from aerial
 *        imagery captured at low-altitude and processed at 0.1 m/pixel. (Value:
 *        "HIGH")
 *    @arg @c kGTLRSolarRequiredQualityMedium Solar data is derived from
 *        enhanced aerial imagery captured at high-altitude and processed at
 *        0.25 m/pixel. (Value: "MEDIUM")
 *    @arg @c kGTLRSolarRequiredQualityLow Solar data is derived from enhanced
 *        satellite imagery processed at 0.25 m/pixel. (Value: "LOW")
 *    @arg @c kGTLRSolarRequiredQualityBase Solar data is derived from enhanced
 *        satellite imagery processed at 0.25 m/pixel. (Value: "BASE")
 */
@property(nonatomic, copy, nullable) NSString *requiredQuality;

/**
 *  Optional. The desired subset of the data to return.
 *
 *  Likely values:
 *    @arg @c kGTLRSolarViewDataLayerViewUnspecified Equivalent to FULL. (Value:
 *        "DATA_LAYER_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRSolarViewDsmLayer Get the DSM only. (Value: "DSM_LAYER")
 *    @arg @c kGTLRSolarViewImageryLayers Get the DSM, RGB, and mask. (Value:
 *        "IMAGERY_LAYERS")
 *    @arg @c kGTLRSolarViewImageryAndAnnualFluxLayers Get the DSM, RGB, mask,
 *        and annual flux. (Value: "IMAGERY_AND_ANNUAL_FLUX_LAYERS")
 *    @arg @c kGTLRSolarViewImageryAndAllFluxLayers Get the DSM, RGB, mask,
 *        annual flux, and monthly flux. (Value: "IMAGERY_AND_ALL_FLUX_LAYERS")
 *    @arg @c kGTLRSolarViewFullLayers Get all data. (Value: "FULL_LAYERS")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRSolar_DataLayers.
 *
 *  Gets solar information for a region surrounding a location. Returns an error
 *  with code `NOT_FOUND` if the location is outside the coverage area.
 *
 *  @return GTLRSolarQuery_DataLayersGet
 */
+ (instancetype)query;

@end

/**
 *  Returns an image by its ID.
 *
 *  Method: solar.geoTiff.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSolarCloudPlatform
 */
@interface GTLRSolarQuery_GeoTiffGet : GTLRSolarQuery

/**
 *  Required. The ID of the asset being requested.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Fetches a @c GTLRSolar_HttpBody.
 *
 *  Returns an image by its ID.
 *
 *  @return GTLRSolarQuery_GeoTiffGet
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
