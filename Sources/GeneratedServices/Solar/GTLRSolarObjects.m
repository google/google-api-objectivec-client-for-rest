// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Solar API (solar/v1)
// Description:
//   Solar API.
// Documentation:
//   https://developers.google.com/maps/documentation/solar

#import <GoogleAPIClientForREST/GTLRSolarObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRSolar_BuildingInsights.imageryQuality
NSString * const kGTLRSolar_BuildingInsights_ImageryQuality_Base = @"BASE";
NSString * const kGTLRSolar_BuildingInsights_ImageryQuality_High = @"HIGH";
NSString * const kGTLRSolar_BuildingInsights_ImageryQuality_ImageryQualityUnspecified = @"IMAGERY_QUALITY_UNSPECIFIED";
NSString * const kGTLRSolar_BuildingInsights_ImageryQuality_Low = @"LOW";
NSString * const kGTLRSolar_BuildingInsights_ImageryQuality_Medium = @"MEDIUM";

// GTLRSolar_DataLayers.imageryQuality
NSString * const kGTLRSolar_DataLayers_ImageryQuality_Base     = @"BASE";
NSString * const kGTLRSolar_DataLayers_ImageryQuality_High     = @"HIGH";
NSString * const kGTLRSolar_DataLayers_ImageryQuality_ImageryQualityUnspecified = @"IMAGERY_QUALITY_UNSPECIFIED";
NSString * const kGTLRSolar_DataLayers_ImageryQuality_Low      = @"LOW";
NSString * const kGTLRSolar_DataLayers_ImageryQuality_Medium   = @"MEDIUM";

// GTLRSolar_Panel.orientation
NSString * const kGTLRSolar_Panel_Orientation_Landscape        = @"LANDSCAPE";
NSString * const kGTLRSolar_Panel_Orientation_Portrait         = @"PORTRAIT";
NSString * const kGTLRSolar_Panel_Orientation_SolarPanelOrientationUnspecified = @"SOLAR_PANEL_ORIENTATION_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRSolar_BuildingInsights
//

@implementation GTLRSolar_BuildingInsights
@dynamic administrativeArea, boundingBox, center, imageryDate,
         imageryProcessedDate, imageryQuality, name, postalCode, regionCode,
         solarPotential, statisticalArea;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_CashPurchaseSavings
//

@implementation GTLRSolar_CashPurchaseSavings
@dynamic outOfPocketCost, paybackYears, rebateValue, savings, upfrontCost;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_DataLayers
//

@implementation GTLRSolar_DataLayers
@dynamic annualFluxUrl, dsmUrl, hourlyShadeUrls, imageryDate,
         imageryProcessedDate, imageryQuality, maskUrl, monthlyFluxUrl, rgbUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"hourlyShadeUrls" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_Date
//

@implementation GTLRSolar_Date
@dynamic day, month, year;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_FinancedPurchaseSavings
//

@implementation GTLRSolar_FinancedPurchaseSavings
@dynamic annualLoanPayment, loanInterestRate, rebateValue, savings;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_FinancialAnalysis
//

@implementation GTLRSolar_FinancialAnalysis
@dynamic averageKwhPerMonth, cashPurchaseSavings, defaultBill,
         financedPurchaseSavings, financialDetails, leasingSavings, monthlyBill,
         panelConfigIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_FinancialDetails
//

@implementation GTLRSolar_FinancialDetails
@dynamic costOfElectricityWithoutSolar, federalIncentive, initialAcKwhPerYear,
         lifetimeSrecTotal, netMeteringAllowed, percentageExportedToGrid,
         remainingLifetimeUtilityBill, solarPercentage, stateIncentive,
         utilityIncentive;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_HttpBody
//

@implementation GTLRSolar_HttpBody
@dynamic contentType, data, extensions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extensions" : [GTLRSolar_HttpBody_Extensions_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_HttpBody_Extensions_Item
//

@implementation GTLRSolar_HttpBody_Extensions_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_LatLng
//

@implementation GTLRSolar_LatLng
@dynamic latitude, longitude;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_LatLngBox
//

@implementation GTLRSolar_LatLngBox
@dynamic ne, sw;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_LeasingSavings
//

@implementation GTLRSolar_LeasingSavings
@dynamic annualLeasingCost, leasesAllowed, leasesSupported, savings;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_Money
//

@implementation GTLRSolar_Money
@dynamic currencyCode, nanos, units;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_Panel
//

@implementation GTLRSolar_Panel
@dynamic center, orientation, segmentIndex, yearlyEnergyDcKwh;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_PanelConfig
//

@implementation GTLRSolar_PanelConfig
@dynamic panelsCount, roofSegmentSummaries, yearlyEnergyDcKwh;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roofSegmentSummaries" : [GTLRSolar_RoofSegmentSummary class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_Potential
//

@implementation GTLRSolar_Potential
@dynamic buildingStats, carbonOffsetFactorKgPerMwh, financialAnalyses,
         maxArrayAreaMeters2, maxArrayPanelsCount, maxSunshineHoursPerYear,
         panelCapacityWatts, panelHeightMeters, panelLifetimeYears,
         panelWidthMeters, roofSegmentStats, solarPanelConfigs, solarPanels,
         wholeRoofStats;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"financialAnalyses" : [GTLRSolar_FinancialAnalysis class],
    @"roofSegmentStats" : [GTLRSolar_RoofSegmentSizeAndSunshineStats class],
    @"solarPanelConfigs" : [GTLRSolar_PanelConfig class],
    @"solarPanels" : [GTLRSolar_Panel class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_RoofSegmentSizeAndSunshineStats
//

@implementation GTLRSolar_RoofSegmentSizeAndSunshineStats
@dynamic azimuthDegrees, boundingBox, center, pitchDegrees,
         planeHeightAtCenterMeters, stats;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_RoofSegmentSummary
//

@implementation GTLRSolar_RoofSegmentSummary
@dynamic azimuthDegrees, panelsCount, pitchDegrees, segmentIndex,
         yearlyEnergyDcKwh;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_SavingsOverTime
//

@implementation GTLRSolar_SavingsOverTime
@dynamic financiallyViable, presentValueOfSavingsLifetime,
         presentValueOfSavingsYear20, savingsLifetime, savingsYear1,
         savingsYear20;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSolar_SizeAndSunshineStats
//

@implementation GTLRSolar_SizeAndSunshineStats
@dynamic areaMeters2, groundAreaMeters2, sunshineQuantiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sunshineQuantiles" : [NSNumber class]
  };
  return map;
}

@end
