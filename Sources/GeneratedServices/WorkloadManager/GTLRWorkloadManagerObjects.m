// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Workload Manager API (workloadmanager/v1)
// Description:
//   Workload Manager is a service that provides tooling for enterprise
//   workloads to automate the deployment and validation of your workloads
//   against best practices and recommendations.
// Documentation:
//   https://cloud.google.com/workload-manager/docs

#import <GoogleAPIClientForREST/GTLRWorkloadManagerObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRWorkloadManager_BackupProperties.latestBackupStatus
NSString * const kGTLRWorkloadManager_BackupProperties_LatestBackupStatus_BackupStateFailure = @"BACKUP_STATE_FAILURE";
NSString * const kGTLRWorkloadManager_BackupProperties_LatestBackupStatus_BackupStateSuccess = @"BACKUP_STATE_SUCCESS";
NSString * const kGTLRWorkloadManager_BackupProperties_LatestBackupStatus_BackupStateUnspecified = @"BACKUP_STATE_UNSPECIFIED";

// GTLRWorkloadManager_CloudResource.kind
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindAddress = @"RESOURCE_KIND_ADDRESS";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindBackendService = @"RESOURCE_KIND_BACKEND_SERVICE";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindDisk = @"RESOURCE_KIND_DISK";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindFilestore = @"RESOURCE_KIND_FILESTORE";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindForwardingRule = @"RESOURCE_KIND_FORWARDING_RULE";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindHealthCheck = @"RESOURCE_KIND_HEALTH_CHECK";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindInstance = @"RESOURCE_KIND_INSTANCE";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindInstanceGroup = @"RESOURCE_KIND_INSTANCE_GROUP";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindNetwork = @"RESOURCE_KIND_NETWORK";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindPublicAddress = @"RESOURCE_KIND_PUBLIC_ADDRESS";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindSubnetwork = @"RESOURCE_KIND_SUBNETWORK";
NSString * const kGTLRWorkloadManager_CloudResource_Kind_ResourceKindUnspecified = @"RESOURCE_KIND_UNSPECIFIED";

// GTLRWorkloadManager_ComponentHealth.componentHealthType
NSString * const kGTLRWorkloadManager_ComponentHealth_ComponentHealthType_TypeOptional = @"TYPE_OPTIONAL";
NSString * const kGTLRWorkloadManager_ComponentHealth_ComponentHealthType_TypeRequired = @"TYPE_REQUIRED";
NSString * const kGTLRWorkloadManager_ComponentHealth_ComponentHealthType_TypeSpecial = @"TYPE_SPECIAL";
NSString * const kGTLRWorkloadManager_ComponentHealth_ComponentHealthType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRWorkloadManager_ComponentHealth.state
NSString * const kGTLRWorkloadManager_ComponentHealth_State_Critical = @"CRITICAL";
NSString * const kGTLRWorkloadManager_ComponentHealth_State_HealthStateUnspecified = @"HEALTH_STATE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_ComponentHealth_State_Healthy = @"HEALTHY";
NSString * const kGTLRWorkloadManager_ComponentHealth_State_Unhealthy = @"UNHEALTHY";
NSString * const kGTLRWorkloadManager_ComponentHealth_State_Unsupported = @"UNSUPPORTED";

// GTLRWorkloadManager_DatabaseProperties.databaseType
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_Ase = @"ASE";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_DatabaseTypeUnspecified = @"DATABASE_TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_Db2 = @"DB2";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_Hana = @"HANA";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_MaxDb = @"MAX_DB";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_Oracle = @"ORACLE";
NSString * const kGTLRWorkloadManager_DatabaseProperties_DatabaseType_Sqlserver = @"SQLSERVER";

// GTLRWorkloadManager_Evaluation.evaluationType
NSString * const kGTLRWorkloadManager_Evaluation_EvaluationType_EvaluationTypeUnspecified = @"EVALUATION_TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_Evaluation_EvaluationType_Other = @"OTHER";
NSString * const kGTLRWorkloadManager_Evaluation_EvaluationType_Sap = @"SAP";
NSString * const kGTLRWorkloadManager_Evaluation_EvaluationType_SccIac = @"SCC_IAC";
NSString * const kGTLRWorkloadManager_Evaluation_EvaluationType_SqlServer = @"SQL_SERVER";

// GTLRWorkloadManager_Execution.runType
NSString * const kGTLRWorkloadManager_Execution_RunType_OneTime = @"ONE_TIME";
NSString * const kGTLRWorkloadManager_Execution_RunType_Scheduled = @"SCHEDULED";
NSString * const kGTLRWorkloadManager_Execution_RunType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRWorkloadManager_Execution.state
NSString * const kGTLRWorkloadManager_Execution_State_Failed   = @"FAILED";
NSString * const kGTLRWorkloadManager_Execution_State_Running  = @"RUNNING";
NSString * const kGTLRWorkloadManager_Execution_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_Execution_State_Succeeded = @"SUCCEEDED";

// GTLRWorkloadManager_ExecutionResult.type
NSString * const kGTLRWorkloadManager_ExecutionResult_Type_TypePassed = @"TYPE_PASSED";
NSString * const kGTLRWorkloadManager_ExecutionResult_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_ExecutionResult_Type_TypeViolated = @"TYPE_VIOLATED";

// GTLRWorkloadManager_ExternalDataSources.type
NSString * const kGTLRWorkloadManager_ExternalDataSources_Type_BigQueryTable = @"BIG_QUERY_TABLE";
NSString * const kGTLRWorkloadManager_ExternalDataSources_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRWorkloadManager_HealthCheck.state
NSString * const kGTLRWorkloadManager_HealthCheck_State_Degraded = @"DEGRADED";
NSString * const kGTLRWorkloadManager_HealthCheck_State_Failed = @"FAILED";
NSString * const kGTLRWorkloadManager_HealthCheck_State_Passed = @"PASSED";
NSString * const kGTLRWorkloadManager_HealthCheck_State_Skipped = @"SKIPPED";
NSString * const kGTLRWorkloadManager_HealthCheck_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_HealthCheck_State_Unsupported = @"UNSUPPORTED";

// GTLRWorkloadManager_Instance.status
NSString * const kGTLRWorkloadManager_Instance_Status_Deprovisioning = @"DEPROVISIONING";
NSString * const kGTLRWorkloadManager_Instance_Status_InstancestateUnspecified = @"INSTANCESTATE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_Instance_Status_Provisioning = @"PROVISIONING";
NSString * const kGTLRWorkloadManager_Instance_Status_Repairing = @"REPAIRING";
NSString * const kGTLRWorkloadManager_Instance_Status_Running  = @"RUNNING";
NSString * const kGTLRWorkloadManager_Instance_Status_Staging  = @"STAGING";
NSString * const kGTLRWorkloadManager_Instance_Status_Stopped  = @"STOPPED";
NSString * const kGTLRWorkloadManager_Instance_Status_Stopping = @"STOPPING";
NSString * const kGTLRWorkloadManager_Instance_Status_Suspended = @"SUSPENDED";
NSString * const kGTLRWorkloadManager_Instance_Status_Suspending = @"SUSPENDING";
NSString * const kGTLRWorkloadManager_Instance_Status_Terminated = @"TERMINATED";

// GTLRWorkloadManager_InstanceProperties.role
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleAppServer = @"INSTANCE_ROLE_APP_SERVER";
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleAscs = @"INSTANCE_ROLE_ASCS";
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleErs = @"INSTANCE_ROLE_ERS";
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleHanaPrimary = @"INSTANCE_ROLE_HANA_PRIMARY";
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleHanaSecondary = @"INSTANCE_ROLE_HANA_SECONDARY";
NSString * const kGTLRWorkloadManager_InstanceProperties_Role_InstanceRoleUnspecified = @"INSTANCE_ROLE_UNSPECIFIED";

// GTLRWorkloadManager_InstanceProperties.roles
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleAppServer = @"INSTANCE_ROLE_APP_SERVER";
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleAscs = @"INSTANCE_ROLE_ASCS";
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleErs = @"INSTANCE_ROLE_ERS";
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleHanaPrimary = @"INSTANCE_ROLE_HANA_PRIMARY";
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleHanaSecondary = @"INSTANCE_ROLE_HANA_SECONDARY";
NSString * const kGTLRWorkloadManager_InstanceProperties_Roles_InstanceRoleUnspecified = @"INSTANCE_ROLE_UNSPECIFIED";

// GTLRWorkloadManager_ResourceStatus.state
NSString * const kGTLRWorkloadManager_ResourceStatus_State_Active = @"ACTIVE";
NSString * const kGTLRWorkloadManager_ResourceStatus_State_Creating = @"CREATING";
NSString * const kGTLRWorkloadManager_ResourceStatus_State_Deleting = @"DELETING";
NSString * const kGTLRWorkloadManager_ResourceStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRWorkloadManager_RuleExecutionResult.state
NSString * const kGTLRWorkloadManager_RuleExecutionResult_State_StateFailure = @"STATE_FAILURE";
NSString * const kGTLRWorkloadManager_RuleExecutionResult_State_StateSkipped = @"STATE_SKIPPED";
NSString * const kGTLRWorkloadManager_RuleExecutionResult_State_StateSuccess = @"STATE_SUCCESS";
NSString * const kGTLRWorkloadManager_RuleExecutionResult_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRWorkloadManager_SapComponent.topologyType
NSString * const kGTLRWorkloadManager_SapComponent_TopologyType_TopologyScaleOut = @"TOPOLOGY_SCALE_OUT";
NSString * const kGTLRWorkloadManager_SapComponent_TopologyType_TopologyScaleUp = @"TOPOLOGY_SCALE_UP";
NSString * const kGTLRWorkloadManager_SapComponent_TopologyType_TopologyTypeUnspecified = @"TOPOLOGY_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_SapDiscoveryComponent.topologyType
NSString * const kGTLRWorkloadManager_SapDiscoveryComponent_TopologyType_TopologyScaleOut = @"TOPOLOGY_SCALE_OUT";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponent_TopologyType_TopologyScaleUp = @"TOPOLOGY_SCALE_UP";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponent_TopologyType_TopologyTypeUnspecified = @"TOPOLOGY_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_SapDiscoveryComponentApplicationProperties.applicationType
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentApplicationProperties_ApplicationType_ApplicationTypeUnspecified = @"APPLICATION_TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentApplicationProperties_ApplicationType_Netweaver = @"NETWEAVER";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentApplicationProperties_ApplicationType_NetweaverAbap = @"NETWEAVER_ABAP";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentApplicationProperties_ApplicationType_NetweaverJava = @"NETWEAVER_JAVA";

// GTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties.databaseType
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_Ase = @"ASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_DatabaseTypeUnspecified = @"DATABASE_TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_Db2 = @"DB2";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_Hana = @"HANA";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_MaxDb = @"MAX_DB";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_Oracle = @"ORACLE";
NSString * const kGTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties_DatabaseType_Sqlserver = @"SQLSERVER";

// GTLRWorkloadManager_SapDiscoveryResource.resourceKind
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindAddress = @"RESOURCE_KIND_ADDRESS";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindBackendService = @"RESOURCE_KIND_BACKEND_SERVICE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindDisk = @"RESOURCE_KIND_DISK";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindFilestore = @"RESOURCE_KIND_FILESTORE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindForwardingRule = @"RESOURCE_KIND_FORWARDING_RULE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindHealthCheck = @"RESOURCE_KIND_HEALTH_CHECK";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindInstance = @"RESOURCE_KIND_INSTANCE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindInstanceGroup = @"RESOURCE_KIND_INSTANCE_GROUP";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindNetwork = @"RESOURCE_KIND_NETWORK";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindPublicAddress = @"RESOURCE_KIND_PUBLIC_ADDRESS";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindSubnetwork = @"RESOURCE_KIND_SUBNETWORK";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceKind_ResourceKindUnspecified = @"RESOURCE_KIND_UNSPECIFIED";

// GTLRWorkloadManager_SapDiscoveryResource.resourceType
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceType_ResourceTypeCompute = @"RESOURCE_TYPE_COMPUTE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceType_ResourceTypeNetwork = @"RESOURCE_TYPE_NETWORK";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceType_ResourceTypeStorage = @"RESOURCE_TYPE_STORAGE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResource_ResourceType_ResourceTypeUnspecified = @"RESOURCE_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_SapDiscoveryResourceInstanceProperties.instanceRole
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAppServer = @"INSTANCE_ROLE_APP_SERVER";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAppServerDatabase = @"INSTANCE_ROLE_APP_SERVER_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscs = @"INSTANCE_ROLE_ASCS";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsAppServer = @"INSTANCE_ROLE_ASCS_APP_SERVER";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsAppServerDatabase = @"INSTANCE_ROLE_ASCS_APP_SERVER_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsDatabase = @"INSTANCE_ROLE_ASCS_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsErs = @"INSTANCE_ROLE_ASCS_ERS";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsErsAppServer = @"INSTANCE_ROLE_ASCS_ERS_APP_SERVER";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsErsAppServerDatabase = @"INSTANCE_ROLE_ASCS_ERS_APP_SERVER_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleAscsErsDatabase = @"INSTANCE_ROLE_ASCS_ERS_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleDatabase = @"INSTANCE_ROLE_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleErs = @"INSTANCE_ROLE_ERS";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleErsAppServer = @"INSTANCE_ROLE_ERS_APP_SERVER";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleErsAppServerDatabase = @"INSTANCE_ROLE_ERS_APP_SERVER_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleErsDatabase = @"INSTANCE_ROLE_ERS_DATABASE";
NSString * const kGTLRWorkloadManager_SapDiscoveryResourceInstanceProperties_InstanceRole_InstanceRoleUnspecified = @"INSTANCE_ROLE_UNSPECIFIED";

// GTLRWorkloadManager_SapValidationValidationDetail.sapValidationType
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_Corosync = @"COROSYNC";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_Custom = @"CUSTOM";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_Hana = @"HANA";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_HanaSecurity = @"HANA_SECURITY";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_Netweaver = @"NETWEAVER";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_Pacemaker = @"PACEMAKER";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_SapValidationTypeUnspecified = @"SAP_VALIDATION_TYPE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_SapValidationValidationDetail_SapValidationType_System = @"SYSTEM";

// GTLRWorkloadManager_SapWorkload.architecture
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_ArchitectureUnspecified = @"ARCHITECTURE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_Centralized = @"CENTRALIZED";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_Distributed = @"DISTRIBUTED";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_DistributedHa = @"DISTRIBUTED_HA";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_Invalid = @"INVALID";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_StandaloneDatabase = @"STANDALONE_DATABASE";
NSString * const kGTLRWorkloadManager_SapWorkload_Architecture_StandaloneDatabaseHa = @"STANDALONE_DATABASE_HA";

// GTLRWorkloadManager_SqlserverValidationValidationDetail.type
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbBackupPolicy = @"DB_BACKUP_POLICY";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbBufferPoolExtension = @"DB_BUFFER_POOL_EXTENSION";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbCxpacketWaits = @"DB_CXPACKET_WAITS";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbIndexFragmentation = @"DB_INDEX_FRAGMENTATION";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbLogDiskSeparation = @"DB_LOG_DISK_SEPARATION";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbMaxParallelism = @"DB_MAX_PARALLELISM";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbMaxServerMemory = @"DB_MAX_SERVER_MEMORY";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbTableIndexCompression = @"DB_TABLE_INDEX_COMPRESSION";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbTransactionLogHandling = @"DB_TRANSACTION_LOG_HANDLING";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_DbVirtualLogFileCount = @"DB_VIRTUAL_LOG_FILE_COUNT";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_InstanceMetrics = @"INSTANCE_METRICS";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_Os = @"OS";
NSString * const kGTLRWorkloadManager_SqlserverValidationValidationDetail_Type_SqlserverValidationTypeUnspecified = @"SQLSERVER_VALIDATION_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_TorsoValidation.workloadType
NSString * const kGTLRWorkloadManager_TorsoValidation_WorkloadType_Mysql = @"MYSQL";
NSString * const kGTLRWorkloadManager_TorsoValidation_WorkloadType_Oracle = @"ORACLE";
NSString * const kGTLRWorkloadManager_TorsoValidation_WorkloadType_Redis = @"REDIS";
NSString * const kGTLRWorkloadManager_TorsoValidation_WorkloadType_WorkloadTypeUnspecified = @"WORKLOAD_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_WorkloadProfile.state
NSString * const kGTLRWorkloadManager_WorkloadProfile_State_Active = @"ACTIVE";
NSString * const kGTLRWorkloadManager_WorkloadProfile_State_Deploying = @"DEPLOYING";
NSString * const kGTLRWorkloadManager_WorkloadProfile_State_Destroying = @"DESTROYING";
NSString * const kGTLRWorkloadManager_WorkloadProfile_State_Maintenance = @"MAINTENANCE";
NSString * const kGTLRWorkloadManager_WorkloadProfile_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRWorkloadManager_WorkloadProfile.workloadType
NSString * const kGTLRWorkloadManager_WorkloadProfile_WorkloadType_S4Hana = @"S4_HANA";
NSString * const kGTLRWorkloadManager_WorkloadProfile_WorkloadType_SqlServer = @"SQL_SERVER";
NSString * const kGTLRWorkloadManager_WorkloadProfile_WorkloadType_ThreeTierWebApp = @"THREE_TIER_WEB_APP";
NSString * const kGTLRWorkloadManager_WorkloadProfile_WorkloadType_WorkloadTypeUnspecified = @"WORKLOAD_TYPE_UNSPECIFIED";

// GTLRWorkloadManager_WorkloadProfileHealth.state
NSString * const kGTLRWorkloadManager_WorkloadProfileHealth_State_Critical = @"CRITICAL";
NSString * const kGTLRWorkloadManager_WorkloadProfileHealth_State_HealthStateUnspecified = @"HEALTH_STATE_UNSPECIFIED";
NSString * const kGTLRWorkloadManager_WorkloadProfileHealth_State_Healthy = @"HEALTHY";
NSString * const kGTLRWorkloadManager_WorkloadProfileHealth_State_Unhealthy = @"UNHEALTHY";
NSString * const kGTLRWorkloadManager_WorkloadProfileHealth_State_Unsupported = @"UNSUPPORTED";

// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_AgentCommand
//

@implementation GTLRWorkloadManager_AgentCommand
@dynamic command, parameters;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_AgentCommand_Parameters
//

@implementation GTLRWorkloadManager_AgentCommand_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_APILayerServer
//

@implementation GTLRWorkloadManager_APILayerServer
@dynamic name, osVersion, resources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resources" : [GTLRWorkloadManager_CloudResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_AvailabilityGroup
//

@implementation GTLRWorkloadManager_AvailabilityGroup
@dynamic databases, name, primaryServer, secondaryServers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databases" : [NSString class],
    @"secondaryServers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_BackendServer
//

@implementation GTLRWorkloadManager_BackendServer
@dynamic backupFile, backupSchedule, name, osVersion, resources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resources" : [GTLRWorkloadManager_CloudResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_BackupProperties
//

@implementation GTLRWorkloadManager_BackupProperties
@dynamic latestBackupStatus, latestBackupTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_BigQueryDestination
//

@implementation GTLRWorkloadManager_BigQueryDestination
@dynamic createNewResultsTable, destinationDataset;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_CancelOperationRequest
//

@implementation GTLRWorkloadManager_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_CloudResource
//

@implementation GTLRWorkloadManager_CloudResource
@dynamic instanceProperties, kind, name;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Cluster
//

@implementation GTLRWorkloadManager_Cluster
@dynamic nodes, witnessServer;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Command
//

@implementation GTLRWorkloadManager_Command
@dynamic agentCommand, shellCommand;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ComponentHealth
//

@implementation GTLRWorkloadManager_ComponentHealth
@dynamic component, componentHealthChecks, componentHealthType, isRequired,
         state, subComponentHealthes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"componentHealthChecks" : [GTLRWorkloadManager_HealthCheck class],
    @"subComponentHealthes" : [GTLRWorkloadManager_ComponentHealth class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Database
//

@implementation GTLRWorkloadManager_Database
@dynamic backupFile, backupSchedule, hostVm, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_DatabaseProperties
//

@implementation GTLRWorkloadManager_DatabaseProperties
@dynamic backupProperties, databaseType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Empty
//

@implementation GTLRWorkloadManager_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Evaluation
//

@implementation GTLRWorkloadManager_Evaluation
@dynamic bigQueryDestination, createTime, customRulesBucket,
         descriptionProperty, evaluationType, labels, name, resourceFilter,
         resourceStatus, ruleNames, ruleVersions, schedule, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ruleNames" : [NSString class],
    @"ruleVersions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Evaluation_Labels
//

@implementation GTLRWorkloadManager_Evaluation_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Execution
//

@implementation GTLRWorkloadManager_Execution
@dynamic endTime, evaluationId, externalDataSources, inventoryTime, labels,
         name, notices, resultSummary, ruleResults, runType, startTime, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"externalDataSources" : [GTLRWorkloadManager_ExternalDataSources class],
    @"notices" : [GTLRWorkloadManager_Notice class],
    @"ruleResults" : [GTLRWorkloadManager_RuleExecutionResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Execution_Labels
//

@implementation GTLRWorkloadManager_Execution_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ExecutionResult
//

@implementation GTLRWorkloadManager_ExecutionResult
@dynamic commands, documentationUrl, resource, rule, severity, type,
         violationDetails, violationMessage;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"commands" : [GTLRWorkloadManager_Command class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ExternalDataSources
//

@implementation GTLRWorkloadManager_ExternalDataSources
@dynamic assetType, name, type, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_FrontEndServer
//

@implementation GTLRWorkloadManager_FrontEndServer
@dynamic name, osVersion, resources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resources" : [GTLRWorkloadManager_CloudResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_GceInstanceFilter
//

@implementation GTLRWorkloadManager_GceInstanceFilter
@dynamic serviceAccounts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serviceAccounts" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_HealthCheck
//

@implementation GTLRWorkloadManager_HealthCheck
@dynamic message, metric, resource, source, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Insight
//

@implementation GTLRWorkloadManager_Insight
@dynamic instanceId, sapDiscovery, sapValidation, sentTime, sqlserverValidation,
         torsoValidation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Instance
//

@implementation GTLRWorkloadManager_Instance
@dynamic name, region, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_InstanceProperties
//

@implementation GTLRWorkloadManager_InstanceProperties
@dynamic instanceNumber, machineType, role, roles, sapInstanceProperties,
         status, upcomingMaintenanceEvent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Layer
//

@implementation GTLRWorkloadManager_Layer
@dynamic applicationType, databaseType, instances, sid;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRWorkloadManager_Instance class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListDiscoveredProfilesResponse
//

@implementation GTLRWorkloadManager_ListDiscoveredProfilesResponse
@dynamic nextPageToken, unreachable, workloadProfiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unreachable" : [NSString class],
    @"workloadProfiles" : [GTLRWorkloadManager_WorkloadProfile class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"workloadProfiles";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListEvaluationsResponse
//

@implementation GTLRWorkloadManager_ListEvaluationsResponse
@dynamic evaluations, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"evaluations" : [GTLRWorkloadManager_Evaluation class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"evaluations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListExecutionResultsResponse
//

@implementation GTLRWorkloadManager_ListExecutionResultsResponse
@dynamic executionResults, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"executionResults" : [GTLRWorkloadManager_ExecutionResult class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"executionResults";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListExecutionsResponse
//

@implementation GTLRWorkloadManager_ListExecutionsResponse
@dynamic executions, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"executions" : [GTLRWorkloadManager_Execution class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"executions";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListLocationsResponse
//

@implementation GTLRWorkloadManager_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRWorkloadManager_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListOperationsResponse
//

@implementation GTLRWorkloadManager_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRWorkloadManager_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListRulesResponse
//

@implementation GTLRWorkloadManager_ListRulesResponse
@dynamic nextPageToken, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRWorkloadManager_Rule class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"rules";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ListScannedResourcesResponse
//

@implementation GTLRWorkloadManager_ListScannedResourcesResponse
@dynamic nextPageToken, scannedResources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scannedResources" : [GTLRWorkloadManager_ScannedResource class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"scannedResources";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_LoadBalancerServer
//

@implementation GTLRWorkloadManager_LoadBalancerServer
@dynamic ip, vm;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Location
//

@implementation GTLRWorkloadManager_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Location_Labels
//

@implementation GTLRWorkloadManager_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Location_Metadata
//

@implementation GTLRWorkloadManager_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Notice
//

@implementation GTLRWorkloadManager_Notice
@dynamic message;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Operation
//

@implementation GTLRWorkloadManager_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Operation_Metadata
//

@implementation GTLRWorkloadManager_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Operation_Response
//

@implementation GTLRWorkloadManager_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_OperationMetadata
//

@implementation GTLRWorkloadManager_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Product
//

@implementation GTLRWorkloadManager_Product
@dynamic name, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Resource
//

@implementation GTLRWorkloadManager_Resource
@dynamic name, serviceAccount, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ResourceFilter
//

@implementation GTLRWorkloadManager_ResourceFilter
@dynamic gceInstanceFilter, inclusionLabels, resourceIdPatterns, scopes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceIdPatterns" : [NSString class],
    @"scopes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ResourceFilter_InclusionLabels
//

@implementation GTLRWorkloadManager_ResourceFilter_InclusionLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ResourceStatus
//

@implementation GTLRWorkloadManager_ResourceStatus
@dynamic rulesNewerVersions, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rulesNewerVersions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Rule
//

@implementation GTLRWorkloadManager_Rule
@dynamic descriptionProperty, displayName, errorMessage, name, primaryCategory,
         remediation, revisionId, secondaryCategory, severity, tags, uri;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_RuleExecutionResult
//

@implementation GTLRWorkloadManager_RuleExecutionResult
@dynamic message, resultCount, rule, scannedResourceCount, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_RunEvaluationRequest
//

@implementation GTLRWorkloadManager_RunEvaluationRequest
@dynamic execution, executionId, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapComponent
//

@implementation GTLRWorkloadManager_SapComponent
@dynamic databaseProperties, haHosts, resources, sid, topologyType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"haHosts" : [NSString class],
    @"resources" : [GTLRWorkloadManager_CloudResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscovery
//

@implementation GTLRWorkloadManager_SapDiscovery
@dynamic applicationLayer, databaseLayer, metadata, projectNumber, systemId,
         updateTime, useDrReconciliation, workloadProperties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryComponent
//

@implementation GTLRWorkloadManager_SapDiscoveryComponent
@dynamic applicationProperties, databaseProperties, haHosts, hostProject,
         region, replicationSites, resources, sid, topologyType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"haHosts" : [NSString class],
    @"replicationSites" : [GTLRWorkloadManager_SapDiscoveryComponentReplicationSite class],
    @"resources" : [GTLRWorkloadManager_SapDiscoveryResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryComponentApplicationProperties
//

@implementation GTLRWorkloadManager_SapDiscoveryComponentApplicationProperties
@dynamic abap, appInstanceNumber, applicationType, ascsInstanceNumber, ascsUri,
         ersInstanceNumber, kernelVersion, nfsUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties
//

@implementation GTLRWorkloadManager_SapDiscoveryComponentDatabaseProperties
@dynamic databaseSid, databaseType, databaseVersion, instanceNumber,
         landscapeId, primaryInstanceUri, sharedNfsUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryComponentReplicationSite
//

@implementation GTLRWorkloadManager_SapDiscoveryComponentReplicationSite
@dynamic component, sourceSite;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryMetadata
//

@implementation GTLRWorkloadManager_SapDiscoveryMetadata
@dynamic customerRegion, definedSystem, environmentType, sapProduct;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryResource
//

@implementation GTLRWorkloadManager_SapDiscoveryResource
@dynamic instanceProperties, relatedResources, resourceKind, resourceType,
         resourceUri, updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"relatedResources" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryResourceInstanceProperties
//

@implementation GTLRWorkloadManager_SapDiscoveryResourceInstanceProperties
@dynamic appInstances, clusterInstances, diskMounts, instanceNumber,
         instanceRole, isDrSite, virtualHostname;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"appInstances" : [GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesAppInstance class],
    @"clusterInstances" : [NSString class],
    @"diskMounts" : [GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesDiskMount class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesAppInstance
//

@implementation GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesAppInstance
@dynamic name, number;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesDiskMount
//

@implementation GTLRWorkloadManager_SapDiscoveryResourceInstancePropertiesDiskMount
@dynamic mountPoint, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryWorkloadProperties
//

@implementation GTLRWorkloadManager_SapDiscoveryWorkloadProperties
@dynamic productVersions, softwareComponentVersions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"productVersions" : [GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesProductVersion class],
    @"softwareComponentVersions" : [GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesSoftwareComponentProperties class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesProductVersion
//

@implementation GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesProductVersion
@dynamic name, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesSoftwareComponentProperties
//

@implementation GTLRWorkloadManager_SapDiscoveryWorkloadPropertiesSoftwareComponentProperties
@dynamic extVersion, name, type, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapInstanceProperties
//

@implementation GTLRWorkloadManager_SapInstanceProperties
@dynamic numbers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"numbers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapValidation
//

@implementation GTLRWorkloadManager_SapValidation
@dynamic projectId, validationDetails, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"validationDetails" : [GTLRWorkloadManager_SapValidationValidationDetail class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapValidationValidationDetail
//

@implementation GTLRWorkloadManager_SapValidationValidationDetail
@dynamic details, isPresent, sapValidationType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapValidationValidationDetail_Details
//

@implementation GTLRWorkloadManager_SapValidationValidationDetail_Details

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapWorkload
//

@implementation GTLRWorkloadManager_SapWorkload
@dynamic application, architecture, database, metadata, products;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"products" : [GTLRWorkloadManager_Product class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SapWorkload_Metadata
//

@implementation GTLRWorkloadManager_SapWorkload_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ScannedResource
//

@implementation GTLRWorkloadManager_ScannedResource
@dynamic resource, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ShellCommand
//

@implementation GTLRWorkloadManager_ShellCommand
@dynamic args, command, timeoutSeconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SqlserverValidation
//

@implementation GTLRWorkloadManager_SqlserverValidation
@dynamic agentVersion, instance, projectId, validationDetails;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"validationDetails" : [GTLRWorkloadManager_SqlserverValidationValidationDetail class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SqlserverValidationDetails
//

@implementation GTLRWorkloadManager_SqlserverValidationDetails
@dynamic fields;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SqlserverValidationDetails_Fields
//

@implementation GTLRWorkloadManager_SqlserverValidationDetails_Fields

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SqlserverValidationValidationDetail
//

@implementation GTLRWorkloadManager_SqlserverValidationValidationDetail
@dynamic details, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRWorkloadManager_SqlserverValidationDetails class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_SqlserverWorkload
//

@implementation GTLRWorkloadManager_SqlserverWorkload
@dynamic ags, cluster, databases, loadBalancerServer;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ags" : [GTLRWorkloadManager_AvailabilityGroup class],
    @"databases" : [GTLRWorkloadManager_Database class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Status
//

@implementation GTLRWorkloadManager_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRWorkloadManager_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Status_Details_Item
//

@implementation GTLRWorkloadManager_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_Summary
//

@implementation GTLRWorkloadManager_Summary
@dynamic failures, newFailures, newFixes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ThreeTierWorkload
//

@implementation GTLRWorkloadManager_ThreeTierWorkload
@dynamic apiLayer, backend, endpoint, frontend;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_TorsoValidation
//

@implementation GTLRWorkloadManager_TorsoValidation
@dynamic agentVersion, instanceName, projectId, validationDetails, workloadType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_TorsoValidation_ValidationDetails
//

@implementation GTLRWorkloadManager_TorsoValidation_ValidationDetails

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_UpcomingMaintenanceEvent
//

@implementation GTLRWorkloadManager_UpcomingMaintenanceEvent
@dynamic endTime, maintenanceStatus, startTime, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ViolationDetails
//

@implementation GTLRWorkloadManager_ViolationDetails
@dynamic asset, observed, serviceAccount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_ViolationDetails_Observed
//

@implementation GTLRWorkloadManager_ViolationDetails_Observed

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_WorkloadProfile
//

@implementation GTLRWorkloadManager_WorkloadProfile
@dynamic application, ascs, database, labels, name, refreshedTime, sapWorkload,
         sqlserverWorkload, state, threeTierWorkload, workloadType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_WorkloadProfile_Labels
//

@implementation GTLRWorkloadManager_WorkloadProfile_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_WorkloadProfileHealth
//

@implementation GTLRWorkloadManager_WorkloadProfileHealth
@dynamic checkTime, componentHealthes, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"componentHealthes" : [GTLRWorkloadManager_ComponentHealth class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_WriteInsightRequest
//

@implementation GTLRWorkloadManager_WriteInsightRequest
@dynamic agentVersion, insight, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRWorkloadManager_WriteInsightResponse
//

@implementation GTLRWorkloadManager_WriteInsightResponse
@end
