// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Workload Manager API (workloadmanager/v1)
// Documentation:
//   https://cloud.google.com/workload-manager/docs

#import <GoogleAPIClientForREST/GTLRWorkloadManagerQuery.h>

@implementation GTLRWorkloadManagerQuery

@dynamic fields;

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsCreate

@dynamic evaluationId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRWorkloadManager_Evaluation *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/evaluations";
  GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkloadManager_Operation class];
  query.loggingName = @"workloadmanager.projects.locations.evaluations.create";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_Evaluation class];
  query.loggingName = @"workloadmanager.projects.locations.evaluations.get";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/evaluations";
  GTLRWorkloadManagerQuery_ProjectsLocationsEvaluationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkloadManager_ListEvaluationsResponse class];
  query.loggingName = @"workloadmanager.projects.locations.evaluations.list";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkloadManagerQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_Location class];
  query.loggingName = @"workloadmanager.projects.locations.get";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsInsightsWriteInsight

@dynamic location;

+ (instancetype)queryWithObject:(GTLRWorkloadManager_WriteInsightRequest *)object
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/insights:writeInsight";
  GTLRWorkloadManagerQuery_ProjectsLocationsInsightsWriteInsight *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.location = location;
  query.expectedObjectClass = [GTLRWorkloadManager_WriteInsightResponse class];
  query.loggingName = @"workloadmanager.projects.locations.insights.writeInsight";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRWorkloadManagerQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_ListLocationsResponse class];
  query.loggingName = @"workloadmanager.projects.locations.list";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRWorkloadManager_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRWorkloadManagerQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_Empty class];
  query.loggingName = @"workloadmanager.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkloadManagerQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_Empty class];
  query.loggingName = @"workloadmanager.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkloadManagerQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_Operation class];
  query.loggingName = @"workloadmanager.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRWorkloadManagerQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRWorkloadManagerQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkloadManager_ListOperationsResponse class];
  query.loggingName = @"workloadmanager.projects.locations.operations.list";
  return query;
}

@end
