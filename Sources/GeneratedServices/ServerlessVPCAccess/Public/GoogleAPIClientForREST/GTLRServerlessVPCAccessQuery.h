// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Serverless VPC Access API (vpcaccess/v1)
// Description:
//   API for managing VPC access connectors.
// Documentation:
//   https://cloud.google.com/vpc/docs/configure-serverless-vpc-access

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRServerlessVPCAccessObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Serverless VPC Access query classes.
 */
@interface GTLRServerlessVPCAccessQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a Serverless VPC Access connector, returns an operation.
 *
 *  Method: vpcaccess.projects.locations.connectors.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsCreate : GTLRServerlessVPCAccessQuery

/** Required. The ID to use for this connector. */
@property(nonatomic, copy, nullable) NSString *connectorId;

/**
 *  Required. The project and location in which the configuration should be
 *  created, specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_Operation.
 *
 *  Creates a Serverless VPC Access connector, returns an operation.
 *
 *  @param object The @c GTLRServerlessVPCAccess_Connector to include in the
 *    query.
 *  @param parent Required. The project and location in which the configuration
 *    should be created, specified in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsCreate
 */
+ (instancetype)queryWithObject:(GTLRServerlessVPCAccess_Connector *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the resource
 *  does not exist.
 *
 *  Method: vpcaccess.projects.locations.connectors.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsDelete : GTLRServerlessVPCAccessQuery

/** Required. Name of a Serverless VPC Access connector to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_Operation.
 *
 *  Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the resource
 *  does not exist.
 *
 *  @param name Required. Name of a Serverless VPC Access connector to delete.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
 *  does not exist.
 *
 *  Method: vpcaccess.projects.locations.connectors.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsGet : GTLRServerlessVPCAccessQuery

/** Required. Name of a Serverless VPC Access connector to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_Connector.
 *
 *  Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
 *  does not exist.
 *
 *  @param name Required. Name of a Serverless VPC Access connector to get.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Serverless VPC Access connectors.
 *
 *  Method: vpcaccess.projects.locations.connectors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsList : GTLRServerlessVPCAccessQuery

/** Maximum number of functions to return per call. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which the routes should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_ListConnectorsResponse.
 *
 *  Lists Serverless VPC Access connectors.
 *
 *  @param parent Required. The project and location from which the routes
 *    should be listed.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsConnectorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: vpcaccess.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsList : GTLRServerlessVPCAccessQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: vpcaccess.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsOperationsGet : GTLRServerlessVPCAccessQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: vpcaccess.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeServerlessVPCAccessCloudPlatform
 */
@interface GTLRServerlessVPCAccessQuery_ProjectsLocationsOperationsList : GTLRServerlessVPCAccessQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRServerlessVPCAccess_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRServerlessVPCAccessQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
