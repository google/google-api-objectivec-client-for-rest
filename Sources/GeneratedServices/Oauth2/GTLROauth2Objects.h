// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google OAuth2 API (oauth2/v2)
// Description:
//   Obtains end-user authorization grants for use with other Google APIs.
// Documentation:
//   https://developers.google.com/identity/protocols/oauth2/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  GTLROauth2_Tokeninfo
 */
@interface GTLROauth2_Tokeninfo : GTLRObject

/**
 *  Who is the intended audience for this token. In general the same as
 *  issued_to.
 */
@property(nonatomic, copy, nullable) NSString *audience;

/**
 *  The email address of the user. Present only if the email scope is present in
 *  the request.
 */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  The expiry time of the token, as number of seconds left until expiry.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiresIn;

/** To whom was the token issued to. In general the same as audience. */
@property(nonatomic, copy, nullable) NSString *issuedTo;

/** The space separated list of scopes granted to this token. */
@property(nonatomic, copy, nullable) NSString *scope;

/** The obfuscated user id. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Boolean flag which is true if the email address is verified. Present only if
 *  the email scope is present in the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedEmail;

@end


/**
 *  GTLROauth2_Userinfo
 */
@interface GTLROauth2_Userinfo : GTLRObject

/** The user's email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** The user's last name. */
@property(nonatomic, copy, nullable) NSString *familyName;

/** The user's gender. */
@property(nonatomic, copy, nullable) NSString *gender;

/** The user's first name. */
@property(nonatomic, copy, nullable) NSString *givenName;

/** The hosted domain e.g. example.com if the user is Google apps user. */
@property(nonatomic, copy, nullable) NSString *hd;

/**
 *  The obfuscated ID of the user.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** URL of the profile page. */
@property(nonatomic, copy, nullable) NSString *link;

/** The user's preferred locale. */
@property(nonatomic, copy, nullable) NSString *locale;

/** The user's full name. */
@property(nonatomic, copy, nullable) NSString *name;

/** URL of the user's picture image. */
@property(nonatomic, copy, nullable) NSString *picture;

/**
 *  Boolean flag which is true if the email address is verified. Always verified
 *  because we only return the user's primary email address.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifiedEmail;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
