// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Ad Exchange Buyer API II (adexchangebuyer2/v2beta1)
// Description:
//   Accesses the latest features for managing Authorized Buyers accounts,
//   Real-Time Bidding configurations and auction metrics, and Marketplace
//   programmatic deals.
// Documentation:
//   https://developers.google.com/authorized-buyers/apis/reference/rest/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRAdExchangeBuyerIIObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// duplicateIdMode

/**
 *  Not recommended. Using this option will allow multiple creatives to share
 *  the same ID. Get and Update requests will not be possible for any ID that
 *  has more than one creative associated. (List will still function.) This is
 *  only intended for backwards compatibility in cases where a single ID is
 *  already shared by multiple creatives from previous APIs.
 *
 *  Value: "FORCE_ENABLE_DUPLICATE_IDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeForceEnableDuplicateIds;
/**
 *  Recommended. This means that an ID will be unique to a single creative.
 *  Multiple creatives will not share an ID.
 *
 *  Value: "NO_DUPLICATES"
 */
FOUNDATION_EXTERN NSString * const kGTLRAdExchangeBuyerIIDuplicateIdModeNoDuplicates;

// ----------------------------------------------------------------------------
// filterSyntax

/**
 *  A placeholder for an undefined filter syntax.
 *
 *  Value: "FILTER_SYNTAX_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxFilterSyntaxUnspecified;
/**
 *  API list filtering syntax. Read about syntax and usage at
 *  https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters.
 *
 *  Value: "LIST_FILTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxListFilter;
/**
 *  PQL query syntax. Visit
 *  https://developers.google.com/ad-manager/api/pqlreference for PQL
 *  documentation and examples.
 *
 *  Value: "PQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAdExchangeBuyerIIFilterSyntaxPql;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other AdExchangeBuyerII query classes.
 */
@interface GTLRAdExchangeBuyerIIQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new client buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate : GTLRAdExchangeBuyerIIQuery

/**
 *  Unique numerical account ID for the buyer of which the client buyer is a
 *  customer; the sponsor buyer to create a client for. (required)
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Creates a new client buyer.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Client to include in the query.
 *  @param accountId Unique numerical account ID for the buyer of which the
 *    client buyer is a customer; the sponsor buyer to create a client for.
 *    (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId;

@end

/**
 *  Gets a client buyer with a given client account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsGet : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/** Numerical account ID of the client buyer to retrieve. (required) */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Gets a client buyer with a given client account ID.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer to retrieve.
 *    (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId;

@end

/**
 *  Creates and sends out an email invitation to access an Ad Exchange client
 *  buyer account.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user should be associated
 *  with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUserInvitation.
 *
 *  Creates and sends out an email invitation to access an Ad Exchange client
 *  buyer account.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ClientUserInvitation to include
 *    in the query.
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user should be associated with. (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUserInvitation *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId;

@end

/**
 *  Retrieves an existing client user invitation.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user invitation to be
 *  retrieved is associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user invitation to retrieve. (required) */
@property(nonatomic, assign) long long invitationId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUserInvitation.
 *
 *  Retrieves an existing client user invitation.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user invitation to be retrieved is associated with. (required)
 *  @param invitationId Numerical identifier of the user invitation to retrieve.
 *    (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                      invitationId:(long long)invitationId;

@end

/**
 *  Lists all the client users invitations for a client with a given account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.invitations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer to list invitations for. (required)
 *  You must either specify a string representation of a numerical account
 *  identifier or the `-` character to list all the invitations for all the
 *  clients of a given sponsor buyer.
 */
@property(nonatomic, copy, nullable) NSString *clientAccountId;

/**
 *  Requested page size. Server may return fewer clients than requested. If
 *  unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListClientUserInvitationsResponse.nextPageToken
 *  returned from the previous call to the clients.invitations.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientUserInvitationsResponse.
 *
 *  Lists all the client users invitations for a client with a given account ID.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer to list
 *    invitations for. (required) You must either specify a string
 *    representation of a numerical account identifier or the `-` character to
 *    list all the invitations for all the clients of a given sponsor buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsInvitationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId;

@end

/**
 *  Lists all the clients for the current sponsor buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Unique numerical account ID of the sponsor buyer to list the clients for.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Requested page size. The server may return fewer clients than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListClientsResponse.nextPageToken returned from the
 *  previous call to the accounts.clients.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional unique identifier (from the standpoint of an Ad Exchange sponsor
 *  buyer partner) of the client to return. If specified, at most one client
 *  will be returned in the response.
 */
@property(nonatomic, copy, nullable) NSString *partnerClientId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientsResponse.
 *
 *  Lists all the clients for the current sponsor buyer.
 *
 *  @param accountId Unique numerical account ID of the sponsor buyer to list
 *    the clients for.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates an existing client buyer.
 *
 *  Method: adexchangebuyer2.accounts.clients.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate : GTLRAdExchangeBuyerIIQuery

/**
 *  Unique numerical account ID for the buyer of which the client buyer is a
 *  customer; the sponsor buyer to update a client for. (required)
 */
@property(nonatomic, assign) long long accountId;

/** Unique numerical account ID of the client to update. (required) */
@property(nonatomic, assign) long long clientAccountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Client.
 *
 *  Updates an existing client buyer.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Client to include in the query.
 *  @param accountId Unique numerical account ID for the buyer of which the
 *    client buyer is a customer; the sponsor buyer to update a client for.
 *    (required)
 *  @param clientAccountId Unique numerical account ID of the client to update.
 *    (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Client *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId;

@end

/**
 *  Retrieves an existing client user.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user to be retrieved is
 *  associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user to retrieve. (required) */
@property(nonatomic, assign) long long userId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUser.
 *
 *  Retrieves an existing client user.
 *
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user to be retrieved is associated with. (required)
 *  @param userId Numerical identifier of the user to retrieve. (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersGet
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(long long)clientAccountId
                            userId:(long long)userId;

@end

/**
 *  Lists all the known client users for a specified sponsor buyer account ID.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList : GTLRAdExchangeBuyerIIQuery

/**
 *  Numerical account ID of the sponsor buyer of the client to list users for.
 *  (required)
 */
@property(nonatomic, assign) long long accountId;

/**
 *  The account ID of the client buyer to list users for. (required) You must
 *  specify either a string representation of a numerical account identifier or
 *  the `-` character to list all the client users for all the clients of a
 *  given sponsor buyer.
 */
@property(nonatomic, copy, nullable) NSString *clientAccountId;

/**
 *  Requested page size. The server may return fewer clients than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListClientUsersResponse.nextPageToken returned from the
 *  previous call to the accounts.clients.users.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListClientUsersResponse.
 *
 *  Lists all the known client users for a specified sponsor buyer account ID.
 *
 *  @param accountId Numerical account ID of the sponsor buyer of the client to
 *    list users for. (required)
 *  @param clientAccountId The account ID of the client buyer to list users for.
 *    (required) You must specify either a string representation of a numerical
 *    account identifier or the `-` character to list all the client users for
 *    all the clients of a given sponsor buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                   clientAccountId:(NSString *)clientAccountId;

@end

/**
 *  Updates an existing client user. Only the user status can be changed on
 *  update.
 *
 *  Method: adexchangebuyer2.accounts.clients.users.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate : GTLRAdExchangeBuyerIIQuery

/** Numerical account ID of the client's sponsor buyer. (required) */
@property(nonatomic, assign) long long accountId;

/**
 *  Numerical account ID of the client buyer that the user to be retrieved is
 *  associated with. (required)
 */
@property(nonatomic, assign) long long clientAccountId;

/** Numerical identifier of the user to retrieve. (required) */
@property(nonatomic, assign) long long userId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ClientUser.
 *
 *  Updates an existing client user. Only the user status can be changed on
 *  update.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ClientUser to include in the
 *    query.
 *  @param accountId Numerical account ID of the client's sponsor buyer.
 *    (required)
 *  @param clientAccountId Numerical account ID of the client buyer that the
 *    user to be retrieved is associated with. (required)
 *  @param userId Numerical identifier of the user to retrieve. (required)
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsClientsUsersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ClientUser *)object
                      accountId:(long long)accountId
                clientAccountId:(long long)clientAccountId
                         userId:(long long)userId;

@end

/**
 *  Creates a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate : GTLRAdExchangeBuyerIIQuery

/**
 *  The account that this creative belongs to. Can be used to filter the
 *  response of the creatives.list method.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Indicates if multiple creatives can share an ID or not. Default is
 *  NO_DUPLICATES (one ID per creative).
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerIIDuplicateIdModeNoDuplicates Recommended.
 *        This means that an ID will be unique to a single creative. Multiple
 *        creatives will not share an ID. (Value: "NO_DUPLICATES")
 *    @arg @c kGTLRAdExchangeBuyerIIDuplicateIdModeForceEnableDuplicateIds Not
 *        recommended. Using this option will allow multiple creatives to share
 *        the same ID. Get and Update requests will not be possible for any ID
 *        that has more than one creative associated. (List will still
 *        function.) This is only intended for backwards compatibility in cases
 *        where a single ID is already shared by multiple creatives from
 *        previous APIs. (Value: "FORCE_ENABLE_DUPLICATE_IDS")
 */
@property(nonatomic, copy, nullable) NSString *duplicateIdMode;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Creates a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Creative to include in the query.
 *  @param accountId The account that this creative belongs to. Can be used to
 *    filter the response of the creatives.list method.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Associate an existing deal with a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.add
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd : GTLRAdExchangeBuyerIIQuery

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative associated with the deal. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Associate an existing deal with a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_AddDealAssociationRequest to
 *    include in the query.
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative associated with the deal.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsAdd
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AddDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  List all creative-deal associations.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList : GTLRAdExchangeBuyerIIQuery

/**
 *  The account to list the associations from. Specify "-" to list all creatives
 *  the current user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID to list the associations from. Specify "-" to list all
 *  creatives under the above account.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Requested page size. Server may return fewer associations than requested. If
 *  unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListDealAssociationsResponse.next_page_token returned
 *  from the previous call to 'ListDealAssociations' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An optional query string to filter deal associations. If no filter is
 *  specified, all associations will be returned. Supported queries are: -
 *  accountId=*account_id_string* - creativeId=*creative_id_string* -
 *  dealsId=*deals_id_string* - dealsStatus:{approved, conditionally_approved,
 *  disapproved, not_checked} - openAuctionStatus:{approved,
 *  conditionally_approved, disapproved, not_checked} Example: 'dealsId=12345
 *  AND dealsStatus:disapproved'
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListDealAssociationsResponse.
 *
 *  List all creative-deal associations.
 *
 *  @param accountId The account to list the associations from. Specify "-" to
 *    list all creatives the current user has access to.
 *  @param creativeId The creative ID to list the associations from. Specify "-"
 *    to list all creatives under the above account.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId;

@end

/**
 *  Remove the association between a deal and a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.dealAssociations.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove : GTLRAdExchangeBuyerIIQuery

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative associated with the deal. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Remove the association between a deal and a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_RemoveDealAssociationRequest to
 *    include in the query.
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative associated with the deal.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesDealAssociationsRemove
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_RemoveDealAssociationRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Gets a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet : GTLRAdExchangeBuyerIIQuery

/** The account the creative belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the creative to retrieve. */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Gets a creative.
 *
 *  @param accountId The account the creative belongs to.
 *  @param creativeId The ID of the creative to retrieve.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        creativeId:(NSString *)creativeId;

@end

/**
 *  Lists creatives.
 *
 *  Method: adexchangebuyer2.accounts.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesList : GTLRAdExchangeBuyerIIQuery

/**
 *  The account to list the creatives from. Specify "-" to list all creatives
 *  the current user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Requested page size. The server may return fewer creatives than requested
 *  (due to timeout constraint) even if more are available through another call.
 *  If unspecified, server will pick an appropriate default. Acceptable values
 *  are 1 to 1000, inclusive.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListCreativesResponse.next_page_token returned from the
 *  previous call to 'ListCreatives' method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An optional query string to filter creatives. If no filter is specified, all
 *  active creatives will be returned. Supported queries are: -
 *  accountId=*account_id_string* - creativeId=*creative_id_string* -
 *  dealsStatus: {approved, conditionally_approved, disapproved, not_checked} -
 *  openAuctionStatus: {approved, conditionally_approved, disapproved,
 *  not_checked} - attribute: {a numeric attribute from the list of attributes}
 *  - disapprovalReason: {a reason from DisapprovalReason} Example:
 *  'accountId=12345 AND (dealsStatus:disapproved AND
 *  disapprovalReason:unacceptable_content) OR attribute:47'
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListCreativesResponse.
 *
 *  Lists creatives.
 *
 *  @param accountId The account to list the creatives from. Specify "-" to list
 *    all creatives the current user has access to.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Stops watching a creative. Will stop push notifications being sent to the
 *  topics when the creative changes status.
 *
 *  Method: adexchangebuyer2.accounts.creatives.stopWatching
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching : GTLRAdExchangeBuyerIIQuery

/** The account of the creative to stop notifications for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID of the creative to stop notifications for. Specify "-" to
 *  specify stopping account level notifications.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Stops watching a creative. Will stop push notifications being sent to the
 *  topics when the creative changes status.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_StopWatchingCreativeRequest to
 *    include in the query.
 *  @param accountId The account of the creative to stop notifications for.
 *  @param creativeId The creative ID of the creative to stop notifications for.
 *    Specify "-" to specify stopping account level notifications.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesStopWatching
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_StopWatchingCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Updates a creative.
 *
 *  Method: adexchangebuyer2.accounts.creatives.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate : GTLRAdExchangeBuyerIIQuery

/**
 *  The account that this creative belongs to. Can be used to filter the
 *  response of the creatives.list method.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The buyer-defined creative ID of this creative. Can be used to filter the
 *  response of the creatives.list method.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Creative.
 *
 *  Updates a creative.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Creative to include in the query.
 *  @param accountId The account that this creative belongs to. Can be used to
 *    filter the response of the creatives.list method.
 *  @param creativeId The buyer-defined creative ID of this creative. Can be
 *    used to filter the response of the creatives.list method.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Creative *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  Watches a creative. Will result in push notifications being sent to the
 *  topic when the creative changes status.
 *
 *  Method: adexchangebuyer2.accounts.creatives.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch : GTLRAdExchangeBuyerIIQuery

/** The account of the creative to watch. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The creative ID to watch for status changes. Specify "-" to watch all
 *  creatives under the above account. If both creative-level and account-level
 *  notifications are sent, only a single notification will be sent to the
 *  creative-level notification topic.
 */
@property(nonatomic, copy, nullable) NSString *creativeId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Watches a creative. Will result in push notifications being sent to the
 *  topic when the creative changes status.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_WatchCreativeRequest to include
 *    in the query.
 *  @param accountId The account of the creative to watch.
 *  @param creativeId The creative ID to watch for status changes. Specify "-"
 *    to watch all creatives under the above account. If both creative-level and
 *    account-level notifications are sent, only a single notification will be
 *    sent to the creative-level notification topic.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsCreativesWatch
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_WatchCreativeRequest *)object
                      accountId:(NSString *)accountId
                     creativeId:(NSString *)creativeId;

@end

/**
 *  List finalized proposals, regardless if a proposal is being renegotiated. A
 *  filter expression (PQL query) may be specified to filter the results. The
 *  notes will not be returned.
 *
 *  Method: adexchangebuyer2.accounts.finalizedProposals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsList : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  An optional PQL filter query used to query for proposals. Nested repeated
 *  fields, such as proposal.deals.targetingCriterion, cannot be filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Syntax the filter is written in. Current implementation defaults to PQL but
 *  in the future it will be LIST_FILTER.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxFilterSyntaxUnspecified A
 *        placeholder for an undefined filter syntax. (Value:
 *        "FILTER_SYNTAX_UNSPECIFIED")
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxPql PQL query syntax. Visit
 *        https://developers.google.com/ad-manager/api/pqlreference for PQL
 *        documentation and examples. (Value: "PQL")
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxListFilter API list filtering
 *        syntax. Read about syntax and usage at
 *        https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters.
 *        (Value: "LIST_FILTER")
 */
@property(nonatomic, copy, nullable) NSString *filterSyntax;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListProposalsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListProposalsResponse.
 *
 *  List finalized proposals, regardless if a proposal is being renegotiated. A
 *  filter expression (PQL query) may be specified to filter the results. The
 *  notes will not be returned.
 *
 *  @param accountId Account ID of the buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Update given deals to pause serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all
 *  listed deals in the request. Currently, this method only applies to PG and
 *  PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a
 *  no-op to pause already-paused deals. It is an error to call
 *  PauseProposalDeals for deals which are not part of the proposal of
 *  proposal_id or which are not finalized or renegotiating.
 *
 *  Method: adexchangebuyer2.accounts.finalizedProposals.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsPause : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The proposal_id of the proposal containing the deals. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Update given deals to pause serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all
 *  listed deals in the request. Currently, this method only applies to PG and
 *  PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a
 *  no-op to pause already-paused deals. It is an error to call
 *  PauseProposalDeals for deals which are not part of the proposal of
 *  proposal_id or which are not finalized or renegotiating.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_PauseProposalDealsRequest to
 *    include in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The proposal_id of the proposal containing the deals.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsPause
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_PauseProposalDealsRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Update given deals to resume serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all
 *  listed deals in the request. Currently, this method only applies to PG and
 *  PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a
 *  no-op to resume running deals or deals paused by the other party. It is an
 *  error to call ResumeProposalDeals for deals which are not part of the
 *  proposal of proposal_id or which are not finalized or renegotiating.
 *
 *  Method: adexchangebuyer2.accounts.finalizedProposals.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsResume : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The proposal_id of the proposal containing the deals. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Update given deals to resume serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all
 *  listed deals in the request. Currently, this method only applies to PG and
 *  PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a
 *  no-op to resume running deals or deals paused by the other party. It is an
 *  error to call ResumeProposalDeals for deals which are not part of the
 *  proposal of proposal_id or which are not finalized or renegotiating.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ResumeProposalDealsRequest to
 *    include in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The proposal_id of the proposal containing the deals.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsFinalizedProposalsResume
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ResumeProposalDealsRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Gets the requested product by ID.
 *
 *  Method: adexchangebuyer2.accounts.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProductsGet : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID for the product to get the head revision for. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Product.
 *
 *  Gets the requested product by ID.
 *
 *  @param accountId Account ID of the buyer.
 *  @param productId The ID for the product to get the head revision for.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProductsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                         productId:(NSString *)productId;

@end

/**
 *  List all products visible to the buyer (optionally filtered by the specified
 *  PQL query).
 *
 *  Method: adexchangebuyer2.accounts.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProductsList : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  An optional PQL query used to query for products. See
 *  https://developers.google.com/ad-manager/docs/pqlreference for documentation
 *  about PQL and examples. Nested repeated fields, such as
 *  product.targetingCriterion.inclusions, cannot be filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListProductsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListProductsResponse.
 *
 *  List all products visible to the buyer (optionally filtered by the specified
 *  PQL query).
 *
 *  @param accountId Account ID of the buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Mark the proposal as accepted at the given revision number. If the number
 *  does not match the server's revision number an `ABORTED` error message will
 *  be returned. This call updates the proposal_state from `PROPOSED` to
 *  `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling
 *  this endpoint, the buyer implicitly agrees to the terms and conditions
 *  optionally set within the proposal by the publisher.
 *
 *  Method: adexchangebuyer2.accounts.proposals.accept
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsAccept : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to accept. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Mark the proposal as accepted at the given revision number. If the number
 *  does not match the server's revision number an `ABORTED` error message will
 *  be returned. This call updates the proposal_state from `PROPOSED` to
 *  `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling
 *  this endpoint, the buyer implicitly agrees to the terms and conditions
 *  optionally set within the proposal by the publisher.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_AcceptProposalRequest to include
 *    in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to accept.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsAccept
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AcceptProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Create a new note and attach it to the proposal. The note is assigned a
 *  unique ID by the server. The proposal revision number will not increase when
 *  associated with a new note.
 *
 *  Method: adexchangebuyer2.accounts.proposals.addNote
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsAddNote : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to attach the note to. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Note.
 *
 *  Create a new note and attach it to the proposal. The note is assigned a
 *  unique ID by the server. The proposal revision number will not increase when
 *  associated with a new note.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_AddNoteRequest to include in the
 *    query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to attach the note to.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsAddNote
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_AddNoteRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Cancel an ongoing negotiation on a proposal. This does not cancel or end
 *  serving for the deals if the proposal has been finalized, but only cancels a
 *  negotiation unilaterally.
 *
 *  Method: adexchangebuyer2.accounts.proposals.cancelNegotiation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsCancelNegotiation : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to cancel negotiation for. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Cancel an ongoing negotiation on a proposal. This does not cancel or end
 *  serving for the deals if the proposal has been finalized, but only cancels a
 *  negotiation unilaterally.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_CancelNegotiationRequest to
 *    include in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to cancel negotiation for.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsCancelNegotiation
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_CancelNegotiationRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  You can opt-in to manually update proposals to indicate that setup is
 *  complete. By default, proposal setup is automatically completed after their
 *  deals are finalized. Contact your Technical Account Manager to opt in.
 *  Buyers can call this method when the proposal has been finalized, and all
 *  the required creatives have been uploaded using the Creatives API. This call
 *  updates the `is_setup_completed` field on the deals in the proposal, and
 *  notifies the seller. The server then advances the revision number of the
 *  most recent proposal. To mark an individual deal as ready to serve, call
 *  `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.
 *
 *  Method: adexchangebuyer2.accounts.proposals.completeSetup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsCompleteSetup : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to mark as setup completed. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  You can opt-in to manually update proposals to indicate that setup is
 *  complete. By default, proposal setup is automatically completed after their
 *  deals are finalized. Contact your Technical Account Manager to opt in.
 *  Buyers can call this method when the proposal has been finalized, and all
 *  the required creatives have been uploaded using the Creatives API. This call
 *  updates the `is_setup_completed` field on the deals in the proposal, and
 *  notifies the seller. The server then advances the revision number of the
 *  most recent proposal. To mark an individual deal as ready to serve, call
 *  `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_CompleteSetupRequest to include
 *    in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to mark as setup completed.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsCompleteSetup
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_CompleteSetupRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Create the given proposal. Each created proposal and any deals it contains
 *  are assigned a unique ID by the server.
 *
 *  Method: adexchangebuyer2.accounts.proposals.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsCreate : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Create the given proposal. Each created proposal and any deals it contains
 *  are assigned a unique ID by the server.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Proposal to include in the query.
 *  @param accountId Account ID of the buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Proposal *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Gets a proposal given its ID. The proposal is returned at its head revision.
 *
 *  Method: adexchangebuyer2.accounts.proposals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsGet : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The unique ID of the proposal */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Gets a proposal given its ID. The proposal is returned at its head revision.
 *
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The unique ID of the proposal
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                        proposalId:(NSString *)proposalId;

@end

/**
 *  List proposals. A filter expression (PQL query) may be specified to filter
 *  the results. To retrieve all finalized proposals, regardless if a proposal
 *  is being renegotiated, see the FinalizedProposals resource. Note that
 *  Bidder/ChildSeat relationships differ from the usual behavior. A Bidder
 *  account can only see its child seats' proposals by specifying the
 *  ChildSeat's accountId in the request path.
 *
 *  Method: adexchangebuyer2.accounts.proposals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsList : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  An optional PQL filter query used to query for proposals. Nested repeated
 *  fields, such as proposal.deals.targetingCriterion, cannot be filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Syntax the filter is written in. Current implementation defaults to PQL but
 *  in the future it will be LIST_FILTER.
 *
 *  Likely values:
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxFilterSyntaxUnspecified A
 *        placeholder for an undefined filter syntax. (Value:
 *        "FILTER_SYNTAX_UNSPECIFIED")
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxPql PQL query syntax. Visit
 *        https://developers.google.com/ad-manager/api/pqlreference for PQL
 *        documentation and examples. (Value: "PQL")
 *    @arg @c kGTLRAdExchangeBuyerIIFilterSyntaxListFilter API list filtering
 *        syntax. Read about syntax and usage at
 *        https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters.
 *        (Value: "LIST_FILTER")
 */
@property(nonatomic, copy, nullable) NSString *filterSyntax;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListProposalsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListProposalsResponse.
 *
 *  List proposals. A filter expression (PQL query) may be specified to filter
 *  the results. To retrieve all finalized proposals, regardless if a proposal
 *  is being renegotiated, see the FinalizedProposals resource. Note that
 *  Bidder/ChildSeat relationships differ from the usual behavior. A Bidder
 *  account can only see its child seats' proposals by specifying the
 *  ChildSeat's accountId in the request path.
 *
 *  @param accountId Account ID of the buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Update the given proposal to pause serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all
 *  deals in the proposal. It is a no-op to pause an already-paused proposal. It
 *  is an error to call PauseProposal for a proposal that is not finalized or
 *  renegotiating.
 *
 *  Method: adexchangebuyer2.accounts.proposals.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsPause : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to pause. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Update the given proposal to pause serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all
 *  deals in the proposal. It is a no-op to pause an already-paused proposal. It
 *  is an error to call PauseProposal for a proposal that is not finalized or
 *  renegotiating.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_PauseProposalRequest to include
 *    in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to pause.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsPause
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_PauseProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Update the given proposal to resume serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all
 *  deals in the proposal. Note that if the `has_seller_paused` bit is also set,
 *  serving will not resume until the seller also resumes. It is a no-op to
 *  resume an already-running proposal. It is an error to call ResumeProposal
 *  for a proposal that is not finalized or renegotiating.
 *
 *  Method: adexchangebuyer2.accounts.proposals.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsResume : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the proposal to resume. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Update the given proposal to resume serving. This method will set the
 *  `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all
 *  deals in the proposal. Note that if the `has_seller_paused` bit is also set,
 *  serving will not resume until the seller also resumes. It is a no-op to
 *  resume an already-running proposal. It is an error to call ResumeProposal
 *  for a proposal that is not finalized or renegotiating.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_ResumeProposalRequest to include
 *    in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The ID of the proposal to resume.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsResume
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_ResumeProposalRequest *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Update the given proposal at the client known revision number. If the server
 *  revision has advanced since the passed-in `proposal.proposal_revision`, an
 *  `ABORTED` error message will be returned. Only the buyer-modifiable fields
 *  of the proposal will be updated. Note that the deals in the proposal will be
 *  updated to match the passed-in copy. If a passed-in deal does not have a
 *  `deal_id`, the server will assign a new unique ID and create the deal. If
 *  passed-in deal has a `deal_id`, it will be updated to match the passed-in
 *  copy. Any existing deals not present in the passed-in proposal will be
 *  deleted. It is an error to pass in a deal with a `deal_id` not present at
 *  head.
 *
 *  Method: adexchangebuyer2.accounts.proposals.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsProposalsUpdate : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The unique ID of the proposal. */
@property(nonatomic, copy, nullable) NSString *proposalId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Proposal.
 *
 *  Update the given proposal at the client known revision number. If the server
 *  revision has advanced since the passed-in `proposal.proposal_revision`, an
 *  `ABORTED` error message will be returned. Only the buyer-modifiable fields
 *  of the proposal will be updated. Note that the deals in the proposal will be
 *  updated to match the passed-in copy. If a passed-in deal does not have a
 *  `deal_id`, the server will assign a new unique ID and create the deal. If
 *  passed-in deal has a `deal_id`, it will be updated to match the passed-in
 *  copy. Any existing deals not present in the passed-in proposal will be
 *  deleted. It is an error to pass in a deal with a `deal_id` not present at
 *  head.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_Proposal to include in the query.
 *  @param accountId Account ID of the buyer.
 *  @param proposalId The unique ID of the proposal.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsProposalsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_Proposal *)object
                      accountId:(NSString *)accountId
                     proposalId:(NSString *)proposalId;

@end

/**
 *  Gets the requested publisher profile by id.
 *
 *  Method: adexchangebuyer2.accounts.publisherProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesGet : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The id for the publisher profile to get. */
@property(nonatomic, copy, nullable) NSString *publisherProfileId;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_PublisherProfile.
 *
 *  Gets the requested publisher profile by id.
 *
 *  @param accountId Account ID of the buyer.
 *  @param publisherProfileId The id for the publisher profile to get.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                publisherProfileId:(NSString *)publisherProfileId;

@end

/**
 *  List all publisher profiles visible to the buyer
 *
 *  Method: adexchangebuyer2.accounts.publisherProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesList : GTLRAdExchangeBuyerIIQuery

/** Account ID of the buyer. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Specify the number of results to include per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as return from ListPublisherProfilesResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListPublisherProfilesResponse.
 *
 *  List all publisher profiles visible to the buyer
 *
 *  @param accountId Account ID of the buyer.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_AccountsPublisherProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidMetricsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidMetricsResponse.nextPageToken returned from the
 *  previous call to the bidMetrics.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponseErrorsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidResponseErrorsResponse.nextPageToken returned
 *  from the previous call to the bidResponseErrors.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponseErrorsResponse.
 *
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponseErrorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponsesWithoutBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken
 *  returned from the previous call to the bidResponsesWithoutBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponsesWithoutBidsResponse.
 *
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsBidResponsesWithoutBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsCreate : GTLRAdExchangeBuyerIIQuery

/**
 *  Whether the filter set is transient, or should be persisted indefinitely. By
 *  default, filter sets are not transient. If transient, it will be available
 *  for at least 1 hour after creation.
 */
@property(nonatomic, assign) BOOL isTransient;

/**
 *  Name of the owner (bidder or account) of the filter set to be created. For
 *  example: - For a bidder-level filter set for bidder 123: `bidders/123` - For
 *  an account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123` - For an account-level filter set for the child
 *  seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
 */
@property(nonatomic, copy, nullable) NSString *ownerName;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_FilterSet to include in the
 *    query.
 *  @param ownerName Name of the owner (bidder or account) of the filter set to
 *    be created. For example: - For a bidder-level filter set for bidder 123:
 *    `bidders/123` - For an account-level filter set for the buyer account
 *    representing bidder 123: `bidders/123/accounts/123` - For an account-level
 *    filter set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_FilterSet *)object
                      ownerName:(NSString *)ownerName;

@end

/**
 *  Deletes the requested filter set from the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsDelete : GTLRAdExchangeBuyerIIQuery

/**
 *  Full name of the resource to delete. For example: - For a bidder-level
 *  filter set for bidder 123: `bidders/123/filterSets/abc` - For an
 *  account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set
 *  for the child seat buyer account 456 whose bidder is 123:
 *  `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Deletes the requested filter set from the account with the given account ID.
 *
 *  @param name Full name of the resource to delete. For example: - For a
 *    bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For
 *    an account-level filter set for the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all reasons that caused a bid request not to be sent for an impression,
 *  with the number of bid requests not sent for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidRequestsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilteredBidRequestsResponse.nextPageToken returned
 *  from the previous call to the filteredBidRequests.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidRequestsResponse.
 *
 *  List all reasons that caused a bid request not to be sent for an impression,
 *  with the number of bid requests not sent for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsCreativesList : GTLRAdExchangeBuyerIIQuery

/**
 *  The ID of the creative status for which to retrieve a breakdown by creative.
 *  See
 *  [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of
 *  ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from
 *  the previous call to the filteredBids.creatives.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByCreativeResponse.
 *
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by creative. See
 *    [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsDetailsList : GTLRAdExchangeBuyerIIQuery

/**
 *  The ID of the creative status for which to retrieve a breakdown by detail.
 *  See
 *  [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *  Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of
 *  ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the
 *  previous call to the filteredBids.details.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse.
 *
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by detail. See
 *    [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *    Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and
 *    87.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsDetailsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilteredBidsResponse.nextPageToken returned from
 *  the previous call to the filteredBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidsResponse.
 *
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsFilteredBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsGet : GTLRAdExchangeBuyerIIQuery

/**
 *  Full name of the resource being requested. For example: - For a bidder-level
 *  filter set for bidder 123: `bidders/123/filterSets/abc` - For an
 *  account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set
 *  for the child seat buyer account 456 whose bidder is 123:
 *  `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  @param name Full name of the resource being requested. For example: - For a
 *    bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For
 *    an account-level filter set for the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsImpressionMetricsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListImpressionMetricsResponse.nextPageToken returned
 *  from the previous call to the impressionMetrics.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListImpressionMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsImpressionMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Lists all filter sets for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the owner (bidder or account) of the filter sets to be listed. For
 *  example: - For a bidder-level filter set for bidder 123: `bidders/123` - For
 *  an account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123` - For an account-level filter set for the child
 *  seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
 */
@property(nonatomic, copy, nullable) NSString *ownerName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilterSetsResponse.nextPageToken returned from the
 *  previous call to the accounts.filterSets.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilterSetsResponse.
 *
 *  Lists all filter sets for the account with the given account ID.
 *
 *  @param ownerName Name of the owner (bidder or account) of the filter sets to
 *    be listed. For example: - For a bidder-level filter set for bidder 123:
 *    `bidders/123` - For an account-level filter set for the buyer account
 *    representing bidder 123: `bidders/123/accounts/123` - For an account-level
 *    filter set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithOwnerName:(NSString *)ownerName;

@end

/**
 *  List all reasons for which bids lost in the auction, with the number of bids
 *  that lost for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.losingBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsLosingBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListLosingBidsResponse.nextPageToken returned from the
 *  previous call to the losingBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListLosingBidsResponse.
 *
 *  List all reasons for which bids lost in the auction, with the number of bids
 *  that lost for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsLosingBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  Method: adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsNonBillableWinningBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListNonBillableWinningBidsResponse.nextPageToken
 *  returned from the previous call to the nonBillableWinningBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListNonBillableWinningBidsResponse.
 *
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersAccountsFilterSetsNonBillableWinningBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.bidMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidMetricsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidMetricsResponse.nextPageToken returned from the
 *  previous call to the bidMetrics.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of bids.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.bidResponseErrors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponseErrorsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidResponseErrorsResponse.nextPageToken returned
 *  from the previous call to the bidResponseErrors.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponseErrorsResponse.
 *
 *  List all errors that occurred in bid responses, with the number of bid
 *  responses affected for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponseErrorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponsesWithoutBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken
 *  returned from the previous call to the bidResponsesWithoutBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListBidResponsesWithoutBidsResponse.
 *
 *  List all reasons for which bid responses were considered to have no
 *  applicable bids, with the number of bid responses affected for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsBidResponsesWithoutBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsCreate : GTLRAdExchangeBuyerIIQuery

/**
 *  Whether the filter set is transient, or should be persisted indefinitely. By
 *  default, filter sets are not transient. If transient, it will be available
 *  for at least 1 hour after creation.
 */
@property(nonatomic, assign) BOOL isTransient;

/**
 *  Name of the owner (bidder or account) of the filter set to be created. For
 *  example: - For a bidder-level filter set for bidder 123: `bidders/123` - For
 *  an account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123` - For an account-level filter set for the child
 *  seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
 */
@property(nonatomic, copy, nullable) NSString *ownerName;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Creates the specified filter set for the account with the given account ID.
 *
 *  @param object The @c GTLRAdExchangeBuyerII_FilterSet to include in the
 *    query.
 *  @param ownerName Name of the owner (bidder or account) of the filter set to
 *    be created. For example: - For a bidder-level filter set for bidder 123:
 *    `bidders/123` - For an account-level filter set for the buyer account
 *    representing bidder 123: `bidders/123/accounts/123` - For an account-level
 *    filter set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRAdExchangeBuyerII_FilterSet *)object
                      ownerName:(NSString *)ownerName;

@end

/**
 *  Deletes the requested filter set from the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsDelete : GTLRAdExchangeBuyerIIQuery

/**
 *  Full name of the resource to delete. For example: - For a bidder-level
 *  filter set for bidder 123: `bidders/123/filterSets/abc` - For an
 *  account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set
 *  for the child seat buyer account 456 whose bidder is 123:
 *  `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_Empty.
 *
 *  Deletes the requested filter set from the account with the given account ID.
 *
 *  @param name Full name of the resource to delete. For example: - For a
 *    bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For
 *    an account-level filter set for the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all reasons that caused a bid request not to be sent for an impression,
 *  with the number of bid requests not sent for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.filteredBidRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidRequestsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilteredBidRequestsResponse.nextPageToken returned
 *  from the previous call to the filteredBidRequests.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidRequestsResponse.
 *
 *  List all reasons that caused a bid request not to be sent for an impression,
 *  with the number of bid requests not sent for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsCreativesList : GTLRAdExchangeBuyerIIQuery

/**
 *  The ID of the creative status for which to retrieve a breakdown by creative.
 *  See
 *  [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of
 *  ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from
 *  the previous call to the filteredBids.creatives.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByCreativeResponse.
 *
 *  List all creatives associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each creative.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by creative. See
 *    [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsCreativesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.filteredBids.details.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsDetailsList : GTLRAdExchangeBuyerIIQuery

/**
 *  The ID of the creative status for which to retrieve a breakdown by detail.
 *  See
 *  [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *  Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.
 */
@property(nonatomic, assign) NSInteger creativeStatusId;

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of
 *  ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the
 *  previous call to the filteredBids.details.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRAdExchangeBuyerII_ListCreativeStatusBreakdownByDetailResponse.
 *
 *  List all details associated with a specific reason for which bids were
 *  filtered, with the number of bids filtered for each detail.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *  @param creativeStatusId The ID of the creative status for which to retrieve
 *    a breakdown by detail. See
 *    [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
 *    Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and
 *    87.
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsDetailsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName
                      creativeStatusId:(NSInteger)creativeStatusId;

@end

/**
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.filteredBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilteredBidsResponse.nextPageToken returned from
 *  the previous call to the filteredBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilteredBidsResponse.
 *
 *  List all reasons for which bids were filtered, with the number of bids
 *  filtered for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsFilteredBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsGet : GTLRAdExchangeBuyerIIQuery

/**
 *  Full name of the resource being requested. For example: - For a bidder-level
 *  filter set for bidder 123: `bidders/123/filterSets/abc` - For an
 *  account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set
 *  for the child seat buyer account 456 whose bidder is 123:
 *  `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_FilterSet.
 *
 *  Retrieves the requested filter set for the account with the given account
 *  ID.
 *
 *  @param name Full name of the resource being requested. For example: - For a
 *    bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For
 *    an account-level filter set for the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.impressionMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsImpressionMetricsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListImpressionMetricsResponse.nextPageToken returned
 *  from the previous call to the impressionMetrics.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListImpressionMetricsResponse.
 *
 *  Lists all metrics that are measured in terms of number of impressions.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsImpressionMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  Lists all filter sets for the account with the given account ID.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the owner (bidder or account) of the filter sets to be listed. For
 *  example: - For a bidder-level filter set for bidder 123: `bidders/123` - For
 *  an account-level filter set for the buyer account representing bidder 123:
 *  `bidders/123/accounts/123` - For an account-level filter set for the child
 *  seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
 */
@property(nonatomic, copy, nullable) NSString *ownerName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListFilterSetsResponse.nextPageToken returned from the
 *  previous call to the accounts.filterSets.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListFilterSetsResponse.
 *
 *  Lists all filter sets for the account with the given account ID.
 *
 *  @param ownerName Name of the owner (bidder or account) of the filter sets to
 *    be listed. For example: - For a bidder-level filter set for bidder 123:
 *    `bidders/123` - For an account-level filter set for the buyer account
 *    representing bidder 123: `bidders/123/accounts/123` - For an account-level
 *    filter set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithOwnerName:(NSString *)ownerName;

@end

/**
 *  List all reasons for which bids lost in the auction, with the number of bids
 *  that lost for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.losingBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsLosingBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListLosingBidsResponse.nextPageToken returned from the
 *  previous call to the losingBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListLosingBidsResponse.
 *
 *  List all reasons for which bids lost in the auction, with the number of bids
 *  that lost for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsLosingBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

/**
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  Method: adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAdExchangeBuyerIIAdexchangeBuyer
 */
@interface GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsNonBillableWinningBidsList : GTLRAdExchangeBuyerIIQuery

/**
 *  Name of the filter set that should be applied to the requested metrics. For
 *  example: - For a bidder-level filter set for bidder 123:
 *  `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
 *  account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` -
 *  For an account-level filter set for the child seat buyer account 456 whose
 *  bidder is 123: `bidders/123/accounts/456/filterSets/abc`
 */
@property(nonatomic, copy, nullable) NSString *filterSetName;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListNonBillableWinningBidsResponse.nextPageToken
 *  returned from the previous call to the nonBillableWinningBids.list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAdExchangeBuyerII_ListNonBillableWinningBidsResponse.
 *
 *  List all reasons for which winning bids were not billable, with the number
 *  of bids not billed for each reason.
 *
 *  @param filterSetName Name of the filter set that should be applied to the
 *    requested metrics. For example: - For a bidder-level filter set for bidder
 *    123: `bidders/123/filterSets/abc` - For an account-level filter set for
 *    the buyer account representing bidder 123:
 *    `bidders/123/accounts/123/filterSets/abc` - For an account-level filter
 *    set for the child seat buyer account 456 whose bidder is 123:
 *    `bidders/123/accounts/456/filterSets/abc`
 *
 *  @return GTLRAdExchangeBuyerIIQuery_BiddersFilterSetsNonBillableWinningBidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithFilterSetName:(NSString *)filterSetName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
