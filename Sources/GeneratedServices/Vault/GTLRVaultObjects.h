// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Vault API (vault/v1)
// Description:
//   Retention and eDiscovery for Google Workspace. To work with Vault
//   resources, the account must have the [required Vault
//   privileges](https://support.google.com/vault/answer/2799699) and access to
//   the matter. To access a matter, the account must have created the matter,
//   have the matter shared with them, or have the **View All Matters**
//   privilege. For example, to download an export, an account needs the
//   **Manage Exports** privilege and the matter shared with them.
// Documentation:
//   https://developers.google.com/vault

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVault_AccountCount;
@class GTLRVault_AccountCountError;
@class GTLRVault_AccountInfo;
@class GTLRVault_AddHeldAccountResult;
@class GTLRVault_CloudStorageFile;
@class GTLRVault_CloudStorageSink;
@class GTLRVault_CorpusQuery;
@class GTLRVault_DriveExportOptions;
@class GTLRVault_DriveOptions;
@class GTLRVault_Export;
@class GTLRVault_ExportOptions;
@class GTLRVault_ExportStats;
@class GTLRVault_GroupsCountResult;
@class GTLRVault_GroupsExportOptions;
@class GTLRVault_HangoutsChatExportOptions;
@class GTLRVault_HangoutsChatInfo;
@class GTLRVault_HangoutsChatOptions;
@class GTLRVault_HeldAccount;
@class GTLRVault_HeldDriveQuery;
@class GTLRVault_HeldGroupsQuery;
@class GTLRVault_HeldHangoutsChatQuery;
@class GTLRVault_HeldMailQuery;
@class GTLRVault_HeldOrgUnit;
@class GTLRVault_HeldVoiceQuery;
@class GTLRVault_Hold;
@class GTLRVault_MailCountResult;
@class GTLRVault_MailExportOptions;
@class GTLRVault_MailOptions;
@class GTLRVault_Matter;
@class GTLRVault_MatterPermission;
@class GTLRVault_Operation;
@class GTLRVault_Operation_Metadata;
@class GTLRVault_Operation_Response;
@class GTLRVault_OrgUnitInfo;
@class GTLRVault_Query;
@class GTLRVault_SavedQuery;
@class GTLRVault_SharedDriveInfo;
@class GTLRVault_SitesUrlInfo;
@class GTLRVault_Status;
@class GTLRVault_Status_Details_Item;
@class GTLRVault_TeamDriveInfo;
@class GTLRVault_UserInfo;
@class GTLRVault_VoiceExportOptions;
@class GTLRVault_VoiceOptions;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVault_AccountCountError.errorType

/**
 *  Deadline exceeded when querying the account.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_DeadlineExceeded;
/**
 *  Default.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_ErrorTypeUnspecified;
/**
 *  Transient - data in transit between storage replicas, temporarily
 *  unavailable.
 *
 *  Value: "LOCATION_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_LocationUnavailable;
/**
 *  Permanent - query contains too many terms.
 *
 *  Value: "TOO_MANY_TERMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_TooManyTerms;
/**
 *  Unrecognized error.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_Unknown;
/**
 *  Permanent - prefix terms expanded to too many query terms.
 *
 *  Value: "WILDCARD_TOO_BROAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_WildcardTooBroad;

// ----------------------------------------------------------------------------
// GTLRVault_CountArtifactsRequest.view

/**
 *  Response includes the same details as **TOTAL_COUNT**, plus additional
 *  account breakdown.
 *
 *  Value: "ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_All;
/**
 *  Default. Same as **TOTAL_COUNT**.
 *
 *  Value: "COUNT_RESULT_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_CountResultViewUnspecified;
/**
 *  Response includes counts of the total accounts, queried accounts, matching
 *  accounts, non-queryable accounts, and queried account errors.
 *
 *  Value: "TOTAL_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_TotalCount;

// ----------------------------------------------------------------------------
// GTLRVault_DriveOptions.clientSideEncryptedOption

/**
 *  Include both client-side encrypted and unencrypted content in results.
 *
 *  Value: "CLIENT_SIDE_ENCRYPTED_OPTION_ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionAny;
/**
 *  Include client-side encrypted content only.
 *
 *  Value: "CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionEncrypted;
/**
 *  Include unencrypted content only.
 *
 *  Value: "CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionUnencrypted;
/**
 *  Encryption status unspecified. Results include both client-side encrypted
 *  and non-encrypted content.
 *
 *  Value: "CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_Export.status

/**
 *  The export completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_Completed;
/**
 *  The status is unspecified.
 *
 *  Value: "EXPORT_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_ExportStatusUnspecified;
/**
 *  The export failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_Failed;
/**
 *  The export is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_InProgress;

// ----------------------------------------------------------------------------
// GTLRVault_ExportOptions.region

/**
 *  Any region.
 *
 *  Value: "ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Any;
/**
 *  Europe region.
 *
 *  Value: "EUROPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Europe;
/**
 *  The region is unspecified. Defaults to ANY.
 *
 *  Value: "EXPORT_REGION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_ExportRegionUnspecified;
/**
 *  United States region.
 *
 *  Value: "US"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Us;

// ----------------------------------------------------------------------------
// GTLRVault_GroupsExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  Export as MBOX. Only available for Gmail, Groups, Hangouts and Voice.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Mbox;
/**
 *  Export as PST. Only available for Gmail, Groups, Hangouts, Voice and
 *  Calendar.
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_HangoutsChatExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  Export as MBOX. Only available for Gmail, Groups, Hangouts and Voice.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox;
/**
 *  Export as PST. Only available for Gmail, Groups, Hangouts, Voice and
 *  Calendar.
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_HeldVoiceQuery.coveredData

/**
 *  Call logs.
 *
 *  Value: "CALL_LOGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_CallLogs;
/**
 *  Covered data unspecified.
 *
 *  Value: "COVERED_DATA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_CoveredDataUnspecified;
/**
 *  Voice text messages.
 *
 *  Value: "TEXT_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_TextMessages;
/**
 *  Voicemails and their transcripts.
 *
 *  Value: "VOICEMAILS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_Voicemails;

// ----------------------------------------------------------------------------
// GTLRVault_Hold.corpus

/**
 *  No service specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_CorpusTypeUnspecified;
/**
 *  Drive, including Meet and Sites.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Groups;
/**
 *  For export, Google Chat only. For holds, Google Chat and classic Hangouts.
 *
 *  Value: "HANGOUTS_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_HangoutsChat;
/**
 *  For search, Gmail and classic Hangouts. For holds, Gmail only.
 *
 *  Value: "MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Mail;
/**
 *  Google Voice.
 *
 *  Value: "VOICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Voice;

// ----------------------------------------------------------------------------
// GTLRVault_MailExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  Export as MBOX. Only available for Gmail, Groups, Hangouts and Voice.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Mbox;
/**
 *  Export as PST. Only available for Gmail, Groups, Hangouts, Voice and
 *  Calendar.
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_Matter.state

/**
 *  The matter is closed.
 *
 *  Value: "CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Closed;
/**
 *  The matter is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Deleted;
/**
 *  The matter is open.
 *
 *  Value: "OPEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Open;
/**
 *  The matter has no specified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_MatterPermission.role

/**
 *  A collaborator on the matter.
 *
 *  Value: "COLLABORATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Collaborator;
/**
 *  The owner of the matter.
 *
 *  Value: "OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Owner;
/**
 *  No role assigned.
 *
 *  Value: "ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_RoleUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_Query.corpus

/**
 *  No service specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_CorpusTypeUnspecified;
/**
 *  Drive, including Meet and Sites.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Groups;
/**
 *  For export, Google Chat only. For holds, Google Chat and classic Hangouts.
 *
 *  Value: "HANGOUTS_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_HangoutsChat;
/**
 *  For search, Gmail and classic Hangouts. For holds, Gmail only.
 *
 *  Value: "MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Mail;
/**
 *  Google Voice.
 *
 *  Value: "VOICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Voice;

// ----------------------------------------------------------------------------
// GTLRVault_Query.dataScope

/**
 *  All available data.
 *
 *  Value: "ALL_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_AllData;
/**
 *  No data source specified.
 *
 *  Value: "DATA_SCOPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_DataScopeUnspecified;
/**
 *  Only data on hold.
 *
 *  Value: "HELD_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_HeldData;
/**
 *  Only data not yet processed by Vault. (Gmail and Groups only)
 *
 *  Value: "UNPROCESSED_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_UnprocessedData;

// ----------------------------------------------------------------------------
// GTLRVault_Query.method

/**
 *  Search the data of the accounts specified in
 *  [AccountInfo](https://developers.google.com/vault/reference/rest/v1/Query#accountinfo).
 *
 *  Value: "ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_Account;
/**
 *  Search the data of all accounts in the organization. Supported only for
 *  Gmail. When specified, you don't need to specify **AccountInfo** or
 *  **OrgUnitInfo**.
 *
 *  Value: "ENTIRE_ORG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_EntireOrg;
/**
 *  Search the data of all accounts in the organizational unit specified in
 *  [OrgUnitInfo](https://developers.google.com/vault/reference/rest/v1/Query#orgunitinfo).
 *
 *  Value: "ORG_UNIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_OrgUnit;
/**
 *  Search messages in the Chat spaces specified in
 *  [HangoutsChatInfo](https://developers.google.com/vault/reference/rest/v1/Query#hangoutschatinfo).
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_Room;
/**
 *  A search method must be specified or else it is rejected.
 *
 *  Value: "SEARCH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_SearchMethodUnspecified;
/**
 *  Search the files in the shared drives specified in
 *  [SharedDriveInfo](https://developers.google.com/vault/reference/rest/v1/Query#shareddriveinfo).
 *
 *  Value: "SHARED_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_SharedDrive;
/**
 *  Search for sites by the published site URLs specified in
 *  [SitesUrlInfo](https://developers.google.com/vault/reference/rest/v1/Query#sitesurlinfo).
 *
 *  Value: "SITES_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_SitesUrl;
/**
 *  Search the data in the Team Drive specified in **team_drive_info**.
 *
 *  Value: "TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_TeamDrive;

// ----------------------------------------------------------------------------
// GTLRVault_Query.searchMethod

/**
 *  Search the data of the accounts specified in
 *  [AccountInfo](https://developers.google.com/vault/reference/rest/v1/Query#accountinfo).
 *
 *  Value: "ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Account;
/**
 *  Search the data of all accounts in the organization. Supported only for
 *  Gmail. When specified, you don't need to specify **AccountInfo** or
 *  **OrgUnitInfo**.
 *
 *  Value: "ENTIRE_ORG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_EntireOrg;
/**
 *  Search the data of all accounts in the organizational unit specified in
 *  [OrgUnitInfo](https://developers.google.com/vault/reference/rest/v1/Query#orgunitinfo).
 *
 *  Value: "ORG_UNIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_OrgUnit;
/**
 *  Search messages in the Chat spaces specified in
 *  [HangoutsChatInfo](https://developers.google.com/vault/reference/rest/v1/Query#hangoutschatinfo).
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Room;
/**
 *  A search method must be specified or else it is rejected.
 *
 *  Value: "SEARCH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SearchMethodUnspecified;
/**
 *  Search the files in the shared drives specified in
 *  [SharedDriveInfo](https://developers.google.com/vault/reference/rest/v1/Query#shareddriveinfo).
 *
 *  Value: "SHARED_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SharedDrive;
/**
 *  Search for sites by the published site URLs specified in
 *  [SitesUrlInfo](https://developers.google.com/vault/reference/rest/v1/Query#sitesurlinfo).
 *
 *  Value: "SITES_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SitesUrl;
/**
 *  Search the data in the Team Drive specified in **team_drive_info**.
 *
 *  Value: "TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_TeamDrive;

// ----------------------------------------------------------------------------
// GTLRVault_VoiceExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  Export as MBOX. Only available for Gmail, Groups, Hangouts and Voice.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_Mbox;
/**
 *  Export as PST. Only available for Gmail, Groups, Hangouts, Voice and
 *  Calendar.
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_VoiceOptions.coveredData

/**
 *  Call logs.
 *
 *  Value: "CALL_LOGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_CallLogs;
/**
 *  Covered data unspecified.
 *
 *  Value: "COVERED_DATA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_CoveredDataUnspecified;
/**
 *  Voice text messages.
 *
 *  Value: "TEXT_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_TextMessages;
/**
 *  Voicemails and their transcripts.
 *
 *  Value: "VOICEMAILS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_Voicemails;

/**
 *  The results count for each account.
 */
@interface GTLRVault_AccountCount : GTLRObject

/** Account owner. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *account;

/**
 *  The number of results (messages or files) found for this account.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

@end


/**
 *  An error that occurred when querying a specific account
 */
@interface GTLRVault_AccountCountError : GTLRObject

/** Account owner. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *account;

/**
 *  Account query error.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_DeadlineExceeded Deadline
 *        exceeded when querying the account. (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_ErrorTypeUnspecified
 *        Default. (Value: "ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_LocationUnavailable
 *        Transient - data in transit between storage replicas, temporarily
 *        unavailable. (Value: "LOCATION_UNAVAILABLE")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_TooManyTerms Permanent -
 *        query contains too many terms. (Value: "TOO_MANY_TERMS")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_Unknown Unrecognized error.
 *        (Value: "UNKNOWN")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_WildcardTooBroad Permanent
 *        - prefix terms expanded to too many query terms. (Value:
 *        "WILDCARD_TOO_BROAD")
 */
@property(nonatomic, copy, nullable) NSString *errorType;

@end


/**
 *  The accounts to search
 */
@interface GTLRVault_AccountInfo : GTLRObject

/** A set of accounts to search. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  The status of each account creation, and the **HeldAccount**, if successful.
 */
@interface GTLRVault_AddHeldAccountResult : GTLRObject

/** Returned when the account was successfully created. */
@property(nonatomic, strong, nullable) GTLRVault_HeldAccount *account;

/** Reports the request status. If it failed, returns an error message. */
@property(nonatomic, strong, nullable) GTLRVault_Status *status;

@end


/**
 *  Add a list of accounts to a hold.
 */
@interface GTLRVault_AddHeldAccountsRequest : GTLRObject

/**
 *  A comma-separated list of the account IDs of the accounts to add to the
 *  hold. Specify either **emails** or **account_ids**, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

/**
 *  A comma-separated list of the emails of the accounts to add to the hold.
 *  Specify either **emails** or **account_ids**, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  Response for batch create held accounts.
 */
@interface GTLRVault_AddHeldAccountsResponse : GTLRObject

/** The list of responses, in the same order as the batch request. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AddHeldAccountResult *> *responses;

@end


/**
 *  Add an account with the permission specified. The role cannot be owner. If
 *  an account already has a role in the matter, the existing role is
 *  overwritten.
 */
@interface GTLRVault_AddMatterPermissionsRequest : GTLRObject

/**
 *  Only relevant if **sendEmails** is **true**. To CC the requestor in the
 *  email message, set to **true**. To not CC requestor, set to **false**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ccMe;

/** The account and its role to add. */
@property(nonatomic, strong, nullable) GTLRVault_MatterPermission *matterPermission;

/**
 *  To send a notification email to the added account, set to **true**. To not
 *  send a notification email, set to **false**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sendEmails;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRVault_CancelOperationRequest : GTLRObject
@end


/**
 *  Close a matter by ID.
 */
@interface GTLRVault_CloseMatterRequest : GTLRObject
@end


/**
 *  Response to a CloseMatterRequest.
 */
@interface GTLRVault_CloseMatterResponse : GTLRObject

/** The updated matter, with state **CLOSED**. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  The export file in Cloud Storage
 */
@interface GTLRVault_CloudStorageFile : GTLRObject

/**
 *  The name of the Cloud Storage bucket for the export file. You can use this
 *  value in the [Cloud Storage JSON or XML
 *  APIs](https://cloud.google.com/storage/docs/apis), but not to list the
 *  bucket contents. Instead, you can [get individual export
 *  files](https://cloud.google.com/storage/docs/json_api/v1/objects/get) by
 *  object name.
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

/** The md5 hash of the file. */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/**
 *  The name of the Cloud Storage object for the export file. You can use this
 *  value in the [Cloud Storage JSON or XML
 *  APIs](https://cloud.google.com/storage/docs/apis).
 */
@property(nonatomic, copy, nullable) NSString *objectName;

/**
 *  The export file size.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

@end


/**
 *  Export sink for Cloud Storage files.
 */
@interface GTLRVault_CloudStorageSink : GTLRObject

/** Output only. The exported files in Cloud Storage. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_CloudStorageFile *> *files;

@end


/**
 *  Service-specific options for holds.
 */
@interface GTLRVault_CorpusQuery : GTLRObject

/**
 *  Service-specific options for Drive holds. If set, **CorpusType** must be
 *  **DRIVE**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldDriveQuery *driveQuery;

/**
 *  Service-specific options for Groups holds. If set, **CorpusType** must be
 *  **GROUPS**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldGroupsQuery *groupsQuery;

/**
 *  Service-specific options for Chat holds. If set, **CorpusType** must be
 *  **HANGOUTS_CHAT**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldHangoutsChatQuery *hangoutsChatQuery;

/**
 *  Service-specific options for Gmail holds. If set, **CorpusType** must be
 *  **MAIL**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldMailQuery *mailQuery;

/**
 *  Service-specific options for Voice holds. If set, **CorpusType** must be
 *  **VOICE**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldVoiceQuery *voiceQuery;

@end


/**
 *  Long running operation metadata for CountArtifacts.
 */
@interface GTLRVault_CountArtifactsMetadata : GTLRObject

/** End time of count operation. Available when operation is done. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The matter ID of the associated matter. */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The search query from the request. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** Creation time of count operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Count artifacts request.
 */
@interface GTLRVault_CountArtifactsRequest : GTLRObject

/** The search query. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/**
 *  Sets the granularity of the count results.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_All Response includes the
 *        same details as **TOTAL_COUNT**, plus additional account breakdown.
 *        (Value: "ALL")
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_CountResultViewUnspecified
 *        Default. Same as **TOTAL_COUNT**. (Value:
 *        "COUNT_RESULT_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_TotalCount Response includes
 *        counts of the total accounts, queried accounts, matching accounts,
 *        non-queryable accounts, and queried account errors. (Value:
 *        "TOTAL_COUNT")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  Definition of the response for method CountArtifacts.
 */
@interface GTLRVault_CountArtifactsResponse : GTLRObject

/** Count metrics for Groups. */
@property(nonatomic, strong, nullable) GTLRVault_GroupsCountResult *groupsCountResult;

/** Count metrics for Gmail and classic Hangouts. */
@property(nonatomic, strong, nullable) GTLRVault_MailCountResult *mailCountResult;

/**
 *  Total count of messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

@end


/**
 *  Options for Drive exports.
 */
@interface GTLRVault_DriveExportOptions : GTLRObject

/**
 *  To include access level information for users with [indirect
 *  access](https://support.google.com/vault/answer/6099459#metadata) to files,
 *  set to **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeAccessInfo;

@end


/**
 *  Additional options for Drive search
 */
@interface GTLRVault_DriveOptions : GTLRObject

/**
 *  Set whether the results include only content encrypted with [Google
 *  Workspace Client-side encryption](https://support.google.com/a?p=cse_ov)
 *  content, only unencrypted content, or both. Defaults to both. Currently
 *  supported for Drive.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionAny
 *        Include both client-side encrypted and unencrypted content in results.
 *        (Value: "CLIENT_SIDE_ENCRYPTED_OPTION_ANY")
 *    @arg @c kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionEncrypted
 *        Include client-side encrypted content only. (Value:
 *        "CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED")
 *    @arg @c kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionUnencrypted
 *        Include unencrypted content only. (Value:
 *        "CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED")
 *    @arg @c kGTLRVault_DriveOptions_ClientSideEncryptedOption_ClientSideEncryptedOptionUnspecified
 *        Encryption status unspecified. Results include both client-side
 *        encrypted and non-encrypted content. (Value:
 *        "CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *clientSideEncryptedOption;

/**
 *  Set to **true** to include shared drives.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeSharedDrives;

/**
 *  Set to true to include Team Drive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDrives;

/**
 *  Search the current version of the Drive file, but export the contents of the
 *  last version saved before 12:00 AM UTC on the specified date. Enter the date
 *  in UTC.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *versionDate;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRVault_Empty : GTLRObject
@end


/**
 *  An export. To work with Vault resources, the account must have the [required
 *  Vault privileges](https://support.google.com/vault/answer/2799699) and
 *  access to the matter. To access a matter, the account must have created the
 *  matter, have the matter shared with them, or have the **View All Matters**
 *  privilege.
 */
@interface GTLRVault_Export : GTLRObject

/** Output only. The sink for export files in Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRVault_CloudStorageSink *cloudStorageSink;

/** Output only. The time when the export was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Additional export options. */
@property(nonatomic, strong, nullable) GTLRVault_ExportOptions *exportOptions;

/**
 *  Output only. The generated export ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  The export name. Don't use special characters (~!$'(),;\@:/?) in the name,
 *  they can prevent you from downloading exports.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The query parameters used to create the export. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** Output only. The requester of the export. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *requester;

/** Output only. Details about the export progress and size. */
@property(nonatomic, strong, nullable) GTLRVault_ExportStats *stats;

/**
 *  Output only. The status of the export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Export_Status_Completed The export completed. (Value:
 *        "COMPLETED")
 *    @arg @c kGTLRVault_Export_Status_ExportStatusUnspecified The status is
 *        unspecified. (Value: "EXPORT_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRVault_Export_Status_Failed The export failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRVault_Export_Status_InProgress The export is in progress.
 *        (Value: "IN_PROGRESS")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Additional options for exports
 */
@interface GTLRVault_ExportOptions : GTLRObject

/** Options for Drive exports. */
@property(nonatomic, strong, nullable) GTLRVault_DriveExportOptions *driveOptions;

/** Options for Groups exports. */
@property(nonatomic, strong, nullable) GTLRVault_GroupsExportOptions *groupsOptions;

/** Options for Chat exports. */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatExportOptions *hangoutsChatOptions;

/** Options for Gmail exports. */
@property(nonatomic, strong, nullable) GTLRVault_MailExportOptions *mailOptions;

/**
 *  The requested data region for the export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_ExportOptions_Region_Any Any region. (Value: "ANY")
 *    @arg @c kGTLRVault_ExportOptions_Region_Europe Europe region. (Value:
 *        "EUROPE")
 *    @arg @c kGTLRVault_ExportOptions_Region_ExportRegionUnspecified The region
 *        is unspecified. Defaults to ANY. (Value: "EXPORT_REGION_UNSPECIFIED")
 *    @arg @c kGTLRVault_ExportOptions_Region_Us United States region. (Value:
 *        "US")
 */
@property(nonatomic, copy, nullable) NSString *region;

/** Options for Voice exports. */
@property(nonatomic, strong, nullable) GTLRVault_VoiceExportOptions *voiceOptions;

@end


/**
 *  Progress information for an export.
 */
@interface GTLRVault_ExportStats : GTLRObject

/**
 *  The number of messages or files already processed for export.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportedArtifactCount;

/**
 *  The size of export in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeInBytes;

/**
 *  The number of messages or files to be exported.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalArtifactCount;

@end


/**
 *  Groups specific count metrics.
 */
@interface GTLRVault_GroupsCountResult : GTLRObject

/** Error occurred when querying these accounts. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCountError *> *accountCountErrors;

/** Subtotal count per matching account that have more than zero messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCount *> *accountCounts;

/**
 *  Total number of accounts that can be queried and have more than zero
 *  messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchingAccountsCount;

/**
 *  When **DataScope** is **HELD_DATA**, these accounts in the request are not
 *  queried because they are not on hold. For other data scope, this field is
 *  not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonQueryableAccounts;

/**
 *  Total number of accounts involved in this count operation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queriedAccountsCount;

@end


/**
 *  Options for Groups exports.
 */
@interface GTLRVault_GroupsExportOptions : GTLRObject

/**
 *  The file format for exported messages.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Mbox Export as MBOX.
 *        Only available for Gmail, Groups, Hangouts and Voice. (Value: "MBOX")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Pst Export as PST.
 *        Only available for Gmail, Groups, Hangouts, Voice and Calendar.
 *        (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Options for Chat exports.
 */
@interface GTLRVault_HangoutsChatExportOptions : GTLRObject

/**
 *  The file format for exported messages.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox Export as
 *        MBOX. Only available for Gmail, Groups, Hangouts and Voice. (Value:
 *        "MBOX")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst Export as
 *        PST. Only available for Gmail, Groups, Hangouts, Voice and Calendar.
 *        (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  The Chat spaces to search
 */
@interface GTLRVault_HangoutsChatInfo : GTLRObject

/**
 *  A list of Chat spaces IDs, as provided by the [Chat
 *  API](https://developers.google.com/hangouts/chat).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *roomId;

@end


/**
 *  Additional options for Google Chat search
 */
@interface GTLRVault_HangoutsChatOptions : GTLRObject

/**
 *  For searches by account or organizational unit, set to **true** to include
 *  rooms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  An account covered by a hold. This structure is immutable. It can be an
 *  individual account or a Google Group, depending on the service. To work with
 *  Vault resources, the account must have the [required Vault privileges]
 *  (https://support.google.com/vault/answer/2799699) and access to the matter.
 *  To access a matter, the account must have created the matter, have the
 *  matter shared with them, or have the **View All Matters** privilege.
 */
@interface GTLRVault_HeldAccount : GTLRObject

/**
 *  The account ID, as provided by the [Admin
 *  SDK](https://developers.google.com/admin-sdk/).
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The primary email address of the account. If used as an input, this takes
 *  precedence over **accountId**.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** Output only. The first name of the account holder. */
@property(nonatomic, copy, nullable) NSString *firstName;

/** Output only. When the account was put on hold. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/** Output only. The last name of the account holder. */
@property(nonatomic, copy, nullable) NSString *lastName;

@end


/**
 *  Options for Drive holds.
 */
@interface GTLRVault_HeldDriveQuery : GTLRObject

/**
 *  To include files in shared drives in the hold, set to **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeSharedDriveFiles;

/**
 *  To include files in Team Drives in the hold, set to **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDriveFiles;

@end


/**
 *  Query options for group holds.
 */
@interface GTLRVault_HeldGroupsQuery : GTLRObject

/**
 *  The end time for the query. Specify in GMT. The value is rounded to 12 AM on
 *  the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time for the query. Specify in GMT. The value is rounded to 12 AM
 *  on the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The [search operators](https://support.google.com/vault/answer/2474474) used
 *  to refine the messages covered by the hold.
 */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  Options for Chat holds.
 */
@interface GTLRVault_HeldHangoutsChatQuery : GTLRObject

/**
 *  To include messages in Chat spaces the user was a member of, set to
 *  **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  Query options for Gmail holds.
 */
@interface GTLRVault_HeldMailQuery : GTLRObject

/**
 *  The end time for the query. Specify in GMT. The value is rounded to 12 AM on
 *  the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time for the query. Specify in GMT. The value is rounded to 12 AM
 *  on the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The [search operators](https://support.google.com/vault/answer/2474474) used
 *  to refine the messages covered by the hold.
 */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  The organizational unit covered by a hold. This structure is immutable.
 */
@interface GTLRVault_HeldOrgUnit : GTLRObject

/**
 *  When the organizational unit was put on hold. This property is immutable.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/**
 *  The organizational unit's immutable ID as provided by the [Admin
 *  SDK](https://developers.google.com/admin-sdk/).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Options for Voice holds.
 */
@interface GTLRVault_HeldVoiceQuery : GTLRObject

/**
 *  A list of data types covered by the hold. Should be non-empty. Order does
 *  not matter and duplicates are ignored.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *coveredData;

@end


/**
 *  A hold. A hold prevents the specified Google Workspace service from purging
 *  data for specific accounts or all members of an organizational unit. To work
 *  with Vault resources, the account must have the [required Vault privileges]
 *  (https://support.google.com/vault/answer/2799699) and access to the matter.
 *  To access a matter, the account must have created the matter, have the
 *  matter shared with them, or have the **View All Matters** privilege.
 */
@interface GTLRVault_Hold : GTLRObject

/**
 *  If set, the hold applies to the specified accounts and **orgUnit** must be
 *  empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

/**
 *  The service to be searched.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Hold_Corpus_CorpusTypeUnspecified No service specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Hold_Corpus_Drive Drive, including Meet and Sites.
 *        (Value: "DRIVE")
 *    @arg @c kGTLRVault_Hold_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Hold_Corpus_HangoutsChat For export, Google Chat only.
 *        For holds, Google Chat and classic Hangouts. (Value: "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Hold_Corpus_Mail For search, Gmail and classic
 *        Hangouts. For holds, Gmail only. (Value: "MAIL")
 *    @arg @c kGTLRVault_Hold_Corpus_Voice Google Voice. (Value: "VOICE")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/** The unique immutable ID of the hold. Assigned during creation. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The name of the hold. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, the hold applies to all members of the organizational unit and
 *  **accounts** must be empty. This property is mutable. For Groups holds, set
 *  **accounts**.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldOrgUnit *orgUnit;

/**
 *  Service-specific options. If set, **CorpusQuery** must match **CorpusType**.
 */
@property(nonatomic, strong, nullable) GTLRVault_CorpusQuery *query;

/** The last time this hold was modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The exports for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "exports" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListExportsResponse : GTLRCollectionObject

/**
 *  The list of exports.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Export *> *exports;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Returns a list of the accounts covered by a hold.
 */
@interface GTLRVault_ListHeldAccountsResponse : GTLRObject

/** The held accounts on a hold. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "holds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListHoldsResponse : GTLRCollectionObject

/**
 *  The list of holds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Hold *> *holds;

/**
 *  Page token to retrieve the next page of results in the list. If this is
 *  empty, then there are no more holds to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Provides the list of matters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "matters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListMattersResponse : GTLRCollectionObject

/**
 *  List of matters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Matter *> *matters;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Operation *> *operations;

@end


/**
 *  Definition of the response for method ListSaveQuery.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "savedQueries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListSavedQueriesResponse : GTLRCollectionObject

/**
 *  Page token to retrieve the next page of results in the list. If this is
 *  empty, then there are no more saved queries to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of saved queries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_SavedQuery *> *savedQueries;

@end


/**
 *  Gmail and classic Hangouts-specific count metrics.
 */
@interface GTLRVault_MailCountResult : GTLRObject

/** Errors occurred when querying these accounts. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCountError *> *accountCountErrors;

/** Subtotal count per matching account that have more than zero messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCount *> *accountCounts;

/**
 *  Total number of accounts that can be queried and have more than zero
 *  messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchingAccountsCount;

/**
 *  When **DataScope** is **HELD_DATA** and when account emails are passed in
 *  explicitly, the list of accounts in the request that are not queried because
 *  they are not on hold in the matter. For other data scopes, this field is not
 *  set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonQueryableAccounts;

/**
 *  Total number of accounts involved in this count operation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queriedAccountsCount;

@end


/**
 *  Options for Gmail exports.
 */
@interface GTLRVault_MailExportOptions : GTLRObject

/**
 *  The file format for exported messages.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Mbox Export as MBOX.
 *        Only available for Gmail, Groups, Hangouts and Voice. (Value: "MBOX")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Pst Export as PST. Only
 *        available for Gmail, Groups, Hangouts, Voice and Calendar. (Value:
 *        "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

/**
 *  To export confidential mode content, set to **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showConfidentialModeContent;

/**
 *  To use the new export system, set to **true**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useNewExport;

@end


/**
 *  Additional options for Gmail search
 */
@interface GTLRVault_MailOptions : GTLRObject

/**
 *  Set to **true** to exclude drafts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeDrafts;

@end


/**
 *  Represents a matter. To work with Vault resources, the account must have the
 *  [required Vault privileges]
 *  (https://support.google.com/vault/answer/2799699) and access to the matter.
 *  To access a matter, the account must have created the matter, have the
 *  matter shared with them, or have the **View All Matters** privilege.
 */
@interface GTLRVault_Matter : GTLRObject

/**
 *  An optional description for the matter.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The matter ID, which is generated by the server. Leave blank when creating a
 *  matter.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Lists the users and their permission for the matter. Currently there is no
 *  programmer defined limit on the number of permissions a matter can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_MatterPermission *> *matterPermissions;

/** The name of the matter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The state of the matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Matter_State_Closed The matter is closed. (Value:
 *        "CLOSED")
 *    @arg @c kGTLRVault_Matter_State_Deleted The matter is deleted. (Value:
 *        "DELETED")
 *    @arg @c kGTLRVault_Matter_State_Open The matter is open. (Value: "OPEN")
 *    @arg @c kGTLRVault_Matter_State_StateUnspecified The matter has no
 *        specified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Users can be matter owners or collaborators. Each matter has only one owner.
 *  All others users who can access the matter are collaborators. When an
 *  account is purged, its corresponding MatterPermission resources cease to
 *  exist.
 */
@interface GTLRVault_MatterPermission : GTLRObject

/**
 *  The account ID, as provided by the [Admin
 *  SDK](https://developers.google.com/admin-sdk/).
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The user's role for the matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MatterPermission_Role_Collaborator A collaborator on
 *        the matter. (Value: "COLLABORATOR")
 *    @arg @c kGTLRVault_MatterPermission_Role_Owner The owner of the matter.
 *        (Value: "OWNER")
 *    @arg @c kGTLRVault_MatterPermission_Role_RoleUnspecified No role assigned.
 *        (Value: "ROLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRVault_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRVault_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRVault_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRVault_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Operation_Response : GTLRObject
@end


/**
 *  The organizational unit to search
 */
@interface GTLRVault_OrgUnitInfo : GTLRObject

/**
 *  The name of the organizational unit to search, as provided by the [Admin SDK
 *  Directory API](https://developers.google.com/admin-sdk/directory/).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  The query definition used for search and export.
 */
@interface GTLRVault_Query : GTLRObject

/** Required when **SearchMethod** is **ACCOUNT**. */
@property(nonatomic, strong, nullable) GTLRVault_AccountInfo *accountInfo;

/**
 *  The Google Workspace service to search.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_Corpus_CorpusTypeUnspecified No service
 *        specified. (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_Corpus_Drive Drive, including Meet and Sites.
 *        (Value: "DRIVE")
 *    @arg @c kGTLRVault_Query_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Query_Corpus_HangoutsChat For export, Google Chat only.
 *        For holds, Google Chat and classic Hangouts. (Value: "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Query_Corpus_Mail For search, Gmail and classic
 *        Hangouts. For holds, Gmail only. (Value: "MAIL")
 *    @arg @c kGTLRVault_Query_Corpus_Voice Google Voice. (Value: "VOICE")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/**
 *  The data source to search.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_DataScope_AllData All available data. (Value:
 *        "ALL_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_DataScopeUnspecified No data source
 *        specified. (Value: "DATA_SCOPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_DataScope_HeldData Only data on hold. (Value:
 *        "HELD_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_UnprocessedData Only data not yet
 *        processed by Vault. (Gmail and Groups only) (Value:
 *        "UNPROCESSED_DATA")
 */
@property(nonatomic, copy, nullable) NSString *dataScope;

/** Set Drive search-specific options. */
@property(nonatomic, strong, nullable) GTLRVault_DriveOptions *driveOptions;

/**
 *  The end time for the search query. Specify in GMT. The value is rounded to
 *  12 AM on the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Required when **SearchMethod** is **ROOM**. (read-only) */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatInfo *hangoutsChatInfo;

/** Set Chat search-specific options. (read-only) */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatOptions *hangoutsChatOptions;

/** Set Gmail search-specific options. */
@property(nonatomic, strong, nullable) GTLRVault_MailOptions *mailOptions;

/**
 *  The entity to search. This field replaces **searchMethod** to support shared
 *  drives. When **searchMethod** is **TEAM_DRIVE**, the response of this field
 *  is **SHARED_DRIVE**.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_Method_Account Search the data of the accounts
 *        specified in
 *        [AccountInfo](https://developers.google.com/vault/reference/rest/v1/Query#accountinfo).
 *        (Value: "ACCOUNT")
 *    @arg @c kGTLRVault_Query_Method_EntireOrg Search the data of all accounts
 *        in the organization. Supported only for Gmail. When specified, you
 *        don't need to specify **AccountInfo** or **OrgUnitInfo**. (Value:
 *        "ENTIRE_ORG")
 *    @arg @c kGTLRVault_Query_Method_OrgUnit Search the data of all accounts in
 *        the organizational unit specified in
 *        [OrgUnitInfo](https://developers.google.com/vault/reference/rest/v1/Query#orgunitinfo).
 *        (Value: "ORG_UNIT")
 *    @arg @c kGTLRVault_Query_Method_Room Search messages in the Chat spaces
 *        specified in
 *        [HangoutsChatInfo](https://developers.google.com/vault/reference/rest/v1/Query#hangoutschatinfo).
 *        (Value: "ROOM")
 *    @arg @c kGTLRVault_Query_Method_SearchMethodUnspecified A search method
 *        must be specified or else it is rejected. (Value:
 *        "SEARCH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_Method_SharedDrive Search the files in the shared
 *        drives specified in
 *        [SharedDriveInfo](https://developers.google.com/vault/reference/rest/v1/Query#shareddriveinfo).
 *        (Value: "SHARED_DRIVE")
 *    @arg @c kGTLRVault_Query_Method_SitesUrl Search for sites by the published
 *        site URLs specified in
 *        [SitesUrlInfo](https://developers.google.com/vault/reference/rest/v1/Query#sitesurlinfo).
 *        (Value: "SITES_URL")
 *    @arg @c kGTLRVault_Query_Method_TeamDrive Search the data in the Team
 *        Drive specified in **team_drive_info**. (Value: "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *method;

/** Required when **SearchMethod** is **ORG_UNIT**. */
@property(nonatomic, strong, nullable) GTLRVault_OrgUnitInfo *orgUnitInfo;

/**
 *  The search method to use.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_SearchMethod_Account Search the data of the
 *        accounts specified in
 *        [AccountInfo](https://developers.google.com/vault/reference/rest/v1/Query#accountinfo).
 *        (Value: "ACCOUNT")
 *    @arg @c kGTLRVault_Query_SearchMethod_EntireOrg Search the data of all
 *        accounts in the organization. Supported only for Gmail. When
 *        specified, you don't need to specify **AccountInfo** or
 *        **OrgUnitInfo**. (Value: "ENTIRE_ORG")
 *    @arg @c kGTLRVault_Query_SearchMethod_OrgUnit Search the data of all
 *        accounts in the organizational unit specified in
 *        [OrgUnitInfo](https://developers.google.com/vault/reference/rest/v1/Query#orgunitinfo).
 *        (Value: "ORG_UNIT")
 *    @arg @c kGTLRVault_Query_SearchMethod_Room Search messages in the Chat
 *        spaces specified in
 *        [HangoutsChatInfo](https://developers.google.com/vault/reference/rest/v1/Query#hangoutschatinfo).
 *        (Value: "ROOM")
 *    @arg @c kGTLRVault_Query_SearchMethod_SearchMethodUnspecified A search
 *        method must be specified or else it is rejected. (Value:
 *        "SEARCH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_SearchMethod_SharedDrive Search the files in the
 *        shared drives specified in
 *        [SharedDriveInfo](https://developers.google.com/vault/reference/rest/v1/Query#shareddriveinfo).
 *        (Value: "SHARED_DRIVE")
 *    @arg @c kGTLRVault_Query_SearchMethod_SitesUrl Search for sites by the
 *        published site URLs specified in
 *        [SitesUrlInfo](https://developers.google.com/vault/reference/rest/v1/Query#sitesurlinfo).
 *        (Value: "SITES_URL")
 *    @arg @c kGTLRVault_Query_SearchMethod_TeamDrive Search the data in the
 *        Team Drive specified in **team_drive_info**. (Value: "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *searchMethod;

/** Required when **SearchMethod** is **SHARED_DRIVE**. */
@property(nonatomic, strong, nullable) GTLRVault_SharedDriveInfo *sharedDriveInfo;

/** Required when **SearchMethod** is **SITES_URL**. */
@property(nonatomic, strong, nullable) GTLRVault_SitesUrlInfo *sitesUrlInfo;

/**
 *  The start time for the search query. Specify in GMT. The value is rounded to
 *  12 AM on the specified date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** Required when **SearchMethod** is **TEAM_DRIVE**. */
@property(nonatomic, strong, nullable) GTLRVault_TeamDriveInfo *teamDriveInfo;

/**
 *  Service-specific [search
 *  operators](https://support.google.com/vault/answer/2474474) to filter search
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *terms;

/**
 *  The time zone name. It should be an IANA TZ name, such as
 *  "America/Los_Angeles". For a list of time zone names, see [Time
 *  Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For
 *  more information about how Vault uses time zones, see [the Vault help
 *  center](https://support.google.com/vault/answer/6092995#time).
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/** Set Voice search-specific options. */
@property(nonatomic, strong, nullable) GTLRVault_VoiceOptions *voiceOptions;

@end


/**
 *  Remove a list of accounts from a hold.
 */
@interface GTLRVault_RemoveHeldAccountsRequest : GTLRObject

/** The account IDs of the accounts to remove from the hold. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

@end


/**
 *  Response for batch delete held accounts.
 */
@interface GTLRVault_RemoveHeldAccountsResponse : GTLRObject

/**
 *  A list of statuses for the deleted accounts. Results have the same order as
 *  the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status *> *statuses;

@end


/**
 *  Remove an account as a matter collaborator.
 */
@interface GTLRVault_RemoveMatterPermissionsRequest : GTLRObject

/** The account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

@end


/**
 *  Reopen a matter by ID.
 */
@interface GTLRVault_ReopenMatterRequest : GTLRObject
@end


/**
 *  Response to a ReopenMatterRequest.
 */
@interface GTLRVault_ReopenMatterResponse : GTLRObject

/** The updated matter, with state **OPEN**. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  The definition of a saved query. To work with Vault resources, the account
 *  must have the [required Vault
 *  privileges](https://support.google.com/vault/answer/2799699) and access to
 *  the matter. To access a matter, the account must have created the matter,
 *  have the matter shared with them, or have the **View All Matters**
 *  privilege.
 */
@interface GTLRVault_SavedQuery : GTLRObject

/**
 *  Output only. The server-generated timestamp when the saved query was
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The name of the saved query. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The matter ID of the matter the saved query is saved in. The
 *  server does not use this field during create and always uses matter ID in
 *  the URL.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The search parameters of the saved query. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** A unique identifier for the saved query. */
@property(nonatomic, copy, nullable) NSString *savedQueryId;

@end


/**
 *  The shared drives to search
 */
@interface GTLRVault_SharedDriveInfo : GTLRObject

/**
 *  A list of shared drive IDs, as provided by the [Drive
 *  API](https://developers.google.com/drive).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sharedDriveIds;

@end


/**
 *  The published site URLs of new Google Sites to search
 */
@interface GTLRVault_SitesUrlInfo : GTLRObject

/** A list of published site URLs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *urls;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRVault_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRVault_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Status_Details_Item : GTLRObject
@end


/**
 *  Team Drives to search
 */
@interface GTLRVault_TeamDriveInfo : GTLRObject

/**
 *  List of Team Drive IDs, as provided by the [Drive
 *  API](https://developers.google.com/drive).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *teamDriveIds;

@end


/**
 *  Undelete a matter by ID.
 */
@interface GTLRVault_UndeleteMatterRequest : GTLRObject
@end


/**
 *  User's information.
 */
@interface GTLRVault_UserInfo : GTLRObject

/** The displayed name of the user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The email address of the user. */
@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  The options for Voice exports.
 */
@interface GTLRVault_VoiceExportOptions : GTLRObject

/**
 *  The file format for exported text messages.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_Mbox Export as MBOX.
 *        Only available for Gmail, Groups, Hangouts and Voice. (Value: "MBOX")
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_Pst Export as PST. Only
 *        available for Gmail, Groups, Hangouts, Voice and Calendar. (Value:
 *        "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Additional options for Voice search
 */
@interface GTLRVault_VoiceOptions : GTLRObject

/** Datatypes to search */
@property(nonatomic, strong, nullable) NSArray<NSString *> *coveredData;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
