// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Data Connect API (firebasedataconnect/v1beta)
// Description:
//   Firebase Data Connect is a relational database service for mobile and web
//   apps that lets you build and scale using a fully-managed PostgreSQL
//   database powered by Cloud SQL. The REST API lets developers manage the
//   connections to their database, change the schema of their database, and
//   query the database.
// Documentation:
//   https://firebase.google.com/docs/data-connect

#import <GoogleAPIClientForREST/GTLRFirebaseDataConnectQuery.h>

@implementation GTLRFirebaseDataConnectQuery

@dynamic fields;

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Location class];
  query.loggingName = @"firebasedataconnect.projects.locations.get";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}/locations";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ListLocationsResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.list";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:cancel";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Empty class];
  query.loggingName = @"firebasedataconnect.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Empty class];
  query.loggingName = @"firebasedataconnect.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}/operations";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ListOperationsResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsCreate

@dynamic connectorId, parent, requestId, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Connector *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/connectors";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.create";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsDelete

@dynamic allowMissing, ETag, force, name, requestId, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.delete";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteMutation

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_ExecuteMutationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:executeMutation";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteMutation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ExecuteMutationResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.executeMutation";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteQuery

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_ExecuteQueryRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:executeQuery";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ExecuteQueryResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.executeQuery";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Connector class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.get";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/connectors";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ListConnectorsResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.list";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsPatch

@dynamic allowMissing, name, requestId, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Connector *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.connectors.patch";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesCreate

@dynamic parent, requestId, serviceId, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Service *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.create";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesDelete

@dynamic allowMissing, ETag, force, name, requestId, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.delete";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphql

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_GraphqlRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:executeGraphql";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphql *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_GraphqlResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.executeGraphql";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphqlRead

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_GraphqlRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:executeGraphqlRead";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphqlRead *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_GraphqlResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.executeGraphqlRead";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Service class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.get";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ListServicesResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.list";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesPatch

@dynamic allowMissing, name, requestId, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Service *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.patch";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasCreate

@dynamic parent, requestId, schemaId, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Schema *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/schemas";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.schemas.create";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasDelete

@dynamic allowMissing, ETag, force, name, requestId, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.schemas.delete";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Schema class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.schemas.get";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/schemas";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_ListSchemasResponse class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.schemas.list";
  return query;
}

@end

@implementation GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasPatch

@dynamic allowMissing, name, requestId, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Schema *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseDataConnect_Operation class];
  query.loggingName = @"firebasedataconnect.projects.locations.services.schemas.patch";
  return query;
}

@end
