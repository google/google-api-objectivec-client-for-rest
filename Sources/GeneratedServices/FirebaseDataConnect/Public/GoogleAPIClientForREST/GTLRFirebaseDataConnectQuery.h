// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Data Connect API (firebasedataconnect/v1beta)
// Description:
//   Firebase Data Connect is a relational database service for mobile and web
//   apps that lets you build and scale using a fully-managed PostgreSQL
//   database powered by Cloud SQL. The REST API lets developers manage the
//   connections to their database, change the schema of their database, and
//   query the database.
// Documentation:
//   https://firebase.google.com/docs/data-connect

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebaseDataConnectObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase Data Connect query classes.
 */
@interface GTLRFirebaseDataConnectQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: firebasedataconnect.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsGet : GTLRFirebaseDataConnectQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: firebasedataconnect.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsList : GTLRFirebaseDataConnectQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: firebasedataconnect.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsCancel : GTLRFirebaseDataConnectQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRFirebaseDataConnect_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: firebasedataconnect.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsDelete : GTLRFirebaseDataConnectQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firebasedataconnect.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsGet : GTLRFirebaseDataConnectQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: firebasedataconnect.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsList : GTLRFirebaseDataConnectQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Connector in a given project and location. The operations are
 *  validated against and must be compatible with the active schema. If the
 *  operations and schema are not compatible or if the schema is not present,
 *  this will result in an error.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsCreate : GTLRFirebaseDataConnectQuery

/**
 *  Required. The ID to use for the connector, which will become the final
 *  component of the connector's resource name.
 */
@property(nonatomic, copy, nullable) NSString *connectorId;

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. If set, validate the request and preview the Connector, but do not
 *  actually create it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Creates a new Connector in a given project and location. The operations are
 *  validated against and must be compatible with the active schema. If the
 *  operations and schema are not compatible or if the schema is not present,
 *  this will result in an error.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Connector to include in the
 *    query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Connector *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Connector.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsDelete : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Connector is not found, the request will succeed
 *  but no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Optional. The etag of the Connector. If this is provided, it must match the
 *  server's etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If set to true, any child resources (i.e. ConnectorRevisions) will
 *  also be deleted. Otherwise, the request will only work if the Connector has
 *  no child resources.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. The name of the connector to delete, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. If set, validate the request and preview the Connector, but do not
 *  actually delete it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Deletes a single Connector.
 *
 *  @param name Required. The name of the connector to delete, in the format:
 *    ```
 *    projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Execute a predefined mutation in a Connector.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.executeMutation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteMutation : GTLRFirebaseDataConnectQuery

/**
 *  Required. The resource name of the connector to find the predefined
 *  mutation, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ExecuteMutationResponse.
 *
 *  Execute a predefined mutation in a Connector.
 *
 *  @param object The @c GTLRFirebaseDataConnect_ExecuteMutationRequest to
 *    include in the query.
 *  @param name Required. The resource name of the connector to find the
 *    predefined mutation, in the format: ```
 *    projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteMutation
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_ExecuteMutationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Execute a predefined query in a Connector.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.executeQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteQuery : GTLRFirebaseDataConnectQuery

/**
 *  Required. The resource name of the connector to find the predefined query,
 *  in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ExecuteQueryResponse.
 *
 *  Execute a predefined query in a Connector.
 *
 *  @param object The @c GTLRFirebaseDataConnect_ExecuteQueryRequest to include
 *    in the query.
 *  @param name Required. The resource name of the connector to find the
 *    predefined query, in the format: ```
 *    projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsExecuteQuery
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_ExecuteQueryRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Connector.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsGet : GTLRFirebaseDataConnectQuery

/**
 *  Required. The name of the connector to retrieve, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Connector.
 *
 *  Gets details of a single Connector.
 *
 *  @param name Required. The name of the connector to retrieve, in the format:
 *    ```
 *    projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Connectors in a given project and location.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsList : GTLRFirebaseDataConnectQuery

/** Optional. Filtering results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListConnectors` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListConnectors` must match the call that provided
 *  the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Value of parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ListConnectorsResponse.
 *
 *  Lists Connectors in a given project and location.
 *
 *  @param parent Required. Value of parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single Connector, and creates a new
 *  ConnectorRevision with the updated Connector. The operations are validated
 *  against and must be compatible with the live schema. If the operations and
 *  schema are not compatible or if the schema is not present, this will result
 *  in an error.
 *
 *  Method: firebasedataconnect.projects.locations.services.connectors.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsPatch : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Connector is not found, a new Connector will be
 *  created. In this case, `update_mask` is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Identifier. The relative resource name of the connector, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Connector resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. If set, validate the request and preview the Connector, but do not
 *  actually update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Updates the parameters of a single Connector, and creates a new
 *  ConnectorRevision with the updated Connector. The operations are validated
 *  against and must be compatible with the live schema. If the operations and
 *  schema are not compatible or if the schema is not present, this will result
 *  in an error.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Connector to include in the
 *    query.
 *  @param name Identifier. The relative resource name of the connector, in the
 *    format: ```
 *    projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesConnectorsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Connector *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Service in a given project and location.
 *
 *  Method: firebasedataconnect.projects.locations.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesCreate : GTLRFirebaseDataConnectQuery

/** Required. Value of parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The ID to use for the service, which will become the final
 *  component of the service's resource name.
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/**
 *  Optional. If set, validate the request and preview the Service, but do not
 *  actually create it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Creates a new Service in a given project and location.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Service to include in the
 *    query.
 *  @param parent Required. Value of parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Service.
 *
 *  Method: firebasedataconnect.projects.locations.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesDelete : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Service is not found, the request will succeed but
 *  no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Optional. The etag of the Service. If this is provided, it must match the
 *  server's etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If set to true, any child resources (i.e. Schema, SchemaRevisions,
 *  Connectors, and ConnectorRevisions) will also be deleted. Otherwise, the
 *  request will only work if the Service has no child resources.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. The name of the service to delete, in the format: ```
 *  projects/{project}/locations/{location}/services/{service} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. If set, validate the request and preview the Service, but do not
 *  actually delete it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Deletes a single Service.
 *
 *  @param name Required. The name of the service to delete, in the format: ```
 *    projects/{project}/locations/{location}/services/{service} ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Execute any GraphQL query and mutation against the Firebase Data Connect's
 *  generated GraphQL schema. Grants full read and write access to the connected
 *  data sources. Note: Use introspection query to explore the generated GraphQL
 *  schema.
 *
 *  Method: firebasedataconnect.projects.locations.services.executeGraphql
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphql : GTLRFirebaseDataConnectQuery

/**
 *  Required. The relative resource name of Firebase Data Connect service, in
 *  the format: ``` projects/{project}/locations/{location}/services/{service}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_GraphqlResponse.
 *
 *  Execute any GraphQL query and mutation against the Firebase Data Connect's
 *  generated GraphQL schema. Grants full read and write access to the connected
 *  data sources. Note: Use introspection query to explore the generated GraphQL
 *  schema.
 *
 *  @param object The @c GTLRFirebaseDataConnect_GraphqlRequest to include in
 *    the query.
 *  @param name Required. The relative resource name of Firebase Data Connect
 *    service, in the format: ```
 *    projects/{project}/locations/{location}/services/{service} ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphql
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_GraphqlRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Execute any GraphQL query against the Firebase Data Connect's generated
 *  GraphQL schema. Grants full read to the connected data sources.
 *  `ExecuteGraphqlRead` is identical to `ExecuteGraphql` except it only accepts
 *  read-only query.
 *
 *  Method: firebasedataconnect.projects.locations.services.executeGraphqlRead
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphqlRead : GTLRFirebaseDataConnectQuery

/**
 *  Required. The relative resource name of Firebase Data Connect service, in
 *  the format: ``` projects/{project}/locations/{location}/services/{service}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_GraphqlResponse.
 *
 *  Execute any GraphQL query against the Firebase Data Connect's generated
 *  GraphQL schema. Grants full read to the connected data sources.
 *  `ExecuteGraphqlRead` is identical to `ExecuteGraphql` except it only accepts
 *  read-only query.
 *
 *  @param object The @c GTLRFirebaseDataConnect_GraphqlRequest to include in
 *    the query.
 *  @param name Required. The relative resource name of Firebase Data Connect
 *    service, in the format: ```
 *    projects/{project}/locations/{location}/services/{service} ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesExecuteGraphqlRead
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_GraphqlRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Service.
 *
 *  Method: firebasedataconnect.projects.locations.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesGet : GTLRFirebaseDataConnectQuery

/**
 *  Required. The name of the service to retrieve, in the format: ```
 *  projects/{project}/locations/{location}/services/{service} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Service.
 *
 *  Gets details of a single Service.
 *
 *  @param name Required. The name of the service to retrieve, in the format:
 *    ``` projects/{project}/locations/{location}/services/{service} ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Services in a given project and location.
 *
 *  Method: firebasedataconnect.projects.locations.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesList : GTLRFirebaseDataConnectQuery

/** Optional. Filtering results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListServices` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListServices` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Value of parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ListServicesResponse.
 *
 *  Lists Services in a given project and location.
 *
 *  @param parent Required. Value of parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single Service.
 *
 *  Method: firebasedataconnect.projects.locations.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesPatch : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Service is not found, a new Service will be
 *  created. In this case, `update_mask` is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Identifier. The relative resource name of the Firebase Data Connect service,
 *  in the format: ```
 *  projects/{project}/locations/{location}/services/{service} ``` Note that the
 *  service ID is specific to Firebase Data Connect and does not correspond to
 *  any of the instance IDs of the underlying data source connections.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Service resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. If set, validate the request and preview the Service, but do not
 *  actually update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Updates the parameters of a single Service.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Service to include in the
 *    query.
 *  @param name Identifier. The relative resource name of the Firebase Data
 *    Connect service, in the format: ```
 *    projects/{project}/locations/{location}/services/{service} ``` Note that
 *    the service ID is specific to Firebase Data Connect and does not
 *    correspond to any of the instance IDs of the underlying data source
 *    connections.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Schema in a given project and location. Only creation of
 *  `schemas/main` is supported and calling create with any other schema ID will
 *  result in an error.
 *
 *  Method: firebasedataconnect.projects.locations.services.schemas.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasCreate : GTLRFirebaseDataConnectQuery

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The ID to use for the schema, which will become the final
 *  component of the schema's resource name. Currently, only `main` is supported
 *  and any other schema ID will result in an error.
 */
@property(nonatomic, copy, nullable) NSString *schemaId;

/**
 *  Optional. If set, validate the request and preview the Schema, but do not
 *  actually update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Creates a new Schema in a given project and location. Only creation of
 *  `schemas/main` is supported and calling create with any other schema ID will
 *  result in an error.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Schema to include in the query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Schema *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Schema. Because the schema and connectors must be
 *  compatible at all times, if this is called while any connectors are active,
 *  this will result in an error.
 *
 *  Method: firebasedataconnect.projects.locations.services.schemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasDelete : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Schema is not found, the request will succeed but
 *  no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Optional. The etag of the Schema. If this is provided, it must match the
 *  server's etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If set to true, any child resources (i.e. SchemaRevisions) will
 *  also be deleted.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. The name of the schema to delete, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. If set, validate the request and preview the Schema, but do not
 *  actually delete it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Deletes a single Schema. Because the schema and connectors must be
 *  compatible at all times, if this is called while any connectors are active,
 *  this will result in an error.
 *
 *  @param name Required. The name of the schema to delete, in the format: ```
 *    projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Schema.
 *
 *  Method: firebasedataconnect.projects.locations.services.schemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasGet : GTLRFirebaseDataConnectQuery

/**
 *  Required. The name of the schema to retrieve, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Schema.
 *
 *  Gets details of a single Schema.
 *
 *  @param name Required. The name of the schema to retrieve, in the format: ```
 *    projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *    ```
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Schemas in a given project and location. Note that only `schemas/main`
 *  is supported, so this will always return at most one Schema.
 *
 *  Method: firebasedataconnect.projects.locations.services.schemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasList : GTLRFirebaseDataConnectQuery

/** Optional. Filtering results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListSchemas` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListSchemas` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Value of parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_ListSchemasResponse.
 *
 *  Lists Schemas in a given project and location. Note that only `schemas/main`
 *  is supported, so this will always return at most one Schema.
 *
 *  @param parent Required. Value of parent.
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single Schema, and creates a new SchemaRevision
 *  with the updated Schema.
 *
 *  Method: firebasedataconnect.projects.locations.services.schemas.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseDataConnectCloudPlatform
 */
@interface GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasPatch : GTLRFirebaseDataConnectQuery

/**
 *  Optional. If true and the Schema is not found, a new Schema will be created.
 *  In this case, `update_mask` is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Identifier. The relative resource name of the schema, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *  ``` Right now, the only supported schema is "main".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Schema resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. If set, validate the request and preview the Schema, but do not
 *  actually update it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseDataConnect_Operation.
 *
 *  Updates the parameters of a single Schema, and creates a new SchemaRevision
 *  with the updated Schema.
 *
 *  @param object The @c GTLRFirebaseDataConnect_Schema to include in the query.
 *  @param name Identifier. The relative resource name of the schema, in the
 *    format: ```
 *    projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *    ``` Right now, the only supported schema is "main".
 *
 *  @return GTLRFirebaseDataConnectQuery_ProjectsLocationsServicesSchemasPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseDataConnect_Schema *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
