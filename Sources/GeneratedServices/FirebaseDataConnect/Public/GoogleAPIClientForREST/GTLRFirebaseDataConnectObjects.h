// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Data Connect API (firebasedataconnect/v1beta)
// Description:
//   Firebase Data Connect is a relational database service for mobile and web
//   apps that lets you build and scale using a fully-managed PostgreSQL
//   database powered by Cloud SQL. The REST API lets developers manage the
//   connections to their database, change the schema of their database, and
//   query the database.
// Documentation:
//   https://firebase.google.com/docs/data-connect

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseDataConnect_CloudSqlInstance;
@class GTLRFirebaseDataConnect_Connector;
@class GTLRFirebaseDataConnect_Connector_Annotations;
@class GTLRFirebaseDataConnect_Connector_Labels;
@class GTLRFirebaseDataConnect_Datasource;
@class GTLRFirebaseDataConnect_ExecuteMutationRequest_Variables;
@class GTLRFirebaseDataConnect_ExecuteMutationResponse_Data;
@class GTLRFirebaseDataConnect_ExecuteQueryRequest_Variables;
@class GTLRFirebaseDataConnect_ExecuteQueryResponse_Data;
@class GTLRFirebaseDataConnect_File;
@class GTLRFirebaseDataConnect_GraphqlError;
@class GTLRFirebaseDataConnect_GraphqlErrorExtensions;
@class GTLRFirebaseDataConnect_GraphqlRequest_Variables;
@class GTLRFirebaseDataConnect_GraphqlRequestExtensions;
@class GTLRFirebaseDataConnect_GraphqlResponse_Data;
@class GTLRFirebaseDataConnect_Impersonation;
@class GTLRFirebaseDataConnect_Impersonation_AuthClaims;
@class GTLRFirebaseDataConnect_Location;
@class GTLRFirebaseDataConnect_Location_Labels;
@class GTLRFirebaseDataConnect_Location_Metadata;
@class GTLRFirebaseDataConnect_Operation;
@class GTLRFirebaseDataConnect_Operation_Metadata;
@class GTLRFirebaseDataConnect_Operation_Response;
@class GTLRFirebaseDataConnect_PostgreSql;
@class GTLRFirebaseDataConnect_Schema;
@class GTLRFirebaseDataConnect_Schema_Annotations;
@class GTLRFirebaseDataConnect_Schema_Labels;
@class GTLRFirebaseDataConnect_Service;
@class GTLRFirebaseDataConnect_Service_Annotations;
@class GTLRFirebaseDataConnect_Service_Labels;
@class GTLRFirebaseDataConnect_Source;
@class GTLRFirebaseDataConnect_SourceLocation;
@class GTLRFirebaseDataConnect_Status;
@class GTLRFirebaseDataConnect_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseDataConnect_PostgreSql.schemaMigration

/**
 *  Connect to the SQL database and identify any missing SQL resources used in
 *  the given Firebase Data Connect Schema. Automatically create necessary SQL
 *  resources (SQL table, column, etc) before deploying the schema. During
 *  migration steps, the SQL Schema must comply with the previous before_deploy
 *  setting in case the migration is interrupted. Therefore, the previous
 *  before_deploy setting must not be `schema_validation=STRICT`.
 *
 *  Value: "MIGRATE_COMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaMigration_MigrateCompatible;
/**
 *  Unspecified SQL schema migration.
 *
 *  Value: "SQL_SCHEMA_MIGRATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaMigration_SqlSchemaMigrationUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseDataConnect_PostgreSql.schemaValidation

/**
 *  Connect to the SQL database and validate that the SQL DDL has all the SQL
 *  resources used in the given Firebase Data Connect Schema. Surface any
 *  missing resources as `FAILED_PRECONDITION` with an
 *  `IncompatibleSqlSchemaError` error detail. Succeed even if there are unknown
 *  tables and columns.
 *
 *  Value: "COMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_Compatible;
/**
 *  Skip no SQL schema validation. Use it with extreme caution. CreateSchema or
 *  UpdateSchema will succeed even if SQL database is unavailable or SQL schema
 *  is incompatible. Generated SQL may fail at execution time.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_None;
/**
 *  Unspecified SQL schema validation. Default to STRICT.
 *
 *  Value: "SQL_SCHEMA_VALIDATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_SqlSchemaValidationUnspecified;
/**
 *  Connect to the SQL database and validate that the SQL DDL matches the schema
 *  exactly. Surface any discrepancies as `FAILED_PRECONDITION` with an
 *  `IncompatibleSqlSchemaError` error detail.
 *
 *  Value: "STRICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_Strict;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRFirebaseDataConnect_CancelOperationRequest : GTLRObject
@end


/**
 *  Settings for CloudSQL instance configuration.
 */
@interface GTLRFirebaseDataConnect_CloudSqlInstance : GTLRObject

/**
 *  Required. Name of the CloudSQL instance, in the format: ```
 *  projects/{project}/locations/{location}/instances/{instance} ```
 */
@property(nonatomic, copy, nullable) NSString *instance;

@end


/**
 *  Connector consists of a set of operations, i.e. queries and mutations.
 */
@interface GTLRFirebaseDataConnect_Connector : GTLRObject

/** Optional. Stores small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Connector_Annotations *annotations;

/** Output only. [Output only] Create time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Mutable human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 *  [AIP-154](https://google.aip.dev/154)
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Connector_Labels *labels;

/**
 *  Identifier. The relative resource name of the connector, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/connectors/{connector}
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that if true, indicates that the system is working to
 *  compile and deploy the connector.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Required. The source files that comprise the connector. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Source *source;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. [Output only] Update time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Stores small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Connector_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Connector_Labels : GTLRObject
@end


/**
 *  A data source that backs Firebase Data Connect services.
 */
@interface GTLRFirebaseDataConnect_Datasource : GTLRObject

/** PostgreSQL configurations. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_PostgreSql *postgresql;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRFirebaseDataConnect_Empty : GTLRObject
@end


/**
 *  The ExecuteMutation request to Firebase Data Connect.
 */
@interface GTLRFirebaseDataConnect_ExecuteMutationRequest : GTLRObject

/**
 *  Required. The name of the GraphQL operation name. Required because all
 *  Connector operations must be named. See
 *  https://graphql.org/learn/queries/#operation-name.
 */
@property(nonatomic, copy, nullable) NSString *operationName;

/** Optional. Values for GraphQL variables provided in this request. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_ExecuteMutationRequest_Variables *variables;

@end


/**
 *  Optional. Values for GraphQL variables provided in this request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_ExecuteMutationRequest_Variables : GTLRObject
@end


/**
 *  The ExecuteMutation response from Firebase Data Connect.
 */
@interface GTLRFirebaseDataConnect_ExecuteMutationResponse : GTLRObject

/** The result of executing the requested operation. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_ExecuteMutationResponse_Data *data;

/** Errors of this response. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_GraphqlError *> *errors;

@end


/**
 *  The result of executing the requested operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_ExecuteMutationResponse_Data : GTLRObject
@end


/**
 *  The ExecuteQuery request to Firebase Data Connect.
 */
@interface GTLRFirebaseDataConnect_ExecuteQueryRequest : GTLRObject

/**
 *  Required. The name of the GraphQL operation name. Required because all
 *  Connector operations must be named. See
 *  https://graphql.org/learn/queries/#operation-name.
 */
@property(nonatomic, copy, nullable) NSString *operationName;

/** Optional. Values for GraphQL variables provided in this request. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_ExecuteQueryRequest_Variables *variables;

@end


/**
 *  Optional. Values for GraphQL variables provided in this request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_ExecuteQueryRequest_Variables : GTLRObject
@end


/**
 *  The ExecuteQuery response from Firebase Data Connect.
 */
@interface GTLRFirebaseDataConnect_ExecuteQueryResponse : GTLRObject

/** The result of executing the requested operation. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_ExecuteQueryResponse_Data *data;

/** Errors of this response. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_GraphqlError *> *errors;

@end


/**
 *  The result of executing the requested operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_ExecuteQueryResponse_Data : GTLRObject
@end


/**
 *  Individual files.
 */
@interface GTLRFirebaseDataConnect_File : GTLRObject

/** Required. The file's textual content. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  Required. The file name including folder path, if applicable. The path
 *  should be relative to a local workspace (e.g.
 *  dataconnect/(schema|connector)/ *.gql) and not an absolute path (e.g.
 *  /absolute/path/(schema|connector)/ *.gql).
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  GraphqlError conforms to the GraphQL error spec.
 *  https://spec.graphql.org/draft/#sec-Errors Firebase Data Connect API
 *  surfaces `GraphqlError` in various APIs: - Upon compile error,
 *  `UpdateSchema` and `UpdateConnector` return Code.Invalid_Argument with a
 *  list of `GraphqlError` in error details. - Upon query compile error,
 *  `ExecuteGraphql` and `ExecuteGraphqlRead` return Code.OK with a list of
 *  `GraphqlError` in response body. - Upon query execution error,
 *  `ExecuteGraphql`, `ExecuteGraphqlRead`, `ExecuteMutation` and `ExecuteQuery`
 *  all return Code.OK with a list of `GraphqlError` in response body.
 */
@interface GTLRFirebaseDataConnect_GraphqlError : GTLRObject

/** Additional error information. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_GraphqlErrorExtensions *extensions;

/**
 *  The source locations where the error occurred. Locations should help
 *  developers and toolings identify the source of error quickly. Included in
 *  admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`, `UpdateSchema` and
 *  `UpdateConnector`) to reference the provided GraphQL GQL document. Omitted
 *  in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't have
 *  access access the underlying GQL source.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_SourceLocation *> *locations;

/**
 *  The detailed error message. The message should help developer understand the
 *  underlying problem without leaking internal data.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  The result field which could not be populated due to error. Clients can use
 *  path to identify whether a null result is intentional or caused by a runtime
 *  error. It should be a list of string or index from the root of GraphQL query
 *  document.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) NSArray *path;

@end


/**
 *  GraphqlErrorExtensions contains additional information of `GraphqlError`.
 */
@interface GTLRFirebaseDataConnect_GraphqlErrorExtensions : GTLRObject

/**
 *  The source file name where the error occurred. Included only for
 *  `UpdateSchema` and `UpdateConnector`, it corresponds to `File.path` of the
 *  provided `Source`.
 */
@property(nonatomic, copy, nullable) NSString *file;

@end


/**
 *  The GraphQL request to Firebase Data Connect. It strives to match the
 *  GraphQL over HTTP spec.
 *  https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#post
 */
@interface GTLRFirebaseDataConnect_GraphqlRequest : GTLRObject

/** Optional. Additional GraphQL request information. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_GraphqlRequestExtensions *extensions;

/**
 *  Optional. The name of the GraphQL operation name. Required only if `query`
 *  contains multiple operations. See
 *  https://graphql.org/learn/queries/#operation-name.
 */
@property(nonatomic, copy, nullable) NSString *operationName;

/** Required. The GraphQL query document source. */
@property(nonatomic, copy, nullable) NSString *query;

/** Optional. Values for GraphQL variables provided in this request. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_GraphqlRequest_Variables *variables;

@end


/**
 *  Optional. Values for GraphQL variables provided in this request.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_GraphqlRequest_Variables : GTLRObject
@end


/**
 *  GraphqlRequestExtensions contains additional information of
 *  `GraphqlRequest`.
 */
@interface GTLRFirebaseDataConnect_GraphqlRequestExtensions : GTLRObject

/**
 *  Optional. If set, impersonate a request with given Firebase Auth context and
 *  evaluate the auth policies on the operation. If omitted, bypass any defined
 *  auth policies.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Impersonation *impersonate;

@end


/**
 *  The GraphQL response from Firebase Data Connect. It strives to match the
 *  GraphQL over HTTP spec. Note: Firebase Data Connect always responds with
 *  `Content-Type: application/json`.
 *  https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#body
 */
@interface GTLRFirebaseDataConnect_GraphqlResponse : GTLRObject

/**
 *  The result of the execution of the requested operation. If an error was
 *  raised before execution begins, the data entry should not be present in the
 *  result. (a request error:
 *  https://spec.graphql.org/draft/#sec-Errors.Request-Errors) If an error was
 *  raised during the execution that prevented a valid response, the data entry
 *  in the response should be null. (a field error:
 *  https://spec.graphql.org/draft/#sec-Errors.Error-Result-Format)
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_GraphqlResponse_Data *data;

/**
 *  Errors of this response. If the data entry in the response is not present,
 *  the errors entry must be present. It conforms to
 *  https://spec.graphql.org/draft/#sec-Errors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_GraphqlError *> *errors;

@end


/**
 *  The result of the execution of the requested operation. If an error was
 *  raised before execution begins, the data entry should not be present in the
 *  result. (a request error:
 *  https://spec.graphql.org/draft/#sec-Errors.Request-Errors) If an error was
 *  raised during the execution that prevented a valid response, the data entry
 *  in the response should be null. (a field error:
 *  https://spec.graphql.org/draft/#sec-Errors.Error-Result-Format)
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_GraphqlResponse_Data : GTLRObject
@end


/**
 *  Impersonation configures the Firebase Auth context to impersonate.
 */
@interface GTLRFirebaseDataConnect_Impersonation : GTLRObject

/**
 *  Evaluate the auth policy with a customized JWT auth token. Should follow the
 *  Firebase Auth token format.
 *  https://firebase.google.com/docs/rules/rules-and-auth For example: a
 *  verified user may have auth_claims of {"sub": , "email_verified": true}
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Impersonation_AuthClaims *authClaims;

/**
 *  Evaluate the auth policy as an unauthenticated request. Can only be set to
 *  true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unauthenticated;

@end


/**
 *  Evaluate the auth policy with a customized JWT auth token. Should follow the
 *  Firebase Auth token format.
 *  https://firebase.google.com/docs/rules/rules-and-auth For example: a
 *  verified user may have auth_claims of {"sub": , "email_verified": true}
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Impersonation_AuthClaims : GTLRObject
@end


/**
 *  Message for response to listing Connectors. By default, `connectors.source`
 *  will not be included in the response. To specify the fields included in the
 *  response, the response field mask can be provided by using the query
 *  parameter `$fields` or the header `X-Goog-FieldMask`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connectors" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseDataConnect_ListConnectorsResponse : GTLRCollectionObject

/**
 *  The list of Connectors.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Connector *> *connectors;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseDataConnect_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseDataConnect_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Operation *> *operations;

@end


/**
 *  Message for response to listing Schemas. By default, `schemas.source` will
 *  not be included in the response. To specify the fields included in the
 *  response, the response field mask can be provided by using the query
 *  parameter `$fields` or the header `X-Goog-FieldMask`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "schemas" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseDataConnect_ListSchemasResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of Schemas.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Schema *> *schemas;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for response to listing Services.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseDataConnect_ListServicesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of Services.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Service *> *services;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRFirebaseDataConnect_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Location_Metadata : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRFirebaseDataConnect_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation. Note: This message is
 *  auto-generated by CCFE. CCFE's storage, called Resource Metadata Store
 *  (RMS), holds metadata about long-running operations (i.e. OperationMetadata)
 *  and resources (i.e. ResourceMetadata). OperationMetadata documents the
 *  status of the operation. See [CCFE documentation for sidechannel
 *  data](https://g3doc.corp.google.com/cloud/control2/g3doc/dev/codelab_extras/sidechannel.md?cl=head#sidechannel-data)
 *  and yaqs/4289526912465764352.
 */
@interface GTLRFirebaseDataConnect_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Settings for PostgreSQL data source.
 */
@interface GTLRFirebaseDataConnect_PostgreSql : GTLRObject

/** Cloud SQL configurations. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_CloudSqlInstance *cloudSql;

/** Required. Name of the PostgreSQL database. */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Optional. Configure how to perform Postgresql schema migration.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaMigration_MigrateCompatible
 *        Connect to the SQL database and identify any missing SQL resources
 *        used in the given Firebase Data Connect Schema. Automatically create
 *        necessary SQL resources (SQL table, column, etc) before deploying the
 *        schema. During migration steps, the SQL Schema must comply with the
 *        previous before_deploy setting in case the migration is interrupted.
 *        Therefore, the previous before_deploy setting must not be
 *        `schema_validation=STRICT`. (Value: "MIGRATE_COMPATIBLE")
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaMigration_SqlSchemaMigrationUnspecified
 *        Unspecified SQL schema migration. (Value:
 *        "SQL_SCHEMA_MIGRATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *schemaMigration;

/**
 *  Optional. Configure how much Postgresql schema validation to perform.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_Compatible
 *        Connect to the SQL database and validate that the SQL DDL has all the
 *        SQL resources used in the given Firebase Data Connect Schema. Surface
 *        any missing resources as `FAILED_PRECONDITION` with an
 *        `IncompatibleSqlSchemaError` error detail. Succeed even if there are
 *        unknown tables and columns. (Value: "COMPATIBLE")
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_None Skip no
 *        SQL schema validation. Use it with extreme caution. CreateSchema or
 *        UpdateSchema will succeed even if SQL database is unavailable or SQL
 *        schema is incompatible. Generated SQL may fail at execution time.
 *        (Value: "NONE")
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_SqlSchemaValidationUnspecified
 *        Unspecified SQL schema validation. Default to STRICT. (Value:
 *        "SQL_SCHEMA_VALIDATION_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseDataConnect_PostgreSql_SchemaValidation_Strict
 *        Connect to the SQL database and validate that the SQL DDL matches the
 *        schema exactly. Surface any discrepancies as `FAILED_PRECONDITION`
 *        with an `IncompatibleSqlSchemaError` error detail. (Value: "STRICT")
 */
@property(nonatomic, copy, nullable) NSString *schemaValidation;

/**
 *  No Postgres data source is linked. If set, don't allow `database` and
 *  `schema_validation` to be configured.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unlinked;

@end


/**
 *  The application schema of a Firebase Data Connect service.
 */
@interface GTLRFirebaseDataConnect_Schema : GTLRObject

/** Optional. Stores small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Schema_Annotations *annotations;

/** Output only. [Output only] Create time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. The data sources linked in the schema. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Datasource *> *datasources;

/** Optional. Mutable human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 *  [AIP-154](https://google.aip.dev/154)
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Schema_Labels *labels;

/**
 *  Identifier. The relative resource name of the schema, in the format: ```
 *  projects/{project}/locations/{location}/services/{service}/schemas/{schema}
 *  ``` Right now, the only supported schema is "main".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that if true, indicates that the system is working to
 *  compile and deploy the schema.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Required. The source files that comprise the application schema. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Source *source;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. [Output only] Update time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Stores small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Schema_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Schema_Labels : GTLRObject
@end


/**
 *  A Firebase Data Connect service.
 */
@interface GTLRFirebaseDataConnect_Service : GTLRObject

/** Optional. Stores small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Service_Annotations *annotations;

/** Output only. [Output only] Create time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Mutable human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 *  [AIP-154](https://google.aip.dev/154)
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs. */
@property(nonatomic, strong, nullable) GTLRFirebaseDataConnect_Service_Labels *labels;

/**
 *  Identifier. The relative resource name of the Firebase Data Connect service,
 *  in the format: ```
 *  projects/{project}/locations/{location}/services/{service} ``` Note that the
 *  service ID is specific to Firebase Data Connect and does not correspond to
 *  any of the instance IDs of the underlying data source connections.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that if true, indicates that the system is working
 *  update the service.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. [Output only] Update time stamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Stores small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Service_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Service_Labels : GTLRObject
@end


/**
 *  Used to represent a set of source files.
 */
@interface GTLRFirebaseDataConnect_Source : GTLRObject

/** Required. The files that comprise the source set. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_File *> *files;

@end


/**
 *  SourceLocation references a location in a GraphQL source.
 */
@interface GTLRFirebaseDataConnect_SourceLocation : GTLRObject

/**
 *  Column number starting at 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *column;

/**
 *  Line number starting at 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRFirebaseDataConnect_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseDataConnect_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRFirebaseDataConnect_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseDataConnect_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
