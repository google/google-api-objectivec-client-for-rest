// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Run Admin API (run/v2)
// Description:
//   Deploy and manage user provided container images that scale automatically
//   based on incoming requests. The Cloud Run Admin API v1 follows the Knative
//   Serving API specification, while v2 is aligned with Google Cloud AIP-based
//   API standards, as described in https://google.aip.dev/.
// Documentation:
//   https://cloud.google.com/run/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRun_GoogleCloudRunV2BinaryAuthorization;
@class GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild;
@class GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild_EnvironmentVariables;
@class GTLRCloudRun_GoogleCloudRunV2CloudSqlInstance;
@class GTLRCloudRun_GoogleCloudRunV2Condition;
@class GTLRCloudRun_GoogleCloudRunV2Container;
@class GTLRCloudRun_GoogleCloudRunV2ContainerOverride;
@class GTLRCloudRun_GoogleCloudRunV2ContainerPort;
@class GTLRCloudRun_GoogleCloudRunV2DockerBuild;
@class GTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource;
@class GTLRCloudRun_GoogleCloudRunV2EnvVar;
@class GTLRCloudRun_GoogleCloudRunV2EnvVarSource;
@class GTLRCloudRun_GoogleCloudRunV2Execution;
@class GTLRCloudRun_GoogleCloudRunV2Execution_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2Execution_Labels;
@class GTLRCloudRun_GoogleCloudRunV2ExecutionReference;
@class GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate;
@class GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Labels;
@class GTLRCloudRun_GoogleCloudRunV2GCSVolumeSource;
@class GTLRCloudRun_GoogleCloudRunV2GRPCAction;
@class GTLRCloudRun_GoogleCloudRunV2HTTPGetAction;
@class GTLRCloudRun_GoogleCloudRunV2HTTPHeader;
@class GTLRCloudRun_GoogleCloudRunV2ImageExportStatus;
@class GTLRCloudRun_GoogleCloudRunV2Job;
@class GTLRCloudRun_GoogleCloudRunV2Job_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2Job_Labels;
@class GTLRCloudRun_GoogleCloudRunV2NetworkInterface;
@class GTLRCloudRun_GoogleCloudRunV2NFSVolumeSource;
@class GTLRCloudRun_GoogleCloudRunV2NodeSelector;
@class GTLRCloudRun_GoogleCloudRunV2Overrides;
@class GTLRCloudRun_GoogleCloudRunV2Probe;
@class GTLRCloudRun_GoogleCloudRunV2ResourceRequirements;
@class GTLRCloudRun_GoogleCloudRunV2ResourceRequirements_Limits;
@class GTLRCloudRun_GoogleCloudRunV2Revision;
@class GTLRCloudRun_GoogleCloudRunV2Revision_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2Revision_Labels;
@class GTLRCloudRun_GoogleCloudRunV2RevisionScaling;
@class GTLRCloudRun_GoogleCloudRunV2RevisionScalingStatus;
@class GTLRCloudRun_GoogleCloudRunV2RevisionTemplate;
@class GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Labels;
@class GTLRCloudRun_GoogleCloudRunV2SecretKeySelector;
@class GTLRCloudRun_GoogleCloudRunV2SecretVolumeSource;
@class GTLRCloudRun_GoogleCloudRunV2Service;
@class GTLRCloudRun_GoogleCloudRunV2Service_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2Service_Labels;
@class GTLRCloudRun_GoogleCloudRunV2ServiceMesh;
@class GTLRCloudRun_GoogleCloudRunV2ServiceScaling;
@class GTLRCloudRun_GoogleCloudRunV2StorageSource;
@class GTLRCloudRun_GoogleCloudRunV2Task;
@class GTLRCloudRun_GoogleCloudRunV2Task_Annotations;
@class GTLRCloudRun_GoogleCloudRunV2Task_Labels;
@class GTLRCloudRun_GoogleCloudRunV2TaskAttemptResult;
@class GTLRCloudRun_GoogleCloudRunV2TaskTemplate;
@class GTLRCloudRun_GoogleCloudRunV2TCPSocketAction;
@class GTLRCloudRun_GoogleCloudRunV2TrafficTarget;
@class GTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus;
@class GTLRCloudRun_GoogleCloudRunV2VersionToPath;
@class GTLRCloudRun_GoogleCloudRunV2Volume;
@class GTLRCloudRun_GoogleCloudRunV2VolumeMount;
@class GTLRCloudRun_GoogleCloudRunV2VpcAccess;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalConfig;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1ArtifactObjects;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Artifacts;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Substitutions;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Timing;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuiltImage;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1ConnectedRepository;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1DeveloperConnectConfig;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitConfig;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitSource;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1HttpConfig;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1MavenArtifact;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1NpmPackage;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1PoolOption;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1PythonPackage;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Results;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret_SecretEnv;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1SecretManagerSecret;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secrets;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Source;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSourceManifest;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedNpmPackage;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedPythonPackage;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Volume;
@class GTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning;
@class GTLRCloudRun_GoogleIamV1AuditConfig;
@class GTLRCloudRun_GoogleIamV1AuditLogConfig;
@class GTLRCloudRun_GoogleIamV1Binding;
@class GTLRCloudRun_GoogleIamV1Policy;
@class GTLRCloudRun_GoogleLongrunningOperation;
@class GTLRCloudRun_GoogleLongrunningOperation_Metadata;
@class GTLRCloudRun_GoogleLongrunningOperation_Response;
@class GTLRCloudRun_GoogleRpcStatus;
@class GTLRCloudRun_GoogleRpcStatus_Details_Item;
@class GTLRCloudRun_GoogleTypeExpr;
@class GTLRCloudRun_Proto2BridgeMessageSet;
@class GTLRCloudRun_UtilStatusProto;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Condition.executionReason

/**
 *  The execution was cancelled by users.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Cancelled;
/**
 *  The execution is in the process of being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Cancelling;
/**
 *  The execution was deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Deleted;
/**
 *  Default value.
 *
 *  Value: "EXECUTION_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_ExecutionReasonUndefined;
/**
 *  Internal system error getting execution status. System will retry.
 *
 *  Value: "JOB_STATUS_SERVICE_POLLING_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_JobStatusServicePollingError;
/**
 *  A task reached its retry limit and the last attempt failed due to the user
 *  container exiting with a non-zero exit code.
 *
 *  Value: "NON_ZERO_EXIT_CODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_NonZeroExitCode;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Condition.reason

/**
 *  Default value.
 *
 *  Value: "COMMON_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_CommonReasonUndefined;
/**
 *  Container image policy authorization check failed.
 *
 *  Value: "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerImageAuthorizationCheckFailed;
/**
 *  Container image is not authorized by policy.
 *
 *  Value: "CONTAINER_IMAGE_UNAUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerImageUnauthorized;
/**
 *  The container image path is incorrect.
 *
 *  Value: "CONTAINER_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerMissing;
/**
 *  Insufficient permissions on the container image.
 *
 *  Value: "CONTAINER_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerPermissionDenied;
/**
 *  Permission check on encryption key failed.
 *
 *  Value: "ENCRYPTION_KEY_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_EncryptionKeyCheckFailed;
/**
 *  Insufficient permissions on encryption key.
 *
 *  Value: "ENCRYPTION_KEY_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_EncryptionKeyPermissionDenied;
/**
 *  System will retry immediately.
 *
 *  Value: "IMMEDIATE_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ImmediateRetry;
/**
 *  An internal error occurred. Further information may be in the message.
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_Internal;
/**
 *  System will retry later; current attempt failed.
 *
 *  Value: "POSTPONED_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_PostponedRetry;
/**
 *  Timed out waiting for completion.
 *
 *  Value: "PROGRESS_DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ProgressDeadlineExceeded;
/**
 *  Revision creation process failed.
 *
 *  Value: "REVISION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_RevisionFailed;
/**
 *  At least one Access check on secrets failed.
 *
 *  Value: "SECRETS_ACCESS_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_SecretsAccessCheckFailed;
/**
 *  Reason unknown. Further details will be in message.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_Unknown;
/**
 *  Waiting for operation to complete.
 *
 *  Value: "WAITING_FOR_OPERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_WaitingForOperation;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Condition.revisionReason

/**
 *  The maximum allowed number of active revisions has been reached.
 *
 *  Value: "ACTIVE_REVISION_LIMIT_REACHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_ActiveRevisionLimitReached;
/**
 *  Health check failed due to user error from customized path of the container.
 *  System will retry.
 *
 *  Value: "CUSTOMIZED_PATH_RESPONSE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_CustomizedPathResponsePending;
/**
 *  There was a health check error.
 *
 *  Value: "HEALTH_CHECK_CONTAINER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_HealthCheckContainerError;
/**
 *  A revision's container has no port specified since the revision is of a
 *  manually scaled service with 0 instance count
 *
 *  Value: "HEALTH_CHECK_SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_HealthCheckSkipped;
/**
 *  A revision with min_instance_count > 0 was created and is reserved, but it
 *  was not configured to serve traffic, so it's not live. This can also happen
 *  momentarily during traffic migration.
 *
 *  Value: "MIN_INSTANCES_NOT_PROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_MinInstancesNotProvisioned;
/**
 *  A revision with min_instance_count > 0 was created and is waiting for enough
 *  instances to begin a traffic migration.
 *
 *  Value: "MIN_INSTANCES_WARMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_MinInstancesWarming;
/**
 *  There was no deployment defined. This value is no longer used, but Services
 *  created in older versions of the API might contain this value.
 *
 *  Value: "NO_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_NoDeployment;
/**
 *  Revision in Pending state.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Pending;
/**
 *  Revision is being recreated.
 *
 *  Value: "RECREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Recreating;
/**
 *  Revision is in Reserve state.
 *
 *  Value: "RESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Reserve;
/**
 *  Revision is Retired.
 *
 *  Value: "RETIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Retired;
/**
 *  Revision is being retired.
 *
 *  Value: "RETIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Retiring;
/**
 *  Default value.
 *
 *  Value: "REVISION_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_RevisionReasonUndefined;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Condition.severity

/**
 *  Error severity.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Error;
/**
 *  Info severity.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Info;
/**
 *  Unspecified severity
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_SeverityUnspecified;
/**
 *  Warning severity.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Condition.state

/**
 *  Terminal state: Reconciliation did not succeed.
 *
 *  Value: "CONDITION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionFailed;
/**
 *  Transient state: Reconciliation has not started yet.
 *
 *  Value: "CONDITION_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionPending;
/**
 *  Transient state: reconciliation is still in progress.
 *
 *  Value: "CONDITION_RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionReconciling;
/**
 *  Terminal state: Reconciliation completed successfully.
 *
 *  Value: "CONDITION_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionSucceeded;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Condition_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource.medium

/**
 *  When not specified, falls back to the default implementation which is
 *  currently in memory (this may change over time).
 *
 *  Value: "MEDIUM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource_Medium_MediumUnspecified;
/**
 *  Explicitly set the EmptyDir to be in memory. Uses tmpfs.
 *
 *  Value: "MEMORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource_Medium_Memory;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Execution.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2ExecutionReference.completionStatus

/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "COMPLETION_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_CompletionStatusUnspecified;
/**
 *  Job execution has been cancelled by the user.
 *
 *  Value: "EXECUTION_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionCancelled;
/**
 *  Job execution has failed.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionFailed;
/**
 *  Waiting for backing resources to be provisioned.
 *
 *  Value: "EXECUTION_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionPending;
/**
 *  Job execution is running normally.
 *
 *  Value: "EXECUTION_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionRunning;
/**
 *  Job execution has succeeded.
 *
 *  Value: "EXECUTION_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionSucceeded;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2ExportStatusResponse.operationState

/**
 *  Operation finished.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_Finished;
/**
 *  Operation still in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_InProgress;
/**
 *  State unspecified.
 *
 *  Value: "OPERATION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_OperationStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2ImageExportStatus.exportJobState

/**
 *  State unspecified.
 *
 *  Value: "EXPORT_JOB_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_ExportJobStateUnspecified;
/**
 *  Job finished.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_Finished;
/**
 *  Job still in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_InProgress;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Job.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Revision.encryptionKeyRevocationAction

/**
 *  Unspecified
 *
 *  Value: "ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_EncryptionKeyRevocationActionUnspecified;
/**
 *  Prevents the creation of new instances.
 *
 *  Value: "PREVENT_NEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_PreventNew;
/**
 *  Shuts down existing instances, and prevents creation of new ones.
 *
 *  Value: "SHUTDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_Shutdown;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Revision.executionEnvironment

/**
 *  Uses the First Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen1;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Revision.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2RevisionTemplate.executionEnvironment

/**
 *  Uses the First Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen1;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Service.ingress

/**
 *  All inbound traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficAll;
/**
 *  Both internal and Google Cloud Load Balancer traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficInternalLoadBalancer;
/**
 *  Only internal traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_INTERNAL_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficInternalOnly;
/**
 *  No ingress traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficNone;
/**
 *  Unspecified
 *
 *  Value: "INGRESS_TRAFFIC_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Service.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2ServiceScaling.scalingMode

/**
 *  Scale based on traffic between min and max instances.
 *
 *  Value: "AUTOMATIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_Automatic;
/**
 *  Scale to exactly min instances and ignore max instances.
 *
 *  Value: "MANUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_Manual;
/**
 *  Unspecified.
 *
 *  Value: "SCALING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_ScalingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2Task.executionEnvironment

/**
 *  Uses the First Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentGen1;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2TaskTemplate.executionEnvironment

/**
 *  Uses the First Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentGen1;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2TrafficTarget.type

/**
 *  Allocates instances to the Service's latest ready Revision.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeLatest;
/**
 *  Allocates instances to a Revision by name.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeRevision;
/**
 *  Unspecified instance allocation type.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus.type

/**
 *  Allocates instances to the Service's latest ready Revision.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeLatest;
/**
 *  Allocates instances to a Revision by name.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeRevision;
/**
 *  Unspecified instance allocation type.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunV2VpcAccess.egress

/**
 *  All outbound traffic is routed through the VPC connector.
 *
 *  Value: "ALL_TRAFFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_AllTraffic;
/**
 *  Only private IP ranges are routed through the VPC connector.
 *
 *  Value: "PRIVATE_RANGES_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_PrivateRangesOnly;
/**
 *  Unspecified
 *
 *  Value: "VPC_EGRESS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_VpcEgressUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult.decision

/**
 *  Build is approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Approved;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "DECISION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_DecisionUnspecified;
/**
 *  Build is rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Rejected;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Working;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval.state

/**
 *  Build approval has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Approved;
/**
 *  Build was cancelled while it was still pending approval.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Cancelled;
/**
 *  Build approval is pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Pending;
/**
 *  Build approval has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Rejected;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.defaultLogsBucketBehavior

/**
 *  Unspecified.
 *
 *  Value: "DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_DefaultLogsBucketBehavior_DefaultLogsBucketBehaviorUnspecified;
/**
 *  Bucket is located in user-owned project in the same region as the build. The
 *  builder service account must have access to create and write to Cloud
 *  Storage buckets in the build project.
 *
 *  Value: "REGIONAL_USER_OWNED_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_DefaultLogsBucketBehavior_RegionalUserOwnedBucket;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.logging

/**
 *  Build logs are stored in Cloud Logging. Selecting this option will not allow
 *  [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *
 *  Value: "CLOUD_LOGGING_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_CloudLoggingOnly;
/**
 *  Build logs are stored in Cloud Storage.
 *
 *  Value: "GCS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_GcsOnly;
/**
 *  Build logs are stored in Cloud Logging and Cloud Storage.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_Legacy;
/**
 *  The service determines the logging mode. The default is `LEGACY`. Do not
 *  rely on the default logging behavior as it may change in the future.
 *
 *  Value: "LOGGING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_LoggingUnspecified;
/**
 *  Turn off all logging. No build logs will be captured.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_None;
/**
 *  This option is the same as CLOUD_LOGGING_ONLY.
 *
 *  Value: "STACKDRIVER_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_StackdriverOnly GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.logStreamingOption

/**
 *  Service may automatically determine build log streaming behavior.
 *
 *  Value: "STREAM_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamDefault;
/**
 *  Build logs should not be streamed to Cloud Storage; they will be written
 *  when the build is completed.
 *
 *  Value: "STREAM_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOff;
/**
 *  Build logs should be streamed to Cloud Storage.
 *
 *  Value: "STREAM_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOn;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.machineType

/**
 *  Highcpu e2 machine with 32 CPUs.
 *
 *  Value: "E2_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu32;
/**
 *  Highcpu e2 machine with 8 CPUs.
 *
 *  Value: "E2_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu8;
/**
 *  E2 machine with 1 CPU.
 *
 *  Value: "E2_MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Medium;
/**
 *  Highcpu machine with 32 CPUs.
 *
 *  Value: "N1_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu32 GTLR_DEPRECATED;
/**
 *  Highcpu machine with 8 CPUs.
 *
 *  Value: "N1_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu8 GTLR_DEPRECATED;
/**
 *  Standard machine type.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.requestedVerifyOption

/**
 *  Not a verifiable build (the default).
 *
 *  Value: "NOT_VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_NotVerified;
/**
 *  Build must be verified.
 *
 *  Value: "VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_Verified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.sourceProvenanceHash

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_Sha256;
/**
 *  Use a sha512 hash.
 *
 *  Value: "SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_Sha512;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions.substitutionOption

/**
 *  Do not fail the build if error in substitutions checks.
 *
 *  Value: "ALLOW_LOOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_AllowLoose;
/**
 *  Fails the build if error in substitutions checks, like missing a
 *  substitution in the template or in the map.
 *
 *  Value: "MUST_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_MustMatch;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Working;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo.type

/**
 *  Type unspecified
 *
 *  Value: "FAILURE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_FailureTypeUnspecified;
/**
 *  The source fetching has failed.
 *
 *  Value: "FETCH_SOURCE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_FetchSourceFailed;
/**
 *  Backend logging failures. Should retry.
 *
 *  Value: "LOGGING_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_LoggingFailure;
/**
 *  Unable to push the image to the repository.
 *
 *  Value: "PUSH_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushFailed;
/**
 *  Final image not found.
 *
 *  Value: "PUSH_IMAGE_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushImageNotFound;
/**
 *  Unauthorized push of the final image.
 *
 *  Value: "PUSH_NOT_AUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushNotAuthorized;
/**
 *  A build step has failed.
 *
 *  Value: "USER_BUILD_STEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_UserBuildStep;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash.type

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Sha256;
/**
 *  Use a sha512 hash.
 *
 *  Value: "SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Sha512;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource.sourceFetcher

/**
 *  Use the Cloud Storage Fetcher tool to download the source file.
 *
 *  Value: "GCS_FETCHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_GcsFetcher;
/**
 *  Use the "gsutil" tool to download the source file.
 *
 *  Value: "GSUTIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_Gsutil;
/**
 *  Unspecified defaults to GSUTIL.
 *
 *  Value: "SOURCE_FETCHER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_SourceFetcherUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning.priority

/**
 *  e.g. alerts that a feature used in the build is pending removal
 *
 *  Value: "ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Alert;
/**
 *  e.g. deprecation warnings and alternative feature highlights.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Info;
/**
 *  Should not be used.
 *
 *  Value: "PRIORITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_PriorityUnspecified;
/**
 *  e.g. automated detection of possible issues with the build.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Warning;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleIamV1AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified;

/**
 *  Settings for Binary Authorization feature.
 */
@interface GTLRCloudRun_GoogleCloudRunV2BinaryAuthorization : GTLRObject

/**
 *  Optional. If present, indicates to use Breakglass using this justification.
 *  If use_default is False, then it must be empty. For more information on
 *  breakglass, see
 *  https://cloud.google.com/binary-authorization/docs/using-breakglass
 */
@property(nonatomic, copy, nullable) NSString *breakglassJustification;

/**
 *  Optional. The path to a binary authorization policy. Format:
 *  projects/{project}/platforms/cloudRun/{policy-name}
 */
@property(nonatomic, copy, nullable) NSString *policy;

/**
 *  Optional. If True, indicates to use the default project's binary
 *  authorization policy. If False, binary authorization will be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useDefault;

@end


/**
 *  Build the source using Buildpacks.
 */
@interface GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild : GTLRObject

/** Optional. The base image used to opt into automatic base image updates. */
@property(nonatomic, copy, nullable) NSString *baseImage;

/**
 *  Optional. cache_image_uri is the GCR/AR URL where the cache image will be
 *  stored. cache_image_uri is optional and omitting it will disable caching.
 *  This URL must be stable across builds. It is used to derive a build-specific
 *  temporary URL by substituting the tag with the build ID. The build will
 *  clean up the temporary image on a best-effort basis.
 */
@property(nonatomic, copy, nullable) NSString *cacheImageUri;

/**
 *  Optional. Whether or not the application container will be enrolled in
 *  automatic base image updates. When true, the application will be built on a
 *  scratch base image, so the base layers can be appended at run time.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAutomaticUpdates;

/** Optional. User-provided build-time environment variables. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild_EnvironmentVariables *environmentVariables;

/**
 *  Optional. Name of the function target if the source is a function source.
 *  Required for function builds.
 */
@property(nonatomic, copy, nullable) NSString *functionTarget;

/** The runtime name, e.g. 'go113'. Leave blank for generic builds. */
@property(nonatomic, copy, nullable) NSString *runtime GTLR_DEPRECATED;

@end


/**
 *  Optional. User-provided build-time environment variables.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild_EnvironmentVariables : GTLRObject
@end


/**
 *  Request message for deleting an Execution.
 */
@interface GTLRCloudRun_GoogleCloudRunV2CancelExecutionRequest : GTLRObject

/**
 *  A system-generated fingerprint for this version of the resource. This may be
 *  used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Indicates that the request should be validated without actually cancelling
 *  any resources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateOnly;

@end


/**
 *  Represents a set of Cloud SQL instances. Each one will be available under
 *  /cloudsql/[instance]. Visit
 *  https://cloud.google.com/sql/docs/mysql/connect-run for more information on
 *  how to connect Cloud SQL and Cloud Run.
 */
@interface GTLRCloudRun_GoogleCloudRunV2CloudSqlInstance : GTLRObject

/**
 *  The Cloud SQL instance connection names, as can be found in
 *  https://console.cloud.google.com/sql/instances. Visit
 *  https://cloud.google.com/sql/docs/mysql/connect-run for more information on
 *  how to connect Cloud SQL and Cloud Run. Format:
 *  {project}:{location}:{instance}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *instances;

@end


/**
 *  Defines a status condition for a resource.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Condition : GTLRObject

/**
 *  Output only. A reason for the execution condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Cancelled
 *        The execution was cancelled by users. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Cancelling
 *        The execution is in the process of being cancelled. (Value:
 *        "CANCELLING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_Deleted
 *        The execution was deleted. (Value: "DELETED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_ExecutionReasonUndefined
 *        Default value. (Value: "EXECUTION_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_JobStatusServicePollingError
 *        Internal system error getting execution status. System will retry.
 *        (Value: "JOB_STATUS_SERVICE_POLLING_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_ExecutionReason_NonZeroExitCode
 *        A task reached its retry limit and the last attempt failed due to the
 *        user container exiting with a non-zero exit code. (Value:
 *        "NON_ZERO_EXIT_CODE")
 */
@property(nonatomic, copy, nullable) NSString *executionReason;

/** Last time the condition transitioned from one status to another. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastTransitionTime;

/** Human readable message indicating details about the current status. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Output only. A common (service-level) reason for this condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_CommonReasonUndefined
 *        Default value. (Value: "COMMON_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerImageAuthorizationCheckFailed
 *        Container image policy authorization check failed. (Value:
 *        "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerImageUnauthorized
 *        Container image is not authorized by policy. (Value:
 *        "CONTAINER_IMAGE_UNAUTHORIZED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerMissing
 *        The container image path is incorrect. (Value: "CONTAINER_MISSING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ContainerPermissionDenied
 *        Insufficient permissions on the container image. (Value:
 *        "CONTAINER_PERMISSION_DENIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_EncryptionKeyCheckFailed
 *        Permission check on encryption key failed. (Value:
 *        "ENCRYPTION_KEY_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_EncryptionKeyPermissionDenied
 *        Insufficient permissions on encryption key. (Value:
 *        "ENCRYPTION_KEY_PERMISSION_DENIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ImmediateRetry
 *        System will retry immediately. (Value: "IMMEDIATE_RETRY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_Internal An
 *        internal error occurred. Further information may be in the message.
 *        (Value: "INTERNAL")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_PostponedRetry
 *        System will retry later; current attempt failed. (Value:
 *        "POSTPONED_RETRY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_ProgressDeadlineExceeded
 *        Timed out waiting for completion. (Value:
 *        "PROGRESS_DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_RevisionFailed
 *        Revision creation process failed. (Value: "REVISION_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_SecretsAccessCheckFailed
 *        At least one Access check on secrets failed. (Value:
 *        "SECRETS_ACCESS_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_Unknown Reason
 *        unknown. Further details will be in message. (Value: "UNKNOWN")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Reason_WaitingForOperation
 *        Waiting for operation to complete. (Value: "WAITING_FOR_OPERATION")
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Output only. A reason for the revision condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_ActiveRevisionLimitReached
 *        The maximum allowed number of active revisions has been reached.
 *        (Value: "ACTIVE_REVISION_LIMIT_REACHED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_CustomizedPathResponsePending
 *        Health check failed due to user error from customized path of the
 *        container. System will retry. (Value:
 *        "CUSTOMIZED_PATH_RESPONSE_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_HealthCheckContainerError
 *        There was a health check error. (Value:
 *        "HEALTH_CHECK_CONTAINER_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_HealthCheckSkipped
 *        A revision's container has no port specified since the revision is of
 *        a manually scaled service with 0 instance count (Value:
 *        "HEALTH_CHECK_SKIPPED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_MinInstancesNotProvisioned
 *        A revision with min_instance_count > 0 was created and is reserved,
 *        but it was not configured to serve traffic, so it's not live. This can
 *        also happen momentarily during traffic migration. (Value:
 *        "MIN_INSTANCES_NOT_PROVISIONED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_MinInstancesWarming
 *        A revision with min_instance_count > 0 was created and is waiting for
 *        enough instances to begin a traffic migration. (Value:
 *        "MIN_INSTANCES_WARMING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_NoDeployment
 *        There was no deployment defined. This value is no longer used, but
 *        Services created in older versions of the API might contain this
 *        value. (Value: "NO_DEPLOYMENT")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Pending
 *        Revision in Pending state. (Value: "PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Recreating
 *        Revision is being recreated. (Value: "RECREATING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Reserve
 *        Revision is in Reserve state. (Value: "RESERVE")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Retired
 *        Revision is Retired. (Value: "RETIRED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_Retiring
 *        Revision is being retired. (Value: "RETIRING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_RevisionReason_RevisionReasonUndefined
 *        Default value. (Value: "REVISION_REASON_UNDEFINED")
 */
@property(nonatomic, copy, nullable) NSString *revisionReason;

/**
 *  How to interpret failures of this condition, one of Error, Warning, Info
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Error Error
 *        severity. (Value: "ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Info Info
 *        severity. (Value: "INFO")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_SeverityUnspecified
 *        Unspecified severity (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_Severity_Warning Warning
 *        severity. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  State of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionFailed
 *        Terminal state: Reconciliation did not succeed. (Value:
 *        "CONDITION_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionPending
 *        Transient state: Reconciliation has not started yet. (Value:
 *        "CONDITION_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionReconciling
 *        Transient state: reconciliation is still in progress. (Value:
 *        "CONDITION_RECONCILING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_State_ConditionSucceeded
 *        Terminal state: Reconciliation completed successfully. (Value:
 *        "CONDITION_SUCCEEDED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Condition_State_StateUnspecified The
 *        default value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  type is used to communicate the status of the reconciliation process. See
 *  also:
 *  https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting
 *  Types common to all resources include: * "Ready": True when the Resource is
 *  ready.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A single application container. This specifies both the container to run,
 *  the command to run in the container and the arguments to supply to it. Note
 *  that additional arguments can be supplied by the system to the container at
 *  runtime.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Container : GTLRObject

/**
 *  Arguments to the entrypoint. The docker image's CMD is used if this is not
 *  provided.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT
 *  is used if this is not provided.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *command;

/** Names of the containers that must start before this container. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dependsOn;

/** List of environment variables to set in the container. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2EnvVar *> *env;

/**
 *  Required. Name of the container image in Dockerhub, Google Artifact
 *  Registry, or Google Container Registry. If the host is not provided,
 *  Dockerhub is assumed.
 */
@property(nonatomic, copy, nullable) NSString *image;

/**
 *  Periodic probe of container liveness. Container will be restarted if the
 *  probe fails.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Probe *livenessProbe;

/** Name of the container specified as a DNS_LABEL (RFC 1123). */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of ports to expose from the container. Only a single port can be
 *  specified. The specified ports must be listening on all interfaces (0.0.0.0)
 *  within the container to be accessible. If omitted, a port number will be
 *  chosen and passed to the container through the PORT environment variable for
 *  the container to listen on.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2ContainerPort *> *ports;

/** Compute Resource requirements by this container. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ResourceRequirements *resources;

/**
 *  Startup probe of application within the container. All other probes are
 *  disabled if a startup probe is provided, until it succeeds. Container will
 *  not be added to service endpoints if the probe fails.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Probe *startupProbe;

/** Volume to mount into the container's filesystem. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2VolumeMount *> *volumeMounts;

/**
 *  Container's working directory. If not specified, the container runtime's
 *  default will be used, which might be configured in the container image.
 */
@property(nonatomic, copy, nullable) NSString *workingDir;

@end


/**
 *  Per-container override specification.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ContainerOverride : GTLRObject

/**
 *  Optional. Arguments to the entrypoint. Will replace existing args for
 *  override.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Optional. True if the intention is to clear out existing args list.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clearArgs;

/**
 *  List of environment variables to set in the container. Will be merged with
 *  existing env for override.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2EnvVar *> *env;

/** The name of the container specified as a DNS_LABEL. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  ContainerPort represents a network port in a single container.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ContainerPort : GTLRObject

/**
 *  Port number the container listens on. This must be a valid TCP port number,
 *  0 < container_port < 65536.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *containerPort;

/**
 *  If specified, used to specify which protocol to use. Allowed values are
 *  "http1" and "h2c".
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Build the source using Docker. This means the source has a Dockerfile.
 */
@interface GTLRCloudRun_GoogleCloudRunV2DockerBuild : GTLRObject
@end


/**
 *  In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when
 *  the sandbox is taken down, the data is destroyed with it (it does not
 *  persist across sandbox runs).
 */
@interface GTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource : GTLRObject

/**
 *  The medium on which the data is stored. Acceptable values today is only
 *  MEMORY or none. When none, the default will currently be backed by memory
 *  but could change over time. +optional
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource_Medium_MediumUnspecified
 *        When not specified, falls back to the default implementation which is
 *        currently in memory (this may change over time). (Value:
 *        "MEDIUM_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource_Medium_Memory
 *        Explicitly set the EmptyDir to be in memory. Uses tmpfs. (Value:
 *        "MEMORY")
 */
@property(nonatomic, copy, nullable) NSString *medium;

/**
 *  Limit on the storage usable by this EmptyDir volume. The size limit is also
 *  applicable for memory medium. The maximum usage on memory medium EmptyDir
 *  would be the minimum value between the SizeLimit specified here and the sum
 *  of memory limits of all containers. The default is nil which means that the
 *  limit is undefined. More info:
 *  https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume.
 *  Info in Kubernetes:
 *  https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
 */
@property(nonatomic, copy, nullable) NSString *sizeLimit;

@end


/**
 *  EnvVar represents an environment variable present in a Container.
 */
@interface GTLRCloudRun_GoogleCloudRunV2EnvVar : GTLRObject

/**
 *  Required. Name of the environment variable. Must not exceed 32768
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Literal value of the environment variable. Defaults to "", and the maximum
 *  length is 32768 bytes. Variable references are not supported in Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *value;

/** Source for the environment variable's value. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2EnvVarSource *valueSource;

@end


/**
 *  EnvVarSource represents a source for the value of an EnvVar.
 */
@interface GTLRCloudRun_GoogleCloudRunV2EnvVarSource : GTLRObject

/** Selects a secret and a specific version from Cloud Secret Manager. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2SecretKeySelector *secretKeyRef;

@end


/**
 *  Execution represents the configuration of a single execution. A execution an
 *  immutable resource that references a container image which is run to
 *  completion.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Execution : GTLRObject

/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Execution_Annotations *annotations;

/**
 *  Output only. The number of tasks which reached phase Cancelled.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelledCount;

/**
 *  Output only. Represents time when the execution was completed. It is not
 *  guaranteed to be set in happens-before order across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *completionTime;

/**
 *  Output only. The Condition of this Execution, containing its readiness
 *  status, and detailed error information in case it did not reach the desired
 *  state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Condition *> *conditions;

/**
 *  Output only. Represents time when the execution was acknowledged by the
 *  execution controller. It is not guaranteed to be set in happens-before order
 *  across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. For a deleted resource, the deletion time. It is only populated
 *  as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted. It is only populated as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. The number of tasks which reached phase Failed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedCount;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/** Output only. The name of the parent Job. */
@property(nonatomic, copy, nullable) NSString *job;

/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Execution_Labels *labels;

/**
 *  The least stable launch stage needed to create this resource, as defined by
 *  [Google Cloud Platform Launch
 *  Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
 *  `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used
 *  as input. For example, if ALPHA was provided as input in the parent
 *  resource, but only BETA and GA-level features are were, this field will be
 *  BETA.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Alpha Alpha is
 *        a limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don't have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Beta Beta is
 *        the point at which we are ready to open a release for any customer to
 *        use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Ga GA features
 *        are open to all developers and are considered stable and fully
 *        qualified for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Execution_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  Output only. URI where logs for this execution can be found in Cloud
 *  Console.
 */
@property(nonatomic, copy, nullable) NSString *logUri;

/** Output only. The unique name of this Execution. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Execution. See comments in `reconciling`
 *  for additional information on reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Specifies the maximum desired number of tasks the execution
 *  should run at any given time. Must be <= task_count. The actual number of
 *  tasks running in steady state will be less than this number when
 *  ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the
 *  work left to do is less than max parallelism.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelism;

/**
 *  Output only. Indicates whether the resource's reconciliation is still in
 *  progress. See comments in `Job.reconciling` for additional information on
 *  reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. The number of tasks which have retried at least once.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retriedCount;

/**
 *  Output only. The number of actively running tasks.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runningCount;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. Represents time when the execution started to run. It is not
 *  guaranteed to be set in happens-before order across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The number of tasks which reached phase Succeeded.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *succeededCount;

/**
 *  Output only. Specifies the desired number of tasks the execution should run.
 *  Setting to 1 means that parallelism is limited to 1 and the success of that
 *  task signals the success of the execution.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskCount;

/**
 *  Output only. The template used to create tasks for this execution.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2TaskTemplate *templateProperty;

/**
 *  Output only. Server assigned unique identifier for the Execution. The value
 *  is a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Execution_Annotations : GTLRObject
@end


/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Execution_Labels : GTLRObject
@end


/**
 *  Reference to an Execution. Use /Executions.GetExecution with the given name
 *  to get full execution including the latest status.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExecutionReference : GTLRObject

/**
 *  Status for the execution completion.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_CompletionStatusUnspecified
 *        The default value. This value is used if the state is omitted. (Value:
 *        "COMPLETION_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionCancelled
 *        Job execution has been cancelled by the user. (Value:
 *        "EXECUTION_CANCELLED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionFailed
 *        Job execution has failed. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionPending
 *        Waiting for backing resources to be provisioned. (Value:
 *        "EXECUTION_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionRunning
 *        Job execution is running normally. (Value: "EXECUTION_RUNNING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExecutionReference_CompletionStatus_ExecutionSucceeded
 *        Job execution has succeeded. (Value: "EXECUTION_SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *completionStatus;

/** Creation timestamp of the execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *completionTime;

/** Creation timestamp of the execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The deletion time of the execution. It is only populated as a response to a
 *  Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** Name of the execution. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  ExecutionTemplate describes the data an execution should have when created
 *  from a template.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate : GTLRObject

/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected. All system
 *  annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
 *  This field follows Kubernetes annotations' namespacing, limits, and rules.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Annotations *annotations;

/**
 *  Unstructured key value map that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 ExecutionTemplate.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Labels *labels;

/**
 *  Specifies the maximum desired number of tasks the execution should run at
 *  given time. Must be <= task_count. When the job is run, if this field is 0
 *  or unset, the maximum possible value will be used for that execution. The
 *  actual number of tasks running in steady state will be less than this number
 *  when there are fewer tasks waiting to be completed remaining, i.e. when the
 *  work left to do is less than max parallelism.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelism;

/**
 *  Specifies the desired number of tasks the execution should run. Setting to 1
 *  means that parallelism is limited to 1 and the success of that task signals
 *  the success of the execution. Defaults to 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskCount;

/**
 *  Required. Describes the task(s) that will be created when executing an
 *  execution.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2TaskTemplate *templateProperty;

@end


/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected. All system
 *  annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
 *  This field follows Kubernetes annotations' namespacing, limits, and rules.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Annotations : GTLRObject
@end


/**
 *  Unstructured key value map that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 ExecutionTemplate.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate_Labels : GTLRObject
@end


/**
 *  Request message for exporting Cloud Run image.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExportImageRequest : GTLRObject

/** Required. The export destination url (the Artifact Registry repo). */
@property(nonatomic, copy, nullable) NSString *destinationRepo;

@end


/**
 *  ExportImageResponse contains an operation Id to track the image export
 *  operation.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExportImageResponse : GTLRObject

/**
 *  An operation ID used to track the status of image exports tied to the
 *  original pod ID in the request.
 */
@property(nonatomic, copy, nullable) NSString *operationId;

@end


/**
 *  ExportStatusResponse contains the status of image export operation, with the
 *  status of each image export job.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ExportStatusResponse : GTLRObject

/** The status of each image export job. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2ImageExportStatus *> *imageExportStatuses;

/** The operation id. */
@property(nonatomic, copy, nullable) NSString *operationId;

/**
 *  Output only. The state of the overall export operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_Finished
 *        Operation finished. (Value: "FINISHED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_InProgress
 *        Operation still in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ExportStatusResponse_OperationState_OperationStateUnspecified
 *        State unspecified. (Value: "OPERATION_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operationState;

@end


/**
 *  Represents a volume backed by a Cloud Storage bucket using Cloud Storage
 *  FUSE.
 */
@interface GTLRCloudRun_GoogleCloudRunV2GCSVolumeSource : GTLRObject

/** Cloud Storage Bucket name. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  If true, the volume will be mounted as read only for all mounts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readOnly;

@end


/**
 *  GRPCAction describes an action involving a GRPC port.
 */
@interface GTLRCloudRun_GoogleCloudRunV2GRPCAction : GTLRObject

/**
 *  Optional. Port number of the gRPC service. Number must be in the range 1 to
 *  65535. If not specified, defaults to the exposed port of the container,
 *  which is the value of container.ports[0].containerPort.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Optional. Service is the name of the service to place in the gRPC
 *  HealthCheckRequest (see
 *  https://github.com/grpc/grpc/blob/master/doc/health-checking.md ). If this
 *  is not specified, the default behavior is defined by gRPC.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  HTTPGetAction describes an action based on HTTP Get requests.
 */
@interface GTLRCloudRun_GoogleCloudRunV2HTTPGetAction : GTLRObject

/**
 *  Optional. Custom headers to set in the request. HTTP allows repeated
 *  headers.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2HTTPHeader *> *httpHeaders;

/** Optional. Path to access on the HTTP server. Defaults to '/'. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Optional. Port number to access on the container. Must be in the range 1 to
 *  65535. If not specified, defaults to the exposed port of the container,
 *  which is the value of container.ports[0].containerPort.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

@end


/**
 *  HTTPHeader describes a custom header to be used in HTTP probes
 */
@interface GTLRCloudRun_GoogleCloudRunV2HTTPHeader : GTLRObject

/** Required. The header field name */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The header field value */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The status of an image export job.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ImageExportStatus : GTLRObject

/** The exported image ID as it will appear in Artifact Registry. */
@property(nonatomic, copy, nullable) NSString *exportedImageDigest;

/**
 *  Output only. Has the image export job finished (regardless of successful or
 *  failure).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_ExportJobStateUnspecified
 *        State unspecified. (Value: "EXPORT_JOB_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_Finished
 *        Job finished. (Value: "FINISHED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ImageExportStatus_ExportJobState_InProgress
 *        Job still in progress. (Value: "IN_PROGRESS")
 */
@property(nonatomic, copy, nullable) NSString *exportJobState;

/** The status of the export task if done. */
@property(nonatomic, strong, nullable) GTLRCloudRun_UtilStatusProto *status;

/** The image tag as it will appear in Artifact Registry. */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Job represents the configuration of a single job, which references a
 *  container image that is run to completion.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Job : GTLRObject

/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected on new
 *  resources. All system annotations in v1 now have a corresponding field in v2
 *  Job. This field follows Kubernetes annotations' namespacing, limits, and
 *  rules.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Job_Annotations *annotations;

/** Settings for the Binary Authorization feature. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2BinaryAuthorization *binaryAuthorization;

/** Arbitrary identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *client;

/** Arbitrary version identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *clientVersion;

/**
 *  Output only. The Conditions of all other associated sub-resources. They
 *  contain additional diagnostics information in case the Job does not reach
 *  its desired state. See comments in `reconciling` for additional information
 *  on reconciliation process in Cloud Run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Condition *> *conditions;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Email address of the authenticated creator. */
@property(nonatomic, copy, nullable) NSString *creator;

/**
 *  Output only. The deletion time. It is only populated as a response to a
 *  Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Number of executions created for this job.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *executionCount;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Unstructured key value map that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 Job.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Job_Labels *labels;

/** Output only. Email address of the last authenticated modifier. */
@property(nonatomic, copy, nullable) NSString *lastModifier;

/** Output only. Name of the last created execution. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ExecutionReference *latestCreatedExecution;

/**
 *  The launch stage as defined by [Google Cloud Platform Launch
 *  Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
 *  `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the
 *  launch stage to a preview stage on input to allow use of preview features in
 *  that stage. On read (or output), describes whether the resource uses preview
 *  features. For example, if ALPHA is provided as input, but only BETA and
 *  GA-level features are used, this field will be BETA on output.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Alpha Alpha is a
 *        limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don't have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Beta Beta is the
 *        point at which we are ready to open a release for any customer to use.
 *        There are no SLA or technical support obligations in a Beta release.
 *        Products will be complete from a feature perspective, but may have
 *        some open outstanding issues. Beta releases are suitable for limited
 *        production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_EarlyAccess Early
 *        Access features are limited to a closed group of testers. To use these
 *        features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Ga GA features are
 *        open to all developers and are considered stable and fully qualified
 *        for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Prelaunch Prelaunch
 *        features are hidden from users and are only visible internally.
 *        (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Job_LaunchStage_Unimplemented The
 *        feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  The fully qualified name of this Job. Format:
 *  projects/{project}/locations/{location}/jobs/{job}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Job. See comments in `reconciling` for
 *  additional information on reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Returns true if the Job is currently being acted upon by the
 *  system to bring it into the desired state. When a new Job is created, or an
 *  existing one is updated, Cloud Run will asynchronously perform all necessary
 *  steps to bring the Job to the desired state. This process is called
 *  reconciliation. While reconciliation is in process, `observed_generation`
 *  and `latest_succeeded_execution`, will have transient values that might
 *  mismatch the intended state: Once reconciliation is over (and this field is
 *  false), there are two possible outcomes: reconciliation succeeded and the
 *  state matches the Job, or there was an error, and reconciliation failed.
 *  This state can be found in `terminal_condition.state`. If reconciliation
 *  succeeded, the following fields will match: `observed_generation` and
 *  `generation`, `latest_succeeded_execution` and `latest_created_execution`.
 *  If reconciliation failed, `observed_generation` and
 *  `latest_succeeded_execution` will have the state of the last succeeded
 *  execution or empty for newly created Job. Additional information on the
 *  failure can be found in `terminal_condition` and `conditions`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  A unique string used as a suffix for creating a new execution. The Job will
 *  become ready when the execution is successfully completed. The sum of job
 *  name and token length must be fewer than 63 characters.
 */
@property(nonatomic, copy, nullable) NSString *runExecutionToken;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  A unique string used as a suffix creating a new execution. The Job will
 *  become ready when the execution is successfully started. The sum of job name
 *  and token length must be fewer than 63 characters.
 */
@property(nonatomic, copy, nullable) NSString *startExecutionToken;

/**
 *  Required. The template used to create executions for this Job.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ExecutionTemplate *templateProperty;

/**
 *  Output only. The Condition of this Job, containing its readiness status, and
 *  detailed error information in case it did not reach the desired state.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Condition *terminalCondition;

/**
 *  Output only. Server assigned unique identifier for the Execution. The value
 *  is a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected on new
 *  resources. All system annotations in v1 now have a corresponding field in v2
 *  Job. This field follows Kubernetes annotations' namespacing, limits, and
 *  rules.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Job_Annotations : GTLRObject
@end


/**
 *  Unstructured key value map that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 Job.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Job_Labels : GTLRObject
@end


/**
 *  Response message containing a list of Executions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunV2ListExecutionsResponse : GTLRCollectionObject

/**
 *  The resulting list of Executions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Execution *> *executions;

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListExecutions request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message containing a list of Jobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunV2ListJobsResponse : GTLRCollectionObject

/**
 *  The resulting list of Jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Job *> *jobs;

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListJobs request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message containing a list of Revisions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "revisions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunV2ListRevisionsResponse : GTLRCollectionObject

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListRevisions request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting list of Revisions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Revision *> *revisions;

@end


/**
 *  Response message containing a list of Services.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunV2ListServicesResponse : GTLRCollectionObject

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListServices request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting list of Services.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Service *> *services;

@end


/**
 *  Response message containing a list of Tasks.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tasks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunV2ListTasksResponse : GTLRCollectionObject

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListTasks request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting list of Tasks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Task *> *tasks;

@end


/**
 *  Metadata represents the JSON encoded generated customer metadata.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Metadata : GTLRObject

/**
 *  JSON encoded Google-generated Customer Metadata for a given
 *  resource/project.
 */
@property(nonatomic, copy, nullable) NSString *metadata;

@end


/**
 *  Direct VPC egress settings.
 */
@interface GTLRCloudRun_GoogleCloudRunV2NetworkInterface : GTLRObject

/**
 *  Optional. The VPC network that the Cloud Run resource will be able to send
 *  traffic to. At least one of network or subnetwork must be specified. If both
 *  network and subnetwork are specified, the given VPC subnetwork must belong
 *  to the given VPC network. If network is not specified, it will be looked up
 *  from the subnetwork.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. The VPC subnetwork that the Cloud Run resource will get IPs from.
 *  At least one of network or subnetwork must be specified. If both network and
 *  subnetwork are specified, the given VPC subnetwork must belong to the given
 *  VPC network. If subnetwork is not specified, the subnetwork with the same
 *  name with the network will be used.
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/** Optional. Network tags applied to this Cloud Run resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  Represents an NFS mount.
 */
@interface GTLRCloudRun_GoogleCloudRunV2NFSVolumeSource : GTLRObject

/** Path that is exported by the NFS server. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  If true, the volume will be mounted as read only for all mounts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readOnly;

/** Hostname or IP address of the NFS server */
@property(nonatomic, copy, nullable) NSString *server;

@end


/**
 *  Hardware constraints configuration.
 */
@interface GTLRCloudRun_GoogleCloudRunV2NodeSelector : GTLRObject

/** Required. GPU accelerator type to attach to an instance. */
@property(nonatomic, copy, nullable) NSString *accelerator;

@end


/**
 *  RunJob Overrides that contains Execution fields to be overridden.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Overrides : GTLRObject

/** Per container override specification. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2ContainerOverride *> *containerOverrides;

/**
 *  Optional. The desired number of tasks the execution should run. Will replace
 *  existing task_count value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskCount;

/**
 *  Duration in seconds the task may be active before the system will actively
 *  try to mark it failed and kill associated containers. Will replace existing
 *  timeout_seconds value.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Probe describes a health check to be performed against a container to
 *  determine whether it is alive or ready to receive traffic.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Probe : GTLRObject

/**
 *  Optional. Minimum consecutive failures for the probe to be considered failed
 *  after having succeeded. Defaults to 3. Minimum value is 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failureThreshold;

/**
 *  Optional. GRPC specifies an action involving a gRPC port. Exactly one of
 *  httpGet, tcpSocket, or grpc must be specified.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2GRPCAction *grpc;

/**
 *  Optional. HTTPGet specifies the http request to perform. Exactly one of
 *  httpGet, tcpSocket, or grpc must be specified.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2HTTPGetAction *httpGet;

/**
 *  Optional. Number of seconds after the container has started before the probe
 *  is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for
 *  liveness probe is 3600. Maximum value for startup probe is 240.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialDelaySeconds;

/**
 *  Optional. How often (in seconds) to perform the probe. Default to 10
 *  seconds. Minimum value is 1. Maximum value for liveness probe is 3600.
 *  Maximum value for startup probe is 240. Must be greater or equal than
 *  timeout_seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodSeconds;

/**
 *  Optional. TCPSocket specifies an action involving a TCP port. Exactly one of
 *  httpGet, tcpSocket, or grpc must be specified.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2TCPSocketAction *tcpSocket;

/**
 *  Optional. Number of seconds after which the probe times out. Defaults to 1
 *  second. Minimum value is 1. Maximum value is 3600. Must be smaller than
 *  period_seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeoutSeconds;

@end


/**
 *  ResourceRequirements describes the compute resource requirements.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ResourceRequirements : GTLRObject

/**
 *  Determines whether CPU is only allocated during requests (true by default).
 *  However, if ResourceRequirements is set, the caller must explicitly set this
 *  field to true to preserve the default behavior.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuIdle;

/**
 *  Only `memory` and `cpu` keys in the map are supported. Notes: * The only
 *  supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires
 *  at least 2Gi of memory. For more information, go to
 *  https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory'
 *  values and syntax, go to
 *  https://cloud.google.com/run/docs/configuring/memory-limits
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ResourceRequirements_Limits *limits;

/**
 *  Determines whether CPU should be boosted on startup of a new container
 *  instance above the requested CPU threshold, this can help reduce cold-start
 *  latency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startupCpuBoost;

@end


/**
 *  Only `memory` and `cpu` keys in the map are supported. Notes: * The only
 *  supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires
 *  at least 2Gi of memory. For more information, go to
 *  https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory'
 *  values and syntax, go to
 *  https://cloud.google.com/run/docs/configuring/memory-limits
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ResourceRequirements_Limits : GTLRObject
@end


/**
 *  A Revision is an immutable snapshot of code and configuration. A Revision
 *  references a container image. Revisions are only created by updates to its
 *  parent Service.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Revision : GTLRObject

/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Revision_Annotations *annotations;

/**
 *  Output only. The Condition of this Revision, containing its readiness
 *  status, and detailed error information in case it did not reach a serving
 *  state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Condition *> *conditions;

/**
 *  Holds the single container that defines the unit of execution for this
 *  Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Container *> *containers;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. For a deleted resource, the deletion time. It is only populated
 *  as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  A reference to a customer managed encryption key (CMEK) to use to encrypt
 *  this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  The action to take if the encryption key is revoked.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_EncryptionKeyRevocationActionUnspecified
 *        Unspecified (Value: "ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_PreventNew
 *        Prevents the creation of new instances. (Value: "PREVENT_NEW")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_EncryptionKeyRevocationAction_Shutdown
 *        Shuts down existing instances, and prevents creation of new ones.
 *        (Value: "SHUTDOWN")
 */
@property(nonatomic, copy, nullable) NSString *encryptionKeyRevocationAction;

/**
 *  If encryption_key_revocation_action is SHUTDOWN, the duration before
 *  shutting down all instances. The minimum increment is 1 hour.
 */
@property(nonatomic, strong, nullable) GTLRDuration *encryptionKeyShutdownDuration;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The execution environment being used to host this Revision.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen1
 *        Uses the First Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN1")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted. It is only populated as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Revision_Labels *labels;

/**
 *  The least stable launch stage needed to create this resource, as defined by
 *  [Google Cloud Platform Launch
 *  Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
 *  `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used
 *  as input. For example, if ALPHA was provided as input in the parent
 *  resource, but only BETA and GA-level features are were, this field will be
 *  BETA.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Alpha Alpha is
 *        a limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don't have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Beta Beta is
 *        the point at which we are ready to open a release for any customer to
 *        use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Ga GA features
 *        are open to all developers and are considered stable and fully
 *        qualified for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Revision_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/** Output only. The Google Console URI to obtain logs for the Revision. */
@property(nonatomic, copy, nullable) NSString *logUri;

/**
 *  Sets the maximum number of requests that each serving instance can receive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstanceRequestConcurrency;

/** Output only. The unique name of this Revision. */
@property(nonatomic, copy, nullable) NSString *name;

/** The node selector for the revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2NodeSelector *nodeSelector;

/**
 *  Output only. The generation of this Revision currently serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Indicates whether the resource's reconciliation is still in
 *  progress. See comments in `Service.reconciling` for additional information
 *  on reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/** Scaling settings for this revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionScaling *scaling;

/** Output only. The current effective scaling settings for the revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionScalingStatus *scalingStatus;

/** Output only. The name of the parent service. */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Email address of the IAM service account associated with the revision of the
 *  service. The service account represents the identity of the running
 *  revision, and determines what permissions the revision has.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Enables service mesh connectivity. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ServiceMesh *serviceMesh;

/**
 *  Enable session affinity.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sessionAffinity;

/** Max allowed time for an instance to respond to a request. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Server assigned unique identifier for the Revision. The value
 *  is a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Volume *> *volumes;

/**
 *  VPC Access configuration for this Revision. For more information, visit
 *  https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2VpcAccess *vpcAccess;

@end


/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Revision_Annotations : GTLRObject
@end


/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Revision_Labels : GTLRObject
@end


/**
 *  Settings for revision-level scaling settings.
 */
@interface GTLRCloudRun_GoogleCloudRunV2RevisionScaling : GTLRObject

/**
 *  Optional. Maximum number of serving instances that this resource should
 *  have. When unspecified, the field is set to the server default value of 100.
 *  For more information see
 *  https://cloud.google.com/run/docs/configuring/max-instances
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstanceCount;

/**
 *  Optional. Minimum number of serving instances that this resource should
 *  have.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minInstanceCount;

@end


/**
 *  Effective settings for the current revision
 */
@interface GTLRCloudRun_GoogleCloudRunV2RevisionScalingStatus : GTLRObject

/**
 *  The current number of min instances provisioned for this revision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *desiredMinInstanceCount;

@end


/**
 *  RevisionTemplate describes the data a revision should have when created from
 *  a template.
 */
@interface GTLRCloudRun_GoogleCloudRunV2RevisionTemplate : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected. All system
 *  annotations in v1 now have a corresponding field in v2 RevisionTemplate.
 *  This field follows Kubernetes annotations' namespacing, limits, and rules.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Annotations *annotations;

/**
 *  Holds the single container that defines the unit of execution for this
 *  Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Container *> *containers;

/**
 *  A reference to a customer managed encryption key (CMEK) to use to encrypt
 *  this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  Optional. The sandbox environment to host this Revision.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen1
 *        Uses the First Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN1")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/**
 *  Optional. Disables health checking containers during deployment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *healthCheckDisabled;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 RevisionTemplate.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Labels *labels;

/**
 *  Optional. Sets the maximum number of requests that each serving instance can
 *  receive. If not specified or 0, defaults to 80 when requested CPU >= 1 and
 *  defaults to 1 when requested CPU < 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstanceRequestConcurrency;

/** Optional. The node selector for the revision template. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2NodeSelector *nodeSelector;

/**
 *  Optional. The unique name for the revision. If this field is omitted, it
 *  will be automatically generated based on the Service name.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/** Optional. Scaling settings for this Revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionScaling *scaling;

/**
 *  Optional. Email address of the IAM service account associated with the
 *  revision of the service. The service account represents the identity of the
 *  running revision, and determines what permissions the revision has. If not
 *  provided, the revision will use the project's default service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Optional. Enables service mesh connectivity. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ServiceMesh *serviceMesh;

/**
 *  Optional. Enable session affinity.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sessionAffinity;

/** Optional. Max allowed time for an instance to respond to a request. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Optional. A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Volume *> *volumes;

/**
 *  Optional. VPC Access configuration to use for this Revision. For more
 *  information, visit
 *  https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2VpcAccess *vpcAccess;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected. All system
 *  annotations in v1 now have a corresponding field in v2 RevisionTemplate.
 *  This field follows Kubernetes annotations' namespacing, limits, and rules.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 RevisionTemplate.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2RevisionTemplate_Labels : GTLRObject
@end


/**
 *  Request message to create a new Execution of a Job.
 */
@interface GTLRCloudRun_GoogleCloudRunV2RunJobRequest : GTLRObject

/**
 *  A system-generated fingerprint for this version of the resource. May be used
 *  to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Overrides specification for a given execution of a job. If provided,
 *  overrides will be applied to update the execution or task spec.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Overrides *overrides;

/**
 *  Indicates that the request should be validated without actually deleting any
 *  resources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateOnly;

@end


/**
 *  SecretEnvVarSource represents a source for the value of an EnvVar.
 */
@interface GTLRCloudRun_GoogleCloudRunV2SecretKeySelector : GTLRObject

/**
 *  Required. The name of the secret in Cloud Secret Manager. Format:
 *  {secret_name} if the secret is in the same project.
 *  projects/{project}/secrets/{secret_name} if the secret is in a different
 *  project.
 */
@property(nonatomic, copy, nullable) NSString *secret;

/**
 *  The Cloud Secret Manager secret version. Can be 'latest' for the latest
 *  version, an integer for a specific version, or a version alias.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  The secret's value will be presented as the content of a file whose name is
 *  defined in the item path. If no items are defined, the name of the file is
 *  the secret.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudRun_GoogleCloudRunV2SecretVolumeSource : GTLRCollectionObject

/**
 *  Integer representation of mode bits to use on created files by default. Must
 *  be a value between 0000 and 0777 (octal), defaulting to 0444. Directories
 *  within the path are not affected by this setting. Notes * Internally, a
 *  umask of 0222 will be applied to any non-zero value. * This is an integer
 *  representation of the mode bits. So, the octal integer value should look
 *  exactly as the chmod numeric notation with a leading zero. Some examples:
 *  for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640
 *  (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755
 *  (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in
 *  conflict with other options that affect the file mode, like fsGroup, and the
 *  result can be other mode bits set. This might be in conflict with other
 *  options that affect the file mode, like fsGroup, and as a result, other mode
 *  bits could be set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultMode;

/**
 *  If unspecified, the volume will expose a file whose name is the secret,
 *  relative to VolumeMount.mount_path. If specified, the key will be used as
 *  the version to fetch from Cloud Secret Manager and the path will be the name
 *  of the file exposed in the volume. When items are defined, they must specify
 *  a path and a version.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2VersionToPath *> *items;

/**
 *  Required. The name of the secret in Cloud Secret Manager. Format: {secret}
 *  if the secret is in the same project. projects/{project}/secrets/{secret} if
 *  the secret is in a different project.
 */
@property(nonatomic, copy, nullable) NSString *secret;

@end


/**
 *  Service acts as a top-level container that manages a set of configurations
 *  and revision templates which implement a network service. Service exists to
 *  provide a singular abstraction which can be access controlled, reasoned
 *  about, and which encapsulates software lifecycle decisions such as rollout
 *  policy and team resource ownership.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Service : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected in new
 *  resources. All system annotations in v1 now have a corresponding field in v2
 *  Service. This field follows Kubernetes annotations' namespacing, limits, and
 *  rules.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Service_Annotations *annotations;

/** Optional. Settings for the Binary Authorization feature. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2BinaryAuthorization *binaryAuthorization;

/** Arbitrary identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *client;

/** Arbitrary version identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *clientVersion;

/**
 *  Output only. The Conditions of all other associated sub-resources. They
 *  contain additional diagnostics information in case the Service does not
 *  reach its Serving state. See comments in `reconciling` for additional
 *  information on reconciliation process in Cloud Run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Condition *> *conditions;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Email address of the authenticated creator. */
@property(nonatomic, copy, nullable) NSString *creator;

/**
 *  One or more custom audiences that you want this service to support. Specify
 *  each custom audience as the full URL in a string. The custom audiences are
 *  encoded in the token and used to authenticate requests. For more
 *  information, see
 *  https://cloud.google.com/run/docs/configuring/custom-audiences.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *customAudiences;

/**
 *  Optional. Disables public resolution of the default URI of this service.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultUriDisabled;

/**
 *  Output only. The deletion time. It is only populated as a response to a
 *  Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  User-provided description of the Service. This field currently has a
 *  512-character limit.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state. Please note that unlike v1, this is an int64
 *  value. As with most Google APIs, its JSON representation will be a `string`
 *  instead of an `integer`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Optional. Provides the ingress settings for this Service. On output, returns
 *  the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if
 *  no revision is active.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficAll
 *        All inbound traffic is allowed. (Value: "INGRESS_TRAFFIC_ALL")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficInternalLoadBalancer
 *        Both internal and Google Cloud Load Balancer traffic is allowed.
 *        (Value: "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficInternalOnly
 *        Only internal traffic is allowed. (Value:
 *        "INGRESS_TRAFFIC_INTERNAL_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficNone
 *        No ingress traffic is allowed. (Value: "INGRESS_TRAFFIC_NONE")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_Ingress_IngressTrafficUnspecified
 *        Unspecified (Value: "INGRESS_TRAFFIC_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *ingress;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 Service.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Service_Labels *labels;

/** Output only. Email address of the last authenticated modifier. */
@property(nonatomic, copy, nullable) NSString *lastModifier;

/**
 *  Output only. Name of the last created revision. See comments in
 *  `reconciling` for additional information on reconciliation process in Cloud
 *  Run.
 */
@property(nonatomic, copy, nullable) NSString *latestCreatedRevision;

/**
 *  Output only. Name of the latest revision that is serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *latestReadyRevision;

/**
 *  Optional. The launch stage as defined by [Google Cloud Platform Launch
 *  Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
 *  `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the
 *  launch stage to a preview stage on input to allow use of preview features in
 *  that stage. On read (or output), describes whether the resource uses preview
 *  features. For example, if ALPHA is provided as input, but only BETA and
 *  GA-level features are used, this field will be BETA on output.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Alpha Alpha is a
 *        limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don't have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Beta Beta is the
 *        point at which we are ready to open a release for any customer to use.
 *        There are no SLA or technical support obligations in a Beta release.
 *        Products will be complete from a feature perspective, but may have
 *        some open outstanding issues. Beta releases are suitable for limited
 *        production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Ga GA features
 *        are open to all developers and are considered stable and fully
 *        qualified for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Service_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  The fully qualified name of this Service. In CreateServiceRequest, this
 *  field is ignored, and instead composed from CreateServiceRequest.parent and
 *  CreateServiceRequest.service_id. Format:
 *  projects/{project}/locations/{location}/services/{service_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Service currently serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run. Please note that unlike v1, this is an int64 value. As
 *  with most Google APIs, its JSON representation will be a `string` instead of
 *  an `integer`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Returns true if the Service is currently being acted upon by
 *  the system to bring it into the desired state. When a new Service is
 *  created, or an existing one is updated, Cloud Run will asynchronously
 *  perform all necessary steps to bring the Service to the desired serving
 *  state. This process is called reconciliation. While reconciliation is in
 *  process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`,
 *  and `uri` will have transient values that might mismatch the intended state:
 *  Once reconciliation is over (and this field is false), there are two
 *  possible outcomes: reconciliation succeeded and the serving state matches
 *  the Service, or there was an error, and reconciliation failed. This state
 *  can be found in `terminal_condition.state`. If reconciliation succeeded, the
 *  following fields will match: `traffic` and `traffic_statuses`,
 *  `observed_generation` and `generation`, `latest_ready_revision` and
 *  `latest_created_revision`. If reconciliation failed, `traffic_statuses`,
 *  `observed_generation`, and `latest_ready_revision` will have the state of
 *  the last serving revision, or empty for newly created Services. Additional
 *  information on the failure can be found in `terminal_condition` and
 *  `conditions`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/** Optional. Specifies service-level scaling settings */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2ServiceScaling *scaling;

/**
 *  Required. The template used to create revisions for this Service.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2RevisionTemplate *templateProperty;

/**
 *  Output only. The Condition of this Service, containing its readiness status,
 *  and detailed error information in case it did not reach a serving state. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Condition *terminalCondition;

/**
 *  Optional. Specifies how to distribute traffic over a collection of Revisions
 *  belonging to the Service. If traffic is empty or not provided, defaults to
 *  100% traffic to the latest `Ready` Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2TrafficTarget *> *traffic;

/**
 *  Output only. Detailed status information for corresponding traffic targets.
 *  See comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus *> *trafficStatuses;

/**
 *  Output only. Server assigned unique identifier for the trigger. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. The main URI in which this Service is serving traffic. */
@property(nonatomic, copy, nullable) NSString *uri;

/** Output only. All URLs serving traffic for this Service. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *urls;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects. Cloud Run API v2 does not support annotations with
 *  `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or
 *  `autoscaling.knative.dev` namespaces, and they will be rejected in new
 *  resources. All system annotations in v1 now have a corresponding field in v2
 *  Service. This field follows Kubernetes annotations' namespacing, limits, and
 *  rules.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Service_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does
 *  not support labels with `run.googleapis.com`, `cloud.googleapis.com`,
 *  `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they
 *  will be rejected. All system labels in v1 now have a corresponding field in
 *  v2 Service.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Service_Labels : GTLRObject
@end


/**
 *  Settings for Cloud Service Mesh. For more information see
 *  https://cloud.google.com/service-mesh/docs/overview.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ServiceMesh : GTLRObject

/**
 *  The Mesh resource name. Format:
 *  projects/{project}/locations/global/meshes/{mesh}, where {project} can be
 *  project id or number.
 */
@property(nonatomic, copy, nullable) NSString *mesh;

@end


/**
 *  Scaling settings applied at the service level rather than at the revision
 *  level.
 */
@interface GTLRCloudRun_GoogleCloudRunV2ServiceScaling : GTLRObject

/**
 *  Optional. total min instances for the service. This number of instances is
 *  divided among all revisions with specified traffic based on the percent of
 *  traffic they are receiving. (BETA)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minInstanceCount;

/**
 *  Optional. The scaling mode for the service.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_Automatic
 *        Scale based on traffic between min and max instances. (Value:
 *        "AUTOMATIC")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_Manual
 *        Scale to exactly min instances and ignore max instances. (Value:
 *        "MANUAL")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2ServiceScaling_ScalingMode_ScalingModeUnspecified
 *        Unspecified. (Value: "SCALING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *scalingMode;

@end


/**
 *  Location of the source in an archive file in Google Cloud Storage.
 */
@interface GTLRCloudRun_GoogleCloudRunV2StorageSource : GTLRObject

/**
 *  Required. Google Cloud Storage bucket containing the source (see [Bucket
 *  Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Optional. Google Cloud Storage generation for the object. If the generation
 *  is omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Required. Google Cloud Storage object containing the source. This object
 *  must be a gzipped archive file (`.tar.gz`) containing source to build.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Request message for submitting a Build.
 */
@interface GTLRCloudRun_GoogleCloudRunV2SubmitBuildRequest : GTLRObject

/** Build the source using Buildpacks. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2BuildpacksBuild *buildpackBuild;

/** Build the source using Docker. This means the source has a Dockerfile. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2DockerBuild *dockerBuild;

/** Required. Artifact Registry URI to store the built image. */
@property(nonatomic, copy, nullable) NSString *imageUri;

/**
 *  Optional. The service account to use for the build. If not set, the default
 *  Cloud Build service account for the project will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Required. Source for the build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2StorageSource *storageSource;

/** Optional. Additional tags to annotate the build. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Optional. Name of the Cloud Build Custom Worker Pool that should be used to
 *  build the function. The format of this field is
 *  `projects/{project}/locations/{region}/workerPools/{workerPool}` where
 *  {project} and {region} are the project id and region respectively where the
 *  worker pool is defined and {workerPool} is the short name of the worker
 *  pool.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Response message for submitting a Build.
 */
@interface GTLRCloudRun_GoogleCloudRunV2SubmitBuildResponse : GTLRObject

/**
 *  URI of the base builder image in Artifact Registry being used in the build.
 *  Used to opt into automatic base image updates.
 */
@property(nonatomic, copy, nullable) NSString *baseImageUri;

/** Warning message for the base image. */
@property(nonatomic, copy, nullable) NSString *baseImageWarning;

/** Cloud Build operation to be polled via CloudBuild API. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleLongrunningOperation *buildOperation;

@end


/**
 *  Task represents a single run of a container to completion.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Task : GTLRObject

/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Task_Annotations *annotations;

/**
 *  Output only. Represents time when the Task was completed. It is not
 *  guaranteed to be set in happens-before order across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *completionTime;

/**
 *  Output only. The Condition of this Task, containing its readiness status,
 *  and detailed error information in case it did not reach the desired state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Condition *> *conditions;

/**
 *  Holds the single container that defines the unit of execution for this task.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Container *> *containers;

/**
 *  Output only. Represents time when the task was created by the system. It is
 *  not guaranteed to be set in happens-before order across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. For a deleted resource, the deletion time. It is only populated
 *  as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Output only. A reference to a customer managed encryption key (CMEK) to use
 *  to encrypt this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Output only. The name of the parent Execution. */
@property(nonatomic, copy, nullable) NSString *execution;

/**
 *  The execution environment being used to host this Task.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentGen1
 *        Uses the First Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN1")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2Task_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted. It is only populated as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Output only. Index of the Task, unique per execution, and beginning at 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/** Output only. The name of the parent Job. */
@property(nonatomic, copy, nullable) NSString *job;

/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2Task_Labels *labels;

/** Output only. Result of the last attempt of this Task. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2TaskAttemptResult *lastAttemptResult;

/**
 *  Output only. URI where logs for this execution can be found in Cloud
 *  Console.
 */
@property(nonatomic, copy, nullable) NSString *logUri;

/**
 *  Number of retries allowed per Task, before marking this Task failed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxRetries;

/** Output only. The unique name of this Task. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Task. See comments in `Job.reconciling`
 *  for additional information on reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Indicates whether the resource's reconciliation is still in
 *  progress. See comments in `Job.reconciling` for additional information on
 *  reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. The number of times this Task was retried. Tasks are retried
 *  when they fail up to the maxRetries limit.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retried;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. Represents time when the task was scheduled to run by the
 *  system. It is not guaranteed to be set in happens-before order across
 *  separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduledTime;

/**
 *  Email address of the IAM service account associated with the Task of a Job.
 *  The service account represents the identity of the running task, and
 *  determines what permissions the task has. If not provided, the task will use
 *  the project's default service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. Represents time when the task started to run. It is not
 *  guaranteed to be set in happens-before order across separate operations.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Max allowed time duration the Task may be active before the system will
 *  actively try to mark it failed and kill associated containers. This applies
 *  per attempt of a task, meaning each retry can run for the full timeout.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Server assigned unique identifier for the Task. The value is a
 *  UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Volume *> *volumes;

/**
 *  Output only. VPC Access configuration to use for this Task. For more
 *  information, visit
 *  https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2VpcAccess *vpcAccess;

@end


/**
 *  Output only. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Task_Annotations : GTLRObject
@end


/**
 *  Output only. Unstructured key value map that can be used to organize and
 *  categorize objects. User-provided labels are shared with Google's billing
 *  system, so they can be used to filter, or break down billing charges by
 *  team, component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Task_Labels : GTLRObject
@end


/**
 *  Result of a task attempt.
 */
@interface GTLRCloudRun_GoogleCloudRunV2TaskAttemptResult : GTLRObject

/**
 *  Output only. The exit code of this attempt. This may be unset if the
 *  container was unable to exit cleanly with a code due to some other failure.
 *  See status field for possible failure details.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Output only. The status of this attempt. If the status code is OK, then the
 *  attempt succeeded.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleRpcStatus *status;

@end


/**
 *  TaskTemplate describes the data a task should have when created from a
 *  template.
 */
@interface GTLRCloudRun_GoogleCloudRunV2TaskTemplate : GTLRObject

/**
 *  Holds the single container that defines the unit of execution for this task.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Container *> *containers;

/**
 *  A reference to a customer managed encryption key (CMEK) to use to encrypt
 *  this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  Optional. The execution environment being used to host this Task.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentGen1
 *        Uses the First Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN1")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TaskTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/**
 *  Number of retries allowed per Task, before marking this Task failed.
 *  Defaults to 3.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxRetries;

/**
 *  Optional. Email address of the IAM service account associated with the Task
 *  of a Job. The service account represents the identity of the running task,
 *  and determines what permissions the task has. If not provided, the task will
 *  use the project's default service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. Max allowed time duration the Task may be active before the system
 *  will actively try to mark it failed and kill associated containers. This
 *  applies per attempt of a task, meaning each retry can run for the full
 *  timeout. Defaults to 600 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Optional. A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2Volume *> *volumes;

/**
 *  Optional. VPC Access configuration to use for this Task. For more
 *  information, visit
 *  https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2VpcAccess *vpcAccess;

@end


/**
 *  TCPSocketAction describes an action based on opening a socket
 */
@interface GTLRCloudRun_GoogleCloudRunV2TCPSocketAction : GTLRObject

/**
 *  Optional. Port number to access on the container. Must be in the range 1 to
 *  65535. If not specified, defaults to the exposed port of the container,
 *  which is the value of container.ports[0].containerPort.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

@end


/**
 *  Holds a single traffic routing entry for the Service. Allocations can be
 *  done to a specific Revision name, or pointing to the latest Ready Revision.
 */
@interface GTLRCloudRun_GoogleCloudRunV2TrafficTarget : GTLRObject

/**
 *  Specifies percent of the traffic to this Revision. This defaults to zero if
 *  unspecified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

/**
 *  Revision to which to send this portion of traffic, if traffic allocation is
 *  by revision.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Indicates a string to be part of the URI to exclusively reference this
 *  target.
 */
@property(nonatomic, copy, nullable) NSString *tag;

/**
 *  The allocation type for this traffic target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeLatest
 *        Allocates instances to the Service's latest ready Revision. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeRevision
 *        Allocates instances to a Revision by name. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTarget_Type_TrafficTargetAllocationTypeUnspecified
 *        Unspecified instance allocation type. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents the observed state of a single `TrafficTarget` entry.
 */
@interface GTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus : GTLRObject

/**
 *  Specifies percent of the traffic to this Revision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

/** Revision to which this traffic is sent. */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Indicates the string used in the URI to exclusively reference this target.
 */
@property(nonatomic, copy, nullable) NSString *tag;

/**
 *  The allocation type for this traffic target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeLatest
 *        Allocates instances to the Service's latest ready Revision. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeRevision
 *        Allocates instances to a Revision by name. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeUnspecified
 *        Unspecified instance allocation type. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Displays the target URI. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  VersionToPath maps a specific version of a secret to a relative file to
 *  mount to, relative to VolumeMount's mount_path.
 */
@interface GTLRCloudRun_GoogleCloudRunV2VersionToPath : GTLRObject

/**
 *  Integer octal mode bits to use on this file, must be a value between 01 and
 *  0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes
 *  * Internally, a umask of 0222 will be applied to any non-zero value. * This
 *  is an integer representation of the mode bits. So, the octal integer value
 *  should look exactly as the chmod numeric notation with a leading zero. Some
 *  examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For
 *  chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755
 *  (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in
 *  conflict with other options that affect the file mode, like fsGroup, and the
 *  result can be other mode bits set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mode;

/** Required. The relative path of the secret in the container. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The Cloud Secret Manager secret version. Can be 'latest' for the latest
 *  value, or an integer or a secret alias for a specific version.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Volume represents a named volume in a container.
 */
@interface GTLRCloudRun_GoogleCloudRunV2Volume : GTLRObject

/**
 *  For Cloud SQL volumes, contains the specific instances that should be
 *  mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more
 *  information on how to connect Cloud SQL and Cloud Run.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2CloudSqlInstance *cloudSqlInstance;

/** Ephemeral storage used as a shared volume. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2EmptyDirVolumeSource *emptyDir;

/** Persistent storage backed by a Google Cloud Storage bucket. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2GCSVolumeSource *gcs;

/** Required. Volume's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** For NFS Voumes, contains the path to the nfs Volume */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2NFSVolumeSource *nfs;

/** Secret represents a secret that should populate this volume. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunV2SecretVolumeSource *secret;

@end


/**
 *  VolumeMount describes a mounting of a Volume within a container.
 */
@interface GTLRCloudRun_GoogleCloudRunV2VolumeMount : GTLRObject

/**
 *  Required. Path within the container at which the volume should be mounted.
 *  Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must
 *  otherwise be `/cloudsql`. All instances defined in the Volume will be
 *  available as `/cloudsql/[instance]`. For more information on Cloud SQL
 *  volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
 */
@property(nonatomic, copy, nullable) NSString *mountPath;

/** Required. This must match the Name of a Volume. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  VPC Access settings. For more information on sending traffic to a VPC
 *  network, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@interface GTLRCloudRun_GoogleCloudRunV2VpcAccess : GTLRObject

/**
 *  VPC Access connector name. Format:
 *  projects/{project}/locations/{location}/connectors/{connector}, where
 *  {project} can be project id or number. For more information on sending
 *  traffic to a VPC network via a connector, visit
 *  https://cloud.google.com/run/docs/configuring/vpc-connectors.
 */
@property(nonatomic, copy, nullable) NSString *connector;

/**
 *  Optional. Traffic VPC egress settings. If not provided, it defaults to
 *  PRIVATE_RANGES_ONLY.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_AllTraffic All
 *        outbound traffic is routed through the VPC connector. (Value:
 *        "ALL_TRAFFIC")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_PrivateRangesOnly
 *        Only private IP ranges are routed through the VPC connector. (Value:
 *        "PRIVATE_RANGES_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunV2VpcAccess_Egress_VpcEgressUnspecified
 *        Unspecified (Value: "VPC_EGRESS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *egress;

/**
 *  Optional. Direct VPC egress settings. Currently only single network
 *  interface is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunV2NetworkInterface *> *networkInterfaces;

@end


/**
 *  ApprovalConfig describes configuration for manual approval of a build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalConfig : GTLRObject

/**
 *  Whether or not approval is needed. If this is set on a build, it will become
 *  pending when created, and will need to be explicitly approved to start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approvalRequired;

@end


/**
 *  ApprovalResult describes the decision and associated metadata of a manual
 *  approval of a build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult : GTLRObject

/** Output only. The time when the approval decision was made. */
@property(nonatomic, strong, nullable) GTLRDateTime *approvalTime;

/**
 *  Output only. Email of the user that called the ApproveBuild API to approve
 *  or reject a build at the time that the API was called.
 */
@property(nonatomic, copy, nullable) NSString *approverAccount;

/** Optional. An optional comment for this manual approval result. */
@property(nonatomic, copy, nullable) NSString *comment;

/**
 *  Required. The decision of this manual approval.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Approved
 *        Build is approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_DecisionUnspecified
 *        Default enum type. This should not be used. (Value:
 *        "DECISION_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Rejected
 *        Build is rejected. (Value: "REJECTED")
 */
@property(nonatomic, copy, nullable) NSString *decision;

/**
 *  Optional. An optional URL tied to this manual approval result. This field is
 *  essentially the same as comment, except that it will be rendered by the UI
 *  differently. An example use case is a link to an external job that approved
 *  this Build.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Files in the workspace to upload to Cloud Storage upon successful completion
 *  of all build steps.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1ArtifactObjects : GTLRObject

/**
 *  Cloud Storage bucket and optional object path, in the form
 *  "gs://bucket/path/to/somewhere/". (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Files in the workspace matching any path pattern will be uploaded to Cloud
 *  Storage with this location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Path globs used to match files in the build's workspace. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Output only. Stores timing information for pushing all artifact objects.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *timing;

@end


/**
 *  Artifacts produced by a build that should be uploaded upon successful
 *  completion of all build steps.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Artifacts : GTLRObject

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images will be pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the Build
 *  resource's results field. If any of the images fail to be pushed, the build
 *  is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  A list of Maven artifacts to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. Artifacts in the workspace
 *  matching specified paths globs will be uploaded to the specified Artifact
 *  Registry repository using the builder service account's credentials. If any
 *  artifacts fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1MavenArtifact *> *mavenArtifacts;

/**
 *  A list of npm packages to be uploaded to Artifact Registry upon successful
 *  completion of all build steps. Npm packages in the specified paths will be
 *  uploaded to the specified Artifact Registry repository using the builder
 *  service account's credentials. If any packages fail to be pushed, the build
 *  is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1NpmPackage *> *npmPackages;

/**
 *  A list of objects to be uploaded to Cloud Storage upon successful completion
 *  of all build steps. Files in the workspace matching specified paths globs
 *  will be uploaded to the specified Cloud Storage location using the builder
 *  service account's credentials. The location and generation of the uploaded
 *  objects will be stored in the Build resource's results field. If any objects
 *  fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1ArtifactObjects *objects;

/**
 *  A list of Python packages to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. The build service account
 *  credentials will be used to perform the upload. If any objects fail to be
 *  pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1PythonPackage *> *pythonPackages;

@end


/**
 *  A build resource in the Cloud Build API. At a high level, a `Build`
 *  describes where to find source code, how to build it (for example, the
 *  builder image to run on the source), and where to store the built artifacts.
 *  Fields can include the following variables, which will be expanded when the
 *  build is created: - $PROJECT_ID: the project ID of the build. -
 *  $PROJECT_NUMBER: the project number of the build. - $LOCATION: the
 *  location/region of the build. - $BUILD_ID: the autogenerated ID of the
 *  build. - $REPO_NAME: the source repository name specified by RepoSource. -
 *  $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag
 *  name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA
 *  specified by RepoSource or resolved from the specified branch or tag. -
 *  $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build : GTLRObject

/**
 *  Output only. Describes this build's approval configuration, status, and
 *  result.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval *approval;

/**
 *  Artifacts produced by the build that should be uploaded upon successful
 *  completion of all build steps.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Artifacts *artifacts;

/** Secrets and secret environment variables. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secrets *availableSecrets;

/**
 *  Output only. The ID of the `BuildTrigger` that triggered this build, if it
 *  was triggered automatically.
 */
@property(nonatomic, copy, nullable) NSString *buildTriggerId;

/**
 *  Output only. Time at which the request to create the build was received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Contains information about the build when status=FAILURE. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo *failureInfo;

/**
 *  Output only. Time at which execution of the build was finished. The
 *  difference between finish_time and start_time is the duration of the build's
 *  execution.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/** Optional. Configuration for git operations. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitConfig *gitConfig;

/**
 *  Output only. Unique identifier of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images are pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the `Build`
 *  resource's results field. If any of the images fail to be pushed, the build
 *  status is marked `FAILURE`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  Cloud Storage bucket where logs should be written (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
 */
@property(nonatomic, copy, nullable) NSString *logsBucket;

/** Output only. URL to logs for this build in Google Cloud Console. */
@property(nonatomic, copy, nullable) NSString *logUrl;

/**
 *  Output only. The 'Build' name with format:
 *  `projects/{project}/locations/{location}/builds/{build}`, where {build} is a
 *  unique identifier generated by the service.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Special options for this build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions *options;

/** Output only. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  TTL in queue for this build. If provided and the build is enqueued longer
 *  than this value, the build will expire and the build status will be
 *  `EXPIRED`. The TTL starts ticking from create_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *queueTtl;

/** Output only. Results of the build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Results *results;

/**
 *  Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager
 *  is the recommended technique for managing sensitive data with Cloud Build.
 *  Use `available_secrets` to configure builds to access secrets from Secret
 *  Manager. For instructions, see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret *> *secrets;

/**
 *  IAM service account whose credentials will be used at build runtime. Must be
 *  of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can
 *  be email address or uniqueId of the service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Optional. The location of the source files to build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Source *source;

/** Output only. A permanent fixed identifier for source. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance *sourceProvenance;

/** Output only. Time at which execution of the build was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Status of the build.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Cancelled
 *        Build or step was canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Expired Build
 *        was enqueued for longer than the value of `queue_ttl`. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Failure Build
 *        or step failed to complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_InternalError
 *        Build or step failed due to an internal cause. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Pending Build
 *        has been created and is pending execution and queuing. It has not been
 *        queued. (Value: "PENDING")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Queued Build
 *        or step is queued; work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_StatusUnknown
 *        Status of the build is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Success Build
 *        or step finished successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Timeout Build
 *        or step took longer than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Status_Working Build
 *        or step is being executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Output only. Customer-readable message about the current status. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Required. The operations to be performed on the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep *> *steps;

/** Substitutions data for `Build` resource. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Substitutions *substitutions;

/** Tags for annotation of a `Build`. These are not docker tags. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Amount of time that this build should be allowed to run, to second
 *  granularity. If this amount of time elapses, work on the build will cease
 *  and the build status will be `TIMEOUT`. `timeout` starts ticking from
 *  `startTime`. Default time is 60 minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Timing *timing;

/**
 *  Output only. Non-fatal problems encountered during the execution of the
 *  build.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning *> *warnings;

@end


/**
 *  Substitutions data for `Build` resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Substitutions : GTLRObject
@end


/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build_Timing : GTLRObject
@end


/**
 *  BuildApproval describes a build's approval configuration, state, and result.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval : GTLRObject

/** Output only. Configuration for manual approval of this build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalConfig *config;

/** Output only. Result of manual approval for this Build. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1ApprovalResult *result;

/**
 *  Output only. The state of this build's approval.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Approved
 *        Build approval has been approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Cancelled
 *        Build was cancelled while it was still pending approval. (Value:
 *        "CANCELLED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Pending
 *        Build approval is pending. (Value: "PENDING")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_Rejected
 *        Build approval has been rejected. (Value: "REJECTED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildApproval_State_StateUnspecified
 *        Default enum type. This should not be used. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Metadata for build operations.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOperationMetadata : GTLRObject

/** The build that the operation is tracking. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Build *build;

@end


/**
 *  Optional arguments to enable specific features of builds.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions : GTLRObject

/**
 *  Option to include built-in and custom substitutions as env variables for all
 *  build steps.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automapSubstitutions;

/**
 *  Optional. Option to specify how default logs buckets are setup.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_DefaultLogsBucketBehavior_DefaultLogsBucketBehaviorUnspecified
 *        Unspecified. (Value: "DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_DefaultLogsBucketBehavior_RegionalUserOwnedBucket
 *        Bucket is located in user-owned project in the same region as the
 *        build. The builder service account must have access to create and
 *        write to Cloud Storage buckets in the build project. (Value:
 *        "REGIONAL_USER_OWNED_BUCKET")
 */
@property(nonatomic, copy, nullable) NSString *defaultLogsBucketBehavior;

/**
 *  Requested disk size for the VM that runs the build. Note that this is *NOT*
 *  "disk free"; some of the space will be used by the operating system and
 *  build utilities. Also note that this is the minimum disk size that will be
 *  allocated for the build -- the build may run with a larger disk than
 *  requested. At present, the maximum disk size is 4000GB; builds that request
 *  more than the maximum are rejected with an error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Option to specify whether or not to apply bash style string operations to
 *  the substitutions. NOTE: this is always enabled for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dynamicSubstitutions;

/**
 *  A list of global environment variable definitions that will exist for all
 *  build steps in this build. If a variable is defined in both globally and in
 *  a build step, the variable will use the build step value. The elements are
 *  of the form "KEY=VALUE" for the environment variable "KEY" being given the
 *  value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Option to specify the logging mode, which determines if and where build logs
 *  are stored.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_CloudLoggingOnly
 *        Build logs are stored in Cloud Logging. Selecting this option will not
 *        allow [logs
 *        streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *        (Value: "CLOUD_LOGGING_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_GcsOnly
 *        Build logs are stored in Cloud Storage. (Value: "GCS_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_Legacy
 *        Build logs are stored in Cloud Logging and Cloud Storage. (Value:
 *        "LEGACY")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_LoggingUnspecified
 *        The service determines the logging mode. The default is `LEGACY`. Do
 *        not rely on the default logging behavior as it may change in the
 *        future. (Value: "LOGGING_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_None
 *        Turn off all logging. No build logs will be captured. (Value: "NONE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_StackdriverOnly
 *        This option is the same as CLOUD_LOGGING_ONLY. (Value:
 *        "STACKDRIVER_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *logging;

/**
 *  Option to define build log streaming behavior to Cloud Storage.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamDefault
 *        Service may automatically determine build log streaming behavior.
 *        (Value: "STREAM_DEFAULT")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOff
 *        Build logs should not be streamed to Cloud Storage; they will be
 *        written when the build is completed. (Value: "STREAM_OFF")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOn
 *        Build logs should be streamed to Cloud Storage. (Value: "STREAM_ON")
 */
@property(nonatomic, copy, nullable) NSString *logStreamingOption;

/**
 *  Compute Engine machine type on which to run the build.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu32
 *        Highcpu e2 machine with 32 CPUs. (Value: "E2_HIGHCPU_32")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu8
 *        Highcpu e2 machine with 8 CPUs. (Value: "E2_HIGHCPU_8")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Medium
 *        E2 machine with 1 CPU. (Value: "E2_MEDIUM")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu32
 *        Highcpu machine with 32 CPUs. (Value: "N1_HIGHCPU_32")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu8
 *        Highcpu machine with 8 CPUs. (Value: "N1_HIGHCPU_8")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_Unspecified
 *        Standard machine type. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  Optional. Specification for execution on a `WorkerPool`. See [running builds
 *  in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1PoolOption *pool;

/**
 *  Requested verifiability options.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_NotVerified
 *        Not a verifiable build (the default). (Value: "NOT_VERIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_Verified
 *        Build must be verified. (Value: "VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *requestedVerifyOption;

/**
 *  A list of global environment variables, which are encrypted using a Cloud
 *  Key Management Service crypto key. These values must be specified in the
 *  build's `Secret`. These variables will be available to all build steps in
 *  this build.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/** Requested hash for SourceProvenance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceProvenanceHash;

/**
 *  Option to specify behavior when there is an error in the substitution
 *  checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_AllowLoose
 *        Do not fail the build if error in substitutions checks. (Value:
 *        "ALLOW_LOOSE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_MustMatch
 *        Fails the build if error in substitutions checks, like missing a
 *        substitution in the template or in the map. (Value: "MUST_MATCH")
 */
@property(nonatomic, copy, nullable) NSString *substitutionOption;

/**
 *  Global list of volumes to mount for ALL build steps Each volume is created
 *  as an empty volume prior to starting the build process. Upon completion of
 *  the build, volumes and their contents are discarded. Global volume names and
 *  paths cannot conflict with the volumes defined a build step. Using a global
 *  volume in a build with only one step is not valid as it is indicative of a
 *  build request with an incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1Volume *> *volumes;

/** This field deprecated; please use `pool.name` instead. */
@property(nonatomic, copy, nullable) NSString *workerPool GTLR_DEPRECATED;

@end


/**
 *  A step in the build pipeline.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep : GTLRObject

/**
 *  Allow this build step to fail without failing the entire build if and only
 *  if the exit code is one of the specified codes. If allow_failure is also
 *  specified, this field will take precedence.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowExitCodes;

/**
 *  Allow this build step to fail without failing the entire build. If false,
 *  the entire build will fail if this step fails. Otherwise, the build will
 *  succeed, but this step will still have a failure status. Error information
 *  will be reported in the failure_detail field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowFailure;

/**
 *  A list of arguments that will be presented to the step when it is started.
 *  If the image used to run the step's container has an entrypoint, the `args`
 *  are used as arguments to that entrypoint. If the image does not define an
 *  entrypoint, the first element in args is used as the entrypoint, and the
 *  remainder will be used as arguments.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Option to include built-in and custom substitutions as env variables for
 *  this build step. This option will override the global option in BuildOption.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automapSubstitutions;

/**
 *  Working directory to use when running this step's container. If this value
 *  is a relative path, it is relative to the build's working directory. If this
 *  value is absolute, it may be outside the build's working directory, in which
 *  case the contents of the path may not be persisted across build step
 *  executions, unless a `volume` for that path is specified. If the build
 *  specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies
 *  an absolute path, the `RepoSource` `dir` is ignored for the step's
 *  execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Entrypoint to be used instead of the build step image's default entrypoint.
 *  If unset, the image's default entrypoint is used.
 */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/**
 *  A list of environment variable definitions to be used when running a step.
 *  The elements are of the form "KEY=VALUE" for the environment variable "KEY"
 *  being given the value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Output only. Return code from running the step.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Unique identifier for this build step, used in `wait_for` to reference this
 *  build step as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. The name of the container image that will run this particular
 *  build step. If the image is available in the host's Docker daemon's cache,
 *  it will be run directly. If not, the host will attempt to pull the image
 *  first, using the builder service account's credentials if necessary. The
 *  Docker daemon's cache will already have the latest versions of all of the
 *  officially supported build steps
 *  ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
 *  The Docker daemon will also have cached many of the layers for some popular
 *  images, like "ubuntu", "debian", but they will be refreshed at the time you
 *  attempt to use them. If you built an image in a previous build step, it will
 *  be stored in the host's Docker daemon's cache and is available to use as the
 *  name for a later build step.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Stores timing information for pulling this build step's builder
 *  image only.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *pullTiming;

/**
 *  A shell script to be executed in the step. When script is provided, the user
 *  cannot specify the entrypoint or args.
 */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  A list of environment variables which are encrypted using a Cloud Key
 *  Management Service crypto key. These values must be specified in the build's
 *  `Secret`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/**
 *  Output only. Status of the build step. At this time, build step status is
 *  only updated on build completion; step status is not updated in real-time as
 *  the build progresses.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Cancelled
 *        Build or step was canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Expired
 *        Build was enqueued for longer than the value of `queue_ttl`. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Failure
 *        Build or step failed to complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_InternalError
 *        Build or step failed due to an internal cause. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Pending
 *        Build has been created and is pending execution and queuing. It has
 *        not been queued. (Value: "PENDING")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Queued
 *        Build or step is queued; work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_StatusUnknown
 *        Status of the build is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Success
 *        Build or step finished successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Timeout
 *        Build or step took longer than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1BuildStep_Status_Working
 *        Build or step is being executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Time limit for executing this build step. If not defined, the step has no
 *  time limit and will be allowed to continue to run until either it completes
 *  or the build itself times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Output only. Stores timing information for executing this build step. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *timing;

/**
 *  List of volumes to mount into the build step. Each volume is created as an
 *  empty volume prior to execution of the build step. Upon completion of the
 *  build, volumes and their contents are discarded. Using a named volume in
 *  only one step is not valid as it is indicative of a build request with an
 *  incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1Volume *> *volumes;

/**
 *  The ID(s) of the step(s) that this build step depends on. This build step
 *  will not start until all the build steps in `wait_for` have completed
 *  successfully. If `wait_for` is empty, this build step will start when all
 *  previous build steps in the `Build.Steps` list have completed successfully.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  An image built by the pipeline.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuiltImage : GTLRObject

/** Docker Registry 2.0 digest. */
@property(nonatomic, copy, nullable) NSString *digest;

/**
 *  Name used to push the container image to Google Container Registry, as
 *  presented to `docker push`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Stores timing information for pushing the specified image. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

@end


/**
 *  Location of the source in a 2nd-gen Google Cloud Build repository resource.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1ConnectedRepository : GTLRObject

/**
 *  Optional. Directory, relative to the source root, in which to run the build.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Required. Name of the Google Cloud Build repository, formatted as `projects/
 *  * /locations/ * /connections/ * /repositories/ *`.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Required. The revision to fetch from the Git repository such as a branch, a
 *  tag, a commit SHA, or any Git ref.
 */
@property(nonatomic, copy, nullable) NSString *revision;

@end


/**
 *  This config defines the location of a source through Developer Connect.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1DeveloperConnectConfig : GTLRObject

/**
 *  Required. Directory, relative to the source root, in which to run the build.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Required. The Developer Connect Git repository link, formatted as `projects/
 *  * /locations/ * /connections/ * /gitRepositoryLink/ *`.
 */
@property(nonatomic, copy, nullable) NSString *gitRepositoryLink;

/**
 *  Required. The revision to fetch from the Git repository such as a branch, a
 *  tag, a commit SHA, or any Git ref.
 */
@property(nonatomic, copy, nullable) NSString *revision;

@end


/**
 *  A fatal problem encountered during the execution of the build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo : GTLRObject

/** Explains the failure issue in more detail using hard-coded text. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  The name of the failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_FailureTypeUnspecified
 *        Type unspecified (Value: "FAILURE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_FetchSourceFailed
 *        The source fetching has failed. (Value: "FETCH_SOURCE_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_LoggingFailure
 *        Backend logging failures. Should retry. (Value: "LOGGING_FAILURE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushFailed
 *        Unable to push the image to the repository. (Value: "PUSH_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushImageNotFound
 *        Final image not found. (Value: "PUSH_IMAGE_NOT_FOUND")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_PushNotAuthorized
 *        Unauthorized push of the final image. (Value: "PUSH_NOT_AUTHORIZED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1FailureInfo_Type_UserBuildStep
 *        A build step has failed. (Value: "USER_BUILD_STEP")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Container message for hashes of byte content of files, used in
 *  SourceProvenance messages to verify integrity of source input to the build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes : GTLRObject

/** Collection of file hashes. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash *> *fileHash;

@end


/**
 *  GitConfig is a configuration for git operations.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitConfig : GTLRObject

/** Configuration for HTTP related git operations. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1HttpConfig *http;

@end


/**
 *  Location of the source in any accessible Git repository.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitSource : GTLRObject

/**
 *  Optional. Directory, relative to the source root, in which to run the build.
 *  This must be a relative path. If a step's `dir` is specified and is an
 *  absolute path, this value is ignored for that step's execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Optional. The revision to fetch from the Git repository such as a branch, a
 *  tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the
 *  revision from the Git repository; therefore make sure that the string you
 *  provide for `revision` is parsable by the command. For information on string
 *  values accepted by `git fetch`, see
 *  https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information
 *  on `git fetch`, see https://git-scm.com/docs/git-fetch.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Required. Location of the Git repo to build. This will be used as a `git
 *  remote`, see https://git-scm.com/docs/git-remote.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Container message for hash values.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash : GTLRObject

/**
 *  The type of hash that was performed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Md5 Use a md5
 *        hash. (Value: "MD5")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_None No hash
 *        requested. (Value: "NONE")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Sha256 Use a
 *        sha256 hash. (Value: "SHA256")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Hash_Type_Sha512 Use a
 *        sha512 hash. (Value: "SHA512")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The hash value.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  HttpConfig is a configuration for HTTP related git operations.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1HttpConfig : GTLRObject

/**
 *  SecretVersion resource of the HTTP proxy URL. The Service Account used in
 *  the build (either the default Service Account or user-specified Service
 *  Account) should have `secretmanager.versions.access` permissions on this
 *  secret. The proxy URL should be in format `protocol://\@]proxyhost[:port]`.
 */
@property(nonatomic, copy, nullable) NSString *proxySecretVersionName;

@end


/**
 *  Pairs a set of secret environment variables mapped to encrypted values with
 *  the Cloud KMS key to use to decrypt the value.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret : GTLRObject

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap *envMap;

/**
 *  Resource name of Cloud KMS crypto key to decrypt the encrypted value. In
 *  format: projects/ * /locations/ * /keyRings/ * /cryptoKeys/ *
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap : GTLRObject
@end


/**
 *  A Maven artifact to upload to Artifact Registry upon successful completion
 *  of all build steps.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1MavenArtifact : GTLRObject

/**
 *  Maven `artifactId` value used when uploading the artifact to Artifact
 *  Registry.
 */
@property(nonatomic, copy, nullable) NSString *artifactId;

/**
 *  Maven `groupId` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *groupId;

/**
 *  Path to an artifact in the build's workspace to be uploaded to Artifact
 *  Registry. This can be either an absolute path, e.g.
 *  /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from
 *  /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
 *  workspace specified by path will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Maven `version` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Npm package to upload to Artifact Registry upon successful completion of all
 *  build steps.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1NpmPackage : GTLRObject

/** Path to the package.json. e.g. workspace/path/to/package */
@property(nonatomic, copy, nullable) NSString *packagePath;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the
 *  workspace specified by path will be zipped and uploaded to Artifact Registry
 *  with this location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

@end


/**
 *  Details about how a build should be executed on a `WorkerPool`. See [running
 *  builds in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1PoolOption : GTLRObject

/**
 *  The `WorkerPool` resource to execute the build on. You must have
 *  `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format
 *  projects/{project}/locations/{location}/workerPools/{workerPoolId}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Python package to upload to Artifact Registry upon successful completion of
 *  all build steps. A package can encapsulate multiple objects to be uploaded
 *  to a single repository.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1PythonPackage : GTLRObject

/**
 *  Path globs used to match files in the build's workspace. For Python/ Twine,
 *  this is usually `dist/ *`, and sometimes additionally an `.asc` file.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace
 *  matching any path pattern will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

@end


/**
 *  Location of the source in a Google Cloud Source Repository.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource : GTLRObject

/**
 *  Regex matching branches to build. The syntax of the regular expressions
 *  accepted is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *branchName;

/** Explicit commit SHA to build. */
@property(nonatomic, copy, nullable) NSString *commitSha;

/**
 *  Optional. Directory, relative to the source root, in which to run the build.
 *  This must be a relative path. If a step's `dir` is specified and is an
 *  absolute path, this value is ignored for that step's execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Optional. Only trigger a build if the revision regex does NOT match the
 *  revision regex.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertRegex;

/**
 *  Optional. ID of the project that owns the Cloud Source Repository. If
 *  omitted, the project ID requesting the build is assumed.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. Name of the Cloud Source Repository. */
@property(nonatomic, copy, nullable) NSString *repoName;

/**
 *  Optional. Substitutions to use in a triggered build. Should only be used
 *  with RunBuildTrigger
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions *substitutions;

/**
 *  Regex matching tags to build. The syntax of the regular expressions accepted
 *  is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Optional. Substitutions to use in a triggered build. Should only be used
 *  with RunBuildTrigger
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions : GTLRObject
@end


/**
 *  Artifacts created by the build pipeline.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Results : GTLRObject

/**
 *  Path to the artifact manifest for non-container artifacts uploaded to Cloud
 *  Storage. Only populated when artifacts are uploaded to Cloud Storage.
 */
@property(nonatomic, copy, nullable) NSString *artifactManifest;

/** Time to push all non-container artifacts to Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *artifactTiming;

/**
 *  List of build step digests, in the order corresponding to build step
 *  indices.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepImages;

/**
 *  List of build step outputs, produced by builder images, in the order
 *  corresponding to build step indices. [Cloud
 *  Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can
 *  produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first
 *  50KB of data is stored. Note that the `$BUILDER_OUTPUT` variable is
 *  read-only and can't be substituted.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepOutputs;

/** Container images that were built as a part of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1BuiltImage *> *images;

/** Maven artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact *> *mavenArtifacts;

/** Npm packages uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedNpmPackage *> *npmPackages;

/**
 *  Number of non-container artifacts uploaded to Cloud Storage. Only populated
 *  when artifacts are uploaded to Cloud Storage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numArtifacts;

/** Python artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedPythonPackage *> *pythonPackages;

@end


/**
 *  Pairs a set of secret environment variables containing encrypted values with
 *  the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with
 *  `available_secrets` instead of using `kmsKeyName` with `secret`. For
 *  instructions see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret : GTLRObject

/** Cloud KMS key name to use to decrypt these envs. */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret_SecretEnv *secretEnv;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secret_SecretEnv : GTLRObject
@end


/**
 *  Pairs a secret environment variable with a SecretVersion in Secret Manager.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1SecretManagerSecret : GTLRObject

/**
 *  Environment variable name to associate with the secret. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step.
 */
@property(nonatomic, copy, nullable) NSString *env;

/**
 *  Resource name of the SecretVersion. In format: projects/ * /secrets/ *
 *  /versions/ *
 */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  Secrets and secret environment variables.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Secrets : GTLRObject

/**
 *  Secrets encrypted with KMS key and the associated secret environment
 *  variable.
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1InlineSecret *> *inlineProperty;

/** Secrets in Secret Manager and associated secret environment variable. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleDevtoolsCloudbuildV1SecretManagerSecret *> *secretManager;

@end


/**
 *  Location of the source in a supported storage service.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Source : GTLRObject

/**
 *  Optional. If provided, get the source from this 2nd-gen Google Cloud Build
 *  repository resource.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1ConnectedRepository *connectedRepository;

/** If provided, get the source from this Developer Connect config. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1DeveloperConnectConfig *developerConnectConfig;

/** If provided, get the source from this Git repository. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitSource *gitSource;

/**
 *  If provided, get the source from this location in a Cloud Source Repository.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource *repoSource;

/** If provided, get the source from this location in Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource *storageSource;

/**
 *  If provided, get the source from this manifest in Cloud Storage. This
 *  feature is in Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSourceManifest *storageSourceManifest;

@end


/**
 *  Provenance of the source. Ways to find the original source, or verify that
 *  some source was used for this build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance : GTLRObject

/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes *fileHashes;

/**
 *  Output only. A copy of the build's `source.connected_repository`, if exists,
 *  with any revisions resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1ConnectedRepository *resolvedConnectedRepository;

/**
 *  Output only. A copy of the build's `source.git_source`, if exists, with any
 *  revisions resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1GitSource *resolvedGitSource;

/**
 *  A copy of the build's `source.repo_source`, if exists, with any revisions
 *  resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1RepoSource *resolvedRepoSource;

/**
 *  A copy of the build's `source.storage_source`, if exists, with any
 *  generations resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource *resolvedStorageSource;

/**
 *  A copy of the build's `source.storage_source_manifest`, if exists, with any
 *  revisions resolved. This feature is in Preview.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSourceManifest *resolvedStorageSourceManifest;

@end


/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes : GTLRObject
@end


/**
 *  Location of the source in an archive file in Cloud Storage.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource : GTLRObject

/**
 *  Cloud Storage bucket containing the source (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Optional. Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Required. Cloud Storage object containing the source. This object must be a
 *  zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to
 *  build.
 */
@property(nonatomic, copy, nullable) NSString *object;

/**
 *  Optional. Option to specify the tool to fetch the source file for the build.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_GcsFetcher
 *        Use the Cloud Storage Fetcher tool to download the source file.
 *        (Value: "GCS_FETCHER")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_Gsutil
 *        Use the "gsutil" tool to download the source file. (Value: "GSUTIL")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSource_SourceFetcher_SourceFetcherUnspecified
 *        Unspecified defaults to GSUTIL. (Value: "SOURCE_FETCHER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sourceFetcher;

@end


/**
 *  Location of the source manifest in Cloud Storage. This feature is in
 *  Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1StorageSourceManifest : GTLRObject

/**
 *  Required. Cloud Storage bucket containing the source manifest (see [Bucket
 *  Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Cloud Storage generation for the object. If the generation is omitted, the
 *  latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Required. Cloud Storage object containing the source manifest. This object
 *  must be a JSON file.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Start and end times for a build execution phase.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan : GTLRObject

/** End of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Start of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  A Maven artifact uploaded using the MavenArtifact directive.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact : GTLRObject

/** Hash types and values of the Maven Artifact. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  An npm package uploaded to Artifact Registry using the NpmPackage directive.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedNpmPackage : GTLRObject

/** Hash types and values of the npm package. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

/** URI of the uploaded npm package. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Artifact uploaded using the PythonPackage directive.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1UploadedPythonPackage : GTLRObject

/** Hash types and values of the Python Artifact. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Volume describes a Docker container volume which is mounted into build steps
 *  in order to persist files across build step execution.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Volume : GTLRObject

/**
 *  Name of the volume to mount. Volume names must be unique per build step and
 *  must be valid names for Docker volumes. Each named volume must be used by at
 *  least two build steps.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Path at which to mount the volume. Paths must be absolute and cannot
 *  conflict with other volume paths on the same build step or with certain
 *  reserved volume paths.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  A non-fatal problem encountered during the execution of the build.
 */
@interface GTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning : GTLRObject

/**
 *  The priority for this warning.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Alert
 *        e.g. alerts that a feature used in the build is pending removal
 *        (Value: "ALERT")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Info e.g.
 *        deprecation warnings and alternative feature highlights. (Value:
 *        "INFO")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_PriorityUnspecified
 *        Should not be used. (Value: "PRIORITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleDevtoolsCloudbuildV1Warning_Priority_Warning
 *        e.g. automated detection of possible issues with the build. (Value:
 *        "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *priority;

/** Explanation of the warning generated. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRCloudRun_GoogleIamV1AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudRun_GoogleIamV1AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudRun_GoogleIamV1Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleTypeExpr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudRun_GoogleIamV1Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudRun_GoogleIamV1SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleIamV1Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudRun_GoogleIamV1TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudRun_GoogleIamV1TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The request message for Operations.WaitOperation.
 */
@interface GTLRCloudRun_GoogleLongrunningWaitOperationRequest : GTLRObject

/**
 *  The maximum duration to wait before timing out. If left blank, the wait will
 *  be at most the time permitted by the underlying HTTP/RPC protocol. If RPC
 *  context deadline is also specified, the shorter one will be used.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudRun_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudRun_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudRun_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudRun_GoogleTypeExpr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  This is proto2's version of MessageSet.
 */
@interface GTLRCloudRun_Proto2BridgeMessageSet : GTLRObject
@end


/**
 *  Wire-format for a Status object
 */
@interface GTLRCloudRun_UtilStatusProto : GTLRObject

/**
 *  The canonical error code (see codes.proto) that most closely corresponds to
 *  this status. This may be missing, and in the common case of the generic
 *  space, it definitely will be.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canonicalCode;

/**
 *  Numeric code drawn from the space specified below. Often, this is the
 *  canonical error space, and code is drawn from google3/util/task/codes.proto
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/** Detail message */
@property(nonatomic, copy, nullable) NSString *message;

/** message_set associates an arbitrary proto message with the status. */
@property(nonatomic, strong, nullable) GTLRCloudRun_Proto2BridgeMessageSet *messageSet;

/**
 *  The following are usually only present when code != 0 Space to which this
 *  status belongs
 */
@property(nonatomic, copy, nullable) NSString *space;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
