// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   SAS Portal API (sasportal/v1alpha1)
// Documentation:
//   https://developers.google.com/spectrum-access-system/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSASPortalObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other SASPortal query classes.
 */
@interface GTLRSASPortalQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new deployment.
 *
 *  Method: sasportal.customers.deployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsCreate : GTLRSASPortalQuery

/**
 *  Required. The parent resource name where the deployment is to be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Creates a new deployment.
 *
 *  @param object The @c GTLRSASPortal_Deployment to include in the query.
 *  @param parent Required. The parent resource name where the deployment is to
 *    be created.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Deployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a deployment.
 *
 *  Method: sasportal.customers.deployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsDelete : GTLRSASPortalQuery

/** Required. The name of the deployment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a deployment.
 *
 *  @param name Required. The name of the deployment.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.customers.deployments.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.customers.deployments.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.customers.deployments.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns a requested deployment.
 *
 *  Method: sasportal.customers.deployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsGet : GTLRSASPortalQuery

/** Required. The name of the deployment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Returns a requested deployment.
 *
 *  @param name Required. The name of the deployment.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists deployments.
 *
 *  Method: sasportal.customers.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no deployments are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of deployments to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDeployments that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name, for example, "nodes/1",
 *  customer/1/nodes/2.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDeploymentsResponse.
 *
 *  Lists deployments.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1",
 *    customer/1/nodes/2.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a deployment under another node or customer.
 *
 *  Method: sasportal.customers.deployments.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsMove : GTLRSASPortalQuery

/** Required. The name of the deployment to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a deployment under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveDeploymentRequest to include in the
 *    query.
 *  @param name Required. The name of the deployment to move.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an existing deployment.
 *
 *  Method: sasportal.customers.deployments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDeploymentsPatch : GTLRSASPortalQuery

/** Output only. Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Updates an existing deployment.
 *
 *  @param object The @c GTLRSASPortal_Deployment to include in the query.
 *  @param name Output only. Resource name.
 *
 *  @return GTLRSASPortalQuery_CustomersDeploymentsPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Deployment *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.customers.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.customers.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a device.
 *
 *  Method: sasportal.customers.devices.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesDelete : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details about a device.
 *
 *  Method: sasportal.customers.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesGet : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Gets details about a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.customers.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a device under another node or customer.
 *
 *  Method: sasportal.customers.devices.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesMove : GTLRSASPortalQuery

/** Required. The name of the device to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a device under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveDeviceRequest to include in the
 *    query.
 *  @param name Required. The name of the device to move.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a device.
 *
 *  Method: sasportal.customers.devices.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesPatch : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a device.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                           name:(NSString *)name;

@end

/**
 *  Signs a device.
 *
 *  Method: sasportal.customers.devices.signDevice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesSignDevice : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Signs a device.
 *
 *  @param object The @c GTLRSASPortal_SignDeviceRequest to include in the
 *    query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesSignDevice
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_SignDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a signed device.
 *
 *  Method: sasportal.customers.devices.updateSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersDevicesUpdateSigned : GTLRSASPortalQuery

/** Required. The name of the device to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a signed device.
 *
 *  @param object The @c GTLRSASPortal_UpdateSignedDeviceRequest to include in
 *    the query.
 *  @param name Required. The name of the device to update.
 *
 *  @return GTLRSASPortalQuery_CustomersDevicesUpdateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_UpdateSignedDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a requested customer.
 *
 *  Method: sasportal.customers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersGet : GTLRSASPortalQuery

/** Required. The name of the customer. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Customer.
 *
 *  Returns a requested customer.
 *
 *  @param name Required. The name of the customer.
 *
 *  @return GTLRSASPortalQuery_CustomersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a list of requested customers.
 *
 *  Method: sasportal.customers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersList : GTLRSASPortalQuery

/** The maximum number of customers to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListCustomers that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSASPortal_ListCustomersResponse.
 *
 *  Returns a list of requested customers.
 *
 *  @return GTLRSASPortalQuery_CustomersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a new node.
 *
 *  Method: sasportal.customers.nodes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesCreate : GTLRSASPortalQuery

/** Required. The parent resource name where the node is to be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Creates a new node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param parent Required. The parent resource name where the node is to be
 *    created.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a node.
 *
 *  Method: sasportal.customers.nodes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDelete : GTLRSASPortalQuery

/** Required. The name of the node. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a node.
 *
 *  @param name Required. The name of the node.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new deployment.
 *
 *  Method: sasportal.customers.nodes.deployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDeploymentsCreate : GTLRSASPortalQuery

/**
 *  Required. The parent resource name where the deployment is to be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Creates a new deployment.
 *
 *  @param object The @c GTLRSASPortal_Deployment to include in the query.
 *  @param parent Required. The parent resource name where the deployment is to
 *    be created.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Deployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists deployments.
 *
 *  Method: sasportal.customers.nodes.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDeploymentsList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no deployments are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of deployments to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDeployments that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name, for example, "nodes/1",
 *  customer/1/nodes/2.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDeploymentsResponse.
 *
 *  Lists deployments.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1",
 *    customer/1/nodes/2.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.customers.nodes.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.customers.nodes.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.customers.nodes.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns a requested node.
 *
 *  Method: sasportal.customers.nodes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesGet : GTLRSASPortalQuery

/** Required. The name of the node. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Returns a requested node.
 *
 *  @param name Required. The name of the node.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists nodes.
 *
 *  Method: sasportal.customers.nodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no nodes are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of nodes to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListNodes that indicates
 *  where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name, for example, "nodes/1". */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListNodesResponse.
 *
 *  Lists nodes.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1".
 *
 *  @return GTLRSASPortalQuery_CustomersNodesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a node under another node or customer.
 *
 *  Method: sasportal.customers.nodes.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesMove : GTLRSASPortalQuery

/** Required. The name of the node to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a node under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveNodeRequest to include in the query.
 *  @param name Required. The name of the node to move.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveNodeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new node.
 *
 *  Method: sasportal.customers.nodes.nodes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesNodesCreate : GTLRSASPortalQuery

/** Required. The parent resource name where the node is to be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Creates a new node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param parent Required. The parent resource name where the node is to be
 *    created.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesNodesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists nodes.
 *
 *  Method: sasportal.customers.nodes.nodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesNodesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no nodes are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of nodes to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListNodes that indicates
 *  where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name, for example, "nodes/1". */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListNodesResponse.
 *
 *  Lists nodes.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1".
 *
 *  @return GTLRSASPortalQuery_CustomersNodesNodesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing node.
 *
 *  Method: sasportal.customers.nodes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersNodesPatch : GTLRSASPortalQuery

/** Output only. Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Updates an existing node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param name Output only. Resource name.
 *
 *  @return GTLRSASPortalQuery_CustomersNodesPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an existing customer.
 *
 *  Method: sasportal.customers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_CustomersPatch : GTLRSASPortalQuery

/** Output only. Resource name of the customer. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Customer.
 *
 *  Updates an existing customer.
 *
 *  @param object The @c GTLRSASPortal_Customer to include in the query.
 *  @param name Output only. Resource name of the customer.
 *
 *  @return GTLRSASPortalQuery_CustomersPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Customer *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a device.
 *
 *  Method: sasportal.deployments.devices.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesDelete : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details about a device.
 *
 *  Method: sasportal.deployments.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesGet : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Gets details about a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Moves a device under another node or customer.
 *
 *  Method: sasportal.deployments.devices.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesMove : GTLRSASPortalQuery

/** Required. The name of the device to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a device under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveDeviceRequest to include in the
 *    query.
 *  @param name Required. The name of the device to move.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a device.
 *
 *  Method: sasportal.deployments.devices.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesPatch : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a device.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                           name:(NSString *)name;

@end

/**
 *  Signs a device.
 *
 *  Method: sasportal.deployments.devices.signDevice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesSignDevice : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Signs a device.
 *
 *  @param object The @c GTLRSASPortal_SignDeviceRequest to include in the
 *    query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesSignDevice
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_SignDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a signed device.
 *
 *  Method: sasportal.deployments.devices.updateSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsDevicesUpdateSigned : GTLRSASPortalQuery

/** Required. The name of the device to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a signed device.
 *
 *  @param object The @c GTLRSASPortal_UpdateSignedDeviceRequest to include in
 *    the query.
 *  @param name Required. The name of the device to update.
 *
 *  @return GTLRSASPortalQuery_DeploymentsDevicesUpdateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_UpdateSignedDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a requested deployment.
 *
 *  Method: sasportal.deployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_DeploymentsGet : GTLRSASPortalQuery

/** Required. The name of the deployment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Returns a requested deployment.
 *
 *  @param name Required. The name of the deployment.
 *
 *  @return GTLRSASPortalQuery_DeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Generates a secret to be used with the ValidateInstaller.
 *
 *  Method: sasportal.installer.generateSecret
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_InstallerGenerateSecret : GTLRSASPortalQuery

/**
 *  Fetches a @c GTLRSASPortal_GenerateSecretResponse.
 *
 *  Generates a secret to be used with the ValidateInstaller.
 *
 *  @param object The @c GTLRSASPortal_GenerateSecretRequest to include in the
 *    query.
 *
 *  @return GTLRSASPortalQuery_InstallerGenerateSecret
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_GenerateSecretRequest *)object;

@end

/**
 *  Validates the identity of a Certified Professional Installer (CPI).
 *
 *  Method: sasportal.installer.validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_InstallerValidate : GTLRSASPortalQuery

/**
 *  Fetches a @c GTLRSASPortal_ValidateInstallerResponse.
 *
 *  Validates the identity of a Certified Professional Installer (CPI).
 *
 *  @param object The @c GTLRSASPortal_ValidateInstallerRequest to include in
 *    the query.
 *
 *  @return GTLRSASPortalQuery_InstallerValidate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_ValidateInstallerRequest *)object;

@end

/**
 *  Deletes a deployment.
 *
 *  Method: sasportal.nodes.deployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsDelete : GTLRSASPortalQuery

/** Required. The name of the deployment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a deployment.
 *
 *  @param name Required. The name of the deployment.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.nodes.deployments.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.nodes.deployments.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.nodes.deployments.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns a requested deployment.
 *
 *  Method: sasportal.nodes.deployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsGet : GTLRSASPortalQuery

/** Required. The name of the deployment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Returns a requested deployment.
 *
 *  @param name Required. The name of the deployment.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists deployments.
 *
 *  Method: sasportal.nodes.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no deployments are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of deployments to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDeployments that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name, for example, "nodes/1",
 *  customer/1/nodes/2.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDeploymentsResponse.
 *
 *  Lists deployments.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1",
 *    customer/1/nodes/2.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a deployment under another node or customer.
 *
 *  Method: sasportal.nodes.deployments.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsMove : GTLRSASPortalQuery

/** Required. The name of the deployment to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a deployment under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveDeploymentRequest to include in the
 *    query.
 *  @param name Required. The name of the deployment to move.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an existing deployment.
 *
 *  Method: sasportal.nodes.deployments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDeploymentsPatch : GTLRSASPortalQuery

/** Output only. Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Updates an existing deployment.
 *
 *  @param object The @c GTLRSASPortal_Deployment to include in the query.
 *  @param name Output only. Resource name.
 *
 *  @return GTLRSASPortalQuery_NodesDeploymentsPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Deployment *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.nodes.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.nodes.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a device.
 *
 *  Method: sasportal.nodes.devices.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesDelete : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details about a device.
 *
 *  Method: sasportal.nodes.devices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesGet : GTLRSASPortalQuery

/** Required. The name of the device. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Gets details about a device.
 *
 *  @param name Required. The name of the device.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.nodes.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a device under another node or customer.
 *
 *  Method: sasportal.nodes.devices.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesMove : GTLRSASPortalQuery

/** Required. The name of the device to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a device under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveDeviceRequest to include in the
 *    query.
 *  @param name Required. The name of the device to move.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a device.
 *
 *  Method: sasportal.nodes.devices.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesPatch : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a device.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                           name:(NSString *)name;

@end

/**
 *  Signs a device.
 *
 *  Method: sasportal.nodes.devices.signDevice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesSignDevice : GTLRSASPortalQuery

/** Output only. The resource path name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Signs a device.
 *
 *  @param object The @c GTLRSASPortal_SignDeviceRequest to include in the
 *    query.
 *  @param name Output only. The resource path name.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesSignDevice
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_SignDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a signed device.
 *
 *  Method: sasportal.nodes.devices.updateSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesDevicesUpdateSigned : GTLRSASPortalQuery

/** Required. The name of the device to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Updates a signed device.
 *
 *  @param object The @c GTLRSASPortal_UpdateSignedDeviceRequest to include in
 *    the query.
 *  @param name Required. The name of the device to update.
 *
 *  @return GTLRSASPortalQuery_NodesDevicesUpdateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_UpdateSignedDeviceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a requested node.
 *
 *  Method: sasportal.nodes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesGet : GTLRSASPortalQuery

/** Required. The name of the node. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Returns a requested node.
 *
 *  @param name Required. The name of the node.
 *
 *  @return GTLRSASPortalQuery_NodesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new node.
 *
 *  Method: sasportal.nodes.nodes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesCreate : GTLRSASPortalQuery

/** Required. The parent resource name where the node is to be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Creates a new node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param parent Required. The parent resource name where the node is to be
 *    created.
 *
 *  @return GTLRSASPortalQuery_NodesNodesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a node.
 *
 *  Method: sasportal.nodes.nodes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDelete : GTLRSASPortalQuery

/** Required. The name of the node. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Empty.
 *
 *  Deletes a node.
 *
 *  @param name Required. The name of the node.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new deployment.
 *
 *  Method: sasportal.nodes.nodes.deployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDeploymentsCreate : GTLRSASPortalQuery

/**
 *  Required. The parent resource name where the deployment is to be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Deployment.
 *
 *  Creates a new deployment.
 *
 *  @param object The @c GTLRSASPortal_Deployment to include in the query.
 *  @param parent Required. The parent resource name where the deployment is to
 *    be created.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Deployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists deployments.
 *
 *  Method: sasportal.nodes.nodes.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDeploymentsList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no deployments are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of deployments to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDeployments that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name, for example, "nodes/1",
 *  customer/1/nodes/2.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDeploymentsResponse.
 *
 *  Lists deployments.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1",
 *    customer/1/nodes/2.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a device under a node or customer.
 *
 *  Method: sasportal.nodes.nodes.devices.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDevicesCreate : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_Device to include in the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDevicesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Device *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a signed device under a node or customer.
 *
 *  Method: sasportal.nodes.nodes.devices.createSigned
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDevicesCreateSigned : GTLRSASPortalQuery

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Device.
 *
 *  Creates a signed device under a node or customer.
 *
 *  @param object The @c GTLRSASPortal_CreateSignedDeviceRequest to include in
 *    the query.
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDevicesCreateSigned
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_CreateSignedDeviceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists devices under a node or customer.
 *
 *  Method: sasportal.nodes.nodes.devices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesDevicesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have one of the following formats:
 *  "sn=123454" or "display_name=MyDevice". sn corresponds to serial number of
 *  the device. The filter is case insensitive.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of devices to return in the response. If empty or zero,
 *  all devices will be listed. Must be in the range [0, 1000].
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListDevices that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListDevicesResponse.
 *
 *  Lists devices under a node or customer.
 *
 *  @param parent Required. The name of the parent resource.
 *
 *  @return GTLRSASPortalQuery_NodesNodesDevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns a requested node.
 *
 *  Method: sasportal.nodes.nodes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesGet : GTLRSASPortalQuery

/** Required. The name of the node. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Returns a requested node.
 *
 *  @param name Required. The name of the node.
 *
 *  @return GTLRSASPortalQuery_NodesNodesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists nodes.
 *
 *  Method: sasportal.nodes.nodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no nodes are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of nodes to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListNodes that indicates
 *  where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name, for example, "nodes/1". */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListNodesResponse.
 *
 *  Lists nodes.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1".
 *
 *  @return GTLRSASPortalQuery_NodesNodesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Moves a node under another node or customer.
 *
 *  Method: sasportal.nodes.nodes.move
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesMove : GTLRSASPortalQuery

/** Required. The name of the node to move. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSASPortal_Operation.
 *
 *  Moves a node under another node or customer.
 *
 *  @param object The @c GTLRSASPortal_MoveNodeRequest to include in the query.
 *  @param name Required. The name of the node to move.
 *
 *  @return GTLRSASPortalQuery_NodesNodesMove
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_MoveNodeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new node.
 *
 *  Method: sasportal.nodes.nodes.nodes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesNodesCreate : GTLRSASPortalQuery

/** Required. The parent resource name where the node is to be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Creates a new node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param parent Required. The parent resource name where the node is to be
 *    created.
 *
 *  @return GTLRSASPortalQuery_NodesNodesNodesCreate
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists nodes.
 *
 *  Method: sasportal.nodes.nodes.nodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesNodesList : GTLRSASPortalQuery

/**
 *  The filter expression. The filter should have the following format:
 *  "DIRECT_CHILDREN" or format: "direct_children". The filter is case
 *  insensitive. If empty, then no nodes are filtered.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of nodes to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to ListNodes that indicates
 *  where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name, for example, "nodes/1". */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSASPortal_ListNodesResponse.
 *
 *  Lists nodes.
 *
 *  @param parent Required. The parent resource name, for example, "nodes/1".
 *
 *  @return GTLRSASPortalQuery_NodesNodesNodesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing node.
 *
 *  Method: sasportal.nodes.nodes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_NodesNodesPatch : GTLRSASPortalQuery

/** Output only. Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSASPortal_Node.
 *
 *  Updates an existing node.
 *
 *  @param object The @c GTLRSASPortal_Node to include in the query.
 *  @param name Output only. Resource name.
 *
 *  @return GTLRSASPortalQuery_NodesNodesPatch
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_Node *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: sasportal.policies.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_PoliciesGet : GTLRSASPortalQuery

/**
 *  Fetches a @c GTLRSASPortal_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param object The @c GTLRSASPortal_GetPolicyRequest to include in the query.
 *
 *  @return GTLRSASPortalQuery_PoliciesGet
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_GetPolicyRequest *)object;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  Method: sasportal.policies.set
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_PoliciesSet : GTLRSASPortalQuery

/**
 *  Fetches a @c GTLRSASPortal_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRSASPortal_SetPolicyRequest to include in the query.
 *
 *  @return GTLRSASPortalQuery_PoliciesSet
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_SetPolicyRequest *)object;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *
 *  Method: sasportal.policies.test
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSASPortal
 */
@interface GTLRSASPortalQuery_PoliciesTest : GTLRSASPortalQuery

/**
 *  Fetches a @c GTLRSASPortal_TestPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *
 *  @param object The @c GTLRSASPortal_TestPermissionsRequest to include in the
 *    query.
 *
 *  @return GTLRSASPortalQuery_PoliciesTest
 */
+ (instancetype)queryWithObject:(GTLRSASPortal_TestPermissionsRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
