// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Domains API (domains/v1)
// Description:
//   Enables management and configuration of domain names.
// Documentation:
//   https://cloud.google.com/domains/

#import <GoogleAPIClientForREST/GTLRCloudDomainsQuery.h>

@implementation GTLRCloudDomainsQuery

@dynamic fields;

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudDomainsQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Location class];
  query.loggingName = @"domains.projects.locations.get";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRCloudDomainsQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_ListLocationsResponse class];
  query.loggingName = @"domains.projects.locations.list";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudDomainsQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRCloudDomainsQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_ListOperationsResponse class];
  query.loggingName = @"domains.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureContactSettings

@dynamic registration;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureContactSettingsRequest *)object
                   registration:(NSString *)registration {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"registration" ];
  NSString *pathURITemplate = @"v1/{+registration}:configureContactSettings";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureContactSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.registration = registration;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.configureContactSettings";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureDnsSettings

@dynamic registration;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureDnsSettingsRequest *)object
                   registration:(NSString *)registration {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"registration" ];
  NSString *pathURITemplate = @"v1/{+registration}:configureDnsSettings";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureDnsSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.registration = registration;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.configureDnsSettings";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureManagementSettings

@dynamic registration;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ConfigureManagementSettingsRequest *)object
                   registration:(NSString *)registration {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"registration" ];
  NSString *pathURITemplate = @"v1/{+registration}:configureManagementSettings";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsConfigureManagementSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.registration = registration;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.configureManagementSettings";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.delete";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsExport

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ExportRegistrationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:export";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsExport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.export";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Registration class];
  query.loggingName = @"domains.projects.locations.registrations.get";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudDomains_Policy class];
  query.loggingName = @"domains.projects.locations.registrations.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsImport

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ImportDomainRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/registrations:import";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.import";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/registrations";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudDomains_ListRegistrationsResponse class];
  query.loggingName = @"domains.projects.locations.registrations.list";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudDomains_Registration *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.patch";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRegister

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudDomains_RegisterDomainRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/registrations:register";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRegister *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.register";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsResetAuthorizationCode

@dynamic registration;

+ (instancetype)queryWithObject:(GTLRCloudDomains_ResetAuthorizationCodeRequest *)object
                   registration:(NSString *)registration {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"registration" ];
  NSString *pathURITemplate = @"v1/{+registration}:resetAuthorizationCode";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsResetAuthorizationCode *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.registration = registration;
  query.expectedObjectClass = [GTLRCloudDomains_AuthorizationCode class];
  query.loggingName = @"domains.projects.locations.registrations.resetAuthorizationCode";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveAuthorizationCode

@dynamic registration;

+ (instancetype)queryWithRegistration:(NSString *)registration {
  NSArray *pathParams = @[ @"registration" ];
  NSString *pathURITemplate = @"v1/{+registration}:retrieveAuthorizationCode";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveAuthorizationCode *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.registration = registration;
  query.expectedObjectClass = [GTLRCloudDomains_AuthorizationCode class];
  query.loggingName = @"domains.projects.locations.registrations.retrieveAuthorizationCode";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveImportableDomains

@dynamic location, pageSize, pageToken;

+ (instancetype)queryWithLocation:(NSString *)location {
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/registrations:retrieveImportableDomains";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveImportableDomains *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.location = location;
  query.expectedObjectClass = [GTLRCloudDomains_RetrieveImportableDomainsResponse class];
  query.loggingName = @"domains.projects.locations.registrations.retrieveImportableDomains";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveRegisterParameters

@dynamic domainName, location;

+ (instancetype)queryWithLocation:(NSString *)location {
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/registrations:retrieveRegisterParameters";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveRegisterParameters *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.location = location;
  query.expectedObjectClass = [GTLRCloudDomains_RetrieveRegisterParametersResponse class];
  query.loggingName = @"domains.projects.locations.registrations.retrieveRegisterParameters";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveTransferParameters

@dynamic domainName, location;

+ (instancetype)queryWithLocation:(NSString *)location {
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/registrations:retrieveTransferParameters";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsRetrieveTransferParameters *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.location = location;
  query.expectedObjectClass = [GTLRCloudDomains_RetrieveTransferParametersResponse class];
  query.loggingName = @"domains.projects.locations.registrations.retrieveTransferParameters";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSearchDomains

@dynamic location, query;

+ (instancetype)queryWithLocation:(NSString *)location {
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/registrations:searchDomains";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSearchDomains *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.location = location;
  query.expectedObjectClass = [GTLRCloudDomains_SearchDomainsResponse class];
  query.loggingName = @"domains.projects.locations.registrations.searchDomains";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudDomains_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudDomains_Policy class];
  query.loggingName = @"domains.projects.locations.registrations.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudDomains_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudDomains_TestIamPermissionsResponse class];
  query.loggingName = @"domains.projects.locations.registrations.testIamPermissions";
  return query;
}

@end

@implementation GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTransfer

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudDomains_TransferDomainRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/registrations:transfer";
  GTLRCloudDomainsQuery_ProjectsLocationsRegistrationsTransfer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudDomains_Operation class];
  query.loggingName = @"domains.projects.locations.registrations.transfer";
  return query;
}

@end
