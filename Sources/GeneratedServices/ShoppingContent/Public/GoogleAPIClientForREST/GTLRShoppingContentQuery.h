// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2.1)
// Description:
//   Manage your product listings and accounts for Google Shopping
// Documentation:
//   https://developers.google.com/shopping-content/v2/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRShoppingContentObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  View is populated with Comparison Shopping Services fields.
 *
 *  Value: "CSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentViewCss;
/**
 *  Default. View is populated with Merchant Center fields.
 *
 *  Value: "MERCHANT"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentViewMerchant;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Shopping Content query classes.
 */
@interface GTLRShoppingContentQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns information about the authenticated user.
 *
 *  Method: content.accounts.authinfo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsAuthinfo : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountsAuthInfoResponse.
 *
 *  Returns information about the authenticated user.
 *
 *  @return GTLRShoppingContentQuery_AccountsAuthinfo
 */
+ (instancetype)query;

@end

/**
 *  Claims the website of a Merchant Center sub-account. Merchant accounts with
 *  approved third-party CSSs aren't required to claim a website.
 *
 *  Method: content.accounts.claimwebsite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsClaimwebsite : GTLRShoppingContentQuery

/** The ID of the account whose website is claimed. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Only available to selected merchants, for example multi-client accounts
 *  (MCAs) and their sub-accounts. When set to `True`, this option removes any
 *  existing claim on the requested website and replaces it with a claim from
 *  the account that makes the request.
 */
@property(nonatomic, assign) BOOL overwrite;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsClaimWebsiteResponse.
 *
 *  Claims the website of a Merchant Center sub-account. Merchant accounts with
 *  approved third-party CSSs aren't required to claim a website.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account whose website is claimed.
 *
 *  @return GTLRShoppingContentQuery_AccountsClaimwebsite
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Uploads credentials for the Merchant Center account. If credentials already
 *  exist for this Merchant Center account and purpose, this method updates
 *  them.
 *
 *  Method: content.accounts.credentials.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCredentialsCreate : GTLRShoppingContentQuery

/** Required. The merchant id of the account these credentials belong to. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountCredentials.
 *
 *  Uploads credentials for the Merchant Center account. If credentials already
 *  exist for this Merchant Center account and purpose, this method updates
 *  them.
 *
 *  @param object The @c GTLRShoppingContent_AccountCredentials to include in
 *    the query.
 *  @param accountId Required. The merchant id of the account these credentials
 *    belong to.
 *
 *  @return GTLRShoppingContentQuery_AccountsCredentialsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountCredentials *)object
                      accountId:(long long)accountId;

@end

/**
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  Method: content.accounts.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountsCustomBatchResponse.
 *
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object;

@end

/**
 *  Deletes a Merchant Center sub-account.
 *
 *  Method: content.accounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsDelete : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  Option to delete sub-accounts with products. The default value is false.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  The ID of the managing account. This must be a multi-client account, and
 *  accountId must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a Merchant Center sub-account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account, and accountId must be the ID of a sub-account of
 *    this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves a Merchant Center account.
 *
 *  Method: content.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsGet : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Controls which fields will be populated. Acceptable values are: "merchant"
 *  and "css". The default value is "merchant".
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentViewMerchant Default. View is populated with
 *        Merchant Center fields. (Value: "MERCHANT")
 *    @arg @c kGTLRShoppingContentViewCss View is populated with Comparison
 *        Shopping Services fields. (Value: "CSS")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Retrieves a Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Creates a Merchant Center sub-account.
 *
 *  Method: content.accounts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsInsert : GTLRShoppingContentQuery

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Creates a Merchant Center sub-account.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Creates a new label, not assigned to any account.
 *
 *  Method: content.accounts.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsCreate : GTLRShoppingContentQuery

/** Required. The id of the account this label belongs to. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountLabel.
 *
 *  Creates a new label, not assigned to any account.
 *
 *  @param object The @c GTLRShoppingContent_AccountLabel to include in the
 *    query.
 *  @param accountId Required. The id of the account this label belongs to.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId;

@end

/**
 *  Deletes a label and removes it from all accounts to which it was assigned.
 *
 *  Method: content.accounts.labels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsDelete : GTLRShoppingContentQuery

/** Required. The id of the account that owns the label. */
@property(nonatomic, assign) long long accountId;

/** Required. The id of the label to delete. */
@property(nonatomic, assign) long long labelId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a label and removes it from all accounts to which it was assigned.
 *
 *  @param accountId Required. The id of the account that owns the label.
 *  @param labelId Required. The id of the label to delete.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                           labelId:(long long)labelId;

@end

/**
 *  Lists the labels assigned to an account.
 *
 *  Method: content.accounts.labels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsList : GTLRShoppingContentQuery

/** Required. The account id for whose labels are to be listed. */
@property(nonatomic, assign) long long accountId;

/**
 *  The maximum number of labels to return. The service may return fewer than
 *  this value. If unspecified, at most 50 labels will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListAccountLabels` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListAccountLabels` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListAccountLabelsResponse.
 *
 *  Lists the labels assigned to an account.
 *
 *  @param accountId Required. The account id for whose labels are to be listed.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates a label.
 *
 *  Method: content.accounts.labels.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsPatch : GTLRShoppingContentQuery

/** Required. The id of the account this label belongs to. */
@property(nonatomic, assign) long long accountId;

/** Required. The id of the label to update. */
@property(nonatomic, assign) long long labelId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountLabel.
 *
 *  Updates a label.
 *
 *  @param object The @c GTLRShoppingContent_AccountLabel to include in the
 *    query.
 *  @param accountId Required. The id of the account this label belongs to.
 *  @param labelId Required. The id of the label to update.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId
                        labelId:(long long)labelId;

@end

/**
 *  Performs an action on a link between two Merchant Center accounts, namely
 *  accountId and linkedAccountId.
 *
 *  Method: content.accounts.link
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLink : GTLRShoppingContentQuery

/** The ID of the account that should be linked. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsLinkResponse.
 *
 *  Performs an action on a link between two Merchant Center accounts, namely
 *  accountId and linkedAccountId.
 *
 *  @param object The @c GTLRShoppingContent_AccountsLinkRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that should be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsLink
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsLinkRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsList : GTLRShoppingContentQuery

/**
 *  If view is set to "css", only return accounts that are assigned label with
 *  given ID.
 */
@property(nonatomic, assign) unsigned long long label;

/**
 *  The maximum number of accounts to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  If set, only the accounts with the given name (case sensitive) will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Controls which fields will be populated. Acceptable values are: "merchant"
 *  and "css". The default value is "merchant".
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentViewMerchant Default. View is populated with
 *        Merchant Center fields. (Value: "MERCHANT")
 *    @arg @c kGTLRShoppingContentViewCss View is populated with Comparison
 *        Shopping Services fields. (Value: "CSS")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListResponse.
 *
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Returns the list of accounts linked to your Merchant Center account.
 *
 *  Method: content.accounts.listlinks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsListlinks : GTLRShoppingContentQuery

/** The ID of the account for which to list links. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The maximum number of links to return in the response, used for pagination.
 *  The minimum allowed value is 5 results per page. If provided value is lower
 *  than 5, it will be automatically increased to 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListLinksResponse.
 *
 *  Returns the list of accounts linked to your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to list links.
 *
 *  @return GTLRShoppingContentQuery_AccountsListlinks
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Request verification code to start phone verification.
 *
 *  Method: content.accounts.requestphoneverification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsRequestphoneverification : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_RequestPhoneVerificationResponse.
 *
 *  Request verification code to start phone verification.
 *
 *  @param object The @c GTLRShoppingContent_RequestPhoneVerificationRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the managing account. If this
 *    parameter is not the same as accountId, then this account must be a
 *    multi-client account and accountId must be the ID of a sub-account of this
 *    account.
 *  @param accountId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsRequestphoneverification
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestPhoneVerificationRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId;

@end

/**
 *  Links return carrier to a merchant account.
 *
 *  Method: content.accounts.returncarrier.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierCreate : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountReturnCarrier.
 *
 *  Links return carrier to a merchant account.
 *
 *  @param object The @c GTLRShoppingContent_AccountReturnCarrier to include in
 *    the query.
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId;

@end

/**
 *  Delete a return carrier in the merchant account.
 *
 *  Method: content.accounts.returncarrier.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierDelete : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The Google-provided unique carrier ID, used to update the
 *  resource.
 */
@property(nonatomic, assign) long long carrierAccountId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a return carrier in the merchant account.
 *
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *  @param carrierAccountId Required. The Google-provided unique carrier ID,
 *    used to update the resource.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                  carrierAccountId:(long long)carrierAccountId;

@end

/**
 *  Lists available return carriers in the merchant account.
 *
 *  Method: content.accounts.returncarrier.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierList : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_ListAccountReturnCarrierResponse.
 *
 *  Lists available return carriers in the merchant account.
 *
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierList
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates a return carrier in the merchant account.
 *
 *  Method: content.accounts.returncarrier.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierPatch : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The Google-provided unique carrier ID, used to update the
 *  resource.
 */
@property(nonatomic, assign) long long carrierAccountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountReturnCarrier.
 *
 *  Updates a return carrier in the merchant account.
 *
 *  @param object The @c GTLRShoppingContent_AccountReturnCarrier to include in
 *    the query.
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *  @param carrierAccountId Required. The Google-provided unique carrier ID,
 *    used to update the resource.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId
               carrierAccountId:(long long)carrierAccountId;

@end

/**
 *  Retrieves multiple Merchant Center account statuses in a single request.
 *
 *  Method: content.accountstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesCustomBatchResponse.
 *
 *  Retrieves multiple Merchant Center account statuses in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a Merchant Center account. No itemLevelIssues are
 *  returned for multi-client accounts.
 *
 *  Method: content.accountstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesGet : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountStatus.
 *
 *  Retrieves the status of a Merchant Center account. No itemLevelIssues are
 *  returned for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accountstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesList : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of account statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  If set, only the accounts with the given name (case sensitive) will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesListResponse.
 *
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a Merchant Center account. Any fields that are not provided are
 *  deleted from the resource.
 *
 *  Method: content.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdate : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Updates a Merchant Center account. Any fields that are not provided are
 *  deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates labels that are assigned to the Merchant Center account by CSS user.
 *
 *  Method: content.accounts.updatelabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdatelabels : GTLRShoppingContentQuery

/** The ID of the account whose labels are updated. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsUpdateLabelsResponse.
 *
 *  Updates labels that are assigned to the Merchant Center account by CSS user.
 *
 *  @param object The @c GTLRShoppingContent_AccountsUpdateLabelsRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account whose labels are updated.
 *
 *  @return GTLRShoppingContentQuery_AccountsUpdatelabels
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsUpdateLabelsRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Validates verification code to verify phone number for the account. If
 *  successful this will overwrite the value of
 *  `accounts.businessinformation.phoneNumber`. Only verified phone number will
 *  replace an existing verified phone number.
 *
 *  Method: content.accounts.verifyphonenumber
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsVerifyphonenumber : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_VerifyPhoneNumberResponse.
 *
 *  Validates verification code to verify phone number for the account. If
 *  successful this will overwrite the value of
 *  `accounts.businessinformation.phoneNumber`. Only verified phone number will
 *  replace an existing verified phone number.
 *
 *  @param object The @c GTLRShoppingContent_VerifyPhoneNumberRequest to include
 *    in the query.
 *  @param merchantId Required. The ID of the managing account. If this
 *    parameter is not the same as accountId, then this account must be a
 *    multi-client account and accountId must be the ID of a sub-account of this
 *    account.
 *  @param accountId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsVerifyphonenumber
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_VerifyPhoneNumberRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId;

@end

/**
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  Method: content.accounttax.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxCustomBatchResponse.
 *
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccounttaxCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object;

@end

/**
 *  Retrieves the tax settings of the account.
 *
 *  Method: content.accounttax.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxGet : GTLRShoppingContentQuery

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Retrieves the tax settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounttax.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxList : GTLRShoppingContentQuery

/**
 *  The maximum number of tax settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxListResponse.
 *
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the tax settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  Method: content.accounttax.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Updates the tax settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_AccountTax to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Uploads a collection to your Merchant Center account. If a collection with
 *  the same collectionId already exists, this method updates that entry. In
 *  each update, the collection is completely replaced by the fields in the body
 *  of the update request.
 *
 *  Method: content.collections.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsCreate : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Collection.
 *
 *  Uploads a collection to your Merchant Center account. If a collection with
 *  the same collectionId already exists, this method updates that entry. In
 *  each update, the collection is completely replaced by the fields in the body
 *  of the update request.
 *
 *  @param object The @c GTLRShoppingContent_Collection to include in the query.
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Collection *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes a collection from your Merchant Center account.
 *
 *  Method: content.collections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsDelete : GTLRShoppingContentQuery

/**
 *  Required. The collectionId of the collection. CollectionId is the same as
 *  the REST ID of the collection.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The collectionId of the collection.
 *    CollectionId is the same as the REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionsDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Retrieves a collection from your Merchant Center account.
 *
 *  Method: content.collections.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsGet : GTLRShoppingContentQuery

/** Required. The REST ID of the collection. */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Collection.
 *
 *  Retrieves a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Lists the collections in your Merchant Center account. The response might
 *  contain fewer items than specified by page_size. Rely on next_page_token to
 *  determine if there are more items to be requested.
 *
 *  Method: content.collections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of collections to return in the response, used for
 *  paging. Defaults to 50; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCollectionsResponse.
 *
 *  Lists the collections in your Merchant Center account. The response might
 *  contain fewer items than specified by page_size. Rely on next_page_token to
 *  determine if there are more items to be requested.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Gets the status of a collection from your Merchant Center account.
 *
 *  Method: content.collectionstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionstatusesGet : GTLRShoppingContentQuery

/**
 *  Required. The collectionId of the collection. CollectionId is the same as
 *  the REST ID of the collection.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_CollectionStatus.
 *
 *  Gets the status of a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The collectionId of the collection.
 *    CollectionId is the same as the REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionstatusesGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Lists the statuses of the collections in your Merchant Center account.
 *
 *  Method: content.collectionstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionstatusesList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of collection statuses to return in the response, used
 *  for paging. Defaults to 50; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCollectionStatusesResponse.
 *
 *  Lists the statuses of the collections in your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Creates a new conversion source.
 *
 *  Method: content.conversionsources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesCreate : GTLRShoppingContentQuery

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ConversionSource.
 *
 *  Creates a new conversion source.
 *
 *  @param object The @c GTLRShoppingContent_ConversionSource to include in the
 *    query.
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ConversionSource *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Archives an existing conversion source. It will be recoverable for 30 days.
 *  This archiving behavior is not typical in the Content API and unique to this
 *  service.
 *
 *  Method: content.conversionsources.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesDelete : GTLRShoppingContentQuery

/** Required. The ID of the conversion source to be deleted. */
@property(nonatomic, copy, nullable) NSString *conversionSourceId;

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Archives an existing conversion source. It will be recoverable for 30 days.
 *  This archiving behavior is not typical in the Content API and unique to this
 *  service.
 *
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *  @param conversionSourceId Required. The ID of the conversion source to be
 *    deleted.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                 conversionSourceId:(NSString *)conversionSourceId;

@end

/**
 *  Fetches a conversion source.
 *
 *  Method: content.conversionsources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesGet : GTLRShoppingContentQuery

/** Required. The REST ID of the collection. */
@property(nonatomic, copy, nullable) NSString *conversionSourceId;

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ConversionSource.
 *
 *  Fetches a conversion source.
 *
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *  @param conversionSourceId Required. The REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                 conversionSourceId:(NSString *)conversionSourceId;

@end

/**
 *  Retrieves the list of conversion sources the caller has access to.
 *
 *  Method: content.conversionsources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesList : GTLRShoppingContentQuery

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of conversion sources to return in a page. If no
 *  `page_size` is specified, `100` is used as the default value. The maximum
 *  value is `200`. Values above `200` will be coerced to `200`. Regardless of
 *  pagination, at most `200` conversion sources are returned in total.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** If true, also returns archived conversion sources. */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRShoppingContent_ListConversionSourcesResponse.
 *
 *  Retrieves the list of conversion sources the caller has access to.
 *
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates information of an existing conversion source.
 *
 *  Method: content.conversionsources.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesPatch : GTLRShoppingContentQuery

/** Required. The ID of the conversion source to be updated. */
@property(nonatomic, copy, nullable) NSString *conversionSourceId;

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Optional. List of fields being updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_ConversionSource.
 *
 *  Updates information of an existing conversion source.
 *
 *  @param object The @c GTLRShoppingContent_ConversionSource to include in the
 *    query.
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *  @param conversionSourceId Required. The ID of the conversion source to be
 *    updated.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ConversionSource *)object
                     merchantId:(long long)merchantId
             conversionSourceId:(NSString *)conversionSourceId;

@end

/**
 *  Re-enables an archived conversion source.
 *
 *  Method: content.conversionsources.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ConversionsourcesUndelete : GTLRShoppingContentQuery

/** Required. The ID of the conversion source to be undeleted. */
@property(nonatomic, copy, nullable) NSString *conversionSourceId;

/** Required. The ID of the account that owns the new conversion source. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Re-enables an archived conversion source.
 *
 *  @param object The @c GTLRShoppingContent_UndeleteConversionSourceRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account that owns the new
 *    conversion source.
 *  @param conversionSourceId Required. The ID of the conversion source to be
 *    undeleted.
 *
 *  @return GTLRShoppingContentQuery_ConversionsourcesUndelete
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_UndeleteConversionSourceRequest *)object
                     merchantId:(long long)merchantId
             conversionSourceId:(NSString *)conversionSourceId;

@end

/**
 *  Retrieves a single CSS domain by ID.
 *
 *  Method: content.csses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesGet : GTLRShoppingContentQuery

/** Required. The ID of the CSS domain to return. */
@property(nonatomic, assign) long long cssDomainId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and
 *  `cssDomainId` must be the ID of a CSS domain affiliated with this group.
 */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  Fetches a @c GTLRShoppingContent_Css.
 *
 *  Retrieves a single CSS domain by ID.
 *
 *  @param cssGroupId Required. The ID of the managing account. If this
 *    parameter is not the same as [cssDomainId](#cssDomainId), then this ID
 *    must be a CSS group ID and `cssDomainId` must be the ID of a CSS domain
 *    affiliated with this group.
 *  @param cssDomainId Required. The ID of the CSS domain to return.
 *
 *  @return GTLRShoppingContentQuery_CssesGet
 */
+ (instancetype)queryWithCssGroupId:(long long)cssGroupId
                        cssDomainId:(long long)cssDomainId;

@end

/**
 *  Lists CSS domains affiliated with a CSS group.
 *
 *  Method: content.csses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesList : GTLRShoppingContentQuery

/** Required. The CSS group ID of CSS domains to be listed. */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  The maximum number of CSS domains to return. The service may return fewer
 *  than this value. If unspecified, at most 50 CSS domains will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListCsses` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListCsses` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCssesResponse.
 *
 *  Lists CSS domains affiliated with a CSS group.
 *
 *  @param cssGroupId Required. The CSS group ID of CSS domains to be listed.
 *
 *  @return GTLRShoppingContentQuery_CssesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCssGroupId:(long long)cssGroupId;

@end

/**
 *  Updates labels that are assigned to a CSS domain by its CSS group.
 *
 *  Method: content.csses.updatelabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesUpdatelabels : GTLRShoppingContentQuery

/** Required. The ID of the updated CSS domain. */
@property(nonatomic, assign) long long cssDomainId;

/** Required. The CSS group ID of the updated CSS domain. */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  Fetches a @c GTLRShoppingContent_Css.
 *
 *  Updates labels that are assigned to a CSS domain by its CSS group.
 *
 *  @param object The @c GTLRShoppingContent_LabelIds to include in the query.
 *  @param cssGroupId Required. The CSS group ID of the updated CSS domain.
 *  @param cssDomainId Required. The ID of the updated CSS domain.
 *
 *  @return GTLRShoppingContentQuery_CssesUpdatelabels
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LabelIds *)object
                     cssGroupId:(long long)cssGroupId
                    cssDomainId:(long long)cssDomainId;

@end

/**
 *  Deletes, fetches, gets, inserts and updates multiple datafeeds in a single
 *  request.
 *
 *  Method: content.datafeeds.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsCustomBatchResponse.
 *
 *  Deletes, fetches, gets, inserts and updates multiple datafeeds in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object;

@end

/**
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsDelete : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Invokes a fetch for the datafeed in your Merchant Center account. If you
 *  need to call this method more than once per day, we recommend you use the
 *  [Products
 *  service](https://developers.google.com/shopping-content/reference/rest/v2.1/products)
 *  to update your product data.
 *
 *  Method: content.datafeeds.fetchnow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsFetchnow : GTLRShoppingContentQuery

/** The ID of the datafeed to be fetched. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsFetchNowResponse.
 *
 *  Invokes a fetch for the datafeed in your Merchant Center account. If you
 *  need to call this method more than once per day, we recommend you use the
 *  [Products
 *  service](https://developers.google.com/shopping-content/reference/rest/v2.1/products)
 *  to update your product data.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed to be fetched.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsFetchnow
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsGet : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  Method: content.datafeeds.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeeds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsListResponse.
 *
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets multiple Merchant Center datafeed statuses in a single request.
 *
 *  Method: content.datafeedstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesCustomBatchResponse.
 *
 *  Gets multiple Merchant Center datafeed statuses in a single request.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesGet : GTLRShoppingContentQuery

/**
 *  Deprecated. Use `feedLabel` instead. The country to get the datafeed status
 *  for. If this parameter is provided then `language` must also be provided.
 *  Note that this parameter is required for feeds targeting multiple countries
 *  and languages, since a feed may have a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *country;

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The feed label to get the datafeed status for. If this parameter is provided
 *  then `language` must also be provided. Note that this parameter is required
 *  for feeds targeting multiple countries and languages, since a feed may have
 *  a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *feedLabel;

/**
 *  The language to get the datafeed status for. If this parameter is provided
 *  then `country` must also be provided. Note that this parameter is required
 *  for feeds targeting multiple countries and languages, since a feed may have
 *  a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedStatus.
 *
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesListResponse.
 *
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a datafeed configuration of your Merchant Center account. Any fields
 *  that are not provided are deleted from the resource.
 *
 *  Method: content.datafeeds.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsUpdate : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Updates a datafeed configuration of your Merchant Center account. Any fields
 *  that are not provided are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Deletes `Checkout` settings and unenrolls merchant from `Checkout` program.
 *
 *  Method: content.freelistingsprogram.checkoutsettings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsDelete : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes `Checkout` settings and unenrolls merchant from `Checkout` program.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Gets Checkout settings for the given merchant. This includes information
 *  about review state, enrollment state and URL settings.
 *
 *  Method: content.freelistingsprogram.checkoutsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_CheckoutSettings.
 *
 *  Gets Checkout settings for the given merchant. This includes information
 *  about review state, enrollment state and URL settings.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Enrolls merchant in `Checkout` program.
 *
 *  Method: content.freelistingsprogram.checkoutsettings.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsInsert : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_CheckoutSettings.
 *
 *  Enrolls merchant in `Checkout` program.
 *
 *  @param object The @c GTLRShoppingContent_InsertCheckoutSettingsRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramCheckoutsettingsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_InsertCheckoutSettingsRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Retrieves the status and review eligibility for the free listing program.
 *  Returns errors and warnings if they require action to resolve, will become
 *  disapprovals, or impact impressions. Use `accountstatuses` to view all
 *  issues for an account.
 *
 *  Method: content.freelistingsprogram.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_FreeListingsProgramStatus.
 *
 *  Retrieves the status and review eligibility for the free listing program.
 *  Returns errors and warnings if they require action to resolve, will become
 *  disapprovals, or impact impressions. Use `accountstatuses` to view all
 *  issues for an account.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Requests a review of free listings in a specific region. This method
 *  deprecated. Use the `MerchantSupportService` to view product and account
 *  issues and request a review.
 *
 *  Method: content.freelistingsprogram.requestreview
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramRequestreview : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests a review of free listings in a specific region. This method
 *  deprecated. Use the `MerchantSupportService` to view product and account
 *  issues and request a review.
 *
 *  @param object The @c GTLRShoppingContent_RequestReviewFreeListingsRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramRequestreview
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewFreeListingsRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.liasettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsCustomBatchResponse.
 *
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_LiasettingsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiasettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the LIA settings of the account.
 *
 *  Method: content.liasettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Retrieves the LIA settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves the list of accessible Business Profiles.
 *
 *  Method: content.liasettings.getaccessiblegmbaccounts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve accessible Business Profiles.
 */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsGetAccessibleGmbAccountsResponse.
 *
 *  Retrieves the list of accessible Business Profiles.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Business Profiles.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.liasettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsList : GTLRShoppingContentQuery

/**
 *  The maximum number of LIA settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListResponse.
 *
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  Method: content.liasettings.listposdataproviders
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsListposdataproviders : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListPosDataProvidersResponse.
 *
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsListposdataproviders
 */
+ (instancetype)query;

@end

/**
 *  Requests access to a specified Business Profile.
 *
 *  Method: content.liasettings.requestgmbaccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestgmbaccess : GTLRShoppingContentQuery

/** The ID of the account for which Business Profile access is requested. */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the Business Profile. */
@property(nonatomic, copy, nullable) NSString *gmbEmail;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsRequestGmbAccessResponse.
 *
 *  Requests access to a specified Business Profile.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which Business Profile access is
 *    requested.
 *  @param gmbEmail The email of the Business Profile.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestgmbaccess
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                           gmbEmail:(NSString *)gmbEmail;

@end

/**
 *  Requests inventory validation for the specified country.
 *
 *  Method: content.liasettings.requestinventoryverification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestinventoryverification : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which inventory validation is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsRequestInventoryVerificationResponse.
 *
 *  Requests inventory validation for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param country The country for which inventory validation is requested.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestinventoryverification
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Sets the inventory verification contract for the specified country.
 *
 *  Method: content.liasettings.setinventoryverificationcontact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/** The name of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactName;

/** The country for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/** The language for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsSetInventoryVerificationContactResponse.
 *
 *  Sets the inventory verification contract for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param country The country for which inventory verification is requested.
 *  @param language The language for which inventory verification is requested.
 *  @param contactName The name of the inventory verification contact.
 *  @param contactEmail The email of the inventory verification contact.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country
                           language:(NSString *)language
                        contactName:(NSString *)contactName
                       contactEmail:(NSString *)contactEmail;

@end

/**
 *  Sets the omnichannel experience for the specified country. Only supported
 *  for merchants whose POS data provider is trusted to enable the corresponding
 *  experience. For more context, see these help articles [about
 *  LFP](https://support.google.com/merchants/answer/7676652) and [how to get
 *  started](https://support.google.com/merchants/answer/7676578) with it.
 *
 *  Method: content.liasettings.setomnichannelexperience
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetomnichannelexperience : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve accessible Business Profiles.
 */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The CLDR country code (for example, "US") for which the omnichannel
 *  experience is selected.
 */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The Local Store Front (LSF) type for this country. Acceptable values are: -
 *  "`ghlsf`" (Google-Hosted Local Store Front) - "`mhlsfBasic`"
 *  (Merchant-Hosted Local Store Front Basic) - "`mhlsfFull`" (Merchant-Hosted
 *  Local Store Front Full) More details about these types can be found here.
 */
@property(nonatomic, copy, nullable) NSString *lsfType;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The Pickup types for this country. Acceptable values are: - "`pickupToday`"
 *  - "`pickupLater`"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pickupTypes;

/**
 *  Fetches a @c GTLRShoppingContent_LiaOmnichannelExperience.
 *
 *  Sets the omnichannel experience for the specified country. Only supported
 *  for merchants whose POS data provider is trusted to enable the corresponding
 *  experience. For more context, see these help articles [about
 *  LFP](https://support.google.com/merchants/answer/7676652) and [how to get
 *  started](https://support.google.com/merchants/answer/7676578) with it.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Business Profiles.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetomnichannelexperience
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Sets the POS data provider for the specified country.
 *
 *  Method: content.liasettings.setposdataprovider
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetposdataprovider : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve accessible Business Profiles.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which the POS data provider is selected. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of POS data provider. */
@property(nonatomic, assign) unsigned long long posDataProviderId;

/**
 *  The account ID by which this merchant is known to the POS data provider.
 */
@property(nonatomic, copy, nullable) NSString *posExternalAccountId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsSetPosDataProviderResponse.
 *
 *  Sets the POS data provider for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Business Profiles.
 *  @param country The country for which the POS data provider is selected.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetposdataprovider
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Updates the LIA settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  Method: content.liasettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Updates the LIA settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_LiaSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiaSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates local inventory for multiple products or stores in a single request.
 *
 *  Method: content.localinventory.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LocalinventoryCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LocalinventoryCustomBatchResponse.
 *
 *  Updates local inventory for multiple products or stores in a single request.
 *
 *  @param object The @c GTLRShoppingContent_LocalinventoryCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_LocalinventoryCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalinventoryCustomBatchRequest *)object;

@end

/**
 *  Updates the local inventory of a product in your Merchant Center account.
 *
 *  Method: content.localinventory.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LocalinventoryInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update local inventory. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_LocalInventory.
 *
 *  Updates the local inventory of a product in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_LocalInventory to include in the
 *    query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update local
 *    inventory.
 *
 *  @return GTLRShoppingContentQuery_LocalinventoryInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Provide a list of merchant's issues with a support content and available
 *  actions. This content and actions are meant to be rendered and shown in
 *  third-party applications.
 *
 *  Method: content.merchantsupport.renderaccountissues
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_MerchantsupportRenderaccountissues : GTLRShoppingContentQuery

/**
 *  Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language code
 *  used to localize support content. If not set, the result will be in default
 *  language `en-US`.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The ID of the account to fetch issues for. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
 *  localize times in support content. For example 'America/Los_Angeles'. If not
 *  set, results will use as a default UTC.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/**
 *  Fetches a @c GTLRShoppingContent_RenderAccountIssuesResponse.
 *
 *  Provide a list of merchant's issues with a support content and available
 *  actions. This content and actions are meant to be rendered and shown in
 *  third-party applications.
 *
 *  @param object The @c GTLRShoppingContent_RenderAccountIssuesRequestPayload
 *    to include in the query.
 *  @param merchantId Required. The ID of the account to fetch issues for.
 *
 *  @return GTLRShoppingContentQuery_MerchantsupportRenderaccountissues
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RenderAccountIssuesRequestPayload *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Provide a list of issues for merchant's product with a support content and
 *  available actions. This content and actions are meant to be rendered and
 *  shown in third-party applications.
 *
 *  Method: content.merchantsupport.renderproductissues
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_MerchantsupportRenderproductissues : GTLRShoppingContentQuery

/**
 *  Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language code
 *  used to localize support content. If not set, the result will be in default
 *  language `en-US`.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The ID of the account that contains the product. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The
 *  [REST_ID](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
 *  of the product to fetch issues for.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
 *  localize times in support content. For example 'America/Los_Angeles'. If not
 *  set, results will use as a default UTC.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/**
 *  Fetches a @c GTLRShoppingContent_RenderProductIssuesResponse.
 *
 *  Provide a list of issues for merchant's product with a support content and
 *  available actions. This content and actions are meant to be rendered and
 *  shown in third-party applications.
 *
 *  @param object The @c GTLRShoppingContent_RenderProductIssuesRequestPayload
 *    to include in the query.
 *  @param merchantId Required. The ID of the account that contains the product.
 *  @param productId Required. The
 *    [REST_ID](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
 *    of the product to fetch issues for.
 *
 *  @return GTLRShoppingContentQuery_MerchantsupportRenderproductissues
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RenderProductIssuesRequestPayload *)object
                     merchantId:(long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Start an action. The action can be requested by merchants in third-party
 *  application. Before merchants can request the action, the third-party
 *  application needs to show them action specific content and display a user
 *  input form. The action can be successfully started only once all `required`
 *  inputs are provided. If any `required` input is missing, or invalid value
 *  was provided, the service will return 400 error. Validation errors will
 *  contain Ids for all problematic field together with translated, human
 *  readable error messages that can be shown to the user.
 *
 *  Method: content.merchantsupport.triggeraction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_MerchantsupportTriggeraction : GTLRShoppingContentQuery

/**
 *  Optional. Language code [IETF BCP 47
 *  syntax](https://tools.ietf.org/html/bcp47) used to localize the response. If
 *  not set, the result will be in default language `en-US`.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The ID of the merchant's account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_TriggerActionResponse.
 *
 *  Start an action. The action can be requested by merchants in third-party
 *  application. Before merchants can request the action, the third-party
 *  application needs to show them action specific content and display a user
 *  input form. The action can be successfully started only once all `required`
 *  inputs are provided. If any `required` input is missing, or invalid value
 *  was provided, the service will return 400 error. Validation errors will
 *  contain Ids for all problematic field together with translated, human
 *  readable error messages that can be shown to the user.
 *
 *  @param object The @c GTLRShoppingContent_TriggerActionPayload to include in
 *    the query.
 *  @param merchantId Required. The ID of the merchant's account.
 *
 *  @return GTLRShoppingContentQuery_MerchantsupportTriggeraction
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_TriggerActionPayload *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Creates new order tracking signal.
 *
 *  Method: content.ordertrackingsignals.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdertrackingsignalsCreate : GTLRShoppingContentQuery

/** The ID of the merchant for which the order signal is created. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderTrackingSignal.
 *
 *  Creates new order tracking signal.
 *
 *  @param object The @c GTLRShoppingContent_OrderTrackingSignal to include in
 *    the query.
 *  @param merchantId The ID of the merchant for which the order signal is
 *    created.
 *
 *  @return GTLRShoppingContentQuery_OrdertrackingsignalsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderTrackingSignal *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Batches multiple POS-related calls in a single request.
 *
 *  Method: content.pos.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_PosCustomBatchResponse.
 *
 *  Batches multiple POS-related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_PosCustomBatchRequest to include in
 *    the query.
 *
 *  @return GTLRShoppingContentQuery_PosCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosCustomBatchRequest *)object;

@end

/**
 *  Deletes a store for the given merchant.
 *
 *  Method: content.pos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosDelete : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a store for the given merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Retrieves information about the given store.
 *
 *  Method: content.pos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosGet : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Retrieves information about the given store.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Creates a store for the given merchant.
 *
 *  Method: content.pos.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInsert : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Creates a store for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosStore to include in the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosStore *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit inventory for the given merchant.
 *
 *  Method: content.pos.inventory
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInventory : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosInventoryResponse.
 *
 *  Submit inventory for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosInventoryRequest to include in
 *    the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInventory
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosInventoryRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Lists the stores of the target merchant.
 *
 *  Method: content.pos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosList : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosListResponse.
 *
 *  Lists the stores of the target merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosList
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit a sale event for the given merchant.
 *
 *  Method: content.pos.sale
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosSale : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosSaleResponse.
 *
 *  Submit a sale event for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosSaleRequest to include in the
 *    query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosSale
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosSaleRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Creates or updates the delivery time of a product.
 *
 *  Method: content.productdeliverytime.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeCreate : GTLRShoppingContentQuery

/**
 *  The Google merchant ID of the account that contains the product. This
 *  account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductDeliveryTime.
 *
 *  Creates or updates the delivery time of a product.
 *
 *  @param object The @c GTLRShoppingContent_ProductDeliveryTime to include in
 *    the query.
 *  @param merchantId The Google merchant ID of the account that contains the
 *    product. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductDeliveryTime *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes the delivery time of a product.
 *
 *  Method: content.productdeliverytime.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeDelete : GTLRShoppingContentQuery

/**
 *  Required. The Google merchant ID of the account that contains the product.
 *  This account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The Content API ID of the product, in the form
 *  `channel:contentLanguage:targetCountry:offerId`.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the delivery time of a product.
 *
 *  @param merchantId Required. The Google merchant ID of the account that
 *    contains the product. This account cannot be a multi-client account.
 *  @param productId Required. The Content API ID of the product, in the form
 *    `channel:contentLanguage:targetCountry:offerId`.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Gets `productDeliveryTime` by `productId`.
 *
 *  Method: content.productdeliverytime.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeGet : GTLRShoppingContentQuery

/**
 *  Required. The Google merchant ID of the account that contains the product.
 *  This account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The Content API ID of the product, in the form
 *  `channel:contentLanguage:targetCountry:offerId`.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductDeliveryTime.
 *
 *  Gets `productDeliveryTime` by `productId`.
 *
 *  @param merchantId Required. The Google merchant ID of the account that
 *    contains the product. This account cannot be a multi-client account.
 *  @param productId Required. The Content API ID of the product, in the form
 *    `channel:contentLanguage:targetCountry:offerId`.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  Method: content.products.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ProductsCustomBatchResponse.
 *
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object;

@end

/**
 *  Deletes a product from your Merchant Center account.
 *
 *  Method: content.products.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsDelete : GTLRShoppingContentQuery

/**
 *  The Content API Supplemental Feed ID. If present then product deletion
 *  applies to the data in a supplemental feed. If absent, entire product will
 *  be deleted.
 */
@property(nonatomic, assign) unsigned long long feedId;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves a product from your Merchant Center account.
 *
 *  Method: content.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsGet : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Retrieves a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  Method: content.products.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsInsert : GTLRShoppingContentQuery

/**
 *  The Content API Supplemental Feed ID. If present then product insertion
 *  applies to the data in a supplemental feed.
 */
@property(nonatomic, assign) unsigned long long feedId;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the products in your Merchant Center account. The response might
 *  contain fewer items than specified by maxResults. Rely on nextPageToken to
 *  determine if there are more items to be requested.
 *
 *  Method: content.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 *  The default value is 25. The maximum value is 250.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductsListResponse.
 *
 *  Lists the products in your Merchant Center account. The response might
 *  contain fewer items than specified by maxResults. Rely on nextPageToken to
 *  determine if there are more items to be requested.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets the statuses of multiple products in a single request.
 *
 *  Method: content.productstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesCustomBatchResponse.
 *
 *  Gets the statuses of multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object;

@end

/**
 *  Gets the status of a product from your Merchant Center account.
 *
 *  Method: content.productstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesGet : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductStatus.
 *
 *  Gets the status of a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  Method: content.productstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesList : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of product statuses to return in the response, used for
 *  paging. The default value is 25. The maximum value is 250.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesListResponse.
 *
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates an existing product in your Merchant Center account. Only updates
 *  attributes provided in the request.
 *
 *  Method: content.products.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsUpdate : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The comma-separated list of product attributes to be updated. Example:
 *  `"title,salePrice"`. Attributes specified in the update mask without a value
 *  specified in the body will be deleted from the product. *You must specify
 *  the update mask to delete attributes.* Only top-level product attributes can
 *  be updated. If not defined, product attributes with set values will be
 *  updated and other attributes will stay unchanged.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Updates an existing product in your Merchant Center account. Only updates
 *  attributes provided in the request.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update.
 *
 *  @return GTLRShoppingContentQuery_ProductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Inserts a promotion for your Merchant Center account. If the promotion
 *  already exists, then it updates the promotion instead. To [end or delete]
 *  (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion)
 *  a promotion update the time period of the promotion to a time that has
 *  already passed.
 *
 *  Method: content.promotions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PromotionsCreate : GTLRShoppingContentQuery

/** Required. The ID of the account that contains the collection. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Promotion.
 *
 *  Inserts a promotion for your Merchant Center account. If the promotion
 *  already exists, then it updates the promotion instead. To [end or delete]
 *  (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion)
 *  a promotion update the time period of the promotion to a time that has
 *  already passed.
 *
 *  @param object The @c GTLRShoppingContent_Promotion to include in the query.
 *  @param merchantId Required. The ID of the account that contains the
 *    collection.
 *
 *  @return GTLRShoppingContentQuery_PromotionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Promotion *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Retrieves a promotion from your Merchant Center account.
 *
 *  Method: content.promotions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PromotionsGet : GTLRShoppingContentQuery

/**
 *  Required. REST ID of the promotion to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Required. The ID of the account that contains the collection. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Promotion.
 *
 *  Retrieves a promotion from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection.
 *  @param identifier Required. REST ID of the promotion to retrieve.
 *
 *  @return GTLRShoppingContentQuery_PromotionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                         identifier:(NSString *)identifier;

@end

/**
 *  List all promotions from your Merchant Center account.
 *
 *  Method: content.promotions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PromotionsList : GTLRShoppingContentQuery

/**
 *  [CLDR country
 *  code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) (for
 *  example, "US"), used as a filter on promotions target country.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  The two-letter ISO 639-1 language code associated with the promotions, used
 *  as a filter.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The ID of the account that contains the collection. */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of promotions to return. The service may return fewer
 *  than this value. If unspecified, at most 50 labels will be returned. The
 *  maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListPromotion` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListPromotion` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListPromotionResponse.
 *
 *  List all promotions from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection.
 *
 *  @return GTLRShoppingContentQuery_PromotionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Retrieves a Merchant Center account's pubsub notification settings.
 *
 *  Method: content.pubsubnotificationsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PubsubnotificationsettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get pubsub notification settings. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PubsubNotificationSettings.
 *
 *  Retrieves a Merchant Center account's pubsub notification settings.
 *
 *  @param merchantId The ID of the account for which to get pubsub notification
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_PubsubnotificationsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Register a Merchant Center account for pubsub notifications. Note that cloud
 *  topic name shouldn't be provided as part of the request.
 *
 *  Method: content.pubsubnotificationsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PubsubNotificationSettings.
 *
 *  Register a Merchant Center account for pubsub notifications. Note that cloud
 *  topic name shouldn't be provided as part of the request.
 *
 *  @param object The @c GTLRShoppingContent_PubsubNotificationSettings to
 *    include in the query.
 *  @param merchantId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PubsubNotificationSettings *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the daily call quota and usage per method for your Merchant Center
 *  account.
 *
 *  Method: content.quotas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_QuotasList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that has quota. This account must be an
 *  admin.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of quotas to return in the response, used for paging.
 *  Defaults to 500; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListMethodQuotasResponse.
 *
 *  Lists the daily call quota and usage per method for your Merchant Center
 *  account.
 *
 *  @param merchantId Required. The ID of the account that has quota. This
 *    account must be an admin.
 *
 *  @return GTLRShoppingContentQuery_QuotasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Generates recommendations for a merchant.
 *
 *  Method: content.recommendations.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RecommendationsGenerate : GTLRShoppingContentQuery

/**
 *  Optional. List of allowed tags. Tags are a set of predefined strings that
 *  describe the category that individual recommendation types belong to. User
 *  can specify zero or more tags in this field to indicate what categories of
 *  recommendations they want to receive. Current list of supported tags: -
 *  TREND
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedTag;

/**
 *  Optional. Language code of the client. If not set, the result will be in
 *  default language (English). This language code affects all fields prefixed
 *  with "localized". This should be set to ISO 639-1 country code. List of
 *  currently verified supported language code: en, fr, cs, da, de, es, it, nl,
 *  no, pl, pt, pt, fi, sv, vi, tr, th, ko, zh-CN, zh-TW, ja, id, hi
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The ID of the account to fetch recommendations for. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_GenerateRecommendationsResponse.
 *
 *  Generates recommendations for a merchant.
 *
 *  @param merchantId Required. The ID of the account to fetch recommendations
 *    for.
 *
 *  @return GTLRShoppingContentQuery_RecommendationsGenerate
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Reports an interaction on a recommendation for a merchant.
 *
 *  Method: content.recommendations.reportInteraction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RecommendationsReportInteraction : GTLRShoppingContentQuery

/** Required. The ID of the account that wants to report an interaction. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Reports an interaction on a recommendation for a merchant.
 *
 *  @param object The @c GTLRShoppingContent_ReportInteractionRequest to include
 *    in the query.
 *  @param merchantId Required. The ID of the account that wants to report an
 *    interaction.
 *
 *  @return GTLRShoppingContentQuery_RecommendationsReportInteraction
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReportInteractionRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Updates regional inventory for multiple products or regions in a single
 *  request.
 *
 *  Method: content.regionalinventory.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionalinventoryCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_RegionalinventoryCustomBatchResponse.
 *
 *  Updates regional inventory for multiple products or regions in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_RegionalinventoryCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_RegionalinventoryCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalinventoryCustomBatchRequest *)object;

@end

/**
 *  Updates the regional inventory of a product in your Merchant Center account.
 *  If a regional inventory with the same region ID already exists, this method
 *  updates that entry.
 *
 *  Method: content.regionalinventory.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionalinventoryInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update the regional inventory. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_RegionalInventory.
 *
 *  Updates the regional inventory of a product in your Merchant Center account.
 *  If a regional inventory with the same region ID already exists, this method
 *  updates that entry.
 *
 *  @param object The @c GTLRShoppingContent_RegionalInventory to include in the
 *    query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update the regional
 *    inventory.
 *
 *  @return GTLRShoppingContentQuery_RegionalinventoryInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Creates a region definition in your Merchant Center account.
 *
 *  Method: content.regions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsCreate : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to create region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to create. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Creates a region definition in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Region to include in the query.
 *  @param merchantId Required. The id of the merchant for which to create
 *    region definition.
 *
 *  @return GTLRShoppingContentQuery_RegionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes a region definition from your Merchant Center account.
 *
 *  Method: content.regions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsDelete : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to delete region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to delete. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a region definition from your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to delete
 *    region definition.
 *  @param regionId Required. The id of the region to delete.
 *
 *  @return GTLRShoppingContentQuery_RegionsDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId;

@end

/**
 *  Retrieves a region defined in your Merchant Center account.
 *
 *  Method: content.regions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsGet : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve region definition.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to retrieve. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Retrieves a region defined in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve
 *    region definition.
 *  @param regionId Required. The id of the region to retrieve.
 *
 *  @return GTLRShoppingContentQuery_RegionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId;

@end

/**
 *  Lists the regions in your Merchant Center account.
 *
 *  Method: content.regions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsList : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to list region definitions. */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of regions to return. The service may return fewer than
 *  this value. If unspecified, at most 50 rules will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListRegions` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListRegions` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListRegionsResponse.
 *
 *  Lists the regions in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to list region
 *    definitions.
 *
 *  @return GTLRShoppingContentQuery_RegionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates a region definition in your Merchant Center account.
 *
 *  Method: content.regions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsPatch : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to update region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to update. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Optional. The comma-separated field mask indicating the fields to update.
 *  Example: `"displayName,postalCodeArea.regionCode"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Updates a region definition in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Region to include in the query.
 *  @param merchantId Required. The id of the merchant for which to update
 *    region definition.
 *  @param regionId Required. The id of the region to update.
 *
 *  @return GTLRShoppingContentQuery_RegionsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId
                       regionId:(NSString *)regionId;

@end

/**
 *  Retrieves merchant performance metrics matching the search query and
 *  optionally segmented by selected dimensions.
 *
 *  Method: content.reports.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReportsSearch : GTLRShoppingContentQuery

/**
 *  Required. Id of the merchant making the call. Must be a standalone account
 *  or an MCA subaccount.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_SearchResponse.
 *
 *  Retrieves merchant performance metrics matching the search query and
 *  optionally segmented by selected dimensions.
 *
 *  @param object The @c GTLRShoppingContent_SearchRequest to include in the
 *    query.
 *  @param merchantId Required. Id of the merchant making the call. Must be a
 *    standalone account or an MCA subaccount.
 *
 *  @return GTLRShoppingContentQuery_ReportsSearch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_SearchRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Batches multiple return address related calls in a single request.
 *
 *  Method: content.returnaddress.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ReturnaddressCustomBatchResponse.
 *
 *  Batches multiple return address related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ReturnaddressCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnaddressCustomBatchRequest *)object;

@end

/**
 *  Deletes a return address for the given Merchant Center account.
 *
 *  Method: content.returnaddress.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressDelete : GTLRShoppingContentQuery

/**
 *  The Merchant Center account from which to delete the given return address.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return address ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnAddressId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a return address for the given Merchant Center account.
 *
 *  @param merchantId The Merchant Center account from which to delete the given
 *    return address.
 *  @param returnAddressId Return address ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId;

@end

/**
 *  Gets a return address of the Merchant Center account.
 *
 *  Method: content.returnaddress.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressGet : GTLRShoppingContentQuery

/** The Merchant Center account to get a return address for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return address ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnAddressId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnAddress.
 *
 *  Gets a return address of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to get a return address for.
 *  @param returnAddressId Return address ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId;

@end

/**
 *  Inserts a return address for the Merchant Center account.
 *
 *  Method: content.returnaddress.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressInsert : GTLRShoppingContentQuery

/** The Merchant Center account to insert a return address for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnAddress.
 *
 *  Inserts a return address for the Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_ReturnAddress to include in the
 *    query.
 *  @param merchantId The Merchant Center account to insert a return address
 *    for.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnAddress *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the return addresses of the Merchant Center account.
 *
 *  Method: content.returnaddress.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressList : GTLRShoppingContentQuery

/**
 *  List only return addresses applicable to the given country of sale. When
 *  omitted, all return addresses are listed.
 */
@property(nonatomic, copy, nullable) NSString *country;

/** The maximum number of addresses in the response, used for paging. */
@property(nonatomic, assign) NSUInteger maxResults;

/** The Merchant Center account to list return addresses for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnaddressListResponse.
 *
 *  Lists the return addresses of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to list return addresses for.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Batches multiple return policy related calls in a single request.
 *
 *  Method: content.returnpolicy.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ReturnpolicyCustomBatchResponse.
 *
 *  Batches multiple return policy related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ReturnpolicyCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnpolicyCustomBatchRequest *)object;

@end

/**
 *  Deletes a return policy for the given Merchant Center account.
 *
 *  Method: content.returnpolicy.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyDelete : GTLRShoppingContentQuery

/**
 *  The Merchant Center account from which to delete the given return policy.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return policy ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a return policy for the given Merchant Center account.
 *
 *  @param merchantId The Merchant Center account from which to delete the given
 *    return policy.
 *  @param returnPolicyId Return policy ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Gets a return policy of the Merchant Center account.
 *
 *  Method: content.returnpolicy.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyGet : GTLRShoppingContentQuery

/** The Merchant Center account to get a return policy for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return policy ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicy.
 *
 *  Gets a return policy of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to get a return policy for.
 *  @param returnPolicyId Return policy ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Inserts a return policy for the Merchant Center account.
 *
 *  Method: content.returnpolicy.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyInsert : GTLRShoppingContentQuery

/** The Merchant Center account to insert a return policy for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicy.
 *
 *  Inserts a return policy for the Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicy to include in the
 *    query.
 *  @param merchantId The Merchant Center account to insert a return policy for.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicy *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the return policies of the Merchant Center account.
 *
 *  Method: content.returnpolicy.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyList : GTLRShoppingContentQuery

/** The Merchant Center account to list return policies for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnpolicyListResponse.
 *
 *  Lists the return policies of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to list return policies for.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyList
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Creates a new return policy.
 *
 *  Method: content.returnpolicyonline.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineCreate : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Creates a new return policy.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicyOnline to include in
 *    the query.
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes an existing return policy.
 *
 *  Method: content.returnpolicyonline.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineDelete : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to delete. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing return policy.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to delete.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Gets an existing return policy.
 *
 *  Method: content.returnpolicyonline.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineGet : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to retrieve. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Gets an existing return policy.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to retrieve.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Lists all existing return policies.
 *
 *  Method: content.returnpolicyonline.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineList : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ListReturnPolicyOnlineResponse.
 *
 *  Lists all existing return policies.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineList
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates an existing return policy.
 *
 *  Method: content.returnpolicyonline.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlinePatch : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to update. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Updates an existing return policy.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicyOnline to include in
 *    the query.
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to update.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlinePatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId
                 returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.shippingsettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsCustomBatchResponse.
 *
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_ShippingsettingsCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the shipping settings of the account.
 *
 *  Method: content.shippingsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Retrieves the shipping settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  Method: content.shippingsettings.getsupportedcarriers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers : GTLRShoppingContentQuery

/** The ID of the account for which to retrieve the supported carriers. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse.
 *
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    carriers.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves supported holidays for an account.
 *
 *  Method: content.shippingsettings.getsupportedholidays
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays : GTLRShoppingContentQuery

/** The ID of the account for which to retrieve the supported holidays. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedHolidaysResponse.
 *
 *  Retrieves supported holidays for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    holidays.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves supported pickup services for an account.
 *
 *  Method: content.shippingsettings.getsupportedpickupservices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve the supported pickup services.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedPickupServicesResponse.
 *
 *  Retrieves supported pickup services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    pickup services.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  Method: content.shippingsettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsList : GTLRShoppingContentQuery

/**
 *  The maximum number of shipping settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsListResponse.
 *
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the shipping settings of the account. Any fields that are not
 *  provided are deleted from the resource.
 *
 *  Method: content.shippingsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Updates the shipping settings of the account. Any fields that are not
 *  provided are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_ShippingSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves the status and review eligibility for the Shopping Ads program.
 *  Returns errors and warnings if they require action to resolve, will become
 *  disapprovals, or impact impressions. Use `accountstatuses` to view all
 *  issues for an account.
 *
 *  Method: content.shoppingadsprogram.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShoppingadsprogramGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShoppingAdsProgramStatus.
 *
 *  Retrieves the status and review eligibility for the Shopping Ads program.
 *  Returns errors and warnings if they require action to resolve, will become
 *  disapprovals, or impact impressions. Use `accountstatuses` to view all
 *  issues for an account.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_ShoppingadsprogramGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Requests a review of Shopping ads in a specific region. This method
 *  deprecated. Use the `MerchantSupportService` to view product and account
 *  issues and request a review.
 *
 *  Method: content.shoppingadsprogram.requestreview
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShoppingadsprogramRequestreview : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests a review of Shopping ads in a specific region. This method
 *  deprecated. Use the `MerchantSupportService` to view product and account
 *  issues and request a review.
 *
 *  @param object The @c GTLRShoppingContent_RequestReviewShoppingAdsRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_ShoppingadsprogramRequestreview
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewShoppingAdsRequest *)object
                     merchantId:(long long)merchantId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
