// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2.1)
// Description:
//   Manage your product listings and accounts for Google Shopping
// Documentation:
//   https://developers.google.com/shopping-content/v2/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRShoppingContentObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// orderBy

/**
 *  Return results in ascending order.
 *
 *  Value: "RETURN_CREATION_TIME_ASC"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentOrderByReturnCreationTimeAsc;
/**
 *  Return results in descending order.
 *
 *  Value: "RETURN_CREATION_TIME_DESC"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentOrderByReturnCreationTimeDesc;

// ----------------------------------------------------------------------------
// shipmentStates

/**
 *  Return shipments with `completed` state only.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatesCompleted;
/**
 *  Return shipments with `new` state only.
 *
 *  Value: "NEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatesNew;
/**
 *  Return shipments with `pending` state only.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatesPending;
/**
 *  Return shipments with `shipped` state only.
 *
 *  Value: "SHIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatesShipped;
/**
 *  Return shipments with `undeliverable` state only.
 *
 *  Value: "UNDELIVERABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatesUndeliverable;

// ----------------------------------------------------------------------------
// shipmentStatus

/**
 *  Return shipments with `inProgress` status only.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatusInProgress;
/**
 *  Return shipments with `new` status only.
 *
 *  Value: "NEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatusNew;
/**
 *  Return shipments with `processed` status only.
 *
 *  Value: "PROCESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentStatusProcessed;

// ----------------------------------------------------------------------------
// shipmentTypes

/**
 *  Return shipments with type `byMail` only.
 *
 *  Value: "BY_MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentTypesByMail;
/**
 *  Return shipments with type `contactCustomerSupport` only.
 *
 *  Value: "CONTACT_CUSTOMER_SUPPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentTypesContactCustomerSupport;
/**
 *  Return shipments with type `returnless` only.
 *
 *  Value: "RETURNLESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentShipmentTypesReturnless;

// ----------------------------------------------------------------------------
// statuses

/**
 *  Return orders with status `active`. The `active` status includes
 *  `pendingShipment` and `partiallyShipped` orders.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesActive;
/**
 *  Return orders with status `canceled`.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesCanceled;
/**
 *  Return orders with status `completed`. The `completed` status includes
 *  `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`,
 *  `returned`, and `canceled` orders.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesCompleted;
/**
 *  Return orders with status `delivered`.
 *
 *  Value: "DELIVERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesDelivered;
/**
 *  Return orders with status `inProgress`.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesInProgress;
/**
 *  Return orders with status `partiallyDelivered`.
 *
 *  Value: "PARTIALLY_DELIVERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyDelivered;
/**
 *  Return orders with status `partiallyReturned`.
 *
 *  Value: "PARTIALLY_RETURNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyReturned;
/**
 *  Return orders with status `partiallyShipped`.
 *
 *  Value: "PARTIALLY_SHIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesPartiallyShipped;
/**
 *  Return orders with status `pendingShipment`.
 *
 *  Value: "PENDING_SHIPMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesPendingShipment;
/**
 *  Return orders with status `returned`.
 *
 *  Value: "RETURNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesReturned;
/**
 *  Return orders with status `shipped`.
 *
 *  Value: "SHIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentStatusesShipped;

// ----------------------------------------------------------------------------
// templateName

/**
 *  Get `template1`.
 *
 *  Value: "TEMPLATE1"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1;
/**
 *  Get `template1A`.
 *
 *  Value: "TEMPLATE1A"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1a;
/**
 *  Get `template1B`.
 *
 *  Value: "TEMPLATE1B"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate1b;
/**
 *  Get `template2`.
 *
 *  Value: "TEMPLATE2"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate2;
/**
 *  Get `template3`.
 *
 *  Value: "TEMPLATE3"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate3;
/**
 *  Get `template4`.
 *
 *  Value: "TEMPLATE4"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentTemplateNameTemplate4;

// ----------------------------------------------------------------------------
// view

/**
 *  View is populated with Comparison Shopping Services fields.
 *
 *  Value: "CSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentViewCss;
/**
 *  Default. View is populated with Merchant Center fields.
 *
 *  Value: "MERCHANT"
 */
FOUNDATION_EXTERN NSString * const kGTLRShoppingContentViewMerchant;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Shopping Content query classes.
 */
@interface GTLRShoppingContentQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns information about the authenticated user.
 *
 *  Method: content.accounts.authinfo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsAuthinfo : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountsAuthInfoResponse.
 *
 *  Returns information about the authenticated user.
 *
 *  @return GTLRShoppingContentQuery_AccountsAuthinfo
 */
+ (instancetype)query;

@end

/**
 *  Claims the website of a Merchant Center sub-account.
 *
 *  Method: content.accounts.claimwebsite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsClaimwebsite : GTLRShoppingContentQuery

/** The ID of the account whose website is claimed. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Only available to selected merchants, for example multi-client accounts
 *  (MCAs) and their sub-accounts. When set to `True`, this option removes any
 *  existing claim on the requested website and replaces it with a claim from
 *  the account that makes the request.
 */
@property(nonatomic, assign) BOOL overwrite;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsClaimWebsiteResponse.
 *
 *  Claims the website of a Merchant Center sub-account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account whose website is claimed.
 *
 *  @return GTLRShoppingContentQuery_AccountsClaimwebsite
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Uploads credentials for the Merchant Center account. If credentials already
 *  exist for this Merchant Center account and purpose, this method updates
 *  them.
 *
 *  Method: content.accounts.credentials.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCredentialsCreate : GTLRShoppingContentQuery

/** Required. The merchant id of the account these credentials belong to. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountCredentials.
 *
 *  Uploads credentials for the Merchant Center account. If credentials already
 *  exist for this Merchant Center account and purpose, this method updates
 *  them.
 *
 *  @param object The @c GTLRShoppingContent_AccountCredentials to include in
 *    the query.
 *  @param accountId Required. The merchant id of the account these credentials
 *    belong to.
 *
 *  @return GTLRShoppingContentQuery_AccountsCredentialsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountCredentials *)object
                      accountId:(long long)accountId;

@end

/**
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  Method: content.accounts.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountsCustomBatchResponse.
 *
 *  Retrieves, inserts, updates, and deletes multiple Merchant Center
 *  (sub-)accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object;

@end

/**
 *  Deletes a Merchant Center sub-account.
 *
 *  Method: content.accounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsDelete : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  Option to delete sub-accounts with products. The default value is false.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  The ID of the managing account. This must be a multi-client account, and
 *  accountId must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a Merchant Center sub-account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account, and accountId must be the ID of a sub-account of
 *    this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves a Merchant Center account.
 *
 *  Method: content.accounts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsGet : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Controls which fields will be populated. Acceptable values are: "merchant"
 *  and "css". The default value is "merchant".
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentViewMerchant Default. View is populated with
 *        Merchant Center fields. (Value: "MERCHANT")
 *    @arg @c kGTLRShoppingContentViewCss View is populated with Comparison
 *        Shopping Services fields. (Value: "CSS")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Retrieves a Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Creates a Merchant Center sub-account.
 *
 *  Method: content.accounts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsInsert : GTLRShoppingContentQuery

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Creates a Merchant Center sub-account.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Creates a new label, not assigned to any account.
 *
 *  Method: content.accounts.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsCreate : GTLRShoppingContentQuery

/** Required. The id of the account this label belongs to. */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountLabel.
 *
 *  Creates a new label, not assigned to any account.
 *
 *  @param object The @c GTLRShoppingContent_AccountLabel to include in the
 *    query.
 *  @param accountId Required. The id of the account this label belongs to.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId;

@end

/**
 *  Deletes a label and removes it from all accounts to which it was assigned.
 *
 *  Method: content.accounts.labels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsDelete : GTLRShoppingContentQuery

/** Required. The id of the account that owns the label. */
@property(nonatomic, assign) long long accountId;

/** Required. The id of the label to delete. */
@property(nonatomic, assign) long long labelId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a label and removes it from all accounts to which it was assigned.
 *
 *  @param accountId Required. The id of the account that owns the label.
 *  @param labelId Required. The id of the label to delete.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                           labelId:(long long)labelId;

@end

/**
 *  Lists the labels assigned to an account.
 *
 *  Method: content.accounts.labels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsList : GTLRShoppingContentQuery

/** Required. The account id for whose labels are to be listed. */
@property(nonatomic, assign) long long accountId;

/**
 *  The maximum number of labels to return. The service may return fewer than
 *  this value. If unspecified, at most 50 labels will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListAccountLabels` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListAccountLabels` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListAccountLabelsResponse.
 *
 *  Lists the labels assigned to an account.
 *
 *  @param accountId Required. The account id for whose labels are to be listed.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates a label.
 *
 *  Method: content.accounts.labels.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLabelsPatch : GTLRShoppingContentQuery

/** Required. The id of the account this label belongs to. */
@property(nonatomic, assign) long long accountId;

/** Required. The id of the label to update. */
@property(nonatomic, assign) long long labelId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountLabel.
 *
 *  Updates a label.
 *
 *  @param object The @c GTLRShoppingContent_AccountLabel to include in the
 *    query.
 *  @param accountId Required. The id of the account this label belongs to.
 *  @param labelId Required. The id of the label to update.
 *
 *  @return GTLRShoppingContentQuery_AccountsLabelsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId
                        labelId:(long long)labelId;

@end

/**
 *  Performs an action on a link between two Merchant Center accounts, namely
 *  accountId and linkedAccountId.
 *
 *  Method: content.accounts.link
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsLink : GTLRShoppingContentQuery

/** The ID of the account that should be linked. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsLinkResponse.
 *
 *  Performs an action on a link between two Merchant Center accounts, namely
 *  accountId and linkedAccountId.
 *
 *  @param object The @c GTLRShoppingContent_AccountsLinkRequest to include in
 *    the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that should be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsLink
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsLinkRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsList : GTLRShoppingContentQuery

/**
 *  If view is set to "css", only return accounts that are assigned label with
 *  given ID.
 */
@property(nonatomic, assign) unsigned long long label;

/**
 *  The maximum number of accounts to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  If set, only the accounts with the given name (case sensitive) will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Controls which fields will be populated. Acceptable values are: "merchant"
 *  and "css". The default value is "merchant".
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentViewMerchant Default. View is populated with
 *        Merchant Center fields. (Value: "MERCHANT")
 *    @arg @c kGTLRShoppingContentViewCss View is populated with Comparison
 *        Shopping Services fields. (Value: "CSS")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListResponse.
 *
 *  Lists the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Returns the list of accounts linked to your Merchant Center account.
 *
 *  Method: content.accounts.listlinks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsListlinks : GTLRShoppingContentQuery

/** The ID of the account for which to list links. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The maximum number of links to return in the response, used for pagination.
 *  The minimum allowed value is 5 results per page. If provided value is lower
 *  than 5, it will be automatically increased to 5.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsListLinksResponse.
 *
 *  Returns the list of accounts linked to your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to list links.
 *
 *  @return GTLRShoppingContentQuery_AccountsListlinks
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Request verification code to start phone verification.
 *
 *  Method: content.accounts.requestphoneverification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsRequestphoneverification : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_RequestPhoneVerificationResponse.
 *
 *  Request verification code to start phone verification.
 *
 *  @param object The @c GTLRShoppingContent_RequestPhoneVerificationRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the managing account. If this
 *    parameter is not the same as accountId, then this account must be a
 *    multi-client account and accountId must be the ID of a sub-account of this
 *    account.
 *  @param accountId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsRequestphoneverification
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestPhoneVerificationRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId;

@end

/**
 *  Links return carrier to a merchant account.
 *
 *  Method: content.accounts.returncarrier.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierCreate : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountReturnCarrier.
 *
 *  Links return carrier to a merchant account.
 *
 *  @param object The @c GTLRShoppingContent_AccountReturnCarrier to include in
 *    the query.
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId;

@end

/**
 *  Delete a return carrier in the merchant account.
 *
 *  Method: content.accounts.returncarrier.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierDelete : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The Google-provided unique carrier ID, used to update the
 *  resource.
 */
@property(nonatomic, assign) long long carrierAccountId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a return carrier in the merchant account.
 *
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *  @param carrierAccountId Required. The Google-provided unique carrier ID,
 *    used to update the resource.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierDelete
 */
+ (instancetype)queryWithAccountId:(long long)accountId
                  carrierAccountId:(long long)carrierAccountId;

@end

/**
 *  Lists available return carriers in the merchant account.
 *
 *  Method: content.accounts.returncarrier.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierList : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Fetches a @c GTLRShoppingContent_ListAccountReturnCarrierResponse.
 *
 *  Lists available return carriers in the merchant account.
 *
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierList
 */
+ (instancetype)queryWithAccountId:(long long)accountId;

@end

/**
 *  Updates a return carrier in the merchant account.
 *
 *  Method: content.accounts.returncarrier.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsReturncarrierPatch : GTLRShoppingContentQuery

/**
 *  Required. The Merchant Center Account Id under which the Return Carrier is
 *  to be linked.
 */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The Google-provided unique carrier ID, used to update the
 *  resource.
 */
@property(nonatomic, assign) long long carrierAccountId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountReturnCarrier.
 *
 *  Updates a return carrier in the merchant account.
 *
 *  @param object The @c GTLRShoppingContent_AccountReturnCarrier to include in
 *    the query.
 *  @param accountId Required. The Merchant Center Account Id under which the
 *    Return Carrier is to be linked.
 *  @param carrierAccountId Required. The Google-provided unique carrier ID,
 *    used to update the resource.
 *
 *  @return GTLRShoppingContentQuery_AccountsReturncarrierPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId
               carrierAccountId:(long long)carrierAccountId;

@end

/**
 *  Retrieves multiple Merchant Center account statuses in a single request.
 *
 *  Method: content.accountstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesCustomBatchResponse.
 *
 *  Retrieves multiple Merchant Center account statuses in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccountstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a Merchant Center account. No itemLevelIssues are
 *  returned for multi-client accounts.
 *
 *  Method: content.accountstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesGet : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountStatus.
 *
 *  Retrieves the status of a Merchant Center account. No itemLevelIssues are
 *  returned for multi-client accounts.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accountstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountstatusesList : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of account statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  If set, only the accounts with the given name (case sensitive) will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccountstatusesListResponse.
 *
 *  Lists the statuses of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccountstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a Merchant Center account. Any fields that are not provided are
 *  deleted from the resource.
 *
 *  Method: content.accounts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdate : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Account.
 *
 *  Updates a Merchant Center account. Any fields that are not provided are
 *  deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_Account to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates labels that are assigned to the Merchant Center account by CSS user.
 *
 *  Method: content.accounts.updatelabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsUpdatelabels : GTLRShoppingContentQuery

/** The ID of the account whose labels are updated. */
@property(nonatomic, assign) unsigned long long accountId;

/** The ID of the managing account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountsUpdateLabelsResponse.
 *
 *  Updates labels that are assigned to the Merchant Center account by CSS user.
 *
 *  @param object The @c GTLRShoppingContent_AccountsUpdateLabelsRequest to
 *    include in the query.
 *  @param merchantId The ID of the managing account.
 *  @param accountId The ID of the account whose labels are updated.
 *
 *  @return GTLRShoppingContentQuery_AccountsUpdatelabels
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsUpdateLabelsRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Validates verification code to verify phone number for the account. If
 *  successful this will overwrite the value of
 *  `accounts.businessinformation.phoneNumber`. Only verified phone number will
 *  replace an existing verified phone number.
 *
 *  Method: content.accounts.verifyphonenumber
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccountsVerifyphonenumber : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long accountId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as accountId, then this account must be a multi-client account and accountId
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_VerifyPhoneNumberResponse.
 *
 *  Validates verification code to verify phone number for the account. If
 *  successful this will overwrite the value of
 *  `accounts.businessinformation.phoneNumber`. Only verified phone number will
 *  replace an existing verified phone number.
 *
 *  @param object The @c GTLRShoppingContent_VerifyPhoneNumberRequest to include
 *    in the query.
 *  @param merchantId Required. The ID of the managing account. If this
 *    parameter is not the same as accountId, then this account must be a
 *    multi-client account and accountId must be the ID of a sub-account of this
 *    account.
 *  @param accountId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_AccountsVerifyphonenumber
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_VerifyPhoneNumberRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId;

@end

/**
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  Method: content.accounttax.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxCustomBatchResponse.
 *
 *  Retrieves and updates tax settings of multiple accounts in a single request.
 *
 *  @param object The @c GTLRShoppingContent_AccounttaxCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object;

@end

/**
 *  Retrieves the tax settings of the account.
 *
 *  Method: content.accounttax.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxGet : GTLRShoppingContentQuery

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Retrieves the tax settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.accounttax.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxList : GTLRShoppingContentQuery

/**
 *  The maximum number of tax settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_AccounttaxListResponse.
 *
 *  Lists the tax settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the tax settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  Method: content.accounttax.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_AccounttaxUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get/update account tax settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_AccountTax.
 *
 *  Updates the tax settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_AccountTax to include in the query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update account tax
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_AccounttaxUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Reactivates the BoG program in your Merchant Center account. Moves the
 *  program to the active state when allowed, for example, when paused. This
 *  method is only available to selected merchants.
 *
 *  Method: content.buyongoogleprograms.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsActivate : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Reactivates the BoG program in your Merchant Center account. Moves the
 *  program to the active state when allowed, for example, when paused. This
 *  method is only available to selected merchants.
 *
 *  @param object The @c GTLRShoppingContent_ActivateBuyOnGoogleProgramRequest
 *    to include in the query.
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsActivate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ActivateBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode;

@end

/**
 *  Retrieves a status of the BoG program for your Merchant Center account.
 *
 *  Method: content.buyongoogleprograms.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The Program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Fetches a @c GTLRShoppingContent_BuyOnGoogleProgramStatus.
 *
 *  Retrieves a status of the BoG program for your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The Program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                         regionCode:(NSString *)regionCode;

@end

/**
 *  Onboards the BoG program in your Merchant Center account. By using this
 *  method, you agree to the [Terms of
 *  Service](https://merchants.google.com/mc/termsofservice/transactions/US/latest).
 *  Calling this method is only possible if the authenticated account is the
 *  same as the merchant id in the request. Calling this method multiple times
 *  will only accept Terms of Service if the latest version is not currently
 *  signed.
 *
 *  Method: content.buyongoogleprograms.onboard
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsOnboard : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Onboards the BoG program in your Merchant Center account. By using this
 *  method, you agree to the [Terms of
 *  Service](https://merchants.google.com/mc/termsofservice/transactions/US/latest).
 *  Calling this method is only possible if the authenticated account is the
 *  same as the merchant id in the request. Calling this method multiple times
 *  will only accept Terms of Service if the latest version is not currently
 *  signed.
 *
 *  @param object The @c GTLRShoppingContent_OnboardBuyOnGoogleProgramRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsOnboard
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OnboardBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode;

@end

/**
 *  Updates the status of the BoG program for your Merchant Center account.
 *
 *  Method: content.buyongoogleprograms.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsPatch : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The list of fields to update. If the update mask is not provided, then all
 *  the fields set in buyOnGoogleProgramStatus will be updated. Clearing fields
 *  is only possible if update mask is provided.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_BuyOnGoogleProgramStatus.
 *
 *  Updates the status of the BoG program for your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_BuyOnGoogleProgramStatus to include
 *    in the query.
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_BuyOnGoogleProgramStatus *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode;

@end

/**
 *  Pauses the BoG program in your Merchant Center account. This method is only
 *  available to selected merchants.
 *
 *  Method: content.buyongoogleprograms.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsPause : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Pauses the BoG program in your Merchant Center account. This method is only
 *  available to selected merchants.
 *
 *  @param object The @c GTLRShoppingContent_PauseBuyOnGoogleProgramRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsPause
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PauseBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode;

@end

/**
 *  Requests review and then activates the BoG program in your Merchant Center
 *  account for the first time. Moves the program to the REVIEW_PENDING state.
 *  This method is only available to selected merchants.
 *
 *  Method: content.buyongoogleprograms.requestreview
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_BuyongoogleprogramsRequestreview : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The program region code [ISO 3166-1
 *  alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *  US is available.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests review and then activates the BoG program in your Merchant Center
 *  account for the first time. Moves the program to the REVIEW_PENDING state.
 *  This method is only available to selected merchants.
 *
 *  @param object The @c
 *    GTLRShoppingContent_RequestReviewBuyOnGoogleProgramRequest to include in
 *    the query.
 *  @param merchantId Required. The ID of the account.
 *  @param regionCode Required. The program region code [ISO 3166-1
 *    alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only
 *    US is available.
 *
 *  @return GTLRShoppingContentQuery_BuyongoogleprogramsRequestreview
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode;

@end

/**
 *  Uploads a collection to your Merchant Center account. If a collection with
 *  the same collectionId already exists, this method updates that entry. In
 *  each update, the collection is completely replaced by the fields in the body
 *  of the update request.
 *
 *  Method: content.collections.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsCreate : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Collection.
 *
 *  Uploads a collection to your Merchant Center account. If a collection with
 *  the same collectionId already exists, this method updates that entry. In
 *  each update, the collection is completely replaced by the fields in the body
 *  of the update request.
 *
 *  @param object The @c GTLRShoppingContent_Collection to include in the query.
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Collection *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes a collection from your Merchant Center account.
 *
 *  Method: content.collections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsDelete : GTLRShoppingContentQuery

/**
 *  Required. The collectionId of the collection. CollectionId is the same as
 *  the REST ID of the collection.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The collectionId of the collection.
 *    CollectionId is the same as the REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionsDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Retrieves a collection from your Merchant Center account.
 *
 *  Method: content.collections.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsGet : GTLRShoppingContentQuery

/** Required. The REST ID of the collection. */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Collection.
 *
 *  Retrieves a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Lists the collections in your Merchant Center account. The response might
 *  contain fewer items than specified by page_size. Rely on next_page_token to
 *  determine if there are more items to be requested.
 *
 *  Method: content.collections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionsList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of collections to return in the response, used for
 *  paging. Defaults to 50; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCollectionsResponse.
 *
 *  Lists the collections in your Merchant Center account. The response might
 *  contain fewer items than specified by page_size. Rely on next_page_token to
 *  determine if there are more items to be requested.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Gets the status of a collection from your Merchant Center account.
 *
 *  Method: content.collectionstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionstatusesGet : GTLRShoppingContentQuery

/**
 *  Required. The collectionId of the collection. CollectionId is the same as
 *  the REST ID of the collection.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_CollectionStatus.
 *
 *  Gets the status of a collection from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *  @param collectionId Required. The collectionId of the collection.
 *    CollectionId is the same as the REST ID of the collection.
 *
 *  @return GTLRShoppingContentQuery_CollectionstatusesGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId;

@end

/**
 *  Lists the statuses of the collections in your Merchant Center account.
 *
 *  Method: content.collectionstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CollectionstatusesList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that contains the collection. This account
 *  cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of collection statuses to return in the response, used
 *  for paging. Defaults to 50; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCollectionStatusesResponse.
 *
 *  Lists the statuses of the collections in your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_CollectionstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Retrieves a single CSS domain by ID.
 *
 *  Method: content.csses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesGet : GTLRShoppingContentQuery

/** Required. The ID of the CSS domain to return. */
@property(nonatomic, assign) long long cssDomainId;

/**
 *  Required. The ID of the managing account. If this parameter is not the same
 *  as [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and
 *  `cssDomainId` must be the ID of a CSS domain affiliated with this group.
 */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  Fetches a @c GTLRShoppingContent_Css.
 *
 *  Retrieves a single CSS domain by ID.
 *
 *  @param cssGroupId Required. The ID of the managing account. If this
 *    parameter is not the same as [cssDomainId](#cssDomainId), then this ID
 *    must be a CSS group ID and `cssDomainId` must be the ID of a CSS domain
 *    affiliated with this group.
 *  @param cssDomainId Required. The ID of the CSS domain to return.
 *
 *  @return GTLRShoppingContentQuery_CssesGet
 */
+ (instancetype)queryWithCssGroupId:(long long)cssGroupId
                        cssDomainId:(long long)cssDomainId;

@end

/**
 *  Lists CSS domains affiliated with a CSS group.
 *
 *  Method: content.csses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesList : GTLRShoppingContentQuery

/** Required. The CSS group ID of CSS domains to be listed. */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  The maximum number of CSS domains to return. The service may return fewer
 *  than this value. If unspecified, at most 50 CSS domains will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListCsses` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListCsses` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListCssesResponse.
 *
 *  Lists CSS domains affiliated with a CSS group.
 *
 *  @param cssGroupId Required. The CSS group ID of CSS domains to be listed.
 *
 *  @return GTLRShoppingContentQuery_CssesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCssGroupId:(long long)cssGroupId;

@end

/**
 *  Updates labels that are assigned to a CSS domain by its CSS group.
 *
 *  Method: content.csses.updatelabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_CssesUpdatelabels : GTLRShoppingContentQuery

/** Required. The ID of the updated CSS domain. */
@property(nonatomic, assign) long long cssDomainId;

/** Required. The CSS group ID of the updated CSS domain. */
@property(nonatomic, assign) long long cssGroupId;

/**
 *  Fetches a @c GTLRShoppingContent_Css.
 *
 *  Updates labels that are assigned to a CSS domain by its CSS group.
 *
 *  @param object The @c GTLRShoppingContent_LabelIds to include in the query.
 *  @param cssGroupId Required. The CSS group ID of the updated CSS domain.
 *  @param cssDomainId Required. The ID of the updated CSS domain.
 *
 *  @return GTLRShoppingContentQuery_CssesUpdatelabels
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LabelIds *)object
                     cssGroupId:(long long)cssGroupId
                    cssDomainId:(long long)cssDomainId;

@end

/**
 *  Deletes, fetches, gets, inserts and updates multiple datafeeds in a single
 *  request.
 *
 *  Method: content.datafeeds.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsCustomBatchResponse.
 *
 *  Deletes, fetches, gets, inserts and updates multiple datafeeds in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object;

@end

/**
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsDelete : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Invokes a fetch for the datafeed in your Merchant Center account. If you
 *  need to call this method more than once per day, we recommend you use the
 *  [Products
 *  service](https://developers.google.com/shopping-content/reference/rest/v2.1/products)
 *  to update your product data.
 *
 *  Method: content.datafeeds.fetchnow
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsFetchnow : GTLRShoppingContentQuery

/** The ID of the datafeed to be fetched. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsFetchNowResponse.
 *
 *  Invokes a fetch for the datafeed in your Merchant Center account. If you
 *  need to call this method more than once per day, we recommend you use the
 *  [Products
 *  service](https://developers.google.com/shopping-content/reference/rest/v2.1/products)
 *  to update your product data.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed to be fetched.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsFetchnow
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  Method: content.datafeeds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsGet : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Retrieves a datafeed configuration from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  Method: content.datafeeds.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Registers a datafeed configuration with your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeeds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedsListResponse.
 *
 *  Lists the configurations for datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets multiple Merchant Center datafeed statuses in a single request.
 *
 *  Method: content.datafeedstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesCustomBatchResponse.
 *
 *  Gets multiple Merchant Center datafeed statuses in a single request.
 *
 *  @param object The @c GTLRShoppingContent_DatafeedstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object;

@end

/**
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesGet : GTLRShoppingContentQuery

/**
 *  Deprecated. Use `feedLabel` instead. The country to get the datafeed status
 *  for. If this parameter is provided then `language` must also be provided.
 *  Note that this parameter is required for feeds targeting multiple countries
 *  and languages, since a feed may have a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *country;

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The feed label to get the datafeed status for. If this parameter is provided
 *  then `language` must also be provided. Note that this parameter is required
 *  for feeds targeting multiple countries and languages, since a feed may have
 *  a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *feedLabel;

/**
 *  The language to get the datafeed status for. If this parameter is provided
 *  then `country` must also be provided. Note that this parameter is required
 *  for feeds targeting multiple countries and languages, since a feed may have
 *  a different status for each target.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedStatus.
 *
 *  Retrieves the status of a datafeed from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  Method: content.datafeedstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedstatusesList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the datafeeds. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_DatafeedstatusesListResponse.
 *
 *  Lists the statuses of the datafeeds in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the datafeeds. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_DatafeedstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates a datafeed configuration of your Merchant Center account. Any fields
 *  that are not provided are deleted from the resource.
 *
 *  Method: content.datafeeds.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_DatafeedsUpdate : GTLRShoppingContentQuery

/** The ID of the datafeed. */
@property(nonatomic, assign) unsigned long long datafeedId;

/**
 *  The ID of the account that manages the datafeed. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Datafeed.
 *
 *  Updates a datafeed configuration of your Merchant Center account. Any fields
 *  that are not provided are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_Datafeed to include in the query.
 *  @param merchantId The ID of the account that manages the datafeed. This
 *    account cannot be a multi-client account.
 *  @param datafeedId The ID of the datafeed.
 *
 *  @return GTLRShoppingContentQuery_DatafeedsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId;

@end

/**
 *  Retrieves the status and review eligibility for the free listing program.
 *
 *  Method: content.freelistingsprogram.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_FreeListingsProgramStatus.
 *
 *  Retrieves the status and review eligibility for the free listing program.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Requests a review of free listings in a specific region. This method is only
 *  available to selected merchants.
 *
 *  Method: content.freelistingsprogram.requestreview
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_FreelistingsprogramRequestreview : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests a review of free listings in a specific region. This method is only
 *  available to selected merchants.
 *
 *  @param object The @c GTLRShoppingContent_RequestReviewFreeListingsRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_FreelistingsprogramRequestreview
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewFreeListingsRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.liasettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsCustomBatchResponse.
 *
 *  Retrieves and/or updates the LIA settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_LiasettingsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiasettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the LIA settings of the account.
 *
 *  Method: content.liasettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Retrieves the LIA settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves the list of accessible Business Profiles.
 *
 *  Method: content.liasettings.getaccessiblegmbaccounts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve accessible Business Profiles.
 */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsGetAccessibleGmbAccountsResponse.
 *
 *  Retrieves the list of accessible Business Profiles.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Business Profiles.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  Method: content.liasettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsList : GTLRShoppingContentQuery

/**
 *  The maximum number of LIA settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListResponse.
 *
 *  Lists the LIA settings of the sub-accounts in your Merchant Center account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  Method: content.liasettings.listposdataproviders
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsListposdataproviders : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsListPosDataProvidersResponse.
 *
 *  Retrieves the list of POS data providers that have active settings for the
 *  all eiligible countries.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsListposdataproviders
 */
+ (instancetype)query;

@end

/**
 *  Requests access to a specified Business Profile.
 *
 *  Method: content.liasettings.requestgmbaccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestgmbaccess : GTLRShoppingContentQuery

/** The ID of the account for which Business Profile access is requested. */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the Business Profile. */
@property(nonatomic, copy, nullable) NSString *gmbEmail;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsRequestGmbAccessResponse.
 *
 *  Requests access to a specified Business Profile.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which Business Profile access is
 *    requested.
 *  @param gmbEmail The email of the Business Profile.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestgmbaccess
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                           gmbEmail:(NSString *)gmbEmail;

@end

/**
 *  Requests inventory validation for the specified country.
 *
 *  Method: content.liasettings.requestinventoryverification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsRequestinventoryverification : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which inventory validation is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsRequestInventoryVerificationResponse.
 *
 *  Requests inventory validation for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param country The country for which inventory validation is requested.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsRequestinventoryverification
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Sets the inventory verification contract for the specified country.
 *
 *  Method: content.liasettings.setinventoryverificationcontact
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The email of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/** The name of the inventory verification contact. */
@property(nonatomic, copy, nullable) NSString *contactName;

/** The country for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *country;

/** The language for which inventory verification is requested. */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_LiasettingsSetInventoryVerificationContactResponse.
 *
 *  Sets the inventory verification contract for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param country The country for which inventory verification is requested.
 *  @param language The language for which inventory verification is requested.
 *  @param contactName The name of the inventory verification contact.
 *  @param contactEmail The email of the inventory verification contact.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country
                           language:(NSString *)language
                        contactName:(NSString *)contactName
                       contactEmail:(NSString *)contactEmail;

@end

/**
 *  Sets the POS data provider for the specified country.
 *
 *  Method: content.liasettings.setposdataprovider
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsSetposdataprovider : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve accessible Business Profiles.
 */
@property(nonatomic, assign) unsigned long long accountId;

/** The country for which the POS data provider is selected. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of POS data provider. */
@property(nonatomic, assign) unsigned long long posDataProviderId;

/**
 *  The account ID by which this merchant is known to the POS data provider.
 */
@property(nonatomic, copy, nullable) NSString *posExternalAccountId;

/**
 *  Fetches a @c GTLRShoppingContent_LiasettingsSetPosDataProviderResponse.
 *
 *  Sets the POS data provider for the specified country.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to retrieve accessible
 *    Business Profiles.
 *  @param country The country for which the POS data provider is selected.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsSetposdataprovider
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country;

@end

/**
 *  Updates the LIA settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  Method: content.liasettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LiasettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get or update LIA settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_LiaSettings.
 *
 *  Updates the LIA settings of the account. Any fields that are not provided
 *  are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_LiaSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get or update LIA
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_LiasettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LiaSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Updates local inventory for multiple products or stores in a single request.
 *
 *  Method: content.localinventory.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LocalinventoryCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_LocalinventoryCustomBatchResponse.
 *
 *  Updates local inventory for multiple products or stores in a single request.
 *
 *  @param object The @c GTLRShoppingContent_LocalinventoryCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_LocalinventoryCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalinventoryCustomBatchRequest *)object;

@end

/**
 *  Updates the local inventory of a product in your Merchant Center account.
 *
 *  Method: content.localinventory.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_LocalinventoryInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update local inventory. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_LocalInventory.
 *
 *  Updates the local inventory of a product in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_LocalInventory to include in the
 *    query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update local
 *    inventory.
 *
 *  @return GTLRShoppingContentQuery_LocalinventoryInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Creates a charge invoice for a shipment group, and triggers a charge capture
 *  for orderinvoice enabled orders.
 *
 *  Method: content.orderinvoices.createchargeinvoice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceResponse.
 *
 *  Creates a charge invoice for a shipment group, and triggers a charge capture
 *  for orderinvoice enabled orders.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Creates a refund invoice for one or more shipment groups, and triggers a
 *  refund for orderinvoice enabled orders. This can only be used for line items
 *  that have previously been charged using `createChargeInvoice`. All amounts
 *  (except for the summary) are incremental with respect to the previous
 *  invoice.
 *
 *  Method: content.orderinvoices.createrefundinvoice
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceResponse.
 *
 *  Creates a refund invoice for one or more shipment groups, and triggers a
 *  refund for orderinvoice enabled orders. This can only be used for line items
 *  that have previously been charged using `createChargeInvoice`. All amounts
 *  (except for the summary) are incremental with respect to the previous
 *  invoice.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Retrieves a report for disbursements from your Merchant Center account.
 *
 *  Method: content.orderreports.listdisbursements
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreportsListdisbursements : GTLRShoppingContentQuery

/**
 *  The last date which disbursements occurred. In ISO 8601 format. Default:
 *  current date.
 */
@property(nonatomic, copy, nullable) NSString *disbursementEndDate;

/** The first date which disbursements occurred. In ISO 8601 format. */
@property(nonatomic, copy, nullable) NSString *disbursementStartDate;

/**
 *  The maximum number of disbursements to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreportsListDisbursementsResponse.
 *
 *  Retrieves a report for disbursements from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrderreportsListdisbursements
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves a list of transactions for a disbursement from your Merchant
 *  Center account.
 *
 *  Method: content.orderreports.listtransactions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreportsListtransactions : GTLRShoppingContentQuery

/** The Google-provided ID of the disbursement (found in Wallet). */
@property(nonatomic, copy, nullable) NSString *disbursementId;

/**
 *  The maximum number of disbursements to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The last date in which transaction occurred. In ISO 8601 format. Default:
 *  current date.
 */
@property(nonatomic, copy, nullable) NSString *transactionEndDate;

/** The first date in which transaction occurred. In ISO 8601 format. */
@property(nonatomic, copy, nullable) NSString *transactionStartDate;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreportsListTransactionsResponse.
 *
 *  Retrieves a list of transactions for a disbursement from your Merchant
 *  Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param disbursementId The Google-provided ID of the disbursement (found in
 *    Wallet).
 *
 *  @return GTLRShoppingContentQuery_OrderreportsListtransactions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     disbursementId:(NSString *)disbursementId;

@end

/**
 *  Acks an order return in your Merchant Center account.
 *
 *  Method: content.orderreturns.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsAcknowledge : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the return. */
@property(nonatomic, copy, nullable) NSString *returnId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreturnsAcknowledgeResponse.
 *
 *  Acks an order return in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_OrderreturnsAcknowledgeRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param returnId The ID of the return.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                       returnId:(NSString *)returnId;

@end

/**
 *  Create return in your Merchant Center account.
 *
 *  Method: content.orderreturns.createorderreturn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsCreateorderreturn : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreturnsCreateOrderReturnResponse.
 *
 *  Create return in your Merchant Center account.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrderreturnsCreateOrderReturnRequest to include in the
 *    query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsCreateorderreturn
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsCreateOrderReturnRequest *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves an order return from your Merchant Center account.
 *
 *  Method: content.orderreturns.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsGet : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Merchant order return ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnId;

/**
 *  Fetches a @c GTLRShoppingContent_MerchantOrderReturn.
 *
 *  Retrieves an order return from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param returnId Merchant order return ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                           returnId:(NSString *)returnId;

@end

/**
 *  Links a return shipping label to a return id. You can only create one return
 *  label per return id. Since the label is sent to the buyer, the linked return
 *  label cannot be updated or deleted. If you try to create multiple return
 *  shipping labels for a single return id, every create request except the
 *  first will fail.
 *
 *  Method: content.orderreturns.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsLabelsCreate : GTLRShoppingContentQuery

/** Required. The merchant the Return Shipping Label belongs to. */
@property(nonatomic, assign) long long merchantId;

/** Required. Provide the Google-generated merchant order return ID. */
@property(nonatomic, copy, nullable) NSString *returnId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnShippingLabel.
 *
 *  Links a return shipping label to a return id. You can only create one return
 *  label per return id. Since the label is sent to the buyer, the linked return
 *  label cannot be updated or deleted. If you try to create multiple return
 *  shipping labels for a single return id, every create request except the
 *  first will fail.
 *
 *  @param object The @c GTLRShoppingContent_ReturnShippingLabel to include in
 *    the query.
 *  @param merchantId Required. The merchant the Return Shipping Label belongs
 *    to.
 *  @param returnId Required. Provide the Google-generated merchant order return
 *    ID.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsLabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnShippingLabel *)object
                     merchantId:(long long)merchantId
                       returnId:(NSString *)returnId;

@end

/**
 *  Lists order returns in your Merchant Center account.
 *
 *  Method: content.orderreturns.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsList : GTLRShoppingContentQuery

/**
 *  Obtains order returns that match the acknowledgement status. When set to
 *  true, obtains order returns that have been acknowledged. When false, obtains
 *  order returns that have not been acknowledged. When not provided, obtains
 *  order returns regardless of their acknowledgement status. We recommend using
 *  this filter set to `false`, in conjunction with the `acknowledge` call, such
 *  that only un-acknowledged order returns are returned.
 */
@property(nonatomic, assign) BOOL acknowledged;

/**
 *  Obtains order returns created before this date (inclusively), in ISO 8601
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *createdEndDate;

/**
 *  Obtains order returns created after this date (inclusively), in ISO 8601
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *createdStartDate;

/**
 *  Obtains order returns with the specified order ids. If this parameter is
 *  provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus,
 *  shipmentState and acknowledged parameters must be not set. Note: if
 *  googleOrderId and shipmentTrackingNumber parameters are provided, the
 *  obtained results will include all order returns that either match the
 *  specified order id or the specified tracking number.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googleOrderIds;

/**
 *  The maximum number of order returns to return in the response, used for
 *  paging. The default value is 25 returns per page, and the maximum allowed
 *  value is 250 returns per page.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Return the results in the specified order.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentOrderByReturnCreationTimeDesc Return results
 *        in descending order. (Value: "RETURN_CREATION_TIME_DESC")
 *    @arg @c kGTLRShoppingContentOrderByReturnCreationTimeAsc Return results in
 *        ascending order. (Value: "RETURN_CREATION_TIME_ASC")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Obtains order returns that match any shipment state provided in this
 *  parameter. When this parameter is not provided, order returns are obtained
 *  regardless of their shipment states.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentShipmentStatesNew Return shipments with `new`
 *        state only. (Value: "NEW")
 *    @arg @c kGTLRShoppingContentShipmentStatesShipped Return shipments with
 *        `shipped` state only. (Value: "SHIPPED")
 *    @arg @c kGTLRShoppingContentShipmentStatesCompleted Return shipments with
 *        `completed` state only. (Value: "COMPLETED")
 *    @arg @c kGTLRShoppingContentShipmentStatesUndeliverable Return shipments
 *        with `undeliverable` state only. (Value: "UNDELIVERABLE")
 *    @arg @c kGTLRShoppingContentShipmentStatesPending Return shipments with
 *        `pending` state only. (Value: "PENDING")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *shipmentStates;

/**
 *  Obtains order returns that match any shipment status provided in this
 *  parameter. When this parameter is not provided, order returns are obtained
 *  regardless of their shipment statuses.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentShipmentStatusNew Return shipments with `new`
 *        status only. (Value: "NEW")
 *    @arg @c kGTLRShoppingContentShipmentStatusInProgress Return shipments with
 *        `inProgress` status only. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRShoppingContentShipmentStatusProcessed Return shipments with
 *        `processed` status only. (Value: "PROCESSED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *shipmentStatus;

/**
 *  Obtains order returns with the specified tracking numbers. If this parameter
 *  is provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus,
 *  shipmentState and acknowledged parameters must be not set. Note: if
 *  googleOrderId and shipmentTrackingNumber parameters are provided, the
 *  obtained results will include all order returns that either match the
 *  specified order id or the specified tracking number.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *shipmentTrackingNumbers;

/**
 *  Obtains order returns that match any shipment type provided in this
 *  parameter. When this parameter is not provided, order returns are obtained
 *  regardless of their shipment types.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentShipmentTypesByMail Return shipments with type
 *        `byMail` only. (Value: "BY_MAIL")
 *    @arg @c kGTLRShoppingContentShipmentTypesReturnless Return shipments with
 *        type `returnless` only. (Value: "RETURNLESS")
 *    @arg @c kGTLRShoppingContentShipmentTypesContactCustomerSupport Return
 *        shipments with type `contactCustomerSupport` only. (Value:
 *        "CONTACT_CUSTOMER_SUPPORT")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *shipmentTypes;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreturnsListResponse.
 *
 *  Lists order returns in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Processes return in your Merchant Center account.
 *
 *  Method: content.orderreturns.process
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrderreturnsProcess : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the return. */
@property(nonatomic, copy, nullable) NSString *returnId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderreturnsProcessResponse.
 *
 *  Processes return in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_OrderreturnsProcessRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param returnId The ID of the return.
 *
 *  @return GTLRShoppingContentQuery_OrderreturnsProcess
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsProcessRequest *)object
                     merchantId:(unsigned long long)merchantId
                       returnId:(NSString *)returnId;

@end

/**
 *  Marks an order as acknowledged.
 *
 *  Method: content.orders.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAcknowledge : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAcknowledgeResponse.
 *
 *  Marks an order as acknowledged.
 *
 *  @param object The @c GTLRShoppingContent_OrdersAcknowledgeRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Moves a test order from state "`inProgress`" to state
 *  "`pendingShipment`".
 *
 *  Method: content.orders.advancetestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersAdvancetestorder : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the test order to modify. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersAdvanceTestOrderResponse.
 *
 *  Sandbox only. Moves a test order from state "`inProgress`" to state
 *  "`pendingShipment`".
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the test order to modify.
 *
 *  @return GTLRShoppingContentQuery_OrdersAdvancetestorder
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Cancels all line items in an order, making a full refund.
 *
 *  Method: content.orders.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancel : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to cancel. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelResponse.
 *
 *  Cancels all line items in an order, making a full refund.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order to cancel.
 *
 *  @return GTLRShoppingContentQuery_OrdersCancel
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Cancels a line item, making a full refund.
 *
 *  Method: content.orders.cancellineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCancellineitem : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelLineItemResponse.
 *
 *  Cancels a line item, making a full refund.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCancelLineItemRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersCancellineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Cancels a test order for customer-initiated cancellation.
 *
 *  Method: content.orders.canceltestorderbycustomer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the test order to cancel. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCancelTestOrderByCustomerResponse.
 *
 *  Sandbox only. Cancels a test order for customer-initiated cancellation.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest to include in
 *    the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the test order to cancel.
 *
 *  @return GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Capture funds from the customer for the current order total. This method
 *  should be called after the merchant verifies that they are able and ready to
 *  start shipping the order. This method blocks until a response is received
 *  from the payment processsor. If this method succeeds, the merchant is
 *  guaranteed to receive funds for the order after shipment. If the request
 *  fails, it can be retried or the order may be cancelled. This method cannot
 *  be called after the entire order is already shipped. A rejected error code
 *  is returned when the payment service provider has declined the charge. This
 *  indicates a problem between the PSP and either the merchant's or customer's
 *  account. Sometimes this error will be resolved by the customer. We recommend
 *  retrying these errors once per day or cancelling the order with reason
 *  `failedToCaptureFunds` if the items cannot be held.
 *
 *  Method: content.orders.captureOrder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCaptureOrder : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that manages the order. This cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The ID of the Order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_CaptureOrderResponse.
 *
 *  Capture funds from the customer for the current order total. This method
 *  should be called after the merchant verifies that they are able and ready to
 *  start shipping the order. This method blocks until a response is received
 *  from the payment processsor. If this method succeeds, the merchant is
 *  guaranteed to receive funds for the order after shipment. If the request
 *  fails, it can be retried or the order may be cancelled. This method cannot
 *  be called after the entire order is already shipped. A rejected error code
 *  is returned when the payment service provider has declined the charge. This
 *  indicates a problem between the PSP and either the merchant's or customer's
 *  account. Sometimes this error will be resolved by the customer. We recommend
 *  retrying these errors once per day or cancelling the order with reason
 *  `failedToCaptureFunds` if the items cannot be held.
 *
 *  @param object The @c GTLRShoppingContent_CaptureOrderRequest to include in
 *    the query.
 *  @param merchantId Required. The ID of the account that manages the order.
 *    This cannot be a multi-client account.
 *  @param orderId Required. The ID of the Order.
 *
 *  @return GTLRShoppingContentQuery_OrdersCaptureOrder
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_CaptureOrderRequest *)object
                     merchantId:(long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sandbox only. Creates a test order.
 *
 *  Method: content.orders.createtestorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCreatetestorder : GTLRShoppingContentQuery

/**
 *  The ID of the account that should manage the order. This cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCreateTestOrderResponse.
 *
 *  Sandbox only. Creates a test order.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCreateTestOrderRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that should manage the order. This
 *    cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrdersCreatetestorder
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestOrderRequest *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Sandbox only. Creates a test return.
 *
 *  Method: content.orders.createtestreturn
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersCreatetestreturn : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersCreateTestReturnResponse.
 *
 *  Sandbox only. Creates a test return.
 *
 *  @param object The @c GTLRShoppingContent_OrdersCreateTestReturnRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersCreatetestreturn
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestReturnRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Retrieves an order from your Merchant Center account.
 *
 *  Method: content.orders.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGet : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_Order.
 *
 *  Retrieves an order from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId;

@end

/**
 *  Retrieves an order using merchant order ID.
 *
 *  Method: content.orders.getbymerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGetbymerchantorderid : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The merchant order ID to be looked for. */
@property(nonatomic, copy, nullable) NSString *merchantOrderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetByMerchantOrderIdResponse.
 *
 *  Retrieves an order using merchant order ID.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param merchantOrderId The merchant order ID to be looked for.
 *
 *  @return GTLRShoppingContentQuery_OrdersGetbymerchantorderid
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    merchantOrderId:(NSString *)merchantOrderId;

@end

/**
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox.
 *
 *  Method: content.orders.gettestordertemplate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersGettestordertemplate : GTLRShoppingContentQuery

/** The country of the template to retrieve. Defaults to "`US`". */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The ID of the account that should manage the order. This cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  The name of the template to retrieve.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Get `template1`. (Value:
 *        "TEMPLATE1")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Get `template2`. (Value:
 *        "TEMPLATE2")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Get `template1A`.
 *        (Value: "TEMPLATE1A")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Get `template1B`.
 *        (Value: "TEMPLATE1B")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate3 Get `template3`. (Value:
 *        "TEMPLATE3")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate4 Get `template4`. (Value:
 *        "TEMPLATE4")
 */
@property(nonatomic, copy, nullable) NSString *templateName;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersGetTestOrderTemplateResponse.
 *
 *  Sandbox only. Retrieves an order template that can be used to quickly create
 *  a new order in sandbox.
 *
 *  @param merchantId The ID of the account that should manage the order. This
 *    cannot be a multi-client account.
 *  @param templateName The name of the template to retrieve.
 *
 *  Likely values for @c templateName:
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1 Get `template1`. (Value:
 *        "TEMPLATE1")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate2 Get `template2`. (Value:
 *        "TEMPLATE2")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1a Get `template1A`.
 *        (Value: "TEMPLATE1A")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate1b Get `template1B`.
 *        (Value: "TEMPLATE1B")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate3 Get `template3`. (Value:
 *        "TEMPLATE3")
 *    @arg @c kGTLRShoppingContentTemplateNameTemplate4 Get `template4`. (Value:
 *        "TEMPLATE4")
 *
 *  @return GTLRShoppingContentQuery_OrdersGettestordertemplate
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       templateName:(NSString *)templateName;

@end

/**
 *  Deprecated. Notifies that item return and refund was handled directly by
 *  merchant outside of Google payments processing (for example, cash refund
 *  done in store). Note: We recommend calling the returnrefundlineitem method
 *  to refund in-store returns. We will issue the refund directly to the
 *  customer. This helps to prevent possible differences arising between
 *  merchant and Google transaction records. We also recommend having the point
 *  of sale system communicate with Google to ensure that customers do not
 *  receive a double refund by first refunding through Google then through an
 *  in-store return.
 *
 *  Method: content.orders.instorerefundlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersInstorerefundlineitem : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersInStoreRefundLineItemResponse.
 *
 *  Deprecated. Notifies that item return and refund was handled directly by
 *  merchant outside of Google payments processing (for example, cash refund
 *  done in store). Note: We recommend calling the returnrefundlineitem method
 *  to refund in-store returns. We will issue the refund directly to the
 *  customer. This helps to prevent possible differences arising between
 *  merchant and Google transaction records. We also recommend having the point
 *  of sale system communicate with Google to ensure that customers do not
 *  receive a double refund by first refunding through Google then through an
 *  in-store return.
 *
 *  @param object The @c GTLRShoppingContent_OrdersInStoreRefundLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersInstorerefundlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersInStoreRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Lists the orders in your Merchant Center account.
 *
 *  Method: content.orders.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersList : GTLRShoppingContentQuery

/**
 *  Obtains orders that match the acknowledgement status. When set to true,
 *  obtains orders that have been acknowledged. When false, obtains orders that
 *  have not been acknowledged. We recommend using this filter set to `false`,
 *  in conjunction with the `acknowledge` call, such that only un-acknowledged
 *  orders are returned.
 */
@property(nonatomic, assign) BOOL acknowledged;

/**
 *  The maximum number of orders to return in the response, used for paging. The
 *  default value is 25 orders per page, and the maximum allowed value is 250
 *  orders per page.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Order results by placement date in descending or ascending order. Acceptable
 *  values are: - placedDateAsc - placedDateDesc
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Obtains orders placed before this date (exclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateEnd;

/**
 *  Obtains orders placed after this date (inclusively), in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *placedDateStart;

/**
 *  Obtains orders that match any of the specified statuses. Note that `active`
 *  is a shortcut for `pendingShipment` and `partiallyShipped`, and `completed`
 *  is a shortcut for `shipped`, `partiallyDelivered`, `delivered`,
 *  `partiallyReturned`, `returned`, and `canceled`.
 *
 *  Likely values:
 *    @arg @c kGTLRShoppingContentStatusesActive Return orders with status
 *        `active`. The `active` status includes `pendingShipment` and
 *        `partiallyShipped` orders. (Value: "ACTIVE")
 *    @arg @c kGTLRShoppingContentStatusesCompleted Return orders with status
 *        `completed`. The `completed` status includes `shipped`,
 *        `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`,
 *        and `canceled` orders. (Value: "COMPLETED")
 *    @arg @c kGTLRShoppingContentStatusesCanceled Return orders with status
 *        `canceled`. (Value: "CANCELED")
 *    @arg @c kGTLRShoppingContentStatusesInProgress Return orders with status
 *        `inProgress`. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRShoppingContentStatusesPendingShipment Return orders with
 *        status `pendingShipment`. (Value: "PENDING_SHIPMENT")
 *    @arg @c kGTLRShoppingContentStatusesPartiallyShipped Return orders with
 *        status `partiallyShipped`. (Value: "PARTIALLY_SHIPPED")
 *    @arg @c kGTLRShoppingContentStatusesShipped Return orders with status
 *        `shipped`. (Value: "SHIPPED")
 *    @arg @c kGTLRShoppingContentStatusesPartiallyDelivered Return orders with
 *        status `partiallyDelivered`. (Value: "PARTIALLY_DELIVERED")
 *    @arg @c kGTLRShoppingContentStatusesDelivered Return orders with status
 *        `delivered`. (Value: "DELIVERED")
 *    @arg @c kGTLRShoppingContentStatusesPartiallyReturned Return orders with
 *        status `partiallyReturned`. (Value: "PARTIALLY_RETURNED")
 *    @arg @c kGTLRShoppingContentStatusesReturned Return orders with status
 *        `returned`. (Value: "RETURNED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *statuses;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersListResponse.
 *
 *  Lists the orders in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_OrdersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Issues a partial or total refund for items and shipment.
 *
 *  Method: content.orders.refunditem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersRefunditem : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to refund. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersRefundItemResponse.
 *
 *  Issues a partial or total refund for items and shipment.
 *
 *  @param object The @c GTLRShoppingContent_OrdersRefundItemRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order to refund.
 *
 *  @return GTLRShoppingContentQuery_OrdersRefunditem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRefundItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Issues a partial or total refund for an order.
 *
 *  Method: content.orders.refundorder
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersRefundorder : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order to refund. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersRefundOrderResponse.
 *
 *  Issues a partial or total refund for an order.
 *
 *  @param object The @c GTLRShoppingContent_OrdersRefundOrderRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order to refund.
 *
 *  @return GTLRShoppingContentQuery_OrdersRefundorder
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRefundOrderRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Rejects return on an line item.
 *
 *  Method: content.orders.rejectreturnlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersRejectreturnlineitem : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersRejectReturnLineItemResponse.
 *
 *  Rejects return on an line item.
 *
 *  @param object The @c GTLRShoppingContent_OrdersRejectReturnLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersRejectreturnlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRejectReturnLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Returns and refunds a line item. Note that this method can only be called on
 *  fully shipped orders. The Orderreturns API is the preferred way to handle
 *  returns after you receive a return from a customer. You can use
 *  Orderreturns.list or Orderreturns.get to search for the return, and then use
 *  Orderreturns.processreturn to issue the refund. If the return cannot be
 *  found, then we recommend using this API to issue a refund.
 *
 *  Method: content.orders.returnrefundlineitem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersReturnrefundlineitem : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersReturnRefundLineItemResponse.
 *
 *  Returns and refunds a line item. Note that this method can only be called on
 *  fully shipped orders. The Orderreturns API is the preferred way to handle
 *  returns after you receive a return from a customer. You can use
 *  Orderreturns.list or Orderreturns.get to search for the return, and then use
 *  Orderreturns.processreturn to issue the refund. If the return cannot be
 *  found, then we recommend using this API to issue a refund.
 *
 *  @param object The @c GTLRShoppingContent_OrdersReturnRefundLineItemRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersReturnrefundlineitem
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersReturnRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Sets (or overrides if it already exists) merchant provided annotations in
 *  the form of key-value pairs. A common use case would be to supply us with
 *  additional structured information about a line item that cannot be provided
 *  through other methods. Submitted key-value pairs can be retrieved as part of
 *  the orders resource.
 *
 *  Method: content.orders.setlineitemmetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersSetlineitemmetadata : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersSetLineItemMetadataResponse.
 *
 *  Sets (or overrides if it already exists) merchant provided annotations in
 *  the form of key-value pairs. A common use case would be to supply us with
 *  additional structured information about a line item that cannot be provided
 *  through other methods. Submitted key-value pairs can be retrieved as part of
 *  the orders resource.
 *
 *  @param object The @c GTLRShoppingContent_OrdersSetLineItemMetadataRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersSetlineitemmetadata
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersSetLineItemMetadataRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Marks line item(s) as shipped.
 *
 *  Method: content.orders.shiplineitems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersShiplineitems : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersShipLineItemsResponse.
 *
 *  Marks line item(s) as shipped.
 *
 *  @param object The @c GTLRShoppingContent_OrdersShipLineItemsRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersShiplineitems
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersShipLineItemsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates ship by and delivery by dates for a line item.
 *
 *  Method: content.orders.updatelineitemshippingdetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsResponse.
 *
 *  Updates ship by and delivery by dates for a line item.
 *
 *  @param object The @c
 *    GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest to include
 *    in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates the merchant order ID for a given order.
 *
 *  Method: content.orders.updatemerchantorderid
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdatemerchantorderid : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdResponse.
 *
 *  Updates the merchant order ID for a given order.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest
 *    to include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdatemerchantorderid
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Updates a shipment's status, carrier, and/or tracking ID.
 *
 *  Method: content.orders.updateshipment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdersUpdateshipment : GTLRShoppingContentQuery

/**
 *  The ID of the account that manages the order. This cannot be a multi-client
 *  account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the order. */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  Fetches a @c GTLRShoppingContent_OrdersUpdateShipmentResponse.
 *
 *  Updates a shipment's status, carrier, and/or tracking ID.
 *
 *  @param object The @c GTLRShoppingContent_OrdersUpdateShipmentRequest to
 *    include in the query.
 *  @param merchantId The ID of the account that manages the order. This cannot
 *    be a multi-client account.
 *  @param orderId The ID of the order.
 *
 *  @return GTLRShoppingContentQuery_OrdersUpdateshipment
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateShipmentRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId;

@end

/**
 *  Creates new order tracking signal.
 *
 *  Method: content.ordertrackingsignals.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_OrdertrackingsignalsCreate : GTLRShoppingContentQuery

/** The ID of the merchant for which the order signal is created. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_OrderTrackingSignal.
 *
 *  Creates new order tracking signal.
 *
 *  @param object The @c GTLRShoppingContent_OrderTrackingSignal to include in
 *    the query.
 *  @param merchantId The ID of the merchant for which the order signal is
 *    created.
 *
 *  @return GTLRShoppingContentQuery_OrdertrackingsignalsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderTrackingSignal *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Batches multiple POS-related calls in a single request.
 *
 *  Method: content.pos.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_PosCustomBatchResponse.
 *
 *  Batches multiple POS-related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_PosCustomBatchRequest to include in
 *    the query.
 *
 *  @return GTLRShoppingContentQuery_PosCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosCustomBatchRequest *)object;

@end

/**
 *  Deletes a store for the given merchant.
 *
 *  Method: content.pos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosDelete : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a store for the given merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Retrieves information about the given store.
 *
 *  Method: content.pos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosGet : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** A store code that is unique per merchant. */
@property(nonatomic, copy, nullable) NSString *storeCode;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Retrieves information about the given store.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *  @param storeCode A store code that is unique per merchant.
 *
 *  @return GTLRShoppingContentQuery_PosGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode;

@end

/**
 *  Creates a store for the given merchant.
 *
 *  Method: content.pos.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInsert : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosStore.
 *
 *  Creates a store for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosStore to include in the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosStore *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit inventory for the given merchant.
 *
 *  Method: content.pos.inventory
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosInventory : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosInventoryResponse.
 *
 *  Submit inventory for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosInventoryRequest to include in
 *    the query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosInventory
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosInventoryRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Lists the stores of the target merchant.
 *
 *  Method: content.pos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosList : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosListResponse.
 *
 *  Lists the stores of the target merchant.
 *
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosList
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Submit a sale event for the given merchant.
 *
 *  Method: content.pos.sale
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PosSale : GTLRShoppingContentQuery

/** The ID of the POS or inventory data provider. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The ID of the target merchant. */
@property(nonatomic, assign) unsigned long long targetMerchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PosSaleResponse.
 *
 *  Submit a sale event for the given merchant.
 *
 *  @param object The @c GTLRShoppingContent_PosSaleRequest to include in the
 *    query.
 *  @param merchantId The ID of the POS or inventory data provider.
 *  @param targetMerchantId The ID of the target merchant.
 *
 *  @return GTLRShoppingContentQuery_PosSale
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PosSaleRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId;

@end

/**
 *  Creates or updates the delivery time of a product.
 *
 *  Method: content.productdeliverytime.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeCreate : GTLRShoppingContentQuery

/**
 *  The Google merchant ID of the account that contains the product. This
 *  account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductDeliveryTime.
 *
 *  Creates or updates the delivery time of a product.
 *
 *  @param object The @c GTLRShoppingContent_ProductDeliveryTime to include in
 *    the query.
 *  @param merchantId The Google merchant ID of the account that contains the
 *    product. This account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductDeliveryTime *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes the delivery time of a product.
 *
 *  Method: content.productdeliverytime.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeDelete : GTLRShoppingContentQuery

/**
 *  Required. The Google merchant ID of the account that contains the product.
 *  This account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The Content API ID of the product, in the form
 *  `channel:contentLanguage:targetCountry:offerId`.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the delivery time of a product.
 *
 *  @param merchantId Required. The Google merchant ID of the account that
 *    contains the product. This account cannot be a multi-client account.
 *  @param productId Required. The Content API ID of the product, in the form
 *    `channel:contentLanguage:targetCountry:offerId`.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Gets `productDeliveryTime` by `productId`.
 *
 *  Method: content.productdeliverytime.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductdeliverytimeGet : GTLRShoppingContentQuery

/**
 *  Required. The Google merchant ID of the account that contains the product.
 *  This account cannot be a multi-client account.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Required. The Content API ID of the product, in the form
 *  `channel:contentLanguage:targetCountry:offerId`.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductDeliveryTime.
 *
 *  Gets `productDeliveryTime` by `productId`.
 *
 *  @param merchantId Required. The Google merchant ID of the account that
 *    contains the product. This account cannot be a multi-client account.
 *  @param productId Required. The Content API ID of the product, in the form
 *    `channel:contentLanguage:targetCountry:offerId`.
 *
 *  @return GTLRShoppingContentQuery_ProductdeliverytimeGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  Method: content.products.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ProductsCustomBatchResponse.
 *
 *  Retrieves, inserts, and deletes multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductsCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object;

@end

/**
 *  Deletes a product from your Merchant Center account.
 *
 *  Method: content.products.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsDelete : GTLRShoppingContentQuery

/**
 *  The Content API Supplemental Feed ID. If present then product deletion
 *  applies to the data in a supplemental feed. If absent, entire product will
 *  be deleted.
 */
@property(nonatomic, assign) unsigned long long feedId;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Retrieves a product from your Merchant Center account.
 *
 *  Method: content.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsGet : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Retrieves a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  Method: content.products.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsInsert : GTLRShoppingContentQuery

/**
 *  The Content API Supplemental Feed ID. If present then product insertion
 *  applies to the data in a supplemental feed.
 */
@property(nonatomic, assign) unsigned long long feedId;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Uploads a product to your Merchant Center account. If an item with the same
 *  channel, contentLanguage, offerId, and targetCountry already exists, this
 *  method updates that entry.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the products in your Merchant Center account. The response might
 *  contain fewer items than specified by maxResults. Rely on nextPageToken to
 *  determine if there are more items to be requested.
 *
 *  Method: content.products.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsList : GTLRShoppingContentQuery

/**
 *  The maximum number of products to return in the response, used for paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductsListResponse.
 *
 *  Lists the products in your Merchant Center account. The response might
 *  contain fewer items than specified by maxResults. Rely on nextPageToken to
 *  determine if there are more items to be requested.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Gets the statuses of multiple products in a single request.
 *
 *  Method: content.productstatuses.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesCustomBatchResponse.
 *
 *  Gets the statuses of multiple products in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ProductstatusesCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object;

@end

/**
 *  Gets the status of a product from your Merchant Center account.
 *
 *  Method: content.productstatuses.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesGet : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_ProductStatus.
 *
 *  Gets the status of a product from your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  Method: content.productstatuses.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesList : GTLRShoppingContentQuery

/**
 *  If set, only issues for the specified destinations are returned, otherwise
 *  only issues for the Shopping destination.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinations;

/**
 *  The maximum number of product statuses to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The ID of the account that contains the products. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ProductstatusesListResponse.
 *
 *  Lists the statuses of the products in your Merchant Center account.
 *
 *  @param merchantId The ID of the account that contains the products. This
 *    account cannot be a multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the metrics report for a given Repricing product.
 *
 *  Method: content.productstatuses.repricingreports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductstatusesRepricingreportsList : GTLRShoppingContentQuery

/**
 *  Gets Repricing reports on and before this date in the merchant's timezone.
 *  You can only retrieve data up to 7 days ago (default) or earlier. Format is
 *  YYYY-MM-DD.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/** Required. Id of the merchant who owns the Repricing rule. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Maximum number of days of reports to return. There can be more than one rule
 *  report returned per day. For example, if 3 rule types got applied to the
 *  same product within a 24-hour period, then a page_size of 1 will return 3
 *  rule reports. The page size defaults to 50 and values above 1000 are coerced
 *  to 1000. This service may return fewer days of reports than this value, for
 *  example, if the time between your start and end date is less than the page
 *  size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Id of the Repricing product. Also known as the
 *  [REST_ID](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
 */
@property(nonatomic, copy, nullable) NSString *productId;

/** Id of the Repricing rule. If specified, only gets this rule's reports. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Gets Repricing reports on and after this date in the merchant's timezone, up
 *  to one year ago. Do not use a start date later than 7 days ago (default).
 *  Format is YYYY-MM-DD.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  Fetches a @c GTLRShoppingContent_ListRepricingProductReportsResponse.
 *
 *  Lists the metrics report for a given Repricing product.
 *
 *  @param merchantId Required. Id of the merchant who owns the Repricing rule.
 *  @param productId Required. Id of the Repricing product. Also known as the
 *    [REST_ID](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.id)
 *
 *  @return GTLRShoppingContentQuery_ProductstatusesRepricingreportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId;

@end

/**
 *  Updates an existing product in your Merchant Center account. Only updates
 *  attributes provided in the request.
 *
 *  Method: content.products.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ProductsUpdate : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The comma-separated list of product attributes to be updated. Example:
 *  `"title,salePrice"`. Attributes specified in the update mask without a value
 *  specified in the body will be deleted from the product. *You must specify
 *  the update mask to delete attributes.* Only top-level product attributes can
 *  be updated. If not defined, product attributes with set values will be
 *  updated and other attributes will stay unchanged.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_Product.
 *
 *  Updates an existing product in your Merchant Center account. Only updates
 *  attributes provided in the request.
 *
 *  @param object The @c GTLRShoppingContent_Product to include in the query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update.
 *
 *  @return GTLRShoppingContentQuery_ProductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Inserts a promotion for your Merchant Center account. If the promotion
 *  already exists, then it updates the promotion instead. To [end or delete]
 *  (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion)
 *  a promotion update the time period of the promotion to a time that has
 *  already passed.
 *
 *  Method: content.promotions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PromotionsCreate : GTLRShoppingContentQuery

/** Required. The ID of the account that contains the collection. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Promotion.
 *
 *  Inserts a promotion for your Merchant Center account. If the promotion
 *  already exists, then it updates the promotion instead. To [end or delete]
 *  (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion)
 *  a promotion update the time period of the promotion to a time that has
 *  already passed.
 *
 *  @param object The @c GTLRShoppingContent_Promotion to include in the query.
 *  @param merchantId Required. The ID of the account that contains the
 *    collection.
 *
 *  @return GTLRShoppingContentQuery_PromotionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Promotion *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Retrieves a promotion from your Merchant Center account.
 *
 *  Method: content.promotions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PromotionsGet : GTLRShoppingContentQuery

/**
 *  Required. REST ID of the promotion to retrieve.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Required. The ID of the account that contains the collection. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_Promotion.
 *
 *  Retrieves a promotion from your Merchant Center account.
 *
 *  @param merchantId Required. The ID of the account that contains the
 *    collection.
 *  @param identifier Required. REST ID of the promotion to retrieve.
 *
 *  @return GTLRShoppingContentQuery_PromotionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                         identifier:(NSString *)identifier;

@end

/**
 *  Retrieves a Merchant Center account's pubsub notification settings.
 *
 *  Method: content.pubsubnotificationsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PubsubnotificationsettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get pubsub notification settings. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PubsubNotificationSettings.
 *
 *  Retrieves a Merchant Center account's pubsub notification settings.
 *
 *  @param merchantId The ID of the account for which to get pubsub notification
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_PubsubnotificationsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Register a Merchant Center account for pubsub notifications. Note that cloud
 *  topic name shouldn't be provided as part of the request.
 *
 *  Method: content.pubsubnotificationsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_PubsubNotificationSettings.
 *
 *  Register a Merchant Center account for pubsub notifications. Note that cloud
 *  topic name shouldn't be provided as part of the request.
 *
 *  @param object The @c GTLRShoppingContent_PubsubNotificationSettings to
 *    include in the query.
 *  @param merchantId The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_PubsubNotificationSettings *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the quota limit and quota usage per method for your Merchant Center
 *  account.
 *
 *  Method: content.quotas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_QuotasList : GTLRShoppingContentQuery

/**
 *  Required. The ID of the account that has quota. This account must be an
 *  admin.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of quotas to return in the response, used for paging.
 *  Defaults to 500; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListMethodQuotasResponse.
 *
 *  Lists the quota limit and quota usage per method for your Merchant Center
 *  account.
 *
 *  @param merchantId Required. The ID of the account that has quota. This
 *    account must be an admin.
 *
 *  @return GTLRShoppingContentQuery_QuotasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates regional inventory for multiple products or regions in a single
 *  request.
 *
 *  Method: content.regionalinventory.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionalinventoryCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_RegionalinventoryCustomBatchResponse.
 *
 *  Updates regional inventory for multiple products or regions in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_RegionalinventoryCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_RegionalinventoryCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalinventoryCustomBatchRequest *)object;

@end

/**
 *  Updates the regional inventory of a product in your Merchant Center account.
 *  If a regional inventory with the same region ID already exists, this method
 *  updates that entry.
 *
 *  Method: content.regionalinventory.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionalinventoryInsert : GTLRShoppingContentQuery

/**
 *  The ID of the account that contains the product. This account cannot be a
 *  multi-client account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** The REST ID of the product for which to update the regional inventory. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRShoppingContent_RegionalInventory.
 *
 *  Updates the regional inventory of a product in your Merchant Center account.
 *  If a regional inventory with the same region ID already exists, this method
 *  updates that entry.
 *
 *  @param object The @c GTLRShoppingContent_RegionalInventory to include in the
 *    query.
 *  @param merchantId The ID of the account that contains the product. This
 *    account cannot be a multi-client account.
 *  @param productId The REST ID of the product for which to update the regional
 *    inventory.
 *
 *  @return GTLRShoppingContentQuery_RegionalinventoryInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId;

@end

/**
 *  Creates a region definition in your Merchant Center account.
 *
 *  Method: content.regions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsCreate : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to create region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to create. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Creates a region definition in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Region to include in the query.
 *  @param merchantId Required. The id of the merchant for which to create
 *    region definition.
 *
 *  @return GTLRShoppingContentQuery_RegionsCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes a region definition from your Merchant Center account.
 *
 *  Method: content.regions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsDelete : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to delete region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to delete. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a region definition from your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to delete
 *    region definition.
 *  @param regionId Required. The id of the region to delete.
 *
 *  @return GTLRShoppingContentQuery_RegionsDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId;

@end

/**
 *  Retrieves a region defined in your Merchant Center account.
 *
 *  Method: content.regions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsGet : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve region definition.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to retrieve. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Retrieves a region defined in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve
 *    region definition.
 *  @param regionId Required. The id of the region to retrieve.
 *
 *  @return GTLRShoppingContentQuery_RegionsGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId;

@end

/**
 *  Lists the regions in your Merchant Center account.
 *
 *  Method: content.regions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsList : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to list region definitions. */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of regions to return. The service may return fewer than
 *  this value. If unspecified, at most 50 rules will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListRegions` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListRegions` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListRegionsResponse.
 *
 *  Lists the regions in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant for which to list region
 *    definitions.
 *
 *  @return GTLRShoppingContentQuery_RegionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates a region definition in your Merchant Center account.
 *
 *  Method: content.regions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RegionsPatch : GTLRShoppingContentQuery

/** Required. The id of the merchant for which to update region definition. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the region to update. */
@property(nonatomic, copy, nullable) NSString *regionId;

/**
 *  Optional. The comma-separated field mask indicating the fields to update.
 *  Example: `"displayName,postalCodeArea.regionCode"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRShoppingContent_Region.
 *
 *  Updates a region definition in your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_Region to include in the query.
 *  @param merchantId Required. The id of the merchant for which to update
 *    region definition.
 *  @param regionId Required. The id of the region to update.
 *
 *  @return GTLRShoppingContentQuery_RegionsPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId
                       regionId:(NSString *)regionId;

@end

/**
 *  Retrieves merchant performance mertrics matching the search query and
 *  optionally segmented by selected dimensions.
 *
 *  Method: content.reports.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReportsSearch : GTLRShoppingContentQuery

/**
 *  Required. Id of the merchant making the call. Must be a standalone account
 *  or an MCA subaccount.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_SearchResponse.
 *
 *  Retrieves merchant performance mertrics matching the search query and
 *  optionally segmented by selected dimensions.
 *
 *  @param object The @c GTLRShoppingContent_SearchRequest to include in the
 *    query.
 *  @param merchantId Required. Id of the merchant making the call. Must be a
 *    standalone account or an MCA subaccount.
 *
 *  @return GTLRShoppingContentQuery_ReportsSearch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_SearchRequest *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Creates a repricing rule for your Merchant Center account.
 *
 *  Method: content.repricingrules.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesCreate : GTLRShoppingContentQuery

/** Required. The id of the merchant who owns the repricing rule. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the rule to create. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Fetches a @c GTLRShoppingContent_RepricingRule.
 *
 *  Creates a repricing rule for your Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_RepricingRule to include in the
 *    query.
 *  @param merchantId Required. The id of the merchant who owns the repricing
 *    rule.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RepricingRule *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes a repricing rule in your Merchant Center account.
 *
 *  Method: content.repricingrules.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesDelete : GTLRShoppingContentQuery

/** Required. The id of the merchant who owns the repricing rule. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the rule to Delete. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a repricing rule in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant who owns the repricing
 *    rule.
 *  @param ruleId Required. The id of the rule to Delete.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId;

@end

/**
 *  Retrieves a repricing rule from your Merchant Center account.
 *
 *  Method: content.repricingrules.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesGet : GTLRShoppingContentQuery

/** Required. The id of the merchant who owns the repricing rule. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the rule to retrieve. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Fetches a @c GTLRShoppingContent_RepricingRule.
 *
 *  Retrieves a repricing rule from your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant who owns the repricing
 *    rule.
 *  @param ruleId Required. The id of the rule to retrieve.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId;

@end

/**
 *  Lists the repricing rules in your Merchant Center account.
 *
 *  Method: content.repricingrules.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesList : GTLRShoppingContentQuery

/**
 *  [CLDR country
 *  code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
 *  (e.g. "US"), used as a filter on repricing rules.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  The two-letter ISO 639-1 language code associated with the repricing rule,
 *  used as a filter.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The id of the merchant who owns the repricing rule. */
@property(nonatomic, assign) long long merchantId;

/**
 *  The maximum number of repricing rules to return. The service may return
 *  fewer than this value. If unspecified, at most 50 rules will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListRepricingRules` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListRepricingRules` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ListRepricingRulesResponse.
 *
 *  Lists the repricing rules in your Merchant Center account.
 *
 *  @param merchantId Required. The id of the merchant who owns the repricing
 *    rule.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates a repricing rule in your Merchant Center account. All mutable fields
 *  will be overwritten in each update request. In each update, you must provide
 *  all required mutable fields, or an error will be thrown. If you do not
 *  provide an optional field in the update request, if that field currently
 *  exists, it will be deleted from the rule.
 *
 *  Method: content.repricingrules.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesPatch : GTLRShoppingContentQuery

/** Required. The id of the merchant who owns the repricing rule. */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the rule to update. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Fetches a @c GTLRShoppingContent_RepricingRule.
 *
 *  Updates a repricing rule in your Merchant Center account. All mutable fields
 *  will be overwritten in each update request. In each update, you must provide
 *  all required mutable fields, or an error will be thrown. If you do not
 *  provide an optional field in the update request, if that field currently
 *  exists, it will be deleted from the rule.
 *
 *  @param object The @c GTLRShoppingContent_RepricingRule to include in the
 *    query.
 *  @param merchantId Required. The id of the merchant who owns the repricing
 *    rule.
 *  @param ruleId Required. The id of the rule to update.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesPatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RepricingRule *)object
                     merchantId:(long long)merchantId
                         ruleId:(NSString *)ruleId;

@end

/**
 *  Lists the metrics report for a given Repricing rule.
 *
 *  Method: content.repricingrules.repricingreports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_RepricingrulesRepricingreportsList : GTLRShoppingContentQuery

/**
 *  Gets Repricing reports on and before this date in the merchant's timezone.
 *  You can only retrieve data up to 7 days ago (default) or earlier. Format:
 *  YYYY-MM-DD.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/** Required. Id of the merchant who owns the Repricing rule. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Maximum number of daily reports to return. Each report includes data from a
 *  single 24-hour period. The page size defaults to 50 and values above 1000
 *  are coerced to 1000. This service may return fewer days than this value, for
 *  example, if the time between your start and end date is less than page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token (if provided) to retrieve the subsequent page. All other parameters
 *  must match the original call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Id of the Repricing rule. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Gets Repricing reports on and after this date in the merchant's timezone, up
 *  to one year ago. Do not use a start date later than 7 days ago (default).
 *  Format: YYYY-MM-DD.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  Fetches a @c GTLRShoppingContent_ListRepricingRuleReportsResponse.
 *
 *  Lists the metrics report for a given Repricing rule.
 *
 *  @param merchantId Required. Id of the merchant who owns the Repricing rule.
 *  @param ruleId Required. Id of the Repricing rule.
 *
 *  @return GTLRShoppingContentQuery_RepricingrulesRepricingreportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId;

@end

/**
 *  Batches multiple return address related calls in a single request.
 *
 *  Method: content.returnaddress.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ReturnaddressCustomBatchResponse.
 *
 *  Batches multiple return address related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ReturnaddressCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnaddressCustomBatchRequest *)object;

@end

/**
 *  Deletes a return address for the given Merchant Center account.
 *
 *  Method: content.returnaddress.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressDelete : GTLRShoppingContentQuery

/**
 *  The Merchant Center account from which to delete the given return address.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return address ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnAddressId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a return address for the given Merchant Center account.
 *
 *  @param merchantId The Merchant Center account from which to delete the given
 *    return address.
 *  @param returnAddressId Return address ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId;

@end

/**
 *  Gets a return address of the Merchant Center account.
 *
 *  Method: content.returnaddress.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressGet : GTLRShoppingContentQuery

/** The Merchant Center account to get a return address for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return address ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnAddressId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnAddress.
 *
 *  Gets a return address of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to get a return address for.
 *  @param returnAddressId Return address ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId;

@end

/**
 *  Inserts a return address for the Merchant Center account.
 *
 *  Method: content.returnaddress.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressInsert : GTLRShoppingContentQuery

/** The Merchant Center account to insert a return address for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnAddress.
 *
 *  Inserts a return address for the Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_ReturnAddress to include in the
 *    query.
 *  @param merchantId The Merchant Center account to insert a return address
 *    for.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnAddress *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the return addresses of the Merchant Center account.
 *
 *  Method: content.returnaddress.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnaddressList : GTLRShoppingContentQuery

/**
 *  List only return addresses applicable to the given country of sale. When
 *  omitted, all return addresses are listed.
 */
@property(nonatomic, copy, nullable) NSString *country;

/** The maximum number of addresses in the response, used for paging. */
@property(nonatomic, assign) NSUInteger maxResults;

/** The Merchant Center account to list return addresses for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnaddressListResponse.
 *
 *  Lists the return addresses of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to list return addresses for.
 *
 *  @return GTLRShoppingContentQuery_ReturnaddressList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Batches multiple return policy related calls in a single request.
 *
 *  Method: content.returnpolicy.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ReturnpolicyCustomBatchResponse.
 *
 *  Batches multiple return policy related calls in a single request.
 *
 *  @param object The @c GTLRShoppingContent_ReturnpolicyCustomBatchRequest to
 *    include in the query.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnpolicyCustomBatchRequest *)object;

@end

/**
 *  Deletes a return policy for the given Merchant Center account.
 *
 *  Method: content.returnpolicy.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyDelete : GTLRShoppingContentQuery

/**
 *  The Merchant Center account from which to delete the given return policy.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return policy ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a return policy for the given Merchant Center account.
 *
 *  @param merchantId The Merchant Center account from which to delete the given
 *    return policy.
 *  @param returnPolicyId Return policy ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyDelete
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Gets a return policy of the Merchant Center account.
 *
 *  Method: content.returnpolicy.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyGet : GTLRShoppingContentQuery

/** The Merchant Center account to get a return policy for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** Return policy ID generated by Google. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicy.
 *
 *  Gets a return policy of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to get a return policy for.
 *  @param returnPolicyId Return policy ID generated by Google.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Inserts a return policy for the Merchant Center account.
 *
 *  Method: content.returnpolicy.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyInsert : GTLRShoppingContentQuery

/** The Merchant Center account to insert a return policy for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicy.
 *
 *  Inserts a return policy for the Merchant Center account.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicy to include in the
 *    query.
 *  @param merchantId The Merchant Center account to insert a return policy for.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyInsert
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicy *)object
                     merchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the return policies of the Merchant Center account.
 *
 *  Method: content.returnpolicy.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyList : GTLRShoppingContentQuery

/** The Merchant Center account to list return policies for. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnpolicyListResponse.
 *
 *  Lists the return policies of the Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to list return policies for.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyList
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Creates a new return policy.
 *
 *  Method: content.returnpolicyonline.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineCreate : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Creates a new return policy.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicyOnline to include in
 *    the query.
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineCreate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId;

@end

/**
 *  Deletes an existing return policy.
 *
 *  Method: content.returnpolicyonline.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineDelete : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to delete. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an existing return policy.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to delete.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineDelete
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Gets an existing return policy.
 *
 *  Method: content.returnpolicyonline.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineGet : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to retrieve. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Gets an existing return policy.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to retrieve.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Lists all existing return policies.
 *
 *  Method: content.returnpolicyonline.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlineList : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ListReturnPolicyOnlineResponse.
 *
 *  Lists all existing return policies.
 *
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlineList
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Updates an existing return policy.
 *
 *  Method: content.returnpolicyonline.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ReturnpolicyonlinePatch : GTLRShoppingContentQuery

/**
 *  Required. The id of the merchant for which to retrieve the return policy
 *  online object.
 */
@property(nonatomic, assign) long long merchantId;

/** Required. The id of the return policy to update. */
@property(nonatomic, copy, nullable) NSString *returnPolicyId;

/**
 *  Fetches a @c GTLRShoppingContent_ReturnPolicyOnline.
 *
 *  Updates an existing return policy.
 *
 *  @param object The @c GTLRShoppingContent_ReturnPolicyOnline to include in
 *    the query.
 *  @param merchantId Required. The id of the merchant for which to retrieve the
 *    return policy online object.
 *  @param returnPolicyId Required. The id of the return policy to update.
 *
 *  @return GTLRShoppingContentQuery_ReturnpolicyonlinePatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId
                 returnPolicyId:(NSString *)returnPolicyId;

@end

/**
 *  Retrieves a settlement report from your Merchant Center account.
 *
 *  Method: content.settlementreports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_SettlementreportsGet : GTLRShoppingContentQuery

/** The Merchant Center account of the settlement report. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The Google-provided ID of the settlement. */
@property(nonatomic, copy, nullable) NSString *settlementId;

/**
 *  Fetches a @c GTLRShoppingContent_SettlementReport.
 *
 *  Retrieves a settlement report from your Merchant Center account.
 *
 *  @param merchantId The Merchant Center account of the settlement report.
 *  @param settlementId The Google-provided ID of the settlement.
 *
 *  @return GTLRShoppingContentQuery_SettlementreportsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       settlementId:(NSString *)settlementId;

@end

/**
 *  Retrieves a list of settlement reports from your Merchant Center account.
 *
 *  Method: content.settlementreports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_SettlementreportsList : GTLRShoppingContentQuery

/**
 *  The maximum number of settlements to return in the response, used for
 *  paging. The default value is 200 returns per page, and the maximum allowed
 *  value is 5000 returns per page.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The Merchant Center account to list settlements for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Obtains settlements which have transactions before this date (inclusively),
 *  in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *transferEndDate;

/**
 *  Obtains settlements which have transactions after this date (inclusively),
 *  in ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *transferStartDate;

/**
 *  Fetches a @c GTLRShoppingContent_SettlementreportsListResponse.
 *
 *  Retrieves a list of settlement reports from your Merchant Center account.
 *
 *  @param merchantId The Merchant Center account to list settlements for.
 *
 *  @return GTLRShoppingContentQuery_SettlementreportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves a list of transactions for the settlement.
 *
 *  Method: content.settlementtransactions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_SettlementtransactionsList : GTLRShoppingContentQuery

/**
 *  The maximum number of transactions to return in the response, used for
 *  paging. The default value is 200 transactions per page, and the maximum
 *  allowed value is 5000 transactions per page.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The Merchant Center account to list transactions for. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The Google-provided ID of the settlement. */
@property(nonatomic, copy, nullable) NSString *settlementId;

/**
 *  The list of transactions to return. If not set, all transactions will be
 *  returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *transactionIds;

/**
 *  Fetches a @c GTLRShoppingContent_SettlementtransactionsListResponse.
 *
 *  Retrieves a list of transactions for the settlement.
 *
 *  @param merchantId The Merchant Center account to list transactions for.
 *  @param settlementId The Google-provided ID of the settlement.
 *
 *  @return GTLRShoppingContentQuery_SettlementtransactionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       settlementId:(NSString *)settlementId;

@end

/**
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  Method: content.shippingsettings.custombatch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsCustombatch : GTLRShoppingContentQuery

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsCustomBatchResponse.
 *
 *  Retrieves and updates the shipping settings of multiple accounts in a single
 *  request.
 *
 *  @param object The @c GTLRShoppingContent_ShippingsettingsCustomBatchRequest
 *    to include in the query.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsCustombatch
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object;

@end

/**
 *  Retrieves the shipping settings of the account.
 *
 *  Method: content.shippingsettings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGet : GTLRShoppingContentQuery

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Retrieves the shipping settings of the account.
 *
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGet
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  Method: content.shippingsettings.getsupportedcarriers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers : GTLRShoppingContentQuery

/** The ID of the account for which to retrieve the supported carriers. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse.
 *
 *  Retrieves supported carriers and carrier services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    carriers.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves supported holidays for an account.
 *
 *  Method: content.shippingsettings.getsupportedholidays
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays : GTLRShoppingContentQuery

/** The ID of the account for which to retrieve the supported holidays. */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedHolidaysResponse.
 *
 *  Retrieves supported holidays for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    holidays.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Retrieves supported pickup services for an account.
 *
 *  Method: content.shippingsettings.getsupportedpickupservices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices : GTLRShoppingContentQuery

/**
 *  The ID of the account for which to retrieve the supported pickup services.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c
 *  GTLRShoppingContent_ShippingsettingsGetSupportedPickupServicesResponse.
 *
 *  Retrieves supported pickup services for an account.
 *
 *  @param merchantId The ID of the account for which to retrieve the supported
 *    pickup services.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  Method: content.shippingsettings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsList : GTLRShoppingContentQuery

/**
 *  The maximum number of shipping settings to return in the response, used for
 *  paging.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** The ID of the managing account. This must be a multi-client account. */
@property(nonatomic, assign) unsigned long long merchantId;

/** The token returned by the previous request. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingsettingsListResponse.
 *
 *  Lists the shipping settings of the sub-accounts in your Merchant Center
 *  account.
 *
 *  @param merchantId The ID of the managing account. This must be a
 *    multi-client account.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId;

@end

/**
 *  Updates the shipping settings of the account. Any fields that are not
 *  provided are deleted from the resource.
 *
 *  Method: content.shippingsettings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShippingsettingsUpdate : GTLRShoppingContentQuery

/** The ID of the account for which to get/update shipping settings. */
@property(nonatomic, assign) unsigned long long accountId;

/**
 *  The ID of the managing account. If this parameter is not the same as
 *  accountId, then this account must be a multi-client account and `accountId`
 *  must be the ID of a sub-account of this account.
 */
@property(nonatomic, assign) unsigned long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShippingSettings.
 *
 *  Updates the shipping settings of the account. Any fields that are not
 *  provided are deleted from the resource.
 *
 *  @param object The @c GTLRShoppingContent_ShippingSettings to include in the
 *    query.
 *  @param merchantId The ID of the managing account. If this parameter is not
 *    the same as accountId, then this account must be a multi-client account
 *    and `accountId` must be the ID of a sub-account of this account.
 *  @param accountId The ID of the account for which to get/update shipping
 *    settings.
 *
 *  @return GTLRShoppingContentQuery_ShippingsettingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId;

@end

/**
 *  Retrieves the status and review eligibility for the Shopping Ads program.
 *
 *  Method: content.shoppingadsprogram.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShoppingadsprogramGet : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Fetches a @c GTLRShoppingContent_ShoppingAdsProgramStatus.
 *
 *  Retrieves the status and review eligibility for the Shopping Ads program.
 *
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_ShoppingadsprogramGet
 */
+ (instancetype)queryWithMerchantId:(long long)merchantId;

@end

/**
 *  Requests a review of Shopping ads in a specific region. This method is only
 *  available to selected merchants.
 *
 *  Method: content.shoppingadsprogram.requestreview
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeShoppingContent
 */
@interface GTLRShoppingContentQuery_ShoppingadsprogramRequestreview : GTLRShoppingContentQuery

/** Required. The ID of the account. */
@property(nonatomic, assign) long long merchantId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Requests a review of Shopping ads in a specific region. This method is only
 *  available to selected merchants.
 *
 *  @param object The @c GTLRShoppingContent_RequestReviewShoppingAdsRequest to
 *    include in the query.
 *  @param merchantId Required. The ID of the account.
 *
 *  @return GTLRShoppingContentQuery_ShoppingadsprogramRequestreview
 */
+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewShoppingAdsRequest *)object
                     merchantId:(long long)merchantId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
