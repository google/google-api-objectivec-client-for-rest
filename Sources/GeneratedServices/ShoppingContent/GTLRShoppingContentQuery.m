// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Content API for Shopping (content/v2.1)
// Description:
//   Manage your product listings and accounts for Google Shopping
// Documentation:
//   https://developers.google.com/shopping-content/v2/

#import <GoogleAPIClientForREST/GTLRShoppingContentQuery.h>

// ----------------------------------------------------------------------------
// Constants

// orderBy
NSString * const kGTLRShoppingContentOrderByReturnCreationTimeAsc = @"RETURN_CREATION_TIME_ASC";
NSString * const kGTLRShoppingContentOrderByReturnCreationTimeDesc = @"RETURN_CREATION_TIME_DESC";

// shipmentStates
NSString * const kGTLRShoppingContentShipmentStatesCompleted   = @"COMPLETED";
NSString * const kGTLRShoppingContentShipmentStatesNew         = @"NEW";
NSString * const kGTLRShoppingContentShipmentStatesPending     = @"PENDING";
NSString * const kGTLRShoppingContentShipmentStatesShipped     = @"SHIPPED";
NSString * const kGTLRShoppingContentShipmentStatesUndeliverable = @"UNDELIVERABLE";

// shipmentStatus
NSString * const kGTLRShoppingContentShipmentStatusInProgress = @"IN_PROGRESS";
NSString * const kGTLRShoppingContentShipmentStatusNew        = @"NEW";
NSString * const kGTLRShoppingContentShipmentStatusProcessed  = @"PROCESSED";

// shipmentTypes
NSString * const kGTLRShoppingContentShipmentTypesByMail       = @"BY_MAIL";
NSString * const kGTLRShoppingContentShipmentTypesContactCustomerSupport = @"CONTACT_CUSTOMER_SUPPORT";
NSString * const kGTLRShoppingContentShipmentTypesReturnless   = @"RETURNLESS";

// statuses
NSString * const kGTLRShoppingContentStatusesActive            = @"ACTIVE";
NSString * const kGTLRShoppingContentStatusesCanceled          = @"CANCELED";
NSString * const kGTLRShoppingContentStatusesCompleted         = @"COMPLETED";
NSString * const kGTLRShoppingContentStatusesDelivered         = @"DELIVERED";
NSString * const kGTLRShoppingContentStatusesInProgress        = @"IN_PROGRESS";
NSString * const kGTLRShoppingContentStatusesPartiallyDelivered = @"PARTIALLY_DELIVERED";
NSString * const kGTLRShoppingContentStatusesPartiallyReturned = @"PARTIALLY_RETURNED";
NSString * const kGTLRShoppingContentStatusesPartiallyShipped  = @"PARTIALLY_SHIPPED";
NSString * const kGTLRShoppingContentStatusesPendingShipment   = @"PENDING_SHIPMENT";
NSString * const kGTLRShoppingContentStatusesReturned          = @"RETURNED";
NSString * const kGTLRShoppingContentStatusesShipped           = @"SHIPPED";

// templateName
NSString * const kGTLRShoppingContentTemplateNameTemplate1  = @"TEMPLATE1";
NSString * const kGTLRShoppingContentTemplateNameTemplate1a = @"TEMPLATE1A";
NSString * const kGTLRShoppingContentTemplateNameTemplate1b = @"TEMPLATE1B";
NSString * const kGTLRShoppingContentTemplateNameTemplate2  = @"TEMPLATE2";
NSString * const kGTLRShoppingContentTemplateNameTemplate3  = @"TEMPLATE3";
NSString * const kGTLRShoppingContentTemplateNameTemplate4  = @"TEMPLATE4";

// view
NSString * const kGTLRShoppingContentViewCss      = @"CSS";
NSString * const kGTLRShoppingContentViewMerchant = @"MERCHANT";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRShoppingContentQuery

@dynamic fields;

@end

@implementation GTLRShoppingContentQuery_AccountsAuthinfo

+ (instancetype)query {
  NSString *pathURITemplate = @"accounts/authinfo";
  GTLRShoppingContentQuery_AccountsAuthinfo *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRShoppingContent_AccountsAuthInfoResponse class];
  query.loggingName = @"content.accounts.authinfo";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsClaimwebsite

@dynamic accountId, merchantId, overwrite;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/claimwebsite";
  GTLRShoppingContentQuery_AccountsClaimwebsite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsClaimWebsiteResponse class];
  query.loggingName = @"content.accounts.claimwebsite";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsCredentialsCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountCredentials *)object
                      accountId:(long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/credentials";
  GTLRShoppingContentQuery_AccountsCredentialsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountCredentials class];
  query.loggingName = @"content.accounts.credentials.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"accounts/batch";
  GTLRShoppingContentQuery_AccountsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsCustomBatchResponse class];
  query.loggingName = @"content.accounts.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsDelete

@dynamic accountId, force, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.loggingName = @"content.accounts.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsGet

@dynamic accountId, merchantId, view;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounts";
  GTLRShoppingContentQuery_AccountsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLabelsCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/labels";
  GTLRShoppingContentQuery_AccountsLabelsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountLabel class];
  query.loggingName = @"content.accounts.labels.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLabelsDelete

@dynamic accountId, labelId;

+ (instancetype)queryWithAccountId:(long long)accountId
                           labelId:(long long)labelId {
  NSArray *pathParams = @[
    @"accountId", @"labelId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/labels/{labelId}";
  GTLRShoppingContentQuery_AccountsLabelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.labelId = labelId;
  query.loggingName = @"content.accounts.labels.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLabelsList

@dynamic accountId, pageSize, pageToken;

+ (instancetype)queryWithAccountId:(long long)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/labels";
  GTLRShoppingContentQuery_AccountsLabelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ListAccountLabelsResponse class];
  query.loggingName = @"content.accounts.labels.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLabelsPatch

@dynamic accountId, labelId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountLabel *)object
                      accountId:(long long)accountId
                        labelId:(long long)labelId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"labelId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/labels/{labelId}";
  GTLRShoppingContentQuery_AccountsLabelsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.labelId = labelId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountLabel class];
  query.loggingName = @"content.accounts.labels.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsLink

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsLinkRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/link";
  GTLRShoppingContentQuery_AccountsLink *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsLinkResponse class];
  query.loggingName = @"content.accounts.link";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsList

@dynamic label, maxResults, merchantId, name, pageToken, view;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounts";
  GTLRShoppingContentQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsListResponse class];
  query.loggingName = @"content.accounts.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsListlinks

@dynamic accountId, maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/listlinks";
  GTLRShoppingContentQuery_AccountsListlinks *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsListLinksResponse class];
  query.loggingName = @"content.accounts.listlinks";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsRequestphoneverification

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestPhoneVerificationRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/requestphoneverification";
  GTLRShoppingContentQuery_AccountsRequestphoneverification *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_RequestPhoneVerificationResponse class];
  query.loggingName = @"content.accounts.requestphoneverification";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsReturncarrierCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/returncarrier";
  GTLRShoppingContentQuery_AccountsReturncarrierCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountReturnCarrier class];
  query.loggingName = @"content.accounts.returncarrier.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsReturncarrierDelete

@dynamic accountId, carrierAccountId;

+ (instancetype)queryWithAccountId:(long long)accountId
                  carrierAccountId:(long long)carrierAccountId {
  NSArray *pathParams = @[
    @"accountId", @"carrierAccountId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/returncarrier/{carrierAccountId}";
  GTLRShoppingContentQuery_AccountsReturncarrierDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.carrierAccountId = carrierAccountId;
  query.loggingName = @"content.accounts.returncarrier.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsReturncarrierList

@dynamic accountId;

+ (instancetype)queryWithAccountId:(long long)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/returncarrier";
  GTLRShoppingContentQuery_AccountsReturncarrierList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ListAccountReturnCarrierResponse class];
  query.loggingName = @"content.accounts.returncarrier.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsReturncarrierPatch

@dynamic accountId, carrierAccountId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountReturnCarrier *)object
                      accountId:(long long)accountId
               carrierAccountId:(long long)carrierAccountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"carrierAccountId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/returncarrier/{carrierAccountId}";
  GTLRShoppingContentQuery_AccountsReturncarrierPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.carrierAccountId = carrierAccountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountReturnCarrier class];
  query.loggingName = @"content.accounts.returncarrier.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountstatusesCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"accountstatuses/batch";
  GTLRShoppingContentQuery_AccountstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccountstatusesCustomBatchResponse class];
  query.loggingName = @"content.accountstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesGet

@dynamic accountId, destinations, merchantId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accountstatuses/{accountId}";
  GTLRShoppingContentQuery_AccountstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountStatus class];
  query.loggingName = @"content.accountstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountstatusesList

@dynamic destinations, maxResults, merchantId, name, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accountstatuses";
  GTLRShoppingContentQuery_AccountstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountstatusesListResponse class];
  query.loggingName = @"content.accountstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Account *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}";
  GTLRShoppingContentQuery_AccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_Account class];
  query.loggingName = @"content.accounts.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsUpdatelabels

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountsUpdateLabelsRequest *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/updatelabels";
  GTLRShoppingContentQuery_AccountsUpdatelabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountsUpdateLabelsResponse class];
  query.loggingName = @"content.accounts.updatelabels";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccountsVerifyphonenumber

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_VerifyPhoneNumberRequest *)object
                     merchantId:(long long)merchantId
                      accountId:(long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounts/{accountId}/verifyphonenumber";
  GTLRShoppingContentQuery_AccountsVerifyphonenumber *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_VerifyPhoneNumberResponse class];
  query.loggingName = @"content.accounts.verifyphonenumber";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccounttaxCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"accounttax/batch";
  GTLRShoppingContentQuery_AccounttaxCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_AccounttaxCustomBatchResponse class];
  query.loggingName = @"content.accounttax.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounttax/{accountId}";
  GTLRShoppingContentQuery_AccounttaxGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountTax class];
  query.loggingName = @"content.accounttax.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/accounttax";
  GTLRShoppingContentQuery_AccounttaxList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_AccounttaxListResponse class];
  query.loggingName = @"content.accounttax.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_AccounttaxUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_AccountTax *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/accounttax/{accountId}";
  GTLRShoppingContentQuery_AccounttaxUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_AccountTax class];
  query.loggingName = @"content.accounttax.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsActivate

@dynamic merchantId, regionCode;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ActivateBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}/activate";
  GTLRShoppingContentQuery_BuyongoogleprogramsActivate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.loggingName = @"content.buyongoogleprograms.activate";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsGet

@dynamic merchantId, regionCode;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                         regionCode:(NSString *)regionCode {
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}";
  GTLRShoppingContentQuery_BuyongoogleprogramsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.expectedObjectClass = [GTLRShoppingContent_BuyOnGoogleProgramStatus class];
  query.loggingName = @"content.buyongoogleprograms.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsOnboard

@dynamic merchantId, regionCode;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OnboardBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}/onboard";
  GTLRShoppingContentQuery_BuyongoogleprogramsOnboard *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.loggingName = @"content.buyongoogleprograms.onboard";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsPatch

@dynamic merchantId, regionCode, updateMask;

+ (instancetype)queryWithObject:(GTLRShoppingContent_BuyOnGoogleProgramStatus *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}";
  GTLRShoppingContentQuery_BuyongoogleprogramsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.expectedObjectClass = [GTLRShoppingContent_BuyOnGoogleProgramStatus class];
  query.loggingName = @"content.buyongoogleprograms.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsPause

@dynamic merchantId, regionCode;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PauseBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}/pause";
  GTLRShoppingContentQuery_BuyongoogleprogramsPause *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.loggingName = @"content.buyongoogleprograms.pause";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_BuyongoogleprogramsRequestreview

@dynamic merchantId, regionCode;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewBuyOnGoogleProgramRequest *)object
                     merchantId:(long long)merchantId
                     regionCode:(NSString *)regionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionCode"
  ];
  NSString *pathURITemplate = @"{merchantId}/buyongoogleprograms/{regionCode}/requestreview";
  GTLRShoppingContentQuery_BuyongoogleprogramsRequestreview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionCode = regionCode;
  query.loggingName = @"content.buyongoogleprograms.requestreview";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionsCreate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Collection *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/collections";
  GTLRShoppingContentQuery_CollectionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Collection class];
  query.loggingName = @"content.collections.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionsDelete

@dynamic collectionId, merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId {
  NSArray *pathParams = @[
    @"collectionId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/collections/{collectionId}";
  GTLRShoppingContentQuery_CollectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.collectionId = collectionId;
  query.loggingName = @"content.collections.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionsGet

@dynamic collectionId, merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId {
  NSArray *pathParams = @[
    @"collectionId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/collections/{collectionId}";
  GTLRShoppingContentQuery_CollectionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.collectionId = collectionId;
  query.expectedObjectClass = [GTLRShoppingContent_Collection class];
  query.loggingName = @"content.collections.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionsList

@dynamic merchantId, pageSize, pageToken;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/collections";
  GTLRShoppingContentQuery_CollectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListCollectionsResponse class];
  query.loggingName = @"content.collections.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionstatusesGet

@dynamic collectionId, merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                       collectionId:(NSString *)collectionId {
  NSArray *pathParams = @[
    @"collectionId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/collectionstatuses/{collectionId}";
  GTLRShoppingContentQuery_CollectionstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.collectionId = collectionId;
  query.expectedObjectClass = [GTLRShoppingContent_CollectionStatus class];
  query.loggingName = @"content.collectionstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CollectionstatusesList

@dynamic merchantId, pageSize, pageToken;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/collectionstatuses";
  GTLRShoppingContentQuery_CollectionstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListCollectionStatusesResponse class];
  query.loggingName = @"content.collectionstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CssesGet

@dynamic cssDomainId, cssGroupId;

+ (instancetype)queryWithCssGroupId:(long long)cssGroupId
                        cssDomainId:(long long)cssDomainId {
  NSArray *pathParams = @[
    @"cssDomainId", @"cssGroupId"
  ];
  NSString *pathURITemplate = @"{cssGroupId}/csses/{cssDomainId}";
  GTLRShoppingContentQuery_CssesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.cssGroupId = cssGroupId;
  query.cssDomainId = cssDomainId;
  query.expectedObjectClass = [GTLRShoppingContent_Css class];
  query.loggingName = @"content.csses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CssesList

@dynamic cssGroupId, pageSize, pageToken;

+ (instancetype)queryWithCssGroupId:(long long)cssGroupId {
  NSArray *pathParams = @[ @"cssGroupId" ];
  NSString *pathURITemplate = @"{cssGroupId}/csses";
  GTLRShoppingContentQuery_CssesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.cssGroupId = cssGroupId;
  query.expectedObjectClass = [GTLRShoppingContent_ListCssesResponse class];
  query.loggingName = @"content.csses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_CssesUpdatelabels

@dynamic cssDomainId, cssGroupId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_LabelIds *)object
                     cssGroupId:(long long)cssGroupId
                    cssDomainId:(long long)cssDomainId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"cssDomainId", @"cssGroupId"
  ];
  NSString *pathURITemplate = @"{cssGroupId}/csses/{cssDomainId}/updatelabels";
  GTLRShoppingContentQuery_CssesUpdatelabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.cssGroupId = cssGroupId;
  query.cssDomainId = cssDomainId;
  query.expectedObjectClass = [GTLRShoppingContent_Css class];
  query.loggingName = @"content.csses.updatelabels";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedsCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"datafeeds/batch";
  GTLRShoppingContentQuery_DatafeedsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsCustomBatchResponse class];
  query.loggingName = @"content.datafeeds.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsDelete

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.loggingName = @"content.datafeeds.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsFetchnow

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}/fetchNow";
  GTLRShoppingContentQuery_DatafeedsFetchnow *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsFetchNowResponse class];
  query.loggingName = @"content.datafeeds.fetchnow";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsGet

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds";
  GTLRShoppingContentQuery_DatafeedsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds";
  GTLRShoppingContentQuery_DatafeedsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedsListResponse class];
  query.loggingName = @"content.datafeeds.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_DatafeedstatusesCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"datafeedstatuses/batch";
  GTLRShoppingContentQuery_DatafeedstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedstatusesCustomBatchResponse class];
  query.loggingName = @"content.datafeedstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesGet

@dynamic country, datafeedId, feedLabel, language, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                         datafeedId:(unsigned long long)datafeedId {
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeedstatuses/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedStatus class];
  query.loggingName = @"content.datafeedstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedstatusesList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/datafeedstatuses";
  GTLRShoppingContentQuery_DatafeedstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_DatafeedstatusesListResponse class];
  query.loggingName = @"content.datafeedstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_DatafeedsUpdate

@dynamic datafeedId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Datafeed *)object
                     merchantId:(unsigned long long)merchantId
                     datafeedId:(unsigned long long)datafeedId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"datafeedId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/datafeeds/{datafeedId}";
  GTLRShoppingContentQuery_DatafeedsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.datafeedId = datafeedId;
  query.expectedObjectClass = [GTLRShoppingContent_Datafeed class];
  query.loggingName = @"content.datafeeds.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_FreelistingsprogramGet

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/freelistingsprogram";
  GTLRShoppingContentQuery_FreelistingsprogramGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_FreeListingsProgramStatus class];
  query.loggingName = @"content.freelistingsprogram.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_FreelistingsprogramRequestreview

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewFreeListingsRequest *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/freelistingsprogram/requestreview";
  GTLRShoppingContentQuery_FreelistingsprogramRequestreview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.loggingName = @"content.freelistingsprogram.requestreview";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_LiasettingsCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"liasettings/batch";
  GTLRShoppingContentQuery_LiasettingsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsCustomBatchResponse class];
  query.loggingName = @"content.liasettings.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}";
  GTLRShoppingContentQuery_LiasettingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiaSettings class];
  query.loggingName = @"content.liasettings.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/accessiblegmbaccounts";
  GTLRShoppingContentQuery_LiasettingsGetaccessiblegmbaccounts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsGetAccessibleGmbAccountsResponse class];
  query.loggingName = @"content.liasettings.getaccessiblegmbaccounts";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/liasettings";
  GTLRShoppingContentQuery_LiasettingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsListResponse class];
  query.loggingName = @"content.liasettings.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsListposdataproviders

+ (instancetype)query {
  NSString *pathURITemplate = @"liasettings/posdataproviders";
  GTLRShoppingContentQuery_LiasettingsListposdataproviders *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsListPosDataProvidersResponse class];
  query.loggingName = @"content.liasettings.listposdataproviders";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsRequestgmbaccess

@dynamic accountId, gmbEmail, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                           gmbEmail:(NSString *)gmbEmail {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/requestgmbaccess";
  GTLRShoppingContentQuery_LiasettingsRequestgmbaccess *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.gmbEmail = gmbEmail;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsRequestGmbAccessResponse class];
  query.loggingName = @"content.liasettings.requestgmbaccess";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsRequestinventoryverification

@dynamic accountId, country, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country {
  NSArray *pathParams = @[
    @"accountId", @"country", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}";
  GTLRShoppingContentQuery_LiasettingsRequestinventoryverification *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.country = country;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsRequestInventoryVerificationResponse class];
  query.loggingName = @"content.liasettings.requestinventoryverification";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact

@dynamic accountId, contactEmail, contactName, country, language, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country
                           language:(NSString *)language
                        contactName:(NSString *)contactName
                       contactEmail:(NSString *)contactEmail {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/setinventoryverificationcontact";
  GTLRShoppingContentQuery_LiasettingsSetinventoryverificationcontact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.country = country;
  query.language = language;
  query.contactName = contactName;
  query.contactEmail = contactEmail;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsSetInventoryVerificationContactResponse class];
  query.loggingName = @"content.liasettings.setinventoryverificationcontact";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsSetposdataprovider

@dynamic accountId, country, merchantId, posDataProviderId,
         posExternalAccountId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId
                            country:(NSString *)country {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}/setposdataprovider";
  GTLRShoppingContentQuery_LiasettingsSetposdataprovider *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.country = country;
  query.expectedObjectClass = [GTLRShoppingContent_LiasettingsSetPosDataProviderResponse class];
  query.loggingName = @"content.liasettings.setposdataprovider";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LiasettingsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_LiaSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/liasettings/{accountId}";
  GTLRShoppingContentQuery_LiasettingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_LiaSettings class];
  query.loggingName = @"content.liasettings.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LocalinventoryCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalinventoryCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"localinventory/batch";
  GTLRShoppingContentQuery_LocalinventoryCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_LocalinventoryCustomBatchResponse class];
  query.loggingName = @"content.localinventory.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_LocalinventoryInsert

@dynamic merchantId, productId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_LocalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}/localinventory";
  GTLRShoppingContentQuery_LocalinventoryInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_LocalInventory class];
  query.loggingName = @"content.localinventory.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderinvoices/{orderId}/createChargeInvoice";
  GTLRShoppingContentQuery_OrderinvoicesCreatechargeinvoice *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderinvoicesCreateChargeInvoiceResponse class];
  query.loggingName = @"content.orderinvoices.createchargeinvoice";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderinvoices/{orderId}/createRefundInvoice";
  GTLRShoppingContentQuery_OrderinvoicesCreaterefundinvoice *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderinvoicesCreateRefundInvoiceResponse class];
  query.loggingName = @"content.orderinvoices.createrefundinvoice";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreportsListdisbursements

@dynamic disbursementEndDate, disbursementStartDate, maxResults, merchantId,
         pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orderreports/disbursements";
  GTLRShoppingContentQuery_OrderreportsListdisbursements *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreportsListDisbursementsResponse class];
  query.loggingName = @"content.orderreports.listdisbursements";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreportsListtransactions

@dynamic disbursementId, maxResults, merchantId, pageToken, transactionEndDate,
         transactionStartDate;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     disbursementId:(NSString *)disbursementId {
  NSArray *pathParams = @[
    @"disbursementId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreports/disbursements/{disbursementId}/transactions";
  GTLRShoppingContentQuery_OrderreportsListtransactions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.disbursementId = disbursementId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreportsListTransactionsResponse class];
  query.loggingName = @"content.orderreports.listtransactions";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsAcknowledge

@dynamic merchantId, returnId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                       returnId:(NSString *)returnId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"returnId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/{returnId}/acknowledge";
  GTLRShoppingContentQuery_OrderreturnsAcknowledge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.returnId = returnId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreturnsAcknowledgeResponse class];
  query.loggingName = @"content.orderreturns.acknowledge";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsCreateorderreturn

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsCreateOrderReturnRequest *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/createOrderReturn";
  GTLRShoppingContentQuery_OrderreturnsCreateorderreturn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreturnsCreateOrderReturnResponse class];
  query.loggingName = @"content.orderreturns.createorderreturn";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsGet

@dynamic merchantId, returnId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                           returnId:(NSString *)returnId {
  NSArray *pathParams = @[
    @"merchantId", @"returnId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/{returnId}";
  GTLRShoppingContentQuery_OrderreturnsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnId = returnId;
  query.expectedObjectClass = [GTLRShoppingContent_MerchantOrderReturn class];
  query.loggingName = @"content.orderreturns.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsLabelsCreate

@dynamic merchantId, returnId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnShippingLabel *)object
                     merchantId:(long long)merchantId
                       returnId:(NSString *)returnId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"returnId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/{returnId}/labels";
  GTLRShoppingContentQuery_OrderreturnsLabelsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.returnId = returnId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnShippingLabel class];
  query.loggingName = @"content.orderreturns.labels.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsList

@dynamic acknowledged, createdEndDate, createdStartDate, googleOrderIds,
         maxResults, merchantId, orderBy, pageToken, shipmentStates,
         shipmentStatus, shipmentTrackingNumbers, shipmentTypes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"googleOrderIds" : [NSString class],
    @"shipmentStates" : [NSString class],
    @"shipmentStatus" : [NSString class],
    @"shipmentTrackingNumbers" : [NSString class],
    @"shipmentTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns";
  GTLRShoppingContentQuery_OrderreturnsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreturnsListResponse class];
  query.loggingName = @"content.orderreturns.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrderreturnsProcess

@dynamic merchantId, returnId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderreturnsProcessRequest *)object
                     merchantId:(unsigned long long)merchantId
                       returnId:(NSString *)returnId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"returnId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orderreturns/{returnId}/process";
  GTLRShoppingContentQuery_OrderreturnsProcess *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.returnId = returnId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderreturnsProcessResponse class];
  query.loggingName = @"content.orderreturns.process";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersAcknowledge

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersAcknowledgeRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/acknowledge";
  GTLRShoppingContentQuery_OrdersAcknowledge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersAcknowledgeResponse class];
  query.loggingName = @"content.orders.acknowledge";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersAdvancetestorder

@dynamic merchantId, orderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/testorders/{orderId}/advance";
  GTLRShoppingContentQuery_OrdersAdvancetestorder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersAdvanceTestOrderResponse class];
  query.loggingName = @"content.orders.advancetestorder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCancel

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/cancel";
  GTLRShoppingContentQuery_OrdersCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelResponse class];
  query.loggingName = @"content.orders.cancel";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCancellineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/cancelLineItem";
  GTLRShoppingContentQuery_OrdersCancellineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelLineItemResponse class];
  query.loggingName = @"content.orders.cancellineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCancelTestOrderByCustomerRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/testorders/{orderId}/cancelByCustomer";
  GTLRShoppingContentQuery_OrdersCanceltestorderbycustomer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCancelTestOrderByCustomerResponse class];
  query.loggingName = @"content.orders.canceltestorderbycustomer";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCaptureOrder

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_CaptureOrderRequest *)object
                     merchantId:(long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/captureOrder";
  GTLRShoppingContentQuery_OrdersCaptureOrder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_CaptureOrderResponse class];
  query.loggingName = @"content.orders.captureOrder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCreatetestorder

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestOrderRequest *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/testorders";
  GTLRShoppingContentQuery_OrdersCreatetestorder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCreateTestOrderResponse class];
  query.loggingName = @"content.orders.createtestorder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersCreatetestreturn

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersCreateTestReturnRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/testreturn";
  GTLRShoppingContentQuery_OrdersCreatetestreturn *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersCreateTestReturnResponse class];
  query.loggingName = @"content.orders.createtestreturn";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGet

@dynamic merchantId, orderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                            orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}";
  GTLRShoppingContentQuery_OrdersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_Order class];
  query.loggingName = @"content.orders.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGetbymerchantorderid

@dynamic merchantId, merchantOrderId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    merchantOrderId:(NSString *)merchantOrderId {
  NSArray *pathParams = @[
    @"merchantId", @"merchantOrderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/ordersbymerchantid/{merchantOrderId}";
  GTLRShoppingContentQuery_OrdersGetbymerchantorderid *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.merchantOrderId = merchantOrderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersGetByMerchantOrderIdResponse class];
  query.loggingName = @"content.orders.getbymerchantorderid";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersGettestordertemplate

@dynamic country, merchantId, templateName;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       templateName:(NSString *)templateName {
  NSArray *pathParams = @[
    @"merchantId", @"templateName"
  ];
  NSString *pathURITemplate = @"{merchantId}/testordertemplates/{templateName}";
  GTLRShoppingContentQuery_OrdersGettestordertemplate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.templateName = templateName;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersGetTestOrderTemplateResponse class];
  query.loggingName = @"content.orders.gettestordertemplate";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersInstorerefundlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersInStoreRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/inStoreRefundLineItem";
  GTLRShoppingContentQuery_OrdersInstorerefundlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersInStoreRefundLineItemResponse class];
  query.loggingName = @"content.orders.instorerefundlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersList

@dynamic acknowledged, maxResults, merchantId, orderBy, pageToken,
         placedDateEnd, placedDateStart, statuses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statuses" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/orders";
  GTLRShoppingContentQuery_OrdersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersListResponse class];
  query.loggingName = @"content.orders.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersRefunditem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRefundItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/refunditem";
  GTLRShoppingContentQuery_OrdersRefunditem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersRefundItemResponse class];
  query.loggingName = @"content.orders.refunditem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersRefundorder

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRefundOrderRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/refundorder";
  GTLRShoppingContentQuery_OrdersRefundorder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersRefundOrderResponse class];
  query.loggingName = @"content.orders.refundorder";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersRejectreturnlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersRejectReturnLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/rejectReturnLineItem";
  GTLRShoppingContentQuery_OrdersRejectreturnlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersRejectReturnLineItemResponse class];
  query.loggingName = @"content.orders.rejectreturnlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersReturnrefundlineitem

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersReturnRefundLineItemRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/returnRefundLineItem";
  GTLRShoppingContentQuery_OrdersReturnrefundlineitem *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersReturnRefundLineItemResponse class];
  query.loggingName = @"content.orders.returnrefundlineitem";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersSetlineitemmetadata

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersSetLineItemMetadataRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/setLineItemMetadata";
  GTLRShoppingContentQuery_OrdersSetlineitemmetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersSetLineItemMetadataResponse class];
  query.loggingName = @"content.orders.setlineitemmetadata";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersShiplineitems

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersShipLineItemsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/shipLineItems";
  GTLRShoppingContentQuery_OrdersShiplineitems *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersShipLineItemsResponse class];
  query.loggingName = @"content.orders.shiplineitems";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateLineItemShippingDetails";
  GTLRShoppingContentQuery_OrdersUpdatelineitemshippingdetails *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateLineItemShippingDetailsResponse class];
  query.loggingName = @"content.orders.updatelineitemshippingdetails";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdatemerchantorderid

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateMerchantOrderIdRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateMerchantOrderId";
  GTLRShoppingContentQuery_OrdersUpdatemerchantorderid *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateMerchantOrderIdResponse class];
  query.loggingName = @"content.orders.updatemerchantorderid";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdersUpdateshipment

@dynamic merchantId, orderId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrdersUpdateShipmentRequest *)object
                     merchantId:(unsigned long long)merchantId
                        orderId:(NSString *)orderId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"orderId"
  ];
  NSString *pathURITemplate = @"{merchantId}/orders/{orderId}/updateShipment";
  GTLRShoppingContentQuery_OrdersUpdateshipment *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.orderId = orderId;
  query.expectedObjectClass = [GTLRShoppingContent_OrdersUpdateShipmentResponse class];
  query.loggingName = @"content.orders.updateshipment";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_OrdertrackingsignalsCreate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_OrderTrackingSignal *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/ordertrackingsignals";
  GTLRShoppingContentQuery_OrdertrackingsignalsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_OrderTrackingSignal class];
  query.loggingName = @"content.ordertrackingsignals.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"pos/batch";
  GTLRShoppingContentQuery_PosCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_PosCustomBatchResponse class];
  query.loggingName = @"content.pos.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosDelete

@dynamic merchantId, storeCode, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode {
  NSArray *pathParams = @[
    @"merchantId", @"storeCode", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store/{storeCode}";
  GTLRShoppingContentQuery_PosDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.storeCode = storeCode;
  query.loggingName = @"content.pos.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosGet

@dynamic merchantId, storeCode, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId
                          storeCode:(NSString *)storeCode {
  NSArray *pathParams = @[
    @"merchantId", @"storeCode", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store/{storeCode}";
  GTLRShoppingContentQuery_PosGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.storeCode = storeCode;
  query.expectedObjectClass = [GTLRShoppingContent_PosStore class];
  query.loggingName = @"content.pos.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosInsert

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosStore *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store";
  GTLRShoppingContentQuery_PosInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosStore class];
  query.loggingName = @"content.pos.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosInventory

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosInventoryRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/inventory";
  GTLRShoppingContentQuery_PosInventory *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosInventoryResponse class];
  query.loggingName = @"content.pos.inventory";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosList

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                   targetMerchantId:(unsigned long long)targetMerchantId {
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/store";
  GTLRShoppingContentQuery_PosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosListResponse class];
  query.loggingName = @"content.pos.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PosSale

@dynamic merchantId, targetMerchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PosSaleRequest *)object
                     merchantId:(unsigned long long)merchantId
               targetMerchantId:(unsigned long long)targetMerchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"targetMerchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/pos/{targetMerchantId}/sale";
  GTLRShoppingContentQuery_PosSale *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.targetMerchantId = targetMerchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PosSaleResponse class];
  query.loggingName = @"content.pos.sale";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductdeliverytimeCreate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductDeliveryTime *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/productdeliverytime";
  GTLRShoppingContentQuery_ProductdeliverytimeCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductDeliveryTime class];
  query.loggingName = @"content.productdeliverytime.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductdeliverytimeDelete

@dynamic merchantId, productId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/productdeliverytime/{productId}";
  GTLRShoppingContentQuery_ProductdeliverytimeDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.loggingName = @"content.productdeliverytime.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductdeliverytimeGet

@dynamic merchantId, productId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/productdeliverytime/{productId}";
  GTLRShoppingContentQuery_ProductdeliverytimeGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductDeliveryTime class];
  query.loggingName = @"content.productdeliverytime.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductsCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"products/batch";
  GTLRShoppingContentQuery_ProductsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ProductsCustomBatchResponse class];
  query.loggingName = @"content.products.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsDelete

@dynamic feedId, merchantId, productId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}";
  GTLRShoppingContentQuery_ProductsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.loggingName = @"content.products.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsGet

@dynamic merchantId, productId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}";
  GTLRShoppingContentQuery_ProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_Product class];
  query.loggingName = @"content.products.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsInsert

@dynamic feedId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/products";
  GTLRShoppingContentQuery_ProductsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Product class];
  query.loggingName = @"content.products.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/products";
  GTLRShoppingContentQuery_ProductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductsListResponse class];
  query.loggingName = @"content.products.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ProductstatusesCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"productstatuses/batch";
  GTLRShoppingContentQuery_ProductstatusesCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ProductstatusesCustomBatchResponse class];
  query.loggingName = @"content.productstatuses.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesGet

@dynamic destinations, merchantId, productId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/productstatuses/{productId}";
  GTLRShoppingContentQuery_ProductstatusesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductStatus class];
  query.loggingName = @"content.productstatuses.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesList

@dynamic destinations, maxResults, merchantId, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinations" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/productstatuses";
  GTLRShoppingContentQuery_ProductstatusesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ProductstatusesListResponse class];
  query.loggingName = @"content.productstatuses.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductstatusesRepricingreportsList

@dynamic endDate, merchantId, pageSize, pageToken, productId, ruleId, startDate;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                          productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/productstatuses/{productId}/repricingreports";
  GTLRShoppingContentQuery_ProductstatusesRepricingreportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_ListRepricingProductReportsResponse class];
  query.loggingName = @"content.productstatuses.repricingreports.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ProductsUpdate

@dynamic merchantId, productId, updateMask;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Product *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}";
  GTLRShoppingContentQuery_ProductsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_Product class];
  query.loggingName = @"content.products.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PromotionsCreate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Promotion *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/promotions";
  GTLRShoppingContentQuery_PromotionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Promotion class];
  query.loggingName = @"content.promotions.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PromotionsGet

@dynamic identifier, merchantId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithMerchantId:(long long)merchantId
                         identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/promotions/{id}";
  GTLRShoppingContentQuery_PromotionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRShoppingContent_Promotion class];
  query.loggingName = @"content.promotions.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PubsubnotificationsettingsGet

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/pubsubnotificationsettings";
  GTLRShoppingContentQuery_PubsubnotificationsettingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PubsubNotificationSettings class];
  query.loggingName = @"content.pubsubnotificationsettings.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_PubsubNotificationSettings *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/pubsubnotificationsettings";
  GTLRShoppingContentQuery_PubsubnotificationsettingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_PubsubNotificationSettings class];
  query.loggingName = @"content.pubsubnotificationsettings.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_QuotasList

@dynamic merchantId, pageSize, pageToken;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/quotas";
  GTLRShoppingContentQuery_QuotasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListMethodQuotasResponse class];
  query.loggingName = @"content.quotas.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionalinventoryCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalinventoryCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"regionalinventory/batch";
  GTLRShoppingContentQuery_RegionalinventoryCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_RegionalinventoryCustomBatchResponse class];
  query.loggingName = @"content.regionalinventory.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionalinventoryInsert

@dynamic merchantId, productId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RegionalInventory *)object
                     merchantId:(unsigned long long)merchantId
                      productId:(NSString *)productId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"productId"
  ];
  NSString *pathURITemplate = @"{merchantId}/products/{productId}/regionalinventory";
  GTLRShoppingContentQuery_RegionalinventoryInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.productId = productId;
  query.expectedObjectClass = [GTLRShoppingContent_RegionalInventory class];
  query.loggingName = @"content.regionalinventory.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionsCreate

@dynamic merchantId, regionId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/regions";
  GTLRShoppingContentQuery_RegionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_Region class];
  query.loggingName = @"content.regions.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionsDelete

@dynamic merchantId, regionId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId {
  NSArray *pathParams = @[
    @"merchantId", @"regionId"
  ];
  NSString *pathURITemplate = @"{merchantId}/regions/{regionId}";
  GTLRShoppingContentQuery_RegionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.regionId = regionId;
  query.loggingName = @"content.regions.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionsGet

@dynamic merchantId, regionId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                           regionId:(NSString *)regionId {
  NSArray *pathParams = @[
    @"merchantId", @"regionId"
  ];
  NSString *pathURITemplate = @"{merchantId}/regions/{regionId}";
  GTLRShoppingContentQuery_RegionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.regionId = regionId;
  query.expectedObjectClass = [GTLRShoppingContent_Region class];
  query.loggingName = @"content.regions.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionsList

@dynamic merchantId, pageSize, pageToken;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/regions";
  GTLRShoppingContentQuery_RegionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListRegionsResponse class];
  query.loggingName = @"content.regions.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RegionsPatch

@dynamic merchantId, regionId, updateMask;

+ (instancetype)queryWithObject:(GTLRShoppingContent_Region *)object
                     merchantId:(long long)merchantId
                       regionId:(NSString *)regionId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"regionId"
  ];
  NSString *pathURITemplate = @"{merchantId}/regions/{regionId}";
  GTLRShoppingContentQuery_RegionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.regionId = regionId;
  query.expectedObjectClass = [GTLRShoppingContent_Region class];
  query.loggingName = @"content.regions.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReportsSearch

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_SearchRequest *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/reports/search";
  GTLRShoppingContentQuery_ReportsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_SearchResponse class];
  query.loggingName = @"content.reports.search";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesCreate

@dynamic merchantId, ruleId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RepricingRule *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules";
  GTLRShoppingContentQuery_RepricingrulesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_RepricingRule class];
  query.loggingName = @"content.repricingrules.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesDelete

@dynamic merchantId, ruleId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId {
  NSArray *pathParams = @[
    @"merchantId", @"ruleId"
  ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules/{ruleId}";
  GTLRShoppingContentQuery_RepricingrulesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.ruleId = ruleId;
  query.loggingName = @"content.repricingrules.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesGet

@dynamic merchantId, ruleId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId {
  NSArray *pathParams = @[
    @"merchantId", @"ruleId"
  ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules/{ruleId}";
  GTLRShoppingContentQuery_RepricingrulesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.ruleId = ruleId;
  query.expectedObjectClass = [GTLRShoppingContent_RepricingRule class];
  query.loggingName = @"content.repricingrules.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesList

@dynamic countryCode, languageCode, merchantId, pageSize, pageToken;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules";
  GTLRShoppingContentQuery_RepricingrulesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListRepricingRulesResponse class];
  query.loggingName = @"content.repricingrules.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesPatch

@dynamic merchantId, ruleId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RepricingRule *)object
                     merchantId:(long long)merchantId
                         ruleId:(NSString *)ruleId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"ruleId"
  ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules/{ruleId}";
  GTLRShoppingContentQuery_RepricingrulesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.ruleId = ruleId;
  query.expectedObjectClass = [GTLRShoppingContent_RepricingRule class];
  query.loggingName = @"content.repricingrules.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_RepricingrulesRepricingreportsList

@dynamic endDate, merchantId, pageSize, pageToken, ruleId, startDate;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                             ruleId:(NSString *)ruleId {
  NSArray *pathParams = @[
    @"merchantId", @"ruleId"
  ];
  NSString *pathURITemplate = @"{merchantId}/repricingrules/{ruleId}/repricingreports";
  GTLRShoppingContentQuery_RepricingrulesRepricingreportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.ruleId = ruleId;
  query.expectedObjectClass = [GTLRShoppingContent_ListRepricingRuleReportsResponse class];
  query.loggingName = @"content.repricingrules.repricingreports.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnaddressCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnaddressCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"returnaddress/batch";
  GTLRShoppingContentQuery_ReturnaddressCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnaddressCustomBatchResponse class];
  query.loggingName = @"content.returnaddress.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnaddressDelete

@dynamic merchantId, returnAddressId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId {
  NSArray *pathParams = @[
    @"merchantId", @"returnAddressId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnaddress/{returnAddressId}";
  GTLRShoppingContentQuery_ReturnaddressDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnAddressId = returnAddressId;
  query.loggingName = @"content.returnaddress.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnaddressGet

@dynamic merchantId, returnAddressId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                    returnAddressId:(NSString *)returnAddressId {
  NSArray *pathParams = @[
    @"merchantId", @"returnAddressId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnaddress/{returnAddressId}";
  GTLRShoppingContentQuery_ReturnaddressGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnAddressId = returnAddressId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnAddress class];
  query.loggingName = @"content.returnaddress.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnaddressInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnAddress *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnaddress";
  GTLRShoppingContentQuery_ReturnaddressInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnAddress class];
  query.loggingName = @"content.returnaddress.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnaddressList

@dynamic country, maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnaddress";
  GTLRShoppingContentQuery_ReturnaddressList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnaddressListResponse class];
  query.loggingName = @"content.returnaddress.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnpolicyCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"returnpolicy/batch";
  GTLRShoppingContentQuery_ReturnpolicyCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnpolicyCustomBatchResponse class];
  query.loggingName = @"content.returnpolicy.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyDelete

@dynamic merchantId, returnPolicyId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId {
  NSArray *pathParams = @[
    @"merchantId", @"returnPolicyId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicy/{returnPolicyId}";
  GTLRShoppingContentQuery_ReturnpolicyDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnPolicyId = returnPolicyId;
  query.loggingName = @"content.returnpolicy.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyGet

@dynamic merchantId, returnPolicyId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId {
  NSArray *pathParams = @[
    @"merchantId", @"returnPolicyId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicy/{returnPolicyId}";
  GTLRShoppingContentQuery_ReturnpolicyGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnPolicyId = returnPolicyId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnPolicy class];
  query.loggingName = @"content.returnpolicy.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyInsert

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicy *)object
                     merchantId:(unsigned long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicy";
  GTLRShoppingContentQuery_ReturnpolicyInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnPolicy class];
  query.loggingName = @"content.returnpolicy.insert";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyList

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicy";
  GTLRShoppingContentQuery_ReturnpolicyList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnpolicyListResponse class];
  query.loggingName = @"content.returnpolicy.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyonlineCreate

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicyonline";
  GTLRShoppingContentQuery_ReturnpolicyonlineCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnPolicyOnline class];
  query.loggingName = @"content.returnpolicyonline.create";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyonlineDelete

@dynamic merchantId, returnPolicyId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId {
  NSArray *pathParams = @[
    @"merchantId", @"returnPolicyId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicyonline/{returnPolicyId}";
  GTLRShoppingContentQuery_ReturnpolicyonlineDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnPolicyId = returnPolicyId;
  query.loggingName = @"content.returnpolicyonline.delete";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyonlineGet

@dynamic merchantId, returnPolicyId;

+ (instancetype)queryWithMerchantId:(long long)merchantId
                     returnPolicyId:(NSString *)returnPolicyId {
  NSArray *pathParams = @[
    @"merchantId", @"returnPolicyId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicyonline/{returnPolicyId}";
  GTLRShoppingContentQuery_ReturnpolicyonlineGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.returnPolicyId = returnPolicyId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnPolicyOnline class];
  query.loggingName = @"content.returnpolicyonline.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyonlineList

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicyonline";
  GTLRShoppingContentQuery_ReturnpolicyonlineList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ListReturnPolicyOnlineResponse class];
  query.loggingName = @"content.returnpolicyonline.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ReturnpolicyonlinePatch

@dynamic merchantId, returnPolicyId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ReturnPolicyOnline *)object
                     merchantId:(long long)merchantId
                 returnPolicyId:(NSString *)returnPolicyId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"merchantId", @"returnPolicyId"
  ];
  NSString *pathURITemplate = @"{merchantId}/returnpolicyonline/{returnPolicyId}";
  GTLRShoppingContentQuery_ReturnpolicyonlinePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.returnPolicyId = returnPolicyId;
  query.expectedObjectClass = [GTLRShoppingContent_ReturnPolicyOnline class];
  query.loggingName = @"content.returnpolicyonline.patch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_SettlementreportsGet

@dynamic merchantId, settlementId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       settlementId:(NSString *)settlementId {
  NSArray *pathParams = @[
    @"merchantId", @"settlementId"
  ];
  NSString *pathURITemplate = @"{merchantId}/settlementreports/{settlementId}";
  GTLRShoppingContentQuery_SettlementreportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.settlementId = settlementId;
  query.expectedObjectClass = [GTLRShoppingContent_SettlementReport class];
  query.loggingName = @"content.settlementreports.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_SettlementreportsList

@dynamic maxResults, merchantId, pageToken, transferEndDate, transferStartDate;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/settlementreports";
  GTLRShoppingContentQuery_SettlementreportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_SettlementreportsListResponse class];
  query.loggingName = @"content.settlementreports.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_SettlementtransactionsList

@dynamic maxResults, merchantId, pageToken, settlementId, transactionIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"transactionIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                       settlementId:(NSString *)settlementId {
  NSArray *pathParams = @[
    @"merchantId", @"settlementId"
  ];
  NSString *pathURITemplate = @"{merchantId}/settlementreports/{settlementId}/transactions";
  GTLRShoppingContentQuery_SettlementtransactionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.settlementId = settlementId;
  query.expectedObjectClass = [GTLRShoppingContent_SettlementtransactionsListResponse class];
  query.loggingName = @"content.settlementtransactions.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsCustombatch

+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingsettingsCustomBatchRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"shippingsettings/batch";
  GTLRShoppingContentQuery_ShippingsettingsCustombatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsCustomBatchResponse class];
  query.loggingName = @"content.shippingsettings.custombatch";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGet

@dynamic accountId, merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId
                          accountId:(unsigned long long)accountId {
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings/{accountId}";
  GTLRShoppingContentQuery_ShippingsettingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingSettings class];
  query.loggingName = @"content.shippingsettings.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/supportedCarriers";
  GTLRShoppingContentQuery_ShippingsettingsGetsupportedcarriers *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsGetSupportedCarriersResponse class];
  query.loggingName = @"content.shippingsettings.getsupportedcarriers";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/supportedHolidays";
  GTLRShoppingContentQuery_ShippingsettingsGetsupportedholidays *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsGetSupportedHolidaysResponse class];
  query.loggingName = @"content.shippingsettings.getsupportedholidays";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/supportedPickupServices";
  GTLRShoppingContentQuery_ShippingsettingsGetsupportedpickupservices *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsGetSupportedPickupServicesResponse class];
  query.loggingName = @"content.shippingsettings.getsupportedpickupservices";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsList

@dynamic maxResults, merchantId, pageToken;

+ (instancetype)queryWithMerchantId:(unsigned long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings";
  GTLRShoppingContentQuery_ShippingsettingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingsettingsListResponse class];
  query.loggingName = @"content.shippingsettings.list";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShippingsettingsUpdate

@dynamic accountId, merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_ShippingSettings *)object
                     merchantId:(unsigned long long)merchantId
                      accountId:(unsigned long long)accountId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"merchantId"
  ];
  NSString *pathURITemplate = @"{merchantId}/shippingsettings/{accountId}";
  GTLRShoppingContentQuery_ShippingsettingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRShoppingContent_ShippingSettings class];
  query.loggingName = @"content.shippingsettings.update";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShoppingadsprogramGet

@dynamic merchantId;

+ (instancetype)queryWithMerchantId:(long long)merchantId {
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/shoppingadsprogram";
  GTLRShoppingContentQuery_ShoppingadsprogramGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.merchantId = merchantId;
  query.expectedObjectClass = [GTLRShoppingContent_ShoppingAdsProgramStatus class];
  query.loggingName = @"content.shoppingadsprogram.get";
  return query;
}

@end

@implementation GTLRShoppingContentQuery_ShoppingadsprogramRequestreview

@dynamic merchantId;

+ (instancetype)queryWithObject:(GTLRShoppingContent_RequestReviewShoppingAdsRequest *)object
                     merchantId:(long long)merchantId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"merchantId" ];
  NSString *pathURITemplate = @"{merchantId}/shoppingadsprogram/requestreview";
  GTLRShoppingContentQuery_ShoppingadsprogramRequestreview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.merchantId = merchantId;
  query.loggingName = @"content.shoppingadsprogram.requestreview";
  return query;
}

@end
