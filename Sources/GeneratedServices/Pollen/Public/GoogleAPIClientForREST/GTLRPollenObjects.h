// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Pollen API (pollen/v1)
// Description:
//   The Pollen API.
// Documentation:
//   https://developers.google.com/maps/documentation/pollen

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPollen_Color;
@class GTLRPollen_Date;
@class GTLRPollen_DayInfo;
@class GTLRPollen_HttpBody_Extensions_Item;
@class GTLRPollen_IndexInfo;
@class GTLRPollen_PlantDescription;
@class GTLRPollen_PlantInfo;
@class GTLRPollen_TypeInfo;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPollen_IndexInfo.code

/**
 *  Unspecified index.
 *
 *  Value: "INDEX_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_IndexInfo_Code_IndexUnspecified;
/**
 *  Universal Pollen Index.
 *
 *  Value: "UPI"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_IndexInfo_Code_Upi;

// ----------------------------------------------------------------------------
// GTLRPollen_PlantDescription.type

/**
 *  Grass pollen type.
 *
 *  Value: "GRASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantDescription_Type_Grass;
/**
 *  Unspecified plant type.
 *
 *  Value: "POLLEN_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantDescription_Type_PollenTypeUnspecified;
/**
 *  Tree pollen type.
 *
 *  Value: "TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantDescription_Type_Tree;
/**
 *  Weed pollen type.
 *
 *  Value: "WEED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantDescription_Type_Weed;

// ----------------------------------------------------------------------------
// GTLRPollen_PlantInfo.code

/**
 *  Alder is classified as a tree pollen type.
 *
 *  Value: "ALDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Alder;
/**
 *  Ash is classified as a tree pollen type.
 *
 *  Value: "ASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Ash;
/**
 *  Birch is classified as a tree pollen type.
 *
 *  Value: "BIRCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Birch;
/**
 *  Cottonwood is classified as a tree pollen type.
 *
 *  Value: "COTTONWOOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Cottonwood;
/**
 *  Cypress pine is classified as a tree pollen type.
 *
 *  Value: "CYPRESS_PINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_CypressPine;
/**
 *  Elm is classified as a tree pollen type.
 *
 *  Value: "ELM"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Elm;
/**
 *  Graminales is classified as a grass pollen type.
 *
 *  Value: "GRAMINALES"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Graminales;
/**
 *  Hazel is classified as a tree pollen type.
 *
 *  Value: "HAZEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Hazel;
/**
 *  Japanese cedar is classified as a tree pollen type.
 *
 *  Value: "JAPANESE_CEDAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_JapaneseCedar;
/**
 *  Japanese cypress is classified as a tree pollen type.
 *
 *  Value: "JAPANESE_CYPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_JapaneseCypress;
/**
 *  Juniper is classified as a tree pollen type.
 *
 *  Value: "JUNIPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Juniper;
/**
 *  Maple is classified as a tree pollen type.
 *
 *  Value: "MAPLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Maple;
/**
 *  Mugwort is classified as a weed pollen type.
 *
 *  Value: "MUGWORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Mugwort;
/**
 *  Oak is classified as a tree pollen type.
 *
 *  Value: "OAK"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Oak;
/**
 *  Olive is classified as a tree pollen type.
 *
 *  Value: "OLIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Olive;
/**
 *  Pine is classified as a tree pollen type.
 *
 *  Value: "PINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Pine;
/**
 *  Unspecified plant code.
 *
 *  Value: "PLANT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_PlantUnspecified;
/**
 *  Ragweed is classified as a weed pollen type.
 *
 *  Value: "RAGWEED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_PlantInfo_Code_Ragweed;

// ----------------------------------------------------------------------------
// GTLRPollen_TypeInfo.code

/**
 *  Grass pollen type.
 *
 *  Value: "GRASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_TypeInfo_Code_Grass;
/**
 *  Unspecified plant type.
 *
 *  Value: "POLLEN_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_TypeInfo_Code_PollenTypeUnspecified;
/**
 *  Tree pollen type.
 *
 *  Value: "TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_TypeInfo_Code_Tree;
/**
 *  Weed pollen type.
 *
 *  Value: "WEED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPollen_TypeInfo_Code_Weed;

/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to and from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't have
 *  information about the absolute color space that should be used to interpret
 *  the RGB valueâ€”for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most `1e-5`. Example (Java): import com.google.type.Color; // ...
 *  public static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRPollen_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRPollen_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  This object contains the daily forecast information for each day requested.
 */
@interface GTLRPollen_DayInfo : GTLRObject

/** The date in UTC at which the pollen forecast data is represented. */
@property(nonatomic, strong, nullable) GTLRPollen_Date *date;

/**
 *  This list will include up to 15 pollen species affecting the location
 *  specified in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPollen_PlantInfo *> *plantInfo;

/**
 *  This list will include up to three pollen types (GRASS, WEED, TREE)
 *  affecting the location specified in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPollen_TypeInfo *> *pollenTypeInfo;

@end


/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or an
 *  HTML page. This message can be used both in streaming and non-streaming API
 *  methods in the request as well as the response. It can be used as a
 *  top-level request field, which is convenient if one wants to extract
 *  parameters from either the URL or HTTP template into the request fields and
 *  also want access to the raw HTTP body. Example: message GetResourceRequest {
 *  // A unique request id. string request_id = 1; // The raw HTTP body is bound
 *  to this field. google.api.HttpBody http_body = 2; } service ResourceService
 *  { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
 *  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
 *  Example with streaming methods: service CaldavService { rpc
 *  GetCalendar(stream google.api.HttpBody) returns (stream
 *  google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns
 *  (stream google.api.HttpBody); } Use of this type only changes how the
 *  request and response bodies are handled, all other features will continue to
 *  work unchanged.
 */
@interface GTLRPollen_HttpBody : GTLRObject

/**
 *  The HTTP Content-Type header value specifying the content type of the body.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The HTTP request/response body as raw binary.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Application specific response metadata. Must be set in the first response
 *  for streaming APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPollen_HttpBody_Extensions_Item *> *extensions;

@end


/**
 *  GTLRPollen_HttpBody_Extensions_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRPollen_HttpBody_Extensions_Item : GTLRObject
@end


/**
 *  This object contains data representing specific pollen index value, category
 *  and description.
 */
@interface GTLRPollen_IndexInfo : GTLRObject

/**
 *  Text classification of index numerical score interpretation. The index
 *  consists of six categories: * 0: "None" * 1: "Very low" * 2: "Low" * 3:
 *  "Moderate" * 4: "High" * 5: "Very high
 */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  The index's code. This field represents the index for programming purposes
 *  by using snake cases instead of spaces. Example: "UPI".
 *
 *  Likely values:
 *    @arg @c kGTLRPollen_IndexInfo_Code_IndexUnspecified Unspecified index.
 *        (Value: "INDEX_UNSPECIFIED")
 *    @arg @c kGTLRPollen_IndexInfo_Code_Upi Universal Pollen Index. (Value:
 *        "UPI")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** The color used to represent the Pollen Index numeric score. */
@property(nonatomic, strong, nullable) GTLRPollen_Color *color;

/**
 *  A human readable representation of the index name. Example: "Universal
 *  Pollen Index".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Textual explanation of current index level. */
@property(nonatomic, copy, nullable) NSString *indexDescription;

/**
 *  The index's numeric score. Numeric range is between 0 and 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  GTLRPollen_LookupForecastResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "dailyInfo" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPollen_LookupForecastResponse : GTLRCollectionObject

/**
 *  Required. This object contains the daily forecast information for each day
 *  requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPollen_DayInfo *> *dailyInfo;

/** Optional. The token to retrieve the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The ISO_3166-1 alpha-2 code of the country/region corresponding to the
 *  location provided in the request. This field might be omitted from the
 *  response if the location provided in the request resides in a disputed
 *  territory.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Contains general information about plants, including details on their
 *  seasonality, special shapes and colors, information about allergic
 *  cross-reactions, and plant photos.
 */
@interface GTLRPollen_PlantDescription : GTLRObject

/**
 *  Textual description of pollen cross reaction plants. Example: Alder, Hazel,
 *  Hornbeam, Beech, Willow, and Oak pollen.
 */
@property(nonatomic, copy, nullable) NSString *crossReaction;

/**
 *  A human readable representation of the plant family name. Example:
 *  "Betulaceae (the Birch family)".
 */
@property(nonatomic, copy, nullable) NSString *family;

/** Link to the picture of the plant. */
@property(nonatomic, copy, nullable) NSString *picture;

/** Link to a closeup picture of the plant. */
@property(nonatomic, copy, nullable) NSString *pictureCloseup;

/**
 *  Textual list of explanations of seasons where the pollen is active. Example:
 *  "Late winter, spring".
 */
@property(nonatomic, copy, nullable) NSString *season;

/**
 *  Textual description of the plants' colors of leaves, bark, flowers or seeds
 *  that helps identify the plant.
 */
@property(nonatomic, copy, nullable) NSString *specialColors;

/**
 *  Textual description of the plants' shapes of leaves, bark, flowers or seeds
 *  that helps identify the plant.
 */
@property(nonatomic, copy, nullable) NSString *specialShapes;

/**
 *  The plant's pollen type. For example: "GRASS". A list of all available codes
 *  could be found here.
 *
 *  Likely values:
 *    @arg @c kGTLRPollen_PlantDescription_Type_Grass Grass pollen type. (Value:
 *        "GRASS")
 *    @arg @c kGTLRPollen_PlantDescription_Type_PollenTypeUnspecified
 *        Unspecified plant type. (Value: "POLLEN_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPollen_PlantDescription_Type_Tree Tree pollen type. (Value:
 *        "TREE")
 *    @arg @c kGTLRPollen_PlantDescription_Type_Weed Weed pollen type. (Value:
 *        "WEED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  This object contains the daily information on specific plant.
 */
@interface GTLRPollen_PlantInfo : GTLRObject

/**
 *  The plant code name. For example: "COTTONWOOD". A list of all available
 *  codes could be found here.
 *
 *  Likely values:
 *    @arg @c kGTLRPollen_PlantInfo_Code_Alder Alder is classified as a tree
 *        pollen type. (Value: "ALDER")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Ash Ash is classified as a tree pollen
 *        type. (Value: "ASH")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Birch Birch is classified as a tree
 *        pollen type. (Value: "BIRCH")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Cottonwood Cottonwood is classified as
 *        a tree pollen type. (Value: "COTTONWOOD")
 *    @arg @c kGTLRPollen_PlantInfo_Code_CypressPine Cypress pine is classified
 *        as a tree pollen type. (Value: "CYPRESS_PINE")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Elm Elm is classified as a tree pollen
 *        type. (Value: "ELM")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Graminales Graminales is classified as
 *        a grass pollen type. (Value: "GRAMINALES")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Hazel Hazel is classified as a tree
 *        pollen type. (Value: "HAZEL")
 *    @arg @c kGTLRPollen_PlantInfo_Code_JapaneseCedar Japanese cedar is
 *        classified as a tree pollen type. (Value: "JAPANESE_CEDAR")
 *    @arg @c kGTLRPollen_PlantInfo_Code_JapaneseCypress Japanese cypress is
 *        classified as a tree pollen type. (Value: "JAPANESE_CYPRESS")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Juniper Juniper is classified as a tree
 *        pollen type. (Value: "JUNIPER")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Maple Maple is classified as a tree
 *        pollen type. (Value: "MAPLE")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Mugwort Mugwort is classified as a weed
 *        pollen type. (Value: "MUGWORT")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Oak Oak is classified as a tree pollen
 *        type. (Value: "OAK")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Olive Olive is classified as a tree
 *        pollen type. (Value: "OLIVE")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Pine Pine is classified as a tree
 *        pollen type. (Value: "PINE")
 *    @arg @c kGTLRPollen_PlantInfo_Code_PlantUnspecified Unspecified plant
 *        code. (Value: "PLANT_UNSPECIFIED")
 *    @arg @c kGTLRPollen_PlantInfo_Code_Ragweed Ragweed is classified as a weed
 *        pollen type. (Value: "RAGWEED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  A human readable representation of the plant name. Example: â€œCottonwood".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  This object contains data representing specific pollen index value, category
 *  and description.
 */
@property(nonatomic, strong, nullable) GTLRPollen_IndexInfo *indexInfo;

/**
 *  Indication of either the plant is in season or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inSeason;

/**
 *  Contains general information about plants, including details on their
 *  seasonality, special shapes and colors, information about allergic
 *  cross-reactions, and plant photos.
 */
@property(nonatomic, strong, nullable) GTLRPollen_PlantDescription *plantDescription;

@end


/**
 *  This object contains the pollen type index and health recommendation
 *  information on specific pollen type.
 */
@interface GTLRPollen_TypeInfo : GTLRObject

/**
 *  The pollen type's code name. For example: "GRASS"
 *
 *  Likely values:
 *    @arg @c kGTLRPollen_TypeInfo_Code_Grass Grass pollen type. (Value:
 *        "GRASS")
 *    @arg @c kGTLRPollen_TypeInfo_Code_PollenTypeUnspecified Unspecified plant
 *        type. (Value: "POLLEN_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPollen_TypeInfo_Code_Tree Tree pollen type. (Value: "TREE")
 *    @arg @c kGTLRPollen_TypeInfo_Code_Weed Weed pollen type. (Value: "WEED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  A human readable representation of the pollen type name. Example: "Grass"
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Textual list of explanations, related to health insights based on the
 *  current pollen levels.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *healthRecommendations;

/** Contains the Universal Pollen Index (UPI) data for the pollen type. */
@property(nonatomic, strong, nullable) GTLRPollen_IndexInfo *indexInfo;

/**
 *  Indication whether the plant is in season or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inSeason;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
