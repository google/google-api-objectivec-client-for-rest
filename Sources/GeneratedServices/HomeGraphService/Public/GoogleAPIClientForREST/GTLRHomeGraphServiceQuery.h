// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   HomeGraph API (homegraph/v1)
// Documentation:
//   https://developers.google.com/actions/smarthome/create-app#request-sync

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRHomeGraphServiceObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Home Graph Service query classes.
 */
@interface GTLRHomeGraphServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Unlinks the given third-party user from your smart home Action. All data
 *  related to this user will be deleted. For more details on how users link
 *  their accounts, see [fulfillment and
 *  authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
 *  The third-party user's identity is passed in via the `agent_user_id` (see
 *  DeleteAgentUserRequest). This request must be authorized using service
 *  account credentials from your Actions console project.
 *
 *  Method: homegraph.agentUsers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHomeGraphService
 */
@interface GTLRHomeGraphServiceQuery_AgentUsersDelete : GTLRHomeGraphServiceQuery

/** Required. Third-party user ID. */
@property(nonatomic, copy, nullable) NSString *agentUserId;

/** Request ID used for debugging. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRHomeGraphService_Empty.
 *
 *  Unlinks the given third-party user from your smart home Action. All data
 *  related to this user will be deleted. For more details on how users link
 *  their accounts, see [fulfillment and
 *  authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication).
 *  The third-party user's identity is passed in via the `agent_user_id` (see
 *  DeleteAgentUserRequest). This request must be authorized using service
 *  account credentials from your Actions console project.
 *
 *  @param agentUserId Required. Third-party user ID.
 *
 *  @return GTLRHomeGraphServiceQuery_AgentUsersDelete
 */
+ (instancetype)queryWithAgentUserId:(NSString *)agentUserId;

@end

/**
 *  Gets the current states in Home Graph for the given set of the third-party
 *  user's devices. The third-party user's identity is passed in via the
 *  `agent_user_id` (see QueryRequest). This request must be authorized using
 *  service account credentials from your Actions console project.
 *
 *  Method: homegraph.devices.query
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHomeGraphService
 */
@interface GTLRHomeGraphServiceQuery_DevicesQuery : GTLRHomeGraphServiceQuery

/**
 *  Fetches a @c GTLRHomeGraphService_QueryResponse.
 *
 *  Gets the current states in Home Graph for the given set of the third-party
 *  user's devices. The third-party user's identity is passed in via the
 *  `agent_user_id` (see QueryRequest). This request must be authorized using
 *  service account credentials from your Actions console project.
 *
 *  @param object The @c GTLRHomeGraphService_QueryRequest to include in the
 *    query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesQuery
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_QueryRequest *)object;

@end

/**
 *  Reports device state and optionally sends device notifications. Called by
 *  your smart home Action when the state of a third-party device changes or you
 *  need to send a notification about the device. See [Implement Report
 *  State](https://developers.google.com/assistant/smarthome/develop/report-state)
 *  for more information. This method updates the device state according to its
 *  declared
 *  [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
 *  Publishing a new state value outside of these traits will result in an
 *  `INVALID_ARGUMENT` error response. The third-party user's identity is passed
 *  in via the `agent_user_id` (see ReportStateAndNotificationRequest). This
 *  request must be authorized using service account credentials from your
 *  Actions console project.
 *
 *  Method: homegraph.devices.reportStateAndNotification
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHomeGraphService
 */
@interface GTLRHomeGraphServiceQuery_DevicesReportStateAndNotification : GTLRHomeGraphServiceQuery

/**
 *  Fetches a @c GTLRHomeGraphService_ReportStateAndNotificationResponse.
 *
 *  Reports device state and optionally sends device notifications. Called by
 *  your smart home Action when the state of a third-party device changes or you
 *  need to send a notification about the device. See [Implement Report
 *  State](https://developers.google.com/assistant/smarthome/develop/report-state)
 *  for more information. This method updates the device state according to its
 *  declared
 *  [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits).
 *  Publishing a new state value outside of these traits will result in an
 *  `INVALID_ARGUMENT` error response. The third-party user's identity is passed
 *  in via the `agent_user_id` (see ReportStateAndNotificationRequest). This
 *  request must be authorized using service account credentials from your
 *  Actions console project.
 *
 *  @param object The @c GTLRHomeGraphService_ReportStateAndNotificationRequest
 *    to include in the query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesReportStateAndNotification
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_ReportStateAndNotificationRequest *)object;

@end

/**
 *  Requests Google to send an `action.devices.SYNC`
 *  [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
 *  to your smart home Action to update device metadata for the given user. The
 *  third-party user's identity is passed via the `agent_user_id` (see
 *  RequestSyncDevicesRequest). This request must be authorized using service
 *  account credentials from your Actions console project.
 *
 *  Method: homegraph.devices.requestSync
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHomeGraphService
 */
@interface GTLRHomeGraphServiceQuery_DevicesRequestSync : GTLRHomeGraphServiceQuery

/**
 *  Fetches a @c GTLRHomeGraphService_RequestSyncDevicesResponse.
 *
 *  Requests Google to send an `action.devices.SYNC`
 *  [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync)
 *  to your smart home Action to update device metadata for the given user. The
 *  third-party user's identity is passed via the `agent_user_id` (see
 *  RequestSyncDevicesRequest). This request must be authorized using service
 *  account credentials from your Actions console project.
 *
 *  @param object The @c GTLRHomeGraphService_RequestSyncDevicesRequest to
 *    include in the query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesRequestSync
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_RequestSyncDevicesRequest *)object;

@end

/**
 *  Gets all the devices associated with the given third-party user. The
 *  third-party user's identity is passed in via the `agent_user_id` (see
 *  SyncRequest). This request must be authorized using service account
 *  credentials from your Actions console project.
 *
 *  Method: homegraph.devices.sync
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHomeGraphService
 */
@interface GTLRHomeGraphServiceQuery_DevicesSync : GTLRHomeGraphServiceQuery

/**
 *  Fetches a @c GTLRHomeGraphService_SyncResponse.
 *
 *  Gets all the devices associated with the given third-party user. The
 *  third-party user's identity is passed in via the `agent_user_id` (see
 *  SyncRequest). This request must be authorized using service account
 *  credentials from your Actions console project.
 *
 *  @param object The @c GTLRHomeGraphService_SyncRequest to include in the
 *    query.
 *
 *  @return GTLRHomeGraphServiceQuery_DevicesSync
 */
+ (instancetype)queryWithObject:(GTLRHomeGraphService_SyncRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
