// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Web Security Scanner API (websecurityscanner/v1)
// Description:
//   Scans your Compute and App Engine apps for common web vulnerabilities.
// Documentation:
//   https://cloud.google.com/security-command-center/docs/concepts-web-security-scanner-overview/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRWebSecurityScanner_Authentication;
@class GTLRWebSecurityScanner_CrawledUrl;
@class GTLRWebSecurityScanner_CustomAccount;
@class GTLRWebSecurityScanner_Finding;
@class GTLRWebSecurityScanner_FindingTypeStats;
@class GTLRWebSecurityScanner_Form;
@class GTLRWebSecurityScanner_GoogleAccount;
@class GTLRWebSecurityScanner_Header;
@class GTLRWebSecurityScanner_IapCredential;
@class GTLRWebSecurityScanner_IapTestServiceAccountInfo;
@class GTLRWebSecurityScanner_OutdatedLibrary;
@class GTLRWebSecurityScanner_ScanConfig;
@class GTLRWebSecurityScanner_ScanConfigError;
@class GTLRWebSecurityScanner_ScanRun;
@class GTLRWebSecurityScanner_ScanRunErrorTrace;
@class GTLRWebSecurityScanner_ScanRunWarningTrace;
@class GTLRWebSecurityScanner_Schedule;
@class GTLRWebSecurityScanner_ViolatingResource;
@class GTLRWebSecurityScanner_VulnerableHeaders;
@class GTLRWebSecurityScanner_VulnerableParameters;
@class GTLRWebSecurityScanner_Xss;
@class GTLRWebSecurityScanner_Xxe;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_Finding.severity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Finding_Severity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Finding_Severity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Finding_Severity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Finding_Severity_Medium;
/**
 *  No severity specified. The default value.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Finding_Severity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanConfig.exportToSecurityCommandCenter

/**
 *  Do not export results of this scan to Security Command Center.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_Disabled;
/**
 *  Export results of this scan to Security Command Center.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_Enabled;
/**
 *  Use default, which is ENABLED.
 *
 *  Value: "EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_ExportToSecurityCommandCenterUnspecified;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanConfig.riskLevel

/**
 *  Lower impact scanning
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_RiskLevel_Low;
/**
 *  Normal scanning (Recommended)
 *
 *  Value: "NORMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_RiskLevel_Normal;
/**
 *  Use default, which is NORMAL.
 *
 *  Value: "RISK_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_RiskLevel_RiskLevelUnspecified;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanConfig.userAgent

/**
 *  Chrome on Android.
 *
 *  Value: "CHROME_ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_UserAgent_ChromeAndroid;
/**
 *  Chrome on Linux. This is the service default if unspecified.
 *
 *  Value: "CHROME_LINUX"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_UserAgent_ChromeLinux;
/**
 *  Safari on IPhone.
 *
 *  Value: "SAFARI_IPHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_UserAgent_SafariIphone;
/**
 *  The user agent is unknown. Service will default to CHROME_LINUX.
 *
 *  Value: "USER_AGENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfig_UserAgent_UserAgentUnspecified;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanConfigError.code

/**
 *  One of the seed URLs is an App Engine URL but we cannot validate the scan
 *  settings due to an App Engine API backend error.
 *
 *  Value: "APPENGINE_API_BACKEND_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineApiBackendError;
/**
 *  One of the seed URLs is an App Engine URL but we cannot access the App
 *  Engine API to validate scan settings.
 *
 *  Value: "APPENGINE_API_NOT_ACCESSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineApiNotAccessible;
/**
 *  One of the seed URLs is an App Engine URL but the Default Host of the App
 *  Engine is not set.
 *
 *  Value: "APPENGINE_DEFAULT_HOST_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineDefaultHostMissing;
/**
 *  Google corporate accounts can not be used for scanning.
 *
 *  Value: "CANNOT_USE_GOOGLE_COM_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CannotUseGoogleComAccount;
/**
 *  The account of the scan creator can not be used for scanning.
 *
 *  Value: "CANNOT_USE_OWNER_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CannotUseOwnerAccount;
/**
 *  There is no error.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CodeUnspecified;
/**
 *  This scan targets Compute Engine, but we cannot validate scan settings due
 *  to a Compute Engine API backend error.
 *
 *  Value: "COMPUTE_API_BACKEND_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ComputeApiBackendError;
/**
 *  This scan targets Compute Engine, but we cannot access the Compute Engine
 *  API to validate the scan settings.
 *
 *  Value: "COMPUTE_API_NOT_ACCESSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ComputeApiNotAccessible;
/**
 *  The Custom Login URL does not belong to the current project.
 *
 *  Value: "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlDoesNotBelongToCurrentProject;
/**
 *  The Custom Login URL has a non-routable IP address.
 *
 *  Value: "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlHasNonRoutableIpAddress;
/**
 *  The Custom Login URL has an IP address which is not reserved for the current
 *  project.
 *
 *  Value: "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlHasUnreservedIpAddress;
/**
 *  The Custom Login URL is malformed (can not be parsed).
 *
 *  Value: "CUSTOM_LOGIN_URL_MALFORMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMalformed;
/**
 *  The Custom Login URL is mapped to a non-routable IP address in DNS.
 *
 *  Value: "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMappedToNonRoutableAddress;
/**
 *  The Custom Login URL is mapped to an IP address which is not reserved for
 *  the current project.
 *
 *  Value: "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMappedToUnreservedAddress;
/**
 *  Another scan with the same name (case-sensitive) already exists.
 *
 *  Value: "DUPLICATE_SCAN_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_DuplicateScanName;
/**
 *  There was an error trying to authenticate to the scan target.
 *
 *  Value: "FAILED_TO_AUTHENTICATE_TO_TARGET"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_FailedToAuthenticateToTarget;
/**
 *  Finding type value is not specified in the list findings request.
 *
 *  Value: "FINDING_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_FindingTypeUnspecified;
/**
 *  Scan targets Compute Engine, yet current project was not whitelisted for
 *  Google Compute Engine Scanning Alpha access.
 *
 *  Value: "FORBIDDEN_TO_SCAN_COMPUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ForbiddenToScanCompute;
/**
 *  User tries to update managed scan
 *
 *  Value: "FORBIDDEN_UPDATE_TO_MANAGED_SCAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ForbiddenUpdateToManagedScan;
/**
 *  Indicates an internal server error. Please DO NOT USE THIS ERROR CODE unless
 *  the root cause is truly unknown.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_InternalError;
/**
 *  A field is set to an invalid value.
 *
 *  Value: "INVALID_FIELD_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_InvalidFieldValue;
/**
 *  The supplied filter is malformed. For example, it can not be parsed, does
 *  not have a filter type in expression, or the same filter type appears more
 *  than once.
 *
 *  Value: "MALFORMED_FILTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_MalformedFilter;
/**
 *  The supplied resource name is malformed (can not be parsed).
 *
 *  Value: "MALFORMED_RESOURCE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_MalformedResourceName;
/**
 *  There is no error.
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_Ok;
/**
 *  The current project is not in an active state.
 *
 *  Value: "PROJECT_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ProjectInactive;
/**
 *  A required field is not set.
 *
 *  Value: "REQUIRED_FIELD"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_RequiredField;
/**
 *  Project id, scanconfig id, scanrun id, or finding id are not consistent with
 *  each other in resource name.
 *
 *  Value: "RESOURCE_NAME_INCONSISTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ResourceNameInconsistent;
/**
 *  The scan being requested to start is already running.
 *
 *  Value: "SCAN_ALREADY_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ScanAlreadyRunning;
/**
 *  The scan that was requested to be stopped is not running.
 *
 *  Value: "SCAN_NOT_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ScanNotRunning;
/**
 *  One of the seed URLs does not belong to the current project.
 *
 *  Value: "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlDoesNotBelongToCurrentProject;
/**
 *  One of the seed URLs has on-routable IP address.
 *
 *  Value: "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlHasNonRoutableIpAddress;
/**
 *  One of the seed URLs has an IP address that is not reserved for the current
 *  project.
 *
 *  Value: "SEED_URL_HAS_UNRESERVED_IP_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlHasUnreservedIpAddress;
/**
 *  One of the seed URLs is malformed (can not be parsed).
 *
 *  Value: "SEED_URL_MALFORMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMalformed;
/**
 *  One of the seed URLs is mapped to a non-routable IP address in DNS.
 *
 *  Value: "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMappedToNonRoutableAddress;
/**
 *  One of the seed URLs is mapped to an IP address which is not reserved for
 *  the current project.
 *
 *  Value: "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMappedToUnreservedAddress;
/**
 *  The Web Security Scanner service account is not configured under the
 *  project.
 *
 *  Value: "SERVICE_ACCOUNT_NOT_CONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_ServiceAccountNotConfigured;
/**
 *  A project has reached the maximum number of scans.
 *
 *  Value: "TOO_MANY_SCANS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_TooManyScans;
/**
 *  Resolving the details of the current project fails.
 *
 *  Value: "UNABLE_TO_RESOLVE_PROJECT_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_UnableToResolveProjectInfo;
/**
 *  One or more blacklist patterns were in the wrong format.
 *
 *  Value: "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedBlacklistPatternFormat;
/**
 *  The supplied filter is not supported.
 *
 *  Value: "UNSUPPORTED_FILTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedFilter;
/**
 *  The supplied finding type is not supported. For example, we do not provide
 *  findings of the given finding type.
 *
 *  Value: "UNSUPPORTED_FINDING_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedFindingType;
/**
 *  The URL scheme of one or more of the supplied URLs is not supported.
 *
 *  Value: "UNSUPPORTED_URL_SCHEME"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedUrlScheme;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanRun.executionState

/**
 *  Represents an invalid state caused by internal server error. This value
 *  should never be returned.
 *
 *  Value: "EXECUTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ExecutionState_ExecutionStateUnspecified;
/**
 *  The scan is either finished or stopped by user.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ExecutionState_Finished;
/**
 *  The scan is waiting in the queue.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ExecutionState_Queued;
/**
 *  The scan is in progress.
 *
 *  Value: "SCANNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ExecutionState_Scanning;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanRun.resultState

/**
 *  The scan finished with errors.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ResultState_Error;
/**
 *  The scan was terminated by user.
 *
 *  Value: "KILLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ResultState_Killed;
/**
 *  Default value. This value is returned when the ScanRun is not yet finished.
 *
 *  Value: "RESULT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ResultState_ResultStateUnspecified;
/**
 *  The scan finished without errors.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRun_ResultState_Success;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanRunErrorTrace.code

/**
 *  Indicates an authentication error, usually due to outdated ScanConfig
 *  authentication settings.
 *
 *  Value: "AUTHENTICATION_CONFIG_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_AuthenticationConfigIssue;
/**
 *  Default value is never used.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_CodeUnspecified;
/**
 *  Indicates that the scan run failed due to an internal server error.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_InternalError;
/**
 *  Indicates a scan configuration error, usually due to outdated ScanConfig
 *  settings, such as starting_urls or the DNS configuration.
 *
 *  Value: "SCAN_CONFIG_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_ScanConfigIssue;
/**
 *  Indicates a scan operation timeout, usually caused by a very large site.
 *
 *  Value: "TIMED_OUT_WHILE_SCANNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TimedOutWhileScanning;
/**
 *  Indicates that a scan encountered numerous errors from the web site pages.
 *  When available, most_common_http_error_code field indicates the most common
 *  HTTP error code encountered during the scan.
 *
 *  Value: "TOO_MANY_HTTP_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TooManyHttpErrors;
/**
 *  Indicates that a scan encountered excessive redirects, either to
 *  authentication or some other page outside of the scan scope.
 *
 *  Value: "TOO_MANY_REDIRECTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TooManyRedirects;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_ScanRunWarningTrace.code

/**
 *  Indicates that a scan is blocked by IAP.
 *
 *  Value: "BLOCKED_BY_IAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_BlockedByIap;
/**
 *  Default value is never used.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_CodeUnspecified;
/**
 *  Indicates that a scan discovered an unexpectedly low number of URLs. This is
 *  sometimes caused by complex navigation features or by using a single URL for
 *  numerous pages.
 *
 *  Value: "INSUFFICIENT_CRAWL_RESULTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_InsufficientCrawlResults;
/**
 *  Indicates that no seeds is found for a scan
 *
 *  Value: "NO_STARTING_URL_FOUND_FOR_MANAGED_SCAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_NoStartingUrlFoundForManagedScan;
/**
 *  Indicates that a scan discovered too many URLs to test, or excessive
 *  redundant URLs.
 *
 *  Value: "TOO_MANY_CRAWL_RESULTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_TooManyCrawlResults;
/**
 *  Indicates that too many tests have been generated for the scan. Customer
 *  should try reducing the number of starting URLs, increasing the QPS rate, or
 *  narrowing down the scope of the scan using the excluded patterns.
 *
 *  Value: "TOO_MANY_FUZZ_TASKS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_TooManyFuzzTasks;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_Xss.attackVector

/**
 *  Unknown attack vector.
 *
 *  Value: "ATTACK_VECTOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_AttackVectorUnspecified;
/**
 *  The attack comes from fuzzing the browser's cookies.
 *
 *  Value: "COOKIE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_Cookie;
/**
 *  The attack comes from fuzzing an input element.
 *
 *  Value: "FORM_INPUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_FormInput;
/**
 *  The attack comes from fuzzing parameters in the url.
 *
 *  Value: "GET_PARAMETERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_GetParameters;
/**
 *  The attack comes from fuzzing the HTML comments.
 *
 *  Value: "HTML_COMMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_HtmlComment;
/**
 *  The attack comes from fuzzing the browser's localStorage.
 *
 *  Value: "LOCAL_STORAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_LocalStorage;
/**
 *  The attack comes from hijacking the post messaging mechanism.
 *
 *  Value: "POST_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_PostMessage;
/**
 *  The attack comes from fuzzing the POST parameters.
 *
 *  Value: "POST_PARAMETERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_PostParameters;
/**
 *  The attack comes from fuzzing the protocol.
 *
 *  Value: "PROTOCOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_Protocol;
/**
 *  The attack comes from fuzzing the referrer property.
 *
 *  Value: "REFERRER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_Referrer;
/**
 *  The attack is a Same-Origin Method Execution attack via a GET parameter.
 *
 *  Value: "SAME_ORIGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_SameOrigin;
/**
 *  The attack comes from fuzzing the browser's sessionStorage.
 *
 *  Value: "SESSION_STORAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_SessionStorage;
/**
 *  The attack comes from the server side and is stored.
 *
 *  Value: "STORED_XSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_StoredXss;
/**
 *  The attack comes from fuzzing the fragment in the url.
 *
 *  Value: "URL_FRAGMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_UrlFragment;
/**
 *  The attack payload is received from a third-party host via a URL that is
 *  user-controllable
 *
 *  Value: "USER_CONTROLLABLE_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_UserControllableUrl;
/**
 *  The attack comes from fuzzing the window's name property.
 *
 *  Value: "WINDOW_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xss_AttackVector_WindowName;

// ----------------------------------------------------------------------------
// GTLRWebSecurityScanner_Xxe.payloadLocation

/**
 *  The XML payload replaced the complete request body.
 *
 *  Value: "COMPLETE_REQUEST_BODY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xxe_PayloadLocation_CompleteRequestBody;
/**
 *  Unknown Location.
 *
 *  Value: "LOCATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWebSecurityScanner_Xxe_PayloadLocation_LocationUnspecified;

/**
 *  Scan authentication configuration.
 */
@interface GTLRWebSecurityScanner_Authentication : GTLRObject

/** Authentication using a custom account. */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_CustomAccount *customAccount;

/** Authentication using a Google account. */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_GoogleAccount *googleAccount;

/** Authentication using Identity-Aware-Proxy (IAP). */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_IapCredential *iapCredential;

@end


/**
 *  A CrawledUrl resource represents a URL that was crawled during a ScanRun.
 *  Web Security Scanner Service crawls the web applications, following all
 *  links within the scope of sites, to find the URLs to test against.
 */
@interface GTLRWebSecurityScanner_CrawledUrl : GTLRObject

/** Output only. The body of the request that was used to visit the URL. */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  Output only. The http method of the request that was used to visit the URL,
 *  in uppercase.
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/** Output only. The URL that was crawled. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Describes authentication configuration that uses a custom account.
 */
@interface GTLRWebSecurityScanner_CustomAccount : GTLRObject

/** Required. The login form URL of the website. */
@property(nonatomic, copy, nullable) NSString *loginUrl;

/**
 *  Required. Input only. The password of the custom account. The credential is
 *  stored encrypted and not returned in any response nor included in audit
 *  logs.
 */
@property(nonatomic, copy, nullable) NSString *password;

/** Required. The user name of the custom account. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRWebSecurityScanner_Empty : GTLRObject
@end


/**
 *  A Finding resource represents a vulnerability instance identified during a
 *  ScanRun.
 */
@interface GTLRWebSecurityScanner_Finding : GTLRObject

/** Output only. The body of the request that triggered the vulnerability. */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  Output only. The description of the vulnerability.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The URL where the browser lands when the vulnerability is
 *  detected.
 */
@property(nonatomic, copy, nullable) NSString *finalUrl;

/**
 *  Output only. The type of the Finding. Detailed and up-to-date information on
 *  findings can be found here:
 *  https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner-findings
 */
@property(nonatomic, copy, nullable) NSString *findingType;

/**
 *  Output only. An addon containing information reported for a vulnerability
 *  with an HTML form, if any.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_Form *form;

/**
 *  Output only. If the vulnerability was originated from nested IFrame, the
 *  immediate parent IFrame is reported.
 */
@property(nonatomic, copy, nullable) NSString *frameUrl;

/**
 *  Output only. The URL produced by the server-side fuzzer and used in the
 *  request that triggered the vulnerability.
 */
@property(nonatomic, copy, nullable) NSString *fuzzedUrl;

/**
 *  Output only. The http method of the request that triggered the
 *  vulnerability, in uppercase.
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  Output only. The resource name of the Finding. The name follows the format
 *  of
 *  'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'.
 *  The finding IDs are generated by the system.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. An addon containing information about outdated libraries. */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_OutdatedLibrary *outdatedLibrary;

/**
 *  Output only. The URL containing human-readable payload that user can
 *  leverage to reproduce the vulnerability.
 */
@property(nonatomic, copy, nullable) NSString *reproductionUrl;

/**
 *  Output only. The severity level of the reported vulnerability.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_Finding_Severity_Critical Critical
 *        severity. (Value: "CRITICAL")
 *    @arg @c kGTLRWebSecurityScanner_Finding_Severity_High High severity.
 *        (Value: "HIGH")
 *    @arg @c kGTLRWebSecurityScanner_Finding_Severity_Low Low severity. (Value:
 *        "LOW")
 *    @arg @c kGTLRWebSecurityScanner_Finding_Severity_Medium Medium severity.
 *        (Value: "MEDIUM")
 *    @arg @c kGTLRWebSecurityScanner_Finding_Severity_SeverityUnspecified No
 *        severity specified. The default value. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  Output only. The tracking ID uniquely identifies a vulnerability instance
 *  across multiple ScanRuns.
 */
@property(nonatomic, copy, nullable) NSString *trackingId;

/**
 *  Output only. An addon containing detailed information regarding any resource
 *  causing the vulnerability such as JavaScript sources, image, audio files,
 *  etc.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_ViolatingResource *violatingResource;

/**
 *  Output only. An addon containing information about vulnerable or missing
 *  HTTP headers.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_VulnerableHeaders *vulnerableHeaders;

/**
 *  Output only. An addon containing information about request parameters which
 *  were found to be vulnerable.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_VulnerableParameters *vulnerableParameters;

/**
 *  Output only. An addon containing information reported for an XSS, if any.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_Xss *xss;

/**
 *  Output only. An addon containing information reported for an XXE, if any.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_Xxe *xxe;

@end


/**
 *  A FindingTypeStats resource represents stats regarding a specific
 *  FindingType of Findings under a given ScanRun.
 */
@interface GTLRWebSecurityScanner_FindingTypeStats : GTLRObject

/**
 *  Output only. The count of findings belonging to this finding type.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *findingCount;

/** Output only. The finding type associated with the stats. */
@property(nonatomic, copy, nullable) NSString *findingType;

@end


/**
 *  ! Information about a vulnerability with an HTML.
 */
@interface GTLRWebSecurityScanner_Form : GTLRObject

/** ! The URI where to send the form when it's submitted. */
@property(nonatomic, copy, nullable) NSString *actionUri;

/** ! The names of form fields related to the vulnerability. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fields;

@end


/**
 *  Describes authentication configuration that uses a Google account.
 */
@interface GTLRWebSecurityScanner_GoogleAccount : GTLRObject

/**
 *  Required. Input only. The password of the Google account. The credential is
 *  stored encrypted and not returned in any response nor included in audit
 *  logs.
 */
@property(nonatomic, copy, nullable) NSString *password;

/** Required. The user name of the Google account. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Describes a HTTP Header.
 */
@interface GTLRWebSecurityScanner_Header : GTLRObject

/** Header name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Header value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Describes authentication configuration for Identity-Aware-Proxy (IAP).
 */
@interface GTLRWebSecurityScanner_IapCredential : GTLRObject

/**
 *  Authentication configuration when Web-Security-Scanner service account is
 *  added in Identity-Aware-Proxy (IAP) access policies.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_IapTestServiceAccountInfo *iapTestServiceAccountInfo;

@end


/**
 *  Describes authentication configuration when Web-Security-Scanner service
 *  account is added in Identity-Aware-Proxy (IAP) access policies.
 */
@interface GTLRWebSecurityScanner_IapTestServiceAccountInfo : GTLRObject

/**
 *  Required. Describes OAuth2 client id of resources protected by
 *  Identity-Aware-Proxy (IAP).
 */
@property(nonatomic, copy, nullable) NSString *targetAudienceClientId;

@end


/**
 *  Response for the `ListCrawledUrls` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "crawledUrls" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWebSecurityScanner_ListCrawledUrlsResponse : GTLRCollectionObject

/**
 *  The list of CrawledUrls returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_CrawledUrl *> *crawledUrls;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for the `ListFindings` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "findings" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWebSecurityScanner_ListFindingsResponse : GTLRCollectionObject

/**
 *  The list of Findings returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_Finding *> *findings;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for the `ListFindingTypeStats` method.
 */
@interface GTLRWebSecurityScanner_ListFindingTypeStatsResponse : GTLRObject

/** The list of FindingTypeStats returned. */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_FindingTypeStats *> *findingTypeStats;

@end


/**
 *  Response for the `ListScanConfigs` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "scanConfigs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWebSecurityScanner_ListScanConfigsResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of ScanConfigs returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_ScanConfig *> *scanConfigs;

@end


/**
 *  Response for the `ListScanRuns` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "scanRuns" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWebSecurityScanner_ListScanRunsResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of ScanRuns returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_ScanRun *> *scanRuns;

@end


/**
 *  Information reported for an outdated library.
 */
@interface GTLRWebSecurityScanner_OutdatedLibrary : GTLRObject

/**
 *  URLs to learn more information about the vulnerabilities in the library.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *learnMoreUrls;

/** The name of the outdated library. */
@property(nonatomic, copy, nullable) NSString *libraryName;

/** The version number. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A ScanConfig resource contains the configurations to launch a scan.
 */
@interface GTLRWebSecurityScanner_ScanConfig : GTLRObject

/**
 *  The authentication configuration. If specified, service will use the
 *  authentication configuration during scanning.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_Authentication *authentication;

/**
 *  The excluded URL patterns as described in
 *  https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blacklistPatterns;

/** Required. The user provided display name of the ScanConfig. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Controls export of scan configurations and results to Security Command
 *  Center.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_Disabled
 *        Do not export results of this scan to Security Command Center. (Value:
 *        "DISABLED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_Enabled
 *        Export results of this scan to Security Command Center. (Value:
 *        "ENABLED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_ExportToSecurityCommandCenter_ExportToSecurityCommandCenterUnspecified
 *        Use default, which is ENABLED. (Value:
 *        "EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *exportToSecurityCommandCenter;

/**
 *  Whether to keep scanning even if most requests return HTTP error codes.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreHttpStatusErrors;

/**
 *  Whether the scan config is managed by Web Security Scanner, output only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managedScan;

/**
 *  The maximum QPS during scanning. A valid value ranges from 5 to 20
 *  inclusively. If the field is unspecified or its value is set 0, server will
 *  default to 15. Other values outside of [5, 20] range will be rejected with
 *  INVALID_ARGUMENT error.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxQps;

/**
 *  The resource name of the ScanConfig. The name follows the format of
 *  'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are
 *  generated by the system.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The risk level selected for the scan
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_RiskLevel_Low Lower impact
 *        scanning (Value: "LOW")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_RiskLevel_Normal Normal
 *        scanning (Recommended) (Value: "NORMAL")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_RiskLevel_RiskLevelUnspecified
 *        Use default, which is NORMAL. (Value: "RISK_LEVEL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *riskLevel;

/** The schedule of the ScanConfig. */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_Schedule *schedule;

/** Required. The starting URLs from which the scanner finds site pages. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *startingUrls;

/**
 *  Whether the scan configuration has enabled static IP address scan feature.
 *  If enabled, the scanner will access applications from static IP addresses.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *staticIpScan;

/**
 *  The user agent used during scanning.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_UserAgent_ChromeAndroid Chrome
 *        on Android. (Value: "CHROME_ANDROID")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_UserAgent_ChromeLinux Chrome on
 *        Linux. This is the service default if unspecified. (Value:
 *        "CHROME_LINUX")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_UserAgent_SafariIphone Safari
 *        on IPhone. (Value: "SAFARI_IPHONE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfig_UserAgent_UserAgentUnspecified
 *        The user agent is unknown. Service will default to CHROME_LINUX.
 *        (Value: "USER_AGENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end


/**
 *  Defines a custom error message used by CreateScanConfig and UpdateScanConfig
 *  APIs when scan configuration validation fails. It is also reported as part
 *  of a ScanRunErrorTrace message if scan validation fails due to a scan
 *  configuration error.
 */
@interface GTLRWebSecurityScanner_ScanConfigError : GTLRObject

/**
 *  Output only. Indicates the reason code for a configuration failure.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineApiBackendError
 *        One of the seed URLs is an App Engine URL but we cannot validate the
 *        scan settings due to an App Engine API backend error. (Value:
 *        "APPENGINE_API_BACKEND_ERROR")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineApiNotAccessible
 *        One of the seed URLs is an App Engine URL but we cannot access the App
 *        Engine API to validate scan settings. (Value:
 *        "APPENGINE_API_NOT_ACCESSIBLE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_AppengineDefaultHostMissing
 *        One of the seed URLs is an App Engine URL but the Default Host of the
 *        App Engine is not set. (Value: "APPENGINE_DEFAULT_HOST_MISSING")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CannotUseGoogleComAccount
 *        Google corporate accounts can not be used for scanning. (Value:
 *        "CANNOT_USE_GOOGLE_COM_ACCOUNT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CannotUseOwnerAccount
 *        The account of the scan creator can not be used for scanning. (Value:
 *        "CANNOT_USE_OWNER_ACCOUNT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CodeUnspecified There
 *        is no error. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ComputeApiBackendError
 *        This scan targets Compute Engine, but we cannot validate scan settings
 *        due to a Compute Engine API backend error. (Value:
 *        "COMPUTE_API_BACKEND_ERROR")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ComputeApiNotAccessible
 *        This scan targets Compute Engine, but we cannot access the Compute
 *        Engine API to validate the scan settings. (Value:
 *        "COMPUTE_API_NOT_ACCESSIBLE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlDoesNotBelongToCurrentProject
 *        The Custom Login URL does not belong to the current project. (Value:
 *        "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlHasNonRoutableIpAddress
 *        The Custom Login URL has a non-routable IP address. (Value:
 *        "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlHasUnreservedIpAddress
 *        The Custom Login URL has an IP address which is not reserved for the
 *        current project. (Value: "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMalformed
 *        The Custom Login URL is malformed (can not be parsed). (Value:
 *        "CUSTOM_LOGIN_URL_MALFORMED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMappedToNonRoutableAddress
 *        The Custom Login URL is mapped to a non-routable IP address in DNS.
 *        (Value: "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_CustomLoginUrlMappedToUnreservedAddress
 *        The Custom Login URL is mapped to an IP address which is not reserved
 *        for the current project. (Value:
 *        "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_DuplicateScanName
 *        Another scan with the same name (case-sensitive) already exists.
 *        (Value: "DUPLICATE_SCAN_NAME")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_FailedToAuthenticateToTarget
 *        There was an error trying to authenticate to the scan target. (Value:
 *        "FAILED_TO_AUTHENTICATE_TO_TARGET")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_FindingTypeUnspecified
 *        Finding type value is not specified in the list findings request.
 *        (Value: "FINDING_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ForbiddenToScanCompute
 *        Scan targets Compute Engine, yet current project was not whitelisted
 *        for Google Compute Engine Scanning Alpha access. (Value:
 *        "FORBIDDEN_TO_SCAN_COMPUTE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ForbiddenUpdateToManagedScan
 *        User tries to update managed scan (Value:
 *        "FORBIDDEN_UPDATE_TO_MANAGED_SCAN")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_InternalError
 *        Indicates an internal server error. Please DO NOT USE THIS ERROR CODE
 *        unless the root cause is truly unknown. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_InvalidFieldValue A
 *        field is set to an invalid value. (Value: "INVALID_FIELD_VALUE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_MalformedFilter The
 *        supplied filter is malformed. For example, it can not be parsed, does
 *        not have a filter type in expression, or the same filter type appears
 *        more than once. (Value: "MALFORMED_FILTER")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_MalformedResourceName
 *        The supplied resource name is malformed (can not be parsed). (Value:
 *        "MALFORMED_RESOURCE_NAME")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_Ok There is no error.
 *        (Value: "OK")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ProjectInactive The
 *        current project is not in an active state. (Value: "PROJECT_INACTIVE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_RequiredField A
 *        required field is not set. (Value: "REQUIRED_FIELD")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ResourceNameInconsistent
 *        Project id, scanconfig id, scanrun id, or finding id are not
 *        consistent with each other in resource name. (Value:
 *        "RESOURCE_NAME_INCONSISTENT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ScanAlreadyRunning
 *        The scan being requested to start is already running. (Value:
 *        "SCAN_ALREADY_RUNNING")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ScanNotRunning The
 *        scan that was requested to be stopped is not running. (Value:
 *        "SCAN_NOT_RUNNING")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlDoesNotBelongToCurrentProject
 *        One of the seed URLs does not belong to the current project. (Value:
 *        "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlHasNonRoutableIpAddress
 *        One of the seed URLs has on-routable IP address. (Value:
 *        "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlHasUnreservedIpAddress
 *        One of the seed URLs has an IP address that is not reserved for the
 *        current project. (Value: "SEED_URL_HAS_UNRESERVED_IP_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMalformed One
 *        of the seed URLs is malformed (can not be parsed). (Value:
 *        "SEED_URL_MALFORMED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMappedToNonRoutableAddress
 *        One of the seed URLs is mapped to a non-routable IP address in DNS.
 *        (Value: "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_SeedUrlMappedToUnreservedAddress
 *        One of the seed URLs is mapped to an IP address which is not reserved
 *        for the current project. (Value:
 *        "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_ServiceAccountNotConfigured
 *        The Web Security Scanner service account is not configured under the
 *        project. (Value: "SERVICE_ACCOUNT_NOT_CONFIGURED")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_TooManyScans A
 *        project has reached the maximum number of scans. (Value:
 *        "TOO_MANY_SCANS")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_UnableToResolveProjectInfo
 *        Resolving the details of the current project fails. (Value:
 *        "UNABLE_TO_RESOLVE_PROJECT_INFO")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedBlacklistPatternFormat
 *        One or more blacklist patterns were in the wrong format. (Value:
 *        "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedFilter The
 *        supplied filter is not supported. (Value: "UNSUPPORTED_FILTER")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedFindingType
 *        The supplied finding type is not supported. For example, we do not
 *        provide findings of the given finding type. (Value:
 *        "UNSUPPORTED_FINDING_TYPE")
 *    @arg @c kGTLRWebSecurityScanner_ScanConfigError_Code_UnsupportedUrlScheme
 *        The URL scheme of one or more of the supplied URLs is not supported.
 *        (Value: "UNSUPPORTED_URL_SCHEME")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Output only. Indicates the full name of the ScanConfig field that triggers
 *  this error, for example "scan_config.max_qps". This field is provided for
 *  troubleshooting purposes only and its actual value can change in the future.
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

@end


/**
 *  A ScanRun is a output-only resource representing an actual run of the scan.
 *  Next id: 12
 */
@interface GTLRWebSecurityScanner_ScanRun : GTLRObject

/**
 *  Output only. The time at which the ScanRun reached termination state - that
 *  the ScanRun is either finished or stopped by user.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. If result_state is an ERROR, this field provides the primary
 *  reason for scan's termination and more details, if such are available.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_ScanRunErrorTrace *errorTrace;

/**
 *  Output only. The execution state of the ScanRun.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ExecutionState_ExecutionStateUnspecified
 *        Represents an invalid state caused by internal server error. This
 *        value should never be returned. (Value: "EXECUTION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ExecutionState_Finished The scan
 *        is either finished or stopped by user. (Value: "FINISHED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ExecutionState_Queued The scan is
 *        waiting in the queue. (Value: "QUEUED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ExecutionState_Scanning The scan
 *        is in progress. (Value: "SCANNING")
 */
@property(nonatomic, copy, nullable) NSString *executionState;

/**
 *  Output only. Whether the scan run has found any vulnerabilities.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasVulnerabilities;

/**
 *  Output only. The resource name of the ScanRun. The name follows the format
 *  of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
 *  The ScanRun IDs are generated by the system.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The percentage of total completion ranging from 0 to 100. If
 *  the scan is in queue, the value is 0. If the scan is running, the value
 *  ranges from 0 to 100. If the scan is finished, the value is 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressPercent;

/**
 *  Output only. The result state of the ScanRun. This field is only available
 *  after the execution state reaches "FINISHED".
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ResultState_Error The scan
 *        finished with errors. (Value: "ERROR")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ResultState_Killed The scan was
 *        terminated by user. (Value: "KILLED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ResultState_ResultStateUnspecified
 *        Default value. This value is returned when the ScanRun is not yet
 *        finished. (Value: "RESULT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRun_ResultState_Success The scan
 *        finished without errors. (Value: "SUCCESS")
 */
@property(nonatomic, copy, nullable) NSString *resultState;

/** Output only. The time at which the ScanRun started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The number of URLs crawled during this ScanRun. If the scan is
 *  in progress, the value represents the number of URLs crawled up to now.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *urlsCrawledCount;

/**
 *  Output only. The number of URLs tested during this ScanRun. If the scan is
 *  in progress, the value represents the number of URLs tested up to now. The
 *  number of URLs tested is usually larger than the number URLS crawled because
 *  typically a crawled URL is tested with multiple test payloads.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *urlsTestedCount;

/**
 *  Output only. A list of warnings, if such are encountered during this scan
 *  run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_ScanRunWarningTrace *> *warningTraces;

@end


/**
 *  Output only. Defines an error trace message for a ScanRun.
 */
@interface GTLRWebSecurityScanner_ScanRunErrorTrace : GTLRObject

/**
 *  Output only. Indicates the error reason code.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_AuthenticationConfigIssue
 *        Indicates an authentication error, usually due to outdated ScanConfig
 *        authentication settings. (Value: "AUTHENTICATION_CONFIG_ISSUE")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_CodeUnspecified
 *        Default value is never used. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_InternalError
 *        Indicates that the scan run failed due to an internal server error.
 *        (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_ScanConfigIssue
 *        Indicates a scan configuration error, usually due to outdated
 *        ScanConfig settings, such as starting_urls or the DNS configuration.
 *        (Value: "SCAN_CONFIG_ISSUE")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TimedOutWhileScanning
 *        Indicates a scan operation timeout, usually caused by a very large
 *        site. (Value: "TIMED_OUT_WHILE_SCANNING")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TooManyHttpErrors
 *        Indicates that a scan encountered numerous errors from the web site
 *        pages. When available, most_common_http_error_code field indicates the
 *        most common HTTP error code encountered during the scan. (Value:
 *        "TOO_MANY_HTTP_ERRORS")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunErrorTrace_Code_TooManyRedirects
 *        Indicates that a scan encountered excessive redirects, either to
 *        authentication or some other page outside of the scan scope. (Value:
 *        "TOO_MANY_REDIRECTS")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Output only. If the scan encounters TOO_MANY_HTTP_ERRORS, this field
 *  indicates the most common HTTP error code, if such is available. For
 *  example, if this code is 404, the scan has encountered too many NOT_FOUND
 *  responses.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mostCommonHttpErrorCode;

/**
 *  Output only. If the scan encounters SCAN_CONFIG_ISSUE error, this field has
 *  the error message encountered during scan configuration validation that is
 *  performed before each scan run.
 */
@property(nonatomic, strong, nullable) GTLRWebSecurityScanner_ScanConfigError *scanConfigError;

@end


/**
 *  Output only. Defines a warning trace message for ScanRun. Warning traces
 *  provide customers with useful information that helps make the scanning
 *  process more effective.
 */
@interface GTLRWebSecurityScanner_ScanRunWarningTrace : GTLRObject

/**
 *  Output only. Indicates the warning code.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_BlockedByIap
 *        Indicates that a scan is blocked by IAP. (Value: "BLOCKED_BY_IAP")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_CodeUnspecified
 *        Default value is never used. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_InsufficientCrawlResults
 *        Indicates that a scan discovered an unexpectedly low number of URLs.
 *        This is sometimes caused by complex navigation features or by using a
 *        single URL for numerous pages. (Value: "INSUFFICIENT_CRAWL_RESULTS")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_NoStartingUrlFoundForManagedScan
 *        Indicates that no seeds is found for a scan (Value:
 *        "NO_STARTING_URL_FOUND_FOR_MANAGED_SCAN")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_TooManyCrawlResults
 *        Indicates that a scan discovered too many URLs to test, or excessive
 *        redundant URLs. (Value: "TOO_MANY_CRAWL_RESULTS")
 *    @arg @c kGTLRWebSecurityScanner_ScanRunWarningTrace_Code_TooManyFuzzTasks
 *        Indicates that too many tests have been generated for the scan.
 *        Customer should try reducing the number of starting URLs, increasing
 *        the QPS rate, or narrowing down the scope of the scan using the
 *        excluded patterns. (Value: "TOO_MANY_FUZZ_TASKS")
 */
@property(nonatomic, copy, nullable) NSString *code;

@end


/**
 *  Scan schedule configuration.
 */
@interface GTLRWebSecurityScanner_Schedule : GTLRObject

/**
 *  Required. The duration of time between executions in days.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intervalDurationDays;

/**
 *  A timestamp indicates when the next run will be scheduled. The value is
 *  refreshed by the server after each run. If unspecified, it will default to
 *  current server time, which means the scan will be scheduled to start
 *  immediately.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Request for the `StartScanRun` method.
 */
@interface GTLRWebSecurityScanner_StartScanRunRequest : GTLRObject
@end


/**
 *  Request for the `StopScanRun` method.
 */
@interface GTLRWebSecurityScanner_StopScanRunRequest : GTLRObject
@end


/**
 *  Information regarding any resource causing the vulnerability such as
 *  JavaScript sources, image, audio files, etc.
 */
@interface GTLRWebSecurityScanner_ViolatingResource : GTLRObject

/** The MIME type of this resource. */
@property(nonatomic, copy, nullable) NSString *contentType;

/** URL of this violating resource. */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

@end


/**
 *  Information about vulnerable or missing HTTP Headers.
 */
@interface GTLRWebSecurityScanner_VulnerableHeaders : GTLRObject

/** List of vulnerable headers. */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_Header *> *headers;

/** List of missing headers. */
@property(nonatomic, strong, nullable) NSArray<GTLRWebSecurityScanner_Header *> *missingHeaders;

@end


/**
 *  Information about vulnerable request parameters.
 */
@interface GTLRWebSecurityScanner_VulnerableParameters : GTLRObject

/** The vulnerable parameter names. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *parameterNames;

@end


/**
 *  Information reported for an XSS.
 */
@interface GTLRWebSecurityScanner_Xss : GTLRObject

/**
 *  The attack vector of the payload triggering this XSS.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_AttackVectorUnspecified
 *        Unknown attack vector. (Value: "ATTACK_VECTOR_UNSPECIFIED")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_Cookie The attack comes
 *        from fuzzing the browser's cookies. (Value: "COOKIE")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_FormInput The attack
 *        comes from fuzzing an input element. (Value: "FORM_INPUT")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_GetParameters The attack
 *        comes from fuzzing parameters in the url. (Value: "GET_PARAMETERS")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_HtmlComment The attack
 *        comes from fuzzing the HTML comments. (Value: "HTML_COMMENT")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_LocalStorage The attack
 *        comes from fuzzing the browser's localStorage. (Value:
 *        "LOCAL_STORAGE")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_PostMessage The attack
 *        comes from hijacking the post messaging mechanism. (Value:
 *        "POST_MESSAGE")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_PostParameters The attack
 *        comes from fuzzing the POST parameters. (Value: "POST_PARAMETERS")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_Protocol The attack comes
 *        from fuzzing the protocol. (Value: "PROTOCOL")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_Referrer The attack comes
 *        from fuzzing the referrer property. (Value: "REFERRER")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_SameOrigin The attack is
 *        a Same-Origin Method Execution attack via a GET parameter. (Value:
 *        "SAME_ORIGIN")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_SessionStorage The attack
 *        comes from fuzzing the browser's sessionStorage. (Value:
 *        "SESSION_STORAGE")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_StoredXss The attack
 *        comes from the server side and is stored. (Value: "STORED_XSS")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_UrlFragment The attack
 *        comes from fuzzing the fragment in the url. (Value: "URL_FRAGMENT")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_UserControllableUrl The
 *        attack payload is received from a third-party host via a URL that is
 *        user-controllable (Value: "USER_CONTROLLABLE_URL")
 *    @arg @c kGTLRWebSecurityScanner_Xss_AttackVector_WindowName The attack
 *        comes from fuzzing the window's name property. (Value: "WINDOW_NAME")
 */
@property(nonatomic, copy, nullable) NSString *attackVector;

/** An error message generated by a javascript breakage. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** Stack traces leading to the point where the XSS occurred. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *stackTraces;

/** The reproduction url for the seeding POST request of a Stored XSS. */
@property(nonatomic, copy, nullable) NSString *storedXssSeedingUrl;

@end


/**
 *  Information reported for an XXE.
 */
@interface GTLRWebSecurityScanner_Xxe : GTLRObject

/**
 *  Location within the request where the payload was placed.
 *
 *  Likely values:
 *    @arg @c kGTLRWebSecurityScanner_Xxe_PayloadLocation_CompleteRequestBody
 *        The XML payload replaced the complete request body. (Value:
 *        "COMPLETE_REQUEST_BODY")
 *    @arg @c kGTLRWebSecurityScanner_Xxe_PayloadLocation_LocationUnspecified
 *        Unknown Location. (Value: "LOCATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *payloadLocation;

/**
 *  The XML string that triggered the XXE vulnerability. Non-payload values
 *  might be redacted.
 */
@property(nonatomic, copy, nullable) NSString *payloadValue;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
