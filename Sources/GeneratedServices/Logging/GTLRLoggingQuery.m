// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Cloud Logging configuration.
// Documentation:
//   https://cloud.google.com/logging/docs/

#import <GoogleAPIClientForREST/GTLRLoggingQuery.h>

@implementation GTLRLoggingQuery

@dynamic fields;

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_BillingAccountsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_BillingAccountsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.billingAccounts.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.billingAccounts.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsGetCmekSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_BillingAccountsGetCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.billingAccounts.getCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsGetSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_BillingAccountsGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.billingAccounts.getSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsCreate

@dynamic bucketId, parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListBucketsResponse class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.undelete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsCreate

@dynamic parent, viewId;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListViewsResponse class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsBucketsViewsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.billingAccounts.locations.buckets.views.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Location class];
  query.loggingName = @"logging.billingAccounts.locations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRLoggingQuery_BillingAccountsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListLocationsResponse class];
  query.loggingName = @"logging.billingAccounts.locations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRLoggingQuery_BillingAccountsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_BillingAccountsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.billingAccounts.locations.operations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRLoggingQuery_BillingAccountsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListOperationsResponse class];
  query.loggingName = @"logging.billingAccounts.locations.operations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_BillingAccountsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_BillingAccountsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.billingAccounts.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_BillingAccountsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.billingAccounts.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_BillingAccountsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.billingAccounts.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_BillingAccountsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_BillingAccountsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.billingAccounts.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesCopy

+ (instancetype)queryWithObject:(GTLRLogging_CopyLogEntriesRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:copy";
  GTLRLoggingQuery_EntriesCopy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.entries.copy";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesList

+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:list";
  GTLRLoggingQuery_EntriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_ListLogEntriesResponse class];
  query.loggingName = @"logging.entries.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesTail

+ (instancetype)queryWithObject:(GTLRLogging_TailLogEntriesRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:tail";
  GTLRLoggingQuery_EntriesTail *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_TailLogEntriesResponse class];
  query.loggingName = @"logging.entries.tail";
  return query;
}

@end

@implementation GTLRLoggingQuery_EntriesWrite

+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v2/entries:write";
  GTLRLoggingQuery_EntriesWrite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRLogging_WriteLogEntriesResponse class];
  query.loggingName = @"logging.entries.write";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_FoldersExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_FoldersExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.folders.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.folders.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersGetCmekSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_FoldersGetCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.folders.getCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersGetSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_FoldersGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.folders.getSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsCreate

@dynamic bucketId, parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_FoldersLocationsBucketsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.folders.locations.buckets.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.locations.buckets.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.folders.locations.buckets.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_FoldersLocationsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListBucketsResponse class];
  query.loggingName = @"logging.folders.locations.buckets.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.folders.locations.buckets.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRLoggingQuery_FoldersLocationsBucketsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.locations.buckets.undelete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsCreate

@dynamic parent, viewId;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.folders.locations.buckets.views.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.locations.buckets.views.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.folders.locations.buckets.views.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListViewsResponse class];
  query.loggingName = @"logging.folders.locations.buckets.views.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.folders.locations.buckets.views.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsBucketsViewsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsBucketsViewsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.folders.locations.buckets.views.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Location class];
  query.loggingName = @"logging.folders.locations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRLoggingQuery_FoldersLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListLocationsResponse class];
  query.loggingName = @"logging.folders.locations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRLoggingQuery_FoldersLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_FoldersLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.folders.locations.operations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRLoggingQuery_FoldersLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListOperationsResponse class];
  query.loggingName = @"logging.folders.locations.operations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_FoldersLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_FoldersLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.folders.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_FoldersSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.folders.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_FoldersSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.folders.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_FoldersSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.folders.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_FoldersUpdateSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_Settings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_FoldersUpdateSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.folders.updateSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsCreate

@dynamic bucketId, parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_LocationsBucketsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.locations.buckets.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.locations.buckets.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.locations.buckets.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_LocationsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListBucketsResponse class];
  query.loggingName = @"logging.locations.buckets.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.locations.buckets.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRLoggingQuery_LocationsBucketsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.locations.buckets.undelete";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsViewsCreate

@dynamic parent, viewId;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_LocationsBucketsViewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.locations.buckets.views.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsViewsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsViewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.locations.buckets.views.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsViewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsViewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.locations.buckets.views.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsViewsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_LocationsBucketsViewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListViewsResponse class];
  query.loggingName = @"logging.locations.buckets.views.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsBucketsViewsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsBucketsViewsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.locations.buckets.views.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Location class];
  query.loggingName = @"logging.locations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRLoggingQuery_LocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListLocationsResponse class];
  query.loggingName = @"logging.locations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRLoggingQuery_LocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_LocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.locations.operations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_LocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRLoggingQuery_LocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListOperationsResponse class];
  query.loggingName = @"logging.locations.operations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_LogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_LogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_LogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_LogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_MonitoredResourceDescriptorsList

@dynamic pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/monitoredResourceDescriptors";
  GTLRLoggingQuery_MonitoredResourceDescriptorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRLogging_ListMonitoredResourceDescriptorsResponse class];
  query.loggingName = @"logging.monitoredResourceDescriptors.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_OrganizationsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_OrganizationsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.organizations.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.organizations.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsGetCmekSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_OrganizationsGetCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.organizations.getCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsGetSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_OrganizationsGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.organizations.getSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsCreate

@dynamic bucketId, parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_OrganizationsLocationsBucketsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.organizations.locations.buckets.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.locations.buckets.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.organizations.locations.buckets.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_OrganizationsLocationsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListBucketsResponse class];
  query.loggingName = @"logging.organizations.locations.buckets.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.organizations.locations.buckets.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRLoggingQuery_OrganizationsLocationsBucketsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.locations.buckets.undelete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsCreate

@dynamic parent, viewId;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.organizations.locations.buckets.views.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.locations.buckets.views.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.organizations.locations.buckets.views.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListViewsResponse class];
  query.loggingName = @"logging.organizations.locations.buckets.views.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.organizations.locations.buckets.views.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsBucketsViewsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsBucketsViewsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.organizations.locations.buckets.views.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Location class];
  query.loggingName = @"logging.organizations.locations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRLoggingQuery_OrganizationsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListLocationsResponse class];
  query.loggingName = @"logging.organizations.locations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRLoggingQuery_OrganizationsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_OrganizationsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.organizations.locations.operations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRLoggingQuery_OrganizationsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListOperationsResponse class];
  query.loggingName = @"logging.organizations.locations.operations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_OrganizationsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_OrganizationsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.organizations.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_OrganizationsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.organizations.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_OrganizationsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.organizations.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_OrganizationsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.organizations.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsUpdateCmekSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_CmekSettings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_OrganizationsUpdateCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.organizations.updateCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_OrganizationsUpdateSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_Settings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_OrganizationsUpdateSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.organizations.updateSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ProjectsExclusionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.exclusions.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/exclusions";
  GTLRLoggingQuery_ProjectsExclusionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListExclusionsResponse class];
  query.loggingName = @"logging.projects.exclusions.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsExclusionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogExclusion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsExclusionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogExclusion class];
  query.loggingName = @"logging.projects.exclusions.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsGetCmekSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_ProjectsGetCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.projects.getCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsGetSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_ProjectsGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.projects.getSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsCreate

@dynamic bucketId, parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_ProjectsLocationsBucketsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.projects.locations.buckets.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.locations.buckets.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.projects.locations.buckets.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/buckets";
  GTLRLoggingQuery_ProjectsLocationsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListBucketsResponse class];
  query.loggingName = @"logging.projects.locations.buckets.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogBucket *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogBucket class];
  query.loggingName = @"logging.projects.locations.buckets.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_UndeleteBucketRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:undelete";
  GTLRLoggingQuery_ProjectsLocationsBucketsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.locations.buckets.undelete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsCreate

@dynamic parent, viewId;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.projects.locations.buckets.views.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.locations.buckets.views.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.projects.locations.buckets.views.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/views";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListViewsResponse class];
  query.loggingName = @"logging.projects.locations.buckets.views.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.projects.locations.buckets.views.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsBucketsViewsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogView *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsBucketsViewsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_LogView class];
  query.loggingName = @"logging.projects.locations.buckets.views.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Location class];
  query.loggingName = @"logging.projects.locations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRLoggingQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListLocationsResponse class];
  query.loggingName = @"logging.projects.locations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRLogging_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRLoggingQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRLoggingQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Operation class];
  query.loggingName = @"logging.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRLoggingQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_ListOperationsResponse class];
  query.loggingName = @"logging.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLogsDelete

@dynamic logName;

+ (instancetype)queryWithLogName:(NSString *)logName {
  NSArray *pathParams = @[ @"logName" ];
  NSString *pathURITemplate = @"v2/{+logName}";
  GTLRLoggingQuery_ProjectsLogsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.logName = logName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.logs.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsLogsList

@dynamic pageSize, pageToken, parent, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/logs";
  GTLRLoggingQuery_ProjectsLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogsResponse class];
  query.loggingName = @"logging.projects.logs.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/metrics";
  GTLRLoggingQuery_ProjectsMetricsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsDelete

@dynamic metricName;

+ (instancetype)queryWithMetricName:(NSString *)metricName {
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.metrics.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsGet

@dynamic metricName;

+ (instancetype)queryWithMetricName:(NSString *)metricName {
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/metrics";
  GTLRLoggingQuery_ProjectsMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListLogMetricsResponse class];
  query.loggingName = @"logging.projects.metrics.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsMetricsUpdate

@dynamic metricName;

+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"metricName" ];
  NSString *pathURITemplate = @"v2/{+metricName}";
  GTLRLoggingQuery_ProjectsMetricsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.metricName = metricName;
  query.expectedObjectClass = [GTLRLogging_LogMetric class];
  query.loggingName = @"logging.projects.metrics.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_ProjectsSinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.projects.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_ProjectsSinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.projects.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksPatch

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.patch";
  return query;
}

@end

@implementation GTLRLoggingQuery_ProjectsSinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_ProjectsSinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.projects.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksCreate

@dynamic parent, uniqueWriterIdentity;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_SinksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.create";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksDelete

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_Empty class];
  query.loggingName = @"logging.sinks.delete";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksGet

@dynamic sinkName;

+ (instancetype)queryWithSinkName:(NSString *)sinkName {
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.get";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/sinks";
  GTLRLoggingQuery_SinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRLogging_ListSinksResponse class];
  query.loggingName = @"logging.sinks.list";
  return query;
}

@end

@implementation GTLRLoggingQuery_SinksUpdate

@dynamic sinkName, uniqueWriterIdentity, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"sinkName" ];
  NSString *pathURITemplate = @"v2/{+sinkName}";
  GTLRLoggingQuery_SinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.sinkName = sinkName;
  query.expectedObjectClass = [GTLRLogging_LogSink class];
  query.loggingName = @"logging.sinks.update";
  return query;
}

@end

@implementation GTLRLoggingQuery_V2GetCmekSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_V2GetCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.getCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_V2GetSettings

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_V2GetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.getSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_V2UpdateCmekSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_CmekSettings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/cmekSettings";
  GTLRLoggingQuery_V2UpdateCmekSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_CmekSettings class];
  query.loggingName = @"logging.updateCmekSettings";
  return query;
}

@end

@implementation GTLRLoggingQuery_V2UpdateSettings

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRLogging_Settings *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/settings";
  GTLRLoggingQuery_V2UpdateSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRLogging_Settings class];
  query.loggingName = @"logging.updateSettings";
  return query;
}

@end
