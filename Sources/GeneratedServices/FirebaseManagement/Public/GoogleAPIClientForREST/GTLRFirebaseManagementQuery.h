// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Management API (firebase/v1beta1)
// Description:
//   The Firebase Management API enables programmatic setup and management of
//   Firebase projects, including a project's Firebase resources and Firebase
//   apps.
// Documentation:
//   https://firebase.google.com

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebaseManagementObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase Management query classes.
 */
@interface GTLRFirebaseManagementQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists each [Google Cloud Platform (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects) that
 *  can have Firebase resources added to it. A Project will only be listed if: -
 *  The caller has sufficient [Google IAM](https://cloud.google.com/iam)
 *  permissions to call AddFirebase. - The Project is not already a
 *  FirebaseProject. - The Project is not in an Organization which has policies
 *  that prevent Firebase resources from being added.
 *
 *  Method: firebase.availableProjects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_AvailableProjectsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of Projects to return in the response. The server may
 *  return fewer than this value at its discretion. If no value is specified (or
 *  too large a value is specified), the server will impose its own limit. This
 *  value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAvailableProjects` indicating
 *  where in the set of Projects to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAvailableProjectsResponse.
 *
 *  Lists each [Google Cloud Platform (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects) that
 *  can have Firebase resources added to it. A Project will only be listed if: -
 *  The caller has sufficient [Google IAM](https://cloud.google.com/iam)
 *  permissions to call AddFirebase. - The Project is not already a
 *  FirebaseProject. - The Project is not in an Organization which has policies
 *  that prevent Firebase resources from being added.
 *
 *  @return GTLRFirebaseManagementQuery_AvailableProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firebase.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_OperationsGet : GTLRFirebaseManagementQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirebaseManagementQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Adds Firebase resources to the specified existing [Google Cloud Platform
 *  (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
 *  Since a FirebaseProject is actually also a GCP `Project`, a
 *  `FirebaseProject` has the same underlying GCP identifiers (`projectNumber`
 *  and `projectId`). This allows for easy interop with Google APIs. The result
 *  of this call is an [`Operation`](../../v1beta1/operations). Poll the
 *  `Operation` to track the provisioning process by calling GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a
 *  FirebaseProject; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. The `Operation` is automatically deleted after
 *  completion, so there is no need to call DeleteOperation. This method does
 *  not modify any billing account information on the underlying GCP `Project`.
 *  To call `AddFirebase`, a project member or service account must have the
 *  following permissions (the IAM roles of Editor and Owner contain these
 *  permissions): `firebase.projects.update`, `resourcemanager.projects.get`,
 *  `serviceusage.services.enable`, and `serviceusage.services.get`.
 *
 *  Method: firebase.projects.addFirebase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAddFirebase : GTLRFirebaseManagementQuery

/**
 *  The resource name of the GCP `Project` to which Firebase resources will be
 *  added, in the format: projects/PROJECT_IDENTIFIER Refer to the
 *  `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER values. After calling `AddFirebase`,
 *  the unique Project identifiers (
 *  [`projectNumber`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_number)
 *  and
 *  [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id))
 *  of the underlying GCP `Project` are also the identifiers of the
 *  FirebaseProject.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Adds Firebase resources to the specified existing [Google Cloud Platform
 *  (GCP) `Project`]
 *  (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
 *  Since a FirebaseProject is actually also a GCP `Project`, a
 *  `FirebaseProject` has the same underlying GCP identifiers (`projectNumber`
 *  and `projectId`). This allows for easy interop with Google APIs. The result
 *  of this call is an [`Operation`](../../v1beta1/operations). Poll the
 *  `Operation` to track the provisioning process by calling GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a
 *  FirebaseProject; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. The `Operation` is automatically deleted after
 *  completion, so there is no need to call DeleteOperation. This method does
 *  not modify any billing account information on the underlying GCP `Project`.
 *  To call `AddFirebase`, a project member or service account must have the
 *  following permissions (the IAM roles of Editor and Owner contain these
 *  permissions): `firebase.projects.update`, `resourcemanager.projects.get`,
 *  `serviceusage.services.enable`, and `serviceusage.services.get`.
 *
 *  @param object The @c GTLRFirebaseManagement_AddFirebaseRequest to include in
 *    the query.
 *  @param project The resource name of the GCP `Project` to which Firebase
 *    resources will be added, in the format: projects/PROJECT_IDENTIFIER Refer
 *    to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER values. After calling
 *    `AddFirebase`, the unique Project identifiers (
 *    [`projectNumber`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_number)
 *    and
 *    [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id))
 *    of the underlying GCP `Project` are also the identifiers of the
 *    FirebaseProject.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAddFirebase
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AddFirebaseRequest *)object
                        project:(NSString *)project;

@end

/**
 *  Links the specified FirebaseProject with an existing [Google Analytics
 *  account](http://www.google.com/analytics/). Using this call, you can either:
 *  - Specify an `analyticsAccountId` to provision a new Google Analytics
 *  property within the specified account and associate the new property with
 *  the `FirebaseProject`. - Specify an existing `analyticsPropertyId` to
 *  associate the property with the `FirebaseProject`. Note that when you call
 *  `AddGoogleAnalytics`: 1. The first check determines if any existing data
 *  streams in the Google Analytics property correspond to any existing Firebase
 *  Apps in the `FirebaseProject` (based on the `packageName` or `bundleId`
 *  associated with the data stream). Then, as applicable, the data streams and
 *  apps are linked. Note that this auto-linking only applies to `AndroidApps`
 *  and `IosApps`. 2. If no corresponding data streams are found for the
 *  Firebase Apps, new data streams are provisioned in the Google Analytics
 *  property for each of the Firebase Apps. Note that a new data stream is
 *  always provisioned for a Web App even if it was previously associated with a
 *  data stream in the Analytics property. Learn more about the hierarchy and
 *  structure of Google Analytics accounts in the [Analytics
 *  documentation](https://support.google.com/analytics/answer/9303323). The
 *  result of this call is an [`Operation`](../../v1beta1/operations). Poll the
 *  `Operation` to track the provisioning process by calling GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  an AnalyticsDetails; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. To call `AddGoogleAnalytics`, a project member must be an
 *  Owner for the existing `FirebaseProject` and have the [`Edit`
 *  permission](https://support.google.com/analytics/answer/2884495) for the
 *  Google Analytics account. If the `FirebaseProject` already has Google
 *  Analytics enabled, and you call `AddGoogleAnalytics` using an
 *  `analyticsPropertyId` that's different from the currently associated
 *  property, then the call will fail. Analytics may have already been enabled
 *  in the Firebase console or by specifying `timeZone` and `regionCode` in the
 *  call to [`AddFirebase`](../../v1beta1/projects/addFirebase).
 *
 *  Method: firebase.projects.addGoogleAnalytics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAddGoogleAnalytics : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject to link to an existing Google
 *  Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer to the
 *  `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Links the specified FirebaseProject with an existing [Google Analytics
 *  account](http://www.google.com/analytics/). Using this call, you can either:
 *  - Specify an `analyticsAccountId` to provision a new Google Analytics
 *  property within the specified account and associate the new property with
 *  the `FirebaseProject`. - Specify an existing `analyticsPropertyId` to
 *  associate the property with the `FirebaseProject`. Note that when you call
 *  `AddGoogleAnalytics`: 1. The first check determines if any existing data
 *  streams in the Google Analytics property correspond to any existing Firebase
 *  Apps in the `FirebaseProject` (based on the `packageName` or `bundleId`
 *  associated with the data stream). Then, as applicable, the data streams and
 *  apps are linked. Note that this auto-linking only applies to `AndroidApps`
 *  and `IosApps`. 2. If no corresponding data streams are found for the
 *  Firebase Apps, new data streams are provisioned in the Google Analytics
 *  property for each of the Firebase Apps. Note that a new data stream is
 *  always provisioned for a Web App even if it was previously associated with a
 *  data stream in the Analytics property. Learn more about the hierarchy and
 *  structure of Google Analytics accounts in the [Analytics
 *  documentation](https://support.google.com/analytics/answer/9303323). The
 *  result of this call is an [`Operation`](../../v1beta1/operations). Poll the
 *  `Operation` to track the provisioning process by calling GetOperation until
 *  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
 *  `done` is `true`, the `Operation` has either succeeded or failed. If the
 *  `Operation` succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
 *  an AnalyticsDetails; if the `Operation` failed, its
 *  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
 *  google.rpc.Status. To call `AddGoogleAnalytics`, a project member must be an
 *  Owner for the existing `FirebaseProject` and have the [`Edit`
 *  permission](https://support.google.com/analytics/answer/2884495) for the
 *  Google Analytics account. If the `FirebaseProject` already has Google
 *  Analytics enabled, and you call `AddGoogleAnalytics` using an
 *  `analyticsPropertyId` that's different from the currently associated
 *  property, then the call will fail. Analytics may have already been enabled
 *  in the Firebase console or by specifying `timeZone` and `regionCode` in the
 *  call to [`AddFirebase`](../../v1beta1/projects/addFirebase).
 *
 *  @param object The @c GTLRFirebaseManagement_AddGoogleAnalyticsRequest to
 *    include in the query.
 *  @param parent The resource name of the FirebaseProject to link to an
 *    existing Google Analytics account, in the format:
 *    projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAddGoogleAnalytics
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AddGoogleAnalyticsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Requests the creation of a new AndroidApp in the specified FirebaseProject.
 *  The result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.androidApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsCreate : GTLRFirebaseManagementQuery

/**
 *  The resource name of the parent FirebaseProject in which to create an
 *  AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps Refer to
 *  the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *  field for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests the creation of a new AndroidApp in the specified FirebaseProject.
 *  The result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_AndroidApp to include in the
 *    query.
 *  @param parent The resource name of the parent FirebaseProject in which to
 *    create an AndroidApp, in the format:
 *    projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AndroidApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsGet : GTLRFirebaseManagementQuery

/**
 *  The resource name of the AndroidApp, in the format: projects/
 *  PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique
 *  identifier, the Unique Resource from Sub-Collection access pattern may be
 *  used here, in the format: projects/-/androidApps/APP_ID Refer to the
 *  `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidApp.
 *
 *  Gets the specified AndroidApp.
 *
 *  @param name The resource name of the AndroidApp, in the format: projects/
 *    PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/androidApps/APP_ID Refer to the
 *    `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsGetConfig : GTLRFirebaseManagementQuery

/**
 *  The resource name of the AndroidApp configuration to download, in the
 *  format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an
 *  APP_ID is a unique identifier, the Unique Resource from Sub-Collection
 *  access pattern may be used here, in the format:
 *  projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *  [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *  about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidAppConfig.
 *
 *  Gets the configuration artifact associated with the specified AndroidApp.
 *
 *  @param name The resource name of the AndroidApp configuration to download,
 *    in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since
 *    an APP_ID is a unique identifier, the Unique Resource from Sub-Collection
 *    access pattern may be used here, in the format:
 *    projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *    [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *    about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each AndroidApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  Method: firebase.projects.androidApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of Apps to return in the response. The server may return
 *  fewer than this at its discretion. If no value is specified (or too large a
 *  value is specified), then the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAndroidApps` indicating where in
 *  the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent FirebaseProject for which to list each
 *  associated AndroidApp, in the format: projects/PROJECT_IDENTIFIER
 *  /androidApps Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls whether Apps in the DELETED state should be returned in the
 *  response. If not specified, only `ACTIVE` Apps will be returned.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAndroidAppsResponse.
 *
 *  Lists each AndroidApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  @param parent The resource name of the parent FirebaseProject for which to
 *    list each associated AndroidApp, in the format:
 *    projects/PROJECT_IDENTIFIER /androidApps Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsPatch : GTLRFirebaseManagementQuery

/**
 *  The resource name of the AndroidApp, in the format: projects/
 *  PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent
 *  Project's
 *  [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *  ***(recommended)*** or its
 *  [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *  about using project identifiers in Google's [AIP 2510
 *  standard](https://google.aip.dev/cloud/2510). Note that the value for
 *  PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *  the globally unique, Firebase-assigned identifier for the App (see
 *  [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields of the AndroidApp to update. Note that the following
 *  fields are immutable: `name`, `app_id`, `project_id`, and `package_name`. To
 *  update `state`, use any of the following endpoints: RemoveAndroidApp or
 *  UndeleteAndroidApp.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_AndroidApp.
 *
 *  Updates the attributes of the specified AndroidApp.
 *
 *  @param object The @c GTLRFirebaseManagement_AndroidApp to include in the
 *    query.
 *  @param name The resource name of the AndroidApp, in the format: projects/
 *    PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent
 *    Project's
 *    [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *    ***(recommended)*** or its
 *    [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *    about using project identifiers in Google's [AIP 2510
 *    standard](https://google.aip.dev/cloud/2510). Note that the value for
 *    PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *    the globally unique, Firebase-assigned identifier for the App (see
 *    [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_AndroidApp *)object
                           name:(NSString *)name;

@end

/**
 *  Removes the specified AndroidApp from the FirebaseProject.
 *
 *  Method: firebase.projects.androidApps.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsRemove : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the AndroidApp, in the format: projects/
 *  PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique
 *  identifier, the Unique Resource from Sub-Collection access pattern may be
 *  used here, in the format: projects/-/androidApps/APP_ID Refer to the
 *  AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field for
 *  details about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Removes the specified AndroidApp from the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_RemoveAndroidAppRequest to
 *    include in the query.
 *  @param name Required. The resource name of the AndroidApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a
 *    unique identifier, the Unique Resource from Sub-Collection access pattern
 *    may be used here, in the format: projects/-/androidApps/APP_ID Refer to
 *    the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsRemove
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_RemoveAndroidAppRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Adds a ShaCertificate to the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaCreate : GTLRFirebaseManagementQuery

/**
 *  The resource name of the parent AndroidApp to which to add a ShaCertificate,
 *  in the format: projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an
 *  APP_ID is a unique identifier, the Unique Resource from Sub-Collection
 *  access pattern may be used here, in the format:
 *  projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *  [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *  about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ShaCertificate.
 *
 *  Adds a ShaCertificate to the specified AndroidApp.
 *
 *  @param object The @c GTLRFirebaseManagement_ShaCertificate to include in the
 *    query.
 *  @param parent The resource name of the parent AndroidApp to which to add a
 *    ShaCertificate, in the format: projects/PROJECT_IDENTIFIER/androidApps/
 *    APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
 *    Sub-Collection access pattern may be used here, in the format:
 *    projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *    [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *    about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_ShaCertificate *)object
                         parent:(NSString *)parent;

@end

/**
 *  Removes a ShaCertificate from the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaDelete : GTLRFirebaseManagementQuery

/**
 *  The resource name of the ShaCertificate to remove from the parent
 *  AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID
 *  /sha/SHA_HASH Refer to the `ShaCertificate`
 *  [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for
 *  details about PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can
 *  obtain the full resource name of the `ShaCertificate` from the response of
 *  [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
 *  [`CreateShaCertificate`](../projects.androidApps.sha/create).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Empty.
 *
 *  Removes a ShaCertificate from the specified AndroidApp.
 *
 *  @param name The resource name of the ShaCertificate to remove from the
 *    parent AndroidApp, in the format:
 *    projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the
 *    `ShaCertificate`
 *    [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for
 *    details about PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can
 *    obtain the full resource name of the `ShaCertificate` from the response of
 *    [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
 *    [`CreateShaCertificate`](../projects.androidApps.sha/create).
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp.
 *
 *  Method: firebase.projects.androidApps.sha.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaList : GTLRFirebaseManagementQuery

/**
 *  The resource name of the parent AndroidApp for which to list each associated
 *  ShaCertificate, in the format: projects/PROJECT_IDENTIFIER
 *  /androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique
 *  Resource from Sub-Collection access pattern may be used here, in the format:
 *  projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *  [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *  about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListShaCertificatesResponse.
 *
 *  Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp.
 *
 *  @param parent The resource name of the parent AndroidApp for which to list
 *    each associated ShaCertificate, in the format: projects/PROJECT_IDENTIFIER
 *    /androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique
 *    Resource from Sub-Collection access pattern may be used here, in the
 *    format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
 *    [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
 *    about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsShaList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Restores the specified AndroidApp to the FirebaseProject.
 *
 *  Method: firebase.projects.androidApps.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsAndroidAppsUndelete : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the AndroidApp, in the format: projects/
 *  PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique
 *  identifier, the Unique Resource from Sub-Collection access pattern may be
 *  used here, in the format: projects/-/androidApps/APP_ID Refer to the
 *  AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field for
 *  details about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Restores the specified AndroidApp to the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_UndeleteAndroidAppRequest to
 *    include in the query.
 *  @param name Required. The resource name of the AndroidApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a
 *    unique identifier, the Unique Resource from Sub-Collection access pattern
 *    may be used here, in the format: projects/-/androidApps/APP_ID Refer to
 *    the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAndroidAppsUndelete
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_UndeleteAndroidAppRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the valid Google Cloud Platform (GCP) resource locations for the
 *  specified Project (including a FirebaseProject). One of these locations can
 *  be selected as the Project's [_default_ GCP resource
 *  location](https://firebase.google.com/docs/projects/locations), which is the
 *  geographical location where the Project's resources, such as Cloud
 *  Firestore, will be provisioned by default. However, if the default GCP
 *  resource location has already been set for the Project, then this setting
 *  cannot be changed. This call checks for any possible [location
 *  restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations)
 *  for the specified Project and, thus, might return a subset of all possible
 *  GCP resource locations. To list all GCP resource locations (regardless of
 *  any restrictions), call the endpoint without specifying a unique project
 *  identifier (that is, `/v1beta1/{parent=projects/-}/listAvailableLocations`).
 *  To call `ListAvailableLocations` with a specified project, a member must be
 *  at minimum a Viewer of the Project. Calls without a specified project do not
 *  require any specific project permissions.
 *
 *  Method: firebase.projects.availableLocations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsAvailableLocationsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of locations to return in the response. The server may
 *  return fewer than this value at its discretion. If no value is specified (or
 *  too large a value is specified), then the server will impose its own limit.
 *  This value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListAvailableLocations` indicating
 *  where in the list of locations to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The FirebaseProject for which to list GCP resource locations, in the format:
 *  projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values. If no unique project identifier is specified
 *  (that is, `projects/-`), the returned list does not take into account
 *  org-specific or project-specific location restrictions.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListAvailableLocationsResponse.
 *
 *  Lists the valid Google Cloud Platform (GCP) resource locations for the
 *  specified Project (including a FirebaseProject). One of these locations can
 *  be selected as the Project's [_default_ GCP resource
 *  location](https://firebase.google.com/docs/projects/locations), which is the
 *  geographical location where the Project's resources, such as Cloud
 *  Firestore, will be provisioned by default. However, if the default GCP
 *  resource location has already been set for the Project, then this setting
 *  cannot be changed. This call checks for any possible [location
 *  restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations)
 *  for the specified Project and, thus, might return a subset of all possible
 *  GCP resource locations. To list all GCP resource locations (regardless of
 *  any restrictions), call the endpoint without specifying a unique project
 *  identifier (that is, `/v1beta1/{parent=projects/-}/listAvailableLocations`).
 *  To call `ListAvailableLocations` with a specified project, a member must be
 *  at minimum a Viewer of the Project. Calls without a specified project do not
 *  require any specific project permissions.
 *
 *  @param parent The FirebaseProject for which to list GCP resource locations,
 *    in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values. If no unique project identifier is specified
 *    (that is, `projects/-`), the returned list does not take into account
 *    org-specific or project-specific location restrictions.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsAvailableLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the default Google Cloud Platform (GCP) resource location for the
 *  specified FirebaseProject. This method creates an App Engine application
 *  with a [default Cloud Storage
 *  bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
 *  located in the specified
 *  [`locationId`](#body.request_body.FIELDS.location_id). This location must be
 *  one of the available [GCP resource
 *  locations](https://firebase.google.com/docs/projects/locations). After the
 *  default GCP resource location is finalized, or if it was already set, it
 *  cannot be changed. The default GCP resource location for the specified
 *  `FirebaseProject` might already be set because either the underlying GCP
 *  `Project` already has an App Engine application or `FinalizeDefaultLocation`
 *  was previously called with a specified `locationId`. Any new calls to
 *  `FinalizeDefaultLocation` with a *different* specified `locationId` will
 *  return a 409 error. The result of this call is an
 *  [`Operation`](../../v1beta1/operations), which can be used to track the
 *  provisioning process. The
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the
 *  `Operation` is google.protobuf.Empty. The `Operation` can be polled by its
 *  `name` using GetOperation until `done` is true. When `done` is true, the
 *  `Operation` has either succeeded or failed. If the `Operation` has
 *  succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be set
 *  to a google.protobuf.Empty; if the `Operation` has failed, its `error` will
 *  be set to a google.rpc.Status. The `Operation` is automatically deleted
 *  after completion, so there is no need to call DeleteOperation. All fields
 *  listed in the [request body](#request-body) are required. To call
 *  `FinalizeDefaultLocation`, a member must be an Owner of the Project.
 *
 *  Method: firebase.projects.defaultLocation.finalize
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsDefaultLocationFinalize : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject for which the default GCP resource
 *  location will be set, in the format: projects/PROJECT_IDENTIFIER Refer to
 *  the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *  field for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Sets the default Google Cloud Platform (GCP) resource location for the
 *  specified FirebaseProject. This method creates an App Engine application
 *  with a [default Cloud Storage
 *  bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
 *  located in the specified
 *  [`locationId`](#body.request_body.FIELDS.location_id). This location must be
 *  one of the available [GCP resource
 *  locations](https://firebase.google.com/docs/projects/locations). After the
 *  default GCP resource location is finalized, or if it was already set, it
 *  cannot be changed. The default GCP resource location for the specified
 *  `FirebaseProject` might already be set because either the underlying GCP
 *  `Project` already has an App Engine application or `FinalizeDefaultLocation`
 *  was previously called with a specified `locationId`. Any new calls to
 *  `FinalizeDefaultLocation` with a *different* specified `locationId` will
 *  return a 409 error. The result of this call is an
 *  [`Operation`](../../v1beta1/operations), which can be used to track the
 *  provisioning process. The
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the
 *  `Operation` is google.protobuf.Empty. The `Operation` can be polled by its
 *  `name` using GetOperation until `done` is true. When `done` is true, the
 *  `Operation` has either succeeded or failed. If the `Operation` has
 *  succeeded, its
 *  [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be set
 *  to a google.protobuf.Empty; if the `Operation` has failed, its `error` will
 *  be set to a google.rpc.Status. The `Operation` is automatically deleted
 *  after completion, so there is no need to call DeleteOperation. All fields
 *  listed in the [request body](#request-body) are required. To call
 *  `FinalizeDefaultLocation`, a member must be an Owner of the Project.
 *
 *  @param object The @c GTLRFirebaseManagement_FinalizeDefaultLocationRequest
 *    to include in the query.
 *  @param parent The resource name of the FirebaseProject for which the default
 *    GCP resource location will be set, in the format:
 *    projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsDefaultLocationFinalize
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_FinalizeDefaultLocationRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the specified FirebaseProject.
 *
 *  Method: firebase.projects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGet : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject, in the format: projects/
 *  PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_FirebaseProject.
 *
 *  Gets the specified FirebaseProject.
 *
 *  @param name The resource name of the FirebaseProject, in the format:
 *    projects/ PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified
 *  FirebaseProject, which can be used by servers to simplify initialization.
 *  Typically, this configuration is used with the Firebase Admin SDK
 *  [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
 *  command.
 *
 *  Method: firebase.projects.getAdminSdkConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGetAdminSdkConfig : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject, in the format: projects/
 *  PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AdminSdkConfig.
 *
 *  Gets the configuration artifact associated with the specified
 *  FirebaseProject, which can be used by servers to simplify initialization.
 *  Typically, this configuration is used with the Firebase Admin SDK
 *  [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
 *  command.
 *
 *  @param name The resource name of the FirebaseProject, in the format:
 *    projects/ PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGetAdminSdkConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the Google Analytics details currently associated with the specified
 *  FirebaseProject. If the `FirebaseProject` is not yet linked to Google
 *  Analytics, then the response to `GetAnalyticsDetails` is `NOT_FOUND`.
 *
 *  Method: firebase.projects.getAnalyticsDetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsGetAnalyticsDetails : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject, in the format: projects/
 *  PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_AnalyticsDetails.
 *
 *  Gets the Google Analytics details currently associated with the specified
 *  FirebaseProject. If the `FirebaseProject` is not yet linked to Google
 *  Analytics, then the response to `GetAnalyticsDetails` is `NOT_FOUND`.
 *
 *  @param name The resource name of the FirebaseProject, in the format:
 *    projects/ PROJECT_IDENTIFIER/analyticsDetails Refer to the
 *    `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *    for details about PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsGetAnalyticsDetails
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Requests the creation of a new IosApp in the specified FirebaseProject. The
 *  result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.iosApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsCreate : GTLRFirebaseManagementQuery

/**
 *  The resource name of the parent FirebaseProject in which to create an
 *  IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the
 *  `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests the creation of a new IosApp in the specified FirebaseProject. The
 *  result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_IosApp to include in the query.
 *  @param parent The resource name of the parent FirebaseProject in which to
 *    create an IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer
 *    to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_IosApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the specified IosApp.
 *
 *  Method: firebase.projects.iosApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsGet : GTLRFirebaseManagementQuery

/**
 *  The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
 *  /iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  projects/-/iosApps/APP_ID Refer to the `IosApp`
 *  [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosApp.
 *
 *  Gets the specified IosApp.
 *
 *  @param name The resource name of the IosApp, in the format:
 *    projects/PROJECT_IDENTIFIER /iosApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp`
 *    [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified IosApp.
 *
 *  Method: firebase.projects.iosApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsGetConfig : GTLRFirebaseManagementQuery

/**
 *  The resource name of the App configuration to download, in the format:
 *  projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a
 *  unique identifier, the Unique Resource from Sub-Collection access pattern
 *  may be used here, in the format: projects/-/iosApps/APP_ID Refer to the
 *  `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details
 *  about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosAppConfig.
 *
 *  Gets the configuration artifact associated with the specified IosApp.
 *
 *  @param name The resource name of the App configuration to download, in the
 *    format: projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID
 *    is a unique identifier, the Unique Resource from Sub-Collection access
 *    pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer
 *    to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name) field for
 *    details about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each IosApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  Method: firebase.projects.iosApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of Apps to return in the response. The server may return
 *  fewer than this at its discretion. If no value is specified (or too large a
 *  value is specified), the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListIosApps` indicating where in the
 *  set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent FirebaseProject for which to list each
 *  associated IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer
 *  to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *  field for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls whether Apps in the DELETED state should be returned in the
 *  response. If not specified, only `ACTIVE` Apps will be returned.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListIosAppsResponse.
 *
 *  Lists each IosApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  @param parent The resource name of the parent FirebaseProject for which to
 *    list each associated IosApp, in the format:
 *    projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the specified IosApp.
 *
 *  Method: firebase.projects.iosApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsPatch : GTLRFirebaseManagementQuery

/**
 *  The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
 *  /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
 *  [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *  ***(recommended)*** or its
 *  [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *  about using project identifiers in Google's [AIP 2510
 *  standard](https://google.aip.dev/cloud/2510). Note that the value for
 *  PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *  the globally unique, Firebase-assigned identifier for the App (see
 *  [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields of the IosApp to update. Note that the following
 *  fields are immutable: `name`, `app_id`, `project_id`, and `bundle_id`. To
 *  update `state`, use any of the following endpoints: RemoveIosApp or
 *  UndeleteIosApp.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_IosApp.
 *
 *  Updates the attributes of the specified IosApp.
 *
 *  @param object The @c GTLRFirebaseManagement_IosApp to include in the query.
 *  @param name The resource name of the IosApp, in the format:
 *    projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the
 *    parent Project's
 *    [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *    ***(recommended)*** or its
 *    [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *    about using project identifiers in Google's [AIP 2510
 *    standard](https://google.aip.dev/cloud/2510). Note that the value for
 *    PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *    the globally unique, Firebase-assigned identifier for the App (see
 *    [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_IosApp *)object
                           name:(NSString *)name;

@end

/**
 *  Removes the specified IosApp from the FirebaseProject.
 *
 *  Method: firebase.projects.iosApps.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsRemove : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the IosApp, in the format: projects/
 *  PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier,
 *  the Unique Resource from Sub-Collection access pattern may be used here, in
 *  the format: projects/-/iosApps/APP_ID Refer to the IosApp
 *  [name](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Removes the specified IosApp from the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_RemoveIosAppRequest to include
 *    in the query.
 *  @param name Required. The resource name of the IosApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp
 *    [name](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsRemove
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_RemoveIosAppRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Restores the specified IosApp to the FirebaseProject.
 *
 *  Method: firebase.projects.iosApps.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsIosAppsUndelete : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the IosApp, in the format: projects/
 *  PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier,
 *  the Unique Resource from Sub-Collection access pattern may be used here, in
 *  the format: projects/-/iosApps/APP_ID Refer to the IosApp
 *  [name](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Restores the specified IosApp to the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_UndeleteIosAppRequest to include
 *    in the query.
 *  @param name Required. The resource name of the IosApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp
 *    [name](../projects.iosApps#IosApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsIosAppsUndelete
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_UndeleteIosAppRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists each FirebaseProject accessible to the caller. The elements are
 *  returned in no particular order, but they will be a consistent view of the
 *  Projects when additional requests are made with a `pageToken`. This method
 *  is eventually consistent with Project mutations, which means newly
 *  provisioned Projects and recent modifications to existing Projects might not
 *  be reflected in the set of Projects. The list will include only ACTIVE
 *  Projects. Use GetFirebaseProject for consistent reads as well as for
 *  additional Project details.
 *
 *  Method: firebase.projects.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of Projects to return in the response. The server may
 *  return fewer than this at its discretion. If no value is specified (or too
 *  large a value is specified), the server will impose its own limit. This
 *  value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListFirebaseProjects` indicating
 *  where in the set of Projects to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. Controls whether Projects in the DELETED state should be returned
 *  in the response. If not specified, only `ACTIVE` Projects will be returned.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListFirebaseProjectsResponse.
 *
 *  Lists each FirebaseProject accessible to the caller. The elements are
 *  returned in no particular order, but they will be a consistent view of the
 *  Projects when additional requests are made with a `pageToken`. This method
 *  is eventually consistent with Project mutations, which means newly
 *  provisioned Projects and recent modifications to existing Projects might not
 *  be reflected in the set of Projects. The list will include only ACTIVE
 *  Projects. Use GetFirebaseProject for consistent reads as well as for
 *  additional Project details.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates the attributes of the specified FirebaseProject. All [query
 *  parameters](#query-parameters) are required.
 *
 *  Method: firebase.projects.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsPatch : GTLRFirebaseManagementQuery

/**
 *  The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER
 *  PROJECT_IDENTIFIER: the Project's
 *  [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *  ***(recommended)*** or its
 *  [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *  about using project identifiers in Google's [AIP 2510
 *  standard](https://google.aip.dev/cloud/2510). Note that the value for
 *  PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields of the FirebaseProject to update. Note that the
 *  following fields are immutable: `name`, `project_id`, and `project_number`.
 *  To update `state`, use any of the following Google Cloud endpoints:
 *  [`projects.delete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/delete)
 *  or
 *  [`projects.undelete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/undelete)
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_FirebaseProject.
 *
 *  Updates the attributes of the specified FirebaseProject. All [query
 *  parameters](#query-parameters) are required.
 *
 *  @param object The @c GTLRFirebaseManagement_FirebaseProject to include in
 *    the query.
 *  @param name The resource name of the Project, in the format:
 *    projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's
 *    [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *    ***(recommended)*** or its
 *    [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *    about using project identifiers in Google's [AIP 2510
 *    standard](https://google.aip.dev/cloud/2510). Note that the value for
 *    PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_FirebaseProject *)object
                           name:(NSString *)name;

@end

/**
 *  Unlinks the specified FirebaseProject from its Google Analytics account.
 *  This call removes the association of the specified `FirebaseProject` with
 *  its current Google Analytics property. However, this call does not delete
 *  the Google Analytics resources, such as the Google Analytics property or any
 *  data streams. These resources may be re-associated later to the
 *  `FirebaseProject` by calling
 *  [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
 *  specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
 *  this call re-links data streams with their corresponding apps. However, for
 *  Web Apps, this call provisions a *new* data stream for each Web App. To call
 *  `RemoveAnalytics`, a project member must be an Owner for the
 *  `FirebaseProject`.
 *
 *  Method: firebase.projects.removeAnalytics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsRemoveAnalytics : GTLRFirebaseManagementQuery

/**
 *  The resource name of the FirebaseProject to unlink from its Google Analytics
 *  account, in the format: projects/PROJECT_IDENTIFIER Refer to the
 *  `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Empty.
 *
 *  Unlinks the specified FirebaseProject from its Google Analytics account.
 *  This call removes the association of the specified `FirebaseProject` with
 *  its current Google Analytics property. However, this call does not delete
 *  the Google Analytics resources, such as the Google Analytics property or any
 *  data streams. These resources may be re-associated later to the
 *  `FirebaseProject` by calling
 *  [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
 *  specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
 *  this call re-links data streams with their corresponding apps. However, for
 *  Web Apps, this call provisions a *new* data stream for each Web App. To call
 *  `RemoveAnalytics`, a project member must be an Owner for the
 *  `FirebaseProject`.
 *
 *  @param object The @c GTLRFirebaseManagement_RemoveAnalyticsRequest to
 *    include in the query.
 *  @param parent The resource name of the FirebaseProject to unlink from its
 *    Google Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer
 *    to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsRemoveAnalytics
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_RemoveAnalyticsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all available Apps for the specified FirebaseProject. This is a
 *  convenience method. Typically, interaction with an App should be done using
 *  the platform-specific service, but some tool use-cases require a summary of
 *  all known Apps (such as for App selector interfaces).
 *
 *  Method: firebase.projects.searchApps
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsSearchApps : GTLRFirebaseManagementQuery

/**
 *  A query string compatible with Google's
 *  [AIP-160](https://google.aip.dev/160) standard. Use any of the following
 *  fields in a query: *
 *  [`app_id`](../projects.apps#FirebaseAppInfo.FIELDS.app_id) *
 *  [`namespace`](../projects.apps#FirebaseAppInfo.FIELDS.namespace) *
 *  [`platform`](../projects.apps#FirebaseAppInfo.FIELDS.platform) We also
 *  support the following "virtual" fields (fields which are not actually part
 *  of the returned resource object, but can be queried as if they are
 *  pre-populated with specific values): * `sha1_hash` or `sha1_hashes`: This
 *  field is considered to be a repeated `string` field, populated with the list
 *  of all SHA-1 certificate fingerprints registered with the app. This list is
 *  empty if the app is not an Android app. * `sha256_hash` or `sha256_hashes`:
 *  This field is considered to be a repeated `string` field, populated with the
 *  list of all SHA-256 certificate fingerprints registered with the app. This
 *  list is empty if the app is not an Android app. * `app_store_id`: This field
 *  is considered to be a singular `string` field, populated with the Apple App
 *  Store ID registered with the app. This field is empty if the app is not an
 *  iOS app. * `team_id`: This field is considered to be a singular `string`
 *  field, populated with the Apple team ID registered with the app. This field
 *  is empty if the app is not an iOS app.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of Apps to return in the response. The server may return
 *  fewer than this value at its discretion. If no value is specified (or too
 *  large a value is specified), then the server will impose its own limit. This
 *  value cannot be negative.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `SearchFirebaseApps` indicating where
 *  in the set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent FirebaseProject for which to list Apps, in the format: projects/
 *  PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *  [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls whether Apps in the DELETED state should be returned. If not
 *  specified, only `ACTIVE` Apps will be returned.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseManagement_SearchFirebaseAppsResponse.
 *
 *  Lists all available Apps for the specified FirebaseProject. This is a
 *  convenience method. Typically, interaction with an App should be done using
 *  the platform-specific service, but some tool use-cases require a summary of
 *  all known Apps (such as for App selector interfaces).
 *
 *  @param parent The parent FirebaseProject for which to list Apps, in the
 *    format: projects/ PROJECT_IDENTIFIER Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsSearchApps
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Requests the creation of a new WebApp in the specified FirebaseProject. The
 *  result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  Method: firebase.projects.webApps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsCreate : GTLRFirebaseManagementQuery

/**
 *  The resource name of the parent FirebaseProject in which to create a WebApp,
 *  in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the
 *  `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field
 *  for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Requests the creation of a new WebApp in the specified FirebaseProject. The
 *  result of this call is an `Operation` which can be used to track the
 *  provisioning process. The `Operation` is automatically deleted after
 *  completion, so there is no need to call `DeleteOperation`.
 *
 *  @param object The @c GTLRFirebaseManagement_WebApp to include in the query.
 *  @param parent The resource name of the parent FirebaseProject in which to
 *    create a WebApp, in the format: projects/PROJECT_IDENTIFIER/webApps Refer
 *    to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_WebApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the specified WebApp.
 *
 *  Method: firebase.projects.webApps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsGet : GTLRFirebaseManagementQuery

/**
 *  The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
 *  /webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource
 *  from Sub-Collection access pattern may be used here, in the format:
 *  projects/-/webApps/APP_ID Refer to the `WebApp`
 *  [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebApp.
 *
 *  Gets the specified WebApp.
 *
 *  @param name The resource name of the WebApp, in the format:
 *    projects/PROJECT_IDENTIFIER /webApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp`
 *    [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration artifact associated with the specified WebApp.
 *
 *  Method: firebase.projects.webApps.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsGetConfig : GTLRFirebaseManagementQuery

/**
 *  The resource name of the WebApp configuration to download, in the format:
 *  projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a
 *  unique identifier, the Unique Resource from Sub-Collection access pattern
 *  may be used here, in the format: projects/-/webApps/APP_ID Refer to the
 *  `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name) field for details
 *  about PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebAppConfig.
 *
 *  Gets the configuration artifact associated with the specified WebApp.
 *
 *  @param name The resource name of the WebApp configuration to download, in
 *    the format: projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an
 *    APP_ID is a unique identifier, the Unique Resource from Sub-Collection
 *    access pattern may be used here, in the format: projects/-/webApps/APP_ID
 *    Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name)
 *    field for details about PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists each WebApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  Method: firebase.projects.webApps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseManagementReadonly
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsList : GTLRFirebaseManagementQuery

/**
 *  The maximum number of Apps to return in the response. The server may return
 *  fewer than this value at its discretion. If no value is specified (or too
 *  large a value is specified), then the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to `ListWebApps` indicating where in the
 *  set of Apps to resume listing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The resource name of the parent FirebaseProject for which to list each
 *  associated WebApp, in the format: projects/PROJECT_IDENTIFIER/webApps Refer
 *  to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
 *  field for details about PROJECT_IDENTIFIER values.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Controls whether Apps in the DELETED state should be returned in the
 *  response. If not specified, only `ACTIVE` Apps will be returned.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseManagement_ListWebAppsResponse.
 *
 *  Lists each WebApp associated with the specified FirebaseProject. The
 *  elements are returned in no particular order, but will be a consistent view
 *  of the Apps when additional requests are made with a `pageToken`.
 *
 *  @param parent The resource name of the parent FirebaseProject for which to
 *    list each associated WebApp, in the format:
 *    projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
 *    [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the attributes of the specified WebApp.
 *
 *  Method: firebase.projects.webApps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsPatch : GTLRFirebaseManagementQuery

/**
 *  The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
 *  /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
 *  [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *  ***(recommended)*** or its
 *  [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *  about using project identifiers in Google's [AIP 2510
 *  standard](https://google.aip.dev/cloud/2510). Note that the value for
 *  PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *  the globally unique, Firebase-assigned identifier for the App (see
 *  [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which fields of the WebApp to update. Note that the following
 *  fields are immutable: `name`, `app_id`, and `project_id`. To update `state`,
 *  use any of the following endpoints: RemoveWebApp or UndeleteWebApp.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseManagement_WebApp.
 *
 *  Updates the attributes of the specified WebApp.
 *
 *  @param object The @c GTLRFirebaseManagement_WebApp to include in the query.
 *  @param name The resource name of the WebApp, in the format:
 *    projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the
 *    parent Project's
 *    [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
 *    ***(recommended)*** or its
 *    [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
 *    about using project identifiers in Google's [AIP 2510
 *    standard](https://google.aip.dev/cloud/2510). Note that the value for
 *    PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID:
 *    the globally unique, Firebase-assigned identifier for the App (see
 *    [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_WebApp *)object
                           name:(NSString *)name;

@end

/**
 *  Removes the specified WebApp from the FirebaseProject.
 *
 *  Method: firebase.projects.webApps.remove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsRemove : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the WebApp, in the format: projects/
 *  PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier,
 *  the Unique Resource from Sub-Collection access pattern may be used here, in
 *  the format: projects/-/webApps/APP_ID Refer to the WebApp
 *  [name](../projects.webApps#WebApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Removes the specified WebApp from the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_RemoveWebAppRequest to include
 *    in the query.
 *  @param name Required. The resource name of the WebApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp
 *    [name](../projects.webApps#WebApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsRemove
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_RemoveWebAppRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Restores the specified WebApp to the FirebaseProject.
 *
 *  Method: firebase.projects.webApps.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseManagement
 *    @c kGTLRAuthScopeFirebaseManagementCloudPlatform
 */
@interface GTLRFirebaseManagementQuery_ProjectsWebAppsUndelete : GTLRFirebaseManagementQuery

/**
 *  Required. The resource name of the WebApp, in the format: projects/
 *  PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier,
 *  the Unique Resource from Sub-Collection access pattern may be used here, in
 *  the format: projects/-/webApps/APP_ID Refer to the WebApp
 *  [name](../projects.webApps#WebApp.FIELDS.name) field for details about
 *  PROJECT_IDENTIFIER and APP_ID values.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseManagement_Operation.
 *
 *  Restores the specified WebApp to the FirebaseProject.
 *
 *  @param object The @c GTLRFirebaseManagement_UndeleteWebAppRequest to include
 *    in the query.
 *  @param name Required. The resource name of the WebApp, in the format:
 *    projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique
 *    identifier, the Unique Resource from Sub-Collection access pattern may be
 *    used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp
 *    [name](../projects.webApps#WebApp.FIELDS.name) field for details about
 *    PROJECT_IDENTIFIER and APP_ID values.
 *
 *  @return GTLRFirebaseManagementQuery_ProjectsWebAppsUndelete
 */
+ (instancetype)queryWithObject:(GTLRFirebaseManagement_UndeleteWebAppRequest *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
