// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Memorystore for Redis API (redis/v1)
// Description:
//   Creates and manages Redis instances on the Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/memorystore/docs/redis/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRedis_AOFConfig;
@class GTLRCloudRedis_AvailabilityConfiguration;
@class GTLRCloudRedis_BackupConfiguration;
@class GTLRCloudRedis_BackupRun;
@class GTLRCloudRedis_BlobstoreLocation;
@class GTLRCloudRedis_CertChain;
@class GTLRCloudRedis_CloudAsset;
@class GTLRCloudRedis_CloudAssetComposition;
@class GTLRCloudRedis_Cluster;
@class GTLRCloudRedis_Cluster_RedisConfigs;
@class GTLRCloudRedis_ClusterMaintenancePolicy;
@class GTLRCloudRedis_ClusterMaintenanceSchedule;
@class GTLRCloudRedis_ClusterPersistenceConfig;
@class GTLRCloudRedis_ClusterWeeklyMaintenanceWindow;
@class GTLRCloudRedis_Compliance;
@class GTLRCloudRedis_CrossClusterReplicationConfig;
@class GTLRCloudRedis_CustomMetadataData;
@class GTLRCloudRedis_DatabaseResourceHealthSignalData;
@class GTLRCloudRedis_DatabaseResourceHealthSignalData_AdditionalMetadata;
@class GTLRCloudRedis_DatabaseResourceId;
@class GTLRCloudRedis_DatabaseResourceMetadata;
@class GTLRCloudRedis_DatabaseResourceRecommendationSignalData;
@class GTLRCloudRedis_DatabaseResourceRecommendationSignalData_AdditionalMetadata;
@class GTLRCloudRedis_DirectLocationAssignment;
@class GTLRCloudRedis_DiscoveryEndpoint;
@class GTLRCloudRedis_Entitlement;
@class GTLRCloudRedis_ExtraParameter;
@class GTLRCloudRedis_GcsDestination;
@class GTLRCloudRedis_GcsSource;
@class GTLRCloudRedis_GoogleCloudRedisV1LocationMetadata_AvailableZones;
@class GTLRCloudRedis_GoogleCloudRedisV1ZoneMetadata;
@class GTLRCloudRedis_InputConfig;
@class GTLRCloudRedis_Instance;
@class GTLRCloudRedis_Instance_Labels;
@class GTLRCloudRedis_Instance_RedisConfigs;
@class GTLRCloudRedis_InternalResourceMetadata;
@class GTLRCloudRedis_IsolationExpectations;
@class GTLRCloudRedis_Location;
@class GTLRCloudRedis_Location_Labels;
@class GTLRCloudRedis_Location_Metadata;
@class GTLRCloudRedis_LocationAssignment;
@class GTLRCloudRedis_LocationData;
@class GTLRCloudRedis_MachineConfiguration;
@class GTLRCloudRedis_MaintenancePolicy;
@class GTLRCloudRedis_MaintenanceSchedule;
@class GTLRCloudRedis_ManagedCertificateAuthority;
@class GTLRCloudRedis_Membership;
@class GTLRCloudRedis_NodeInfo;
@class GTLRCloudRedis_ObservabilityMetricData;
@class GTLRCloudRedis_Operation;
@class GTLRCloudRedis_Operation_Metadata;
@class GTLRCloudRedis_Operation_Response;
@class GTLRCloudRedis_OperationError;
@class GTLRCloudRedis_OutputConfig;
@class GTLRCloudRedis_PersistenceConfig;
@class GTLRCloudRedis_PlacerLocation;
@class GTLRCloudRedis_Product;
@class GTLRCloudRedis_PscConfig;
@class GTLRCloudRedis_PscConnection;
@class GTLRCloudRedis_RDBConfig;
@class GTLRCloudRedis_RegionalMigDistributionPolicy;
@class GTLRCloudRedis_RemoteCluster;
@class GTLRCloudRedis_RequirementOverride;
@class GTLRCloudRedis_RetentionSettings;
@class GTLRCloudRedis_SpannerLocation;
@class GTLRCloudRedis_StateInfo;
@class GTLRCloudRedis_Status;
@class GTLRCloudRedis_Status_Details_Item;
@class GTLRCloudRedis_Tags;
@class GTLRCloudRedis_Tags_Tags;
@class GTLRCloudRedis_TenantProjectProxy;
@class GTLRCloudRedis_TimeOfDay;
@class GTLRCloudRedis_TlsCertificate;
@class GTLRCloudRedis_TypedValue;
@class GTLRCloudRedis_UpdateInfo;
@class GTLRCloudRedis_UserLabels;
@class GTLRCloudRedis_UserLabels_Labels;
@class GTLRCloudRedis_WeeklyMaintenanceWindow;
@class GTLRCloudRedis_ZoneConfiguration;
@class GTLRCloudRedis_ZoneDistributionConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudRedis_AOFConfig.appendFsync

/**
 *  fsync every time new write commands are appended to the AOF. It has the best
 *  data loss protection at the cost of performance
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AOFConfig_AppendFsync_Always;
/**
 *  Not set. Default: EVERYSEC
 *
 *  Value: "APPEND_FSYNC_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AOFConfig_AppendFsync_AppendFsyncUnspecified;
/**
 *  fsync every second. Fast enough, and you may lose 1 second of data if there
 *  is a disaster
 *
 *  Value: "EVERYSEC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AOFConfig_AppendFsync_Everysec;
/**
 *  Never fsync. Normally Linux will flush data every 30 seconds with this
 *  configuration, but it's up to the kernel's exact tuning.
 *
 *  Value: "NO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AOFConfig_AppendFsync_No;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_AvailabilityConfiguration.availabilityType

/**
 *  For rest of the other category
 *
 *  Value: "AVAILABILITY_TYPE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_AvailabilityTypeOther;
/** Value: "AVAILABILITY_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_AvailabilityTypeUnspecified;
/**
 *  Multi regional instance
 *
 *  Value: "MULTI_REGIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_MultiRegional;
/**
 *  Regional available instance.
 *
 *  Value: "REGIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_Regional;
/**
 *  Zonal available instance.
 *
 *  Value: "ZONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_Zonal;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_BackupRun.status

/**
 *  The backup was unsuccessful.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_BackupRun_Status_Failed;
/** Value: "STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_BackupRun_Status_StatusUnspecified;
/**
 *  The backup was successful.
 *
 *  Value: "SUCCESSFUL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_BackupRun_Status_Successful;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Cluster.authorizationMode

/**
 *  Authorization disabled mode
 *
 *  Value: "AUTH_MODE_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeDisabled;
/**
 *  IAM basic authorization mode
 *
 *  Value: "AUTH_MODE_IAM_AUTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeIamAuth;
/**
 *  Not set.
 *
 *  Value: "AUTH_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Cluster.nodeType

/**
 *  Node type unspecified
 *
 *  Value: "NODE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_NodeType_NodeTypeUnspecified;
/**
 *  Redis highmem medium node_type.
 *
 *  Value: "REDIS_HIGHMEM_MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_NodeType_RedisHighmemMedium;
/**
 *  Redis highmem xlarge node_type.
 *
 *  Value: "REDIS_HIGHMEM_XLARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_NodeType_RedisHighmemXlarge;
/**
 *  Redis shared core nano node_type.
 *
 *  Value: "REDIS_SHARED_CORE_NANO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_NodeType_RedisSharedCoreNano;
/**
 *  Redis standard small node_type.
 *
 *  Value: "REDIS_STANDARD_SMALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_NodeType_RedisStandardSmall;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Cluster.state

/**
 *  Redis cluster has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_State_Active;
/**
 *  Redis cluster is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_State_Creating;
/**
 *  Redis cluster is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_State_Deleting;
/**
 *  Not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_State_StateUnspecified;
/**
 *  Redis cluster configuration is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Cluster.transitEncryptionMode

/**
 *  In-transit encryption disabled.
 *
 *  Value: "TRANSIT_ENCRYPTION_MODE_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeDisabled;
/**
 *  Use server managed encryption for in-transit encryption.
 *
 *  Value: "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeServerAuthentication;
/**
 *  In-transit encryption not set.
 *
 *  Value: "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ClusterPersistenceConfig.mode

/**
 *  AOF based persistence is enabled.
 *
 *  Value: "AOF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Aof;
/**
 *  Persistence is disabled, and any snapshot data is deleted.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Disabled;
/**
 *  Not set.
 *
 *  Value: "PERSISTENCE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterPersistenceConfig_Mode_PersistenceModeUnspecified;
/**
 *  RDB based persistence is enabled.
 *
 *  Value: "RDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Rdb;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ClusterWeeklyMaintenanceWindow.day

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Wednesday;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_CrossClusterReplicationConfig.clusterRole

/**
 *  Cluster role is not set. The behavior is equivalent to NONE.
 *
 *  Value: "CLUSTER_ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_ClusterRoleUnspecified;
/**
 *  This cluster does not participate in cross cluster replication. It is an
 *  independent cluster and does not replicate to or from any other clusters.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_None;
/**
 *  A cluster that allows both reads and writes. Any data written to this
 *  cluster is also replicated to the attached secondary clusters.
 *
 *  Value: "PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_Primary;
/**
 *  A cluster that allows only reads and replicates data from a primary cluster.
 *
 *  Value: "SECONDARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_Secondary;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceFeed.feedType

/** Value: "FEEDTYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceFeed_FeedType_FeedtypeUnspecified;
/**
 *  Database resource monitoring data
 *
 *  Value: "OBSERVABILITY_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceFeed_FeedType_ObservabilityData;
/**
 *  Database resource recommendation signal data
 *
 *  Value: "RECOMMENDATION_SIGNAL_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceFeed_FeedType_RecommendationSignalData;
/**
 *  Database resource metadata feed from control plane
 *
 *  Value: "RESOURCE_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceFeed_FeedType_ResourceMetadata;
/**
 *  Database resource security health signal data
 *
 *  Value: "SECURITY_FINDING_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceFeed_FeedType_SecurityFindingData;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceHealthSignalData.provider

/**
 *  Amazon web service
 *
 *  Value: "AWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Aws;
/**
 *  Azure web service
 *
 *  Value: "AZURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Azure;
/**
 *  Google cloud platform provider
 *
 *  Value: "GCP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Gcp;
/**
 *  On-prem database resources.
 *
 *  Value: "ONPREM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Onprem;
/**
 *  For the rest of the other categories. Other refers to the rest of other
 *  database service providers, this could be smaller cloud provider. This needs
 *  to be provided when the provider is known, but it is not present in the
 *  existing set of enum values.
 *
 *  Value: "PROVIDER_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_ProviderOther;
/** Value: "PROVIDER_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_ProviderUnspecified;
/**
 *  Self-managed database provider. These are resources on a cloud platform,
 *  e.g., database resource installed in a GCE VM, but not a managed database
 *  service.
 *
 *  Value: "SELFMANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Selfmanaged;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceHealthSignalData.signalClass

/**
 *  Unspecified signal class.
 *
 *  Value: "CLASS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_ClassUnspecified;
/**
 *  Describes an error that prevents some SCC functionality.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Error;
/**
 *  Describes a potential weakness in cloud resource/asset configuration that
 *  increases risk.
 *
 *  Value: "MISCONFIGURATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Misconfiguration;
/**
 *  Describes a security observation that is for informational purposes.
 *
 *  Value: "OBSERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Observation;
/**
 *  Describes unwanted or malicious activity.
 *
 *  Value: "THREAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Threat;
/**
 *  Describes a potential weakness in software that increases risk to
 *  Confidentiality & Integrity & Availability.
 *
 *  Value: "VULNERABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Vulnerability;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceHealthSignalData.signalSeverity

/**
 *  A critical vulnerability is easily discoverable by an external actor,
 *  exploitable.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Critical;
/**
 *  A high risk vulnerability can be easily discovered and exploited in
 *  combination with other vulnerabilities.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_High;
/**
 *  A low risk vulnerability hampers a security organization's ability to detect
 *  vulnerabilities or active threats in their deployment.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Low;
/**
 *  A medium risk vulnerability could be used by an actor to gain access to
 *  resources or privileges that enable them to eventually gain access and the
 *  ability to execute arbitrary code or exfiltrate data.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Medium;
/**
 *  This value is used for findings when a source doesn't write a severity
 *  value.
 *
 *  Value: "SIGNAL_SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_SignalSeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceHealthSignalData.signalType

/**
 *  Represents if the log_connections database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionAttemptsNotLogged;
/**
 *  Represents if the user connections database flag for a Cloud SQL for SQL
 *  Server instance is configured.
 *
 *  Value: "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionMaxNotConfigured;
/**
 *  Performance impact of connections settings
 *
 *  Value: "SIGNAL_TYPE_CONNECTIONS_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionsPerformanceImpact;
/**
 *  Represents database auditing is disabled.
 *
 *  Value: "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDatabaseAuditingDisabled;
/**
 *  Represents if the skip_show_database database flag for a Cloud SQL for MySQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDatabaseNamesExposed;
/**
 *  Detects if database instance data exported to a Cloud Storage bucket outside
 *  of the organization.
 *
 *  Value: "SIGNAL_TYPE_DATA_EXPORT_TO_EXTERNAL_CLOUD_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDataExportToExternalCloudStorageBucket;
/**
 *  Detects if database instance data exported to a Cloud Storage bucket that is
 *  owned by the organization and is publicly accessible.
 *
 *  Value: "SIGNAL_TYPE_DATA_EXPORT_TO_PUBLIC_CLOUD_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDataExportToPublicCloudStorageBucket;
/**
 *  Represents if the log_disconnections database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDisconnectionsNotLogged;
/**
 *  Represents if a SQL database instance is not encrypted with customer-managed
 *  encryption keys (CMEK).
 *
 *  Value: "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeEncryptionKeyNotCustomerManaged;
/**
 *  Represents if the log_hostname database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfClientHostname;
/**
 *  Represents if the log_parser_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfParserStatistics;
/**
 *  Represents if the log_planner_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfPlannerStatistics;
/**
 *  Represents if the cross_db_ownership_chaining database flag for a Cloud SQL
 *  for SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedByOwnershipChaining;
/**
 *  Represents if he external scripts enabled database flag for a Cloud SQL for
 *  SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToExternalScripts;
/**
 *  Represents if the local_infile database flag for a Cloud SQL for MySQL
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToLocalDataLoads;
/**
 *  Represents if a resource is exposed to public access.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToPublicAccess;
/**
 *  Represents if the remote access database flag for a Cloud SQL for SQL Server
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToRemoteAccess;
/**
 *  Represents if a group is replicating across regions. Checks for resources
 *  that are configured to have redundancy, and ongoing replication, across
 *  regions.
 *
 *  Value: "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeGroupNotReplicatingAcrossRegions;
/**
 *  Performance impact of high joins without indexes
 *
 *  Value: "SIGNAL_TYPE_HIGH_JOINS_WITHOUT_INDEXES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighJoinsWithoutIndexes;
/**
 *  Represents high number of concurrently opened tables.
 *
 *  Value: "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighNumberOfOpenTables;
/**
 *  Represents high table count close to SLA limit.
 *
 *  Value: "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighNumberOfTables;
/**
 *  Represents high number of unvacuumed transactions
 *
 *  Value: "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighTransactionIdUtilization;
/**
 *  Represents Idle instance helps to reduce costs.
 *
 *  Value: "SIGNAL_TYPE_IDLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeIdle;
/**
 *  Represents if the last backup of a resource failed.
 *
 *  Value: "SIGNAL_TYPE_LAST_BACKUP_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLastBackupFailed;
/**
 *  Represents if the last backup of a resource is older than some threshold
 *  value.
 *
 *  Value: "SIGNAL_TYPE_LAST_BACKUP_OLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLastBackupOld;
/**
 *  Represents if the log_min_duration_statement database flag for a Cloud SQL
 *  for PostgreSQL instance is not set to -1.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingExcessiveStatementInfo;
/**
 *  Represents if the log_min_error_statement database flag for a Cloud SQL for
 *  PostgreSQL instance is not set appropriately.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_MOST_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingMostErrors;
/**
 *  Represents if the log_min_error_statement database flag for a Cloud SQL for
 *  PostgreSQL instance does not have an appropriate severity level.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingOnlyCriticalErrors;
/**
 *  Represents if the log_statement_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingQueryStatistics;
/**
 *  Represents if log_checkpoints database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLogsNotOptimizedForTroubleshooting;
/**
 *  Represents if the log_min_messages database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to warning or another recommended value.
 *
 *  Value: "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeMinimalErrorLogging;
/**
 *  Represents if a resource has an automated backup policy.
 *
 *  Value: "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoAutomatedBackupPolicy;
/**
 *  No password policy set on resources
 *
 *  Value: "SIGNAL_TYPE_NO_PASSWORD_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoPasswordPolicy;
/**
 *  Represents if a resource has a promotable replica.
 *
 *  Value: "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoPromotableReplica;
/**
 *  Represents if a Cloud SQL database has a password configured for the root
 *  account or not.
 *
 *  Value: "SIGNAL_TYPE_NO_ROOT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoRootPassword;
/**
 *  Represents if a resource is available in multiple regions.
 *
 *  Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotAvailableInMultipleRegions GTLR_DEPRECATED;
/**
 *  Represents if the resource is available in multiple zones or not.
 *
 *  Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotAvailableInMultipleZones GTLR_DEPRECATED;
/**
 *  Represents if the log_statement database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to DDL (all data definition statements).
 *
 *  Value: "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotLoggingOnlyDdlStatements;
/**
 *  Represents if the log_temp_files database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to "0". (NOTE: 0 = ON)
 *
 *  Value: "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotLoggingTemporaryFiles;
/**
 *  Represents if a resource is protected by automatic failover. Checks for
 *  resources that are configured to have redundancy within a region that
 *  enables automatic failover.
 *
 *  Value: "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotProtectedByAutomaticFailover;
/**
 *  Represents out of disk.
 *
 *  Value: "SIGNAL_TYPE_OUT_OF_DISK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeOutOfDisk;
/**
 *  Represents instances that are unnecessarily large for given workload.
 *
 *  Value: "SIGNAL_TYPE_OVERPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeOverprovisioned;
/**
 *  Represents if public IP is enabled.
 *
 *  Value: "SIGNAL_TYPE_PUBLIC_IP_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypePublicIpEnabled;
/**
 *  Represents if the log_duration database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryDurationsNotLogged;
/**
 *  Represents if the log_lock_waits database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryLockWaitsNotLogged;
/**
 *  Represents if the databaseFlags property of instance metadata for the
 *  log_executor_status field is set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryStatisticsLogged;
/**
 *  Cluster nearing quota limit
 *
 *  Value: "SIGNAL_TYPE_QUOTA_LIMIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQuotaLimit;
/**
 *  Represents not restricted to authorized networks.
 *
 *  Value: "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeRestrictAuthorizedNetworks;
/**
 *  Represents if the 3625 (trace flag) database flag for a Cloud SQL for SQL
 *  Server instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeSensitiveTraceInfoNotMasked;
/**
 *  Represents if The contained database authentication database flag for a
 *  Cloud SQL for SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeServerAuthenticationNotRequired;
/**
 *  Represents server certificate is near expiry.
 *
 *  Value: "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeServerCertificateNearExpiry;
/**
 *  Represents if a resources has a short backup retention period.
 *
 *  Value: "SIGNAL_TYPE_SHORT_BACKUP_RETENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeShortBackupRetention;
/**
 *  Detects events where a Cloud SQL superuser (postgres for PostgreSQL servers
 *  or root for MySQL users) writes to non-system tables.
 *
 *  Value: "SIGNAL_TYPE_SUPERUSER_WRITING_TO_USER_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeSuperuserWritingToUserTables;
/**
 *  Performance impact of temporary tables settings
 *
 *  Value: "SIGNAL_TYPE_TMP_TABLES_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeTmpTablesPerformanceImpact;
/**
 *  Performance impact of transaction logs settings
 *
 *  Value: "SIGNAL_TYPE_TRANS_LOGS_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeTransLogsPerformanceImpact;
/**
 *  Represents need for more CPU and/or memory
 *
 *  Value: "SIGNAL_TYPE_UNDERPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnderprovisioned;
/**
 *  Represents if a resources requires all incoming connections to use SSL or
 *  not.
 *
 *  Value: "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnencryptedConnections;
/**
 *  Unspecified.
 *
 *  Value: "SIGNAL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnspecified;
/**
 *  Detects events where a database user or role has been granted all privileges
 *  to a database, or to all tables, procedures, or functions in a schema.
 *
 *  Value: "SIGNAL_TYPE_USER_GRANTED_ALL_PERMISSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUserGrantedAllPermissions;
/**
 *  Represents if the user options database flag for Cloud SQL SQL Server
 *  instance is configured or not.
 *
 *  Value: "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUserOptionsConfigured;
/**
 *  Represents if the log_error_verbosity database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to default or stricter (default or terse).
 *
 *  Value: "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeVerboseErrorLogging;
/**
 *  Represents violate org policy restrict public ip.
 *
 *  Value: "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatePolicyRestrictPublicIp;
/**
 *  Represents if a resource violates CIS Controls 8.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_CONTROLS_V8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisControlsV80;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation10;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.1.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation11;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.2.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation12;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.3.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation13;
/**
 *  Represents if a resource violates CIS GCP Foundation 2.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation20;
/**
 *  Represents if a resource violates Cloud Controls Matrix v4.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CLOUD_CONTROLS_MATRIX_V4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCloudControlsMatrixV4;
/**
 *  Represents if a resource violates HIPAA.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_HIPAA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesHipaa;
/**
 *  Represents if a resource violates ISO-27001.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_ISO_27001"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesIso27001;
/**
 *  Represents if a resource violates ISO 27001 2022.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_ISO_27001_V2022"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesIso27001V2022;
/**
 *  Represents if a resource violates NIST 800-53.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_800_53"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNist80053;
/**
 *  Represents if a resource violates NIST 800-53 R5.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_800_53_R5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNist80053R5;
/**
 *  Represents if a resource violates NIST Cybersecurity Framework 1.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_CYBERSECURITY_FRAMEWORK_V1_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNistCybersecurityFrameworkV10;
/**
 *  Represents if a resource violates PCI-DSS v3.2.1.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesPciDssV321;
/**
 *  Represents if a resource violates PCI-DSS v4.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_PCI_DSS_V4_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesPciDssV40;
/**
 *  Represents if a resource violates SOC2 v2017.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_SOC2_V2017"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesSoc2V2017;
/**
 *  Represents if a Cloud SQL database has a weak password configured for the
 *  root account.
 *
 *  Value: "SIGNAL_TYPE_WEAK_ROOT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeWeakRootPassword;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceHealthSignalData.state

/**
 *  The signal requires attention and has not been addressed yet.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Active;
/**
 *  The signal has been muted.
 *
 *  Value: "MUTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Muted;
/**
 *  The signal has been fixed, triaged as a non-issue or otherwise addressed and
 *  is no longer active.
 *
 *  Value: "RESOLVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Resolved;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceId.provider

/**
 *  Amazon web service
 *
 *  Value: "AWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_Aws;
/**
 *  Azure web service
 *
 *  Value: "AZURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_Azure;
/**
 *  Google cloud platform provider
 *
 *  Value: "GCP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_Gcp;
/**
 *  On-prem database resources.
 *
 *  Value: "ONPREM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_Onprem;
/**
 *  For the rest of the other categories. Other refers to the rest of other
 *  database service providers, this could be smaller cloud provider. This needs
 *  to be provided when the provider is known, but it is not present in the
 *  existing set of enum values.
 *
 *  Value: "PROVIDER_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_ProviderOther;
/** Value: "PROVIDER_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_ProviderUnspecified;
/**
 *  Self-managed database provider. These are resources on a cloud platform,
 *  e.g., database resource installed in a GCE VM, but not a managed database
 *  service.
 *
 *  Value: "SELFMANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceId_Provider_Selfmanaged;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceMetadata.currentState

/**
 *  Instance is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Deleted;
/**
 *  The instance is running.
 *
 *  Value: "HEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Healthy;
/**
 *  For rest of the other category
 *
 *  Value: "STATE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_StateOther;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_StateUnspecified;
/**
 *  When instance is suspended
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Suspended;
/**
 *  Instance being created, updated, deleted or under maintenance
 *
 *  Value: "UNHEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Unhealthy;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceMetadata.expectedState

/**
 *  Instance is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Deleted;
/**
 *  The instance is running.
 *
 *  Value: "HEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Healthy;
/**
 *  For rest of the other category
 *
 *  Value: "STATE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_StateOther;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_StateUnspecified;
/**
 *  When instance is suspended
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Suspended;
/**
 *  Instance being created, updated, deleted or under maintenance
 *
 *  Value: "UNHEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Unhealthy;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceMetadata.instanceType

/** Value: "INSTANCE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_InstanceTypeUnspecified GTLR_DEPRECATED;
/**
 *  For rest of the other categories.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Other GTLR_DEPRECATED;
/**
 *  A regular primary database instance.
 *
 *  Value: "PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Primary GTLR_DEPRECATED;
/**
 *  An instance acting as a read-replica.
 *
 *  Value: "READ_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_ReadReplica GTLR_DEPRECATED;
/**
 *  A cluster or an instance acting as a secondary.
 *
 *  Value: "SECONDARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Secondary GTLR_DEPRECATED;
/**
 *  For rest of the other categories.
 *
 *  Value: "SUB_RESOURCE_TYPE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeOther;
/**
 *  A regular primary database instance.
 *
 *  Value: "SUB_RESOURCE_TYPE_PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypePrimary;
/**
 *  An instance acting as a read-replica.
 *
 *  Value: "SUB_RESOURCE_TYPE_READ_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeReadReplica;
/**
 *  A cluster or an instance acting as a secondary.
 *
 *  Value: "SUB_RESOURCE_TYPE_SECONDARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeSecondary;
/**
 *  For rest of the other categories.
 *
 *  Value: "SUB_RESOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceRecommendationSignalData.recommendationState

/**
 *  Recommendation is active and can be applied. ACTIVE recommendations can be
 *  marked as CLAIMED, SUCCEEDED, or FAILED.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Active;
/**
 *  Recommendation is in claimed state. Recommendations content is immutable and
 *  cannot be updated by Google. CLAIMED recommendations can be marked as
 *  CLAIMED, SUCCEEDED, or FAILED.
 *
 *  Value: "CLAIMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Claimed;
/**
 *  Recommendation is in dismissed state. Recommendation content can be updated
 *  by Google. DISMISSED recommendations can be marked as ACTIVE.
 *
 *  Value: "DISMISSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Dismissed;
/**
 *  Recommendation is in failed state. Recommendations content is immutable and
 *  cannot be updated by Google. FAILED recommendations can be marked as
 *  SUCCEEDED, or FAILED.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Failed;
/**
 *  Recommendation is in succeeded state. Recommendations content is immutable
 *  and cannot be updated by Google. SUCCEEDED recommendations can be marked as
 *  SUCCEEDED, or FAILED.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Succeeded;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_DatabaseResourceRecommendationSignalData.signalType

/**
 *  Represents if the log_connections database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionAttemptsNotLogged;
/**
 *  Represents if the user connections database flag for a Cloud SQL for SQL
 *  Server instance is configured.
 *
 *  Value: "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionMaxNotConfigured;
/**
 *  Performance impact of connections settings
 *
 *  Value: "SIGNAL_TYPE_CONNECTIONS_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionsPerformanceImpact;
/**
 *  Represents database auditing is disabled.
 *
 *  Value: "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDatabaseAuditingDisabled;
/**
 *  Represents if the skip_show_database database flag for a Cloud SQL for MySQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDatabaseNamesExposed;
/**
 *  Detects if database instance data exported to a Cloud Storage bucket outside
 *  of the organization.
 *
 *  Value: "SIGNAL_TYPE_DATA_EXPORT_TO_EXTERNAL_CLOUD_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDataExportToExternalCloudStorageBucket;
/**
 *  Detects if database instance data exported to a Cloud Storage bucket that is
 *  owned by the organization and is publicly accessible.
 *
 *  Value: "SIGNAL_TYPE_DATA_EXPORT_TO_PUBLIC_CLOUD_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDataExportToPublicCloudStorageBucket;
/**
 *  Represents if the log_disconnections database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDisconnectionsNotLogged;
/**
 *  Represents if a SQL database instance is not encrypted with customer-managed
 *  encryption keys (CMEK).
 *
 *  Value: "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeEncryptionKeyNotCustomerManaged;
/**
 *  Represents if the log_hostname database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfClientHostname;
/**
 *  Represents if the log_parser_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfParserStatistics;
/**
 *  Represents if the log_planner_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfPlannerStatistics;
/**
 *  Represents if the cross_db_ownership_chaining database flag for a Cloud SQL
 *  for SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedByOwnershipChaining;
/**
 *  Represents if he external scripts enabled database flag for a Cloud SQL for
 *  SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToExternalScripts;
/**
 *  Represents if the local_infile database flag for a Cloud SQL for MySQL
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToLocalDataLoads;
/**
 *  Represents if a resource is exposed to public access.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToPublicAccess;
/**
 *  Represents if the remote access database flag for a Cloud SQL for SQL Server
 *  instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToRemoteAccess;
/**
 *  Represents if a group is replicating across regions. Checks for resources
 *  that are configured to have redundancy, and ongoing replication, across
 *  regions.
 *
 *  Value: "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeGroupNotReplicatingAcrossRegions;
/**
 *  Performance impact of high joins without indexes
 *
 *  Value: "SIGNAL_TYPE_HIGH_JOINS_WITHOUT_INDEXES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighJoinsWithoutIndexes;
/**
 *  Represents high number of concurrently opened tables.
 *
 *  Value: "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighNumberOfOpenTables;
/**
 *  Represents high table count close to SLA limit.
 *
 *  Value: "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighNumberOfTables;
/**
 *  Represents high number of unvacuumed transactions
 *
 *  Value: "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighTransactionIdUtilization;
/**
 *  Represents Idle instance helps to reduce costs.
 *
 *  Value: "SIGNAL_TYPE_IDLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeIdle;
/**
 *  Represents if the last backup of a resource failed.
 *
 *  Value: "SIGNAL_TYPE_LAST_BACKUP_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLastBackupFailed;
/**
 *  Represents if the last backup of a resource is older than some threshold
 *  value.
 *
 *  Value: "SIGNAL_TYPE_LAST_BACKUP_OLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLastBackupOld;
/**
 *  Represents if the log_min_duration_statement database flag for a Cloud SQL
 *  for PostgreSQL instance is not set to -1.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingExcessiveStatementInfo;
/**
 *  Represents if the log_min_error_statement database flag for a Cloud SQL for
 *  PostgreSQL instance is not set appropriately.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_MOST_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingMostErrors;
/**
 *  Represents if the log_min_error_statement database flag for a Cloud SQL for
 *  PostgreSQL instance does not have an appropriate severity level.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingOnlyCriticalErrors;
/**
 *  Represents if the log_statement_stats database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingQueryStatistics;
/**
 *  Represents if log_checkpoints database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLogsNotOptimizedForTroubleshooting;
/**
 *  Represents if the log_min_messages database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to warning or another recommended value.
 *
 *  Value: "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeMinimalErrorLogging;
/**
 *  Represents if a resource has an automated backup policy.
 *
 *  Value: "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoAutomatedBackupPolicy;
/**
 *  No password policy set on resources
 *
 *  Value: "SIGNAL_TYPE_NO_PASSWORD_POLICY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoPasswordPolicy;
/**
 *  Represents if a resource has a promotable replica.
 *
 *  Value: "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoPromotableReplica;
/**
 *  Represents if a Cloud SQL database has a password configured for the root
 *  account or not.
 *
 *  Value: "SIGNAL_TYPE_NO_ROOT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoRootPassword;
/**
 *  Represents if a resource is available in multiple regions.
 *
 *  Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotAvailableInMultipleRegions GTLR_DEPRECATED;
/**
 *  Represents if the resource is available in multiple zones or not.
 *
 *  Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotAvailableInMultipleZones GTLR_DEPRECATED;
/**
 *  Represents if the log_statement database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to DDL (all data definition statements).
 *
 *  Value: "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotLoggingOnlyDdlStatements;
/**
 *  Represents if the log_temp_files database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to "0". (NOTE: 0 = ON)
 *
 *  Value: "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotLoggingTemporaryFiles;
/**
 *  Represents if a resource is protected by automatic failover. Checks for
 *  resources that are configured to have redundancy within a region that
 *  enables automatic failover.
 *
 *  Value: "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotProtectedByAutomaticFailover;
/**
 *  Represents out of disk.
 *
 *  Value: "SIGNAL_TYPE_OUT_OF_DISK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeOutOfDisk;
/**
 *  Represents instances that are unnecessarily large for given workload.
 *
 *  Value: "SIGNAL_TYPE_OVERPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeOverprovisioned;
/**
 *  Represents if public IP is enabled.
 *
 *  Value: "SIGNAL_TYPE_PUBLIC_IP_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypePublicIpEnabled;
/**
 *  Represents if the log_duration database flag for a Cloud SQL for PostgreSQL
 *  instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryDurationsNotLogged;
/**
 *  Represents if the log_lock_waits database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryLockWaitsNotLogged;
/**
 *  Represents if the databaseFlags property of instance metadata for the
 *  log_executor_status field is set to on.
 *
 *  Value: "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryStatisticsLogged;
/**
 *  Cluster nearing quota limit
 *
 *  Value: "SIGNAL_TYPE_QUOTA_LIMIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQuotaLimit;
/**
 *  Represents not restricted to authorized networks.
 *
 *  Value: "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeRestrictAuthorizedNetworks;
/**
 *  Represents if the 3625 (trace flag) database flag for a Cloud SQL for SQL
 *  Server instance is not set to on.
 *
 *  Value: "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeSensitiveTraceInfoNotMasked;
/**
 *  Represents if The contained database authentication database flag for a
 *  Cloud SQL for SQL Server instance is not set to off.
 *
 *  Value: "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeServerAuthenticationNotRequired;
/**
 *  Represents server certificate is near expiry.
 *
 *  Value: "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeServerCertificateNearExpiry;
/**
 *  Represents if a resources has a short backup retention period.
 *
 *  Value: "SIGNAL_TYPE_SHORT_BACKUP_RETENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeShortBackupRetention;
/**
 *  Detects events where a Cloud SQL superuser (postgres for PostgreSQL servers
 *  or root for MySQL users) writes to non-system tables.
 *
 *  Value: "SIGNAL_TYPE_SUPERUSER_WRITING_TO_USER_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeSuperuserWritingToUserTables;
/**
 *  Performance impact of temporary tables settings
 *
 *  Value: "SIGNAL_TYPE_TMP_TABLES_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeTmpTablesPerformanceImpact;
/**
 *  Performance impact of transaction logs settings
 *
 *  Value: "SIGNAL_TYPE_TRANS_LOGS_PERFORMANCE_IMPACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeTransLogsPerformanceImpact;
/**
 *  Represents need for more CPU and/or memory
 *
 *  Value: "SIGNAL_TYPE_UNDERPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnderprovisioned;
/**
 *  Represents if a resources requires all incoming connections to use SSL or
 *  not.
 *
 *  Value: "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnencryptedConnections;
/**
 *  Unspecified.
 *
 *  Value: "SIGNAL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnspecified;
/**
 *  Detects events where a database user or role has been granted all privileges
 *  to a database, or to all tables, procedures, or functions in a schema.
 *
 *  Value: "SIGNAL_TYPE_USER_GRANTED_ALL_PERMISSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUserGrantedAllPermissions;
/**
 *  Represents if the user options database flag for Cloud SQL SQL Server
 *  instance is configured or not.
 *
 *  Value: "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUserOptionsConfigured;
/**
 *  Represents if the log_error_verbosity database flag for a Cloud SQL for
 *  PostgreSQL instance is not set to default or stricter (default or terse).
 *
 *  Value: "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeVerboseErrorLogging;
/**
 *  Represents violate org policy restrict public ip.
 *
 *  Value: "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatePolicyRestrictPublicIp;
/**
 *  Represents if a resource violates CIS Controls 8.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_CONTROLS_V8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisControlsV80;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation10;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.1.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation11;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.2.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation12;
/**
 *  Represents if a resource violates CIS GCP Foundation 1.3.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation13;
/**
 *  Represents if a resource violates CIS GCP Foundation 2.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation20;
/**
 *  Represents if a resource violates Cloud Controls Matrix v4.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_CLOUD_CONTROLS_MATRIX_V4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCloudControlsMatrixV4;
/**
 *  Represents if a resource violates HIPAA.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_HIPAA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesHipaa;
/**
 *  Represents if a resource violates ISO-27001.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_ISO_27001"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesIso27001;
/**
 *  Represents if a resource violates ISO 27001 2022.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_ISO_27001_V2022"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesIso27001V2022;
/**
 *  Represents if a resource violates NIST 800-53.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_800_53"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNist80053;
/**
 *  Represents if a resource violates NIST 800-53 R5.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_800_53_R5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNist80053R5;
/**
 *  Represents if a resource violates NIST Cybersecurity Framework 1.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_NIST_CYBERSECURITY_FRAMEWORK_V1_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNistCybersecurityFrameworkV10;
/**
 *  Represents if a resource violates PCI-DSS v3.2.1.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesPciDssV321;
/**
 *  Represents if a resource violates PCI-DSS v4.0.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_PCI_DSS_V4_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesPciDssV40;
/**
 *  Represents if a resource violates SOC2 v2017.
 *
 *  Value: "SIGNAL_TYPE_VIOLATES_SOC2_V2017"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesSoc2V2017;
/**
 *  Represents if a Cloud SQL database has a weak password configured for the
 *  root account.
 *
 *  Value: "SIGNAL_TYPE_WEAK_ROOT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeWeakRootPassword;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Entitlement.entitlementState

/**
 *  User is entitled to a feature/benefit, but whether it has been successfully
 *  provisioned is decided by provisioning state.
 *
 *  Value: "ENTITLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Entitlement_EntitlementState_Entitled;
/** Value: "ENTITLEMENT_STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Entitlement_EntitlementState_EntitlementStateUnspecified;
/**
 *  User is entitled to a feature/benefit, but it was requested to be revoked.
 *  Whether the revoke has been successful is decided by provisioning state.
 *
 *  Value: "REVOKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Entitlement_EntitlementState_Revoked;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Entitlement.type

/** Value: "ENTITLEMENT_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Entitlement_Type_EntitlementTypeUnspecified;
/**
 *  The root entitlement representing Gemini package ownership.
 *
 *  Value: "GEMINI"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Entitlement_Type_Gemini;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_FailoverInstanceRequest.dataProtectionMode

/**
 *  Defaults to LIMITED_DATA_LOSS if a data protection mode is not specified.
 *
 *  Value: "DATA_PROTECTION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_DataProtectionModeUnspecified;
/**
 *  Instance failover will be performed without data loss control.
 *
 *  Value: "FORCE_DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_ForceDataLoss;
/**
 *  Instance failover will be protected with data loss control. More
 *  specifically, the failover will only be performed if the current replication
 *  offset diff between primary and replica is under a certain threshold.
 *
 *  Value: "LIMITED_DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_LimitedDataLoss;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.connectMode

/**
 *  Not set.
 *
 *  Value: "CONNECT_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ConnectMode_ConnectModeUnspecified;
/**
 *  Connect via direct peering to the Memorystore for Redis hosted service.
 *
 *  Value: "DIRECT_PEERING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ConnectMode_DirectPeering;
/**
 *  Connect your Memorystore for Redis instance using Private Service Access.
 *  Private services access provides an IP address range for multiple Google
 *  Cloud services, including Memorystore.
 *
 *  Value: "PRIVATE_SERVICE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ConnectMode_PrivateServiceAccess;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.readReplicasMode

/**
 *  If disabled, read endpoint will not be provided and the instance cannot
 *  scale up or down the number of replicas.
 *
 *  Value: "READ_REPLICAS_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasDisabled;
/**
 *  If enabled, read endpoint will be provided and the instance can scale up and
 *  down the number of replicas. Not valid for basic tier.
 *
 *  Value: "READ_REPLICAS_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasEnabled;
/**
 *  If not set, Memorystore Redis backend will default to
 *  READ_REPLICAS_DISABLED.
 *
 *  Value: "READ_REPLICAS_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.state

/**
 *  Redis instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Creating;
/**
 *  Redis instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Deleting;
/**
 *  Redis instance is failing over (availability may be affected).
 *
 *  Value: "FAILING_OVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_FailingOver;
/**
 *  Redis instance is importing data (availability may be affected).
 *
 *  Value: "IMPORTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Importing;
/**
 *  Maintenance is being performed on this Redis instance.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Maintenance;
/**
 *  Redis instance has been created and is fully usable.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Ready;
/**
 *  Redis instance is being repaired and may be unusable.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Repairing;
/**
 *  Not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_StateUnspecified;
/**
 *  Redis instance configuration is being updated. Certain kinds of updates may
 *  cause the instance to become unusable while the update is in progress.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.suspensionReasons

/**
 *  Something wrong with the CMEK key provided by customer.
 *
 *  Value: "CUSTOMER_MANAGED_KEY_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_SuspensionReasons_CustomerManagedKeyIssue;
/**
 *  Not set.
 *
 *  Value: "SUSPENSION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_SuspensionReasons_SuspensionReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.tier

/**
 *  BASIC tier: standalone instance
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_Basic;
/**
 *  STANDARD_HA tier: highly available primary/replica instances
 *
 *  Value: "STANDARD_HA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_StandardHa;
/**
 *  Not set.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_Tier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Instance.transitEncryptionMode

/**
 *  TLS is disabled for the instance.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_TransitEncryptionMode_Disabled;
/**
 *  Client to Server traffic encryption enabled with server authentication.
 *
 *  Value: "SERVER_AUTHENTICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_TransitEncryptionMode_ServerAuthentication;
/**
 *  Not set.
 *
 *  Value: "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Instance_TransitEncryptionMode_TransitEncryptionModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.ziOrgPolicy

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.ziRegionPolicy

/** Value: "ZI_REGION_POLICY_FAIL_CLOSED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailClosed;
/** Value: "ZI_REGION_POLICY_FAIL_OPEN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailOpen;
/** Value: "ZI_REGION_POLICY_NOT_SET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyNotSet;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_REGION_POLICY_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnknown;
/** Value: "ZI_REGION_POLICY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.ziRegionState

/** Value: "ZI_REGION_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionEnabled;
/** Value: "ZI_REGION_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionNotEnabled;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_REGION_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionUnknown;
/** Value: "ZI_REGION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.zoneIsolation

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.zoneSeparation

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.zsOrgPolicy

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_IsolationExpectations.zsRegionState

/** Value: "ZS_REGION_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionEnabled;
/** Value: "ZS_REGION_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionNotEnabled;
/**
 *  To be used if tracking of the asset ZS-bit is not available
 *
 *  Value: "ZS_REGION_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionUnknown;
/** Value: "ZS_REGION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_LocationAssignment.locationType

/** Value: "CLOUD_REGION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_CloudRegion;
/**
 *  11-20: Logical failure domains.
 *
 *  Value: "CLOUD_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_CloudZone;
/**
 *  1-10: Physical failure domains.
 *
 *  Value: "CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_Cluster;
/** Value: "GLOBAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_Global;
/** Value: "MULTI_REGION_GEO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_MultiRegionGeo;
/** Value: "MULTI_REGION_JURISDICTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_MultiRegionJurisdiction;
/** Value: "OTHER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_Other;
/** Value: "POP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_Pop;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_LocationAssignment_LocationType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ObservabilityMetricData.aggregationType

/**
 *  Unspecified aggregation type.
 *
 *  Value: "AGGREGATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_AggregationType_AggregationTypeUnspecified;
/**
 *  current aggregation type.
 *
 *  Value: "CURRENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_AggregationType_Current;
/**
 *  P95 aggregation type.
 *
 *  Value: "P95"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_AggregationType_P95;
/**
 *  P99 aggregation type.
 *
 *  Value: "P99"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_AggregationType_P99;
/**
 *  PEAK aggregation type.
 *
 *  Value: "PEAK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_AggregationType_Peak;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ObservabilityMetricData.metricType

/**
 *  CPU utilization for a resource. The value is a fraction between 0.0 and 1.0
 *  (may momentarily exceed 1.0 in some cases).
 *
 *  Value: "CPU_UTILIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_CpuUtilization;
/**
 *  Memory utilization for a resource. The value is a fraction between 0.0 and
 *  1.0 (may momentarily exceed 1.0 in some cases).
 *
 *  Value: "MEMORY_UTILIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_MemoryUtilization;
/**
 *  Unspecified metric type.
 *
 *  Value: "METRIC_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_MetricTypeUnspecified;
/**
 *  Number of network connections for a resource.
 *
 *  Value: "NETWORK_CONNECTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_NetworkConnections;
/**
 *  Sotrage used by a resource.
 *
 *  Value: "STORAGE_USED_BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_StorageUsedBytes;
/**
 *  Storage utilization for a resource. The value is a fraction between 0.0 and
 *  1.0 (may momentarily exceed 1.0 in some cases).
 *
 *  Value: "STORAGE_UTILIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ObservabilityMetricData_MetricType_StorageUtilization;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_OperationError.errorType

/**
 *  User initiated cancellation
 *
 *  Value: "CANCELLATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_CancellationError;
/**
 *  Database is not accessible
 *
 *  Value: "DATABASE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_DatabaseError;
/**
 *  Any other internal error.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_InternalError;
/**
 *  key destroyed, expired, not found, unreachable or permission denied.
 *
 *  Value: "KMS_KEY_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_KmsKeyError;
/**
 *  UNSPECIFIED means product type is not known or available.
 *
 *  Value: "OPERATION_ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_OperationErrorTypeUnspecified;
/**
 *  SQL server specific error
 *
 *  Value: "SQLSERVER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_SqlserverError;
/**
 *  The zone or region does not have sufficient resources to handle the request
 *  at the moment
 *
 *  Value: "STOCKOUT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_OperationError_ErrorType_StockoutError;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_PersistenceConfig.persistenceMode

/**
 *  Persistence is disabled for the instance, and any existing snapshots are
 *  deleted.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_PersistenceMode_Disabled;
/**
 *  Not set.
 *
 *  Value: "PERSISTENCE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_PersistenceMode_PersistenceModeUnspecified;
/**
 *  RDB based Persistence is enabled.
 *
 *  Value: "RDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_PersistenceMode_Rdb;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_PersistenceConfig.rdbSnapshotPeriod

/**
 *  Snapshot every 1 hour.
 *
 *  Value: "ONE_HOUR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_OneHour;
/**
 *  Snapshot every 6 hours.
 *
 *  Value: "SIX_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_SixHours;
/**
 *  Not set.
 *
 *  Value: "SNAPSHOT_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_SnapshotPeriodUnspecified;
/**
 *  Snapshot every 12 hours.
 *
 *  Value: "TWELVE_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_TwelveHours;
/**
 *  Snapshot every 24 hours.
 *
 *  Value: "TWENTY_FOUR_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_TwentyFourHours;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Product.engine

/**
 *  Cloud Spanner with Google SQL dialect.
 *
 *  Value: "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineCloudSpannerWithGooglesqlDialect;
/**
 *  Cloud Spanner with PostgreSQL dialect.
 *
 *  Value: "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineCloudSpannerWithPostgresDialect;
/**
 *  Firestore with datastore mode.
 *
 *  Value: "ENGINE_FIRESTORE_WITH_DATASTORE_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineFirestoreWithDatastoreMode;
/**
 *  Firestore with native mode.
 *
 *  Value: "ENGINE_FIRESTORE_WITH_NATIVE_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineFirestoreWithNativeMode;
/**
 *  Memorystore with Redis dialect.
 *
 *  Value: "ENGINE_MEMORYSTORE_FOR_REDIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineMemorystoreForRedis;
/**
 *  Memorystore with Redis cluster dialect.
 *
 *  Value: "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineMemorystoreForRedisCluster;
/**
 *  MySQL binary running as an engine in the database instance.
 *
 *  Value: "ENGINE_MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineMysql;
/**
 *  Native database binary running as engine in instance.
 *
 *  Value: "ENGINE_NATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineNative;
/**
 *  Other refers to rest of other database engine. This is to be when engine is
 *  known, but it is not present in this enum.
 *
 *  Value: "ENGINE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineOther;
/**
 *  Postgres binary running as engine in database instance.
 *
 *  Value: "ENGINE_POSTGRES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EnginePostgres;
/**
 *  SQLServer binary running as engine in database instance.
 *
 *  Value: "ENGINE_SQL_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineSqlServer;
/**
 *  UNSPECIFIED means engine type is not known or available.
 *
 *  Value: "ENGINE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_EngineUnspecified;
/**
 *  MySQL binary running as engine in database instance.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_Mysql GTLR_DEPRECATED;
/**
 *  Native database binary running as engine in instance.
 *
 *  Value: "NATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_Native GTLR_DEPRECATED;
/**
 *  Postgres binary running as engine in database instance.
 *
 *  Value: "POSTGRES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_Postgres GTLR_DEPRECATED;
/**
 *  SQLServer binary running as engine in database instance.
 *
 *  Value: "SQL_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Engine_SqlServer GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_Product.type

/**
 *  AlloyDB product area in GCP
 *
 *  Value: "ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_Alloydb GTLR_DEPRECATED;
/**
 *  Cloud SQL product area in GCP
 *
 *  Value: "CLOUD_SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_CloudSql GTLR_DEPRECATED;
/**
 *  On premises database product.
 *
 *  Value: "ON_PREM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_OnPrem GTLR_DEPRECATED;
/**
 *  AlloyDB product area in GCP
 *
 *  Value: "PRODUCT_TYPE_ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeAlloydb;
/**
 *  Bigtable product area in GCP
 *
 *  Value: "PRODUCT_TYPE_BIGTABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeBigtable;
/**
 *  Cloud SQL product area in GCP
 *
 *  Value: "PRODUCT_TYPE_CLOUD_SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeCloudSql;
/**
 *  Firestore product area in GCP.
 *
 *  Value: "PRODUCT_TYPE_FIRESTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeFirestore;
/**
 *  Memorystore product area in GCP
 *
 *  Value: "PRODUCT_TYPE_MEMORYSTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeMemorystore;
/**
 *  On premises database product.
 *
 *  Value: "PRODUCT_TYPE_ON_PREM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeOnPrem;
/**
 *  Other refers to rest of other product type. This is to be when product type
 *  is known, but it is not present in this enum.
 *
 *  Value: "PRODUCT_TYPE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeOther;
/**
 *  Spanner product area in GCP
 *
 *  Value: "PRODUCT_TYPE_SPANNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeSpanner;
/**
 *  UNSPECIFIED means product type is not known or available.
 *
 *  Value: "PRODUCT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_Product_Type_ProductTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RDBConfig.rdbSnapshotPeriod

/**
 *  One hour.
 *
 *  Value: "ONE_HOUR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_OneHour;
/**
 *  Six hours.
 *
 *  Value: "SIX_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_SixHours;
/**
 *  Not set.
 *
 *  Value: "SNAPSHOT_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_SnapshotPeriodUnspecified;
/**
 *  Twelve hours.
 *
 *  Value: "TWELVE_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_TwelveHours;
/**
 *  Twenty four hours.
 *
 *  Value: "TWENTY_FOUR_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_TwentyFourHours;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ReconciliationOperationMetadata.exclusiveAction

/**
 *  The resource has to be deleted. When using this bit, the CLH should fail the
 *  operation. DEPRECATED. Instead use DELETE_RESOURCE OperationSignal in
 *  SideChannel.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_Delete GTLR_DEPRECATED;
/**
 *  This resource could not be repaired but the repair should be tried again at
 *  a later time. This can happen if there is a dependency that needs to be
 *  resolved first- e.g. if a parent resource must be repaired before a child
 *  resource.
 *
 *  Value: "RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_Retry;
/**
 *  Unknown repair action.
 *
 *  Value: "UNKNOWN_REPAIR_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_UnknownRepairAction;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RequirementOverride.ziOverride

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RequirementOverride.zsOverride

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RescheduleClusterMaintenanceRequest.rescheduleType

/**
 *  If the user wants to schedule the maintenance to happen now.
 *
 *  Value: "IMMEDIATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_Immediate;
/**
 *  Not set.
 *
 *  Value: "RESCHEDULE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified;
/**
 *  If the user wants to reschedule the maintenance to a specific time.
 *
 *  Value: "SPECIFIC_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_SpecificTime;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RescheduleMaintenanceRequest.rescheduleType

/**
 *  If the user wants to schedule the maintenance to happen now.
 *
 *  Value: "IMMEDIATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_Immediate;
/**
 *  If the user wants to use the existing maintenance policy to find the next
 *  available window.
 *
 *  Value: "NEXT_AVAILABLE_WINDOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_NextAvailableWindow;
/**
 *  Not set.
 *
 *  Value: "RESCHEDULE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified;
/**
 *  If the user wants to reschedule the maintenance to a specific time.
 *
 *  Value: "SPECIFIC_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_SpecificTime;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_RetentionSettings.retentionUnit

/**
 *  Retention will be by count, eg. "retain the most recent 7 backups".
 *
 *  Value: "COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RetentionSettings_RetentionUnit_Count;
/**
 *  For rest of the other category
 *
 *  Value: "RETENTION_UNIT_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RetentionSettings_RetentionUnit_RetentionUnitOther;
/**
 *  Backup retention unit is unspecified, will be treated as COUNT.
 *
 *  Value: "RETENTION_UNIT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RetentionSettings_RetentionUnit_RetentionUnitUnspecified;
/**
 *  Retention will be by Time, eg. "retain the last 7 days backups".
 *
 *  Value: "TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_RetentionSettings_RetentionUnit_Time;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_WeeklyMaintenanceWindow.day

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Wednesday;

// ----------------------------------------------------------------------------
// GTLRCloudRedis_ZoneDistributionConfig.mode

/**
 *  Distribute all resources across 3 zones picked at random, within the region.
 *
 *  Value: "MULTI_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ZoneDistributionConfig_Mode_MultiZone;
/**
 *  Distribute all resources in a single zone. The zone field must be specified,
 *  when this mode is selected.
 *
 *  Value: "SINGLE_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ZoneDistributionConfig_Mode_SingleZone;
/**
 *  Not Set. Default: MULTI_ZONE
 *
 *  Value: "ZONE_DISTRIBUTION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRedis_ZoneDistributionConfig_Mode_ZoneDistributionModeUnspecified;

/**
 *  Configuration of the AOF based persistence.
 */
@interface GTLRCloudRedis_AOFConfig : GTLRObject

/**
 *  Optional. fsync configuration.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_AOFConfig_AppendFsync_Always fsync every time new
 *        write commands are appended to the AOF. It has the best data loss
 *        protection at the cost of performance (Value: "ALWAYS")
 *    @arg @c kGTLRCloudRedis_AOFConfig_AppendFsync_AppendFsyncUnspecified Not
 *        set. Default: EVERYSEC (Value: "APPEND_FSYNC_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_AOFConfig_AppendFsync_Everysec fsync every second.
 *        Fast enough, and you may lose 1 second of data if there is a disaster
 *        (Value: "EVERYSEC")
 *    @arg @c kGTLRCloudRedis_AOFConfig_AppendFsync_No Never fsync. Normally
 *        Linux will flush data every 30 seconds with this configuration, but
 *        it's up to the kernel's exact tuning. (Value: "NO")
 */
@property(nonatomic, copy, nullable) NSString *appendFsync;

@end


/**
 *  Provides the mapping of a cloud asset to a direct physical location or to a
 *  proxy that defines the location on its behalf.
 */
@interface GTLRCloudRedis_AssetLocation : GTLRObject

/**
 *  Spanner path of the CCFE RMS database. It is only applicable for CCFE
 *  tenants that use CCFE RMS for storing resource metadata.
 */
@property(nonatomic, copy, nullable) NSString *ccfeRmsPath;

/**
 *  Defines the customer expectation around ZI/ZS for this asset and ZI/ZS state
 *  of the region at the time of asset creation.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_IsolationExpectations *expected;

/** Defines extra parameters required for specific asset types. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_ExtraParameter *> *extraParameters;

/** Contains all kinds of physical location definitions for this asset. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_LocationData *> *locationData;

/**
 *  Defines parents assets if any in order to allow later generation of
 *  child_asset_location data via child assets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_CloudAsset *> *parentAsset;

@end


/**
 *  Configuration for availability of database instance
 */
@interface GTLRCloudRedis_AvailabilityConfiguration : GTLRObject

/**
 *  Checks for existence of (multi-cluster) routing configuration that allows
 *  automatic failover to a different zone/region in case of an outage.
 *  Applicable to Bigtable resources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automaticFailoverRoutingConfigured;

/**
 *  Availability type. Potential values: * `ZONAL`: The instance serves data
 *  from only one zone. Outages in that zone affect data accessibility. *
 *  `REGIONAL`: The instance can serve data from more than one zone in a region
 *  (it is highly available).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_AvailabilityTypeOther
 *        For rest of the other category (Value: "AVAILABILITY_TYPE_OTHER")
 *    @arg @c kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_AvailabilityTypeUnspecified
 *        Value "AVAILABILITY_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_MultiRegional
 *        Multi regional instance (Value: "MULTI_REGIONAL")
 *    @arg @c kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_Regional
 *        Regional available instance. (Value: "REGIONAL")
 *    @arg @c kGTLRCloudRedis_AvailabilityConfiguration_AvailabilityType_Zonal
 *        Zonal available instance. (Value: "ZONAL")
 */
@property(nonatomic, copy, nullable) NSString *availabilityType;

/**
 *  Checks for resources that are configured to have redundancy, and ongoing
 *  replication across regions
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crossRegionReplicaConfigured;

/**
 *  externalReplicaConfigured
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *externalReplicaConfigured;

/**
 *  promotableReplicaConfigured
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promotableReplicaConfigured;

@end


/**
 *  Configuration for automatic backups
 */
@interface GTLRCloudRedis_BackupConfiguration : GTLRObject

/**
 *  Whether customer visible automated backups are enabled on the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automatedBackupEnabled;

/** Backup retention settings. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RetentionSettings *backupRetentionSettings;

/**
 *  Whether point-in-time recovery is enabled. This is optional field, if the
 *  database service does not have this feature or metadata is not available in
 *  control plane, this can be omitted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pointInTimeRecoveryEnabled;

@end


/**
 *  A backup run.
 */
@interface GTLRCloudRedis_BackupRun : GTLRObject

/** The time the backup operation completed. REQUIRED */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Information about why the backup operation failed. This is only present if
 *  the run has the FAILED status. OPTIONAL
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_OperationError *error;

/** The time the backup operation started. REQUIRED */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The status of this run. REQUIRED
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_BackupRun_Status_Failed The backup was
 *        unsuccessful. (Value: "FAILED")
 *    @arg @c kGTLRCloudRedis_BackupRun_Status_StatusUnspecified Value
 *        "STATUS_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_BackupRun_Status_Successful The backup was
 *        successful. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Policy ID that identified data placement in Blobstore as per
 *  go/blobstore-user-guide#data-metadata-placement-and-failure-domains
 */
@interface GTLRCloudRedis_BlobstoreLocation : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *policyId;

@end


/**
 *  GTLRCloudRedis_CertChain
 */
@interface GTLRCloudRedis_CertChain : GTLRObject

/** The certificates that form the CA chain, from leaf to root order. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certificates;

@end


/**
 *  Redis cluster certificate authority
 */
@interface GTLRCloudRedis_CertificateAuthority : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudRedis_ManagedCertificateAuthority *managedServerCa;

/**
 *  Identifier. Unique name of the resource in this scope including project,
 *  location and cluster using the form:
 *  `projects/{project}/locations/{location}/clusters/{cluster}/certificateAuthority`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRCloudRedis_CloudAsset
 */
@interface GTLRCloudRedis_CloudAsset : GTLRObject

@property(nonatomic, copy, nullable) NSString *assetName;
@property(nonatomic, copy, nullable) NSString *assetType;

@end


/**
 *  GTLRCloudRedis_CloudAssetComposition
 */
@interface GTLRCloudRedis_CloudAssetComposition : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_CloudAsset *> *childAsset;

@end


/**
 *  A cluster instance.
 */
@interface GTLRCloudRedis_Cluster : GTLRObject

/**
 *  Optional. The authorization mode of the Redis cluster. If not provided, auth
 *  feature is disabled for the cluster.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeDisabled
 *        Authorization disabled mode (Value: "AUTH_MODE_DISABLED")
 *    @arg @c kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeIamAuth IAM
 *        basic authorization mode (Value: "AUTH_MODE_IAM_AUTH")
 *    @arg @c kGTLRCloudRedis_Cluster_AuthorizationMode_AuthModeUnspecified Not
 *        set. (Value: "AUTH_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authorizationMode;

/**
 *  Output only. The timestamp associated with the cluster creation request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Cross cluster replication config. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_CrossClusterReplicationConfig *crossClusterReplicationConfig;

/**
 *  Optional. The delete operation will fail when the value is set to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletionProtectionEnabled;

/**
 *  Output only. Endpoints created on each given network, for Redis clients to
 *  connect to the cluster. Currently only one discovery endpoint is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_DiscoveryEndpoint *> *discoveryEndpoints;

/**
 *  Optional. ClusterMaintenancePolicy determines when to allow or deny updates.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_ClusterMaintenancePolicy *maintenancePolicy;

/**
 *  Output only. ClusterMaintenanceSchedule Output only Published maintenance
 *  schedule.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_ClusterMaintenanceSchedule *maintenanceSchedule;

/**
 *  Required. Identifier. Unique name of the resource in this scope including
 *  project and location using the form:
 *  `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The type of a redis node in the cluster. NodeType determines the
 *  underlying machine-type of a redis node.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Cluster_NodeType_NodeTypeUnspecified Node type
 *        unspecified (Value: "NODE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Cluster_NodeType_RedisHighmemMedium Redis highmem
 *        medium node_type. (Value: "REDIS_HIGHMEM_MEDIUM")
 *    @arg @c kGTLRCloudRedis_Cluster_NodeType_RedisHighmemXlarge Redis highmem
 *        xlarge node_type. (Value: "REDIS_HIGHMEM_XLARGE")
 *    @arg @c kGTLRCloudRedis_Cluster_NodeType_RedisSharedCoreNano Redis shared
 *        core nano node_type. (Value: "REDIS_SHARED_CORE_NANO")
 *    @arg @c kGTLRCloudRedis_Cluster_NodeType_RedisStandardSmall Redis standard
 *        small node_type. (Value: "REDIS_STANDARD_SMALL")
 */
@property(nonatomic, copy, nullable) NSString *nodeType;

/** Optional. Persistence config (RDB, AOF) for the cluster. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_ClusterPersistenceConfig *persistenceConfig;

/**
 *  Output only. Precise value of redis memory size in GB for the entire
 *  cluster.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preciseSizeGb;

/**
 *  Required. Each PscConfig configures the consumer network where IPs will be
 *  designated to the cluster for client access through Private Service Connect
 *  Automation. Currently, only one PscConfig is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_PscConfig *> *pscConfigs;

/**
 *  Output only. The list of PSC connections that are auto-created through
 *  service connectivity automation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_PscConnection *> *pscConnections;

/**
 *  Optional. Key/Value pairs of customer overrides for mutable Redis Configs
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Cluster_RedisConfigs *redisConfigs;

/**
 *  Optional. The number of replica nodes per shard.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicaCount;

/**
 *  Optional. Number of shards for the Redis cluster.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shardCount;

/**
 *  Output only. Redis memory size in GB for the entire cluster rounded up to
 *  the next integer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeGb;

/**
 *  Output only. The current state of this cluster. Can be CREATING, READY,
 *  UPDATING, DELETING and SUSPENDED
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Cluster_State_Active Redis cluster has been
 *        created and is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRCloudRedis_Cluster_State_Creating Redis cluster is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudRedis_Cluster_State_Deleting Redis cluster is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudRedis_Cluster_State_StateUnspecified Not set. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Cluster_State_Updating Redis cluster configuration
 *        is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current state of the cluster.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_StateInfo *stateInfo;

/**
 *  Optional. The in-transit encryption for the Redis cluster. If not provided,
 *  encryption is disabled for the cluster.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeDisabled
 *        In-transit encryption disabled. (Value:
 *        "TRANSIT_ENCRYPTION_MODE_DISABLED")
 *    @arg @c kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeServerAuthentication
 *        Use server managed encryption for in-transit encryption. (Value:
 *        "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION")
 *    @arg @c kGTLRCloudRedis_Cluster_TransitEncryptionMode_TransitEncryptionModeUnspecified
 *        In-transit encryption not set. (Value:
 *        "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *transitEncryptionMode;

/** Output only. System assigned, unique identifier for the cluster. */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Optional. This config will be used to determine how the customer wants us to
 *  distribute cluster resources within the region.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_ZoneDistributionConfig *zoneDistributionConfig;

@end


/**
 *  Optional. Key/Value pairs of customer overrides for mutable Redis Configs
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Cluster_RedisConfigs : GTLRObject
@end


/**
 *  Maintenance policy per cluster.
 */
@interface GTLRCloudRedis_ClusterMaintenancePolicy : GTLRObject

/**
 *  Output only. The time when the policy was created i.e. Maintenance Window or
 *  Deny Period was assigned.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time when the policy was updated i.e. Maintenance Window or
 *  Deny Period was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. Maintenance window that is applied to resources covered by this
 *  policy. Minimum 1. For the current version, the maximum number of
 *  weekly_maintenance_window is expected to be one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_ClusterWeeklyMaintenanceWindow *> *weeklyMaintenanceWindow;

@end


/**
 *  Upcoming maitenance schedule.
 */
@interface GTLRCloudRedis_ClusterMaintenanceSchedule : GTLRObject

/**
 *  Output only. The end time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The start time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Configuration of the persistence functionality.
 */
@interface GTLRCloudRedis_ClusterPersistenceConfig : GTLRObject

/**
 *  Optional. AOF configuration. This field will be ignored if mode is not AOF.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_AOFConfig *aofConfig;

/**
 *  Optional. The mode of persistence.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Aof AOF based
 *        persistence is enabled. (Value: "AOF")
 *    @arg @c kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Disabled Persistence
 *        is disabled, and any snapshot data is deleted. (Value: "DISABLED")
 *    @arg @c kGTLRCloudRedis_ClusterPersistenceConfig_Mode_PersistenceModeUnspecified
 *        Not set. (Value: "PERSISTENCE_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_ClusterPersistenceConfig_Mode_Rdb RDB based
 *        persistence is enabled. (Value: "RDB")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. RDB configuration. This field will be ignored if mode is not RDB.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RDBConfig *rdbConfig;

@end


/**
 *  Time window specified for weekly operations.
 */
@interface GTLRCloudRedis_ClusterWeeklyMaintenanceWindow : GTLRObject

/**
 *  Allows to define schedule that runs specified day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Saturday
 *        Saturday (Value: "SATURDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Thursday
 *        Thursday (Value: "THURSDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRCloudRedis_ClusterWeeklyMaintenanceWindow_Day_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *day;

/** Start time of the window in UTC. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_TimeOfDay *startTime;

@end


/**
 *  Contains compliance information about a security standard indicating unmet
 *  recommendations.
 */
@interface GTLRCloudRedis_Compliance : GTLRObject

/**
 *  Industry-wide compliance standards or benchmarks, such as CIS, PCI, and
 *  OWASP.
 */
@property(nonatomic, copy, nullable) NSString *standard;

/** Version of the standard or benchmark, for example, 1.1 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Cross cluster replication config.
 */
@interface GTLRCloudRedis_CrossClusterReplicationConfig : GTLRObject

/**
 *  The role of the cluster in cross cluster replication.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_ClusterRoleUnspecified
 *        Cluster role is not set. The behavior is equivalent to NONE. (Value:
 *        "CLUSTER_ROLE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_None
 *        This cluster does not participate in cross cluster replication. It is
 *        an independent cluster and does not replicate to or from any other
 *        clusters. (Value: "NONE")
 *    @arg @c kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_Primary
 *        A cluster that allows both reads and writes. Any data written to this
 *        cluster is also replicated to the attached secondary clusters. (Value:
 *        "PRIMARY")
 *    @arg @c kGTLRCloudRedis_CrossClusterReplicationConfig_ClusterRole_Secondary
 *        A cluster that allows only reads and replicates data from a primary
 *        cluster. (Value: "SECONDARY")
 */
@property(nonatomic, copy, nullable) NSString *clusterRole;

/**
 *  Output only. An output only view of all the member clusters participating in
 *  the cross cluster replication. This view will be provided by every member
 *  cluster irrespective of its cluster role(primary or secondary). A primary
 *  cluster can provide information about all the secondary clusters replicating
 *  from it. However, a secondary cluster only knows about the primary cluster
 *  from which it is replicating. However, for scenarios, where the primary
 *  cluster is unavailable(e.g. regional outage), a GetCluster request can be
 *  sent to any other member cluster and this field will list all the member
 *  clusters participating in cross cluster replication.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Membership *membership;

/**
 *  Details of the primary cluster that is used as the replication source for
 *  this secondary cluster. This field is only set for a secondary cluster.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RemoteCluster *primaryCluster;

/**
 *  List of secondary clusters that are replicating from this primary cluster.
 *  This field is only set for a primary cluster.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_RemoteCluster *> *secondaryClusters;

/**
 *  Output only. The last time cross cluster replication config was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Any custom metadata associated with the resource. e.g. A spanner instance
 *  can have multiple databases with its own unique metadata. Information for
 *  these individual databases can be captured in custom metadata data
 */
@interface GTLRCloudRedis_CustomMetadataData : GTLRObject

/**
 *  Metadata for individual internal resources in an instance. e.g. spanner
 *  instance can have multiple databases with unique configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_InternalResourceMetadata *> *internalResourceMetadata;

@end


/**
 *  DatabaseResourceFeed is the top level proto to be used to ingest different
 *  database resource level events into Condor platform.
 */
@interface GTLRCloudRedis_DatabaseResourceFeed : GTLRObject

/** Required. Timestamp when feed is generated. */
@property(nonatomic, strong, nullable) GTLRDateTime *feedTimestamp;

/**
 *  Required. Type feed to be ingested into condor
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceFeed_FeedType_FeedtypeUnspecified
 *        Value "FEEDTYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceFeed_FeedType_ObservabilityData
 *        Database resource monitoring data (Value: "OBSERVABILITY_DATA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceFeed_FeedType_RecommendationSignalData
 *        Database resource recommendation signal data (Value:
 *        "RECOMMENDATION_SIGNAL_DATA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceFeed_FeedType_ResourceMetadata
 *        Database resource metadata feed from control plane (Value:
 *        "RESOURCE_METADATA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceFeed_FeedType_SecurityFindingData
 *        Database resource security health signal data (Value:
 *        "SECURITY_FINDING_DATA")
 */
@property(nonatomic, copy, nullable) NSString *feedType;

@property(nonatomic, strong, nullable) GTLRCloudRedis_ObservabilityMetricData *observabilityMetricData;
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceRecommendationSignalData *recommendationSignalData;
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceHealthSignalData *resourceHealthSignalData;

/**
 *  Primary key associated with the Resource. resource_id is available in
 *  individual feed level as well.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceId *resourceId GTLR_DEPRECATED;

@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceMetadata *resourceMetadata;

@end


/**
 *  Common model for database resource health signal data.
 */
@interface GTLRCloudRedis_DatabaseResourceHealthSignalData : GTLRObject

/** Any other additional metadata */
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceHealthSignalData_AdditionalMetadata *additionalMetadata;

/**
 *  Industry standards associated with this signal; if this signal is an issue,
 *  that could be a violation of the associated industry standard(s). For
 *  example, AUTO_BACKUP_DISABLED signal is associated with CIS GCP 1.1, CIS GCP
 *  1.2, CIS GCP 1.3, NIST 800-53 and ISO-27001 compliance standards. If a
 *  database resource does not have automated backup enable, it will violate
 *  these following industry standards.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Compliance *> *compliance;

/**
 *  Description associated with signal
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The last time at which the event described by this signal took
 *  place
 */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  The external-uri of the signal, using which more information about this
 *  signal can be obtained. In GCP, this will take user to SCC page to get more
 *  details about signals.
 */
@property(nonatomic, copy, nullable) NSString *externalUri;

/**
 *  Required. The name of the signal, ex: PUBLIC_SQL_INSTANCE,
 *  SQL_LOG_ERROR_VERBOSITY etc.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Aws
 *        Amazon web service (Value: "AWS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Azure
 *        Azure web service (Value: "AZURE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Gcp
 *        Google cloud platform provider (Value: "GCP")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Onprem
 *        On-prem database resources. (Value: "ONPREM")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_ProviderOther
 *        For the rest of the other categories. Other refers to the rest of
 *        other database service providers, this could be smaller cloud
 *        provider. This needs to be provided when the provider is known, but it
 *        is not present in the existing set of enum values. (Value:
 *        "PROVIDER_OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_ProviderUnspecified
 *        Value "PROVIDER_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_Provider_Selfmanaged
 *        Self-managed database provider. These are resources on a cloud
 *        platform, e.g., database resource installed in a GCE VM, but not a
 *        managed database service. (Value: "SELFMANAGED")
 */
@property(nonatomic, copy, nullable) NSString *provider;

/**
 *  Closest parent container of this resource. In GCP, 'container' refers to a
 *  Cloud Resource Manager project. It must be resource name of a Cloud Resource
 *  Manager project with the format of "provider//", such as "projects/123". For
 *  GCP provided resources, number should be project number.
 */
@property(nonatomic, copy, nullable) NSString *resourceContainer;

/**
 *  Required. Database resource name associated with the signal. Resource name
 *  to follow CAIS resource_name format as noted here go/condor-common-datamodel
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Required. The class of the signal, such as if it's a THREAT or
 *  VULNERABILITY.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_ClassUnspecified
 *        Unspecified signal class. (Value: "CLASS_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Error
 *        Describes an error that prevents some SCC functionality. (Value:
 *        "ERROR")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Misconfiguration
 *        Describes a potential weakness in cloud resource/asset configuration
 *        that increases risk. (Value: "MISCONFIGURATION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Observation
 *        Describes a security observation that is for informational purposes.
 *        (Value: "OBSERVATION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Threat
 *        Describes unwanted or malicious activity. (Value: "THREAT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalClass_Vulnerability
 *        Describes a potential weakness in software that increases risk to
 *        Confidentiality & Integrity & Availability. (Value: "VULNERABILITY")
 */
@property(nonatomic, copy, nullable) NSString *signalClass;

/**
 *  Required. Unique identifier for the signal. This is an unique id which would
 *  be mainatined by partner to identify a signal.
 */
@property(nonatomic, copy, nullable) NSString *signalId;

/**
 *  The severity of the signal, such as if it's a HIGH or LOW severity.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Critical
 *        A critical vulnerability is easily discoverable by an external actor,
 *        exploitable. (Value: "CRITICAL")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_High
 *        A high risk vulnerability can be easily discovered and exploited in
 *        combination with other vulnerabilities. (Value: "HIGH")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Low
 *        A low risk vulnerability hampers a security organization's ability to
 *        detect vulnerabilities or active threats in their deployment. (Value:
 *        "LOW")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_Medium
 *        A medium risk vulnerability could be used by an actor to gain access
 *        to resources or privileges that enable them to eventually gain access
 *        and the ability to execute arbitrary code or exfiltrate data. (Value:
 *        "MEDIUM")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalSeverity_SignalSeverityUnspecified
 *        This value is used for findings when a source doesn't write a severity
 *        value. (Value: "SIGNAL_SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *signalSeverity;

/**
 *  Required. Type of signal, for example, `AVAILABLE_IN_MULTIPLE_ZONES`,
 *  `LOGGING_MOST_ERRORS`, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionAttemptsNotLogged
 *        Represents if the log_connections database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionMaxNotConfigured
 *        Represents if the user connections database flag for a Cloud SQL for
 *        SQL Server instance is configured. (Value:
 *        "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeConnectionsPerformanceImpact
 *        Performance impact of connections settings (Value:
 *        "SIGNAL_TYPE_CONNECTIONS_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDatabaseAuditingDisabled
 *        Represents database auditing is disabled. (Value:
 *        "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDatabaseNamesExposed
 *        Represents if the skip_show_database database flag for a Cloud SQL for
 *        MySQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDataExportToExternalCloudStorageBucket
 *        Detects if database instance data exported to a Cloud Storage bucket
 *        outside of the organization. (Value:
 *        "SIGNAL_TYPE_DATA_EXPORT_TO_EXTERNAL_CLOUD_STORAGE_BUCKET")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDataExportToPublicCloudStorageBucket
 *        Detects if database instance data exported to a Cloud Storage bucket
 *        that is owned by the organization and is publicly accessible. (Value:
 *        "SIGNAL_TYPE_DATA_EXPORT_TO_PUBLIC_CLOUD_STORAGE_BUCKET")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeDisconnectionsNotLogged
 *        Represents if the log_disconnections database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeEncryptionKeyNotCustomerManaged
 *        Represents if a SQL database instance is not encrypted with
 *        customer-managed encryption keys (CMEK). (Value:
 *        "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfClientHostname
 *        Represents if the log_hostname database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfParserStatistics
 *        Represents if the log_parser_stats database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExcessiveLoggingOfPlannerStatistics
 *        Represents if the log_planner_stats database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedByOwnershipChaining
 *        Represents if the cross_db_ownership_chaining database flag for a
 *        Cloud SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToExternalScripts
 *        Represents if he external scripts enabled database flag for a Cloud
 *        SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToLocalDataLoads
 *        Represents if the local_infile database flag for a Cloud SQL for MySQL
 *        instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToPublicAccess
 *        Represents if a resource is exposed to public access. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeExposedToRemoteAccess
 *        Represents if the remote access database flag for a Cloud SQL for SQL
 *        Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeGroupNotReplicatingAcrossRegions
 *        Represents if a group is replicating across regions. Checks for
 *        resources that are configured to have redundancy, and ongoing
 *        replication, across regions. (Value:
 *        "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighJoinsWithoutIndexes
 *        Performance impact of high joins without indexes (Value:
 *        "SIGNAL_TYPE_HIGH_JOINS_WITHOUT_INDEXES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighNumberOfOpenTables
 *        Represents high number of concurrently opened tables. (Value:
 *        "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighNumberOfTables
 *        Represents high table count close to SLA limit. (Value:
 *        "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeHighTransactionIdUtilization
 *        Represents high number of unvacuumed transactions (Value:
 *        "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeIdle
 *        Represents Idle instance helps to reduce costs. (Value:
 *        "SIGNAL_TYPE_IDLE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLastBackupFailed
 *        Represents if the last backup of a resource failed. (Value:
 *        "SIGNAL_TYPE_LAST_BACKUP_FAILED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLastBackupOld
 *        Represents if the last backup of a resource is older than some
 *        threshold value. (Value: "SIGNAL_TYPE_LAST_BACKUP_OLD")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingExcessiveStatementInfo
 *        Represents if the log_min_duration_statement database flag for a Cloud
 *        SQL for PostgreSQL instance is not set to -1. (Value:
 *        "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingMostErrors
 *        Represents if the log_min_error_statement database flag for a Cloud
 *        SQL for PostgreSQL instance is not set appropriately. (Value:
 *        "SIGNAL_TYPE_LOGGING_MOST_ERRORS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingOnlyCriticalErrors
 *        Represents if the log_min_error_statement database flag for a Cloud
 *        SQL for PostgreSQL instance does not have an appropriate severity
 *        level. (Value: "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLoggingQueryStatistics
 *        Represents if the log_statement_stats database flag for a Cloud SQL
 *        for PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeLogsNotOptimizedForTroubleshooting
 *        Represents if log_checkpoints database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeMinimalErrorLogging
 *        Represents if the log_min_messages database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to warning or another recommended
 *        value. (Value: "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoAutomatedBackupPolicy
 *        Represents if a resource has an automated backup policy. (Value:
 *        "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoPasswordPolicy
 *        No password policy set on resources (Value:
 *        "SIGNAL_TYPE_NO_PASSWORD_POLICY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoPromotableReplica
 *        Represents if a resource has a promotable replica. (Value:
 *        "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNoRootPassword
 *        Represents if a Cloud SQL database has a password configured for the
 *        root account or not. (Value: "SIGNAL_TYPE_NO_ROOT_PASSWORD")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotAvailableInMultipleRegions
 *        Represents if a resource is available in multiple regions. (Value:
 *        "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotAvailableInMultipleZones
 *        Represents if the resource is available in multiple zones or not.
 *        (Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotLoggingOnlyDdlStatements
 *        Represents if the log_statement database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to DDL (all data definition
 *        statements). (Value: "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotLoggingTemporaryFiles
 *        Represents if the log_temp_files database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to "0". (NOTE: 0 = ON) (Value:
 *        "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeNotProtectedByAutomaticFailover
 *        Represents if a resource is protected by automatic failover. Checks
 *        for resources that are configured to have redundancy within a region
 *        that enables automatic failover. (Value:
 *        "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeOutOfDisk
 *        Represents out of disk. (Value: "SIGNAL_TYPE_OUT_OF_DISK")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeOverprovisioned
 *        Represents instances that are unnecessarily large for given workload.
 *        (Value: "SIGNAL_TYPE_OVERPROVISIONED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypePublicIpEnabled
 *        Represents if public IP is enabled. (Value:
 *        "SIGNAL_TYPE_PUBLIC_IP_ENABLED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryDurationsNotLogged
 *        Represents if the log_duration database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryLockWaitsNotLogged
 *        Represents if the log_lock_waits database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQueryStatisticsLogged
 *        Represents if the databaseFlags property of instance metadata for the
 *        log_executor_status field is set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeQuotaLimit
 *        Cluster nearing quota limit (Value: "SIGNAL_TYPE_QUOTA_LIMIT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeRestrictAuthorizedNetworks
 *        Represents not restricted to authorized networks. (Value:
 *        "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeSensitiveTraceInfoNotMasked
 *        Represents if the 3625 (trace flag) database flag for a Cloud SQL for
 *        SQL Server instance is not set to on. (Value:
 *        "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeServerAuthenticationNotRequired
 *        Represents if The contained database authentication database flag for
 *        a Cloud SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeServerCertificateNearExpiry
 *        Represents server certificate is near expiry. (Value:
 *        "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeShortBackupRetention
 *        Represents if a resources has a short backup retention period. (Value:
 *        "SIGNAL_TYPE_SHORT_BACKUP_RETENTION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeSuperuserWritingToUserTables
 *        Detects events where a Cloud SQL superuser (postgres for PostgreSQL
 *        servers or root for MySQL users) writes to non-system tables. (Value:
 *        "SIGNAL_TYPE_SUPERUSER_WRITING_TO_USER_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeTmpTablesPerformanceImpact
 *        Performance impact of temporary tables settings (Value:
 *        "SIGNAL_TYPE_TMP_TABLES_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeTransLogsPerformanceImpact
 *        Performance impact of transaction logs settings (Value:
 *        "SIGNAL_TYPE_TRANS_LOGS_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnderprovisioned
 *        Represents need for more CPU and/or memory (Value:
 *        "SIGNAL_TYPE_UNDERPROVISIONED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnencryptedConnections
 *        Represents if a resources requires all incoming connections to use SSL
 *        or not. (Value: "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUnspecified
 *        Unspecified. (Value: "SIGNAL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUserGrantedAllPermissions
 *        Detects events where a database user or role has been granted all
 *        privileges to a database, or to all tables, procedures, or functions
 *        in a schema. (Value: "SIGNAL_TYPE_USER_GRANTED_ALL_PERMISSIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeUserOptionsConfigured
 *        Represents if the user options database flag for Cloud SQL SQL Server
 *        instance is configured or not. (Value:
 *        "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeVerboseErrorLogging
 *        Represents if the log_error_verbosity database flag for a Cloud SQL
 *        for PostgreSQL instance is not set to default or stricter (default or
 *        terse). (Value: "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatePolicyRestrictPublicIp
 *        Represents violate org policy restrict public ip. (Value:
 *        "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisControlsV80
 *        Represents if a resource violates CIS Controls 8.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_CONTROLS_V8_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation10
 *        Represents if a resource violates CIS GCP Foundation 1.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation11
 *        Represents if a resource violates CIS GCP Foundation 1.1. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation12
 *        Represents if a resource violates CIS GCP Foundation 1.2. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation13
 *        Represents if a resource violates CIS GCP Foundation 1.3. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCisGcpFoundation20
 *        Represents if a resource violates CIS GCP Foundation 2.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesCloudControlsMatrixV4
 *        Represents if a resource violates Cloud Controls Matrix v4.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CLOUD_CONTROLS_MATRIX_V4")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesHipaa
 *        Represents if a resource violates HIPAA. (Value:
 *        "SIGNAL_TYPE_VIOLATES_HIPAA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesIso27001
 *        Represents if a resource violates ISO-27001. (Value:
 *        "SIGNAL_TYPE_VIOLATES_ISO_27001")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesIso27001V2022
 *        Represents if a resource violates ISO 27001 2022. (Value:
 *        "SIGNAL_TYPE_VIOLATES_ISO_27001_V2022")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNist80053
 *        Represents if a resource violates NIST 800-53. (Value:
 *        "SIGNAL_TYPE_VIOLATES_NIST_800_53")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNist80053R5
 *        Represents if a resource violates NIST 800-53 R5. (Value:
 *        "SIGNAL_TYPE_VIOLATES_NIST_800_53_R5")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesNistCybersecurityFrameworkV10
 *        Represents if a resource violates NIST Cybersecurity Framework 1.0.
 *        (Value: "SIGNAL_TYPE_VIOLATES_NIST_CYBERSECURITY_FRAMEWORK_V1_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesPciDssV321
 *        Represents if a resource violates PCI-DSS v3.2.1. (Value:
 *        "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesPciDssV40
 *        Represents if a resource violates PCI-DSS v4.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_PCI_DSS_V4_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeViolatesSoc2V2017
 *        Represents if a resource violates SOC2 v2017. (Value:
 *        "SIGNAL_TYPE_VIOLATES_SOC2_V2017")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_SignalType_SignalTypeWeakRootPassword
 *        Represents if a Cloud SQL database has a weak password configured for
 *        the root account. (Value: "SIGNAL_TYPE_WEAK_ROOT_PASSWORD")
 */
@property(nonatomic, copy, nullable) NSString *signalType;

/**
 *  state
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Active The
 *        signal requires attention and has not been addressed yet. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Muted The
 *        signal has been muted. (Value: "MUTED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_Resolved
 *        The signal has been fixed, triaged as a non-issue or otherwise
 *        addressed and is no longer active. (Value: "RESOLVED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceHealthSignalData_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Any other additional metadata
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_DatabaseResourceHealthSignalData_AdditionalMetadata : GTLRObject
@end


/**
 *  DatabaseResourceId will serve as primary key for any resource ingestion
 *  event.
 */
@interface GTLRCloudRedis_DatabaseResourceId : GTLRObject

/**
 *  Required. Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_Aws Amazon web service
 *        (Value: "AWS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_Azure Azure web
 *        service (Value: "AZURE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_Gcp Google cloud
 *        platform provider (Value: "GCP")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_Onprem On-prem
 *        database resources. (Value: "ONPREM")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_ProviderOther For the
 *        rest of the other categories. Other refers to the rest of other
 *        database service providers, this could be smaller cloud provider. This
 *        needs to be provided when the provider is known, but it is not present
 *        in the existing set of enum values. (Value: "PROVIDER_OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_ProviderUnspecified
 *        Value "PROVIDER_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceId_Provider_Selfmanaged
 *        Self-managed database provider. These are resources on a cloud
 *        platform, e.g., database resource installed in a GCE VM, but not a
 *        managed database service. (Value: "SELFMANAGED")
 */
@property(nonatomic, copy, nullable) NSString *provider;

/** Optional. Needs to be used only when the provider is PROVIDER_OTHER. */
@property(nonatomic, copy, nullable) NSString *providerDescription;

/**
 *  Required. The type of resource this ID is identifying. Ex
 *  redis.googleapis.com/Instance, redis.googleapis.com/Cluster,
 *  alloydb.googleapis.com/Cluster, alloydb.googleapis.com/Instance,
 *  spanner.googleapis.com/Instance, spanner.googleapis.com/Database,
 *  firestore.googleapis.com/Database, sqladmin.googleapis.com/Instance,
 *  bigtableadmin.googleapis.com/Cluster, bigtableadmin.googleapis.com/Instance
 *  REQUIRED Please refer go/condor-common-datamodel
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  Required. A service-local token that distinguishes this resource from other
 *  resources within the same service.
 */
@property(nonatomic, copy, nullable) NSString *uniqueId;

@end


/**
 *  Common model for database resource instance metadata. Next ID: 21
 */
@interface GTLRCloudRedis_DatabaseResourceMetadata : GTLRObject

/** Availability configuration for this instance */
@property(nonatomic, strong, nullable) GTLRCloudRedis_AvailabilityConfiguration *availabilityConfiguration;

/** Backup configuration for this instance */
@property(nonatomic, strong, nullable) GTLRCloudRedis_BackupConfiguration *backupConfiguration;

/** Latest backup run information for this instance */
@property(nonatomic, strong, nullable) GTLRCloudRedis_BackupRun *backupRun;

/**
 *  The creation time of the resource, i.e. the time when resource is created
 *  and recorded in partner service.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/**
 *  Current state of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Deleted
 *        Instance is deleted. (Value: "DELETED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Healthy The
 *        instance is running. (Value: "HEALTHY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_StateOther
 *        For rest of the other category (Value: "STATE_OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Suspended
 *        When instance is suspended (Value: "SUSPENDED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_CurrentState_Unhealthy
 *        Instance being created, updated, deleted or under maintenance (Value:
 *        "UNHEALTHY")
 */
@property(nonatomic, copy, nullable) NSString *currentState;

/** Any custom metadata associated with the resource */
@property(nonatomic, strong, nullable) GTLRCloudRedis_CustomMetadataData *customMetadata;

/** Entitlements associated with the resource */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Entitlement *> *entitlements;

/**
 *  The state that the instance is expected to be in. For example, an instance
 *  state can transition to UNHEALTHY due to wrong patch update, while the
 *  expected state will remain at the HEALTHY.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Deleted
 *        Instance is deleted. (Value: "DELETED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Healthy The
 *        instance is running. (Value: "HEALTHY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_StateOther
 *        For rest of the other category (Value: "STATE_OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Suspended
 *        When instance is suspended (Value: "SUSPENDED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_ExpectedState_Unhealthy
 *        Instance being created, updated, deleted or under maintenance (Value:
 *        "UNHEALTHY")
 */
@property(nonatomic, copy, nullable) NSString *expectedState;

/**
 *  Required. Unique identifier for a Database resource
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceId *identifier;

/**
 *  The type of the instance. Specified at creation time.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_InstanceTypeUnspecified
 *        Value "INSTANCE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Other For
 *        rest of the other categories. (Value: "OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Primary A
 *        regular primary database instance. (Value: "PRIMARY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_ReadReplica
 *        An instance acting as a read-replica. (Value: "READ_REPLICA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_Secondary A
 *        cluster or an instance acting as a secondary. (Value: "SECONDARY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeOther
 *        For rest of the other categories. (Value: "SUB_RESOURCE_TYPE_OTHER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypePrimary
 *        A regular primary database instance. (Value:
 *        "SUB_RESOURCE_TYPE_PRIMARY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeReadReplica
 *        An instance acting as a read-replica. (Value:
 *        "SUB_RESOURCE_TYPE_READ_REPLICA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeSecondary
 *        A cluster or an instance acting as a secondary. (Value:
 *        "SUB_RESOURCE_TYPE_SECONDARY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceMetadata_InstanceType_SubResourceTypeUnspecified
 *        For rest of the other categories. (Value:
 *        "SUB_RESOURCE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *instanceType;

/** The resource location. REQUIRED */
@property(nonatomic, copy, nullable) NSString *location;

/** Machine configuration for this resource. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_MachineConfiguration *machineConfiguration;

/**
 *  Identifier for this resource's immediate parent/primary resource if the
 *  current resource is a replica or derived form of another Database resource.
 *  Else it would be NULL. REQUIRED if the immediate parent exists when first
 *  time resource is getting ingested, otherwise optional.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceId *primaryResourceId;

/** The product this resource represents. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Product *product;

/**
 *  Closest parent Cloud Resource Manager container of this resource. It must be
 *  resource name of a Cloud Resource Manager project with the format of "/",
 *  such as "projects/123". For GCP provided resources, number should be project
 *  number.
 */
@property(nonatomic, copy, nullable) NSString *resourceContainer;

/**
 *  Required. Different from DatabaseResourceId.unique_id, a resource name can
 *  be reused over time. That is, after a resource named "ABC" is deleted, the
 *  name "ABC" can be used to to create a new resource within the same source.
 *  Resource name to follow CAIS resource_name format as noted here
 *  go/condor-common-datamodel
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** Optional. Tags associated with this resources. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Tags *tagsSet;

/**
 *  The time at which the resource was updated and recorded at partner service.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updationTime;

/** User-provided labels associated with the resource */
@property(nonatomic, strong, nullable) GTLRCloudRedis_UserLabels *userLabelSet;

@end


/**
 *  Common model for database resource recommendation signal data.
 */
@interface GTLRCloudRedis_DatabaseResourceRecommendationSignalData : GTLRObject

/** Optional. Any other additional metadata specific to recommendation */
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceRecommendationSignalData_AdditionalMetadata *additionalMetadata;

/** Required. last time recommendationw as refreshed */
@property(nonatomic, strong, nullable) GTLRDateTime *lastRefreshTime;

/**
 *  Required. Recommendation state
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Active
 *        Recommendation is active and can be applied. ACTIVE recommendations
 *        can be marked as CLAIMED, SUCCEEDED, or FAILED. (Value: "ACTIVE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Claimed
 *        Recommendation is in claimed state. Recommendations content is
 *        immutable and cannot be updated by Google. CLAIMED recommendations can
 *        be marked as CLAIMED, SUCCEEDED, or FAILED. (Value: "CLAIMED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Dismissed
 *        Recommendation is in dismissed state. Recommendation content can be
 *        updated by Google. DISMISSED recommendations can be marked as ACTIVE.
 *        (Value: "DISMISSED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Failed
 *        Recommendation is in failed state. Recommendations content is
 *        immutable and cannot be updated by Google. FAILED recommendations can
 *        be marked as SUCCEEDED, or FAILED. (Value: "FAILED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Succeeded
 *        Recommendation is in succeeded state. Recommendations content is
 *        immutable and cannot be updated by Google. SUCCEEDED recommendations
 *        can be marked as SUCCEEDED, or FAILED. (Value: "SUCCEEDED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_RecommendationState_Unspecified
 *        Value "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *recommendationState;

/**
 *  Required. Name of recommendation. Examples:
 *  organizations/1234/locations/us-central1/recommenders/google.cloudsql.instance.PerformanceRecommender/recommendations/9876
 */
@property(nonatomic, copy, nullable) NSString *recommender;

/**
 *  Required. ID of recommender. Examples:
 *  "google.cloudsql.instance.PerformanceRecommender"
 */
@property(nonatomic, copy, nullable) NSString *recommenderId;

/**
 *  Required. Contains an identifier for a subtype of recommendations produced
 *  for the same recommender. Subtype is a function of content and impact,
 *  meaning a new subtype might be added when significant changes to `content`
 *  or `primary_impact.category` are introduced. See the Recommenders section to
 *  see a list of subtypes for a given Recommender. Examples: For recommender =
 *  "google.cloudsql.instance.PerformanceRecommender", recommender_subtype can
 *  be
 *  "MYSQL_HIGH_NUMBER_OF_OPEN_TABLES_BEST_PRACTICE"/"POSTGRES_HIGH_TRANSACTION_ID_UTILIZATION_BEST_PRACTICE"
 */
@property(nonatomic, copy, nullable) NSString *recommenderSubtype;

/**
 *  Required. Database resource name associated with the signal. Resource name
 *  to follow CAIS resource_name format as noted here go/condor-common-datamodel
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Required. Type of signal, for example, `SIGNAL_TYPE_IDLE`,
 *  `SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES`, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionAttemptsNotLogged
 *        Represents if the log_connections database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionMaxNotConfigured
 *        Represents if the user connections database flag for a Cloud SQL for
 *        SQL Server instance is configured. (Value:
 *        "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeConnectionsPerformanceImpact
 *        Performance impact of connections settings (Value:
 *        "SIGNAL_TYPE_CONNECTIONS_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDatabaseAuditingDisabled
 *        Represents database auditing is disabled. (Value:
 *        "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDatabaseNamesExposed
 *        Represents if the skip_show_database database flag for a Cloud SQL for
 *        MySQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDataExportToExternalCloudStorageBucket
 *        Detects if database instance data exported to a Cloud Storage bucket
 *        outside of the organization. (Value:
 *        "SIGNAL_TYPE_DATA_EXPORT_TO_EXTERNAL_CLOUD_STORAGE_BUCKET")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDataExportToPublicCloudStorageBucket
 *        Detects if database instance data exported to a Cloud Storage bucket
 *        that is owned by the organization and is publicly accessible. (Value:
 *        "SIGNAL_TYPE_DATA_EXPORT_TO_PUBLIC_CLOUD_STORAGE_BUCKET")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeDisconnectionsNotLogged
 *        Represents if the log_disconnections database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeEncryptionKeyNotCustomerManaged
 *        Represents if a SQL database instance is not encrypted with
 *        customer-managed encryption keys (CMEK). (Value:
 *        "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfClientHostname
 *        Represents if the log_hostname database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfParserStatistics
 *        Represents if the log_parser_stats database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExcessiveLoggingOfPlannerStatistics
 *        Represents if the log_planner_stats database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedByOwnershipChaining
 *        Represents if the cross_db_ownership_chaining database flag for a
 *        Cloud SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToExternalScripts
 *        Represents if he external scripts enabled database flag for a Cloud
 *        SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToLocalDataLoads
 *        Represents if the local_infile database flag for a Cloud SQL for MySQL
 *        instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToPublicAccess
 *        Represents if a resource is exposed to public access. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeExposedToRemoteAccess
 *        Represents if the remote access database flag for a Cloud SQL for SQL
 *        Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeGroupNotReplicatingAcrossRegions
 *        Represents if a group is replicating across regions. Checks for
 *        resources that are configured to have redundancy, and ongoing
 *        replication, across regions. (Value:
 *        "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighJoinsWithoutIndexes
 *        Performance impact of high joins without indexes (Value:
 *        "SIGNAL_TYPE_HIGH_JOINS_WITHOUT_INDEXES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighNumberOfOpenTables
 *        Represents high number of concurrently opened tables. (Value:
 *        "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighNumberOfTables
 *        Represents high table count close to SLA limit. (Value:
 *        "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeHighTransactionIdUtilization
 *        Represents high number of unvacuumed transactions (Value:
 *        "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeIdle
 *        Represents Idle instance helps to reduce costs. (Value:
 *        "SIGNAL_TYPE_IDLE")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLastBackupFailed
 *        Represents if the last backup of a resource failed. (Value:
 *        "SIGNAL_TYPE_LAST_BACKUP_FAILED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLastBackupOld
 *        Represents if the last backup of a resource is older than some
 *        threshold value. (Value: "SIGNAL_TYPE_LAST_BACKUP_OLD")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingExcessiveStatementInfo
 *        Represents if the log_min_duration_statement database flag for a Cloud
 *        SQL for PostgreSQL instance is not set to -1. (Value:
 *        "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingMostErrors
 *        Represents if the log_min_error_statement database flag for a Cloud
 *        SQL for PostgreSQL instance is not set appropriately. (Value:
 *        "SIGNAL_TYPE_LOGGING_MOST_ERRORS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingOnlyCriticalErrors
 *        Represents if the log_min_error_statement database flag for a Cloud
 *        SQL for PostgreSQL instance does not have an appropriate severity
 *        level. (Value: "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLoggingQueryStatistics
 *        Represents if the log_statement_stats database flag for a Cloud SQL
 *        for PostgreSQL instance is not set to off. (Value:
 *        "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeLogsNotOptimizedForTroubleshooting
 *        Represents if log_checkpoints database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeMinimalErrorLogging
 *        Represents if the log_min_messages database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to warning or another recommended
 *        value. (Value: "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoAutomatedBackupPolicy
 *        Represents if a resource has an automated backup policy. (Value:
 *        "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoPasswordPolicy
 *        No password policy set on resources (Value:
 *        "SIGNAL_TYPE_NO_PASSWORD_POLICY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoPromotableReplica
 *        Represents if a resource has a promotable replica. (Value:
 *        "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNoRootPassword
 *        Represents if a Cloud SQL database has a password configured for the
 *        root account or not. (Value: "SIGNAL_TYPE_NO_ROOT_PASSWORD")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotAvailableInMultipleRegions
 *        Represents if a resource is available in multiple regions. (Value:
 *        "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotAvailableInMultipleZones
 *        Represents if the resource is available in multiple zones or not.
 *        (Value: "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotLoggingOnlyDdlStatements
 *        Represents if the log_statement database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to DDL (all data definition
 *        statements). (Value: "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotLoggingTemporaryFiles
 *        Represents if the log_temp_files database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to "0". (NOTE: 0 = ON) (Value:
 *        "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeNotProtectedByAutomaticFailover
 *        Represents if a resource is protected by automatic failover. Checks
 *        for resources that are configured to have redundancy within a region
 *        that enables automatic failover. (Value:
 *        "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeOutOfDisk
 *        Represents out of disk. (Value: "SIGNAL_TYPE_OUT_OF_DISK")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeOverprovisioned
 *        Represents instances that are unnecessarily large for given workload.
 *        (Value: "SIGNAL_TYPE_OVERPROVISIONED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypePublicIpEnabled
 *        Represents if public IP is enabled. (Value:
 *        "SIGNAL_TYPE_PUBLIC_IP_ENABLED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryDurationsNotLogged
 *        Represents if the log_duration database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryLockWaitsNotLogged
 *        Represents if the log_lock_waits database flag for a Cloud SQL for
 *        PostgreSQL instance is not set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQueryStatisticsLogged
 *        Represents if the databaseFlags property of instance metadata for the
 *        log_executor_status field is set to on. (Value:
 *        "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeQuotaLimit
 *        Cluster nearing quota limit (Value: "SIGNAL_TYPE_QUOTA_LIMIT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeRestrictAuthorizedNetworks
 *        Represents not restricted to authorized networks. (Value:
 *        "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeSensitiveTraceInfoNotMasked
 *        Represents if the 3625 (trace flag) database flag for a Cloud SQL for
 *        SQL Server instance is not set to on. (Value:
 *        "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeServerAuthenticationNotRequired
 *        Represents if The contained database authentication database flag for
 *        a Cloud SQL for SQL Server instance is not set to off. (Value:
 *        "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeServerCertificateNearExpiry
 *        Represents server certificate is near expiry. (Value:
 *        "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeShortBackupRetention
 *        Represents if a resources has a short backup retention period. (Value:
 *        "SIGNAL_TYPE_SHORT_BACKUP_RETENTION")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeSuperuserWritingToUserTables
 *        Detects events where a Cloud SQL superuser (postgres for PostgreSQL
 *        servers or root for MySQL users) writes to non-system tables. (Value:
 *        "SIGNAL_TYPE_SUPERUSER_WRITING_TO_USER_TABLES")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeTmpTablesPerformanceImpact
 *        Performance impact of temporary tables settings (Value:
 *        "SIGNAL_TYPE_TMP_TABLES_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeTransLogsPerformanceImpact
 *        Performance impact of transaction logs settings (Value:
 *        "SIGNAL_TYPE_TRANS_LOGS_PERFORMANCE_IMPACT")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnderprovisioned
 *        Represents need for more CPU and/or memory (Value:
 *        "SIGNAL_TYPE_UNDERPROVISIONED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnencryptedConnections
 *        Represents if a resources requires all incoming connections to use SSL
 *        or not. (Value: "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUnspecified
 *        Unspecified. (Value: "SIGNAL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUserGrantedAllPermissions
 *        Detects events where a database user or role has been granted all
 *        privileges to a database, or to all tables, procedures, or functions
 *        in a schema. (Value: "SIGNAL_TYPE_USER_GRANTED_ALL_PERMISSIONS")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeUserOptionsConfigured
 *        Represents if the user options database flag for Cloud SQL SQL Server
 *        instance is configured or not. (Value:
 *        "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeVerboseErrorLogging
 *        Represents if the log_error_verbosity database flag for a Cloud SQL
 *        for PostgreSQL instance is not set to default or stricter (default or
 *        terse). (Value: "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatePolicyRestrictPublicIp
 *        Represents violate org policy restrict public ip. (Value:
 *        "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisControlsV80
 *        Represents if a resource violates CIS Controls 8.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_CONTROLS_V8_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation10
 *        Represents if a resource violates CIS GCP Foundation 1.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation11
 *        Represents if a resource violates CIS GCP Foundation 1.1. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation12
 *        Represents if a resource violates CIS GCP Foundation 1.2. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation13
 *        Represents if a resource violates CIS GCP Foundation 1.3. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCisGcpFoundation20
 *        Represents if a resource violates CIS GCP Foundation 2.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesCloudControlsMatrixV4
 *        Represents if a resource violates Cloud Controls Matrix v4.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_CLOUD_CONTROLS_MATRIX_V4")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesHipaa
 *        Represents if a resource violates HIPAA. (Value:
 *        "SIGNAL_TYPE_VIOLATES_HIPAA")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesIso27001
 *        Represents if a resource violates ISO-27001. (Value:
 *        "SIGNAL_TYPE_VIOLATES_ISO_27001")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesIso27001V2022
 *        Represents if a resource violates ISO 27001 2022. (Value:
 *        "SIGNAL_TYPE_VIOLATES_ISO_27001_V2022")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNist80053
 *        Represents if a resource violates NIST 800-53. (Value:
 *        "SIGNAL_TYPE_VIOLATES_NIST_800_53")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNist80053R5
 *        Represents if a resource violates NIST 800-53 R5. (Value:
 *        "SIGNAL_TYPE_VIOLATES_NIST_800_53_R5")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesNistCybersecurityFrameworkV10
 *        Represents if a resource violates NIST Cybersecurity Framework 1.0.
 *        (Value: "SIGNAL_TYPE_VIOLATES_NIST_CYBERSECURITY_FRAMEWORK_V1_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesPciDssV321
 *        Represents if a resource violates PCI-DSS v3.2.1. (Value:
 *        "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesPciDssV40
 *        Represents if a resource violates PCI-DSS v4.0. (Value:
 *        "SIGNAL_TYPE_VIOLATES_PCI_DSS_V4_0")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeViolatesSoc2V2017
 *        Represents if a resource violates SOC2 v2017. (Value:
 *        "SIGNAL_TYPE_VIOLATES_SOC2_V2017")
 *    @arg @c kGTLRCloudRedis_DatabaseResourceRecommendationSignalData_SignalType_SignalTypeWeakRootPassword
 *        Represents if a Cloud SQL database has a weak password configured for
 *        the root account. (Value: "SIGNAL_TYPE_WEAK_ROOT_PASSWORD")
 */
@property(nonatomic, copy, nullable) NSString *signalType;

@end


/**
 *  Optional. Any other additional metadata specific to recommendation
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_DatabaseResourceRecommendationSignalData_AdditionalMetadata : GTLRObject
@end


/**
 *  GTLRCloudRedis_DirectLocationAssignment
 */
@interface GTLRCloudRedis_DirectLocationAssignment : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_LocationAssignment *> *location;

@end


/**
 *  Endpoints on each network, for Redis clients to connect to the cluster.
 */
@interface GTLRCloudRedis_DiscoveryEndpoint : GTLRObject

/**
 *  Output only. Address of the exposed Redis endpoint used by clients to
 *  connect to the service. The address could be either IP or hostname.
 */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  Output only. The port number of the exposed Redis endpoint.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Output only. Customer configuration for where the endpoint is created and
 *  accessed from.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_PscConfig *pscConfig;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudRedis_Empty : GTLRObject
@end


/**
 *  Proto representing the access that a user has to a specific feature/service.
 *  NextId: 3.
 */
@interface GTLRCloudRedis_Entitlement : GTLRObject

/**
 *  The current state of user's accessibility to a feature/benefit.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Entitlement_EntitlementState_Entitled User is
 *        entitled to a feature/benefit, but whether it has been successfully
 *        provisioned is decided by provisioning state. (Value: "ENTITLED")
 *    @arg @c kGTLRCloudRedis_Entitlement_EntitlementState_EntitlementStateUnspecified
 *        Value "ENTITLEMENT_STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_Entitlement_EntitlementState_Revoked User is
 *        entitled to a feature/benefit, but it was requested to be revoked.
 *        Whether the revoke has been successful is decided by provisioning
 *        state. (Value: "REVOKED")
 */
@property(nonatomic, copy, nullable) NSString *entitlementState;

/**
 *  An enum that represents the type of this entitlement.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Entitlement_Type_EntitlementTypeUnspecified Value
 *        "ENTITLEMENT_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudRedis_Entitlement_Type_Gemini The root entitlement
 *        representing Gemini package ownership. (Value: "GEMINI")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request for Export.
 */
@interface GTLRCloudRedis_ExportInstanceRequest : GTLRObject

/** Required. Specify data to be exported. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_OutputConfig *outputConfig;

@end


/**
 *  Defines parameters that should only be used for specific asset types.
 */
@interface GTLRCloudRedis_ExtraParameter : GTLRObject

/**
 *  Details about zones used by regional
 *  compute.googleapis.com/InstanceGroupManager to create instances.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RegionalMigDistributionPolicy *regionalMigDistributionPolicy;

@end


/**
 *  Request for Failover.
 */
@interface GTLRCloudRedis_FailoverInstanceRequest : GTLRObject

/**
 *  Optional. Available data protection modes that the user can choose. If it's
 *  unspecified, data protection mode will be LIMITED_DATA_LOSS by default.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_DataProtectionModeUnspecified
 *        Defaults to LIMITED_DATA_LOSS if a data protection mode is not
 *        specified. (Value: "DATA_PROTECTION_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_ForceDataLoss
 *        Instance failover will be performed without data loss control. (Value:
 *        "FORCE_DATA_LOSS")
 *    @arg @c kGTLRCloudRedis_FailoverInstanceRequest_DataProtectionMode_LimitedDataLoss
 *        Instance failover will be protected with data loss control. More
 *        specifically, the failover will only be performed if the current
 *        replication offset diff between primary and replica is under a certain
 *        threshold. (Value: "LIMITED_DATA_LOSS")
 */
@property(nonatomic, copy, nullable) NSString *dataProtectionMode;

@end


/**
 *  The Cloud Storage location for the output content
 */
@interface GTLRCloudRedis_GcsDestination : GTLRObject

/**
 *  Required. Data destination URI (e.g. 'gs://my_bucket/my_object'). Existing
 *  files will be overwritten.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The Cloud Storage location for the input content
 */
@interface GTLRCloudRedis_GcsSource : GTLRObject

/** Required. Source data URI. (e.g. 'gs://my_bucket/my_object'). */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  This location metadata represents additional configuration options for a
 *  given location where a Redis instance may be created. All fields are output
 *  only. It is returned as content of the
 *  `google.cloud.location.Location.metadata` field.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when creating
 *  a Redis instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_GoogleCloudRedisV1LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in `location_id` or `alternative_location_id` fields when creating
 *  a Redis instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudRedis_GoogleCloudRedisV1ZoneMetadata. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  Represents the v1 metadata of the long-running operation.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1OperationMetadata : GTLRObject

/** API version. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Specifies if cancellation was requested for the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** End timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Operation status details. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Operation target. */
@property(nonatomic, copy, nullable) NSString *target;

/** Operation verb. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Defines specific information for a particular zone. Currently empty and
 *  reserved for future use only.
 */
@interface GTLRCloudRedis_GoogleCloudRedisV1ZoneMetadata : GTLRObject
@end


/**
 *  Request for Import.
 */
@interface GTLRCloudRedis_ImportInstanceRequest : GTLRObject

/** Required. Specify data to be imported. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_InputConfig *inputConfig;

@end


/**
 *  The input content
 */
@interface GTLRCloudRedis_InputConfig : GTLRObject

/** Google Cloud Storage location where input content is located. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_GcsSource *gcsSource;

@end


/**
 *  A Memorystore for Redis instance.
 */
@interface GTLRCloudRedis_Instance : GTLRObject

/**
 *  Optional. If specified, at least one node will be provisioned in this zone
 *  in addition to the zone specified in location_id. Only applicable to
 *  standard tier. If provided, it must be a different zone from the one
 *  provided in [location_id]. Additional nodes beyond the first 2 will be
 *  placed in zones selected by the service.
 */
@property(nonatomic, copy, nullable) NSString *alternativeLocationId;

/**
 *  Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If
 *  set to "true" AUTH is enabled on the instance. Default value is "false"
 *  meaning AUTH is disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *authEnabled;

/**
 *  Optional. The full name of the Google Compute Engine
 *  [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is
 *  connected. If left unspecified, the `default` network will be used.
 */
@property(nonatomic, copy, nullable) NSString *authorizedNetwork;

/**
 *  Optional. The available maintenance versions that an instance could update
 *  to.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availableMaintenanceVersions;

/**
 *  Optional. The network connect mode of the Redis instance. If not provided,
 *  the connect mode defaults to DIRECT_PEERING.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_ConnectMode_ConnectModeUnspecified Not
 *        set. (Value: "CONNECT_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Instance_ConnectMode_DirectPeering Connect via
 *        direct peering to the Memorystore for Redis hosted service. (Value:
 *        "DIRECT_PEERING")
 *    @arg @c kGTLRCloudRedis_Instance_ConnectMode_PrivateServiceAccess Connect
 *        your Memorystore for Redis instance using Private Service Access.
 *        Private services access provides an IP address range for multiple
 *        Google Cloud services, including Memorystore. (Value:
 *        "PRIVATE_SERVICE_ACCESS")
 */
@property(nonatomic, copy, nullable) NSString *connectMode;

/** Output only. The time the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The current zone where the Redis primary node is located. In
 *  basic tier, this will always be the same as [location_id]. In standard tier,
 *  this can be the zone of any node in the instance.
 */
@property(nonatomic, copy, nullable) NSString *currentLocationId;

/**
 *  Optional. The KMS key reference that the customer provides when trying to
 *  create the instance.
 */
@property(nonatomic, copy, nullable) NSString *customerManagedKey;

/** An arbitrary and optional user-provided name for the instance. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Hostname or IP address of the exposed Redis endpoint used by
 *  clients to connect to the service.
 */
@property(nonatomic, copy, nullable) NSString *host;

/** Resource labels to represent user provided metadata */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Instance_Labels *labels;

/**
 *  Optional. The zone where the instance will be provisioned. If not provided,
 *  the service will choose a zone from the specified region for the instance.
 *  For standard tier, additional nodes will be added across multiple zones for
 *  protection against zonal failures. If specified, at least one node will be
 *  provisioned in this zone.
 */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Optional. The maintenance policy for the instance. If not provided,
 *  maintenance events can be performed at any time.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_MaintenancePolicy *maintenancePolicy;

/**
 *  Output only. Date and time of upcoming maintenance events which have been
 *  scheduled.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_MaintenanceSchedule *maintenanceSchedule;

/**
 *  Optional. The self service update maintenance version. The version is date
 *  based such as "20210712_00_00".
 */
@property(nonatomic, copy, nullable) NSString *maintenanceVersion;

/**
 *  Required. Redis memory size in GiB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memorySizeGb;

/**
 *  Required. Unique name of the resource in this scope including project and
 *  location using the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  Note: Redis instances are managed and addressed at regional level so
 *  location_id here refers to a GCP region; however, users may choose which
 *  specific zone (or collection of zones for cross-zone instances) an instance
 *  should be provisioned in. Refer to location_id and alternative_location_id
 *  fields for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Info per node. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_NodeInfo *> *nodes;

/** Optional. Persistence configuration parameters */
@property(nonatomic, strong, nullable) GTLRCloudRedis_PersistenceConfig *persistenceConfig;

/**
 *  Output only. Cloud IAM identity used by import / export operations to
 *  transfer data to/from Cloud Storage. Format is "serviceAccount:". The value
 *  may change over time for a given instance so should be checked before each
 *  import/export operation.
 */
@property(nonatomic, copy, nullable) NSString *persistenceIamIdentity;

/**
 *  Output only. The port number of the exposed Redis endpoint.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Output only. Hostname or IP address of the exposed readonly Redis endpoint.
 *  Standard tier only. Targets all healthy replica nodes in instance.
 *  Replication is asynchronous and replica nodes will exhibit some lag behind
 *  the primary. Write requests must target 'host'.
 */
@property(nonatomic, copy, nullable) NSString *readEndpoint;

/**
 *  Output only. The port number of the exposed readonly redis endpoint.
 *  Standard tier only. Write requests should target 'port'.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readEndpointPort;

/**
 *  Optional. Read replicas mode for the instance. Defaults to
 *  READ_REPLICAS_DISABLED.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasDisabled If
 *        disabled, read endpoint will not be provided and the instance cannot
 *        scale up or down the number of replicas. (Value:
 *        "READ_REPLICAS_DISABLED")
 *    @arg @c kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasEnabled If
 *        enabled, read endpoint will be provided and the instance can scale up
 *        and down the number of replicas. Not valid for basic tier. (Value:
 *        "READ_REPLICAS_ENABLED")
 *    @arg @c kGTLRCloudRedis_Instance_ReadReplicasMode_ReadReplicasModeUnspecified
 *        If not set, Memorystore Redis backend will default to
 *        READ_REPLICAS_DISABLED. (Value: "READ_REPLICAS_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *readReplicasMode;

/**
 *  Optional. Redis configuration parameters, according to
 *  http://redis.io/topics/config. Currently, the only supported parameters are:
 *  Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events
 *  Redis version 4.0 and newer: * activedefrag * lfu-decay-time *
 *  lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: *
 *  stream-node-max-bytes * stream-node-max-entries
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Instance_RedisConfigs *redisConfigs;

/**
 *  Optional. The version of Redis software. If not provided, latest supported
 *  version will be used. Currently, the supported values are: * `REDIS_3_2` for
 *  Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default)
 *  * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x
 *  compatibility * `REDIS_7_0` for Redis 7.0 compatibility
 */
@property(nonatomic, copy, nullable) NSString *redisVersion;

/**
 *  Optional. The number of replica nodes. The valid range for the Standard Tier
 *  with read replicas enabled is [1-5] and defaults to 2. If read replicas are
 *  not enabled for a Standard Tier instance, the only valid value is 1 and the
 *  default is 1. The valid value for basic tier is 0 and the default is also 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicaCount;

/**
 *  Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that
 *  are reserved for this instance. Range must be unique and non-overlapping
 *  with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS
 *  mode, the name of one allocated IP address ranges associated with this
 *  private service access connection. If not provided, the service will choose
 *  an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For
 *  READ_REPLICAS_ENABLED the default block size is /28.
 */
@property(nonatomic, copy, nullable) NSString *reservedIpRange;

/**
 *  Optional. Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzi;

/**
 *  Optional. Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Optional. Additional IP range for node placement. Required when enabling
 *  read replicas on an existing instance. For DIRECT_PEERING mode value must be
 *  a CIDR range of size /28, or "auto". For PRIVATE_SERVICE_ACCESS mode value
 *  must be the name of an allocated address range associated with the private
 *  service access connection, or "auto".
 */
@property(nonatomic, copy, nullable) NSString *secondaryIpRange;

/** Output only. List of server CA certificates for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_TlsCertificate *> *serverCaCerts;

/**
 *  Output only. The current state of this instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_State_Creating Redis instance is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Deleting Redis instance is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudRedis_Instance_State_FailingOver Redis instance is
 *        failing over (availability may be affected). (Value: "FAILING_OVER")
 *    @arg @c kGTLRCloudRedis_Instance_State_Importing Redis instance is
 *        importing data (availability may be affected). (Value: "IMPORTING")
 *    @arg @c kGTLRCloudRedis_Instance_State_Maintenance Maintenance is being
 *        performed on this Redis instance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRCloudRedis_Instance_State_Ready Redis instance has been
 *        created and is fully usable. (Value: "READY")
 *    @arg @c kGTLRCloudRedis_Instance_State_Repairing Redis instance is being
 *        repaired and may be unusable. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudRedis_Instance_State_StateUnspecified Not set. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Instance_State_Updating Redis instance
 *        configuration is being updated. Certain kinds of updates may cause the
 *        instance to become unusable while the update is in progress. (Value:
 *        "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current status of this
 *  instance, if available.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Optional. reasons that causes instance in "SUSPENDED" state. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suspensionReasons;

/**
 *  Required. The service tier of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_Tier_Basic BASIC tier: standalone
 *        instance (Value: "BASIC")
 *    @arg @c kGTLRCloudRedis_Instance_Tier_StandardHa STANDARD_HA tier: highly
 *        available primary/replica instances (Value: "STANDARD_HA")
 *    @arg @c kGTLRCloudRedis_Instance_Tier_TierUnspecified Not set. (Value:
 *        "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  Optional. The TLS mode of the Redis instance. If not provided, TLS is
 *  disabled for the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Instance_TransitEncryptionMode_Disabled TLS is
 *        disabled for the instance. (Value: "DISABLED")
 *    @arg @c kGTLRCloudRedis_Instance_TransitEncryptionMode_ServerAuthentication
 *        Client to Server traffic encryption enabled with server
 *        authentication. (Value: "SERVER_AUTHENTICATION")
 *    @arg @c kGTLRCloudRedis_Instance_TransitEncryptionMode_TransitEncryptionModeUnspecified
 *        Not set. (Value: "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *transitEncryptionMode;

@end


/**
 *  Resource labels to represent user provided metadata
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Instance_Labels : GTLRObject
@end


/**
 *  Optional. Redis configuration parameters, according to
 *  http://redis.io/topics/config. Currently, the only supported parameters are:
 *  Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events
 *  Redis version 4.0 and newer: * activedefrag * lfu-decay-time *
 *  lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: *
 *  stream-node-max-bytes * stream-node-max-entries
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Instance_RedisConfigs : GTLRObject
@end


/**
 *  Instance AUTH string details.
 */
@interface GTLRCloudRedis_InstanceAuthString : GTLRObject

/** AUTH string set on the instance. */
@property(nonatomic, copy, nullable) NSString *authString;

@end


/**
 *  Metadata for individual internal resources in an instance. e.g. spanner
 *  instance can have multiple databases with unique configuration settings.
 *  Similarly bigtable can have multiple clusters within same bigtable instance.
 */
@interface GTLRCloudRedis_InternalResourceMetadata : GTLRObject

/** Backup configuration for this database */
@property(nonatomic, strong, nullable) GTLRCloudRedis_BackupConfiguration *backupConfiguration;

/** Information about the last backup attempt for this database */
@property(nonatomic, strong, nullable) GTLRCloudRedis_BackupRun *backupRun;

@property(nonatomic, strong, nullable) GTLRCloudRedis_Product *product;
@property(nonatomic, strong, nullable) GTLRCloudRedis_DatabaseResourceId *resourceId;

/**
 *  Required. internal resource name for spanner this will be database name
 *  e.g."spanner.googleapis.com/projects/123/abc/instances/inst1/databases/db1"
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  GTLRCloudRedis_IsolationExpectations
 */
@interface GTLRCloudRedis_IsolationExpectations : GTLRObject

/**
 *  Explicit overrides for ZI and ZS requirements to be used for resources that
 *  should be excluded from ZI/ZS verification logic.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RequirementOverride *requirementOverride;

/**
 *  ziOrgPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiNotRequired
 *        Value "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiPreferred
 *        Value "ZI_PREFERRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiRequired Value
 *        "ZI_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiUnknown To be
 *        used if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiOrgPolicy_ZiUnspecified
 *        Value "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziOrgPolicy;

/**
 *  ziRegionPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailClosed
 *        Value "ZI_REGION_POLICY_FAIL_CLOSED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailOpen
 *        Value "ZI_REGION_POLICY_FAIL_OPEN"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyNotSet
 *        Value "ZI_REGION_POLICY_NOT_SET"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnknown
 *        To be used if tracking is not available (Value:
 *        "ZI_REGION_POLICY_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnspecified
 *        Value "ZI_REGION_POLICY_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziRegionPolicy;

/**
 *  ziRegionState
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionEnabled
 *        Value "ZI_REGION_ENABLED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionNotEnabled
 *        Value "ZI_REGION_NOT_ENABLED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionUnknown
 *        To be used if tracking is not available (Value: "ZI_REGION_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZiRegionState_ZiRegionUnspecified
 *        Value "ZI_REGION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziRegionState;

/**
 *  Deprecated: use zi_org_policy, zi_region_policy and zi_region_state instead
 *  for setting ZI expectations as per go/zicy-publish-physical-location.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiNotRequired
 *        Value "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiPreferred
 *        Value "ZI_PREFERRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiRequired
 *        Value "ZI_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiUnknown To
 *        be used if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneIsolation_ZiUnspecified
 *        Value "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zoneIsolation GTLR_DEPRECATED;

/**
 *  Deprecated: use zs_org_policy, and zs_region_stateinstead for setting Zs
 *  expectations as per go/zicy-publish-physical-location.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsNotRequired
 *        Value "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsRequired
 *        Value "ZS_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsUnknown To
 *        be used if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZoneSeparation_ZsUnspecified
 *        Value "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zoneSeparation GTLR_DEPRECATED;

/**
 *  zsOrgPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsNotRequired
 *        Value "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsRequired Value
 *        "ZS_REQUIRED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsUnknown To be
 *        used if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsOrgPolicy_ZsUnspecified
 *        Value "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsOrgPolicy;

/**
 *  zsRegionState
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionEnabled
 *        Value "ZS_REGION_ENABLED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionNotEnabled
 *        Value "ZS_REGION_NOT_ENABLED"
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionUnknown
 *        To be used if tracking of the asset ZS-bit is not available (Value:
 *        "ZS_REGION_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_IsolationExpectations_ZsRegionState_ZsRegionUnspecified
 *        Value "ZS_REGION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsRegionState;

@end


/**
 *  Response for ListClusters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "clusters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListClustersResponse : GTLRCollectionObject

/**
 *  A list of Redis clusters in the project in the specified location, or across
 *  all locations. If the `location_id` in the parent field of the request is
 *  "-", all regions available to the project are queried, and the results
 *  aggregated. If in such an aggregated query a location is unavailable, a
 *  placeholder Redis entry is included in the response with the `name` field
 *  set to a value of the form
 *  `projects/{project_id}/locations/{location_id}/clusters/`- and the `status`
 *  field set to ERROR and `status_message` field set to "location not available
 *  for ListClusters".
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Cluster *> *clusters;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListInstancesResponse : GTLRCollectionObject

/**
 *  A list of Redis instances in the project in the specified location, or
 *  across all locations. If the `location_id` in the parent field of the
 *  request is "-", all regions available to the project are queried, and the
 *  results aggregated. If in such an aggregated query a location is
 *  unavailable, a placeholder Redis entry is included in the response with the
 *  `name` field set to a value of the form
 *  `projects/{project_id}/locations/{location_id}/instances/`- and the `status`
 *  field set to ERROR and `status_message` field set to "location not available
 *  for ListInstances".
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Instance *> *instances;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRedis_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRCloudRedis_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Location_Labels *labels;

/** Resource ID for the region. For example: "us-east1". */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by Compute Engine. These keys can
 *  be specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Location_Metadata *metadata;

/**
 *  Full resource name for the region. For example:
 *  "projects/example-project/locations/us-east1".
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Location_Labels : GTLRObject
@end


/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by Compute Engine. These keys can
 *  be specified in `location_id` or `alternative_location_id` fields when
 *  creating a Redis instance.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Location_Metadata : GTLRObject
@end


/**
 *  GTLRCloudRedis_LocationAssignment
 */
@interface GTLRCloudRedis_LocationAssignment : GTLRObject

@property(nonatomic, copy, nullable) NSString *location;

/**
 *  locationType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_CloudRegion Value
 *        "CLOUD_REGION"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_CloudZone 11-20:
 *        Logical failure domains. (Value: "CLOUD_ZONE")
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_Cluster 1-10:
 *        Physical failure domains. (Value: "CLUSTER")
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_Global Value
 *        "GLOBAL"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_MultiRegionGeo
 *        Value "MULTI_REGION_GEO"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_MultiRegionJurisdiction
 *        Value "MULTI_REGION_JURISDICTION"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_Other Value
 *        "OTHER"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_Pop Value "POP"
 *    @arg @c kGTLRCloudRedis_LocationAssignment_LocationType_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *locationType;

@end


/**
 *  GTLRCloudRedis_LocationData
 */
@interface GTLRCloudRedis_LocationData : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudRedis_BlobstoreLocation *blobstoreLocation;
@property(nonatomic, strong, nullable) GTLRCloudRedis_CloudAssetComposition *childAssetLocation;
@property(nonatomic, strong, nullable) GTLRCloudRedis_DirectLocationAssignment *directLocation;
@property(nonatomic, strong, nullable) GTLRCloudRedis_TenantProjectProxy *gcpProjectProxy;
@property(nonatomic, strong, nullable) GTLRCloudRedis_PlacerLocation *placerLocation;
@property(nonatomic, strong, nullable) GTLRCloudRedis_SpannerLocation *spannerLocation;

@end


/**
 *  MachineConfiguration describes the configuration of a machine specific to
 *  Database Resource.
 */
@interface GTLRCloudRedis_MachineConfiguration : GTLRObject

/**
 *  The number of CPUs. TODO(b/342344482, b/342346271) add proto validations
 *  again after bug fix.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

/**
 *  Memory size in bytes. TODO(b/342344482, b/342346271) add proto validations
 *  again after bug fix.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memorySizeInBytes;

/**
 *  Optional. Number of shards (if applicable).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shardCount;

@end


/**
 *  Maintenance policy for an instance.
 */
@interface GTLRCloudRedis_MaintenancePolicy : GTLRObject

/** Output only. The time when the policy was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of what this policy is for. Create/Update methods
 *  return INVALID_ARGUMENT if the length is greater than 512.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The time when the policy was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. Maintenance window that is applied to resources covered by this
 *  policy. Minimum 1. For the current version, the maximum number of
 *  weekly_window is expected to be one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_WeeklyMaintenanceWindow *> *weeklyMaintenanceWindow;

@end


/**
 *  Upcoming maintenance schedule. If no maintenance is scheduled, fields are
 *  not populated.
 */
@interface GTLRCloudRedis_MaintenanceSchedule : GTLRObject

/**
 *  If the scheduled maintenance can be rescheduled, default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReschedule GTLR_DEPRECATED;

/**
 *  Output only. The end time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The deadline that the maintenance schedule start time can not
 *  go beyond, including reschedule.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleDeadlineTime;

/**
 *  Output only. The start time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  GTLRCloudRedis_ManagedCertificateAuthority
 */
@interface GTLRCloudRedis_ManagedCertificateAuthority : GTLRObject

/**
 *  The PEM encoded CA certificate chains for redis managed server
 *  authentication
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_CertChain *> *caCerts;

@end


/**
 *  An output only view of all the member clusters participating in the cross
 *  cluster replication.
 */
@interface GTLRCloudRedis_Membership : GTLRObject

/**
 *  Output only. The primary cluster that acts as the source of replication for
 *  the secondary clusters.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_RemoteCluster *primaryCluster;

/**
 *  Output only. The list of secondary clusters replicating from the primary
 *  cluster.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_RemoteCluster *> *secondaryClusters;

@end


/**
 *  Node specific properties.
 */
@interface GTLRCloudRedis_NodeInfo : GTLRObject

/**
 *  Output only. Node identifying string. e.g. 'node-0', 'node-1'
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. Location of the node.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  GTLRCloudRedis_ObservabilityMetricData
 */
@interface GTLRCloudRedis_ObservabilityMetricData : GTLRObject

/**
 *  Required. Type of aggregation performed on the metric.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_AggregationType_AggregationTypeUnspecified
 *        Unspecified aggregation type. (Value: "AGGREGATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_AggregationType_Current
 *        current aggregation type. (Value: "CURRENT")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_AggregationType_P95 P95
 *        aggregation type. (Value: "P95")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_AggregationType_P99 P99
 *        aggregation type. (Value: "P99")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_AggregationType_Peak PEAK
 *        aggregation type. (Value: "PEAK")
 */
@property(nonatomic, copy, nullable) NSString *aggregationType;

/**
 *  Required. Type of metric like CPU, Memory, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_CpuUtilization
 *        CPU utilization for a resource. The value is a fraction between 0.0
 *        and 1.0 (may momentarily exceed 1.0 in some cases). (Value:
 *        "CPU_UTILIZATION")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_MemoryUtilization
 *        Memory utilization for a resource. The value is a fraction between 0.0
 *        and 1.0 (may momentarily exceed 1.0 in some cases). (Value:
 *        "MEMORY_UTILIZATION")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_MetricTypeUnspecified
 *        Unspecified metric type. (Value: "METRIC_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_NetworkConnections
 *        Number of network connections for a resource. (Value:
 *        "NETWORK_CONNECTIONS")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_StorageUsedBytes
 *        Sotrage used by a resource. (Value: "STORAGE_USED_BYTES")
 *    @arg @c kGTLRCloudRedis_ObservabilityMetricData_MetricType_StorageUtilization
 *        Storage utilization for a resource. The value is a fraction between
 *        0.0 and 1.0 (may momentarily exceed 1.0 in some cases). (Value:
 *        "STORAGE_UTILIZATION")
 */
@property(nonatomic, copy, nullable) NSString *metricType;

/** Required. The time the metric value was observed. */
@property(nonatomic, strong, nullable) GTLRDateTime *observationTime;

/**
 *  Required. Database resource name associated with the signal. Resource name
 *  to follow CAIS resource_name format as noted here go/condor-common-datamodel
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** Required. Value of the metric type. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_TypedValue *value;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudRedis_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Status *error;

/**
 *  { `createTime`: The time the operation was created. `endTime`: The time the
 *  operation finished running. `target`: Server-defined resource path for the
 *  target of the operation. `verb`: Name of the verb executed by the operation.
 *  `statusDetail`: Human-readable status of the operation, if any.
 *  `cancelRequested`: Identifies whether the user has requested cancellation of
 *  the operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Operation_Response *response;

@end


/**
 *  { `createTime`: The time the operation was created. `endTime`: The time the
 *  operation finished running. `target`: Server-defined resource path for the
 *  target of the operation. `verb`: Name of the verb executed by the operation.
 *  `statusDetail`: Human-readable status of the operation, if any.
 *  `cancelRequested`: Identifies whether the user has requested cancellation of
 *  the operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Operation_Response : GTLRObject
@end


/**
 *  An error that occurred during a backup creation operation.
 */
@interface GTLRCloudRedis_OperationError : GTLRObject

/** Identifies the specific error that occurred. REQUIRED */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  errorType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_CancellationError User
 *        initiated cancellation (Value: "CANCELLATION_ERROR")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_DatabaseError Database is
 *        not accessible (Value: "DATABASE_ERROR")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_InternalError Any other
 *        internal error. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_KmsKeyError key
 *        destroyed, expired, not found, unreachable or permission denied.
 *        (Value: "KMS_KEY_ERROR")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_OperationErrorTypeUnspecified
 *        UNSPECIFIED means product type is not known or available. (Value:
 *        "OPERATION_ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_SqlserverError SQL server
 *        specific error (Value: "SQLSERVER_ERROR")
 *    @arg @c kGTLRCloudRedis_OperationError_ErrorType_StockoutError The zone or
 *        region does not have sufficient resources to handle the request at the
 *        moment (Value: "STOCKOUT_ERROR")
 */
@property(nonatomic, copy, nullable) NSString *errorType;

/** Additional information about the error encountered. REQUIRED */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Pre-defined metadata fields.
 */
@interface GTLRCloudRedis_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  The output content
 */
@interface GTLRCloudRedis_OutputConfig : GTLRObject

/** Google Cloud Storage destination for output content. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_GcsDestination *gcsDestination;

@end


/**
 *  Configuration of the persistence functionality.
 */
@interface GTLRCloudRedis_PersistenceConfig : GTLRObject

/**
 *  Optional. Controls whether Persistence features are enabled. If not
 *  provided, the existing value will be used.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_PersistenceMode_Disabled
 *        Persistence is disabled for the instance, and any existing snapshots
 *        are deleted. (Value: "DISABLED")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_PersistenceMode_PersistenceModeUnspecified
 *        Not set. (Value: "PERSISTENCE_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_PersistenceMode_Rdb RDB based
 *        Persistence is enabled. (Value: "RDB")
 */
@property(nonatomic, copy, nullable) NSString *persistenceMode;

/**
 *  Output only. The next time that a snapshot attempt is scheduled to occur.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *rdbNextSnapshotTime;

/**
 *  Optional. Period between RDB snapshots. Snapshots will be attempted every
 *  period starting from the provided snapshot start time. For example, a start
 *  time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until
 *  01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and
 *  00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be
 *  used as default.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_OneHour
 *        Snapshot every 1 hour. (Value: "ONE_HOUR")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_SixHours
 *        Snapshot every 6 hours. (Value: "SIX_HOURS")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_SnapshotPeriodUnspecified
 *        Not set. (Value: "SNAPSHOT_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_TwelveHours
 *        Snapshot every 12 hours. (Value: "TWELVE_HOURS")
 *    @arg @c kGTLRCloudRedis_PersistenceConfig_RdbSnapshotPeriod_TwentyFourHours
 *        Snapshot every 24 hours. (Value: "TWENTY_FOUR_HOURS")
 */
@property(nonatomic, copy, nullable) NSString *rdbSnapshotPeriod;

/**
 *  Optional. Date and time that the first snapshot was/will be attempted, and
 *  to which future snapshots will be aligned. If not provided, the current time
 *  will be used.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *rdbSnapshotStartTime;

@end


/**
 *  Message describing that the location of the customer resource is tied to
 *  placer allocations
 */
@interface GTLRCloudRedis_PlacerLocation : GTLRObject

/**
 *  Directory with a config related to it in placer (e.g.
 *  "/placer/prod/home/my-root/my-dir")
 */
@property(nonatomic, copy, nullable) NSString *placerConfig;

@end


/**
 *  Product specification for Condor resources.
 */
@interface GTLRCloudRedis_Product : GTLRObject

/**
 *  The specific engine that the underlying database is running.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineCloudSpannerWithGooglesqlDialect
 *        Cloud Spanner with Google SQL dialect. (Value:
 *        "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineCloudSpannerWithPostgresDialect
 *        Cloud Spanner with PostgreSQL dialect. (Value:
 *        "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineFirestoreWithDatastoreMode
 *        Firestore with datastore mode. (Value:
 *        "ENGINE_FIRESTORE_WITH_DATASTORE_MODE")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineFirestoreWithNativeMode
 *        Firestore with native mode. (Value:
 *        "ENGINE_FIRESTORE_WITH_NATIVE_MODE")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineMemorystoreForRedis
 *        Memorystore with Redis dialect. (Value:
 *        "ENGINE_MEMORYSTORE_FOR_REDIS")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineMemorystoreForRedisCluster
 *        Memorystore with Redis cluster dialect. (Value:
 *        "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineMysql MySQL binary running as
 *        an engine in the database instance. (Value: "ENGINE_MYSQL")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineNative Native database binary
 *        running as engine in instance. (Value: "ENGINE_NATIVE")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineOther Other refers to rest of
 *        other database engine. This is to be when engine is known, but it is
 *        not present in this enum. (Value: "ENGINE_OTHER")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EnginePostgres Postgres binary
 *        running as engine in database instance. (Value: "ENGINE_POSTGRES")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineSqlServer SQLServer binary
 *        running as engine in database instance. (Value: "ENGINE_SQL_SERVER")
 *    @arg @c kGTLRCloudRedis_Product_Engine_EngineUnspecified UNSPECIFIED means
 *        engine type is not known or available. (Value: "ENGINE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_Product_Engine_Mysql MySQL binary running as
 *        engine in database instance. (Value: "MYSQL")
 *    @arg @c kGTLRCloudRedis_Product_Engine_Native Native database binary
 *        running as engine in instance. (Value: "NATIVE")
 *    @arg @c kGTLRCloudRedis_Product_Engine_Postgres Postgres binary running as
 *        engine in database instance. (Value: "POSTGRES")
 *    @arg @c kGTLRCloudRedis_Product_Engine_SqlServer SQLServer binary running
 *        as engine in database instance. (Value: "SQL_SERVER")
 */
@property(nonatomic, copy, nullable) NSString *engine;

/**
 *  Type of specific database product. It could be CloudSQL, AlloyDB etc..
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_Product_Type_Alloydb AlloyDB product area in GCP
 *        (Value: "ALLOYDB")
 *    @arg @c kGTLRCloudRedis_Product_Type_CloudSql Cloud SQL product area in
 *        GCP (Value: "CLOUD_SQL")
 *    @arg @c kGTLRCloudRedis_Product_Type_OnPrem On premises database product.
 *        (Value: "ON_PREM")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeAlloydb AlloyDB product
 *        area in GCP (Value: "PRODUCT_TYPE_ALLOYDB")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeBigtable Bigtable product
 *        area in GCP (Value: "PRODUCT_TYPE_BIGTABLE")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeCloudSql Cloud SQL product
 *        area in GCP (Value: "PRODUCT_TYPE_CLOUD_SQL")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeFirestore Firestore
 *        product area in GCP. (Value: "PRODUCT_TYPE_FIRESTORE")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeMemorystore Memorystore
 *        product area in GCP (Value: "PRODUCT_TYPE_MEMORYSTORE")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeOnPrem On premises
 *        database product. (Value: "PRODUCT_TYPE_ON_PREM")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeOther Other refers to rest
 *        of other product type. This is to be when product type is known, but
 *        it is not present in this enum. (Value: "PRODUCT_TYPE_OTHER")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeSpanner Spanner product
 *        area in GCP (Value: "PRODUCT_TYPE_SPANNER")
 *    @arg @c kGTLRCloudRedis_Product_Type_ProductTypeUnspecified UNSPECIFIED
 *        means product type is not known or available. (Value:
 *        "PRODUCT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Version of the underlying database engine. Example values: For MySQL, it
 *  could be "8.0", "5.7" etc.. For Postgres, it could be "14", "15" etc..
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  GTLRCloudRedis_PscConfig
 */
@interface GTLRCloudRedis_PscConfig : GTLRObject

/**
 *  Required. The network where the IP address of the discovery endpoint will be
 *  reserved, in the form of
 *  projects/{network_project}/global/networks/{network_id}.
 */
@property(nonatomic, copy, nullable) NSString *network;

@end


/**
 *  Details of consumer resources in a PSC connection.
 */
@interface GTLRCloudRedis_PscConnection : GTLRObject

/**
 *  Required. The IP allocated on the consumer network for the PSC forwarding
 *  rule.
 */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  Required. The URI of the consumer side forwarding rule. Example:
 *  projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
 */
@property(nonatomic, copy, nullable) NSString *forwardingRule;

/**
 *  Required. The consumer network where the IP address resides, in the form of
 *  projects/{project_id}/global/networks/{network_id}.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. Project ID of the consumer project where the forwarding rule is
 *  created in.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Optional. The PSC connection id of the forwarding rule connected to the
 *  service attachment.
 */
@property(nonatomic, copy, nullable) NSString *pscConnectionId;

/**
 *  Required. The service attachment which is the target of the PSC connection,
 *  in the form of
 *  projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.
 */
@property(nonatomic, copy, nullable) NSString *serviceAttachment;

@end


/**
 *  Configuration of the RDB based persistence.
 */
@interface GTLRCloudRedis_RDBConfig : GTLRObject

/**
 *  Optional. Period between RDB snapshots.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_OneHour One hour.
 *        (Value: "ONE_HOUR")
 *    @arg @c kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_SixHours Six hours.
 *        (Value: "SIX_HOURS")
 *    @arg @c kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_SnapshotPeriodUnspecified
 *        Not set. (Value: "SNAPSHOT_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_TwelveHours Twelve
 *        hours. (Value: "TWELVE_HOURS")
 *    @arg @c kGTLRCloudRedis_RDBConfig_RdbSnapshotPeriod_TwentyFourHours Twenty
 *        four hours. (Value: "TWENTY_FOUR_HOURS")
 */
@property(nonatomic, copy, nullable) NSString *rdbSnapshotPeriod;

/**
 *  Optional. The time that the first snapshot was/will be attempted, and to
 *  which future snapshots will be aligned. If not provided, the current time
 *  will be used.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *rdbSnapshotStartTime;

@end


/**
 *  Operation metadata returned by the CLH during resource state reconciliation.
 */
@interface GTLRCloudRedis_ReconciliationOperationMetadata : GTLRObject

/**
 *  DEPRECATED. Use exclusive_action instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteResource GTLR_DEPRECATED;

/**
 *  Excluisive action returned by the CLH.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_Delete
 *        The resource has to be deleted. When using this bit, the CLH should
 *        fail the operation. DEPRECATED. Instead use DELETE_RESOURCE
 *        OperationSignal in SideChannel. (Value: "DELETE")
 *    @arg @c kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_Retry
 *        This resource could not be repaired but the repair should be tried
 *        again at a later time. This can happen if there is a dependency that
 *        needs to be resolved first- e.g. if a parent resource must be repaired
 *        before a child resource. (Value: "RETRY")
 *    @arg @c kGTLRCloudRedis_ReconciliationOperationMetadata_ExclusiveAction_UnknownRepairAction
 *        Unknown repair action. (Value: "UNKNOWN_REPAIR_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *exclusiveAction;

@end


/**
 *  To be used for specifying the intended distribution of regional
 *  compute.googleapis.com/InstanceGroupManager instances
 */
@interface GTLRCloudRedis_RegionalMigDistributionPolicy : GTLRObject

/**
 *  The shape in which the group converges around distribution of resources.
 *  Instance of proto2 enum
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetShape;

/** Cloud zones used by regional MIG to create instances. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_ZoneConfiguration *> *zones;

@end


/**
 *  Details of the remote cluster associated with this cluster in a cross
 *  cluster replication setup.
 */
@interface GTLRCloudRedis_RemoteCluster : GTLRObject

/**
 *  The full resource path of the remote cluster in the format:
 *  projects//locations//clusters/
 */
@property(nonatomic, copy, nullable) NSString *cluster;

/** Output only. The unique identifier of the remote cluster. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  GTLRCloudRedis_RequirementOverride
 */
@interface GTLRCloudRedis_RequirementOverride : GTLRObject

/**
 *  ziOverride
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiNotRequired Value
 *        "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiPreferred Value
 *        "ZI_PREFERRED"
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiRequired Value
 *        "ZI_REQUIRED"
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiUnknown To be
 *        used if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZiOverride_ZiUnspecified Value
 *        "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziOverride;

/**
 *  zsOverride
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsNotRequired Value
 *        "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsRequired Value
 *        "ZS_REQUIRED"
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsUnknown To be
 *        used if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRCloudRedis_RequirementOverride_ZsOverride_ZsUnspecified Value
 *        "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsOverride;

@end


/**
 *  Request for rescheduling a cluster maintenance.
 */
@interface GTLRCloudRedis_RescheduleClusterMaintenanceRequest : GTLRObject

/**
 *  Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as
 *  well.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_Immediate
 *        If the user wants to schedule the maintenance to happen now. (Value:
 *        "IMMEDIATE")
 *    @arg @c kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified
 *        Not set. (Value: "RESCHEDULE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_RescheduleClusterMaintenanceRequest_RescheduleType_SpecificTime
 *        If the user wants to reschedule the maintenance to a specific time.
 *        (Value: "SPECIFIC_TIME")
 */
@property(nonatomic, copy, nullable) NSString *rescheduleType;

/**
 *  Optional. Timestamp when the maintenance shall be rescheduled to if
 *  reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Request for RescheduleMaintenance.
 */
@interface GTLRCloudRedis_RescheduleMaintenanceRequest : GTLRObject

/**
 *  Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as
 *  well.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_Immediate
 *        If the user wants to schedule the maintenance to happen now. (Value:
 *        "IMMEDIATE")
 *    @arg @c kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_NextAvailableWindow
 *        If the user wants to use the existing maintenance policy to find the
 *        next available window. (Value: "NEXT_AVAILABLE_WINDOW")
 *    @arg @c kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified
 *        Not set. (Value: "RESCHEDULE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_RescheduleMaintenanceRequest_RescheduleType_SpecificTime
 *        If the user wants to reschedule the maintenance to a specific time.
 *        (Value: "SPECIFIC_TIME")
 */
@property(nonatomic, copy, nullable) NSString *rescheduleType;

/**
 *  Optional. Timestamp when the maintenance shall be rescheduled to if
 *  reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  GTLRCloudRedis_RetentionSettings
 */
@interface GTLRCloudRedis_RetentionSettings : GTLRObject

/**
 *  quantityBasedRetention
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quantityBasedRetention;

/**
 *  The unit that 'retained_backups' represents.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_RetentionSettings_RetentionUnit_Count Retention
 *        will be by count, eg. "retain the most recent 7 backups". (Value:
 *        "COUNT")
 *    @arg @c kGTLRCloudRedis_RetentionSettings_RetentionUnit_RetentionUnitOther
 *        For rest of the other category (Value: "RETENTION_UNIT_OTHER")
 *    @arg @c kGTLRCloudRedis_RetentionSettings_RetentionUnit_RetentionUnitUnspecified
 *        Backup retention unit is unspecified, will be treated as COUNT.
 *        (Value: "RETENTION_UNIT_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_RetentionSettings_RetentionUnit_Time Retention
 *        will be by Time, eg. "retain the last 7 days backups". (Value: "TIME")
 */
@property(nonatomic, copy, nullable) NSString *retentionUnit;

@property(nonatomic, strong, nullable) GTLRDuration *timeBasedRetention;

@end


/**
 *  GTLRCloudRedis_SpannerLocation
 */
@interface GTLRCloudRedis_SpannerLocation : GTLRObject

/**
 *  Set of backups used by the resource with name in the same format as what is
 *  available at http://table/spanner_automon.backup_metadata
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *backupName;

/** Set of databases used by the resource in format /span// */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dbName;

@end


/**
 *  Represents additional information about the state of the cluster.
 */
@interface GTLRCloudRedis_StateInfo : GTLRObject

/** Describes ongoing update on the cluster when cluster state is UPDATING. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_UpdateInfo *updateInfo;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudRedis_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRedis_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudRedis_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRedis_Status_Details_Item : GTLRObject
@end


/**
 *  Message type for storing tags. Tags provide a way to create annotations for
 *  resources, and in some cases conditionally allow or deny policies based on
 *  whether a resource has a specific tag.
 */
@interface GTLRCloudRedis_Tags : GTLRObject

/** The Tag key/value mappings. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_Tags_Tags *tags;

@end


/**
 *  The Tag key/value mappings.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_Tags_Tags : GTLRObject
@end


/**
 *  GTLRCloudRedis_TenantProjectProxy
 */
@interface GTLRCloudRedis_TenantProjectProxy : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *projectNumbers;

@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRCloudRedis_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  TlsCertificate Resource
 */
@interface GTLRCloudRedis_TlsCertificate : GTLRObject

/** PEM representation. */
@property(nonatomic, copy, nullable) NSString *cert;

/**
 *  Output only. The time when the certificate was created in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2020-05-18T00:00:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time when the certificate expires in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2020-05-18T00:00:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** Serial number, as extracted from the certificate. */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/** Sha1 Fingerprint of the certificate. */
@property(nonatomic, copy, nullable) NSString *sha1Fingerprint;

@end


/**
 *  TypedValue represents the value of a metric type. It can either be a double,
 *  an int64, a string or a bool.
 */
@interface GTLRCloudRedis_TypedValue : GTLRObject

/**
 *  For boolean value
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boolValue;

/**
 *  For double value
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  For integer value
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

/** For string value */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  Represents information about an updating cluster.
 */
@interface GTLRCloudRedis_UpdateInfo : GTLRObject

/**
 *  Target number of replica nodes per shard.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetReplicaCount;

/**
 *  Target number of shards for redis cluster
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetShardCount;

@end


/**
 *  Request for UpgradeInstance.
 */
@interface GTLRCloudRedis_UpgradeInstanceRequest : GTLRObject

/** Required. Specifies the target version of Redis software to upgrade to. */
@property(nonatomic, copy, nullable) NSString *redisVersion;

@end


/**
 *  Message type for storing user labels. User labels are used to tag App Engine
 *  resources, allowing users to search for resources matching a set of labels
 *  and to aggregate usage data by labels.
 */
@interface GTLRCloudRedis_UserLabels : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudRedis_UserLabels_Labels *labels;

@end


/**
 *  GTLRCloudRedis_UserLabels_Labels
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRedis_UserLabels_Labels : GTLRObject
@end


/**
 *  Time window in which disruptive maintenance updates occur. Non-disruptive
 *  updates can occur inside or outside this window.
 */
@interface GTLRCloudRedis_WeeklyMaintenanceWindow : GTLRObject

/**
 *  Required. The day of week that maintenance updates occur.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Friday Friday (Value:
 *        "FRIDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Monday Monday (Value:
 *        "MONDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Sunday Sunday (Value:
 *        "SUNDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRCloudRedis_WeeklyMaintenanceWindow_Day_Wednesday Wednesday
 *        (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *day;

/**
 *  Output only. Duration of the maintenance window. The current window is fixed
 *  at 1 hour.
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Required. Start time of the window in UTC time. */
@property(nonatomic, strong, nullable) GTLRCloudRedis_TimeOfDay *startTime;

@end


/**
 *  GTLRCloudRedis_ZoneConfiguration
 */
@interface GTLRCloudRedis_ZoneConfiguration : GTLRObject

/**
 *  zoneProperty
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Zone distribution config for allocation of cluster resources.
 */
@interface GTLRCloudRedis_ZoneDistributionConfig : GTLRObject

/**
 *  Optional. The mode of zone distribution. Defaults to MULTI_ZONE, when not
 *  specified.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRedis_ZoneDistributionConfig_Mode_MultiZone Distribute
 *        all resources across 3 zones picked at random, within the region.
 *        (Value: "MULTI_ZONE")
 *    @arg @c kGTLRCloudRedis_ZoneDistributionConfig_Mode_SingleZone Distribute
 *        all resources in a single zone. The zone field must be specified, when
 *        this mode is selected. (Value: "SINGLE_ZONE")
 *    @arg @c kGTLRCloudRedis_ZoneDistributionConfig_Mode_ZoneDistributionModeUnspecified
 *        Not Set. Default: MULTI_ZONE (Value:
 *        "ZONE_DISTRIBUTION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. When SINGLE ZONE distribution is selected, zone field would be
 *  used to allocate all resources in that zone. This is not applicable to
 *  MULTI_ZONE, and would be ignored for MULTI_ZONE clusters.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
