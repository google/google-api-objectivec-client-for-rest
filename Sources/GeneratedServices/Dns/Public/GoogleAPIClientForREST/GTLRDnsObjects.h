// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud DNS API (dns/v1)
// Documentation:
//   https://cloud.google.com/dns/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDns_Change;
@class GTLRDns_DnsKey;
@class GTLRDns_DnsKeySpec;
@class GTLRDns_Expr;
@class GTLRDns_GoogleIamV1AuditConfig;
@class GTLRDns_GoogleIamV1AuditLogConfig;
@class GTLRDns_GoogleIamV1Binding;
@class GTLRDns_GoogleIamV1GetPolicyOptions;
@class GTLRDns_GoogleIamV1Policy;
@class GTLRDns_KeyDigest;
@class GTLRDns_ManagedZone;
@class GTLRDns_ManagedZone_Labels;
@class GTLRDns_ManagedZoneCloudLoggingConfig;
@class GTLRDns_ManagedZoneDnsSecConfig;
@class GTLRDns_ManagedZoneForwardingConfig;
@class GTLRDns_ManagedZoneForwardingConfigNameServerTarget;
@class GTLRDns_ManagedZonePeeringConfig;
@class GTLRDns_ManagedZonePeeringConfigTargetNetwork;
@class GTLRDns_ManagedZonePrivateVisibilityConfig;
@class GTLRDns_ManagedZonePrivateVisibilityConfigGKECluster;
@class GTLRDns_ManagedZonePrivateVisibilityConfigNetwork;
@class GTLRDns_ManagedZoneReverseLookupConfig;
@class GTLRDns_ManagedZoneServiceDirectoryConfig;
@class GTLRDns_ManagedZoneServiceDirectoryConfigNamespace;
@class GTLRDns_Operation;
@class GTLRDns_OperationDnsKeyContext;
@class GTLRDns_OperationManagedZoneContext;
@class GTLRDns_Policy;
@class GTLRDns_PolicyAlternativeNameServerConfig;
@class GTLRDns_PolicyAlternativeNameServerConfigTargetNameServer;
@class GTLRDns_PolicyNetwork;
@class GTLRDns_Quota;
@class GTLRDns_ResourceRecordSet;
@class GTLRDns_ResponseHeader;
@class GTLRDns_ResponsePolicy;
@class GTLRDns_ResponsePolicy_Labels;
@class GTLRDns_ResponsePolicyGKECluster;
@class GTLRDns_ResponsePolicyNetwork;
@class GTLRDns_ResponsePolicyRule;
@class GTLRDns_ResponsePolicyRuleLocalData;
@class GTLRDns_RRSetRoutingPolicy;
@class GTLRDns_RRSetRoutingPolicyGeoPolicy;
@class GTLRDns_RRSetRoutingPolicyGeoPolicyGeoPolicyItem;
@class GTLRDns_RRSetRoutingPolicyHealthCheckTargets;
@class GTLRDns_RRSetRoutingPolicyLoadBalancerTarget;
@class GTLRDns_RRSetRoutingPolicyPrimaryBackupPolicy;
@class GTLRDns_RRSetRoutingPolicyWrrPolicy;
@class GTLRDns_RRSetRoutingPolicyWrrPolicyWrrPolicyItem;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDns_Change.status

/** Value: "done" */
FOUNDATION_EXTERN NSString * const kGTLRDns_Change_Status_Done;
/** Value: "pending" */
FOUNDATION_EXTERN NSString * const kGTLRDns_Change_Status_Pending;

// ----------------------------------------------------------------------------
// GTLRDns_DnsKey.algorithm

/** Value: "ecdsap256sha256" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Algorithm_Ecdsap256sha256;
/** Value: "ecdsap384sha384" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Algorithm_Ecdsap384sha384;
/** Value: "rsasha1" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Algorithm_Rsasha1;
/** Value: "rsasha256" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Algorithm_Rsasha256;
/** Value: "rsasha512" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Algorithm_Rsasha512;

// ----------------------------------------------------------------------------
// GTLRDns_DnsKey.type

/** Value: "keySigning" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Type_KeySigning;
/** Value: "zoneSigning" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKey_Type_ZoneSigning;

// ----------------------------------------------------------------------------
// GTLRDns_DnsKeySpec.algorithm

/** Value: "ecdsap256sha256" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_Algorithm_Ecdsap256sha256;
/** Value: "ecdsap384sha384" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_Algorithm_Ecdsap384sha384;
/** Value: "rsasha1" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_Algorithm_Rsasha1;
/** Value: "rsasha256" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_Algorithm_Rsasha256;
/** Value: "rsasha512" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_Algorithm_Rsasha512;

// ----------------------------------------------------------------------------
// GTLRDns_DnsKeySpec.keyType

/** Value: "keySigning" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_KeyType_KeySigning;
/** Value: "zoneSigning" */
FOUNDATION_EXTERN NSString * const kGTLRDns_DnsKeySpec_KeyType_ZoneSigning;

// ----------------------------------------------------------------------------
// GTLRDns_GoogleIamV1AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_GoogleIamV1AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_GoogleIamV1AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_GoogleIamV1AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDns_KeyDigest.type

/** Value: "sha1" */
FOUNDATION_EXTERN NSString * const kGTLRDns_KeyDigest_Type_Sha1;
/** Value: "sha256" */
FOUNDATION_EXTERN NSString * const kGTLRDns_KeyDigest_Type_Sha256;
/** Value: "sha384" */
FOUNDATION_EXTERN NSString * const kGTLRDns_KeyDigest_Type_Sha384;

// ----------------------------------------------------------------------------
// GTLRDns_ManagedZone.visibility

/** Value: "private" */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZone_Visibility_Private;
/** Value: "public" */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZone_Visibility_Public;

// ----------------------------------------------------------------------------
// GTLRDns_ManagedZoneDnsSecConfig.nonExistence

/** Value: "nsec" */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneDnsSecConfig_NonExistence_Nsec;
/** Value: "nsec3" */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneDnsSecConfig_NonExistence_Nsec3;

// ----------------------------------------------------------------------------
// GTLRDns_ManagedZoneDnsSecConfig.state

/**
 *  DNSSEC is disabled; the zone is not signed.
 *
 *  Value: "off"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneDnsSecConfig_State_Off;
/**
 *  DNSSEC is enabled; the zone is signed and fully managed.
 *
 *  Value: "on"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneDnsSecConfig_State_On;
/**
 *  DNSSEC is enabled, but in a "transfer" mode.
 *
 *  Value: "transfer"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneDnsSecConfig_State_Transfer;

// ----------------------------------------------------------------------------
// GTLRDns_ManagedZoneForwardingConfigNameServerTarget.forwardingPath

/**
 *  Cloud DNS makes forwarding decisions based on address ranges; that is,
 *  RFC1918 addresses forward to the target through the VPC and non-RFC1918
 *  addresses forward to the target through the internet
 *
 *  Value: "default"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneForwardingConfigNameServerTarget_ForwardingPath_Default;
/**
 *  Cloud DNS always forwards to this target through the VPC.
 *
 *  Value: "private"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ManagedZoneForwardingConfigNameServerTarget_ForwardingPath_Private;

// ----------------------------------------------------------------------------
// GTLRDns_Operation.status

/** Value: "done" */
FOUNDATION_EXTERN NSString * const kGTLRDns_Operation_Status_Done;
/** Value: "pending" */
FOUNDATION_EXTERN NSString * const kGTLRDns_Operation_Status_Pending;

// ----------------------------------------------------------------------------
// GTLRDns_PolicyAlternativeNameServerConfigTargetNameServer.forwardingPath

/**
 *  Cloud DNS makes forwarding decision based on IP address ranges; that is,
 *  RFC1918 addresses forward to the target through the VPC and non-RFC1918
 *  addresses forward to the target through the internet
 *
 *  Value: "default"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_PolicyAlternativeNameServerConfigTargetNameServer_ForwardingPath_Default;
/**
 *  Cloud DNS always forwards to this target through the VPC.
 *
 *  Value: "private"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_PolicyAlternativeNameServerConfigTargetNameServer_ForwardingPath_Private;

// ----------------------------------------------------------------------------
// GTLRDns_ResponsePolicyRule.behavior

/** Value: "behaviorUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRDns_ResponsePolicyRule_Behavior_BehaviorUnspecified;
/**
 *  Skip a less-specific ResponsePolicyRule and continue normal query logic.
 *  This can be used with a less-specific wildcard selector to exempt a subset
 *  of the wildcard ResponsePolicyRule from the ResponsePolicy behavior and
 *  query the public Internet instead. For instance, if these rules exist:
 *  *.example.com -> LocalData 1.2.3.4 foo.example.com -> Behavior
 *  'bypassResponsePolicy' Then a query for 'foo.example.com' skips the
 *  wildcard. This additionally functions to facilitate the allowlist feature.
 *  RPZs can be applied to multiple levels in the (eventually org, folder,
 *  project, network) hierarchy. If a rule is applied at a higher level of the
 *  hierarchy, adding a passthru rule at a lower level will supersede that, and
 *  a query from an affected vm to that domain will be exempt from the RPZ and
 *  proceed to normal resolution behavior.
 *
 *  Value: "bypassResponsePolicy"
 */
FOUNDATION_EXTERN NSString * const kGTLRDns_ResponsePolicyRule_Behavior_BypassResponsePolicy;

// ----------------------------------------------------------------------------
// GTLRDns_RRSetRoutingPolicyLoadBalancerTarget.ipProtocol

/** Value: "tcp" */
FOUNDATION_EXTERN NSString * const kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Tcp;
/** Value: "udp" */
FOUNDATION_EXTERN NSString * const kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Udp;
/** Value: "undefined" */
FOUNDATION_EXTERN NSString * const kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Undefined;

// ----------------------------------------------------------------------------
// GTLRDns_RRSetRoutingPolicyLoadBalancerTarget.loadBalancerType

/** Value: "none" */
FOUNDATION_EXTERN NSString * const kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_LoadBalancerType_None;
/** Value: "regionalL4ilb" */
FOUNDATION_EXTERN NSString * const kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_LoadBalancerType_RegionalL4ilb;

/**
 *  A Change represents a set of ResourceRecordSet additions and deletions
 *  applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone
 *  are modified by creating a new Change element in the Changes collection. In
 *  turn the Changes collection also records the past modifications to the
 *  ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is
 *  the sum effect of applying all Change elements in the Changes collection in
 *  sequence.
 */
@interface GTLRDns_Change : GTLRObject

/** Which ResourceRecordSets to add? */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResourceRecordSet *> *additions;

/** Which ResourceRecordSets to remove? Must match existing data exactly. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResourceRecordSet *> *deletions;

/**
 *  Unique identifier for the resource; defined by the server (output only).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  If the DNS queries for the zone will be served.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isServing;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The time that this operation was started by the server (output only). This
 *  is in RFC3339 text format.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Status of the operation (output only). A status of "done" means that the
 *  request to update the authoritative servers has been sent, but the servers
 *  might not be updated yet.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_Change_Status_Done Value "done"
 *    @arg @c kGTLRDns_Change_Status_Pending Value "pending"
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  The response to a request to enumerate Changes to a ResourceRecordSets
 *  collection.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "changes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_ChangesListResponse : GTLRCollectionObject

/**
 *  The requested changes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_Change *> *changes;

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your pagination token. This lets you
 *  retrieve the complete contents of even very large collections one page at a
 *  time. However, if the contents of the collection change between the first
 *  and last paginated list request, the set of all elements returned are an
 *  inconsistent view of the collection. You cannot retrieve a "snapshot" of
 *  collections larger than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A DNSSEC key pair.
 */
@interface GTLRDns_DnsKey : GTLRObject

/**
 *  String mnemonic specifying the DNSSEC algorithm of this key. Immutable after
 *  creation time.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_DnsKey_Algorithm_Ecdsap256sha256 Value "ecdsap256sha256"
 *    @arg @c kGTLRDns_DnsKey_Algorithm_Ecdsap384sha384 Value "ecdsap384sha384"
 *    @arg @c kGTLRDns_DnsKey_Algorithm_Rsasha1 Value "rsasha1"
 *    @arg @c kGTLRDns_DnsKey_Algorithm_Rsasha256 Value "rsasha256"
 *    @arg @c kGTLRDns_DnsKey_Algorithm_Rsasha512 Value "rsasha512"
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  The time that this resource was created in the control plane. This is in
 *  RFC3339 text format. Output only.
 */
@property(nonatomic, copy, nullable) NSString *creationTime;

/**
 *  A mutable string of at most 1024 characters associated with this resource
 *  for the user's convenience. Has no effect on the resource's function.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Cryptographic hashes of the DNSKEY resource record associated with this
 *  DnsKey. These digests are needed to construct a DS record that points at
 *  this DNS key. Output only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_KeyDigest *> *digests;

/**
 *  Unique identifier for the resource; defined by the server (output only).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Active keys are used to sign subsequent changes to the ManagedZone. Inactive
 *  keys are still present as DNSKEY Resource Records for the use of resolvers
 *  validating existing signatures.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isActive;

/**
 *  Length of the key in bits. Specified at creation time, and then immutable.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyLength;

/**
 *  The key tag is a non-cryptographic hash of the a DNSKEY resource record
 *  associated with this DnsKey. The key tag can be used to identify a DNSKEY
 *  more quickly (but it is not a unique identifier). In particular, the key tag
 *  is used in a parent zone's DS record to point at the DNSKEY in this child
 *  ManagedZone. The key tag is a number in the range [0, 65535] and the
 *  algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyTag;

@property(nonatomic, copy, nullable) NSString *kind;

/** Base64 encoded public half of this key. Output only. */
@property(nonatomic, copy, nullable) NSString *publicKey;

/**
 *  One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the
 *  Secure Entry Point flag set and, when active, are used to sign only resource
 *  record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is
 *  cleared, and this key is used to sign only resource record sets of other
 *  types. Immutable after creation time.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_DnsKey_Type_KeySigning Value "keySigning"
 *    @arg @c kGTLRDns_DnsKey_Type_ZoneSigning Value "zoneSigning"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The response to a request to enumerate DnsKeys in a ManagedZone.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "dnsKeys" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_DnsKeysListResponse : GTLRCollectionObject

/**
 *  The requested resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_DnsKey *> *dnsKeys;

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your pagination token. In this way you can
 *  retrieve the complete contents of even very large collections one page at a
 *  time. However, if the contents of the collection change between the first
 *  and last paginated list request, the set of all elements returned are an
 *  inconsistent view of the collection. There is no way to retrieve a
 *  "snapshot" of collections larger than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Parameters for DnsKey key generation. Used for generating initial keys for a
 *  new ManagedZone and as default when adding a new DnsKey.
 */
@interface GTLRDns_DnsKeySpec : GTLRObject

/**
 *  String mnemonic specifying the DNSSEC algorithm of this key.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_DnsKeySpec_Algorithm_Ecdsap256sha256 Value
 *        "ecdsap256sha256"
 *    @arg @c kGTLRDns_DnsKeySpec_Algorithm_Ecdsap384sha384 Value
 *        "ecdsap384sha384"
 *    @arg @c kGTLRDns_DnsKeySpec_Algorithm_Rsasha1 Value "rsasha1"
 *    @arg @c kGTLRDns_DnsKeySpec_Algorithm_Rsasha256 Value "rsasha256"
 *    @arg @c kGTLRDns_DnsKeySpec_Algorithm_Rsasha512 Value "rsasha512"
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  Length of the keys in bits.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keyLength;

/**
 *  Specifies whether this is a key signing key (KSK) or a zone signing key
 *  (ZSK). Key signing keys have the Secure Entry Point flag set and, when
 *  active, are only used to sign resource record sets of type DNSKEY. Zone
 *  signing keys do not have the Secure Entry Point flag set and are used to
 *  sign all other types of resource record sets.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_DnsKeySpec_KeyType_KeySigning Value "keySigning"
 *    @arg @c kGTLRDns_DnsKeySpec_KeyType_ZoneSigning Value "zoneSigning"
 */
@property(nonatomic, copy, nullable) NSString *keyType;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRDns_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRDns_GoogleIamV1AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_GoogleIamV1AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRDns_GoogleIamV1AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_GoogleIamV1AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRDns_GoogleIamV1AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRDns_GoogleIamV1AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRDns_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRDns_GoogleIamV1Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRDns_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRDns_GoogleIamV1GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRDns_GoogleIamV1GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRDns_GoogleIamV1GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRDns_GoogleIamV1Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_GoogleIamV1AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_GoogleIamV1Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRDns_GoogleIamV1SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRDns_GoogleIamV1Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRDns_GoogleIamV1TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRDns_GoogleIamV1TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  GTLRDns_KeyDigest
 */
@interface GTLRDns_KeyDigest : GTLRObject

/**
 *  The base-16 encoded bytes of this digest. Suitable for use in a DS resource
 *  record.
 */
@property(nonatomic, copy, nullable) NSString *digest;

/**
 *  Specifies the algorithm used to calculate this digest.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_KeyDigest_Type_Sha1 Value "sha1"
 *    @arg @c kGTLRDns_KeyDigest_Type_Sha256 Value "sha256"
 *    @arg @c kGTLRDns_KeyDigest_Type_Sha384 Value "sha384"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A zone is a subtree of the DNS namespace under one administrative
 *  responsibility. A ManagedZone is a resource that represents a DNS zone
 *  hosted by the Cloud DNS service.
 */
@interface GTLRDns_ManagedZone : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneCloudLoggingConfig *cloudLoggingConfig;

/**
 *  The time that this resource was created on the server. This is in RFC3339
 *  text format. Output only.
 */
@property(nonatomic, copy, nullable) NSString *creationTime;

/**
 *  A mutable string of at most 1024 characters associated with this resource
 *  for the user's convenience. Has no effect on the managed zone's function.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The DNS name of this managed zone, for instance "example.com.". */
@property(nonatomic, copy, nullable) NSString *dnsName;

/** DNSSEC configuration. */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneDnsSecConfig *dnssecConfig;

/**
 *  The presence for this field indicates that outbound forwarding is enabled
 *  for this zone. The value of this field contains the set of destinations to
 *  forward to.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneForwardingConfig *forwardingConfig;

/**
 *  Unique identifier for the resource; defined by the server (output only)
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

@property(nonatomic, copy, nullable) NSString *kind;

/** User labels. */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZone_Labels *labels;

/**
 *  User assigned name for this resource. Must be unique within the project. The
 *  name must be 1-63 characters long, must begin with a letter, end with a
 *  letter or digit, and only contain lowercase letters, digits or dashes.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Delegate your managed_zone to these virtual name servers; defined by the
 *  server (output only)
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nameServers;

/**
 *  Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet
 *  is a set of DNS name servers that all host the same ManagedZones. Most users
 *  leave this field unset. If you need to use this field, contact your account
 *  team.
 */
@property(nonatomic, copy, nullable) NSString *nameServerSet;

/**
 *  The presence of this field indicates that DNS Peering is enabled for this
 *  zone. The value of this field contains the network to peer with.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZonePeeringConfig *peeringConfig;

/**
 *  For privately visible zones, the set of Virtual Private Cloud resources that
 *  the zone is visible from.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZonePrivateVisibilityConfig *privateVisibilityConfig;

/**
 *  The presence of this field indicates that this is a managed reverse lookup
 *  zone and Cloud DNS resolves reverse lookup queries using automatically
 *  configured records for VPC resources. This only applies to networks listed
 *  under private_visibility_config.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneReverseLookupConfig *reverseLookupConfig;

/**
 *  This field links to the associated service directory namespace. Do not set
 *  this field for public zones or forwarding zones.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneServiceDirectoryConfig *serviceDirectoryConfig;

/**
 *  The zone's visibility: public zones are exposed to the Internet, while
 *  private zones are visible only to Virtual Private Cloud resources.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_ManagedZone_Visibility_Private Value "private"
 *    @arg @c kGTLRDns_ManagedZone_Visibility_Public Value "public"
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  User labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDns_ManagedZone_Labels : GTLRObject
@end


/**
 *  Cloud Logging configurations for publicly visible zones.
 */
@interface GTLRDns_ManagedZoneCloudLoggingConfig : GTLRObject

/**
 *  If set, enable query logging for this ManagedZone. False by default, making
 *  logging opt-in.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableLogging;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDns_ManagedZoneDnsSecConfig
 */
@interface GTLRDns_ManagedZoneDnsSecConfig : GTLRObject

/**
 *  Specifies parameters for generating initial DnsKeys for this ManagedZone.
 *  Can only be changed while the state is OFF.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_DnsKeySpec *> *defaultKeySpecs;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Specifies the mechanism for authenticated denial-of-existence responses. Can
 *  only be changed while the state is OFF.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_ManagedZoneDnsSecConfig_NonExistence_Nsec Value "nsec"
 *    @arg @c kGTLRDns_ManagedZoneDnsSecConfig_NonExistence_Nsec3 Value "nsec3"
 */
@property(nonatomic, copy, nullable) NSString *nonExistence;

/**
 *  Specifies whether DNSSEC is enabled, and what mode it is in.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_ManagedZoneDnsSecConfig_State_Off DNSSEC is disabled; the
 *        zone is not signed. (Value: "off")
 *    @arg @c kGTLRDns_ManagedZoneDnsSecConfig_State_On DNSSEC is enabled; the
 *        zone is signed and fully managed. (Value: "on")
 *    @arg @c kGTLRDns_ManagedZoneDnsSecConfig_State_Transfer DNSSEC is enabled,
 *        but in a "transfer" mode. (Value: "transfer")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  GTLRDns_ManagedZoneForwardingConfig
 */
@interface GTLRDns_ManagedZoneForwardingConfig : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  List of target name servers to forward to. Cloud DNS selects the best
 *  available name server if more than one target is given.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ManagedZoneForwardingConfigNameServerTarget *> *targetNameServers;

@end


/**
 *  GTLRDns_ManagedZoneForwardingConfigNameServerTarget
 */
@interface GTLRDns_ManagedZoneForwardingConfigNameServerTarget : GTLRObject

/**
 *  Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud
 *  DNS makes forwarding decisions based on IP address ranges; that is, RFC1918
 *  addresses go to the VPC network, non-RFC1918 addresses go to the internet.
 *  When set to PRIVATE, Cloud DNS always sends queries through the VPC network
 *  for this target.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_ManagedZoneForwardingConfigNameServerTarget_ForwardingPath_Default
 *        Cloud DNS makes forwarding decisions based on address ranges; that is,
 *        RFC1918 addresses forward to the target through the VPC and
 *        non-RFC1918 addresses forward to the target through the internet
 *        (Value: "default")
 *    @arg @c kGTLRDns_ManagedZoneForwardingConfigNameServerTarget_ForwardingPath_Private
 *        Cloud DNS always forwards to this target through the VPC. (Value:
 *        "private")
 */
@property(nonatomic, copy, nullable) NSString *forwardingPath;

/** IPv4 address of a target name server. */
@property(nonatomic, copy, nullable) NSString *ipv4Address;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDns_ManagedZoneOperationsListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_ManagedZoneOperationsListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your page token. This lets you retrieve the
 *  complete contents of even very large collections one page at a time.
 *  However, if the contents of the collection change between the first and last
 *  paginated list request, the set of all elements returned are an inconsistent
 *  view of the collection. You cannot retrieve a consistent snapshot of a
 *  collection larger than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The operation resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_Operation *> *operations;

@end


/**
 *  GTLRDns_ManagedZonePeeringConfig
 */
@interface GTLRDns_ManagedZonePeeringConfig : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/** The network with which to peer. */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZonePeeringConfigTargetNetwork *targetNetwork;

@end


/**
 *  GTLRDns_ManagedZonePeeringConfigTargetNetwork
 */
@interface GTLRDns_ManagedZonePeeringConfigTargetNetwork : GTLRObject

/**
 *  The time at which the zone was deactivated, in RFC 3339 date-time format. An
 *  empty string indicates that the peering connection is active. The producer
 *  network can deactivate a zone. The zone is automatically deactivated if the
 *  producer network that the zone targeted is deleted. Output only.
 */
@property(nonatomic, copy, nullable) NSString *deactivateTime;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fully qualified URL of the VPC network to forward queries to. This
 *  should be formatted like
 *  https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
 */
@property(nonatomic, copy, nullable) NSString *networkUrl;

@end


/**
 *  GTLRDns_ManagedZonePrivateVisibilityConfig
 */
@interface GTLRDns_ManagedZonePrivateVisibilityConfig : GTLRObject

/** The list of Google Kubernetes Engine clusters that can see this zone. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ManagedZonePrivateVisibilityConfigGKECluster *> *gkeClusters;

@property(nonatomic, copy, nullable) NSString *kind;

/** The list of VPC networks that can see this zone. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ManagedZonePrivateVisibilityConfigNetwork *> *networks;

@end


/**
 *  GTLRDns_ManagedZonePrivateVisibilityConfigGKECluster
 */
@interface GTLRDns_ManagedZonePrivateVisibilityConfigGKECluster : GTLRObject

/**
 *  The resource name of the cluster to bind this ManagedZone to. This should be
 *  specified in the format like: projects/ * /locations/ * /clusters/ *. This
 *  is referenced from GKE projects.locations.clusters.get API:
 *  https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
 */
@property(nonatomic, copy, nullable) NSString *gkeClusterName;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDns_ManagedZonePrivateVisibilityConfigNetwork
 */
@interface GTLRDns_ManagedZonePrivateVisibilityConfigNetwork : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fully qualified URL of the VPC network to bind to. Format this URL like
 *  https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
 */
@property(nonatomic, copy, nullable) NSString *networkUrl;

@end


/**
 *  GTLRDns_ManagedZoneReverseLookupConfig
 */
@interface GTLRDns_ManagedZoneReverseLookupConfig : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Contains information about Service Directory-backed zones.
 */
@interface GTLRDns_ManagedZoneServiceDirectoryConfig : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Contains information about the namespace associated with the zone.
 *
 *  Remapped to 'namespaceProperty' to avoid language reserved word 'namespace'.
 */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZoneServiceDirectoryConfigNamespace *namespaceProperty;

@end


/**
 *  GTLRDns_ManagedZoneServiceDirectoryConfigNamespace
 */
@interface GTLRDns_ManagedZoneServiceDirectoryConfigNamespace : GTLRObject

/**
 *  The time that the namespace backing this zone was deleted; an empty string
 *  if it still exists. This is in RFC3339 text format. Output only.
 */
@property(nonatomic, copy, nullable) NSString *deletionTime;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fully qualified URL of the namespace associated with the zone. Format
 *  must be
 *  https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
 */
@property(nonatomic, copy, nullable) NSString *namespaceUrl;

@end


/**
 *  GTLRDns_ManagedZonesListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "managedZones" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_ManagedZonesListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The managed zone resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ManagedZone *> *managedZones;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your page token. This lets you the complete
 *  contents of even very large collections one page at a time. However, if the
 *  contents of the collection change between the first and last paginated list
 *  request, the set of all elements returned are an inconsistent view of the
 *  collection. You cannot retrieve a consistent snapshot of a collection larger
 *  than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  An operation represents a successful mutation performed on a Cloud DNS
 *  resource. Operations provide: - An audit log of server resource mutations. -
 *  A way to recover/retry API calls in the case where the response is never
 *  received by the caller. Use the caller specified client_operation_id.
 */
@interface GTLRDns_Operation : GTLRObject

/** Only populated if the operation targeted a DnsKey (output only). */
@property(nonatomic, strong, nullable) GTLRDns_OperationDnsKeyContext *dnsKeyContext;

/**
 *  Unique identifier for the resource. This is the client_operation_id if the
 *  client specified it when the mutation was initiated, otherwise, it is
 *  generated by the server. The name must be 1-63 characters long and match the
 *  regular expression [-a-z0-9]? (output only)
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The time that this operation was started by the server. This is in RFC3339
 *  text format (output only).
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Status of the operation. Can be one of the following: "PENDING" or "DONE"
 *  (output only). A status of "DONE" means that the request to update the
 *  authoritative servers has been sent, but the servers might not be updated
 *  yet.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_Operation_Status_Done Value "done"
 *    @arg @c kGTLRDns_Operation_Status_Pending Value "pending"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Type of the operation. Operations include insert, update, and delete (output
 *  only).
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  User who requested the operation, for example: user\@example.com.
 *  cloud-dns-system for operations automatically done by the system. (output
 *  only)
 */
@property(nonatomic, copy, nullable) NSString *user;

/** Only populated if the operation targeted a ManagedZone (output only). */
@property(nonatomic, strong, nullable) GTLRDns_OperationManagedZoneContext *zoneContext;

@end


/**
 *  GTLRDns_OperationDnsKeyContext
 */
@interface GTLRDns_OperationDnsKeyContext : GTLRObject

/** The post-operation DnsKey resource. */
@property(nonatomic, strong, nullable) GTLRDns_DnsKey *newValue NS_RETURNS_NOT_RETAINED;

/** The pre-operation DnsKey resource. */
@property(nonatomic, strong, nullable) GTLRDns_DnsKey *oldValue;

@end


/**
 *  GTLRDns_OperationManagedZoneContext
 */
@interface GTLRDns_OperationManagedZoneContext : GTLRObject

/** The post-operation ManagedZone resource. */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZone *newValue NS_RETURNS_NOT_RETAINED;

/** The pre-operation ManagedZone resource. */
@property(nonatomic, strong, nullable) GTLRDns_ManagedZone *oldValue;

@end


/**
 *  GTLRDns_PoliciesListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "policies" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_PoliciesListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your page token. This lets you the complete
 *  contents of even very large collections one page at a time. However, if the
 *  contents of the collection change between the first and last paginated list
 *  request, the set of all elements returned are an inconsistent view of the
 *  collection. You cannot retrieve a consistent snapshot of a collection larger
 *  than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The policy resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_Policy *> *policies;

@end


/**
 *  GTLRDns_PoliciesPatchResponse
 */
@interface GTLRDns_PoliciesPatchResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_Policy *policy;

@end


/**
 *  GTLRDns_PoliciesUpdateResponse
 */
@interface GTLRDns_PoliciesUpdateResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_Policy *policy;

@end


/**
 *  A policy is a collection of DNS rules applied to one or more Virtual Private
 *  Cloud resources.
 */
@interface GTLRDns_Policy : GTLRObject

/**
 *  Sets an alternative name server for the associated networks. When specified,
 *  all DNS queries are forwarded to a name server that you choose. Names such
 *  as .internal are not available when an alternative name server is specified.
 */
@property(nonatomic, strong, nullable) GTLRDns_PolicyAlternativeNameServerConfig *alternativeNameServerConfig;

/**
 *  A mutable string of at most 1024 characters associated with this resource
 *  for the user's convenience. Has no effect on the policy's function.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Allows networks bound to this policy to receive DNS queries sent by VMs or
 *  applications over VPN connections. When enabled, a virtual IP address is
 *  allocated from each of the subnetworks that are bound to this policy.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableInboundForwarding;

/**
 *  Controls whether logging is enabled for the networks bound to this policy.
 *  Defaults to no logging if not set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableLogging;

/**
 *  Unique identifier for the resource; defined by the server (output only).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

@property(nonatomic, copy, nullable) NSString *kind;

/** User-assigned name for this policy. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of network names specifying networks to which this policy is applied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_PolicyNetwork *> *networks;

@end


/**
 *  GTLRDns_PolicyAlternativeNameServerConfig
 */
@interface GTLRDns_PolicyAlternativeNameServerConfig : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Sets an alternative name server for the associated networks. When specified,
 *  all DNS queries are forwarded to a name server that you choose. Names such
 *  as .internal are not available when an alternative name server is specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_PolicyAlternativeNameServerConfigTargetNameServer *> *targetNameServers;

@end


/**
 *  GTLRDns_PolicyAlternativeNameServerConfigTargetNameServer
 */
@interface GTLRDns_PolicyAlternativeNameServerConfigTargetNameServer : GTLRObject

/**
 *  Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud
 *  DNS makes forwarding decisions based on address ranges; that is, RFC1918
 *  addresses go to the VPC network, non-RFC1918 addresses go to the internet.
 *  When set to PRIVATE, Cloud DNS always sends queries through the VPC network
 *  for this target.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_PolicyAlternativeNameServerConfigTargetNameServer_ForwardingPath_Default
 *        Cloud DNS makes forwarding decision based on IP address ranges; that
 *        is, RFC1918 addresses forward to the target through the VPC and
 *        non-RFC1918 addresses forward to the target through the internet
 *        (Value: "default")
 *    @arg @c kGTLRDns_PolicyAlternativeNameServerConfigTargetNameServer_ForwardingPath_Private
 *        Cloud DNS always forwards to this target through the VPC. (Value:
 *        "private")
 */
@property(nonatomic, copy, nullable) NSString *forwardingPath;

/** IPv4 address to forward queries to. */
@property(nonatomic, copy, nullable) NSString *ipv4Address;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDns_PolicyNetwork
 */
@interface GTLRDns_PolicyNetwork : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fully qualified URL of the VPC network to bind to. This should be
 *  formatted like
 *  https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
 */
@property(nonatomic, copy, nullable) NSString *networkUrl;

@end


/**
 *  A project resource. The project is a top level container for resources
 *  including Cloud DNS ManagedZones. Projects can be created only in the APIs
 *  console. Next tag: 7.
 */
@interface GTLRDns_Project : GTLRObject

/**
 *  User assigned unique identifier for the resource (output only).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Unique numeric identifier for the resource; defined by the server (output
 *  only).
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/** Quotas assigned to this project (output only). */
@property(nonatomic, strong, nullable) GTLRDns_Quota *quota;

@end


/**
 *  Limits associated with a Project.
 */
@interface GTLRDns_Quota : GTLRObject

/**
 *  Maximum allowed number of DnsKeys per ManagedZone.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dnsKeysPerManagedZone;

/**
 *  Maximum allowed number of GKE clusters to which a privately scoped zone can
 *  be attached.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gkeClustersPerManagedZone;

/**
 *  Maximum allowed number of GKE clusters per policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gkeClustersPerPolicy;

/**
 *  Maximum allowed number of GKE clusters per response policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gkeClustersPerResponsePolicy;

/**
 *  Maximum allowed number of items per routing policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *itemsPerRoutingPolicy;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Maximum allowed number of managed zones in the project.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managedZones;

/**
 *  Maximum allowed number of managed zones which can be attached to a GKE
 *  cluster.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managedZonesPerGkeCluster;

/**
 *  Maximum allowed number of managed zones which can be attached to a network.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managedZonesPerNetwork;

/**
 *  Maximum allowed number of networks to which a privately scoped zone can be
 *  attached.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *networksPerManagedZone;

/**
 *  Maximum allowed number of networks per policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *networksPerPolicy;

/**
 *  Maximum allowed number of networks per response policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *networksPerResponsePolicy;

/**
 *  Maximum allowed number of consumer peering zones per target network owned by
 *  this producer project
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *peeringZonesPerTargetNetwork;

/**
 *  Maximum allowed number of policies per project.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *policies;

/**
 *  Maximum allowed number of ResourceRecords per ResourceRecordSet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resourceRecordsPerRrset;

/**
 *  Maximum allowed number of response policies per project.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responsePolicies;

/**
 *  Maximum allowed number of rules per response policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responsePolicyRulesPerResponsePolicy;

/**
 *  Maximum allowed number of ResourceRecordSets to add per
 *  ChangesCreateRequest.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rrsetAdditionsPerChange;

/**
 *  Maximum allowed number of ResourceRecordSets to delete per
 *  ChangesCreateRequest.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rrsetDeletionsPerChange;

/**
 *  Maximum allowed number of ResourceRecordSets per zone in the project.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rrsetsPerManagedZone;

/**
 *  Maximum allowed number of target name servers per managed forwarding zone.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetNameServersPerManagedZone;

/**
 *  Maximum allowed number of alternative target name servers per policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetNameServersPerPolicy;

/**
 *  Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRrdataSizePerChange;

/** DNSSEC algorithm and key length types that can be used for DnsKeys. */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_DnsKeySpec *> *whitelistedKeySpecs;

@end


/**
 *  A unit of data that is returned by the DNS servers.
 */
@interface GTLRDns_ResourceRecordSet : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/** For example, www.example.com. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Configures dynamic query responses based on geo location of querying user or
 *  a weighted round robin based routing policy. A ResourceRecordSet should only
 *  have either rrdata (static) or routing_policy (dynamic). An error is
 *  returned otherwise.
 */
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicy *routingPolicy;

/**
 *  As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see
 *  examples.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *rrdatas;

/** As defined in RFC 4034 (section 3.2). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *signatureRrdatas;

/**
 *  Number of seconds that this ResourceRecordSet can be cached by resolvers.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ttl;

/**
 *  The identifier of a supported record type. See the list of Supported DNS
 *  record types.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDns_ResourceRecordSetsDeleteResponse
 */
@interface GTLRDns_ResourceRecordSetsDeleteResponse : GTLRObject
@end


/**
 *  GTLRDns_ResourceRecordSetsListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rrsets" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDns_ResourceRecordSetsListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/** Type of resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your pagination token. This lets you
 *  retrieve complete contents of even larger collections, one page at a time.
 *  However, if the contents of the collection change between the first and last
 *  paginated list request, the set of elements returned are an inconsistent
 *  view of the collection. You cannot retrieve a consistent snapshot of a
 *  collection larger than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resource record set resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResourceRecordSet *> *rrsets;

@end


/**
 *  Elements common to every response.
 */
@interface GTLRDns_ResponseHeader : GTLRObject

/**
 *  For mutating operation requests that completed successfully. This is the
 *  client_operation_id if the client specified it, otherwise it is generated by
 *  the server (output only).
 */
@property(nonatomic, copy, nullable) NSString *operationId;

@end


/**
 *  GTLRDns_ResponsePoliciesListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "responsePolicies" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDns_ResponsePoliciesListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/**
 *  The presence of this field indicates that more results exist following your
 *  last page of results in pagination order. To fetch them, make another list
 *  request by using this value as your page token. This lets you view the
 *  complete contents of even very large collections one page at a time.
 *  However, if the contents of the collection change between the first and last
 *  paginated list request, the set of all elements returned are an inconsistent
 *  view of the collection. You cannot retrieve a consistent snapshot of a
 *  collection larger than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The Response Policy resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResponsePolicy *> *responsePolicies;

@end


/**
 *  GTLRDns_ResponsePoliciesPatchResponse
 */
@interface GTLRDns_ResponsePoliciesPatchResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicy *responsePolicy;

@end


/**
 *  GTLRDns_ResponsePoliciesUpdateResponse
 */
@interface GTLRDns_ResponsePoliciesUpdateResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicy *responsePolicy;

@end


/**
 *  A Response Policy is a collection of selectors that apply to queries made
 *  against one or more Virtual Private Cloud networks.
 */
@interface GTLRDns_ResponsePolicy : GTLRObject

/**
 *  User-provided description for this Response Policy.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The list of Google Kubernetes Engine clusters to which this response policy
 *  is applied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResponsePolicyGKECluster *> *gkeClusters;

/**
 *  Unique identifier for the resource; defined by the server (output only).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

@property(nonatomic, copy, nullable) NSString *kind;

/** User labels. */
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicy_Labels *labels;

/**
 *  List of network names specifying networks to which this policy is applied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResponsePolicyNetwork *> *networks;

/** User assigned name for this Response Policy. */
@property(nonatomic, copy, nullable) NSString *responsePolicyName;

@end


/**
 *  User labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDns_ResponsePolicy_Labels : GTLRObject
@end


/**
 *  GTLRDns_ResponsePolicyGKECluster
 */
@interface GTLRDns_ResponsePolicyGKECluster : GTLRObject

/**
 *  The resource name of the cluster to bind this response policy to. This
 *  should be specified in the format like: projects/ * /locations/ * /clusters/
 *  *. This is referenced from GKE projects.locations.clusters.get API:
 *  https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
 */
@property(nonatomic, copy, nullable) NSString *gkeClusterName;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDns_ResponsePolicyNetwork
 */
@interface GTLRDns_ResponsePolicyNetwork : GTLRObject

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fully qualified URL of the VPC network to bind to. This should be
 *  formatted like
 *  https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
 */
@property(nonatomic, copy, nullable) NSString *networkUrl;

@end


/**
 *  A Response Policy Rule is a selector that applies its behavior to queries
 *  that match the selector. Selectors are DNS names, which may be wildcards or
 *  exact matches. Each DNS query subject to a Response Policy matches at most
 *  one ResponsePolicyRule, as identified by the dns_name field with the longest
 *  matching suffix.
 */
@interface GTLRDns_ResponsePolicyRule : GTLRObject

/**
 *  Answer this query with a behavior rather than DNS data.
 *
 *  Likely values:
 *    @arg @c kGTLRDns_ResponsePolicyRule_Behavior_BehaviorUnspecified Value
 *        "behaviorUnspecified"
 *    @arg @c kGTLRDns_ResponsePolicyRule_Behavior_BypassResponsePolicy Skip a
 *        less-specific ResponsePolicyRule and continue normal query logic. This
 *        can be used with a less-specific wildcard selector to exempt a subset
 *        of the wildcard ResponsePolicyRule from the ResponsePolicy behavior
 *        and query the public Internet instead. For instance, if these rules
 *        exist: *.example.com -> LocalData 1.2.3.4 foo.example.com -> Behavior
 *        'bypassResponsePolicy' Then a query for 'foo.example.com' skips the
 *        wildcard. This additionally functions to facilitate the allowlist
 *        feature. RPZs can be applied to multiple levels in the (eventually
 *        org, folder, project, network) hierarchy. If a rule is applied at a
 *        higher level of the hierarchy, adding a passthru rule at a lower level
 *        will supersede that, and a query from an affected vm to that domain
 *        will be exempt from the RPZ and proceed to normal resolution behavior.
 *        (Value: "bypassResponsePolicy")
 */
@property(nonatomic, copy, nullable) NSString *behavior;

/**
 *  The DNS name (wildcard or exact) to apply this rule to. Must be unique
 *  within the Response Policy Rule.
 */
@property(nonatomic, copy, nullable) NSString *dnsName;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Answer this query directly with DNS data. These ResourceRecordSets override
 *  any other DNS behavior for the matched name; in particular they override
 *  private zones, the public internet, and GCP internal DNS. No SOA nor NS
 *  types are allowed.
 */
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicyRuleLocalData *localData;

/** An identifier for this rule. Must be unique with the ResponsePolicy. */
@property(nonatomic, copy, nullable) NSString *ruleName;

@end


/**
 *  GTLRDns_ResponsePolicyRuleLocalData
 */
@interface GTLRDns_ResponsePolicyRuleLocalData : GTLRObject

/**
 *  All resource record sets for this selector, one per resource record type.
 *  The name must match the dns_name.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResourceRecordSet *> *localDatas;

@end


/**
 *  GTLRDns_ResponsePolicyRulesListResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "responsePolicyRules" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDns_ResponsePolicyRulesListResponse : GTLRCollectionObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;

/**
 *  The presence of this field indicates that there exist more results following
 *  your last page of results in pagination order. To fetch them, make another
 *  list request using this value as your page token. This lets you the complete
 *  contents of even very large collections one page at a time. However, if the
 *  contents of the collection change between the first and last paginated list
 *  request, the set of all elements returned are an inconsistent view of the
 *  collection. You cannot retrieve a consistent snapshot of a collection larger
 *  than the maximum page size.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The Response Policy Rule resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_ResponsePolicyRule *> *responsePolicyRules;

@end


/**
 *  GTLRDns_ResponsePolicyRulesPatchResponse
 */
@interface GTLRDns_ResponsePolicyRulesPatchResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicyRule *responsePolicyRule;

@end


/**
 *  GTLRDns_ResponsePolicyRulesUpdateResponse
 */
@interface GTLRDns_ResponsePolicyRulesUpdateResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_ResponseHeader *header;
@property(nonatomic, strong, nullable) GTLRDns_ResponsePolicyRule *responsePolicyRule;

@end


/**
 *  A RRSetRoutingPolicy represents ResourceRecordSet data that is returned
 *  dynamically with the response varying based on configured properties such as
 *  geolocation or by weighted random selection.
 */
@interface GTLRDns_RRSetRoutingPolicy : GTLRObject

@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyGeoPolicy *geo;
@property(nonatomic, copy, nullable) NSString *kind;
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyPrimaryBackupPolicy *primaryBackup;
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyWrrPolicy *wrr;

@end


/**
 *  Configures a RRSetRoutingPolicy that routes based on the geo location of the
 *  querying user.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDns_RRSetRoutingPolicyGeoPolicy : GTLRCollectionObject

/**
 *  Without fencing, if health check fails for all configured items in the
 *  current geo bucket, we'll failover to the next nearest geo bucket. With
 *  fencing, if health check is enabled, as long as some targets in the current
 *  geo bucket are healthy, we'll return only the healthy targets. However, if
 *  they're all unhealthy, we won't failover to the next nearest bucket, we'll
 *  simply return all the items in the current bucket even though they're
 *  unhealthy.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableFencing;

/**
 *  The primary geo routing configuration. If there are multiple items with the
 *  same location, an error is returned instead.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_RRSetRoutingPolicyGeoPolicyGeoPolicyItem *> *items;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  ResourceRecordSet data for one geo location.
 */
@interface GTLRDns_RRSetRoutingPolicyGeoPolicyGeoPolicyItem : GTLRObject

/**
 *  For A and AAAA types only. Endpoints to return in the query result only if
 *  they are healthy. These can be specified along with rrdata within this item.
 */
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyHealthCheckTargets *healthCheckedTargets;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The geo-location granularity is a GCP region. This location string should
 *  correspond to a GCP region. e.g. "us-east1", "southamerica-east1",
 *  "asia-east1", etc.
 */
@property(nonatomic, copy, nullable) NSString *location;

@property(nonatomic, strong, nullable) NSArray<NSString *> *rrdatas;

/**
 *  DNSSEC generated signatures for all the rrdata within this item. Note that
 *  if health checked targets are provided for DNSSEC enabled zones, there's a
 *  restriction of 1 ip per item. .
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *signatureRrdatas;

@end


/**
 *  HealthCheckTargets describes endpoints to health-check when responding to
 *  Routing Policy queries. Only the healthy endpoints will be included in the
 *  response.
 */
@interface GTLRDns_RRSetRoutingPolicyHealthCheckTargets : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDns_RRSetRoutingPolicyLoadBalancerTarget *> *internalLoadBalancers;

@end


/**
 *  GTLRDns_RRSetRoutingPolicyLoadBalancerTarget
 */
@interface GTLRDns_RRSetRoutingPolicyLoadBalancerTarget : GTLRObject

/** The frontend IP address of the */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  ipProtocol
 *
 *  Likely values:
 *    @arg @c kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Tcp Value
 *        "tcp"
 *    @arg @c kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Udp Value
 *        "udp"
 *    @arg @c kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_IpProtocol_Undefined
 *        Value "undefined"
 */
@property(nonatomic, copy, nullable) NSString *ipProtocol;

@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  loadBalancerType
 *
 *  Likely values:
 *    @arg @c kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_LoadBalancerType_None
 *        Value "none"
 *    @arg @c kGTLRDns_RRSetRoutingPolicyLoadBalancerTarget_LoadBalancerType_RegionalL4ilb
 *        Value "regionalL4ilb"
 */
@property(nonatomic, copy, nullable) NSString *loadBalancerType;

/** The fully qualified url of the network on which the ILB is */
@property(nonatomic, copy, nullable) NSString *networkUrl;

/**
 *  Load Balancer to health check. The configured port of the Load Balancer.
 */
@property(nonatomic, copy, nullable) NSString *port;

/**
 *  present. This should be formatted like
 *  https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
 *  The project ID in which the ILB exists.
 */
@property(nonatomic, copy, nullable) NSString *project;

/** The region for regional ILBs. */
@property(nonatomic, copy, nullable) NSString *region;

@end


/**
 *  Configures a RRSetRoutingPolicy such that all queries are responded with the
 *  primary_targets if they are healthy. And if all of them are unhealthy, then
 *  we fallback to a geo localized policy.
 */
@interface GTLRDns_RRSetRoutingPolicyPrimaryBackupPolicy : GTLRObject

/**
 *  Backup targets provide a regional failover policy for the otherwise global
 *  primary targets. If serving state is set to BACKUP, this policy essentially
 *  becomes a geo routing policy.
 */
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyGeoPolicy *backupGeoTargets;

@property(nonatomic, copy, nullable) NSString *kind;
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyHealthCheckTargets *primaryTargets;

/**
 *  When serving state is PRIMARY, this field provides the option of sending a
 *  small percentage of the traffic to the backup targets.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trickleTraffic;

@end


/**
 *  Configures a RRSetRoutingPolicy that routes in a weighted round robin
 *  fashion.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDns_RRSetRoutingPolicyWrrPolicy : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDns_RRSetRoutingPolicyWrrPolicyWrrPolicyItem *> *items;

@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A routing block which contains the routing information for one WRR item.
 */
@interface GTLRDns_RRSetRoutingPolicyWrrPolicyWrrPolicyItem : GTLRObject

/**
 *  endpoints that need to be health checked before making the routing decision.
 *  The unhealthy endpoints will be omitted from the result. If all endpoints
 *  within a buckete are unhealthy, we'll choose a different bucket (sampled
 *  w.r.t. its weight) for responding. Note that if DNSSEC is enabled for this
 *  zone, only one of rrdata or health_checked_targets can be set.
 */
@property(nonatomic, strong, nullable) GTLRDns_RRSetRoutingPolicyHealthCheckTargets *healthCheckedTargets;

@property(nonatomic, copy, nullable) NSString *kind;
@property(nonatomic, strong, nullable) NSArray<NSString *> *rrdatas;

/**
 *  DNSSEC generated signatures for all the rrdata within this item. Note that
 *  if health checked targets are provided for DNSSEC enabled zones, there's a
 *  restriction of 1 ip per item. .
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *signatureRrdatas;

/**
 *  The weight corresponding to this subset of rrdata. When multiple
 *  WeightedRoundRobinPolicyItems are configured, the probability of returning
 *  an rrset is proportional to its weight relative to the sum of weights
 *  configured for all items. This weight should be non-negative.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
