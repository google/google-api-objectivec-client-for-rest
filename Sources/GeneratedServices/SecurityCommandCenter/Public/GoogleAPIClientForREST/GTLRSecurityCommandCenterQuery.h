// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Security Command Center API (securitycenter/v1)
// Description:
//   Security Command Center API provides access to temporal views of assets and
//   findings within an organization.
// Documentation:
//   https://cloud.google.com/security-command-center

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSecurityCommandCenterObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Security Command Center query classes.
 */
@interface GTLRSecurityCommandCenterQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  Method: securitycenter.folders.assets.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersAssetsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the organization to groupBy. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupAssetsResponse.
 *
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupAssetsRequest to include
 *    in the query.
 *  @param parent Required. Name of the organization to groupBy. Its format is
 *    "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersAssetsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupAssetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization's assets.
 *
 *  Method: securitycenter.folders.assets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersAssetsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListAssetsResult's "state_change"
 *  attribute is updated to indicate whether the asset was added, removed, or
 *  remained present during the compare_duration period of time that precedes
 *  the read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence of the
 *  asset at the two points in time. Intermediate state changes between the two
 *  times don't affect the result. For example, the results aren't affected if
 *  the asset is removed and re-created again. Possible "state_change" values
 *  when compare_duration is specified: * "ADDED": indicates that the asset was
 *  not present at the start of compare_duration, but present at read_time. *
 *  "REMOVED": indicates that the asset was present at the start of
 *  compare_duration, but not present at read_time. * "ACTIVE": indicates that
 *  the asset was present at both the start and the end of the time period
 *  defined by compare_duration and read_time. If compare_duration is not
 *  specified, then the only possible state_change is "UNUSED", which will be
 *  the state_change set for all assets present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the ListAssetsResult fields to be listed in the
 *  response. An empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across assets. The expression is
 *  a list of zero or more restrictions combined via logical operators `AND` and
 *  `OR`. Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form ` ` and may have a `-` character in front of them
 *  to indicate negation. The fields map to those defined in the Asset resource.
 *  Examples include: * name * security_center_properties.resource_name *
 *  resource_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following are the
 *  allowed field and operator combinations: * name: `=` * update_time: `=`,
 *  `>`, `<`, `>=`, `<=` Usage: This should be milliseconds since epoch or an
 *  RFC3339 string. Examples: `update_time = "2019-06-10T16:07:18-07:00"`
 *  `update_time = 1560208038000` * create_time: `=`, `>`, `<`, `>=`, `<=`
 *  Usage: This should be milliseconds since epoch or an RFC3339 string.
 *  Examples: `create_time = "2019-06-10T16:07:18-07:00"` `create_time =
 *  1560208038000` * iam_policy.policy_blob: `=`, `:` * resource_properties:
 *  `=`, `:`, `>`, `<`, `>=`, `<=` * security_marks.marks: `=`, `:` *
 *  security_center_properties.resource_name: `=`, `:` *
 *  security_center_properties.resource_display_name: `=`, `:` *
 *  security_center_properties.resource_type: `=`, `:` *
 *  security_center_properties.resource_parent: `=`, `:` *
 *  security_center_properties.resource_parent_display_name: `=`, `:` *
 *  security_center_properties.resource_project: `=`, `:` *
 *  security_center_properties.resource_project_display_name: `=`, `:` *
 *  security_center_properties.resource_owners: `=`, `:` For example,
 *  `resource_properties.size = 100` is a valid filter string. Use a partial
 *  match on the empty string to filter based on a property existing:
 *  `resource_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-resource_properties.my_property : ""`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,resource_properties.a_property". Redundant space characters in the
 *  syntax are insignificant. "name desc,resource_properties.a_property" and "
 *  name desc , resource_properties.a_property " are equivalent. The following
 *  fields are supported: name update_time resource_properties
 *  security_marks.marks security_center_properties.resource_name
 *  security_center_properties.resource_display_name
 *  security_center_properties.resource_parent
 *  security_center_properties.resource_parent_display_name
 *  security_center_properties.resource_project
 *  security_center_properties.resource_project_display_name
 *  security_center_properties.resource_type
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListAssetsResponse`; indicates that this is
 *  a continuation of a prior `ListAssets` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization assets should belong to. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering assets. The filter is limited
 *  to assets existing at the supplied time and their values are those at that
 *  specific time. Absence of this field will default to the API's version of
 *  NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListAssetsResponse.
 *
 *  Lists an organization's assets.
 *
 *  @param parent Required. Name of the organization assets should belong to.
 *    Its format is "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersAssetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.folders.assets.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersAssetsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersAssetsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a big query export.
 *
 *  Method: securitycenter.folders.bigQueryExports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *bigQueryExportId;

/**
 *  Required. Resource name of the new big query export's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Creates a big query export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param parent Required. Resource name of the new big query export's parent.
 *    Its format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing big query export.
 *
 *  Method: securitycenter.folders.bigQueryExports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to delete. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing big query export.
 *
 *  @param name Required. Name of the big query export to delete. Its format is
 *    organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a big query export.
 *
 *  Method: securitycenter.folders.bigQueryExports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to retrieve. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Gets a big query export.
 *
 *  @param name Required. Name of the big query export to retrieve. Its format
 *    is organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  Method: securitycenter.folders.bigQueryExports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListBigQueryExports` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListBigQueryExports` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of BigQuery exports. Its
 *  format is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListBigQueryExportsResponse.
 *
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  @param parent Required. The parent, which owns the collection of BigQuery
 *    exports. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a BigQuery export.
 *
 *  Method: securitycenter.folders.bigQueryExports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this export. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *  Example format:
 *  "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *  format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *  "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *  in responses, and is ignored when provided in create requests.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Updates a BigQuery export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param name The relative resource name of this export. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *    Example format:
 *    "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *    format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *    "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *    in responses, and is ignored when provided in create requests.
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersBigQueryExportsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                           name:(NSString *)name;

@end

/**
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  Method: securitycenter.folders.findings.bulkMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersFindingsBulkMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The parent, at which bulk action needs to be applied. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  @param object The @c GTLRSecurityCommandCenter_BulkMuteFindingsRequest to
 *    include in the query.
 *  @param parent Required. The parent, at which bulk action needs to be
 *    applied. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersFindingsBulkMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_BulkMuteFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a mute config.
 *
 *  Method: securitycenter.folders.muteConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersMuteConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *muteConfigId;

/**
 *  Required. Resource name of the new mute configs's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Creates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new mute configs's parent. Its
 *    format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersMuteConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing mute config.
 *
 *  Method: securitycenter.folders.muteConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersMuteConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to delete. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing mute config.
 *
 *  @param name Required. Name of the mute config to delete. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersMuteConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a mute config.
 *
 *  Method: securitycenter.folders.muteConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersMuteConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to retrieve. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Gets a mute config.
 *
 *  @param name Required. Name of the mute config to retrieve. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersMuteConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists mute configs.
 *
 *  Method: securitycenter.folders.muteConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersMuteConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListMuteConfigs` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListMuteConfigs` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of mute configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListMuteConfigsResponse.
 *
 *  Lists mute configs.
 *
 *  @param parent Required. The parent, which owns the collection of mute
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersMuteConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a mute config.
 *
 *  Method: securitycenter.folders.muteConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersMuteConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  This field will be ignored if provided on config creation. Format
 *  "organizations/{organization}/muteConfigs/{mute_config}"
 *  "folders/{folder}/muteConfigs/{mute_config}"
 *  "projects/{project}/muteConfigs/{mute_config}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Updates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param name This field will be ignored if provided on config creation.
 *    Format "organizations/{organization}/muteConfigs/{mute_config}"
 *    "folders/{folder}/muteConfigs/{mute_config}"
 *    "projects/{project}/muteConfigs/{mute_config}"
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersMuteConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a notification config.
 *
 *  Method: securitycenter.folders.notificationConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must be between 1 and 128 characters, and contains alphanumeric
 *  characters, underscores or hyphens only.
 */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  Required. Resource name of the new notification config's parent. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Creates a notification config.
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new notification config's
 *    parent. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a notification config.
 *
 *  Method: securitycenter.folders.notificationConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to delete. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes a notification config.
 *
 *  @param name Required. Name of the notification config to delete. Its format
 *    is "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a notification config.
 *
 *  Method: securitycenter.folders.notificationConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to get. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Gets a notification config.
 *
 *  @param name Required. Name of the notification config to get. Its format is
 *    "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists notification configs.
 *
 *  Method: securitycenter.folders.notificationConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListNotificationConfigsResponse`; indicates
 *  that this is a continuation of a prior `ListNotificationConfigs` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization to list notification configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListNotificationConfigsResponse.
 *
 *  Lists notification configs.
 *
 *  @param parent Required. Name of the organization to list notification
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  Method: securitycenter.folders.notificationConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this notification config. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the notification config. If empty all
 *  mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param name The relative resource name of this notification config. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersNotificationConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Updates external system. This is for a given finding.
 *
 *  Method: securitycenter.folders.sources.findings.externalSystems.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsExternalSystemsPatch : GTLRSecurityCommandCenterQuery

/**
 *  External System Name e.g. jira, demisto, etc. e.g.:
 *  `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the external system resource. If empty
 *  all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem.
 *
 *  Updates external system. This is for a given finding.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem to
 *    include in the query.
 *  @param name External System Name e.g. jira, demisto, etc. e.g.:
 *    `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsExternalSystemsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem *)object
                           name:(NSString *)name;

@end

/**
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  Method: securitycenter.folders.sources.findings.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the source to groupBy. Its format is
 *  "organizations/[organization_id]/sources/[source_id]",
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-, or
 *  projects/{project_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupFindingsResponse.
 *
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupFindingsRequest to
 *    include in the query.
 *  @param parent Required. Name of the source to groupBy. Its format is
 *    "organizations/[organization_id]/sources/[source_id]",
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-,
 *    or projects/{project_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  Method: securitycenter.folders.sources.findings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListFindingsResult's "state_change"
 *  attribute is updated to indicate whether the finding had its state changed,
 *  the finding's state remained unchanged, or if the finding was added in any
 *  state during the compare_duration period of time that precedes the
 *  read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence and state
 *  of the finding at the two points in time. Intermediate state changes between
 *  the two times don't affect the result. For example, the results aren't
 *  affected if the finding is made inactive and then active again. Possible
 *  "state_change" values when compare_duration is specified: * "CHANGED":
 *  indicates that the finding was present and matched the given filter at the
 *  start of compare_duration, but changed its state at read_time. *
 *  "UNCHANGED": indicates that the finding was present and matched the given
 *  filter at the start of compare_duration and did not change state at
 *  read_time. * "ADDED": indicates that the finding did not match the given
 *  filter or was not present at the start of compare_duration, but was present
 *  at read_time. * "REMOVED": indicates that the finding was present and
 *  matched the filter at the start of compare_duration, but did not match the
 *  filter at read_time. If compare_duration is not specified, then the only
 *  possible state_change is "UNUSED", which will be the state_change set for
 *  all findings present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the Finding fields to be listed in the response. An
 *  empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across findings. The expression
 *  is a list of one or more restrictions combined via logical operators `AND`
 *  and `OR`. Parentheses are supported, and `OR` has higher precedence than
 *  `AND`. Restrictions have the form ` ` and may have a `-` character in front
 *  of them to indicate negation. Examples include: * name *
 *  source_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following field and
 *  operator combinations are supported: * name: `=` * parent: `=`, `:` *
 *  resource_name: `=`, `:` * state: `=`, `:` * category: `=`, `:` *
 *  external_uri: `=`, `:` * event_time: `=`, `>`, `<`, `>=`, `<=` Usage: This
 *  should be milliseconds since epoch or an RFC3339 string. Examples:
 *  `event_time = "2019-06-10T16:07:18-07:00"` `event_time = 1560208038000` *
 *  severity: `=`, `:` * workflow_state: `=`, `:` * security_marks.marks: `=`,
 *  `:` * source_properties: `=`, `:`, `>`, `<`, `>=`, `<=` For example,
 *  `source_properties.size = 100` is a valid filter string. Use a partial match
 *  on the empty string to filter based on a property existing:
 *  `source_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-source_properties.my_property : ""` * resource: * resource.name: `=`, `:`
 *  * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` *
 *  resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` *
 *  resource.type: `=`, `:` * resource.folders.resource_folder: `=`, `:` *
 *  resource.display_name: `=`, `:`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,source_properties.a_property". Redundant space characters in the syntax
 *  are insignificant. "name desc,source_properties.a_property" and " name desc
 *  , source_properties.a_property " are equivalent. The following fields are
 *  supported: name parent state category resource_name event_time
 *  source_properties security_marks.marks
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListFindingsResponse`; indicates that this
 *  is a continuation of a prior `ListFindings` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the source the findings belong to. Its format is
 *  "organizations/[organization_id]/sources/[source_id],
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]". To list across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/- or
 *  projects/{projects_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering findings. The filter is
 *  limited to findings existing at the supplied time and their values are those
 *  at that specific time. Absence of this field will default to the API's
 *  version of NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListFindingsResponse.
 *
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  @param parent Required. Name of the source the findings belong to. Its
 *    format is "organizations/[organization_id]/sources/[source_id],
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]". To list across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-
 *    or projects/{projects_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  Method: securitycenter.folders.sources.findings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the finding resource. This field should
 *  not be specified when creating a finding. When updating a finding, an empty
 *  mask is treated as updating all mutable fields and replacing
 *  source_properties. Individual source_properties can be added/updated by
 *  using "source_properties." in the field mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param name The relative resource name of this finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the mute state of a finding.
 *
 *  Method: securitycenter.folders.sources.findings.setMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsSetMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *  "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *  "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the mute state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetMuteRequest to include in
 *    the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *    "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *    "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsSetMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetMuteRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the state of a finding.
 *
 *  Method: securitycenter.folders.sources.findings.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsSetState : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetFindingStateRequest to
 *    include in the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsSetState
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetFindingStateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.folders.sources.findings.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesFindingsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Lists all sources belonging to an organization.
 *
 *  Method: securitycenter.folders.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_FoldersSourcesList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSourcesResponse`; indicates that this is
 *  a continuation of a prior `ListSources` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the parent of sources to list. Its format should
 *  be "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListSourcesResponse.
 *
 *  Lists all sources belonging to an organization.
 *
 *  @param parent Required. Resource name of the parent of sources to list. Its
 *    format should be "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_FoldersSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  Method: securitycenter.organizations.assets.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the organization to groupBy. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupAssetsResponse.
 *
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupAssetsRequest to include
 *    in the query.
 *  @param parent Required. Name of the organization to groupBy. Its format is
 *    "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupAssetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization's assets.
 *
 *  Method: securitycenter.organizations.assets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListAssetsResult's "state_change"
 *  attribute is updated to indicate whether the asset was added, removed, or
 *  remained present during the compare_duration period of time that precedes
 *  the read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence of the
 *  asset at the two points in time. Intermediate state changes between the two
 *  times don't affect the result. For example, the results aren't affected if
 *  the asset is removed and re-created again. Possible "state_change" values
 *  when compare_duration is specified: * "ADDED": indicates that the asset was
 *  not present at the start of compare_duration, but present at read_time. *
 *  "REMOVED": indicates that the asset was present at the start of
 *  compare_duration, but not present at read_time. * "ACTIVE": indicates that
 *  the asset was present at both the start and the end of the time period
 *  defined by compare_duration and read_time. If compare_duration is not
 *  specified, then the only possible state_change is "UNUSED", which will be
 *  the state_change set for all assets present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the ListAssetsResult fields to be listed in the
 *  response. An empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across assets. The expression is
 *  a list of zero or more restrictions combined via logical operators `AND` and
 *  `OR`. Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form ` ` and may have a `-` character in front of them
 *  to indicate negation. The fields map to those defined in the Asset resource.
 *  Examples include: * name * security_center_properties.resource_name *
 *  resource_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following are the
 *  allowed field and operator combinations: * name: `=` * update_time: `=`,
 *  `>`, `<`, `>=`, `<=` Usage: This should be milliseconds since epoch or an
 *  RFC3339 string. Examples: `update_time = "2019-06-10T16:07:18-07:00"`
 *  `update_time = 1560208038000` * create_time: `=`, `>`, `<`, `>=`, `<=`
 *  Usage: This should be milliseconds since epoch or an RFC3339 string.
 *  Examples: `create_time = "2019-06-10T16:07:18-07:00"` `create_time =
 *  1560208038000` * iam_policy.policy_blob: `=`, `:` * resource_properties:
 *  `=`, `:`, `>`, `<`, `>=`, `<=` * security_marks.marks: `=`, `:` *
 *  security_center_properties.resource_name: `=`, `:` *
 *  security_center_properties.resource_display_name: `=`, `:` *
 *  security_center_properties.resource_type: `=`, `:` *
 *  security_center_properties.resource_parent: `=`, `:` *
 *  security_center_properties.resource_parent_display_name: `=`, `:` *
 *  security_center_properties.resource_project: `=`, `:` *
 *  security_center_properties.resource_project_display_name: `=`, `:` *
 *  security_center_properties.resource_owners: `=`, `:` For example,
 *  `resource_properties.size = 100` is a valid filter string. Use a partial
 *  match on the empty string to filter based on a property existing:
 *  `resource_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-resource_properties.my_property : ""`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,resource_properties.a_property". Redundant space characters in the
 *  syntax are insignificant. "name desc,resource_properties.a_property" and "
 *  name desc , resource_properties.a_property " are equivalent. The following
 *  fields are supported: name update_time resource_properties
 *  security_marks.marks security_center_properties.resource_name
 *  security_center_properties.resource_display_name
 *  security_center_properties.resource_parent
 *  security_center_properties.resource_parent_display_name
 *  security_center_properties.resource_project
 *  security_center_properties.resource_project_display_name
 *  security_center_properties.resource_type
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListAssetsResponse`; indicates that this is
 *  a continuation of a prior `ListAssets` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization assets should belong to. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering assets. The filter is limited
 *  to assets existing at the supplied time and their values are those at that
 *  specific time. Absence of this field will default to the API's version of
 *  NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListAssetsResponse.
 *
 *  Lists an organization's assets.
 *
 *  @param parent Required. Name of the organization assets should belong to.
 *    Its format is "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Runs asset discovery. The discovery is tracked with a long-running
 *  operation. This API can only be called with limited frequency for an
 *  organization. If it is called too frequently the caller will receive a
 *  TOO_MANY_REQUESTS error.
 *
 *  Method: securitycenter.organizations.assets.runDiscovery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the organization to run asset discovery for. Its format is
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Runs asset discovery. The discovery is tracked with a long-running
 *  operation. This API can only be called with limited frequency for an
 *  organization. If it is called too frequently the caller will receive a
 *  TOO_MANY_REQUESTS error.
 *
 *  @param object The @c GTLRSecurityCommandCenter_RunAssetDiscoveryRequest to
 *    include in the query.
 *  @param parent Required. Name of the organization to run asset discovery for.
 *    Its format is "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsRunDiscovery
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_RunAssetDiscoveryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.organizations.assets.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsAssetsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a big query export.
 *
 *  Method: securitycenter.organizations.bigQueryExports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *bigQueryExportId;

/**
 *  Required. Resource name of the new big query export's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Creates a big query export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param parent Required. Resource name of the new big query export's parent.
 *    Its format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing big query export.
 *
 *  Method: securitycenter.organizations.bigQueryExports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to delete. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing big query export.
 *
 *  @param name Required. Name of the big query export to delete. Its format is
 *    organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a big query export.
 *
 *  Method: securitycenter.organizations.bigQueryExports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to retrieve. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Gets a big query export.
 *
 *  @param name Required. Name of the big query export to retrieve. Its format
 *    is organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  Method: securitycenter.organizations.bigQueryExports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListBigQueryExports` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListBigQueryExports` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of BigQuery exports. Its
 *  format is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListBigQueryExportsResponse.
 *
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  @param parent Required. The parent, which owns the collection of BigQuery
 *    exports. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a BigQuery export.
 *
 *  Method: securitycenter.organizations.bigQueryExports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this export. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *  Example format:
 *  "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *  format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *  "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *  in responses, and is ignored when provided in create requests.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Updates a BigQuery export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param name The relative resource name of this export. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *    Example format:
 *    "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *    format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *    "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *    in responses, and is ignored when provided in create requests.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsBigQueryExportsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                           name:(NSString *)name;

@end

/**
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  Method: securitycenter.organizations.findings.bulkMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsFindingsBulkMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The parent, at which bulk action needs to be applied. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  @param object The @c GTLRSecurityCommandCenter_BulkMuteFindingsRequest to
 *    include in the query.
 *  @param parent Required. The parent, at which bulk action needs to be
 *    applied. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsFindingsBulkMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_BulkMuteFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the settings for an organization.
 *
 *  Method: securitycenter.organizations.getOrganizationSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the organization to get organization settings for. Its
 *  format is "organizations/[organization_id]/organizationSettings".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_OrganizationSettings.
 *
 *  Gets the settings for an organization.
 *
 *  @param name Required. Name of the organization to get organization settings
 *    for. Its format is "organizations/[organization_id]/organizationSettings".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsGetOrganizationSettings
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a mute config.
 *
 *  Method: securitycenter.organizations.muteConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *muteConfigId;

/**
 *  Required. Resource name of the new mute configs's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Creates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new mute configs's parent. Its
 *    format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing mute config.
 *
 *  Method: securitycenter.organizations.muteConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to delete. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing mute config.
 *
 *  @param name Required. Name of the mute config to delete. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a mute config.
 *
 *  Method: securitycenter.organizations.muteConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to retrieve. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Gets a mute config.
 *
 *  @param name Required. Name of the mute config to retrieve. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists mute configs.
 *
 *  Method: securitycenter.organizations.muteConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListMuteConfigs` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListMuteConfigs` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of mute configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListMuteConfigsResponse.
 *
 *  Lists mute configs.
 *
 *  @param parent Required. The parent, which owns the collection of mute
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a mute config.
 *
 *  Method: securitycenter.organizations.muteConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  This field will be ignored if provided on config creation. Format
 *  "organizations/{organization}/muteConfigs/{mute_config}"
 *  "folders/{folder}/muteConfigs/{mute_config}"
 *  "projects/{project}/muteConfigs/{mute_config}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Updates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param name This field will be ignored if provided on config creation.
 *    Format "organizations/{organization}/muteConfigs/{mute_config}"
 *    "folders/{folder}/muteConfigs/{mute_config}"
 *    "projects/{project}/muteConfigs/{mute_config}"
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsMuteConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a notification config.
 *
 *  Method: securitycenter.organizations.notificationConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must be between 1 and 128 characters, and contains alphanumeric
 *  characters, underscores or hyphens only.
 */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  Required. Resource name of the new notification config's parent. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Creates a notification config.
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new notification config's
 *    parent. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a notification config.
 *
 *  Method: securitycenter.organizations.notificationConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to delete. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes a notification config.
 *
 *  @param name Required. Name of the notification config to delete. Its format
 *    is "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a notification config.
 *
 *  Method: securitycenter.organizations.notificationConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to get. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Gets a notification config.
 *
 *  @param name Required. Name of the notification config to get. Its format is
 *    "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists notification configs.
 *
 *  Method: securitycenter.organizations.notificationConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListNotificationConfigsResponse`; indicates
 *  that this is a continuation of a prior `ListNotificationConfigs` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization to list notification configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListNotificationConfigsResponse.
 *
 *  Lists notification configs.
 *
 *  @param parent Required. Name of the organization to list notification
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  Method: securitycenter.organizations.notificationConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this notification config. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the notification config. If empty all
 *  mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param name The relative resource name of this notification config. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsNotificationConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: securitycenter.organizations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel : GTLRSecurityCommandCenterQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: securitycenter.organizations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete : GTLRSecurityCommandCenterQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: securitycenter.organizations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet : GTLRSecurityCommandCenterQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: securitycenter.organizations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsOperationsList : GTLRSecurityCommandCenterQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a source.
 *
 *  Method: securitycenter.organizations.sources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Resource name of the new source's parent. Its format should be
 *  "organizations/[organization_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Creates a source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Source to include in the
 *    query.
 *  @param parent Required. Resource name of the new source's parent. Its format
 *    should be "organizations/[organization_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a finding. The corresponding source must exist for finding creation
 *  to succeed.
 *
 *  Method: securitycenter.organizations.sources.findings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must be alphanumeric and less than or equal to 32 characters and greater
 *  than 0 characters in length.
 */
@property(nonatomic, copy, nullable) NSString *findingId;

/**
 *  Required. Resource name of the new finding's parent. Its format should be
 *  "organizations/[organization_id]/sources/[source_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates a finding. The corresponding source must exist for finding creation
 *  to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param parent Required. Resource name of the new finding's parent. Its
 *    format should be "organizations/[organization_id]/sources/[source_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates external system. This is for a given finding.
 *
 *  Method: securitycenter.organizations.sources.findings.externalSystems.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsExternalSystemsPatch : GTLRSecurityCommandCenterQuery

/**
 *  External System Name e.g. jira, demisto, etc. e.g.:
 *  `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the external system resource. If empty
 *  all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem.
 *
 *  Updates external system. This is for a given finding.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem to
 *    include in the query.
 *  @param name External System Name e.g. jira, demisto, etc. e.g.:
 *    `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsExternalSystemsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem *)object
                           name:(NSString *)name;

@end

/**
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  Method: securitycenter.organizations.sources.findings.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the source to groupBy. Its format is
 *  "organizations/[organization_id]/sources/[source_id]",
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-, or
 *  projects/{project_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupFindingsResponse.
 *
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupFindingsRequest to
 *    include in the query.
 *  @param parent Required. Name of the source to groupBy. Its format is
 *    "organizations/[organization_id]/sources/[source_id]",
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-,
 *    or projects/{project_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  Method: securitycenter.organizations.sources.findings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListFindingsResult's "state_change"
 *  attribute is updated to indicate whether the finding had its state changed,
 *  the finding's state remained unchanged, or if the finding was added in any
 *  state during the compare_duration period of time that precedes the
 *  read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence and state
 *  of the finding at the two points in time. Intermediate state changes between
 *  the two times don't affect the result. For example, the results aren't
 *  affected if the finding is made inactive and then active again. Possible
 *  "state_change" values when compare_duration is specified: * "CHANGED":
 *  indicates that the finding was present and matched the given filter at the
 *  start of compare_duration, but changed its state at read_time. *
 *  "UNCHANGED": indicates that the finding was present and matched the given
 *  filter at the start of compare_duration and did not change state at
 *  read_time. * "ADDED": indicates that the finding did not match the given
 *  filter or was not present at the start of compare_duration, but was present
 *  at read_time. * "REMOVED": indicates that the finding was present and
 *  matched the filter at the start of compare_duration, but did not match the
 *  filter at read_time. If compare_duration is not specified, then the only
 *  possible state_change is "UNUSED", which will be the state_change set for
 *  all findings present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the Finding fields to be listed in the response. An
 *  empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across findings. The expression
 *  is a list of one or more restrictions combined via logical operators `AND`
 *  and `OR`. Parentheses are supported, and `OR` has higher precedence than
 *  `AND`. Restrictions have the form ` ` and may have a `-` character in front
 *  of them to indicate negation. Examples include: * name *
 *  source_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following field and
 *  operator combinations are supported: * name: `=` * parent: `=`, `:` *
 *  resource_name: `=`, `:` * state: `=`, `:` * category: `=`, `:` *
 *  external_uri: `=`, `:` * event_time: `=`, `>`, `<`, `>=`, `<=` Usage: This
 *  should be milliseconds since epoch or an RFC3339 string. Examples:
 *  `event_time = "2019-06-10T16:07:18-07:00"` `event_time = 1560208038000` *
 *  severity: `=`, `:` * workflow_state: `=`, `:` * security_marks.marks: `=`,
 *  `:` * source_properties: `=`, `:`, `>`, `<`, `>=`, `<=` For example,
 *  `source_properties.size = 100` is a valid filter string. Use a partial match
 *  on the empty string to filter based on a property existing:
 *  `source_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-source_properties.my_property : ""` * resource: * resource.name: `=`, `:`
 *  * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` *
 *  resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` *
 *  resource.type: `=`, `:` * resource.folders.resource_folder: `=`, `:` *
 *  resource.display_name: `=`, `:`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,source_properties.a_property". Redundant space characters in the syntax
 *  are insignificant. "name desc,source_properties.a_property" and " name desc
 *  , source_properties.a_property " are equivalent. The following fields are
 *  supported: name parent state category resource_name event_time
 *  source_properties security_marks.marks
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListFindingsResponse`; indicates that this
 *  is a continuation of a prior `ListFindings` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the source the findings belong to. Its format is
 *  "organizations/[organization_id]/sources/[source_id],
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]". To list across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/- or
 *  projects/{projects_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering findings. The filter is
 *  limited to findings existing at the supplied time and their values are those
 *  at that specific time. Absence of this field will default to the API's
 *  version of NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListFindingsResponse.
 *
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  @param parent Required. Name of the source the findings belong to. Its
 *    format is "organizations/[organization_id]/sources/[source_id],
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]". To list across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-
 *    or projects/{projects_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  Method: securitycenter.organizations.sources.findings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the finding resource. This field should
 *  not be specified when creating a finding. When updating a finding, an empty
 *  mask is treated as updating all mutable fields and replacing
 *  source_properties. Individual source_properties can be added/updated by
 *  using "source_properties." in the field mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param name The relative resource name of this finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the mute state of a finding.
 *
 *  Method: securitycenter.organizations.sources.findings.setMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *  "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *  "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the mute state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetMuteRequest to include in
 *    the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *    "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *    "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetMuteRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the state of a finding.
 *
 *  Method: securitycenter.organizations.sources.findings.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetFindingStateRequest to
 *    include in the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsSetState
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetFindingStateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.organizations.sources.findings.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesFindingsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a source.
 *
 *  Method: securitycenter.organizations.sources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Relative resource name of the source. Its format is
 *  "organizations/[organization_id]/source/[source_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Gets a source.
 *
 *  @param name Required. Relative resource name of the source. Its format is
 *    "organizations/[organization_id]/source/[source_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy on the specified Source.
 *
 *  Method: securitycenter.organizations.sources.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy : GTLRSecurityCommandCenterQuery

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Policy.
 *
 *  Gets the access control policy on the specified Source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all sources belonging to an organization.
 *
 *  Method: securitycenter.organizations.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSourcesResponse`; indicates that this is
 *  a continuation of a prior `ListSources` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the parent of sources to list. Its format should
 *  be "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListSourcesResponse.
 *
 *  Lists all sources belonging to an organization.
 *
 *  @param parent Required. Resource name of the parent of sources to list. Its
 *    format should be "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a source.
 *
 *  Method: securitycenter.organizations.sources.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this source. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example: "organizations/{organization_id}/sources/{source_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the source resource. If empty all mutable
 *  fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Source.
 *
 *  Updates a source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Source to include in the
 *    query.
 *  @param name The relative resource name of this source. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example: "organizations/{organization_id}/sources/{source_id}"
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Source *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified Source.
 *
 *  Method: securitycenter.organizations.sources.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy : GTLRSecurityCommandCenterQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Policy.
 *
 *  Sets the access control policy on the specified Source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns the permissions that a caller has on the specified source.
 *
 *  Method: securitycenter.organizations.sources.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions : GTLRSecurityCommandCenterQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_TestIamPermissionsResponse.
 *
 *  Returns the permissions that a caller has on the specified source.
 *
 *  @param object The @c GTLRSecurityCommandCenter_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsSourcesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates an organization's settings.
 *
 *  Method: securitycenter.organizations.updateOrganizationSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the settings. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example: "organizations/{organization_id}/organizationSettings".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the settings resource. If empty all
 *  mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_OrganizationSettings.
 *
 *  Updates an organization's settings.
 *
 *  @param object The @c GTLRSecurityCommandCenter_OrganizationSettings to
 *    include in the query.
 *  @param name The relative resource name of the settings. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example: "organizations/{organization_id}/organizationSettings".
 *
 *  @return GTLRSecurityCommandCenterQuery_OrganizationsUpdateOrganizationSettings
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_OrganizationSettings *)object
                           name:(NSString *)name;

@end

/**
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  Method: securitycenter.projects.assets.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsAssetsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the organization to groupBy. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupAssetsResponse.
 *
 *  Filters an organization's assets and groups them by their specified
 *  properties.
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupAssetsRequest to include
 *    in the query.
 *  @param parent Required. Name of the organization to groupBy. Its format is
 *    "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsAssetsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupAssetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization's assets.
 *
 *  Method: securitycenter.projects.assets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsAssetsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListAssetsResult's "state_change"
 *  attribute is updated to indicate whether the asset was added, removed, or
 *  remained present during the compare_duration period of time that precedes
 *  the read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence of the
 *  asset at the two points in time. Intermediate state changes between the two
 *  times don't affect the result. For example, the results aren't affected if
 *  the asset is removed and re-created again. Possible "state_change" values
 *  when compare_duration is specified: * "ADDED": indicates that the asset was
 *  not present at the start of compare_duration, but present at read_time. *
 *  "REMOVED": indicates that the asset was present at the start of
 *  compare_duration, but not present at read_time. * "ACTIVE": indicates that
 *  the asset was present at both the start and the end of the time period
 *  defined by compare_duration and read_time. If compare_duration is not
 *  specified, then the only possible state_change is "UNUSED", which will be
 *  the state_change set for all assets present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the ListAssetsResult fields to be listed in the
 *  response. An empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across assets. The expression is
 *  a list of zero or more restrictions combined via logical operators `AND` and
 *  `OR`. Parentheses are supported, and `OR` has higher precedence than `AND`.
 *  Restrictions have the form ` ` and may have a `-` character in front of them
 *  to indicate negation. The fields map to those defined in the Asset resource.
 *  Examples include: * name * security_center_properties.resource_name *
 *  resource_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following are the
 *  allowed field and operator combinations: * name: `=` * update_time: `=`,
 *  `>`, `<`, `>=`, `<=` Usage: This should be milliseconds since epoch or an
 *  RFC3339 string. Examples: `update_time = "2019-06-10T16:07:18-07:00"`
 *  `update_time = 1560208038000` * create_time: `=`, `>`, `<`, `>=`, `<=`
 *  Usage: This should be milliseconds since epoch or an RFC3339 string.
 *  Examples: `create_time = "2019-06-10T16:07:18-07:00"` `create_time =
 *  1560208038000` * iam_policy.policy_blob: `=`, `:` * resource_properties:
 *  `=`, `:`, `>`, `<`, `>=`, `<=` * security_marks.marks: `=`, `:` *
 *  security_center_properties.resource_name: `=`, `:` *
 *  security_center_properties.resource_display_name: `=`, `:` *
 *  security_center_properties.resource_type: `=`, `:` *
 *  security_center_properties.resource_parent: `=`, `:` *
 *  security_center_properties.resource_parent_display_name: `=`, `:` *
 *  security_center_properties.resource_project: `=`, `:` *
 *  security_center_properties.resource_project_display_name: `=`, `:` *
 *  security_center_properties.resource_owners: `=`, `:` For example,
 *  `resource_properties.size = 100` is a valid filter string. Use a partial
 *  match on the empty string to filter based on a property existing:
 *  `resource_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-resource_properties.my_property : ""`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,resource_properties.a_property". Redundant space characters in the
 *  syntax are insignificant. "name desc,resource_properties.a_property" and "
 *  name desc , resource_properties.a_property " are equivalent. The following
 *  fields are supported: name update_time resource_properties
 *  security_marks.marks security_center_properties.resource_name
 *  security_center_properties.resource_display_name
 *  security_center_properties.resource_parent
 *  security_center_properties.resource_parent_display_name
 *  security_center_properties.resource_project
 *  security_center_properties.resource_project_display_name
 *  security_center_properties.resource_type
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListAssetsResponse`; indicates that this is
 *  a continuation of a prior `ListAssets` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization assets should belong to. Its format is
 *  "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering assets. The filter is limited
 *  to assets existing at the supplied time and their values are those at that
 *  specific time. Absence of this field will default to the API's version of
 *  NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListAssetsResponse.
 *
 *  Lists an organization's assets.
 *
 *  @param parent Required. Name of the organization assets should belong to.
 *    Its format is "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsAssetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.projects.assets.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsAssetsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsAssetsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a big query export.
 *
 *  Method: securitycenter.projects.bigQueryExports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *bigQueryExportId;

/**
 *  Required. Resource name of the new big query export's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Creates a big query export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param parent Required. Resource name of the new big query export's parent.
 *    Its format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing big query export.
 *
 *  Method: securitycenter.projects.bigQueryExports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to delete. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing big query export.
 *
 *  @param name Required. Name of the big query export to delete. Its format is
 *    organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a big query export.
 *
 *  Method: securitycenter.projects.bigQueryExports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the big query export to retrieve. Its format is
 *  organizations/{organization}/bigQueryExports/{export_id},
 *  folders/{folder}/bigQueryExports/{export_id}, or
 *  projects/{project}/bigQueryExports/{export_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Gets a big query export.
 *
 *  @param name Required. Name of the big query export to retrieve. Its format
 *    is organizations/{organization}/bigQueryExports/{export_id},
 *    folders/{folder}/bigQueryExports/{export_id}, or
 *    projects/{project}/bigQueryExports/{export_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  Method: securitycenter.projects.bigQueryExports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListBigQueryExports` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListBigQueryExports` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of BigQuery exports. Its
 *  format is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListBigQueryExportsResponse.
 *
 *  Lists BigQuery exports. Note that when requesting BigQuery exports at a
 *  given level all exports under that level are also returned e.g. if
 *  requesting BigQuery exports under a folder, then all BigQuery exports
 *  immediately under the folder plus the ones created under the projects within
 *  the folder are returned.
 *
 *  @param parent Required. The parent, which owns the collection of BigQuery
 *    exports. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a BigQuery export.
 *
 *  Method: securitycenter.projects.bigQueryExports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this export. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *  Example format:
 *  "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *  format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *  "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *  in responses, and is ignored when provided in create requests.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport.
 *
 *  Updates a BigQuery export.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport to
 *    include in the query.
 *  @param name The relative resource name of this export. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name.
 *    Example format:
 *    "organizations/{organization_id}/bigQueryExports/{export_id}" Example
 *    format: "folders/{folder_id}/bigQueryExports/{export_id}" Example format:
 *    "projects/{project_id}/bigQueryExports/{export_id}" This field is provided
 *    in responses, and is ignored when provided in create requests.
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsBigQueryExportsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1BigQueryExport *)object
                           name:(NSString *)name;

@end

/**
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  Method: securitycenter.projects.findings.bulkMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsFindingsBulkMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The parent, at which bulk action needs to be applied. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Operation.
 *
 *  Kicks off an LRO to bulk mute findings for a parent based on a filter. The
 *  parent can be either an organization, folder or project. The findings
 *  matched by the filter will be muted after the LRO is done.
 *
 *  @param object The @c GTLRSecurityCommandCenter_BulkMuteFindingsRequest to
 *    include in the query.
 *  @param parent Required. The parent, at which bulk action needs to be
 *    applied. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsFindingsBulkMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_BulkMuteFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a mute config.
 *
 *  Method: securitycenter.projects.muteConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must consist of lower case letters, numbers, and hyphen, with the first
 *  character a letter, the last a letter or a number, and a 63 character
 *  maximum.
 */
@property(nonatomic, copy, nullable) NSString *muteConfigId;

/**
 *  Required. Resource name of the new mute configs's parent. Its format is
 *  "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Creates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new mute configs's parent. Its
 *    format is "organizations/[organization_id]", "folders/[folder_id]", or
 *    "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing mute config.
 *
 *  Method: securitycenter.projects.muteConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to delete. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes an existing mute config.
 *
 *  @param name Required. Name of the mute config to delete. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a mute config.
 *
 *  Method: securitycenter.projects.muteConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the mute config to retrieve. Its format is
 *  organizations/{organization}/muteConfigs/{config_id},
 *  folders/{folder}/muteConfigs/{config_id}, or
 *  projects/{project}/muteConfigs/{config_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Gets a mute config.
 *
 *  @param name Required. Name of the mute config to retrieve. Its format is
 *    organizations/{organization}/muteConfigs/{config_id},
 *    folders/{folder}/muteConfigs/{config_id}, or
 *    projects/{project}/muteConfigs/{config_id}
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists mute configs.
 *
 *  Method: securitycenter.projects.muteConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 10 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListMuteConfigs` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListMuteConfigs` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns the collection of mute configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]",
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListMuteConfigsResponse.
 *
 *  Lists mute configs.
 *
 *  @param parent Required. The parent, which owns the collection of mute
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a mute config.
 *
 *  Method: securitycenter.projects.muteConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  This field will be ignored if provided on config creation. Format
 *  "organizations/{organization}/muteConfigs/{mute_config}"
 *  "folders/{folder}/muteConfigs/{mute_config}"
 *  "projects/{project}/muteConfigs/{mute_config}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. If empty all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig.
 *
 *  Updates a mute config.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig to include
 *    in the query.
 *  @param name This field will be ignored if provided on config creation.
 *    Format "organizations/{organization}/muteConfigs/{mute_config}"
 *    "folders/{folder}/muteConfigs/{mute_config}"
 *    "projects/{project}/muteConfigs/{mute_config}"
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsMuteConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1MuteConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a notification config.
 *
 *  Method: securitycenter.projects.notificationConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsCreate : GTLRSecurityCommandCenterQuery

/**
 *  Required. Unique identifier provided by the client within the parent scope.
 *  It must be between 1 and 128 characters, and contains alphanumeric
 *  characters, underscores or hyphens only.
 */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  Required. Resource name of the new notification config's parent. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Creates a notification config.
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param parent Required. Resource name of the new notification config's
 *    parent. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a notification config.
 *
 *  Method: securitycenter.projects.notificationConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsDelete : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to delete. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Empty.
 *
 *  Deletes a notification config.
 *
 *  @param name Required. Name of the notification config to delete. Its format
 *    is "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a notification config.
 *
 *  Method: securitycenter.projects.notificationConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsGet : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the notification config to get. Its format is
 *  "organizations/[organization_id]/notificationConfigs/[config_id]".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Gets a notification config.
 *
 *  @param name Required. Name of the notification config to get. Its format is
 *    "organizations/[organization_id]/notificationConfigs/[config_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists notification configs.
 *
 *  Method: securitycenter.projects.notificationConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListNotificationConfigsResponse`; indicates
 *  that this is a continuation of a prior `ListNotificationConfigs` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization to list notification configs. Its format
 *  is "organizations/[organization_id]", "folders/[folder_id]", or
 *  "projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListNotificationConfigsResponse.
 *
 *  Lists notification configs.
 *
 *  @param parent Required. Name of the organization to list notification
 *    configs. Its format is "organizations/[organization_id]",
 *    "folders/[folder_id]", or "projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  Method: securitycenter.projects.notificationConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this notification config. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the notification config. If empty all
 *  mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_NotificationConfig.
 *
 *  Updates a notification config. The following update fields are allowed:
 *  description, pubsub_topic, streaming_config.filter
 *
 *  @param object The @c GTLRSecurityCommandCenter_NotificationConfig to include
 *    in the query.
 *  @param name The relative resource name of this notification config. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsNotificationConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_NotificationConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Updates external system. This is for a given finding.
 *
 *  Method: securitycenter.projects.sources.findings.externalSystems.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsExternalSystemsPatch : GTLRSecurityCommandCenterQuery

/**
 *  External System Name e.g. jira, demisto, etc. e.g.:
 *  `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *  `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the external system resource. If empty
 *  all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem.
 *
 *  Updates external system. This is for a given finding.
 *
 *  @param object The @c
 *    GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem to
 *    include in the query.
 *  @param name External System Name e.g. jira, demisto, etc. e.g.:
 *    `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `folders/1234/sources/5678/findings/123456/externalSystems/jira`
 *    `projects/1234/sources/5678/findings/123456/externalSystems/jira`
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsExternalSystemsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GoogleCloudSecuritycenterV1ExternalSystem *)object
                           name:(NSString *)name;

@end

/**
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  Method: securitycenter.projects.sources.findings.group
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsGroup : GTLRSecurityCommandCenterQuery

/**
 *  Required. Name of the source to groupBy. Its format is
 *  "organizations/[organization_id]/sources/[source_id]",
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-, or
 *  projects/{project_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_GroupFindingsResponse.
 *
 *  Filters an organization or source's findings and groups them by their
 *  specified properties. To group across all sources provide a `-` as the
 *  source id. Example: /v1/organizations/{organization_id}/sources/-/findings,
 *  /v1/folders/{folder_id}/sources/-/findings,
 *  /v1/projects/{project_id}/sources/-/findings
 *
 *  @param object The @c GTLRSecurityCommandCenter_GroupFindingsRequest to
 *    include in the query.
 *  @param parent Required. Name of the source to groupBy. Its format is
 *    "organizations/[organization_id]/sources/[source_id]",
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]. To groupBy across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-,
 *    or projects/{project_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsGroup
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_GroupFindingsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  Method: securitycenter.projects.sources.findings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsList : GTLRSecurityCommandCenterQuery

/**
 *  When compare_duration is set, the ListFindingsResult's "state_change"
 *  attribute is updated to indicate whether the finding had its state changed,
 *  the finding's state remained unchanged, or if the finding was added in any
 *  state during the compare_duration period of time that precedes the
 *  read_time. This is the time between (read_time - compare_duration) and
 *  read_time. The state_change value is derived based on the presence and state
 *  of the finding at the two points in time. Intermediate state changes between
 *  the two times don't affect the result. For example, the results aren't
 *  affected if the finding is made inactive and then active again. Possible
 *  "state_change" values when compare_duration is specified: * "CHANGED":
 *  indicates that the finding was present and matched the given filter at the
 *  start of compare_duration, but changed its state at read_time. *
 *  "UNCHANGED": indicates that the finding was present and matched the given
 *  filter at the start of compare_duration and did not change state at
 *  read_time. * "ADDED": indicates that the finding did not match the given
 *  filter or was not present at the start of compare_duration, but was present
 *  at read_time. * "REMOVED": indicates that the finding was present and
 *  matched the filter at the start of compare_duration, but did not match the
 *  filter at read_time. If compare_duration is not specified, then the only
 *  possible state_change is "UNUSED", which will be the state_change set for
 *  all findings present at read_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *compareDuration;

/**
 *  A field mask to specify the Finding fields to be listed in the response. An
 *  empty field mask will list all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Expression that defines the filter to apply across findings. The expression
 *  is a list of one or more restrictions combined via logical operators `AND`
 *  and `OR`. Parentheses are supported, and `OR` has higher precedence than
 *  `AND`. Restrictions have the form ` ` and may have a `-` character in front
 *  of them to indicate negation. Examples include: * name *
 *  source_properties.a_property * security_marks.marks.marka The supported
 *  operators are: * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer
 *  values. * `:`, meaning substring matching, for strings. The supported value
 *  types are: * string literals in quotes. * integer literals without quotes. *
 *  boolean literals `true` and `false` without quotes. The following field and
 *  operator combinations are supported: * name: `=` * parent: `=`, `:` *
 *  resource_name: `=`, `:` * state: `=`, `:` * category: `=`, `:` *
 *  external_uri: `=`, `:` * event_time: `=`, `>`, `<`, `>=`, `<=` Usage: This
 *  should be milliseconds since epoch or an RFC3339 string. Examples:
 *  `event_time = "2019-06-10T16:07:18-07:00"` `event_time = 1560208038000` *
 *  severity: `=`, `:` * workflow_state: `=`, `:` * security_marks.marks: `=`,
 *  `:` * source_properties: `=`, `:`, `>`, `<`, `>=`, `<=` For example,
 *  `source_properties.size = 100` is a valid filter string. Use a partial match
 *  on the empty string to filter based on a property existing:
 *  `source_properties.my_property : ""` Use a negated partial match on the
 *  empty string to filter based on a property not existing:
 *  `-source_properties.my_property : ""` * resource: * resource.name: `=`, `:`
 *  * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` *
 *  resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` *
 *  resource.type: `=`, `:` * resource.folders.resource_folder: `=`, `:` *
 *  resource.display_name: `=`, `:`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Expression that defines what fields and order to use for sorting. The string
 *  value should follow SQL syntax: comma separated list of fields. For example:
 *  "name,resource_properties.a_property". The default sorting order is
 *  ascending. To specify descending order for a field, a suffix " desc" should
 *  be appended to the field name. For example: "name
 *  desc,source_properties.a_property". Redundant space characters in the syntax
 *  are insignificant. "name desc,source_properties.a_property" and " name desc
 *  , source_properties.a_property " are equivalent. The following fields are
 *  supported: name parent state category resource_name event_time
 *  source_properties security_marks.marks
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListFindingsResponse`; indicates that this
 *  is a continuation of a prior `ListFindings` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the source the findings belong to. Its format is
 *  "organizations/[organization_id]/sources/[source_id],
 *  folders/[folder_id]/sources/[source_id], or
 *  projects/[project_id]/sources/[source_id]". To list across all sources
 *  provide a source_id of `-`. For example:
 *  organizations/{organization_id}/sources/-, folders/{folder_id}/sources/- or
 *  projects/{projects_id}/sources/-
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Time used as a reference point when filtering findings. The filter is
 *  limited to findings existing at the supplied time and their values are those
 *  at that specific time. Absence of this field will default to the API's
 *  version of NOW.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListFindingsResponse.
 *
 *  Lists an organization or source's findings. To list across all sources
 *  provide a `-` as the source id. Example:
 *  /v1/organizations/{organization_id}/sources/-/findings
 *
 *  @param parent Required. Name of the source the findings belong to. Its
 *    format is "organizations/[organization_id]/sources/[source_id],
 *    folders/[folder_id]/sources/[source_id], or
 *    projects/[project_id]/sources/[source_id]". To list across all sources
 *    provide a source_id of `-`. For example:
 *    organizations/{organization_id}/sources/-, folders/{folder_id}/sources/-
 *    or projects/{projects_id}/sources/-
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  Method: securitycenter.projects.sources.findings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsPatch : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of this finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The FieldMask to use when updating the finding resource. This field should
 *  not be specified when creating a finding. When updating a finding, an empty
 *  mask is treated as updating all mutable fields and replacing
 *  source_properties. Individual source_properties can be added/updated by
 *  using "source_properties." in the field mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Creates or updates a finding. The corresponding source must exist for a
 *  finding creation to succeed.
 *
 *  @param object The @c GTLRSecurityCommandCenter_Finding to include in the
 *    query.
 *  @param name The relative resource name of this finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_Finding *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the mute state of a finding.
 *
 *  Method: securitycenter.projects.sources.findings.setMute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsSetMute : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *  "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *  "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the mute state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetMuteRequest to include in
 *    the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}",
 *    "folders/{folder_id}/sources/{source_id}/finding/{finding_id}",
 *    "projects/{project_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsSetMute
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetMuteRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the state of a finding.
 *
 *  Method: securitycenter.projects.sources.findings.setState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsSetState : GTLRSecurityCommandCenterQuery

/**
 *  Required. The relative resource name of the finding. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Example:
 *  "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_Finding.
 *
 *  Updates the state of a finding.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SetFindingStateRequest to
 *    include in the query.
 *  @param name Required. The relative resource name of the finding. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Example:
 *    "organizations/{organization_id}/sources/{source_id}/finding/{finding_id}".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsSetState
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SetFindingStateRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates security marks.
 *
 *  Method: securitycenter.projects.sources.findings.updateSecurityMarks
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsUpdateSecurityMarks : GTLRSecurityCommandCenterQuery

/**
 *  The relative resource name of the SecurityMarks. See:
 *  https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *  Examples: "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *  "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The time at which the updated SecurityMarks take effect. If not set uses
 *  current server time. Updates will be applied to the SecurityMarks that are
 *  active immediately preceding this time. Must be earlier or equal to the
 *  server time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The FieldMask to use when updating the security marks resource. The field
 *  mask must not contain duplicate fields. If empty or set to "marks", all
 *  marks will be replaced. Individual marks can be updated using "marks.".
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_SecurityMarks.
 *
 *  Updates security marks.
 *
 *  @param object The @c GTLRSecurityCommandCenter_SecurityMarks to include in
 *    the query.
 *  @param name The relative resource name of the SecurityMarks. See:
 *    https://cloud.google.com/apis/design/resource_names#relative_resource_name
 *    Examples:
 *    "organizations/{organization_id}/assets/{asset_id}/securityMarks"
 *    "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesFindingsUpdateSecurityMarks
 */
+ (instancetype)queryWithObject:(GTLRSecurityCommandCenter_SecurityMarks *)object
                           name:(NSString *)name;

@end

/**
 *  Lists all sources belonging to an organization.
 *
 *  Method: securitycenter.projects.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecurityCommandCenterCloudPlatform
 */
@interface GTLRSecurityCommandCenterQuery_ProjectsSourcesList : GTLRSecurityCommandCenterQuery

/**
 *  The maximum number of results to return in a single response. Default is 10,
 *  minimum is 1, maximum is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSourcesResponse`; indicates that this is
 *  a continuation of a prior `ListSources` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the parent of sources to list. Its format should
 *  be "organizations/[organization_id], folders/[folder_id], or
 *  projects/[project_id]".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecurityCommandCenter_ListSourcesResponse.
 *
 *  Lists all sources belonging to an organization.
 *
 *  @param parent Required. Resource name of the parent of sources to list. Its
 *    format should be "organizations/[organization_id], folders/[folder_id], or
 *    projects/[project_id]".
 *
 *  @return GTLRSecurityCommandCenterQuery_ProjectsSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
