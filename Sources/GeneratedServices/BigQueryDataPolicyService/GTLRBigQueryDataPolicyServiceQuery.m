// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Data Policy API (bigquerydatapolicy/v1)
// Description:
//   Allows users to manage BigQuery data policies.
// Documentation:
//   https://cloud.google.com/bigquery/docs/column-data-masking

#import <GoogleAPIClientForREST/GTLRBigQueryDataPolicyServiceQuery.h>

@implementation GTLRBigQueryDataPolicyServiceQuery

@dynamic fields;

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_DataPolicy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dataPolicies";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_DataPolicy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.create";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_Empty class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.delete";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_DataPolicy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.get";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_Policy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.getIamPolicy";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dataPolicies";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_ListDataPoliciesResponse class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.list";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_DataPolicy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_DataPolicy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.patch";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesRename

@dynamic name;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_RenameDataPolicyRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rename";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesRename *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_DataPolicy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.rename";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_Policy class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.setIamPolicy";
  return query;
}

@end

@implementation GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBigQueryDataPolicyService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBigQueryDataPolicyServiceQuery_ProjectsLocationsDataPoliciesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBigQueryDataPolicyService_TestIamPermissionsResponse class];
  query.loggingName = @"bigquerydatapolicy.projects.locations.dataPolicies.testIamPermissions";
  return query;
}

@end
