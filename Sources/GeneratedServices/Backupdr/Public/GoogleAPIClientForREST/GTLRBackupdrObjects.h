// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Backup and DR Service API (backupdr/v1)
// Documentation:
//   https://cloud.google.com/backup-disaster-recovery

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBackupdr_AcceleratorConfig;
@class GTLRBackupdr_AccessConfig;
@class GTLRBackupdr_AdvancedMachineFeatures;
@class GTLRBackupdr_AliasIpRange;
@class GTLRBackupdr_AllocationAffinity;
@class GTLRBackupdr_AttachedDisk;
@class GTLRBackupdr_AuditConfig;
@class GTLRBackupdr_AuditLogConfig;
@class GTLRBackupdr_Backup;
@class GTLRBackupdr_Backup_Labels;
@class GTLRBackupdr_BackupApplianceBackupConfig;
@class GTLRBackupdr_BackupApplianceBackupProperties;
@class GTLRBackupdr_BackupApplianceLockInfo;
@class GTLRBackupdr_BackupConfigInfo;
@class GTLRBackupdr_BackupLock;
@class GTLRBackupdr_BackupPlan;
@class GTLRBackupdr_BackupPlan_Labels;
@class GTLRBackupdr_BackupPlanAssociation;
@class GTLRBackupdr_BackupRule;
@class GTLRBackupdr_BackupVault;
@class GTLRBackupdr_BackupVault_Annotations;
@class GTLRBackupdr_BackupVault_Labels;
@class GTLRBackupdr_BackupWindow;
@class GTLRBackupdr_Binding;
@class GTLRBackupdr_BlobstoreLocation;
@class GTLRBackupdr_CloudAsset;
@class GTLRBackupdr_CloudAssetComposition;
@class GTLRBackupdr_ComputeInstanceBackupProperties;
@class GTLRBackupdr_ComputeInstanceBackupProperties_Labels;
@class GTLRBackupdr_ComputeInstanceDataSourceProperties;
@class GTLRBackupdr_ComputeInstanceRestoreProperties;
@class GTLRBackupdr_ComputeInstanceRestoreProperties_Labels;
@class GTLRBackupdr_ComputeInstanceTargetEnvironment;
@class GTLRBackupdr_ConfidentialInstanceConfig;
@class GTLRBackupdr_CustomerEncryptionKey;
@class GTLRBackupdr_DataSource;
@class GTLRBackupdr_DataSource_Labels;
@class GTLRBackupdr_DataSourceBackupApplianceApplication;
@class GTLRBackupdr_DataSourceGcpResource;
@class GTLRBackupdr_DirectLocationAssignment;
@class GTLRBackupdr_DisplayDevice;
@class GTLRBackupdr_Entry;
@class GTLRBackupdr_Expr;
@class GTLRBackupdr_ExtraParameter;
@class GTLRBackupdr_GcpBackupConfig;
@class GTLRBackupdr_GCPBackupPlanInfo;
@class GTLRBackupdr_GuestOsFeature;
@class GTLRBackupdr_InitializeParams;
@class GTLRBackupdr_InstanceParams;
@class GTLRBackupdr_InstanceParams_ResourceManagerTags;
@class GTLRBackupdr_IsolationExpectations;
@class GTLRBackupdr_Location;
@class GTLRBackupdr_Location_Labels;
@class GTLRBackupdr_Location_Metadata;
@class GTLRBackupdr_LocationAssignment;
@class GTLRBackupdr_LocationData;
@class GTLRBackupdr_ManagementServer;
@class GTLRBackupdr_ManagementServer_Labels;
@class GTLRBackupdr_ManagementURI;
@class GTLRBackupdr_Metadata;
@class GTLRBackupdr_NetworkConfig;
@class GTLRBackupdr_NetworkInterface;
@class GTLRBackupdr_NetworkPerformanceConfig;
@class GTLRBackupdr_NodeAffinity;
@class GTLRBackupdr_Operation;
@class GTLRBackupdr_Operation_Metadata;
@class GTLRBackupdr_Operation_Response;
@class GTLRBackupdr_OperationMetadata_AdditionalInfo;
@class GTLRBackupdr_PlacerLocation;
@class GTLRBackupdr_Policy;
@class GTLRBackupdr_RegionalMigDistributionPolicy;
@class GTLRBackupdr_RequirementOverride;
@class GTLRBackupdr_RuleConfigInfo;
@class GTLRBackupdr_Scheduling;
@class GTLRBackupdr_SchedulingDuration;
@class GTLRBackupdr_ServiceAccount;
@class GTLRBackupdr_ServiceLockInfo;
@class GTLRBackupdr_SpannerLocation;
@class GTLRBackupdr_StandardSchedule;
@class GTLRBackupdr_Status;
@class GTLRBackupdr_Status_Details_Item;
@class GTLRBackupdr_Tags;
@class GTLRBackupdr_TenantProjectProxy;
@class GTLRBackupdr_WeekDayOfMonth;
@class GTLRBackupdr_WorkforceIdentityBasedManagementURI;
@class GTLRBackupdr_WorkforceIdentityBasedOAuth2ClientID;
@class GTLRBackupdr_ZoneConfiguration;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBackupdr_AccessConfig.networkTier

/**
 *  Default value. This value is unused.
 *
 *  Value: "NETWORK_TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_NetworkTier_NetworkTierUnspecified;
/**
 *  High quality, Google-grade network tier, support for all networking
 *  products.
 *
 *  Value: "PREMIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_NetworkTier_Premium;
/**
 *  Public internet quality, only limited support for other networking products.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_NetworkTier_Standard;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AccessConfig.type

/**
 *  Default value. This value is unused.
 *
 *  Value: "ACCESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_Type_AccessTypeUnspecified;
/**
 *  Direct IPv6 access.
 *
 *  Value: "DIRECT_IPV6"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_Type_DirectIpv6;
/**
 *  ONE_TO_ONE_NAT
 *
 *  Value: "ONE_TO_ONE_NAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AccessConfig_Type_OneToOneNat;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AllocationAffinity.consumeReservationType

/**
 *  Consume any allocation available.
 *
 *  Value: "ANY_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_AnyReservation;
/**
 *  Do not consume from any allocated capacity.
 *
 *  Value: "NO_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_NoReservation;
/**
 *  Must consume from a specific reservation. Must specify key value fields for
 *  specifying the reservations.
 *
 *  Value: "SPECIFIC_RESERVATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_SpecificReservation;
/**
 *  Default value. This value is unused.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AttachedDisk.diskInterface

/**
 *  Default value, which is unused.
 *
 *  Value: "DISK_INTERFACE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskInterface_DiskInterfaceUnspecified;
/**
 *  ISCSI Disk Interface.
 *
 *  Value: "ISCSI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskInterface_Iscsi;
/**
 *  NVDIMM Disk Interface.
 *
 *  Value: "NVDIMM"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskInterface_Nvdimm;
/**
 *  NVME Disk Interface.
 *
 *  Value: "NVME"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskInterface_Nvme;
/**
 *  SCSI Disk Interface.
 *
 *  Value: "SCSI"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskInterface_Scsi;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AttachedDisk.diskTypeDeprecated

/**
 *  Default value, which is unused.
 *
 *  Value: "DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_DiskTypeUnspecified;
/**
 *  A persistent disk type.
 *
 *  Value: "PERSISTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_Persistent;
/**
 *  A scratch disk type.
 *
 *  Value: "SCRATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_Scratch;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AttachedDisk.mode

/**
 *  Default value, which is unused.
 *
 *  Value: "DISK_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Mode_DiskModeUnspecified;
/**
 *  The disk is locked for administrative reasons. Nobody else can use the disk.
 *  This mode is used (for example) when taking a snapshot of a disk to prevent
 *  mounting the disk while it is being snapshotted.
 *
 *  Value: "LOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Mode_Locked;
/**
 *  Attaches this disk in read-only mode. Multiple virtual machines can use a
 *  disk in read-only mode at a time.
 *
 *  Value: "READ_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Mode_ReadOnly;
/**
 *  Attaches this disk in read-write mode. Only one virtual machine at a time
 *  can be attached to a disk in read-write mode.
 *
 *  Value: "READ_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Mode_ReadWrite;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AttachedDisk.savedState

/**
 *  Default Disk state has not been preserved.
 *
 *  Value: "DISK_SAVED_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_SavedState_DiskSavedStateUnspecified;
/**
 *  Disk state has been preserved.
 *
 *  Value: "PRESERVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_SavedState_Preserved;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AttachedDisk.type

/**
 *  Default value, which is unused.
 *
 *  Value: "DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Type_DiskTypeUnspecified;
/**
 *  A persistent disk type.
 *
 *  Value: "PERSISTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Type_Persistent;
/**
 *  A scratch disk type.
 *
 *  Value: "SCRATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AttachedDisk_Type_Scratch;

// ----------------------------------------------------------------------------
// GTLRBackupdr_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_Backup.backupType

/**
 *  Backup type is unspecified.
 *
 *  Value: "BACKUP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_BackupType_BackupTypeUnspecified;
/**
 *  On demand backup.
 *
 *  Value: "ON_DEMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_BackupType_OnDemand;
/**
 *  Scheduled backup.
 *
 *  Value: "SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_BackupType_Scheduled;

// ----------------------------------------------------------------------------
// GTLRBackupdr_Backup.state

/**
 *  The backup has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_State_Active;
/**
 *  The backup is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_State_Creating;
/**
 *  The backup is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_State_Deleting;
/**
 *  The backup is experiencing an issue and might be unusable.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_State_Error;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Backup_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_BackupConfigInfo.lastBackupState

/**
 *  The most recent backup failed
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupConfigInfo_LastBackupState_Failed;
/**
 *  The first backup has not yet completed
 *
 *  Value: "FIRST_BACKUP_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupConfigInfo_LastBackupState_FirstBackupPending;
/**
 *  Status not set.
 *
 *  Value: "LAST_BACKUP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupConfigInfo_LastBackupState_LastBackupStateUnspecified;
/**
 *  The most recent backup could not be run/failed because of the lack of
 *  permissions
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupConfigInfo_LastBackupState_PermissionDenied;
/**
 *  The most recent backup was successful
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupConfigInfo_LastBackupState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRBackupdr_BackupPlan.state

/**
 *  The resource has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlan_State_Active;
/**
 *  The resource is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlan_State_Creating;
/**
 *  The resource is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlan_State_Deleting;
/**
 *  The resource has been created but is not usable.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlan_State_Inactive;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlan_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_BackupPlanAssociation.state

/**
 *  The resource has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlanAssociation_State_Active;
/**
 *  The resource is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlanAssociation_State_Creating;
/**
 *  The resource is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlanAssociation_State_Deleting;
/**
 *  The resource has been created but is not usable.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlanAssociation_State_Inactive;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupPlanAssociation_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_BackupVault.state

/**
 *  The backup vault has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupVault_State_Active;
/**
 *  The backup vault is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupVault_State_Creating;
/**
 *  The backup vault is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupVault_State_Deleting;
/**
 *  The backup vault is experiencing an issue and might be unusable.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupVault_State_Error;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_BackupVault_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_ComputeInstanceBackupProperties.keyRevocationActionType

/**
 *  Default value. This value is unused.
 *
 *  Value: "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_KeyRevocationActionTypeUnspecified;
/**
 *  Indicates user chose no operation.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_None;
/**
 *  Indicates user chose to opt for VM shutdown on key revocation.
 *
 *  Value: "STOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_Stop;

// ----------------------------------------------------------------------------
// GTLRBackupdr_ComputeInstanceRestoreProperties.keyRevocationActionType

/**
 *  Default value. This value is unused.
 *
 *  Value: "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_KeyRevocationActionTypeUnspecified;
/**
 *  Indicates user chose no operation.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_None;
/**
 *  Indicates user chose to opt for VM shutdown on key revocation.
 *
 *  Value: "STOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_Stop;

// ----------------------------------------------------------------------------
// GTLRBackupdr_ComputeInstanceRestoreProperties.privateIpv6GoogleAccess

/**
 *  Bidirectional private IPv6 access to/from Google services. If specified, the
 *  subnetwork who is attached to the instance's default network interface will
 *  be assigned an internal IPv6 prefix if it doesn't have before.
 *
 *  Value: "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_EnableBidirectionalAccessToGoogle;
/**
 *  Outbound private IPv6 access from VMs in this subnet to Google services. If
 *  specified, the subnetwork who is attached to the instance's default network
 *  interface will be assigned an internal IPv6 prefix if it doesn't have
 *  before.
 *
 *  Value: "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_EnableOutboundVmAccessToGoogle;
/**
 *  Each network interface inherits PrivateIpv6GoogleAccess from its subnetwork.
 *
 *  Value: "INHERIT_FROM_SUBNETWORK"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_InheritFromSubnetwork;
/**
 *  Default value. This value is unused.
 *
 *  Value: "INSTANCE_PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_InstancePrivateIpv6GoogleAccessUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_DataSource.configState

/**
 *  The data source is actively protected (i.e. there is a BackupPlanAssociation
 *  or Appliance SLA pointing to it)
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_ConfigState_Active;
/**
 *  The possible states of backup configuration. Status not set.
 *
 *  Value: "BACKUP_CONFIG_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_ConfigState_BackupConfigStateUnspecified;
/**
 *  The data source is no longer protected (but may have backups under it)
 *
 *  Value: "PASSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_ConfigState_Passive;

// ----------------------------------------------------------------------------
// GTLRBackupdr_DataSource.state

/**
 *  The data source has been created and is fully usable.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_State_Active;
/**
 *  The data source is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_State_Creating;
/**
 *  The data source is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_State_Deleting;
/**
 *  The data source is experiencing an issue and might be unusable.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_State_Error;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_DataSource_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_GuestOsFeature.type

/**
 *  BARE_METAL_LINUX_COMPATIBLE feature type.
 *
 *  Value: "BARE_METAL_LINUX_COMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_BareMetalLinuxCompatible;
/**
 *  Default value, which is unused.
 *
 *  Value: "FEATURE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_FeatureTypeUnspecified;
/**
 *  GVNIC feature type.
 *
 *  Value: "GVNIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_Gvnic;
/**
 *  IDPF feature type.
 *
 *  Value: "IDPF"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_Idpf;
/**
 *  MULTI_IP_SUBNET feature type.
 *
 *  Value: "MULTI_IP_SUBNET"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_MultiIpSubnet;
/**
 *  SECURE_BOOT feature type.
 *
 *  Value: "SECURE_BOOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SecureBoot;
/**
 *  SEV_CAPABLE feature type.
 *
 *  Value: "SEV_CAPABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SevCapable;
/**
 *  SEV_LIVE_MIGRATABLE feature type.
 *
 *  Value: "SEV_LIVE_MIGRATABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SevLiveMigratable;
/**
 *  SEV_LIVE_MIGRATABLE_V2 feature type.
 *
 *  Value: "SEV_LIVE_MIGRATABLE_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SevLiveMigratableV2;
/**
 *  SEV_SNP_CAPABLE feature type.
 *
 *  Value: "SEV_SNP_CAPABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SevSnpCapable;
/**
 *  SUSPEND_RESUME_COMPATIBLE feature type.
 *
 *  Value: "SUSPEND_RESUME_COMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_SuspendResumeCompatible;
/**
 *  TDX_CAPABLE feature type.
 *
 *  Value: "TDX_CAPABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_TdxCapable;
/**
 *  UEFI_COMPATIBLE feature type.
 *
 *  Value: "UEFI_COMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_UefiCompatible;
/**
 *  VIRTIO_SCSI_MULTIQUEUE feature type.
 *
 *  Value: "VIRTIO_SCSI_MULTIQUEUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_VirtioScsiMultiqueue;
/**
 *  WINDOWS feature type.
 *
 *  Value: "WINDOWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_GuestOsFeature_Type_Windows;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.ziOrgPolicy

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.ziRegionPolicy

/** Value: "ZI_REGION_POLICY_FAIL_CLOSED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailClosed;
/** Value: "ZI_REGION_POLICY_FAIL_OPEN" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailOpen;
/** Value: "ZI_REGION_POLICY_NOT_SET" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyNotSet;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_REGION_POLICY_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnknown;
/** Value: "ZI_REGION_POLICY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.ziRegionState

/** Value: "ZI_REGION_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionEnabled;
/** Value: "ZI_REGION_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionNotEnabled;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_REGION_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionUnknown;
/** Value: "ZI_REGION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.zoneIsolation

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.zoneSeparation

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.zsOrgPolicy

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_IsolationExpectations.zsRegionState

/** Value: "ZS_REGION_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionEnabled;
/** Value: "ZS_REGION_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionNotEnabled;
/**
 *  To be used if tracking of the asset ZS-bit is not available
 *
 *  Value: "ZS_REGION_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionUnknown;
/** Value: "ZS_REGION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_LocationAssignment.locationType

/** Value: "CLOUD_REGION" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_CloudRegion;
/**
 *  11-20: Logical failure domains.
 *
 *  Value: "CLOUD_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_CloudZone;
/**
 *  1-10: Physical failure domains.
 *
 *  Value: "CLUSTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_Cluster;
/** Value: "GLOBAL" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_Global;
/** Value: "MULTI_REGION_GEO" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_MultiRegionGeo;
/** Value: "MULTI_REGION_JURISDICTION" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_MultiRegionJurisdiction;
/** Value: "OTHER" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_Other;
/** Value: "POP" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_Pop;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_LocationAssignment_LocationType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_ManagementServer.state

/**
 *  The instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Creating;
/**
 *  The instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Deleting;
/**
 *  The instance is experiencing an issue and might be unusable. You can get
 *  further details from the statusMessage field of Instance resource.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Error;
/**
 *  State not set.
 *
 *  Value: "INSTANCE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_InstanceStateUnspecified;
/**
 *  Maintenance is being performed on this instance.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Maintenance;
/**
 *  The instance has been created and is fully usable.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Ready;
/**
 *  The instance is being repaired and may be unstable.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Repairing;
/**
 *  The instance configuration is being updated. Certain kinds of updates may
 *  cause the instance to become unusable while the update is in progress.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_State_Updating;

// ----------------------------------------------------------------------------
// GTLRBackupdr_ManagementServer.type

/**
 *  Instance for backup and restore management (i.e., AGM).
 *
 *  Value: "BACKUP_RESTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_Type_BackupRestore;
/**
 *  Instance type is not mentioned.
 *
 *  Value: "INSTANCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_ManagementServer_Type_InstanceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NetworkConfig.peeringMode

/**
 *  Peering mode not set.
 *
 *  Value: "PEERING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkConfig_PeeringMode_PeeringModeUnspecified;
/**
 *  Connect using Private Service Access to the Management Server. Private
 *  services access provides an IP address range for multiple Google Cloud
 *  services, including Cloud BackupDR.
 *
 *  Value: "PRIVATE_SERVICE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkConfig_PeeringMode_PrivateServiceAccess;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NetworkInterface.ipv6AccessType

/**
 *  This network interface can have external IPv6.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_Ipv6AccessType_External;
/**
 *  This network interface can have internal IPv6.
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_Ipv6AccessType_Internal;
/**
 *  IPv6 access type not set. Means this network interface hasn't been turned on
 *  IPv6 yet.
 *
 *  Value: "UNSPECIFIED_IPV6_ACCESS_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_Ipv6AccessType_UnspecifiedIpv6AccessType;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NetworkInterface.nicType

/**
 *  GVNIC
 *
 *  Value: "GVNIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_NicType_Gvnic;
/**
 *  Default should be NIC_TYPE_UNSPECIFIED.
 *
 *  Value: "NIC_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_NicType_NicTypeUnspecified;
/**
 *  VIRTIO
 *
 *  Value: "VIRTIO_NET"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_NicType_VirtioNet;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NetworkInterface.stackType

/**
 *  The network interface can have both IPv4 and IPv6 addresses.
 *
 *  Value: "IPV4_IPV6"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_StackType_Ipv4Ipv6;
/**
 *  The network interface will be assigned IPv4 address.
 *
 *  Value: "IPV4_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_StackType_Ipv4Only;
/**
 *  Default should be STACK_TYPE_UNSPECIFIED.
 *
 *  Value: "STACK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkInterface_StackType_StackTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NetworkPerformanceConfig.totalEgressBandwidthTier

/**
 *  Default network performance config.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_Default;
/**
 *  Tier 1 network performance config.
 *
 *  Value: "TIER_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_Tier1;
/**
 *  This value is unused.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_NodeAffinity.operatorProperty

/**
 *  Requires Compute Engine to seek for matched nodes.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NodeAffinity_OperatorProperty_In;
/**
 *  Requires Compute Engine to avoid certain nodes.
 *
 *  Value: "NOT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NodeAffinity_OperatorProperty_NotIn;
/**
 *  Default value. This value is unused.
 *
 *  Value: "OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_NodeAffinity_OperatorProperty_OperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_RequirementOverride.ziOverride

/** Value: "ZI_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZiOverride_ZiNotRequired;
/** Value: "ZI_PREFERRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZiOverride_ZiPreferred;
/** Value: "ZI_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZiOverride_ZiRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZI_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZiOverride_ZiUnknown;
/** Value: "ZI_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZiOverride_ZiUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_RequirementOverride.zsOverride

/** Value: "ZS_NOT_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZsOverride_ZsNotRequired;
/** Value: "ZS_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZsOverride_ZsRequired;
/**
 *  To be used if tracking is not available
 *
 *  Value: "ZS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZsOverride_ZsUnknown;
/** Value: "ZS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RequirementOverride_ZsOverride_ZsUnspecified;

// ----------------------------------------------------------------------------
// GTLRBackupdr_RuleConfigInfo.lastBackupState

/**
 *  The last backup operation failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RuleConfigInfo_LastBackupState_Failed;
/**
 *  The first backup is pending.
 *
 *  Value: "FIRST_BACKUP_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RuleConfigInfo_LastBackupState_FirstBackupPending;
/**
 *  State not set.
 *
 *  Value: "LAST_BACKUP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RuleConfigInfo_LastBackupState_LastBackupStateUnspecified;
/**
 *  The most recent backup could not be run/failed because of the lack of
 *  permissions.
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RuleConfigInfo_LastBackupState_PermissionDenied;
/**
 *  The last backup operation succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_RuleConfigInfo_LastBackupState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRBackupdr_Scheduling.instanceTerminationAction

/**
 *  Delete the VM.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_InstanceTerminationAction_Delete;
/**
 *  Default value. This value is unused.
 *
 *  Value: "INSTANCE_TERMINATION_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_InstanceTerminationAction_InstanceTerminationActionUnspecified;
/**
 *  Stop the VM without storing in-memory content. default action.
 *
 *  Value: "STOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_InstanceTerminationAction_Stop;

// ----------------------------------------------------------------------------
// GTLRBackupdr_Scheduling.onHostMaintenance

/**
 *  Default, Allows Compute Engine to automatically migrate instances out of the
 *  way of maintenance events.
 *
 *  Value: "MIGRATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_OnHostMaintenance_Migrate;
/**
 *  Default value. This value is unused.
 *
 *  Value: "ON_HOST_MAINTENANCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_OnHostMaintenance_OnHostMaintenanceUnspecified;
/**
 *  Tells Compute Engine to terminate and (optionally) restart the instance away
 *  from the maintenance activity.
 *
 *  Value: "TERMINATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_OnHostMaintenance_Terminate;

// ----------------------------------------------------------------------------
// GTLRBackupdr_Scheduling.provisioningModel

/**
 *  Default value. This value is not used.
 *
 *  Value: "PROVISIONING_MODEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_ProvisioningModel_ProvisioningModelUnspecified;
/**
 *  Heavily discounted, no guaranteed runtime.
 *
 *  Value: "SPOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_ProvisioningModel_Spot;
/**
 *  Standard provisioning with user controlled runtime, no discounts.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_Scheduling_ProvisioningModel_Standard;

// ----------------------------------------------------------------------------
// GTLRBackupdr_SetInternalStatusRequest.backupConfigState

/**
 *  The data source is actively protected (i.e. there is a BackupPlanAssociation
 *  or Appliance SLA pointing to it)
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_Active;
/**
 *  The possible states of backup configuration. Status not set.
 *
 *  Value: "BACKUP_CONFIG_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_BackupConfigStateUnspecified;
/**
 *  The data source is no longer protected (but may have backups under it)
 *
 *  Value: "PASSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_Passive;

// ----------------------------------------------------------------------------
// GTLRBackupdr_StandardSchedule.daysOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_DaysOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRBackupdr_StandardSchedule.months

/**
 *  The month of April.
 *
 *  Value: "APRIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_April;
/**
 *  The month of August.
 *
 *  Value: "AUGUST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_August;
/**
 *  The month of December.
 *
 *  Value: "DECEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_December;
/**
 *  The month of February.
 *
 *  Value: "FEBRUARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_February;
/**
 *  The month of January.
 *
 *  Value: "JANUARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_January;
/**
 *  The month of July.
 *
 *  Value: "JULY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_July;
/**
 *  The month of June.
 *
 *  Value: "JUNE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_June;
/**
 *  The month of March.
 *
 *  Value: "MARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_March;
/**
 *  The month of May.
 *
 *  Value: "MAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_May;
/**
 *  The unspecified month.
 *
 *  Value: "MONTH_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_MonthUnspecified;
/**
 *  The month of November.
 *
 *  Value: "NOVEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_November;
/**
 *  The month of October.
 *
 *  Value: "OCTOBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_October;
/**
 *  The month of September.
 *
 *  Value: "SEPTEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_Months_September;

// ----------------------------------------------------------------------------
// GTLRBackupdr_StandardSchedule.recurrenceType

/**
 *  The `BackupRule` is to be applied daily.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_Daily;
/**
 *  The `BackupRule` is to be applied hourly.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_Hourly;
/**
 *  The `BackupRule` is to be applied monthly.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_Monthly;
/**
 *  recurrence type not set
 *
 *  Value: "RECURRENCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_RecurrenceTypeUnspecified;
/**
 *  The `BackupRule` is to be applied weekly.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_Weekly;
/**
 *  The `BackupRule` is to be applied yearly.
 *
 *  Value: "YEARLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_StandardSchedule_RecurrenceType_Yearly;

// ----------------------------------------------------------------------------
// GTLRBackupdr_WeekDayOfMonth.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRBackupdr_WeekDayOfMonth.weekOfMonth

/**
 *  The first week of the month.
 *
 *  Value: "FIRST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_First;
/**
 *  The fourth week of the month.
 *
 *  Value: "FOURTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Fourth;
/**
 *  The last week of the month.
 *
 *  Value: "LAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Last;
/**
 *  The second week of the month.
 *
 *  Value: "SECOND"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Second;
/**
 *  The third week of the month.
 *
 *  Value: "THIRD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Third;
/**
 *  The zero value. Do not use.
 *
 *  Value: "WEEK_OF_MONTH_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_WeekOfMonthUnspecified;

/**
 *  request message for AbandonBackup.
 */
@interface GTLRBackupdr_AbandonBackupRequest : GTLRObject

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  A specification of the type and number of accelerator cards attached to the
 *  instance.
 */
@interface GTLRBackupdr_AcceleratorConfig : GTLRObject

/**
 *  Optional. The number of the guest accelerator cards exposed to this
 *  instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceleratorCount;

/**
 *  Optional. Full or partial URL of the accelerator type resource to attach to
 *  this instance.
 */
@property(nonatomic, copy, nullable) NSString *acceleratorType;

@end


/**
 *  An access configuration attached to an instance's network interface. Only
 *  one access config per instance is supported.
 */
@interface GTLRBackupdr_AccessConfig : GTLRObject

/** Optional. The external IPv6 address of this access configuration. */
@property(nonatomic, copy, nullable) NSString *externalIpv6;

/**
 *  Optional. The prefix length of the external IPv6 range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *externalIpv6PrefixLength;

/** Optional. The name of this access configuration. */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The external IP address of this access configuration. */
@property(nonatomic, copy, nullable) NSString *natIP;

/**
 *  Optional. This signifies the networking tier used for configuring this
 *  access
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AccessConfig_NetworkTier_NetworkTierUnspecified
 *        Default value. This value is unused. (Value:
 *        "NETWORK_TIER_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AccessConfig_NetworkTier_Premium High quality,
 *        Google-grade network tier, support for all networking products.
 *        (Value: "PREMIUM")
 *    @arg @c kGTLRBackupdr_AccessConfig_NetworkTier_Standard Public internet
 *        quality, only limited support for other networking products. (Value:
 *        "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *networkTier;

/** Optional. The DNS domain name for the public PTR record. */
@property(nonatomic, copy, nullable) NSString *publicPtrDomainName;

/**
 *  Optional. Specifies whether a public DNS 'PTR' record should be created to
 *  map the external IP address of the instance to a DNS domain name.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *setPublicPtr;

/**
 *  Optional. In accessConfigs (IPv4), the default and only option is
 *  ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is
 *  DIRECT_IPV6.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AccessConfig_Type_AccessTypeUnspecified Default
 *        value. This value is unused. (Value: "ACCESS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AccessConfig_Type_DirectIpv6 Direct IPv6 access.
 *        (Value: "DIRECT_IPV6")
 *    @arg @c kGTLRBackupdr_AccessConfig_Type_OneToOneNat ONE_TO_ONE_NAT (Value:
 *        "ONE_TO_ONE_NAT")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies options for controlling advanced machine features.
 */
@interface GTLRBackupdr_AdvancedMachineFeatures : GTLRObject

/**
 *  Optional. Whether to enable nested virtualization or not (default is false).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableNestedVirtualization;

/**
 *  Optional. Whether to enable UEFI networking for instance creation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableUefiNetworking;

/**
 *  Optional. The number of threads per physical core. To disable simultaneous
 *  multithreading (SMT) set this to 1. If unset, the maximum number of threads
 *  supported per core by the underlying processor is assumed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsPerCore;

/**
 *  Optional. The number of physical cores to expose to an instance. Multiply by
 *  the number of threads per core to compute the total number of virtual CPUs
 *  to expose to the instance. If unset, the number of cores is inferred from
 *  the instance's nominal CPU count and the underlying platform's SMT width.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *visibleCoreCount;

@end


/**
 *  An alias IP range attached to an instance's network interface.
 */
@interface GTLRBackupdr_AliasIpRange : GTLRObject

/** Optional. The IP alias ranges to allocate for this interface. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/**
 *  Optional. The name of a subnetwork secondary IP range from which to allocate
 *  an IP alias range. If not specified, the primary range of the subnetwork is
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *subnetworkRangeName;

@end


/**
 *  Specifies the reservations that this instance can consume from.
 */
@interface GTLRBackupdr_AllocationAffinity : GTLRObject

/**
 *  Optional. Specifies the type of reservation from which this instance can
 *  consume
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_AnyReservation
 *        Consume any allocation available. (Value: "ANY_RESERVATION")
 *    @arg @c kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_NoReservation
 *        Do not consume from any allocated capacity. (Value: "NO_RESERVATION")
 *    @arg @c kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_SpecificReservation
 *        Must consume from a specific reservation. Must specify key value
 *        fields for specifying the reservations. (Value:
 *        "SPECIFIC_RESERVATION")
 *    @arg @c kGTLRBackupdr_AllocationAffinity_ConsumeReservationType_TypeUnspecified
 *        Default value. This value is unused. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *consumeReservationType;

/** Optional. Corresponds to the label key of a reservation resource. */
@property(nonatomic, copy, nullable) NSString *key;

/** Optional. Corresponds to the label values of a reservation resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Provides the mapping of a cloud asset to a direct physical location or to a
 *  proxy that defines the location on its behalf.
 */
@interface GTLRBackupdr_AssetLocation : GTLRObject

/**
 *  Spanner path of the CCFE RMS database. It is only applicable for CCFE
 *  tenants that use CCFE RMS for storing resource metadata.
 */
@property(nonatomic, copy, nullable) NSString *ccfeRmsPath;

/**
 *  Defines the customer expectation around ZI/ZS for this asset and ZI/ZS state
 *  of the region at the time of asset creation.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_IsolationExpectations *expected;

/** Defines extra parameters required for specific asset types. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_ExtraParameter *> *extraParameters;

/** Contains all kinds of physical location definitions for this asset. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_LocationData *> *locationData;

/**
 *  Defines parents assets if any in order to allow later generation of
 *  child_asset_location data via child assets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_CloudAsset *> *parentAsset;

@end


/**
 *  An instance-attached disk resource.
 */
@interface GTLRBackupdr_AttachedDisk : GTLRObject

/**
 *  Optional. Specifies whether the disk will be auto-deleted when the instance
 *  is deleted (but not when the disk is detached from the instance).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoDelete;

/**
 *  Optional. Indicates that this is a boot disk. The virtual machine will use
 *  the first partition of the disk for its root filesystem.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boot;

/**
 *  Optional. This is used as an identifier for the disks. This is the unique
 *  name has to provided to modify disk parameters like disk_name and
 *  replica_zones (in case of RePDs)
 */
@property(nonatomic, copy, nullable) NSString *deviceName;

/**
 *  Optional. Encrypts or decrypts a disk using a customer-supplied encryption
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_CustomerEncryptionKey *diskEncryptionKey;

/**
 *  Optional. Specifies the disk interface to use for attaching this disk.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskInterface_DiskInterfaceUnspecified
 *        Default value, which is unused. (Value: "DISK_INTERFACE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskInterface_Iscsi ISCSI Disk
 *        Interface. (Value: "ISCSI")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskInterface_Nvdimm NVDIMM Disk
 *        Interface. (Value: "NVDIMM")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskInterface_Nvme NVME Disk Interface.
 *        (Value: "NVME")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskInterface_Scsi SCSI Disk Interface.
 *        (Value: "SCSI")
 */
@property(nonatomic, copy, nullable) NSString *diskInterface;

/**
 *  Optional. The size of the disk in GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Optional. Output only. The URI of the disk type resource. For example:
 *  projects/project/zones/zone/diskTypes/pd-standard or pd-ssd
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/**
 *  Specifies the type of the disk.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_DiskTypeUnspecified
 *        Default value, which is unused. (Value: "DISK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_Persistent A
 *        persistent disk type. (Value: "PERSISTENT")
 *    @arg @c kGTLRBackupdr_AttachedDisk_DiskTypeDeprecated_Scratch A scratch
 *        disk type. (Value: "SCRATCH")
 */
@property(nonatomic, copy, nullable) NSString *diskTypeDeprecated GTLR_DEPRECATED;

/**
 *  Optional. A list of features to enable on the guest operating system.
 *  Applicable only for bootable images.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_GuestOsFeature *> *guestOsFeature;

/**
 *  Optional. A zero-based index to this disk, where 0 is reserved for the boot
 *  disk.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/** Optional. Specifies the parameters to initialize this disk. */
@property(nonatomic, strong, nullable) GTLRBackupdr_InitializeParams *initializeParams;

/** Optional. Type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Optional. Any valid publicly visible licenses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *license;

/**
 *  Optional. The mode in which to attach this disk.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AttachedDisk_Mode_DiskModeUnspecified Default value,
 *        which is unused. (Value: "DISK_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_Mode_Locked The disk is locked for
 *        administrative reasons. Nobody else can use the disk. This mode is
 *        used (for example) when taking a snapshot of a disk to prevent
 *        mounting the disk while it is being snapshotted. (Value: "LOCKED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_Mode_ReadOnly Attaches this disk in
 *        read-only mode. Multiple virtual machines can use a disk in read-only
 *        mode at a time. (Value: "READ_ONLY")
 *    @arg @c kGTLRBackupdr_AttachedDisk_Mode_ReadWrite Attaches this disk in
 *        read-write mode. Only one virtual machine at a time can be attached to
 *        a disk in read-write mode. (Value: "READ_WRITE")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Optional. Output only. The state of the disk.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AttachedDisk_SavedState_DiskSavedStateUnspecified
 *        Default Disk state has not been preserved. (Value:
 *        "DISK_SAVED_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_SavedState_Preserved Disk state has
 *        been preserved. (Value: "PRESERVED")
 */
@property(nonatomic, copy, nullable) NSString *savedState;

/**
 *  Optional. Specifies a valid partial or full URL to an existing Persistent
 *  Disk resource.
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Optional. Specifies the type of the disk.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AttachedDisk_Type_DiskTypeUnspecified Default value,
 *        which is unused. (Value: "DISK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_AttachedDisk_Type_Persistent A persistent disk type.
 *        (Value: "PERSISTENT")
 *    @arg @c kGTLRBackupdr_AttachedDisk_Type_Scratch A scratch disk type.
 *        (Value: "SCRATCH")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRBackupdr_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRBackupdr_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRBackupdr_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRBackupdr_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRBackupdr_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Message describing a Backup object.
 */
@interface GTLRBackupdr_Backup : GTLRObject

/** Output only. Backup Appliance specific backup properties. */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupApplianceBackupProperties *backupApplianceBackupProperties;

/**
 *  Optional. The list of BackupLocks taken by the accessor Backup Appliance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupLock *> *backupApplianceLocks;

/**
 *  Output only. Type of the backup, unspecified, scheduled or ondemand.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_Backup_BackupType_BackupTypeUnspecified Backup type
 *        is unspecified. (Value: "BACKUP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_Backup_BackupType_OnDemand On demand backup. (Value:
 *        "ON_DEMAND")
 *    @arg @c kGTLRBackupdr_Backup_BackupType_Scheduled Scheduled backup.
 *        (Value: "SCHEDULED")
 */
@property(nonatomic, copy, nullable) NSString *backupType;

/** Output only. Compute Engine specific backup properties. */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceBackupProperties *computeInstanceBackupProperties;

/**
 *  Output only. The point in time when this backup was captured from the
 *  source.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *consistencyTime;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The description of the Backup instance (2048 characters or
 *  less).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. The backup can not be deleted before this time. */
@property(nonatomic, strong, nullable) GTLRDateTime *enforcedRetentionEndTime;

/**
 *  Optional. Server specified ETag to prevent updates from overwriting each
 *  other.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. When this backup is automatically expired. */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** Output only. Configuration for a Google Cloud resource. */
@property(nonatomic, strong, nullable) GTLRBackupdr_GCPBackupPlanInfo *gcpBackupPlanInfo;

/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Backup_Labels *labels;

/** Output only. Identifier. Name of the resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. source resource size in bytes at the time of the backup.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resourceSizeBytes;

/**
 *  Output only. The list of BackupLocks taken by the service to prevent the
 *  deletion of the backup.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupLock *> *serviceLocks;

/**
 *  Output only. The Backup resource instance state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_Backup_State_Active The backup has been created and
 *        is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_Backup_State_Creating The backup is being created.
 *        (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_Backup_State_Deleting The backup is being deleted.
 *        (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_Backup_State_Error The backup is experiencing an
 *        issue and might be unusable. (Value: "ERROR")
 *    @arg @c kGTLRBackupdr_Backup_State_StateUnspecified State not set. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_Backup_Labels : GTLRObject
@end


/**
 *  BackupApplianceBackupConfig captures the backup configuration for
 *  applications that are protected by Backup Appliances.
 */
@interface GTLRBackupdr_BackupApplianceBackupConfig : GTLRObject

/** The name of the application. */
@property(nonatomic, copy, nullable) NSString *applicationName;

/**
 *  The ID of the backup appliance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupApplianceId;

/** The name of the backup appliance. */
@property(nonatomic, copy, nullable) NSString *backupApplianceName;

/** The name of the host where the application is running. */
@property(nonatomic, copy, nullable) NSString *hostName;

/**
 *  The ID of the SLA of this application.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slaId;

/** The name of the SLP associated with the application. */
@property(nonatomic, copy, nullable) NSString *slpName;

/** The name of the SLT associated with the application. */
@property(nonatomic, copy, nullable) NSString *sltName;

@end


/**
 *  BackupApplianceBackupProperties represents BackupDR backup appliance's
 *  properties.
 */
@interface GTLRBackupdr_BackupApplianceBackupProperties : GTLRObject

/**
 *  Output only. The time when this backup object was finalized (if none, backup
 *  is not finalized).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finalizeTime;

/**
 *  Output only. The numeric generation ID of the backup (monotonically
 *  increasing).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generationId;

/** Optional. The latest timestamp of data available in this Backup. */
@property(nonatomic, strong, nullable) GTLRDateTime *recoveryRangeEndTime;

/** Optional. The earliest timestamp of data available in this Backup. */
@property(nonatomic, strong, nullable) GTLRDateTime *recoveryRangeStartTime;

@end


/**
 *  BackupApplianceLockInfo contains metadata about the backupappliance that
 *  created the lock.
 */
@interface GTLRBackupdr_BackupApplianceLockInfo : GTLRObject

/**
 *  Required. The ID of the backup/recovery appliance that created this lock.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupApplianceId;

/**
 *  Required. The name of the backup/recovery appliance that created this lock.
 */
@property(nonatomic, copy, nullable) NSString *backupApplianceName;

/** The image name that depends on this Backup. */
@property(nonatomic, copy, nullable) NSString *backupImage;

/** The job name on the backup/recovery appliance that created this lock. */
@property(nonatomic, copy, nullable) NSString *jobName;

/**
 *  Required. The reason for the lock: e.g. MOUNT/RESTORE/BACKUP/etc. The value
 *  of this string is only meaningful to the client and it is not interpreted by
 *  the BackupVault service.
 */
@property(nonatomic, copy, nullable) NSString *lockReason;

/**
 *  The SLA on the backup/recovery appliance that owns the lock.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slaId;

@end


/**
 *  BackupConfigInfo has information about how the resource is configured for
 *  Backup and about the most recent backup to this vault.
 */
@interface GTLRBackupdr_BackupConfigInfo : GTLRObject

/** Configuration for an application backed up by a Backup Appliance. */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupApplianceBackupConfig *backupApplianceBackupConfig;

/** Configuration for a Google Cloud resource. */
@property(nonatomic, strong, nullable) GTLRBackupdr_GcpBackupConfig *gcpBackupConfig;

/**
 *  Output only. If the last backup failed, this field has the error message.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Status *lastBackupError;

/**
 *  Output only. The status of the last backup to this BackupVault
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_BackupConfigInfo_LastBackupState_Failed The most
 *        recent backup failed (Value: "FAILED")
 *    @arg @c kGTLRBackupdr_BackupConfigInfo_LastBackupState_FirstBackupPending
 *        The first backup has not yet completed (Value: "FIRST_BACKUP_PENDING")
 *    @arg @c kGTLRBackupdr_BackupConfigInfo_LastBackupState_LastBackupStateUnspecified
 *        Status not set. (Value: "LAST_BACKUP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_BackupConfigInfo_LastBackupState_PermissionDenied
 *        The most recent backup could not be run/failed because of the lack of
 *        permissions (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRBackupdr_BackupConfigInfo_LastBackupState_Succeeded The most
 *        recent backup was successful (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *lastBackupState;

/**
 *  Output only. If the last backup were successful, this field has the
 *  consistency date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSuccessfulBackupConsistencyTime;

@end


/**
 *  BackupLock represents a single lock on a Backup resource. An unexpired lock
 *  on a Backup prevents the Backup from being deleted.
 */
@interface GTLRBackupdr_BackupLock : GTLRObject

/**
 *  If the client is a backup and recovery appliance, this contains metadata
 *  about why the lock exists.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupApplianceLockInfo *backupApplianceLockInfo;

/**
 *  Required. The time after which this lock is not considered valid and will no
 *  longer protect the Backup from deletion.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lockUntilTime;

/**
 *  Output only. Contains metadata about the lock exist for Google Cloud native
 *  backups.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_ServiceLockInfo *serviceLockInfo;

@end


/**
 *  A `BackupPlan` specifies some common fields, such as `description` as well
 *  as one or more `BackupRule` messages. Each `BackupRule` has a retention
 *  policy and defines a schedule by which the system is to perform backup
 *  workloads.
 */
@interface GTLRBackupdr_BackupPlan : GTLRObject

/**
 *  Required. The backup rules for this `BackupPlan`. There must be at least one
 *  `BackupRule` message.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupRule *> *backupRules;

/**
 *  Required. Resource name of backup vault which will be used as storage
 *  location for backups. Format:
 *  projects/{project}/locations/{location}/backupVaults/{backupvault}
 */
@property(nonatomic, copy, nullable) NSString *backupVault;

/**
 *  Output only. The Google Cloud Platform Service Account to be used by the
 *  BackupVault for taking backups. Specify the email address of the Backup
 *  Vault Service Account.
 */
@property(nonatomic, copy, nullable) NSString *backupVaultServiceAccount;

/** Output only. When the `BackupPlan` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The description of the `BackupPlan` resource. The description
 *  allows for additional details about `BackupPlan` and its use cases to be
 *  provided. An example description is the following: "This is a backup plan
 *  that performs a daily backup at 6pm and retains data for 3 months". The
 *  description must be at most 2048 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. `etag` is returned from the service in the response. As a user of
 *  the service, you may provide an etag value in this field to prevent stale
 *  resources.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. This collection of key/value pairs allows for custom labels to be
 *  supplied by the user. Example, {"tag": "Weekly"}.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupPlan_Labels *labels;

/**
 *  Output only. Identifier. The resource name of the `BackupPlan`. Format:
 *  `projects/{project}/locations/{location}/backupPlans/{backup_plan}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The resource type to which the `BackupPlan` will be applied.
 *  Examples include, "compute.googleapis.com/Instance" and
 *  "storage.googleapis.com/Bucket".
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  Output only. The `State` for the `BackupPlan`.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_BackupPlan_State_Active The resource has been
 *        created and is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_BackupPlan_State_Creating The resource is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_BackupPlan_State_Deleting The resource is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_BackupPlan_State_Inactive The resource has been
 *        created but is not usable. (Value: "INACTIVE")
 *    @arg @c kGTLRBackupdr_BackupPlan_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. When the `BackupPlan` was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. This collection of key/value pairs allows for custom labels to be
 *  supplied by the user. Example, {"tag": "Weekly"}.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_BackupPlan_Labels : GTLRObject
@end


/**
 *  A BackupPlanAssociation represents a single BackupPlanAssociation which
 *  contains details like workload, backup plan etc
 */
@interface GTLRBackupdr_BackupPlanAssociation : GTLRObject

/**
 *  Required. Resource name of backup plan which needs to be applied on
 *  workload. Format:
 *  projects/{project}/locations/{location}/backupPlans/{backupPlanId}
 */
@property(nonatomic, copy, nullable) NSString *backupPlan;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Output Only. Resource name of data source which will be used as
 *  storage location for backups taken. Format :
 *  projects/{project}/locations/{location}/backupVaults/{backupvault}/dataSources/{datasource}
 */
@property(nonatomic, copy, nullable) NSString *dataSource;

/**
 *  Output only. Identifier. The resource name of BackupPlanAssociation in below
 *  format Format :
 *  projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Immutable. Resource name of workload on which backupplan is
 *  applied
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Output only. Output Only. Resource type of workload on which backupplan is
 *  applied
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/** Output only. The config info related to backup rules. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_RuleConfigInfo *> *rulesConfigInfo;

/**
 *  Output only. The BackupPlanAssociation resource state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_BackupPlanAssociation_State_Active The resource has
 *        been created and is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_BackupPlanAssociation_State_Creating The resource is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_BackupPlanAssociation_State_Deleting The resource is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_BackupPlanAssociation_State_Inactive The resource
 *        has been created but is not usable. (Value: "INACTIVE")
 *    @arg @c kGTLRBackupdr_BackupPlanAssociation_State_StateUnspecified State
 *        not set. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  `BackupRule` binds the backup schedule to a retention policy.
 */
@interface GTLRBackupdr_BackupRule : GTLRObject

/**
 *  Required. Configures the duration for which backup data will be kept. It is
 *  defined in “days”. The value should be greater than or equal to minimum
 *  enforced retention of the backup vault.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupRetentionDays;

/**
 *  Required. Immutable. The unique id of this `BackupRule`. The `rule_id` is
 *  unique per `BackupPlan`.The `rule_id` must start with a lowercase letter
 *  followed by up to 62 lowercase letters, numbers, or hyphens. Pattern,
 *  /a-z{,62}/.
 */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Required. Defines a schedule that runs within the confines of a defined
 *  window of time.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_StandardSchedule *standardSchedule;

@end


/**
 *  Message describing a BackupVault object.
 */
@interface GTLRBackupdr_BackupVault : GTLRObject

/**
 *  Optional. User annotations. See https://google.aip.dev/128#annotations
 *  Stores small amounts of arbitrary data.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupVault_Annotations *annotations;

/**
 *  Output only. The number of backups in this backup vault.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupCount;

/**
 *  Required. The default and minimum enforced retention for each backup within
 *  the backup vault. The enforced retention for each backup can be extended.
 */
@property(nonatomic, strong, nullable) GTLRDuration *backupMinimumEnforcedRetentionDuration;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Set to true when there are no backups nested under this
 *  resource.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletable;

/**
 *  Optional. The description of the BackupVault instance (2048 characters or
 *  less).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. Time after which the BackupVault resource is locked. */
@property(nonatomic, strong, nullable) GTLRDateTime *effectiveTime;

/**
 *  Optional. Server specified ETag for the backup vault resource to prevent
 *  simultaneous updates from overwiting each other.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined:
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupVault_Labels *labels;

/** Output only. Identifier. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Service account used by the BackupVault Service for this
 *  BackupVault. The user should grant this account permissions in their
 *  workload project to enable the service to run backups and restores there.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. The BackupVault resource instance state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_BackupVault_State_Active The backup vault has been
 *        created and is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_BackupVault_State_Creating The backup vault is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_BackupVault_State_Deleting The backup vault is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_BackupVault_State_Error The backup vault is
 *        experiencing an issue and might be unusable. (Value: "ERROR")
 *    @arg @c kGTLRBackupdr_BackupVault_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Total size of the storage used by all backup resources.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalStoredBytes;

/**
 *  Output only. Output only Immutable after resource creation until resource
 *  deletion.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User annotations. See https://google.aip.dev/128#annotations
 *  Stores small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_BackupVault_Annotations : GTLRObject
@end


/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined:
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_BackupVault_Labels : GTLRObject
@end


/**
 *  `BackupWindow` defines a window of the day during which backup jobs will
 *  run.
 */
@interface GTLRBackupdr_BackupWindow : GTLRObject

/**
 *  Required. The hour of day (1-24) when the window end for e.g. if value of
 *  end hour of day is 10 that mean backup window end time is 10:00. End hour of
 *  day should be greater than start hour of day. 0 <= start_hour_of_day <
 *  end_hour_of_day <= 24 End hour of day is not include in backup window that
 *  mean if end_hour_of_day= 10 jobs should start before 10:00.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endHourOfDay;

/**
 *  Required. The hour of day (0-23) when the window starts for e.g. if value of
 *  start hour of day is 6 that mean backup window start at 6:00.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startHourOfDay;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRBackupdr_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Policy ID that identified data placement in Blobstore as per
 *  go/blobstore-user-guide#data-metadata-placement-and-failure-domains
 */
@interface GTLRBackupdr_BlobstoreLocation : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *policyId;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRBackupdr_CancelOperationRequest : GTLRObject
@end


/**
 *  GTLRBackupdr_CloudAsset
 */
@interface GTLRBackupdr_CloudAsset : GTLRObject

@property(nonatomic, copy, nullable) NSString *assetName;
@property(nonatomic, copy, nullable) NSString *assetType;

@end


/**
 *  GTLRBackupdr_CloudAssetComposition
 */
@interface GTLRBackupdr_CloudAssetComposition : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_CloudAsset *> *childAsset;

@end


/**
 *  ComputeInstanceBackupProperties represents Compute Engine instance backup
 *  properties.
 */
@interface GTLRBackupdr_ComputeInstanceBackupProperties : GTLRObject

/**
 *  Enables instances created based on these properties to send packets with
 *  source IP addresses other than their own and receive packets with
 *  destination IP addresses other than their own. If these instances will be
 *  used as an IP gateway or it will be set as the next-hop in a Route resource,
 *  specify `true`. If unsure, leave this set to `false`. See the
 *  https://cloud.google.com/vpc/docs/using-routes#canipforward documentation
 *  for more information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canIpForward;

/**
 *  An optional text description for the instances that are created from these
 *  properties.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  An array of disks that are associated with the instances that are created
 *  from these properties.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AttachedDisk *> *disk;

/**
 *  A list of guest accelerator cards' type and count to use for instances
 *  created from these properties.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AcceleratorConfig *> *guestAccelerator;

/**
 *  KeyRevocationActionType of the instance. Supported options are "STOP" and
 *  "NONE". The default value is "NONE" if it is not specified.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_KeyRevocationActionTypeUnspecified
 *        Default value. This value is unused. (Value:
 *        "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_None
 *        Indicates user chose no operation. (Value: "NONE")
 *    @arg @c kGTLRBackupdr_ComputeInstanceBackupProperties_KeyRevocationActionType_Stop
 *        Indicates user chose to opt for VM shutdown on key revocation. (Value:
 *        "STOP")
 */
@property(nonatomic, copy, nullable) NSString *keyRevocationActionType;

/** Labels to apply to instances that are created from these properties. */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceBackupProperties_Labels *labels;

/**
 *  The machine type to use for instances that are created from these
 *  properties.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The metadata key/value pairs to assign to instances that are created from
 *  these properties. These pairs can consist of custom metadata or predefined
 *  keys. See https://cloud.google.com/compute/docs/metadata/overview for more
 *  information.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Metadata *metadata;

/**
 *  Minimum cpu/platform to be used by instances. The instance may be scheduled
 *  on the specified or newer cpu/platform. Applicable values are the friendly
 *  names of CPU platforms, such as `minCpuPlatform: Intel Haswell` or
 *  `minCpuPlatform: Intel Sandy Bridge`. For more information, read
 *  https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
 */
@property(nonatomic, copy, nullable) NSString *minCpuPlatform;

/** An array of network access configurations for this interface. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_NetworkInterface *> *networkInterface;

/**
 *  Specifies the scheduling options for the instances that are created from
 *  these properties.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Scheduling *scheduling;

/**
 *  A list of service accounts with specified scopes. Access tokens for these
 *  service accounts are available to the instances that are created from these
 *  properties. Use metadata queries to obtain the access tokens for these
 *  instances.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_ServiceAccount *> *serviceAccount;

/**
 *  The source instance used to create this backup. This can be a partial or
 *  full URL to the resource. For example, the following are valid values:
 *  -https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance
 *  -projects/project/zones/zone/instances/instance
 */
@property(nonatomic, copy, nullable) NSString *sourceInstance;

/**
 *  A list of tags to apply to the instances that are created from these
 *  properties. The tags identify valid sources or targets for network
 *  firewalls. The setTags method can modify this list of tags. Each tag within
 *  the list must comply with RFC1035 (https://www.ietf.org/rfc/rfc1035.txt).
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Tags *tags;

@end


/**
 *  Labels to apply to instances that are created from these properties.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_ComputeInstanceBackupProperties_Labels : GTLRObject
@end


/**
 *  ComputeInstanceDataSourceProperties represents the properties of a
 *  ComputeEngine resource that are stored in the DataSource.
 */
@interface GTLRBackupdr_ComputeInstanceDataSourceProperties : GTLRObject

/**
 *  The description of the Compute Engine instance.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The machine type of the instance. */
@property(nonatomic, copy, nullable) NSString *machineType;

/** Name of the compute instance backed up by the datasource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The total number of disks attached to the Instance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalDiskCount;

/**
 *  The sum of all the disk sizes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalDiskSizeGb;

@end


/**
 *  ComputeInstanceRestoreProperties represents Compute Engine instance
 *  properties to be overridden during restore.
 */
@interface GTLRBackupdr_ComputeInstanceRestoreProperties : GTLRObject

/** Optional. Controls for advanced machine-related behavior features. */
@property(nonatomic, strong, nullable) GTLRBackupdr_AdvancedMachineFeatures *advancedMachineFeatures;

/**
 *  Optional. Allows this instance to send and receive packets with non-matching
 *  destination or source IPs.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canIpForward;

/** Optional. Controls Confidential compute options on the instance */
@property(nonatomic, strong, nullable) GTLRBackupdr_ConfidentialInstanceConfig *confidentialInstanceConfig;

/**
 *  Optional. Whether the resource should be protected against deletion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletionProtection;

/**
 *  Optional. An optional description of this resource. Provide this property
 *  when you create the resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Array of disks associated with this instance. Persistent disks
 *  must be created before you can assign them.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AttachedDisk *> *disks;

/** Optional. Enables display device for the instance. */
@property(nonatomic, strong, nullable) GTLRBackupdr_DisplayDevice *displayDevice;

/**
 *  Optional. A list of the type and count of accelerator cards attached to the
 *  instance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AcceleratorConfig *> *guestAccelerators;

/**
 *  Optional. Specifies the hostname of the instance. The specified hostname
 *  must be RFC1035 compliant. If hostname is not specified, the default
 *  hostname is [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global
 *  DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal
 *  DNS.
 */
@property(nonatomic, copy, nullable) NSString *hostname;

/**
 *  Optional. Encrypts suspended data for an instance with a customer-managed
 *  encryption key.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_CustomerEncryptionKey *instanceEncryptionKey;

/**
 *  Optional. KeyRevocationActionType of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_KeyRevocationActionTypeUnspecified
 *        Default value. This value is unused. (Value:
 *        "KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_None
 *        Indicates user chose no operation. (Value: "NONE")
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_KeyRevocationActionType_Stop
 *        Indicates user chose to opt for VM shutdown on key revocation. (Value:
 *        "STOP")
 */
@property(nonatomic, copy, nullable) NSString *keyRevocationActionType;

/** Optional. Labels to apply to this instance. */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceRestoreProperties_Labels *labels;

/**
 *  Optional. Full or partial URL of the machine type resource to use for this
 *  instance.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/** Optional. This includes custom metadata and predefined keys. */
@property(nonatomic, strong, nullable) GTLRBackupdr_Metadata *metadata;

/** Optional. Minimum CPU platform to use for this instance. */
@property(nonatomic, copy, nullable) NSString *minCpuPlatform;

/** Required. Name of the compute instance. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An array of network configurations for this instance. These
 *  specify how interfaces are configured to interact with other network
 *  services, such as connecting to the internet. Multiple interfaces are
 *  supported per instance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_NetworkInterface *> *networkInterfaces;

/** Optional. Configure network performance such as egress bandwidth tier. */
@property(nonatomic, strong, nullable) GTLRBackupdr_NetworkPerformanceConfig *networkPerformanceConfig;

/**
 *  Input only. Additional params passed with the request, but not persisted as
 *  part of resource payload.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_InstanceParams *params;

/**
 *  Optional. The private IPv6 google access type for the VM. If not specified,
 *  use INHERIT_FROM_SUBNETWORK as default.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_EnableBidirectionalAccessToGoogle
 *        Bidirectional private IPv6 access to/from Google services. If
 *        specified, the subnetwork who is attached to the instance's default
 *        network interface will be assigned an internal IPv6 prefix if it
 *        doesn't have before. (Value: "ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_EnableOutboundVmAccessToGoogle
 *        Outbound private IPv6 access from VMs in this subnet to Google
 *        services. If specified, the subnetwork who is attached to the
 *        instance's default network interface will be assigned an internal IPv6
 *        prefix if it doesn't have before. (Value:
 *        "ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_InheritFromSubnetwork
 *        Each network interface inherits PrivateIpv6GoogleAccess from its
 *        subnetwork. (Value: "INHERIT_FROM_SUBNETWORK")
 *    @arg @c kGTLRBackupdr_ComputeInstanceRestoreProperties_PrivateIpv6GoogleAccess_InstancePrivateIpv6GoogleAccessUnspecified
 *        Default value. This value is unused. (Value:
 *        "INSTANCE_PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *privateIpv6GoogleAccess;

/**
 *  Optional. Specifies the reservations that this instance can consume from.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_AllocationAffinity *reservationAffinity;

/** Optional. Resource policies applied to this instance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourcePolicies;

/** Optional. Sets the scheduling options for this instance. */
@property(nonatomic, strong, nullable) GTLRBackupdr_Scheduling *scheduling;

/**
 *  Optional. A list of service accounts, with their specified scopes,
 *  authorized for this instance. Only one service account per VM instance is
 *  supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_ServiceAccount *> *serviceAccounts;

/**
 *  Optional. Tags to apply to this instance. Tags are used to identify valid
 *  sources or targets for network firewalls and are specified by the client
 *  during instance creation.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Tags *tags;

@end


/**
 *  Optional. Labels to apply to this instance.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_ComputeInstanceRestoreProperties_Labels : GTLRObject
@end


/**
 *  ComputeInstanceTargetEnvironment represents Compute Engine target
 *  environment to be used during restore.
 */
@interface GTLRBackupdr_ComputeInstanceTargetEnvironment : GTLRObject

/** Required. Target project for the Compute Engine instance. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Required. The zone of the Compute Engine instance.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  A set of Confidential Instance options.
 */
@interface GTLRBackupdr_ConfidentialInstanceConfig : GTLRObject

/**
 *  Optional. Defines whether the instance should have confidential compute
 *  enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableConfidentialCompute;

@end


/**
 *  A customer-supplied encryption key.
 */
@interface GTLRBackupdr_CustomerEncryptionKey : GTLRObject

/**
 *  Optional. The name of the encryption key that is stored in Google Cloud KMS.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Optional. The service account being used for the encryption request for the
 *  given KMS key. If absent, the Compute Engine default service account is
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyServiceAccount;

/** Optional. Specifies a 256-bit customer-supplied encryption key. */
@property(nonatomic, copy, nullable) NSString *rawKey;

/**
 *  Optional. RSA-wrapped 2048-bit customer-supplied encryption key to either
 *  encrypt or decrypt this resource.
 */
@property(nonatomic, copy, nullable) NSString *rsaEncryptedKey;

@end


/**
 *  Message describing a DataSource object. Datasource object used to represent
 *  Datasource details for both admin and basic view.
 */
@interface GTLRBackupdr_DataSource : GTLRObject

/** Output only. Details of how the resource is configured for backup. */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupConfigInfo *backupConfigInfo;

/**
 *  Number of backups in the data source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupCount;

/**
 *  Output only. The backup configuration state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_DataSource_ConfigState_Active The data source is
 *        actively protected (i.e. there is a BackupPlanAssociation or Appliance
 *        SLA pointing to it) (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_DataSource_ConfigState_BackupConfigStateUnspecified
 *        The possible states of backup configuration. Status not set. (Value:
 *        "BACKUP_CONFIG_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_DataSource_ConfigState_Passive The data source is no
 *        longer protected (but may have backups under it) (Value: "PASSIVE")
 */
@property(nonatomic, copy, nullable) NSString *configState;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The backed up resource is a backup appliance application. */
@property(nonatomic, strong, nullable) GTLRBackupdr_DataSourceBackupApplianceApplication *dataSourceBackupApplianceApplication;

/**
 *  The backed up resource is a Google Cloud resource. The word 'DataSource' was
 *  included in the names to indicate that this is the representation of the
 *  Google Cloud resource used within the DataSource object.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_DataSourceGcpResource *dataSourceGcpResource;

/**
 *  Server specified ETag for the ManagementServer resource to prevent
 *  simultaneous updates from overwiting each other.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined:
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_DataSource_Labels *labels;

/** Output only. Identifier. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The DataSource resource instance state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_DataSource_State_Active The data source has been
 *        created and is fully usable. (Value: "ACTIVE")
 *    @arg @c kGTLRBackupdr_DataSource_State_Creating The data source is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_DataSource_State_Deleting The data source is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_DataSource_State_Error The data source is
 *        experiencing an issue and might be unusable. (Value: "ERROR")
 *    @arg @c kGTLRBackupdr_DataSource_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The number of bytes (metadata and data) stored in this datasource.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalStoredBytes;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. No labels
 *  currently defined:
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_DataSource_Labels : GTLRObject
@end


/**
 *  BackupApplianceApplication describes a Source Resource when it is an
 *  application backed up by a BackupAppliance.
 */
@interface GTLRBackupdr_DataSourceBackupApplianceApplication : GTLRObject

/**
 *  Appliance Id of the Backup Appliance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applianceId;

/**
 *  The appid field of the application within the Backup Appliance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applicationId;

/** The name of the Application as known to the Backup Appliance. */
@property(nonatomic, copy, nullable) NSString *applicationName;

/** Appliance name. */
@property(nonatomic, copy, nullable) NSString *backupAppliance;

/**
 *  Hostid of the application host.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hostId;

/** Hostname of the host where the application is running. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** The type of the application. e.g. VMBackup */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  DataSourceGcpResource is used for protected resources that are Google Cloud
 *  Resources. This name is easeier to understand than GcpResourceDataSource or
 *  GcpDataSourceResource
 */
@interface GTLRBackupdr_DataSourceGcpResource : GTLRObject

/**
 *  ComputeInstanceDataSourceProperties has a subset of Compute Instance
 *  properties that are useful at the Datasource level.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceDataSourceProperties *computeInstanceDatasourceProperties;

/**
 *  Output only. Full resource pathname URL of the source Google Cloud resource.
 */
@property(nonatomic, copy, nullable) NSString *gcpResourcename;

/** Location of the resource: //"global"/"unspecified". */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The type of the Google Cloud resource. Use the Unified Resource Type, eg.
 *  compute.googleapis.com/Instance.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBackupdr_DirectLocationAssignment
 */
@interface GTLRBackupdr_DirectLocationAssignment : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_LocationAssignment *> *location;

@end


/**
 *  A set of Display Device options
 */
@interface GTLRBackupdr_DisplayDevice : GTLRObject

/**
 *  Optional. Enables display for the Compute Engine VM
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDisplay;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRBackupdr_Empty : GTLRObject
@end


/**
 *  A key/value pair to be used for storing metadata.
 */
@interface GTLRBackupdr_Entry : GTLRObject

/** Optional. Key for the metadata entry. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Optional. Value for the metadata entry. These are free-form strings, and
 *  only have meaning as interpreted by the image running in the instance. The
 *  only restriction placed on values is that their size must be less than or
 *  equal to 262144 bytes (256 KiB).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRBackupdr_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Defines parameters that should only be used for specific asset types.
 */
@interface GTLRBackupdr_ExtraParameter : GTLRObject

/**
 *  Details about zones used by regional
 *  compute.googleapis.com/InstanceGroupManager to create instances.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_RegionalMigDistributionPolicy *regionalMigDistributionPolicy;

@end


/**
 *  Request message for FetchAccessToken.
 */
@interface GTLRBackupdr_FetchAccessTokenRequest : GTLRObject

/**
 *  Required. The generation of the backup to update.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generationId;

@end


/**
 *  Response message for FetchAccessToken.
 */
@interface GTLRBackupdr_FetchAccessTokenResponse : GTLRObject

/** The token is valid until this time. */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** The location in bucket that can be used for reading. */
@property(nonatomic, copy, nullable) NSString *readLocation;

/** The downscoped token that was created. */
@property(nonatomic, copy, nullable) NSString *token;

/** The location in bucket that can be used for writing. */
@property(nonatomic, copy, nullable) NSString *writeLocation;

@end


/**
 *  Response message for fetching usable BackupVaults.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backupVaults" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_FetchUsableBackupVaultsResponse : GTLRCollectionObject

/**
 *  The list of BackupVault instances in the project for the specified location.
 *  If the '{location}' value in the request is "-", the response contains a
 *  list of instances from all locations. In case any location is unreachable,
 *  the response will only return backup vaults in reachable locations and the
 *  'unreachable' field will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupVault *> *backupVaults;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for finalizing a Backup.
 */
@interface GTLRBackupdr_FinalizeBackupRequest : GTLRObject

/**
 *  Required. Resource ID of the Backup resource to be finalized. This must be
 *  the same backup_id that was used in the InitiateBackupRequest.
 */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  The point in time when this backup was captured from the source. This will
 *  be assigned to the consistency_time field of the newly created Backup.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *consistencyTime;

/**
 *  This will be assigned to the description field of the newly created Backup.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The latest timestamp of data available in this Backup. This will be set on
 *  the newly created Backup.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *recoveryRangeEndTime;

/**
 *  The earliest timestamp of data available in this Backup. This will set on
 *  the newly created Backup.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *recoveryRangeStartTime;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  The ExpireTime on the backup will be set to FinalizeTime plus this duration.
 *  If the resulting ExpireTime is less than EnforcedRetentionEndTime, then
 *  ExpireTime is set to EnforcedRetentionEndTime.
 */
@property(nonatomic, strong, nullable) GTLRDuration *retentionDuration;

@end


/**
 *  GcpBackupConfig captures the Backup configuration details for Google Cloud
 *  resources. All Google Cloud resources regardless of type are protected with
 *  backup plan associations.
 */
@interface GTLRBackupdr_GcpBackupConfig : GTLRObject

/** The name of the backup plan. */
@property(nonatomic, copy, nullable) NSString *backupPlan;

/** The name of the backup plan association. */
@property(nonatomic, copy, nullable) NSString *backupPlanAssociation;

/** The description of the backup plan. */
@property(nonatomic, copy, nullable) NSString *backupPlanDescription;

/** The names of the backup plan rules which point to this backupvault */
@property(nonatomic, strong, nullable) NSArray<NSString *> *backupPlanRules;

@end


/**
 *  GCPBackupPlanInfo captures the plan configuration details of Google Cloud
 *  resources at the time of backup.
 */
@interface GTLRBackupdr_GCPBackupPlanInfo : GTLRObject

/**
 *  Resource name of backup plan by which workload is protected at the time of
 *  the backup. Format:
 *  projects/{project}/locations/{location}/backupPlans/{backupPlanId}
 */
@property(nonatomic, copy, nullable) NSString *backupPlan;

/**
 *  The rule id of the backup plan which triggered this backup in case of
 *  scheduled backup or used for
 */
@property(nonatomic, copy, nullable) NSString *backupPlanRuleId;

@end


/**
 *  Feature type of the Guest OS.
 */
@interface GTLRBackupdr_GuestOsFeature : GTLRObject

/**
 *  The ID of a supported feature.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_BareMetalLinuxCompatible
 *        BARE_METAL_LINUX_COMPATIBLE feature type. (Value:
 *        "BARE_METAL_LINUX_COMPATIBLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_FeatureTypeUnspecified Default
 *        value, which is unused. (Value: "FEATURE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_Gvnic GVNIC feature type.
 *        (Value: "GVNIC")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_Idpf IDPF feature type. (Value:
 *        "IDPF")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_MultiIpSubnet MULTI_IP_SUBNET
 *        feature type. (Value: "MULTI_IP_SUBNET")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SecureBoot SECURE_BOOT feature
 *        type. (Value: "SECURE_BOOT")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SevCapable SEV_CAPABLE feature
 *        type. (Value: "SEV_CAPABLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SevLiveMigratable
 *        SEV_LIVE_MIGRATABLE feature type. (Value: "SEV_LIVE_MIGRATABLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SevLiveMigratableV2
 *        SEV_LIVE_MIGRATABLE_V2 feature type. (Value: "SEV_LIVE_MIGRATABLE_V2")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SevSnpCapable SEV_SNP_CAPABLE
 *        feature type. (Value: "SEV_SNP_CAPABLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_SuspendResumeCompatible
 *        SUSPEND_RESUME_COMPATIBLE feature type. (Value:
 *        "SUSPEND_RESUME_COMPATIBLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_TdxCapable TDX_CAPABLE feature
 *        type. (Value: "TDX_CAPABLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_UefiCompatible UEFI_COMPATIBLE
 *        feature type. (Value: "UEFI_COMPATIBLE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_VirtioScsiMultiqueue
 *        VIRTIO_SCSI_MULTIQUEUE feature type. (Value: "VIRTIO_SCSI_MULTIQUEUE")
 *    @arg @c kGTLRBackupdr_GuestOsFeature_Type_Windows WINDOWS feature type.
 *        (Value: "WINDOWS")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies the parameters to initialize this disk.
 */
@interface GTLRBackupdr_InitializeParams : GTLRObject

/**
 *  Optional. Specifies the disk name. If not specified, the default is to use
 *  the name of the instance.
 */
@property(nonatomic, copy, nullable) NSString *diskName;

/**
 *  Optional. URL of the zone where the disk should be created. Required for
 *  each regional disk associated with the instance.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *replicaZones;

@end


/**
 *  request message for InitiateBackup.
 */
@interface GTLRBackupdr_InitiateBackupRequest : GTLRObject

/** Required. Resource ID of the Backup resource. */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Response message for InitiateBackup.
 */
@interface GTLRBackupdr_InitiateBackupResponse : GTLRObject

/** The name of the backup that was created. */
@property(nonatomic, copy, nullable) NSString *backup;

/**
 *  The generation id of the base backup. It is needed for the incremental
 *  backups.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseBackupGenerationId;

/**
 *  The generation id of the new backup.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newBackupGenerationId NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Additional instance params.
 */
@interface GTLRBackupdr_InstanceParams : GTLRObject

/** Optional. Resource manager tags to be bound to the instance. */
@property(nonatomic, strong, nullable) GTLRBackupdr_InstanceParams_ResourceManagerTags *resourceManagerTags;

@end


/**
 *  Optional. Resource manager tags to be bound to the instance.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_InstanceParams_ResourceManagerTags : GTLRObject
@end


/**
 *  GTLRBackupdr_IsolationExpectations
 */
@interface GTLRBackupdr_IsolationExpectations : GTLRObject

/**
 *  Explicit overrides for ZI and ZS requirements to be used for resources that
 *  should be excluded from ZI/ZS verification logic.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_RequirementOverride *requirementOverride;

/**
 *  ziOrgPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiNotRequired
 *        Value "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiPreferred Value
 *        "ZI_PREFERRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiRequired Value
 *        "ZI_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiUnknown To be
 *        used if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiOrgPolicy_ZiUnspecified
 *        Value "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziOrgPolicy;

/**
 *  ziRegionPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailClosed
 *        Value "ZI_REGION_POLICY_FAIL_CLOSED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyFailOpen
 *        Value "ZI_REGION_POLICY_FAIL_OPEN"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyNotSet
 *        Value "ZI_REGION_POLICY_NOT_SET"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnknown
 *        To be used if tracking is not available (Value:
 *        "ZI_REGION_POLICY_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionPolicy_ZiRegionPolicyUnspecified
 *        Value "ZI_REGION_POLICY_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziRegionPolicy;

/**
 *  ziRegionState
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionEnabled
 *        Value "ZI_REGION_ENABLED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionNotEnabled
 *        Value "ZI_REGION_NOT_ENABLED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionUnknown
 *        To be used if tracking is not available (Value: "ZI_REGION_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZiRegionState_ZiRegionUnspecified
 *        Value "ZI_REGION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziRegionState;

/**
 *  Deprecated: use zi_org_policy, zi_region_policy and zi_region_state instead
 *  for setting ZI expectations as per go/zicy-publish-physical-location.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiNotRequired
 *        Value "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiPreferred
 *        Value "ZI_PREFERRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiRequired Value
 *        "ZI_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiUnknown To be
 *        used if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneIsolation_ZiUnspecified
 *        Value "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zoneIsolation GTLR_DEPRECATED;

/**
 *  Deprecated: use zs_org_policy, and zs_region_stateinstead for setting Zs
 *  expectations as per go/zicy-publish-physical-location.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsNotRequired
 *        Value "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsRequired
 *        Value "ZS_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsUnknown To be
 *        used if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZoneSeparation_ZsUnspecified
 *        Value "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zoneSeparation GTLR_DEPRECATED;

/**
 *  zsOrgPolicy
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsNotRequired
 *        Value "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsRequired Value
 *        "ZS_REQUIRED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsUnknown To be
 *        used if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsOrgPolicy_ZsUnspecified
 *        Value "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsOrgPolicy;

/**
 *  zsRegionState
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionEnabled
 *        Value "ZS_REGION_ENABLED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionNotEnabled
 *        Value "ZS_REGION_NOT_ENABLED"
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionUnknown
 *        To be used if tracking of the asset ZS-bit is not available (Value:
 *        "ZS_REGION_UNKNOWN")
 *    @arg @c kGTLRBackupdr_IsolationExpectations_ZsRegionState_ZsRegionUnspecified
 *        Value "ZS_REGION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsRegionState;

@end


/**
 *  Response message for List BackupPlanAssociation
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backupPlanAssociations" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRBackupdr_ListBackupPlanAssociationsResponse : GTLRCollectionObject

/**
 *  The list of Backup Plan Associations in the project for the specified
 *  location. If the `{location}` value in the request is "-", the response
 *  contains a list of instances from all locations. In case any location is
 *  unreachable, the response will only return backup plan associations in
 *  reachable locations and the 'unreachable' field will be populated with a
 *  list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupPlanAssociation *> *backupPlanAssociations;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for getting a list of `BackupPlan`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backupPlans" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListBackupPlansResponse : GTLRCollectionObject

/**
 *  The list of `BackupPlans` in the project for the specified location. If the
 *  `{location}` value in the request is "-", the response contains a list of
 *  resources from all locations. In case any location is unreachable, the
 *  response will only return backup plans in reachable locations and the
 *  'unreachable' field will be populated with a list of unreachable locations.
 *  BackupPlan
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupPlan *> *backupPlans;

/**
 *  A token which may be sent as page_token in a subsequent `ListBackupPlans`
 *  call to retrieve the next page of results. If this field is omitted or
 *  empty, then there are no more results to return.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for listing Backups.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backups" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListBackupsResponse : GTLRCollectionObject

/**
 *  The list of Backup instances in the project for the specified location. If
 *  the '{location}' value in the request is "-", the response contains a list
 *  of instances from all locations. In case any location is unreachable, the
 *  response will only return data sources in reachable locations and the
 *  'unreachable' field will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Backup *> *backups;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for listing BackupVaults.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backupVaults" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListBackupVaultsResponse : GTLRCollectionObject

/**
 *  The list of BackupVault instances in the project for the specified location.
 *  If the '{location}' value in the request is "-", the response contains a
 *  list of instances from all locations. In case any location is unreachable,
 *  the response will only return backup vaults in reachable locations and the
 *  'unreachable' field will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_BackupVault *> *backupVaults;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for listing DataSources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "dataSources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListDataSourcesResponse : GTLRCollectionObject

/**
 *  The list of DataSource instances in the project for the specified location.
 *  If the '{location}' value in the request is "-", the response contains a
 *  list of instances from all locations. In case any location is unreachable,
 *  the response will only return data sources in reachable locations and the
 *  'unreachable' field will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_DataSource *> *dataSources;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for listing management servers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "managementServers" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRBackupdr_ListManagementServersResponse : GTLRCollectionObject

/**
 *  The list of ManagementServer instances in the project for the specified
 *  location. If the '{location}' value in the request is "-", the response
 *  contains a list of instances from all locations. In case any location is
 *  unreachable, the response will only return management servers in reachable
 *  locations and the 'unreachable' field will be populated with a list of
 *  unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_ManagementServer *> *managementServers;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBackupdr_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRBackupdr_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBackupdr_Location_Metadata : GTLRObject
@end


/**
 *  GTLRBackupdr_LocationAssignment
 */
@interface GTLRBackupdr_LocationAssignment : GTLRObject

@property(nonatomic, copy, nullable) NSString *location;

/**
 *  locationType
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_CloudRegion Value
 *        "CLOUD_REGION"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_CloudZone 11-20:
 *        Logical failure domains. (Value: "CLOUD_ZONE")
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_Cluster 1-10:
 *        Physical failure domains. (Value: "CLUSTER")
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_Global Value
 *        "GLOBAL"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_MultiRegionGeo Value
 *        "MULTI_REGION_GEO"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_MultiRegionJurisdiction
 *        Value "MULTI_REGION_JURISDICTION"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_Other Value "OTHER"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_Pop Value "POP"
 *    @arg @c kGTLRBackupdr_LocationAssignment_LocationType_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *locationType;

@end


/**
 *  GTLRBackupdr_LocationData
 */
@interface GTLRBackupdr_LocationData : GTLRObject

@property(nonatomic, strong, nullable) GTLRBackupdr_BlobstoreLocation *blobstoreLocation;
@property(nonatomic, strong, nullable) GTLRBackupdr_CloudAssetComposition *childAssetLocation;
@property(nonatomic, strong, nullable) GTLRBackupdr_DirectLocationAssignment *directLocation;
@property(nonatomic, strong, nullable) GTLRBackupdr_TenantProjectProxy *gcpProjectProxy;
@property(nonatomic, strong, nullable) GTLRBackupdr_PlacerLocation *placerLocation;
@property(nonatomic, strong, nullable) GTLRBackupdr_SpannerLocation *spannerLocation;

@end


/**
 *  ManagementServer describes a single BackupDR ManagementServer instance.
 */
@interface GTLRBackupdr_ManagementServer : GTLRObject

/**
 *  Output only. The hostname or ip address of the exposed AGM endpoints, used
 *  by BAs to connect to BA proxy.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *baProxyUri;

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The description of the ManagementServer instance (2048 characters
 *  or less).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Server specified ETag for the ManagementServer resource to prevent
 *  simultaneous updates from overwiting each other.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Resource labels to represent user provided metadata. Labels
 *  currently defined: 1. migrate_from_go= If set to true, the MS is created in
 *  migration ready mode.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_ManagementServer_Labels *labels;

/**
 *  Output only. The hostname or ip address of the exposed AGM endpoints, used
 *  by clients to connect to AGM/RD graphical user interface and APIs.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_ManagementURI *managementUri;

/** Output only. Identifier. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. VPC networks to which the ManagementServer instance is connected.
 *  For this version, only a single network is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_NetworkConfig *> *networks;

/**
 *  Output only. The OAuth 2.0 client id is required to make API calls to the
 *  BackupDR instance API of this ManagementServer. This is the value that
 *  should be provided in the 'aud' field of the OIDC ID Token (see openid
 *  specification
 *  https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
 */
@property(nonatomic, copy, nullable) NSString *oauth2ClientId;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzi;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. The ManagementServer state.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Creating The instance is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Deleting The instance is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Error The instance is
 *        experiencing an issue and might be unusable. You can get further
 *        details from the statusMessage field of Instance resource. (Value:
 *        "ERROR")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_InstanceStateUnspecified
 *        State not set. (Value: "INSTANCE_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Maintenance Maintenance is
 *        being performed on this instance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Ready The instance has been
 *        created and is fully usable. (Value: "READY")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Repairing The instance is
 *        being repaired and may be unstable. (Value: "REPAIRING")
 *    @arg @c kGTLRBackupdr_ManagementServer_State_Updating The instance
 *        configuration is being updated. Certain kinds of updates may cause the
 *        instance to become unusable while the update is in progress. (Value:
 *        "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. The type of the ManagementServer resource.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_ManagementServer_Type_BackupRestore Instance for
 *        backup and restore management (i.e., AGM). (Value: "BACKUP_RESTORE")
 *    @arg @c kGTLRBackupdr_ManagementServer_Type_InstanceTypeUnspecified
 *        Instance type is not mentioned. (Value: "INSTANCE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The time when the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. The hostnames of the exposed AGM endpoints for both types of
 *  user i.e. 1p and 3p, used to connect AGM/RM UI.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_WorkforceIdentityBasedManagementURI *workforceIdentityBasedManagementUri;

/**
 *  Output only. The OAuth client IDs for both types of user i.e. 1p and 3p.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_WorkforceIdentityBasedOAuth2ClientID *workforceIdentityBasedOauth2ClientId;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Labels
 *  currently defined: 1. migrate_from_go= If set to true, the MS is created in
 *  migration ready mode.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_ManagementServer_Labels : GTLRObject
@end


/**
 *  ManagementURI for the Management Server resource.
 */
@interface GTLRBackupdr_ManagementURI : GTLRObject

/** Output only. The ManagementServer AGM/RD API URL. */
@property(nonatomic, copy, nullable) NSString *api;

/** Output only. The ManagementServer AGM/RD WebUI URL. */
@property(nonatomic, copy, nullable) NSString *webUi;

@end


/**
 *  A metadata key/value entry.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRBackupdr_Metadata : GTLRCollectionObject

/**
 *  Optional. Array of key/value pairs. The total size of all keys and values
 *  must be less than 512 KB.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Entry *> *items;

@end


/**
 *  Network configuration for ManagementServer instance.
 */
@interface GTLRBackupdr_NetworkConfig : GTLRObject

/**
 *  Optional. The resource name of the Google Compute Engine VPC network to
 *  which the ManagementServer instance is connected.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. The network connect mode of the ManagementServer instance. For
 *  this version, only PRIVATE_SERVICE_ACCESS is supported.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NetworkConfig_PeeringMode_PeeringModeUnspecified
 *        Peering mode not set. (Value: "PEERING_MODE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_NetworkConfig_PeeringMode_PrivateServiceAccess
 *        Connect using Private Service Access to the Management Server. Private
 *        services access provides an IP address range for multiple Google Cloud
 *        services, including Cloud BackupDR. (Value: "PRIVATE_SERVICE_ACCESS")
 */
@property(nonatomic, copy, nullable) NSString *peeringMode;

@end


/**
 *  A network interface resource attached to an instance. s
 */
@interface GTLRBackupdr_NetworkInterface : GTLRObject

/**
 *  Optional. An array of configurations for this interface. Currently, only one
 *  access config,ONE_TO_ONE_NAT is supported. If there are no accessConfigs
 *  specified, then this instance will have no external internet access.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AccessConfig *> *accessConfigs;

/**
 *  Optional. An array of alias IP ranges for this network interface. You can
 *  only specify this field for network interfaces in VPC networks.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AliasIpRange *> *aliasIpRanges;

/**
 *  Optional. The prefix length of the primary internal IPv6 range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internalIpv6PrefixLength;

/**
 *  Optional. An array of IPv6 access configurations for this interface.
 *  Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there
 *  is no ipv6AccessConfig specified, then this instance will have no external
 *  IPv6 Internet access.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AccessConfig *> *ipv6AccessConfigs;

/**
 *  Optional. [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP
 *  can be accessed from the Internet. This field is always inherited from its
 *  subnetwork.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NetworkInterface_Ipv6AccessType_External This
 *        network interface can have external IPv6. (Value: "EXTERNAL")
 *    @arg @c kGTLRBackupdr_NetworkInterface_Ipv6AccessType_Internal This
 *        network interface can have internal IPv6. (Value: "INTERNAL")
 *    @arg @c kGTLRBackupdr_NetworkInterface_Ipv6AccessType_UnspecifiedIpv6AccessType
 *        IPv6 access type not set. Means this network interface hasn't been
 *        turned on IPv6 yet. (Value: "UNSPECIFIED_IPV6_ACCESS_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *ipv6AccessType;

/**
 *  Optional. An IPv6 internal network address for this network interface. To
 *  use a static internal IP address, it must be unused and in the same region
 *  as the instance's zone. If not specified, Google Cloud will automatically
 *  assign an internal IPv6 address from the instance's subnetwork.
 */
@property(nonatomic, copy, nullable) NSString *ipv6Address;

/**
 *  Output only. [Output Only] The name of the network interface, which is
 *  generated by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. URL of the VPC network resource for this instance. */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. The URL of the network attachment that this interface should
 *  connect to in the following format:
 *  projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}.
 */
@property(nonatomic, copy, nullable) NSString *networkAttachment;

/**
 *  Optional. An IPv4 internal IP address to assign to the instance for this
 *  network interface. If not specified by the user, an unused internal IP is
 *  assigned by the system.
 */
@property(nonatomic, copy, nullable) NSString *networkIP;

/**
 *  Optional. The type of vNIC to be used on this interface. This may be gVNIC
 *  or VirtioNet.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NetworkInterface_NicType_Gvnic GVNIC (Value:
 *        "GVNIC")
 *    @arg @c kGTLRBackupdr_NetworkInterface_NicType_NicTypeUnspecified Default
 *        should be NIC_TYPE_UNSPECIFIED. (Value: "NIC_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_NetworkInterface_NicType_VirtioNet VIRTIO (Value:
 *        "VIRTIO_NET")
 */
@property(nonatomic, copy, nullable) NSString *nicType;

/**
 *  Optional. The networking queue count that's specified by users for the
 *  network interface. Both Rx and Tx queues will be set to this number. It'll
 *  be empty if not specified by the users.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queueCount;

/**
 *  The stack type for this network interface.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NetworkInterface_StackType_Ipv4Ipv6 The network
 *        interface can have both IPv4 and IPv6 addresses. (Value: "IPV4_IPV6")
 *    @arg @c kGTLRBackupdr_NetworkInterface_StackType_Ipv4Only The network
 *        interface will be assigned IPv4 address. (Value: "IPV4_ONLY")
 *    @arg @c kGTLRBackupdr_NetworkInterface_StackType_StackTypeUnspecified
 *        Default should be STACK_TYPE_UNSPECIFIED. (Value:
 *        "STACK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *stackType;

/** Optional. The URL of the Subnetwork resource for this instance. */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  Network performance configuration.
 */
@interface GTLRBackupdr_NetworkPerformanceConfig : GTLRObject

/**
 *  Optional. The tier of the total egress bandwidth.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_Default
 *        Default network performance config. (Value: "DEFAULT")
 *    @arg @c kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_Tier1
 *        Tier 1 network performance config. (Value: "TIER_1")
 *    @arg @c kGTLRBackupdr_NetworkPerformanceConfig_TotalEgressBandwidthTier_TierUnspecified
 *        This value is unused. (Value: "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *totalEgressBandwidthTier;

@end


/**
 *  Node Affinity: the configuration of desired nodes onto which this Instance
 *  could be scheduled.
 */
@interface GTLRBackupdr_NodeAffinity : GTLRObject

/** Optional. Corresponds to the label key of Node resource. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Optional. Defines the operation of node selection.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_NodeAffinity_OperatorProperty_In Requires Compute
 *        Engine to seek for matched nodes. (Value: "IN")
 *    @arg @c kGTLRBackupdr_NodeAffinity_OperatorProperty_NotIn Requires Compute
 *        Engine to avoid certain nodes. (Value: "NOT_IN")
 *    @arg @c kGTLRBackupdr_NodeAffinity_OperatorProperty_OperatorUnspecified
 *        Default value. This value is unused. (Value: "OPERATOR_UNSPECIFIED")
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

/** Optional. Corresponds to the label values of Node resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRBackupdr_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRBackupdr_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBackupdr_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBackupdr_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRBackupdr_OperationMetadata : GTLRObject

/**
 *  Output only. AdditionalInfo contains additional Info related to backup plan
 *  association resource.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_OperationMetadata_AdditionalInfo *additionalInfo;

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  'Code.CANCELLED'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Output only. AdditionalInfo contains additional Info related to backup plan
 *  association resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBackupdr_OperationMetadata_AdditionalInfo : GTLRObject
@end


/**
 *  Message describing that the location of the customer resource is tied to
 *  placer allocations
 */
@interface GTLRBackupdr_PlacerLocation : GTLRObject

/**
 *  Directory with a config related to it in placer (e.g.
 *  "/placer/prod/home/my-root/my-dir")
 */
@property(nonatomic, copy, nullable) NSString *placerConfig;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRBackupdr_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  To be used for specifying the intended distribution of regional
 *  compute.googleapis.com/InstanceGroupManager instances
 */
@interface GTLRBackupdr_RegionalMigDistributionPolicy : GTLRObject

/**
 *  The shape in which the group converges around distribution of resources.
 *  Instance of proto2 enum
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetShape;

/** Cloud zones used by regional MIG to create instances. */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_ZoneConfiguration *> *zones;

@end


/**
 *  Message for deleting a DataSource.
 */
@interface GTLRBackupdr_RemoveDataSourceRequest : GTLRObject

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  GTLRBackupdr_RequirementOverride
 */
@interface GTLRBackupdr_RequirementOverride : GTLRObject

/**
 *  ziOverride
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZiOverride_ZiNotRequired Value
 *        "ZI_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZiOverride_ZiPreferred Value
 *        "ZI_PREFERRED"
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZiOverride_ZiRequired Value
 *        "ZI_REQUIRED"
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZiOverride_ZiUnknown To be used
 *        if tracking is not available (Value: "ZI_UNKNOWN")
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZiOverride_ZiUnspecified Value
 *        "ZI_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *ziOverride;

/**
 *  zsOverride
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZsOverride_ZsNotRequired Value
 *        "ZS_NOT_REQUIRED"
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZsOverride_ZsRequired Value
 *        "ZS_REQUIRED"
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZsOverride_ZsUnknown To be used
 *        if tracking is not available (Value: "ZS_UNKNOWN")
 *    @arg @c kGTLRBackupdr_RequirementOverride_ZsOverride_ZsUnspecified Value
 *        "ZS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *zsOverride;

@end


/**
 *  Request message for restoring from a Backup.
 */
@interface GTLRBackupdr_RestoreBackupRequest : GTLRObject

/** Compute Engine instance properties to be overridden during restore. */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceRestoreProperties *computeInstanceRestoreProperties;

/** Compute Engine target environment to be used during restore. */
@property(nonatomic, strong, nullable) GTLRBackupdr_ComputeInstanceTargetEnvironment *computeInstanceTargetEnvironment;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Message for rules config info.
 */
@interface GTLRBackupdr_RuleConfigInfo : GTLRObject

/**
 *  Output only. Output Only. google.rpc.Status object to store the last backup
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Status *lastBackupError;

/**
 *  Output only. The last backup state for rule.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_RuleConfigInfo_LastBackupState_Failed The last
 *        backup operation failed. (Value: "FAILED")
 *    @arg @c kGTLRBackupdr_RuleConfigInfo_LastBackupState_FirstBackupPending
 *        The first backup is pending. (Value: "FIRST_BACKUP_PENDING")
 *    @arg @c kGTLRBackupdr_RuleConfigInfo_LastBackupState_LastBackupStateUnspecified
 *        State not set. (Value: "LAST_BACKUP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_RuleConfigInfo_LastBackupState_PermissionDenied The
 *        most recent backup could not be run/failed because of the lack of
 *        permissions. (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRBackupdr_RuleConfigInfo_LastBackupState_Succeeded The last
 *        backup operation succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *lastBackupState;

/**
 *  Output only. The point in time when the last successful backup was captured
 *  from the source.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSuccessfulBackupConsistencyTime;

/** Output only. Output Only. Backup Rule id fetched from backup plan. */
@property(nonatomic, copy, nullable) NSString *ruleId;

@end


/**
 *  Sets the scheduling options for an Instance.
 */
@interface GTLRBackupdr_Scheduling : GTLRObject

/**
 *  Optional. Specifies whether the instance should be automatically restarted
 *  if it is terminated by Compute Engine (not terminated by a user).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automaticRestart;

/**
 *  Optional. Specifies the termination action for the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_Scheduling_InstanceTerminationAction_Delete Delete
 *        the VM. (Value: "DELETE")
 *    @arg @c kGTLRBackupdr_Scheduling_InstanceTerminationAction_InstanceTerminationActionUnspecified
 *        Default value. This value is unused. (Value:
 *        "INSTANCE_TERMINATION_ACTION_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_Scheduling_InstanceTerminationAction_Stop Stop the
 *        VM without storing in-memory content. default action. (Value: "STOP")
 */
@property(nonatomic, copy, nullable) NSString *instanceTerminationAction;

/**
 *  Optional. Specifies the maximum amount of time a Local Ssd Vm should wait
 *  while recovery of the Local Ssd state is attempted. Its value should be in
 *  between 0 and 168 hours with hour granularity and the default value being 1
 *  hour.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_SchedulingDuration *localSsdRecoveryTimeout;

/**
 *  Optional. The minimum number of virtual CPUs this instance will consume when
 *  running on a sole-tenant node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minNodeCpus;

/**
 *  Optional. A set of node affinity and anti-affinity configurations. Overrides
 *  reservationAffinity.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_NodeAffinity *> *nodeAffinities;

/**
 *  Optional. Defines the maintenance behavior for this instance.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_Scheduling_OnHostMaintenance_Migrate Default, Allows
 *        Compute Engine to automatically migrate instances out of the way of
 *        maintenance events. (Value: "MIGRATE")
 *    @arg @c kGTLRBackupdr_Scheduling_OnHostMaintenance_OnHostMaintenanceUnspecified
 *        Default value. This value is unused. (Value:
 *        "ON_HOST_MAINTENANCE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_Scheduling_OnHostMaintenance_Terminate Tells Compute
 *        Engine to terminate and (optionally) restart the instance away from
 *        the maintenance activity. (Value: "TERMINATE")
 */
@property(nonatomic, copy, nullable) NSString *onHostMaintenance;

/**
 *  Optional. Defines whether the instance is preemptible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preemptible;

/**
 *  Optional. Specifies the provisioning model of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_Scheduling_ProvisioningModel_ProvisioningModelUnspecified
 *        Default value. This value is not used. (Value:
 *        "PROVISIONING_MODEL_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_Scheduling_ProvisioningModel_Spot Heavily
 *        discounted, no guaranteed runtime. (Value: "SPOT")
 *    @arg @c kGTLRBackupdr_Scheduling_ProvisioningModel_Standard Standard
 *        provisioning with user controlled runtime, no discounts. (Value:
 *        "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *provisioningModel;

@end


/**
 *  A SchedulingDuration represents a fixed-length span of time represented as a
 *  count of seconds and fractions of seconds at nanosecond resolution. It is
 *  independent of any calendar and concepts like "day" or "month". Range is
 *  approximately 10,000 years.
 */
@interface GTLRBackupdr_SchedulingDuration : GTLRObject

/**
 *  Optional. Span of time that's a fraction of a second at nanosecond
 *  resolution.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Optional. Span of time at a resolution of a second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  A service account.
 */
@interface GTLRBackupdr_ServiceAccount : GTLRObject

/** Optional. Email address of the service account. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Optional. The list of scopes to be made available for this service account.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scopes;

@end


/**
 *  ServiceLockInfo represents the details of a lock taken by the service on a
 *  Backup resource.
 */
@interface GTLRBackupdr_ServiceLockInfo : GTLRObject

/**
 *  Output only. The name of the operation that created this lock. The lock will
 *  automatically be released when the operation completes.
 */
@property(nonatomic, copy, nullable) NSString *operation;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRBackupdr_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for SetStatusInternal method.
 */
@interface GTLRBackupdr_SetInternalStatusRequest : GTLRObject

/**
 *  Required. Output only. The new BackupConfigState to set for the DataSource.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_Active
 *        The data source is actively protected (i.e. there is a
 *        BackupPlanAssociation or Appliance SLA pointing to it) (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_BackupConfigStateUnspecified
 *        The possible states of backup configuration. Status not set. (Value:
 *        "BACKUP_CONFIG_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_SetInternalStatusRequest_BackupConfigState_Passive
 *        The data source is no longer protected (but may have backups under it)
 *        (Value: "PASSIVE")
 */
@property(nonatomic, copy, nullable) NSString *backupConfigState;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. The request
 *  ID must be a valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The value required for this method to work. This field must be the
 *  32-byte SHA256 hash of the DataSourceID. The DataSourceID used here is only
 *  the final piece of the fully qualified resource path for this DataSource
 *  (i.e. the part after '.../dataSources/'). This field exists to make this
 *  method difficult to call since it is intended for use only by Backup
 *  Appliances.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRBackupdr_SpannerLocation
 */
@interface GTLRBackupdr_SpannerLocation : GTLRObject

/**
 *  Set of backups used by the resource with name in the same format as what is
 *  available at http://table/spanner_automon.backup_metadata
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *backupName;

/** Set of databases used by the resource in format /span// */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dbName;

@end


/**
 *  `StandardSchedule` defines a schedule that run within the confines of a
 *  defined window of days. We can define recurrence type for schedule as
 *  HOURLY, DAILY, WEEKLY, MONTHLY or YEARLY.
 */
@interface GTLRBackupdr_StandardSchedule : GTLRObject

/**
 *  Required. A BackupWindow defines the window of day during which backup jobs
 *  will run. Jobs are queued at the beginning of the window and will be marked
 *  as `NOT_RUN` if they do not start by the end of the window. Note: running
 *  jobs will not be cancelled at the end of the window.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_BackupWindow *backupWindow;

/**
 *  Optional. Specifies days of months like 1, 5, or 14 on which jobs will run.
 *  Values for `days_of_month` are only applicable for `recurrence_type`,
 *  `MONTHLY` and `YEARLY`. A validation error will occur if other values are
 *  supplied.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *daysOfMonth;

/**
 *  Optional. Specifies days of week like, MONDAY or TUESDAY, on which jobs will
 *  run. This is required for `recurrence_type`, `WEEKLY` and is not applicable
 *  otherwise. A validation error will occur if a value is supplied and
 *  `recurrence_type` is not `WEEKLY`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *daysOfWeek;

/**
 *  Optional. Specifies frequency for hourly backups. A hourly frequency of 2
 *  means jobs will run every 2 hours from start time till end time defined.
 *  This is required for `recurrence_type`, `HOURLY` and is not applicable
 *  otherwise. A validation error will occur if a value is supplied and
 *  `recurrence_type` is not `HOURLY`. Value of hourly frequency should be
 *  between 6 and 23. Reason for limit : We found that there is bandwidth
 *  limitation of 3GB/S for GMI while taking a backup and 5GB/S while doing a
 *  restore. Given the amount of parallel backups and restore we are targeting,
 *  this will potentially take the backup time to mins and hours (in worst case
 *  scenario).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hourlyFrequency;

/**
 *  Optional. Specifies the months of year, like `FEBRUARY` and/or `MAY`, on
 *  which jobs will run. This field is only applicable when `recurrence_type` is
 *  `YEARLY`. A validation error will occur if other values are supplied.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *months;

/**
 *  Required. Specifies the `RecurrenceType` for the schedule.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_Daily The
 *        `BackupRule` is to be applied daily. (Value: "DAILY")
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_Hourly The
 *        `BackupRule` is to be applied hourly. (Value: "HOURLY")
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_Monthly The
 *        `BackupRule` is to be applied monthly. (Value: "MONTHLY")
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_RecurrenceTypeUnspecified
 *        recurrence type not set (Value: "RECURRENCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_Weekly The
 *        `BackupRule` is to be applied weekly. (Value: "WEEKLY")
 *    @arg @c kGTLRBackupdr_StandardSchedule_RecurrenceType_Yearly The
 *        `BackupRule` is to be applied yearly. (Value: "YEARLY")
 */
@property(nonatomic, copy, nullable) NSString *recurrenceType;

/**
 *  Required. The time zone to be used when interpreting the schedule. The value
 *  of this field must be a time zone name from the IANA tz database. See
 *  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for the list of
 *  valid timezone names. For e.g., Europe/Paris.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/**
 *  Optional. Specifies a week day of the month like, FIRST SUNDAY or LAST
 *  MONDAY, on which jobs will run. This will be specified by two fields in
 *  `WeekDayOfMonth`, one for the day, e.g. `MONDAY`, and one for the week, e.g.
 *  `LAST`. This field is only applicable for `recurrence_type`, `MONTHLY` and
 *  `YEARLY`. A validation error will occur if other values are supplied.
 */
@property(nonatomic, strong, nullable) GTLRBackupdr_WeekDayOfMonth *weekDayOfMonth;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRBackupdr_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBackupdr_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRBackupdr_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBackupdr_Status_Details_Item : GTLRObject
@end


/**
 *  A set of instance tags.
 */
@interface GTLRBackupdr_Tags : GTLRObject

/**
 *  Optional. An array of tags. Each tag must be 1-63 characters long, and
 *  comply with RFC1035.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *items;

@end


/**
 *  GTLRBackupdr_TenantProjectProxy
 */
@interface GTLRBackupdr_TenantProjectProxy : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *projectNumbers;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRBackupdr_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRBackupdr_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for triggering a backup.
 */
@interface GTLRBackupdr_TriggerBackupRequest : GTLRObject

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/** Required. backup rule_id for which a backup needs to be triggered. */
@property(nonatomic, copy, nullable) NSString *ruleId;

@end


/**
 *  `WeekDayOfMonth` defines the week day of the month on which the backups will
 *  run. The message combines a `WeekOfMonth` and `DayOfWeek` to produce values
 *  like `FIRST`/`MONDAY` or `LAST`/`FRIDAY`.
 */
@interface GTLRBackupdr_WeekDayOfMonth : GTLRObject

/**
 *  Required. Specifies the day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_DayOfWeekUnspecified The
 *        day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Friday Friday (Value:
 *        "FRIDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Monday Monday (Value:
 *        "MONDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Saturday Saturday (Value:
 *        "SATURDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Sunday Sunday (Value:
 *        "SUNDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Thursday Thursday (Value:
 *        "THURSDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Tuesday Tuesday (Value:
 *        "TUESDAY")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_DayOfWeek_Wednesday Wednesday (Value:
 *        "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

/**
 *  Required. Specifies the week of the month.
 *
 *  Likely values:
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_First The first week of
 *        the month. (Value: "FIRST")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Fourth The fourth week of
 *        the month. (Value: "FOURTH")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Last The last week of the
 *        month. (Value: "LAST")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Second The second week of
 *        the month. (Value: "SECOND")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_Third The third week of
 *        the month. (Value: "THIRD")
 *    @arg @c kGTLRBackupdr_WeekDayOfMonth_WeekOfMonth_WeekOfMonthUnspecified
 *        The zero value. Do not use. (Value: "WEEK_OF_MONTH_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *weekOfMonth;

@end


/**
 *  ManagementURI depending on the Workforce Identity i.e. either 1p or 3p.
 */
@interface GTLRBackupdr_WorkforceIdentityBasedManagementURI : GTLRObject

/** Output only. First party Management URI for Google Identities. */
@property(nonatomic, copy, nullable) NSString *firstPartyManagementUri;

/**
 *  Output only. Third party Management URI for External Identity Providers.
 */
@property(nonatomic, copy, nullable) NSString *thirdPartyManagementUri;

@end


/**
 *  OAuth Client ID depending on the Workforce Identity i.e. either 1p or 3p,
 */
@interface GTLRBackupdr_WorkforceIdentityBasedOAuth2ClientID : GTLRObject

/** Output only. First party OAuth Client ID for Google Identities. */
@property(nonatomic, copy, nullable) NSString *firstPartyOauth2ClientId;

/**
 *  Output only. Third party OAuth Client ID for External Identity Providers.
 */
@property(nonatomic, copy, nullable) NSString *thirdPartyOauth2ClientId;

@end


/**
 *  GTLRBackupdr_ZoneConfiguration
 */
@interface GTLRBackupdr_ZoneConfiguration : GTLRObject

/**
 *  zoneProperty
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
