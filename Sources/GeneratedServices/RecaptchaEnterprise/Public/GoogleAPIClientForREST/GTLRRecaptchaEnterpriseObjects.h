// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   reCAPTCHA Enterprise API (recaptchaenterprise/v1)
// Description:
//   Help protect your website from fraudulent activity, spam, and abuse without
//   creating friction.
// Documentation:
//   https://cloud.google.com/recaptcha-enterprise/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AppleDeveloperId;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AssessmentEnvironment;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ExpressKeySettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicy;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignals;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PhoneFraudAssessment;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionData;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataAddress;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataItem;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataUser;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserId;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserInfo;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings;
@class GTLRRecaptchaEnterprise_GoogleRpcStatus;
@class GTLRRecaptchaEnterprise_GoogleRpcStatus_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment.labels

/**
 *  Default unspecified type.
 *
 *  Value: "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment_Labels_AccountDefenderLabelUnspecified;
/**
 *  The request matches a known good profile for the user.
 *
 *  Value: "PROFILE_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment_Labels_ProfileMatch;
/**
 *  The account in the request has a high number of related accounts. It does
 *  not necessarily imply that the account is bad but can require further
 *  investigation.
 *
 *  Value: "RELATED_ACCOUNTS_NUMBER_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment_Labels_RelatedAccountsNumberHigh;
/**
 *  The request matched a profile that previously had suspicious account
 *  creation behavior. This can mean that this is a fake account.
 *
 *  Value: "SUSPICIOUS_ACCOUNT_CREATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment_Labels_SuspiciousAccountCreation;
/**
 *  The request is potentially a suspicious login event and must be further
 *  verified either through multi-factor authentication or another system.
 *
 *  Value: "SUSPICIOUS_LOGIN_ACTIVITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment_Labels_SuspiciousLoginActivity;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.latestVerificationResult

/**
 *  The verification flow could not be completed due to a critical internal
 *  error.
 *
 *  Value: "ERROR_CRITICAL_INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorCriticalInternal;
/**
 *  The client has exceeded their two factor request quota for this period of
 *  time.
 *
 *  Value: "ERROR_CUSTOMER_QUOTA_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorCustomerQuotaExhausted;
/**
 *  The recipient has already been sent too many verification codes in a short
 *  amount of time.
 *
 *  Value: "ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorRecipientAbuseLimitExhausted;
/**
 *  The recipient is not allowed for account verification. This can occur during
 *  integration but should not occur in production.
 *
 *  Value: "ERROR_RECIPIENT_NOT_ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorRecipientNotAllowed;
/**
 *  The site is not properly onboarded to use the account verification feature.
 *
 *  Value: "ERROR_SITE_ONBOARDING_INCOMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorSiteOnboardingIncomplete;
/**
 *  The user failed the verification challenge.
 *
 *  Value: "ERROR_USER_NOT_VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorUserNotVerified;
/**
 *  The request parameters do not match with the token provided and cannot be
 *  processed.
 *
 *  Value: "ERROR_VERDICT_MISMATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorVerdictMismatch;
/**
 *  The request cannot be processed at the time because of an incident. This
 *  bypass can be restricted to a problematic destination email domain, a
 *  customer, or could affect the entire service.
 *
 *  Value: "ERROR_VERIFICATION_BYPASSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorVerificationBypassed;
/**
 *  No information about the latest account verification.
 *
 *  Value: "RESULT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ResultUnspecified;
/**
 *  The user was successfully verified. This means the account verification
 *  challenge was successfully completed.
 *
 *  Value: "SUCCESS_USER_VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_SuccessUserVerified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.annotation

/**
 *  Default unspecified type.
 *
 *  Value: "ANNOTATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_AnnotationUnspecified;
/**
 *  Provides information that the event turned out to be fraudulent.
 *
 *  Value: "FRAUDULENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Fraudulent;
/**
 *  Provides information that the event turned out to be legitimate.
 *
 *  Value: "LEGITIMATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Legitimate;
/**
 *  Provides information that the event was related to a login event in which
 *  the user typed the correct password. Deprecated, prefer indicating
 *  CORRECT_PASSWORD through the reasons field instead.
 *
 *  Value: "PASSWORD_CORRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordCorrect GTLR_DEPRECATED;
/**
 *  Provides information that the event was related to a login event in which
 *  the user typed the incorrect password. Deprecated, prefer indicating
 *  INCORRECT_PASSWORD through the reasons field instead.
 *
 *  Value: "PASSWORD_INCORRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordIncorrect GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.reasons

/**
 *  Indicates that the transaction had a chargeback issued with no other
 *  details. When possible, specify the type by using CHARGEBACK_FRAUD or
 *  CHARGEBACK_DISPUTE instead.
 *
 *  Value: "CHARGEBACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_Chargeback;
/**
 *  Indicates that the transaction had a chargeback issued related to the
 *  cardholder having provided their card details but allegedly not being
 *  satisfied with the purchase (for example, misrepresentation, attempted
 *  cancellation).
 *
 *  Value: "CHARGEBACK_DISPUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_ChargebackDispute;
/**
 *  Indicates that the transaction had a chargeback issued related to an alleged
 *  unauthorized transaction from the cardholder's perspective (for example, the
 *  card number was stolen).
 *
 *  Value: "CHARGEBACK_FRAUD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_ChargebackFraud;
/**
 *  Indicates the user provided the correct password.
 *
 *  Value: "CORRECT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_CorrectPassword;
/**
 *  Indicates that the user failed a 2FA challenge.
 *
 *  Value: "FAILED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_FailedTwoFactor;
/**
 *  Indicates the user provided an incorrect password.
 *
 *  Value: "INCORRECT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_IncorrectPassword;
/**
 *  Indicates that the user was served a 2FA challenge. An old assessment with
 *  `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been overwritten with
 *  `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow. This is equivalent
 *  to `FAILED_TWO_FACTOR`.
 *
 *  Value: "INITIATED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_InitiatedTwoFactor;
/**
 *  Indicates that the user passed a 2FA challenge.
 *
 *  Value: "PASSED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_PassedTwoFactor;
/**
 *  Indicates the transaction associated with the assessment is suspected of
 *  being fraudulent based on the payment method, billing details, shipping
 *  address or other transaction information.
 *
 *  Value: "PAYMENT_HEURISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_PaymentHeuristics;
/**
 *  Default unspecified reason.
 *
 *  Value: "REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_ReasonUnspecified;
/**
 *  Indicates that the completed payment transaction was refunded by the seller.
 *
 *  Value: "REFUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_Refund;
/**
 *  Indicates that the completed payment transaction was determined to be
 *  fraudulent by the seller, and was cancelled and refunded as a result.
 *
 *  Value: "REFUND_FRAUD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_RefundFraud;
/**
 *  Indicates that the user sent unwanted and abusive messages to other users of
 *  the platform, such as spam, scams, phishing, or social engineering.
 *
 *  Value: "SOCIAL_SPAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_SocialSpam;
/**
 *  Indicates that the payment transaction was accepted, and the user was
 *  charged.
 *
 *  Value: "TRANSACTION_ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_TransactionAccepted;
/**
 *  Indicates that the payment transaction was declined, for example due to
 *  invalid card details.
 *
 *  Value: "TRANSACTION_DECLINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_TransactionDeclined;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event.fraudPrevention

/**
 *  Disable Fraud Prevention for this assessment, regardless of opt-in status or
 *  Google Cloud console settings.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_Disabled;
/**
 *  Enable Fraud Prevention for this assessment, if Fraud Prevention is enabled
 *  in the Google Cloud console.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_Enabled;
/**
 *  Default, unspecified setting. If opted in for automatic detection,
 *  `fraud_prevention_assessment` is returned based on the request. Otherwise,
 *  `fraud_prevention_assessment` is returned if `transaction_data` is present
 *  in the `Event` and Fraud Prevention is enabled in the Google Cloud console.
 *
 *  Value: "FRAUD_PREVENTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_FraudPreventionUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals.cardLabels

/**
 *  No label specified.
 *
 *  Value: "CARD_LABEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals_CardLabels_CardLabelUnspecified;
/**
 *  This card has been detected as prepaid.
 *
 *  Value: "PREPAID"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals_CardLabels_Prepaid;
/**
 *  This card has been detected as being used in an unexpected geographic
 *  location.
 *
 *  Value: "UNEXPECTED_LOCATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals_CardLabels_UnexpectedLocation;
/**
 *  This card has been detected as virtual, such as a card number generated for
 *  a single transaction or merchant.
 *
 *  Value: "VIRTUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals_CardLabels_Virtual;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData.overrideType

/**
 *  Allowlist the IP address; i.e. give a `risk_analysis.score` of 0.9 for all
 *  valid assessments.
 *
 *  Value: "ALLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData_OverrideType_Allow;
/**
 *  Default override type that indicates this enum hasn't been specified.
 *
 *  Value: "OVERRIDE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData_OverrideType_OverrideTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis.reasons

/**
 *  Interactions matched the behavior of an automated agent.
 *
 *  Value: "AUTOMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_Automation;
/**
 *  Default unspecified type.
 *
 *  Value: "CLASSIFICATION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_ClassificationReasonUnspecified;
/**
 *  Too little traffic has been received from this site thus far to generate
 *  quality risk analysis.
 *
 *  Value: "LOW_CONFIDENCE_SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_LowConfidenceScore;
/**
 *  The request matches behavioral characteristics of a carding attack.
 *
 *  Value: "SUSPECTED_CARDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_SuspectedCarding;
/**
 *  The request matches behavioral characteristics of chargebacks for fraud.
 *
 *  Value: "SUSPECTED_CHARGEBACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_SuspectedChargeback;
/**
 *  Traffic volume from the event source is higher than normal.
 *
 *  Value: "TOO_MUCH_TRAFFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_TooMuchTraffic;
/**
 *  The event originated from an illegitimate environment.
 *
 *  Value: "UNEXPECTED_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_UnexpectedEnvironment;
/**
 *  Interactions with the site were significantly different than expected
 *  patterns.
 *
 *  Value: "UNEXPECTED_USAGE_PATTERNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_UnexpectedUsagePatterns;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict.reasons

/**
 *  The provided phone number was invalid
 *
 *  Value: "INVALID_PHONE_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict_Reasons_InvalidPhoneNumber;
/**
 *  Default unspecified reason
 *
 *  Value: "SMS_TOLL_FRAUD_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict_Reasons_SmsTollFraudReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions.testingChallenge

/**
 *  Challenge requests for this key always return a nocaptcha, which does not
 *  require a solution.
 *
 *  Value: "NOCAPTCHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Nocaptcha;
/**
 *  Perform the normal risk analysis and return either nocaptcha or a challenge
 *  depending on risk and trust factors.
 *
 *  Value: "TESTING_CHALLENGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_TestingChallengeUnspecified;
/**
 *  Challenge requests for this key always return an unsolvable challenge.
 *
 *  Value: "UNSOLVABLE_CHALLENGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_UnsolvableChallenge;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties.invalidReason

/**
 *  A retriable error (such as network failure) occurred on the browser. Could
 *  easily be simulated by an attacker.
 *
 *  Value: "BROWSER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_BrowserError;
/**
 *  The user verification had already been seen.
 *
 *  Value: "DUPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Dupe;
/**
 *  The user verification token had expired.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Expired;
/**
 *  Default unspecified type.
 *
 *  Value: "INVALID_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_InvalidReasonUnspecified;
/**
 *  The provided user verification token was malformed.
 *
 *  Value: "MALFORMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Malformed;
/**
 *  The user verification token was not present.
 *
 *  Value: "MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Missing;
/**
 *  If the failure reason was not accounted for.
 *
 *  Value: "UNKNOWN_INVALID_REASON"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_UnknownInvalidReason;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent.eventType

/**
 *  Indicates that the authorization attempt with the card issuer succeeded.
 *
 *  Value: "AUTHORIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Authorization;
/**
 *  Indicates that the authorization attempt with the card issuer failed. The
 *  accompanying reasons can include Visa's '54' indicating that the card is
 *  expired, or '82' indicating that the CVV is incorrect.
 *
 *  Value: "AUTHORIZATION_DECLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_AuthorizationDecline;
/**
 *  Indicates that the transaction has been canceled. Specify the reason for the
 *  cancellation. For example, 'INSUFFICIENT_INVENTORY'.
 *
 *  Value: "CANCEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Cancel;
/**
 *  Indicates that the merchant is informed by the payment network that the
 *  transaction has entered the chargeback process due to fraud. Reason code
 *  examples include Discover's '6005' and '6041'. For partial chargebacks, we
 *  recommend that you include an amount in the `value` field.
 *
 *  Value: "CHARGEBACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Chargeback;
/**
 *  Indicates that the merchant has received a chargeback alert due to fraud for
 *  the transaction. The process of resolving the dispute without involving the
 *  payment network is started.
 *
 *  Value: "CHARGEBACK_ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackAlert;
/**
 *  Indicates that the merchant has received a chargeback inquiry due to fraud
 *  for the transaction, requesting additional information before a fraud
 *  chargeback is officially issued and a formal chargeback notification is
 *  sent.
 *
 *  Value: "CHARGEBACK_INQUIRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackInquiry;
/**
 *  Indicates that the transaction has entered the chargeback process due to
 *  fraud, and that the merchant has chosen to enter representment. Reason
 *  examples include Discover's '6005' and '6041'. For partial chargebacks, we
 *  recommend that you include an amount in the `value` field.
 *
 *  Value: "CHARGEBACK_REPRESENTMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackRepresentment;
/**
 *  Indicates that the transaction has had a fraud chargeback which was
 *  illegitimate and was reversed as a result. For partial chargebacks, we
 *  recommend that you include an amount in the `value` field.
 *
 *  Value: "CHARGEBACK_REVERSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackReverse;
/**
 *  Indicates that a fraud notification is issued for the transaction, sent by
 *  the payment instrument's issuing bank because the transaction appears to be
 *  fraudulent. We recommend including TC40 or SAFE data in the `reason` field
 *  for this event type. For partial chargebacks, we recommend that you include
 *  an amount in the `value` field.
 *
 *  Value: "FRAUD_NOTIFICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_FraudNotification;
/**
 *  Indicates that the transaction is being evaluated by a human, due to
 *  suspicion or risk.
 *
 *  Value: "MANUAL_REVIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ManualReview;
/**
 *  Indicates that the transaction is approved by the merchant. The accompanying
 *  reasons can include terms such as 'INHOUSE', 'ACCERTIFY', 'CYBERSOURCE', or
 *  'MANUAL_REVIEW'.
 *
 *  Value: "MERCHANT_APPROVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_MerchantApprove;
/**
 *  Indicates that the transaction is denied and concluded due to risks detected
 *  by the merchant. The accompanying reasons can include terms such as
 *  'INHOUSE', 'ACCERTIFY', 'CYBERSOURCE', or 'MANUAL_REVIEW'.
 *
 *  Value: "MERCHANT_DENY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_MerchantDeny;
/**
 *  Indicates that the transaction is completed because the funds were settled.
 *
 *  Value: "PAYMENT_CAPTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_PaymentCapture;
/**
 *  Indicates that the transaction could not be completed because the funds were
 *  not settled.
 *
 *  Value: "PAYMENT_CAPTURE_DECLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_PaymentCaptureDecline;
/**
 *  Indicates that the completed transaction was refunded by the merchant. For
 *  partial refunds, we recommend that you include an amount in the `value`
 *  field. Reason example: 'TAX_EXEMPT' (partial refund of exempt tax)
 *
 *  Value: "REFUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Refund;
/**
 *  Indicates that the merchant has received a refund request for this
 *  transaction, but that they have declined it. For partial refunds, we
 *  recommend that you include an amount in the `value` field. Reason example:
 *  'TAX_EXEMPT' (partial refund of exempt tax)
 *
 *  Value: "REFUND_DECLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundDecline;
/**
 *  Indicates that the merchant has received a refund for a completed
 *  transaction. For partial refunds, we recommend that you include an amount in
 *  the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt
 *  tax)
 *
 *  Value: "REFUND_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundRequest;
/**
 *  Indicates that the completed transaction was refunded by the merchant, and
 *  that this refund was reversed. For partial refunds, we recommend that you
 *  include an amount in the `value` field.
 *
 *  Value: "REFUND_REVERSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundReverse;
/**
 *  Default, unspecified event type.
 *
 *  Value: "TRANSACTION_EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_TransactionEventTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings.wafFeature

/**
 *  Use reCAPTCHA action-tokens to protect user actions.
 *
 *  Value: "ACTION_TOKEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_ActionToken;
/**
 *  Redirects suspicious traffic to reCAPTCHA.
 *
 *  Value: "CHALLENGE_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_ChallengePage;
/**
 *  Use reCAPTCHA WAF express protection to protect any content other than web
 *  pages, like APIs and IoT devices.
 *
 *  Value: "EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_Express;
/**
 *  Use reCAPTCHA session-tokens to protect the whole user session on the site's
 *  domain.
 *
 *  Value: "SESSION_TOKEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_SessionToken;
/**
 *  Undefined feature.
 *
 *  Value: "WAF_FEATURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_WafFeatureUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings.wafService

/**
 *  Akamai
 *
 *  Value: "AKAMAI"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Akamai;
/**
 *  Cloud Armor
 *
 *  Value: "CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Ca;
/**
 *  Cloudflare
 *
 *  Value: "CLOUDFLARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Cloudflare;
/**
 *  Fastly
 *
 *  Value: "FASTLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Fastly;
/**
 *  Undefined WAF
 *
 *  Value: "WAF_SERVICE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_WafServiceUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings.challengeSecurityPreference

/**
 *  Key tends to show balanced (in amount and difficulty) challenges.
 *
 *  Value: "BALANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Balance;
/**
 *  Default type that indicates this enum hasn't been specified.
 *
 *  Value: "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_ChallengeSecurityPreferenceUnspecified;
/**
 *  Key tends to show more and harder challenges.
 *
 *  Value: "SECURITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Security;
/**
 *  Key tends to show fewer and easier challenges.
 *
 *  Value: "USABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Usability;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings.integrationType

/**
 *  Displays the "I'm not a robot" checkbox and may show captcha challenges
 *  after it is checked.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Checkbox;
/**
 *  Default type that indicates this enum hasn't been specified. This is not a
 *  valid IntegrationType, one of the other types must be specified instead.
 *
 *  Value: "INTEGRATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_IntegrationTypeUnspecified;
/**
 *  Doesn't display the "I'm not a robot" checkbox, but may show captcha
 *  challenges after risk analysis.
 *
 *  Value: "INVISIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Invisible;
/**
 *  Only used to produce scores. It doesn't display the "I'm not a robot"
 *  checkbox and never shows captcha challenges.
 *
 *  Value: "SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Score;

/**
 *  Account defender risk assessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment : GTLRObject

/** Output only. Labels for this request. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *labels;

@end


/**
 *  Information about account verification, used for identity verification.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo : GTLRObject

/** Optional. Endpoints that can be used for identity verification. */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo *> *endpoints;

/**
 *  Optional. Language code preference for the verification message, set as a
 *  IETF BCP 47 language code.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Output only. Result of the latest account verification challenge.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorCriticalInternal
 *        The verification flow could not be completed due to a critical
 *        internal error. (Value: "ERROR_CRITICAL_INTERNAL")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorCustomerQuotaExhausted
 *        The client has exceeded their two factor request quota for this period
 *        of time. (Value: "ERROR_CUSTOMER_QUOTA_EXHAUSTED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorRecipientAbuseLimitExhausted
 *        The recipient has already been sent too many verification codes in a
 *        short amount of time. (Value: "ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorRecipientNotAllowed
 *        The recipient is not allowed for account verification. This can occur
 *        during integration but should not occur in production. (Value:
 *        "ERROR_RECIPIENT_NOT_ALLOWED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorSiteOnboardingIncomplete
 *        The site is not properly onboarded to use the account verification
 *        feature. (Value: "ERROR_SITE_ONBOARDING_INCOMPLETE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorUserNotVerified
 *        The user failed the verification challenge. (Value:
 *        "ERROR_USER_NOT_VERIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorVerdictMismatch
 *        The request parameters do not match with the token provided and cannot
 *        be processed. (Value: "ERROR_VERDICT_MISMATCH")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ErrorVerificationBypassed
 *        The request cannot be processed at the time because of an incident.
 *        This bypass can be restricted to a problematic destination email
 *        domain, a customer, or could affect the entire service. (Value:
 *        "ERROR_VERIFICATION_BYPASSED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_ResultUnspecified
 *        No information about the latest account verification. (Value:
 *        "RESULT_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo_LatestVerificationResult_SuccessUserVerified
 *        The user was successfully verified. This means the account
 *        verification challenge was successfully completed. (Value:
 *        "SUCCESS_USER_VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *latestVerificationResult;

/**
 *  Username of the account that is being verified. Deprecated. Customers should
 *  now provide the `account_id` field in `event.user_info`.
 */
@property(nonatomic, copy, nullable) NSString *username GTLR_DEPRECATED;

@end


/**
 *  The AddIpOverride request message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AddIpOverrideRequest : GTLRObject

/** Required. IP override added to the key. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData *ipOverrideData;

@end


/**
 *  Response for AddIpOverride.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AddIpOverrideResponse : GTLRObject
@end


/**
 *  Settings specific to keys that can be used by Android apps.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings : GTLRObject

/**
 *  Optional. If set to true, allowed_package_names are not enforced.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAllPackageNames;

/**
 *  Optional. Android package names of apps allowed to use the key. Example:
 *  'com.companyname.appname'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedPackageNames;

/**
 *  Optional. Set to true for keys that are used in an Android application that
 *  is available for download in app stores in addition to the Google Play
 *  Store.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportNonGoogleAppStoreDistribution;

@end


/**
 *  The request message to annotate an Assessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest : GTLRObject

/**
 *  Optional. A stable account identifier to apply to the assessment. This is an
 *  alternative to setting `account_id` in `CreateAssessment`, for example when
 *  a stable account identifier is not yet known in the initial request.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional. The annotation that is assigned to the Event. This field can be
 *  left empty to provide reasons that apply to an event without concluding
 *  whether the event is legitimate or fraudulent.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_AnnotationUnspecified
 *        Default unspecified type. (Value: "ANNOTATION_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Fraudulent
 *        Provides information that the event turned out to be fraudulent.
 *        (Value: "FRAUDULENT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Legitimate
 *        Provides information that the event turned out to be legitimate.
 *        (Value: "LEGITIMATE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordCorrect
 *        Provides information that the event was related to a login event in
 *        which the user typed the correct password. Deprecated, prefer
 *        indicating CORRECT_PASSWORD through the reasons field instead. (Value:
 *        "PASSWORD_CORRECT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordIncorrect
 *        Provides information that the event was related to a login event in
 *        which the user typed the incorrect password. Deprecated, prefer
 *        indicating INCORRECT_PASSWORD through the reasons field instead.
 *        (Value: "PASSWORD_INCORRECT")
 */
@property(nonatomic, copy, nullable) NSString *annotation;

/**
 *  Optional. A stable hashed account identifier to apply to the assessment.
 *  This is an alternative to setting `hashed_account_id` in `CreateAssessment`,
 *  for example when a stable account identifier is not yet known in the initial
 *  request.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *hashedAccountId;

/** Optional. Reasons for the annotation that are assigned to the event. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reasons;

/**
 *  Optional. If the assessment is part of a payment transaction, provide
 *  details on payment lifecycle events that occur in the transaction.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent *transactionEvent;

@end


/**
 *  Empty response for AnnotateAssessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse : GTLRObject
@end


/**
 *  Contains fields that are required to perform Apple-specific integrity
 *  checks.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AppleDeveloperId : GTLRObject

/** Required. The Apple developer key ID (10-character string). */
@property(nonatomic, copy, nullable) NSString *keyId;

/**
 *  Required. Input only. A private key (downloaded as a text file with a .p8
 *  file extension) generated for your Apple Developer account. Ensure that
 *  Apple DeviceCheck is enabled for the private key.
 */
@property(nonatomic, copy, nullable) NSString *privateKey;

/**
 *  Required. The Apple team ID (10-character string) owning the provisioning
 *  profile used to build your application.
 */
@property(nonatomic, copy, nullable) NSString *teamId;

@end


/**
 *  A reCAPTCHA Enterprise assessment resource.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Assessment : GTLRObject

/**
 *  Output only. Assessment returned by account defender when an account
 *  identifier is provided.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment *accountDefenderAssessment;

/**
 *  Optional. Account verification information for identity verification. The
 *  assessment event must include a token and site key to use this feature.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo *accountVerification;

/**
 *  Optional. The environment creating the assessment. This describes your
 *  environment (the system invoking CreateAssessment), NOT the environment of
 *  your user.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AssessmentEnvironment *assessmentEnvironment;

/** Optional. The event being assessed. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event *event;

/**
 *  Output only. Assessment returned when firewall policies belonging to the
 *  project are evaluated using the field firewall_policy_evaluation.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment *firewallPolicyAssessment;

/**
 *  Output only. Assessment returned by Fraud Prevention when TransactionData is
 *  provided.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment *fraudPreventionAssessment;

/**
 *  Output only. Fraud Signals specific to the users involved in a payment
 *  transaction.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignals *fraudSignals;

/**
 *  Output only. Identifier. The resource name for the Assessment in the format
 *  `projects/{project}/assessments/{assessment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Assessment returned when a site key, a token, and a phone
 *  number as `user_id` are provided. Account defender and SMS toll fraud
 *  protection need to be enabled.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PhoneFraudAssessment *phoneFraudAssessment;

/**
 *  Optional. The private password leak verification field contains the
 *  parameters that are used to to check for leaks privately without sharing
 *  user credentials.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification *privatePasswordLeakVerification;

/** Output only. The risk analysis result for the event being assessed. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis *riskAnalysis;

/** Output only. Properties of the provided event token. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties *tokenProperties;

@end


/**
 *  The environment creating the assessment. This describes your environment
 *  (the system invoking CreateAssessment), NOT the environment of your user.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AssessmentEnvironment : GTLRObject

/**
 *  Optional. Identifies the client module initiating the CreateAssessment
 *  request. This can be the link to the client module's project. Examples
 *  include: -
 *  "github.com/GoogleCloudPlatform/recaptcha-enterprise-google-tag-manager" -
 *  "cloud.google.com/recaptcha/docs/implement-waf-akamai" -
 *  "cloud.google.com/recaptcha/docs/implement-waf-cloudflare" -
 *  "wordpress.org/plugins/recaptcha-something"
 */
@property(nonatomic, copy, nullable) NSString *client;

/** Optional. The version of the client module. For example, "1.0.0". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Metrics related to challenges.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics : GTLRObject

/**
 *  Count of submitted challenge solutions that were incorrect or otherwise
 *  deemed suspicious such that a subsequent challenge was triggered.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedCount;

/**
 *  Count of nocaptchas (successful verification without a challenge) issued.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nocaptchaCount;

/**
 *  Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent
 *  to a count of pageloads for pages that include reCAPTCHA.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageloadCount;

/**
 *  Count of nocaptchas (successful verification without a challenge) plus
 *  submitted challenge solutions that were correct and resulted in
 *  verification.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passedCount;

@end


/**
 *  Information about a verification endpoint that can be used for 2FA.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo : GTLRObject

/** Email address for which to trigger a verification request. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  Output only. Timestamp of the last successful verification for the endpoint,
 *  if any.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastVerificationTime;

/**
 *  Phone number for which to trigger a verification request. Should be given in
 *  E.164 format.
 */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  Output only. Token to provide to the client to trigger endpoint
 *  verification. It must be used within 15 minutes.
 */
@property(nonatomic, copy, nullable) NSString *requestToken;

@end


/**
 *  The event being assessed.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event : GTLRObject

/**
 *  Optional. The expected action for this type of event. This should be the
 *  same action provided at token generation time on client-side platforms
 *  already integrated with recaptcha enterprise.
 */
@property(nonatomic, copy, nullable) NSString *expectedAction;

/**
 *  Optional. Flag for a reCAPTCHA express request for an assessment without a
 *  token. If enabled, `site_key` must reference an Express site key.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *express;

/**
 *  Optional. Flag for enabling firewall policy config assessment. If this flag
 *  is enabled, the firewall policy is evaluated and a suggested firewall action
 *  is returned in the response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *firewallPolicyEvaluation;

/**
 *  Optional. The Fraud Prevention setting for this assessment.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_Disabled
 *        Disable Fraud Prevention for this assessment, regardless of opt-in
 *        status or Google Cloud console settings. (Value: "DISABLED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_Enabled
 *        Enable Fraud Prevention for this assessment, if Fraud Prevention is
 *        enabled in the Google Cloud console. (Value: "ENABLED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event_FraudPrevention_FraudPreventionUnspecified
 *        Default, unspecified setting. If opted in for automatic detection,
 *        `fraud_prevention_assessment` is returned based on the request.
 *        Otherwise, `fraud_prevention_assessment` is returned if
 *        `transaction_data` is present in the `Event` and Fraud Prevention is
 *        enabled in the Google Cloud console. (Value:
 *        "FRAUD_PREVENTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *fraudPrevention;

/**
 *  Optional. Deprecated: use `user_info.account_id` instead. Unique stable
 *  hashed user identifier for the request. The identifier must be hashed using
 *  hmac-sha256 with stable secret.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *hashedAccountId GTLR_DEPRECATED;

/** Optional. HTTP header information about the request. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *headers;

/** Optional. JA3 fingerprint for SSL clients. */
@property(nonatomic, copy, nullable) NSString *ja3;

/**
 *  Optional. The URI resource the user requested that triggered an assessment.
 */
@property(nonatomic, copy, nullable) NSString *requestedUri;

/**
 *  Optional. The site key that was used to invoke reCAPTCHA Enterprise on your
 *  site and generate the token.
 */
@property(nonatomic, copy, nullable) NSString *siteKey;

/**
 *  Optional. The user response token provided by the reCAPTCHA Enterprise
 *  client-side integration on your site.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Optional. Data describing a payment transaction to be assessed. Sending this
 *  data enables reCAPTCHA Enterprise Fraud Prevention and the
 *  FraudPreventionAssessment component in the response.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionData *transactionData;

/**
 *  Optional. The user agent present in the request from the user's device
 *  related to this event.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

/**
 *  Optional. Information about the user that generates this event, when they
 *  can be identified. They are often identified through the use of an account
 *  for logged-in requests or login/registration requests, or by providing user
 *  identifiers for guest actions like checkout.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserInfo *userInfo;

/**
 *  Optional. The IP address in the request from the user's device related to
 *  this event.
 */
@property(nonatomic, copy, nullable) NSString *userIpAddress;

/**
 *  Optional. Flag for running WAF token assessment. If enabled, the token must
 *  be specified, and have been created by a WAF-enabled key.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wafTokenAssessment;

@end


/**
 *  Settings specific to keys that can be used for reCAPTCHA Express.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ExpressKeySettings : GTLRObject
@end


/**
 *  An individual action. Each action represents what to do if a policy matches.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallAction : GTLRObject

/**
 *  The user request did not match any policy and should be allowed access to
 *  the requested resource.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction *allow;

/**
 *  This action denies access to a given page. The user gets an HTTP error code.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction *block;

/**
 *  This action injects reCAPTCHA JavaScript code into the HTML page returned by
 *  the site backend.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction *includeRecaptchaScript;

/**
 *  This action redirects the request to a reCAPTCHA interstitial to attach a
 *  token.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction *redirect;

/**
 *  This action sets a custom header but allow the request to continue to the
 *  customer backend.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction *setHeader;

/** This action transparently serves a different page to an offending user. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction *substitute;

@end


/**
 *  An allow action continues processing a request unimpeded.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction : GTLRObject
@end


/**
 *  A block action serves an HTTP error code a prevents the request from hitting
 *  the backend.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction : GTLRObject
@end


/**
 *  An include reCAPTCHA script action involves injecting reCAPTCHA JavaScript
 *  code into the HTML returned by the site backend. This reCAPTCHA script is
 *  tasked with collecting user signals on the requested web page, issuing
 *  tokens as a cookie within the site domain, and enabling their utilization in
 *  subsequent page requests.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction : GTLRObject
@end


/**
 *  A redirect action returns a 307 (temporary redirect) response, pointing the
 *  user to a reCAPTCHA interstitial page to attach a token.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction : GTLRObject
@end


/**
 *  A set header action sets a header and forwards the request to the backend.
 *  This can be used to trigger custom protection implemented on the backend.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction : GTLRObject

/** Optional. The header key to set in the request to the backend server. */
@property(nonatomic, copy, nullable) NSString *key;

/** Optional. The header value to set in the request to the backend server. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A substitute action transparently serves a different page than the one
 *  requested.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction : GTLRObject

/**
 *  Optional. The address to redirect to. The target is a relative path in the
 *  current host. Example: "/blog/404.html".
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  A FirewallPolicy represents a single matching pattern and resulting actions
 *  to take.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicy : GTLRObject

/**
 *  Optional. The actions that the caller should take regarding user access.
 *  There should be at most one terminal action. A terminal action is any action
 *  that forces a response, such as `AllowAction`, `BlockAction` or
 *  `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader`
 *  might be specified. A single policy can contain up to 16 actions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallAction *> *actions;

/**
 *  Optional. A CEL (Common Expression Language) conditional expression that
 *  specifies if this policy applies to an incoming user request. If this
 *  condition evaluates to true and the requested path matched the path pattern,
 *  the associated actions should be executed by the caller. The condition
 *  string is checked for CEL syntax correctness on creation. For more
 *  information, see the [CEL spec](https://github.com/google/cel-spec) and its
 *  [language
 *  definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md).
 *  A condition has a max length of 500 characters.
 */
@property(nonatomic, copy, nullable) NSString *condition;

/**
 *  Optional. A description of what this policy aims to achieve, for convenience
 *  purposes. The description can at most include 256 UTF-8 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Identifier. The resource name for the FirewallPolicy in the format
 *  `projects/{project}/firewallpolicies/{firewallpolicy}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The path for which this policy applies, specified as a glob
 *  pattern. For more information on glob, see the [manual
 *  page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max
 *  length of 200 characters.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Policy config assessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment : GTLRObject

/**
 *  Output only. If the processing of a policy config fails, an error is
 *  populated and the firewall_policy is left empty.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleRpcStatus *error;

/**
 *  Output only. The policy that matched the request. If more than one policy
 *  may match, this is the first match. If no policy matches the incoming
 *  request, the policy field is left empty.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicy *firewallPolicy;

@end


/**
 *  Assessment for Fraud Prevention.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment : GTLRObject

/** Output only. Assessment of this transaction for behavioral trust. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict *behavioralTrustVerdict;

/**
 *  Output only. Assessment of this transaction for risk of being part of a card
 *  testing attack.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict *cardTestingVerdict;

/**
 *  Output only. Assessment of this transaction for risk of a stolen instrument.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict *stolenInstrumentVerdict;

/**
 *  Output only. Probability of this transaction being fraudulent. Summarizes
 *  the combined risk of attack vectors below. Values are from 0.0 (lowest) to
 *  1.0 (highest).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transactionRisk;

@end


/**
 *  Information about behavioral trust of the transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict : GTLRObject

/**
 *  Output only. Probability of this transaction attempt being executed in a
 *  behaviorally trustworthy way. Values are from 0.0 (lowest) to 1.0 (highest).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trust;

@end


/**
 *  Information about card testing fraud, where an adversary is testing
 *  fraudulently obtained cards or brute forcing their details.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict : GTLRObject

/**
 *  Output only. Probability of this transaction attempt being part of a card
 *  testing attack. Values are from 0.0 (lowest) to 1.0 (highest).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *risk;

@end


/**
 *  Information about stolen instrument fraud, where the user is not the
 *  legitimate owner of the instrument being used for the purchase.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict : GTLRObject

/**
 *  Output only. Probability of this transaction being executed with a stolen
 *  instrument. Values are from 0.0 (lowest) to 1.0 (highest).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *risk;

@end


/**
 *  Fraud signals describing users and cards involved in the transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignals : GTLRObject

/**
 *  Output only. Signals describing the payment card or cards used in this
 *  transaction.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals *cardSignals;

/** Output only. Signals describing the end user in this transaction. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals *userSignals;

@end


/**
 *  Signals describing the payment card used in this transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals : GTLRObject

/** Output only. The labels for the payment card in this transaction. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *cardLabels;

@end


/**
 *  Signals describing the user involved in this transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals : GTLRObject

/**
 *  Output only. This user (based on email, phone, and other identifiers) has
 *  been seen on the internet for at least this number of days.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeDaysLowerBound;

/**
 *  Output only. Likelihood (from 0.0 to 1.0) this user includes synthetic
 *  components in their identity, such as a randomly generated email address,
 *  temporary phone number, or fake shipping address.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *syntheticRisk;

@end


/**
 *  Settings specific to keys that can be used by iOS apps.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings : GTLRObject

/**
 *  Optional. If set to true, allowed_bundle_ids are not enforced.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAllBundleIds;

/**
 *  Optional. iOS bundle ids of apps allowed to use the key. Example:
 *  'com.companyname.productname.appname'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedBundleIds;

/**
 *  Optional. Apple Developer account details for the app that is protected by
 *  the reCAPTCHA Key. reCAPTCHA leverages platform-specific checks like Apple
 *  App Attest and Apple DeviceCheck to protect your app from abuse. Providing
 *  these fields allows reCAPTCHA to get a better assessment of the integrity of
 *  your app.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AppleDeveloperId *appleDeveloperId;

@end


/**
 *  Information about the IP or IP range override.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData : GTLRObject

/**
 *  Required. The IP address to override (can be IPv4, IPv6 or CIDR). The IP
 *  override must be a valid IPv4 or IPv6 address, or a CIDR range. The IP
 *  override must be a public IP address. Example of IPv4: 168.192.5.6 Example
 *  of IPv6: 2001:0000:130F:0000:0000:09C0:876A:130B Example of IPv4 with CIDR:
 *  168.192.5.0/24 Example of IPv6 with CIDR: 2001:0DB8:1234::/48
 */
@property(nonatomic, copy, nullable) NSString *ip;

/**
 *  Required. Describes the type of IP override.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData_OverrideType_Allow
 *        Allowlist the IP address; i.e. give a `risk_analysis.score` of 0.9 for
 *        all valid assessments. (Value: "ALLOW")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData_OverrideType_OverrideTypeUnspecified
 *        Default override type that indicates this enum hasn't been specified.
 *        (Value: "OVERRIDE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *overrideType;

@end


/**
 *  A key used to identify and configure applications (web and/or mobile) that
 *  use reCAPTCHA Enterprise.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key : GTLRObject

/** Settings for keys that can be used by Android apps. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings *androidSettings;

/** Output only. The timestamp corresponding to the creation of this key. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Human-readable display name of this key. Modifiable by user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Settings for keys that can be used by reCAPTCHA Express. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ExpressKeySettings *expressSettings;

/** Settings for keys that can be used by iOS apps. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings *iosSettings;

/**
 *  Optional. See [Creating and managing labels]
 *  (https://cloud.google.com/recaptcha/docs/labels).
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels *labels;

/**
 *  Identifier. The resource name for the Key in the format
 *  `projects/{project}/keys/{key}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. Options for user acceptance testing. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions *testingOptions;

/** Optional. Settings for WAF */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings *wafSettings;

/** Settings for keys that can be used by websites. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings *webSettings;

@end


/**
 *  Optional. See [Creating and managing labels]
 *  (https://cloud.google.com/recaptcha/docs/labels).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels : GTLRObject
@end


/**
 *  Response to request to list firewall policies belonging to a project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "firewallPolicies" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse : GTLRCollectionObject

/**
 *  Policy details.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1FirewallPolicy *> *firewallPolicies;

/**
 *  Token to retrieve the next page of results. It is set to empty if no
 *  policies remain in results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for ListIpOverrides.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "ipOverrides" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListIpOverridesResponse : GTLRCollectionObject

/**
 *  IP Overrides details.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData *> *ipOverrides;

/**
 *  Token to retrieve the next page of results. If this field is empty, no keys
 *  remain in the results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response to request to list keys in a project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "keys" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListKeysResponse : GTLRCollectionObject

/**
 *  Key details.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key *> *keys;

/**
 *  Token to retrieve the next page of results. It is set to empty if no keys
 *  remain in results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response to a `ListRelatedAccountGroupMemberships` call.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "relatedAccountGroupMemberships" property. If returned as the
 *        result of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The memberships listed by the query.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership *> *relatedAccountGroupMemberships;

@end


/**
 *  The response to a `ListRelatedAccountGroups` call.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "relatedAccountGroups" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The groups of related accounts listed by the query.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup *> *relatedAccountGroups;

@end


/**
 *  Metrics for a single Key.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Metrics : GTLRObject

/**
 *  Metrics are continuous and in order by dates, and in the granularity of day.
 *  Only challenge-based keys (CHECKBOX, INVISIBLE) have challenge-based data.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics *> *challengeMetrics;

/**
 *  Output only. Identifier. The name of the metrics, in the format
 *  `projects/{project}/keys/{key}/metrics`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Metrics are continuous and in order by dates, and in the granularity of day.
 *  All Key types should have score-based data.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics *> *scoreMetrics;

/** Inclusive start time aligned to a day (UTC). */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The migrate key request message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest : GTLRObject

/**
 *  Optional. If true, skips the billing check. A reCAPTCHA Enterprise key or
 *  migrated key behaves differently than a reCAPTCHA (non-Enterprise version)
 *  key when you reach a quota limit (see
 *  https://cloud.google.com/recaptcha/quotas#quota_limit). To avoid any
 *  disruption of your usage, we check that a billing account is present. If
 *  your usage of reCAPTCHA is under the free quota, you can safely skip the
 *  billing check and proceed with the migration. See
 *  https://cloud.google.com/recaptcha/docs/billing-information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipBillingCheck;

@end


/**
 *  Assessment for Phone Fraud
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PhoneFraudAssessment : GTLRObject

/** Output only. Assessment of this phone event for risk of SMS toll fraud. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict *smsTollFraudVerdict;

@end


/**
 *  Private password leak verification info.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification : GTLRObject

/**
 *  Output only. List of prefixes of the encrypted potential password leaks that
 *  matched the given parameters. They must be compared with the client-side
 *  decryption prefix of `reencrypted_user_credentials_hash`
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *encryptedLeakMatchPrefixes;

/**
 *  Optional. Encrypted Scrypt hash of the canonicalized username+password. It
 *  is re-encrypted by the server and returned through
 *  `reencrypted_user_credentials_hash`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *encryptedUserCredentialsHash;

/**
 *  Required. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized
 *  username. It is used to look up password leaks associated with that hash
 *  prefix.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *lookupHashPrefix;

/**
 *  Output only. Corresponds to the re-encryption of the
 *  `encrypted_user_credentials_hash` field. It is used to match potential
 *  password leaks within `encrypted_leak_match_prefixes`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *reencryptedUserCredentialsHash;

@end


/**
 *  A group of related accounts.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup : GTLRObject

/**
 *  Required. Identifier. The resource name for the related account group in the
 *  format `projects/{project}/relatedaccountgroups/{related_account_group}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A membership in a group of related accounts.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership : GTLRObject

/**
 *  The unique stable account identifier of the member. The identifier
 *  corresponds to an `account_id` provided in a previous `CreateAssessment` or
 *  `AnnotateAssessment` call.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Deprecated: use `account_id` instead. The unique stable hashed account
 *  identifier of the member. The identifier corresponds to a
 *  `hashed_account_id` provided in a previous `CreateAssessment` or
 *  `AnnotateAssessment` call.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *hashedAccountId GTLR_DEPRECATED;

/**
 *  Required. Identifier. The resource name for this membership in the format
 *  `projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The removeIpOverride request message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RemoveIpOverrideRequest : GTLRObject

/** Required. IP override to be removed from the key. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IpOverrideData *ipOverrideData;

@end


/**
 *  Response for RemoveIpOverride.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RemoveIpOverrideResponse : GTLRObject
@end


/**
 *  The reorder firewall policies request message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesRequest : GTLRObject

/**
 *  Required. A list containing all policy names, in the new order. Each name is
 *  in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  The reorder firewall policies response message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesResponse : GTLRObject
@end


/**
 *  Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party
 *  integration with legacy reCAPTCHA.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse : GTLRObject

/**
 *  The secret key (also known as shared secret) authorizes communication
 *  between your application backend and the reCAPTCHA Enterprise server to
 *  create an assessment. The secret key needs to be kept safe for security
 *  purposes.
 */
@property(nonatomic, copy, nullable) NSString *legacySecretKey;

@end


/**
 *  Risk analysis result for an event.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis : GTLRObject

/**
 *  Output only. Extended verdict reasons to be used for experimentation only.
 *  The set of possible reasons is subject to change.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extendedVerdictReasons;

/** Output only. Reasons contributing to the risk analysis verdict. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reasons;

/**
 *  Output only. Legitimate event score from 0.0 to 1.0. (1.0 means very likely
 *  legitimate traffic while 0.0 means very likely non-legitimate traffic).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  Score distribution.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution : GTLRObject

/**
 *  Map key is score value multiplied by 100. The scores are discrete values
 *  between [0, 1]. The maximum number of buckets is on order of a few dozen,
 *  but typically much lower (ie. 10).
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets *scoreBuckets;

@end


/**
 *  Map key is score value multiplied by 100. The scores are discrete values
 *  between [0, 1]. The maximum number of buckets is on order of a few dozen,
 *  but typically much lower (ie. 10).
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets : GTLRObject
@end


/**
 *  Metrics related to scoring.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics : GTLRObject

/**
 *  Action-based metrics. The map key is the action name which specified by the
 *  site owners at time of the "execute" client-side call.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics *actionMetrics;

/** Aggregated score metrics for all traffic. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution *overallMetrics;

@end


/**
 *  Action-based metrics. The map key is the action name which specified by the
 *  site owners at time of the "execute" client-side call.
 *
 *  @note This class is documented as having more properties of
 *        GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics : GTLRObject
@end


/**
 *  The request message to search related account group memberships.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest : GTLRObject

/**
 *  Optional. The unique stable account identifier used to search connections.
 *  The identifier should correspond to an `account_id` provided in a previous
 *  `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or
 *  account_id must be set, but not both.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional. Deprecated: use `account_id` instead. The unique stable hashed
 *  account identifier used to search connections. The identifier should
 *  correspond to a `hashed_account_id` provided in a previous
 *  `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or
 *  account_id must be set, but not both.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *hashedAccountId GTLR_DEPRECATED;

/**
 *  Optional. The maximum number of groups to return. The service might return
 *  fewer than this value. If unspecified, at most 50 groups are returned. The
 *  maximum value is 1000; values above 1000 are coerced to 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional. A page token, received from a previous
 *  `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  `SearchRelatedAccountGroupMemberships` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  The response to a `SearchRelatedAccountGroupMemberships` call.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "relatedAccountGroupMemberships" property. If returned as the
 *        result of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The queried memberships.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership *> *relatedAccountGroupMemberships;

@end


/**
 *  Information about SMS toll fraud.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1SmsTollFraudVerdict : GTLRObject

/** Output only. Reasons contributing to the SMS toll fraud verdict. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reasons;

/**
 *  Output only. Probability of an SMS event being fraudulent. Values are from
 *  0.0 (lowest) to 1.0 (highest).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *risk;

@end


/**
 *  Options for user acceptance testing.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions : GTLRObject

/**
 *  Optional. For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge
 *  requests for this site return nocaptcha if NOCAPTCHA, or an unsolvable
 *  challenge if CHALLENGE.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Nocaptcha
 *        Challenge requests for this key always return a nocaptcha, which does
 *        not require a solution. (Value: "NOCAPTCHA")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_TestingChallengeUnspecified
 *        Perform the normal risk analysis and return either nocaptcha or a
 *        challenge depending on risk and trust factors. (Value:
 *        "TESTING_CHALLENGE_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_UnsolvableChallenge
 *        Challenge requests for this key always return an unsolvable challenge.
 *        (Value: "UNSOLVABLE_CHALLENGE")
 */
@property(nonatomic, copy, nullable) NSString *testingChallenge;

/**
 *  Optional. All assessments for this Key return this score. Must be between 0
 *  (likely not legitimate) and 1 (likely legitimate) inclusive.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testingScore;

@end


/**
 *  Properties of the provided event token.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties : GTLRObject

/** Output only. Action name provided at token generation. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Output only. The name of the Android package with which the token was
 *  generated (Android keys only).
 */
@property(nonatomic, copy, nullable) NSString *androidPackageName;

/**
 *  Output only. The timestamp corresponding to the generation of the token.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The hostname of the page on which the token was generated (Web
 *  keys only).
 */
@property(nonatomic, copy, nullable) NSString *hostname;

/**
 *  Output only. Reason associated with the response when valid = false.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_BrowserError
 *        A retriable error (such as network failure) occurred on the browser.
 *        Could easily be simulated by an attacker. (Value: "BROWSER_ERROR")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Dupe
 *        The user verification had already been seen. (Value: "DUPE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Expired
 *        The user verification token had expired. (Value: "EXPIRED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_InvalidReasonUnspecified
 *        Default unspecified type. (Value: "INVALID_REASON_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Malformed
 *        The provided user verification token was malformed. (Value:
 *        "MALFORMED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Missing
 *        The user verification token was not present. (Value: "MISSING")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_UnknownInvalidReason
 *        If the failure reason was not accounted for. (Value:
 *        "UNKNOWN_INVALID_REASON")
 */
@property(nonatomic, copy, nullable) NSString *invalidReason;

/**
 *  Output only. The ID of the iOS bundle with which the token was generated
 *  (iOS keys only).
 */
@property(nonatomic, copy, nullable) NSString *iosBundleId;

/**
 *  Output only. Whether the provided user response token is valid. When valid =
 *  false, the reason could be specified in invalid_reason or it could also be
 *  due to a user failing to solve a challenge or a sitekey mismatch (i.e the
 *  sitekey used to generate the token was different than the one specified in
 *  the assessment).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valid;

@end


/**
 *  Transaction data associated with a payment protected by reCAPTCHA
 *  Enterprise.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionData : GTLRCollectionObject

/** Optional. Address associated with the payment method when applicable. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataAddress *billingAddress;

/**
 *  Optional. The Bank Identification Number - generally the first 6 or 8 digits
 *  of the card.
 */
@property(nonatomic, copy, nullable) NSString *cardBin;

/** Optional. The last four digits of the card. */
@property(nonatomic, copy, nullable) NSString *cardLastFour;

/** Optional. The currency code in ISO-4217 format. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Optional. Information about the payment gateway's response to the
 *  transaction.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo *gatewayInfo;

/**
 *  Optional. Items purchased in this transaction.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataItem *> *items;

/**
 *  Optional. Information about the user or users fulfilling the transaction.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataUser *> *merchants;

/**
 *  Optional. The payment method for the transaction. The allowed values are: *
 *  credit-card * debit-card * gift-card * processor-{name} (If a third-party is
 *  used, for example, processor-paypal) * custom-{name} (If an alternative
 *  method is used, for example, custom-crypto)
 */
@property(nonatomic, copy, nullable) NSString *paymentMethod;

/**
 *  Optional. Destination address if this transaction involves shipping a
 *  physical item.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataAddress *shippingAddress;

/**
 *  Optional. The value of shipping in the specified currency. 0 for free or no
 *  shipping.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shippingValue;

/**
 *  Unique identifier for the transaction. This custom identifier can be used to
 *  reference this transaction in the future, for example, labeling a refund or
 *  chargeback event. Two attempts at the same transaction should use the same
 *  transaction id.
 */
@property(nonatomic, copy, nullable) NSString *transactionId;

/** Optional. Information about the user paying/initiating the transaction. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataUser *user;

/**
 *  Optional. The decimal value of the transaction in the specified currency.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  Structured address format for billing and shipping addresses.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataAddress : GTLRObject

/**
 *  Optional. The first lines of the address. The first line generally contains
 *  the street name and number, and further lines may include information such
 *  as an apartment number.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *address;

/**
 *  Optional. The state, province, or otherwise administrative area of the
 *  address.
 */
@property(nonatomic, copy, nullable) NSString *administrativeArea;

/** Optional. The town/city of the address. */
@property(nonatomic, copy, nullable) NSString *locality;

/** Optional. The postal or ZIP code of the address. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/**
 *  Optional. The recipient name, potentially including information such as
 *  "care of".
 */
@property(nonatomic, copy, nullable) NSString *recipient;

/** Optional. The CLDR country/region of the address. */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Details about the transaction from the gateway.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo : GTLRObject

/**
 *  Optional. AVS response code from the gateway (available only when reCAPTCHA
 *  Enterprise is called after authorization).
 */
@property(nonatomic, copy, nullable) NSString *avsResponseCode;

/**
 *  Optional. CVV response code from the gateway (available only when reCAPTCHA
 *  Enterprise is called after authorization).
 */
@property(nonatomic, copy, nullable) NSString *cvvResponseCode;

/**
 *  Optional. Gateway response code describing the state of the transaction.
 */
@property(nonatomic, copy, nullable) NSString *gatewayResponseCode;

/**
 *  Optional. Name of the gateway service (for example, stripe, square, paypal).
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Line items being purchased in this transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataItem : GTLRObject

/**
 *  Optional. When a merchant is specified, its corresponding account_id.
 *  Necessary to populate marketplace-style transactions.
 */
@property(nonatomic, copy, nullable) NSString *merchantAccountId;

/** Optional. The full name of the item. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The quantity of this item that is being purchased.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quantity;

/**
 *  Optional. The value per item that the user is paying, in the transaction
 *  currency, after discounts.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  Details about a user's account involved in the transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionDataUser : GTLRObject

/**
 *  Optional. Unique account identifier for this user. If using account
 *  defender, this should match the hashed_account_id field. Otherwise, a unique
 *  and persistent identifier for this account.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional. The epoch milliseconds of the user's account creation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationMs;

/** Optional. The email address of the user. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Optional. Whether the email has been verified to be accessible by the user
 *  (OTP or similar).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *emailVerified;

/** Optional. The phone number of the user, with country code. */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  Optional. Whether the phone number has been verified to be accessible by the
 *  user (OTP or similar).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *phoneVerified;

@end


/**
 *  Describes an event in the lifecycle of a payment transaction.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent : GTLRObject

/**
 *  Optional. Timestamp when this transaction event occurred; otherwise assumed
 *  to be the time of the API call.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  Optional. The type of this transaction event.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Authorization
 *        Indicates that the authorization attempt with the card issuer
 *        succeeded. (Value: "AUTHORIZATION")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_AuthorizationDecline
 *        Indicates that the authorization attempt with the card issuer failed.
 *        The accompanying reasons can include Visa's '54' indicating that the
 *        card is expired, or '82' indicating that the CVV is incorrect. (Value:
 *        "AUTHORIZATION_DECLINE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Cancel
 *        Indicates that the transaction has been canceled. Specify the reason
 *        for the cancellation. For example, 'INSUFFICIENT_INVENTORY'. (Value:
 *        "CANCEL")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Chargeback
 *        Indicates that the merchant is informed by the payment network that
 *        the transaction has entered the chargeback process due to fraud.
 *        Reason code examples include Discover's '6005' and '6041'. For partial
 *        chargebacks, we recommend that you include an amount in the `value`
 *        field. (Value: "CHARGEBACK")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackAlert
 *        Indicates that the merchant has received a chargeback alert due to
 *        fraud for the transaction. The process of resolving the dispute
 *        without involving the payment network is started. (Value:
 *        "CHARGEBACK_ALERT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackInquiry
 *        Indicates that the merchant has received a chargeback inquiry due to
 *        fraud for the transaction, requesting additional information before a
 *        fraud chargeback is officially issued and a formal chargeback
 *        notification is sent. (Value: "CHARGEBACK_INQUIRY")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackRepresentment
 *        Indicates that the transaction has entered the chargeback process due
 *        to fraud, and that the merchant has chosen to enter representment.
 *        Reason examples include Discover's '6005' and '6041'. For partial
 *        chargebacks, we recommend that you include an amount in the `value`
 *        field. (Value: "CHARGEBACK_REPRESENTMENT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ChargebackReverse
 *        Indicates that the transaction has had a fraud chargeback which was
 *        illegitimate and was reversed as a result. For partial chargebacks, we
 *        recommend that you include an amount in the `value` field. (Value:
 *        "CHARGEBACK_REVERSE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_FraudNotification
 *        Indicates that a fraud notification is issued for the transaction,
 *        sent by the payment instrument's issuing bank because the transaction
 *        appears to be fraudulent. We recommend including TC40 or SAFE data in
 *        the `reason` field for this event type. For partial chargebacks, we
 *        recommend that you include an amount in the `value` field. (Value:
 *        "FRAUD_NOTIFICATION")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_ManualReview
 *        Indicates that the transaction is being evaluated by a human, due to
 *        suspicion or risk. (Value: "MANUAL_REVIEW")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_MerchantApprove
 *        Indicates that the transaction is approved by the merchant. The
 *        accompanying reasons can include terms such as 'INHOUSE', 'ACCERTIFY',
 *        'CYBERSOURCE', or 'MANUAL_REVIEW'. (Value: "MERCHANT_APPROVE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_MerchantDeny
 *        Indicates that the transaction is denied and concluded due to risks
 *        detected by the merchant. The accompanying reasons can include terms
 *        such as 'INHOUSE', 'ACCERTIFY', 'CYBERSOURCE', or 'MANUAL_REVIEW'.
 *        (Value: "MERCHANT_DENY")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_PaymentCapture
 *        Indicates that the transaction is completed because the funds were
 *        settled. (Value: "PAYMENT_CAPTURE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_PaymentCaptureDecline
 *        Indicates that the transaction could not be completed because the
 *        funds were not settled. (Value: "PAYMENT_CAPTURE_DECLINE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_Refund
 *        Indicates that the completed transaction was refunded by the merchant.
 *        For partial refunds, we recommend that you include an amount in the
 *        `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt
 *        tax) (Value: "REFUND")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundDecline
 *        Indicates that the merchant has received a refund request for this
 *        transaction, but that they have declined it. For partial refunds, we
 *        recommend that you include an amount in the `value` field. Reason
 *        example: 'TAX_EXEMPT' (partial refund of exempt tax) (Value:
 *        "REFUND_DECLINE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundRequest
 *        Indicates that the merchant has received a refund for a completed
 *        transaction. For partial refunds, we recommend that you include an
 *        amount in the `value` field. Reason example: 'TAX_EXEMPT' (partial
 *        refund of exempt tax) (Value: "REFUND_REQUEST")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_RefundReverse
 *        Indicates that the completed transaction was refunded by the merchant,
 *        and that this refund was reversed. For partial refunds, we recommend
 *        that you include an amount in the `value` field. (Value:
 *        "REFUND_REVERSE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TransactionEvent_EventType_TransactionEventTypeUnspecified
 *        Default, unspecified event type. (Value:
 *        "TRANSACTION_EVENT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Optional. The reason or standardized code that corresponds with this
 *  transaction event, if one exists. For example, a CHARGEBACK event with code
 *  6005.
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Optional. The value that corresponds with this transaction event, if one
 *  exists. For example, a refund event where $5.00 was refunded. Currency is
 *  obtained from the original transaction data.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  An identifier associated with a user.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserId : GTLRObject

/** Optional. An email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** Optional. A phone number. Should use the E.164 format. */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  Optional. A unique username, if different from all the other identifiers and
 *  `account_id` that are provided. Can be a unique login handle or display name
 *  for a user.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  User information associated with a request protected by reCAPTCHA
 *  Enterprise.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserInfo : GTLRObject

/**
 *  Optional. For logged-in requests or login/registration requests, the unique
 *  account identifier associated with this user. You can use the username if it
 *  is stable (meaning it is the same for every request associated with the same
 *  user), or any stable user ID of your choice. Leave blank for non logged-in
 *  actions or guest checkout.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Optional. Creation time for this account associated with this user. Leave
 *  blank for non logged-in actions, guest checkout, or when there is no account
 *  associated with the current user.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createAccountTime;

/** Optional. Identifiers associated with this user or request. */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1UserId *> *userIds;

@end


/**
 *  Settings specific to keys that can be used for WAF (Web Application
 *  Firewall).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings : GTLRObject

/**
 *  Required. The WAF feature for which this key is enabled.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_ActionToken
 *        Use reCAPTCHA action-tokens to protect user actions. (Value:
 *        "ACTION_TOKEN")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_ChallengePage
 *        Redirects suspicious traffic to reCAPTCHA. (Value: "CHALLENGE_PAGE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_Express
 *        Use reCAPTCHA WAF express protection to protect any content other than
 *        web pages, like APIs and IoT devices. (Value: "EXPRESS")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_SessionToken
 *        Use reCAPTCHA session-tokens to protect the whole user session on the
 *        site's domain. (Value: "SESSION_TOKEN")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafFeature_WafFeatureUnspecified
 *        Undefined feature. (Value: "WAF_FEATURE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *wafFeature;

/**
 *  Required. The WAF service that uses this key.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Akamai
 *        Akamai (Value: "AKAMAI")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Ca
 *        Cloud Armor (Value: "CA")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Cloudflare
 *        Cloudflare (Value: "CLOUDFLARE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_Fastly
 *        Fastly (Value: "FASTLY")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WafSettings_WafService_WafServiceUnspecified
 *        Undefined WAF (Value: "WAF_SERVICE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *wafService;

@end


/**
 *  Settings specific to keys that can be used by websites.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings : GTLRObject

/**
 *  Optional. If set to true, it means allowed_domains are not enforced.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAllDomains;

/**
 *  Optional. If set to true, the key can be used on AMP (Accelerated Mobile
 *  Pages) websites. This is supported only for the SCORE integration type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAmpTraffic;

/**
 *  Optional. Domains or subdomains of websites allowed to use the key. All
 *  subdomains of an allowed domain are automatically allowed. A valid domain
 *  requires a host and must not include any path, port, query or fragment.
 *  Examples: 'example.com' or 'subdomain.example.com'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedDomains;

/**
 *  Optional. Settings for the frequency and difficulty at which this key
 *  triggers captcha challenges. This should only be specified for
 *  IntegrationTypes CHECKBOX and INVISIBLE and SCORE_AND_CHALLENGE.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Balance
 *        Key tends to show balanced (in amount and difficulty) challenges.
 *        (Value: "BALANCE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_ChallengeSecurityPreferenceUnspecified
 *        Default type that indicates this enum hasn't been specified. (Value:
 *        "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Security
 *        Key tends to show more and harder challenges. (Value: "SECURITY")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Usability
 *        Key tends to show fewer and easier challenges. (Value: "USABILITY")
 */
@property(nonatomic, copy, nullable) NSString *challengeSecurityPreference;

/**
 *  Required. Describes how this key is integrated with the website.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Checkbox
 *        Displays the "I'm not a robot" checkbox and may show captcha
 *        challenges after it is checked. (Value: "CHECKBOX")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_IntegrationTypeUnspecified
 *        Default type that indicates this enum hasn't been specified. This is
 *        not a valid IntegrationType, one of the other types must be specified
 *        instead. (Value: "INTEGRATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Invisible
 *        Doesn't display the "I'm not a robot" checkbox, but may show captcha
 *        challenges after risk analysis. (Value: "INVISIBLE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Score
 *        Only used to produce scores. It doesn't display the "I'm not a robot"
 *        checkbox and never shows captcha challenges. (Value: "SCORE")
 */
@property(nonatomic, copy, nullable) NSString *integrationType;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRRecaptchaEnterprise_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRRecaptchaEnterprise_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRRecaptchaEnterprise_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleRpcStatus_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
