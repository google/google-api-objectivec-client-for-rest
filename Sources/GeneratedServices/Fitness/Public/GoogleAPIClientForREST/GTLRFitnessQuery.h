// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Fitness API (fitness/v1)
// Description:
//   The Fitness API for managing users' fitness tracking data.
// Documentation:
//   https://developers.google.com/fit/rest/v1/get-started

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFitnessObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Fitness query classes.
 */
@interface GTLRFitnessQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Aggregates data of a certain type or stream into buckets divided by a given
 *  type of boundary. Multiple data sets of multiple types and from multiple
 *  sources can be aggregated into exactly one bucket type per request.
 *
 *  Method: fitness.users.dataset.aggregate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDatasetAggregate : GTLRFitnessQuery

/**
 *  Aggregate data for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_AggregateResponse.
 *
 *  Aggregates data of a certain type or stream into buckets divided by a given
 *  type of boundary. Multiple data sets of multiple types and from multiple
 *  sources can be aggregated into exactly one bucket type per request.
 *
 *  @param object The @c GTLRFitness_AggregateRequest to include in the query.
 *  @param userId Aggregate data for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *
 *  @return GTLRFitnessQuery_UsersDatasetAggregate
 */
+ (instancetype)queryWithObject:(GTLRFitness_AggregateRequest *)object
                         userId:(NSString *)userId;

@end

/**
 *  Creates a new data source that is unique across all data sources belonging
 *  to this user. A data source is a unique source of sensor data. Data sources
 *  can expose raw data coming from hardware sensors on local or companion
 *  devices. They can also expose derived data, created by transforming or
 *  merging other data sources. Multiple data sources can exist for the same
 *  data type. Every data point in every dataset inserted into or read from the
 *  Fitness API has an associated data source. Each data source produces a
 *  unique stream of dataset updates, with a unique data source identifier. Not
 *  all changes to data source affect the data stream ID, so that data collected
 *  by updated versions of the same application/device can still be considered
 *  to belong to the same data source. Data sources are identified using a
 *  string generated by the server, based on the contents of the source being
 *  created. The dataStreamId field should not be set when invoking this method.
 *  It will be automatically generated by the server with the correct format. If
 *  a dataStreamId is set, it must match the format that the server would
 *  generate. This format is a combination of some fields from the data source,
 *  and has a specific order. If it doesn't match, the request will fail with an
 *  error. Specifying a DataType which is not a known type (beginning with
 *  "com.google.") will create a DataSource with a *custom data type*. Custom
 *  data types are only readable by the application that created them. Custom
 *  data types are *deprecated*; use standard data types instead. In addition to
 *  the data source fields included in the data source ID, the developer project
 *  number that is authenticated when creating the data source is included. This
 *  developer project number is obfuscated when read by any other developer
 *  reading public data types.
 *
 *  Method: fitness.users.dataSources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesCreate : GTLRFitnessQuery

/**
 *  Create the data source for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_DataSource.
 *
 *  Creates a new data source that is unique across all data sources belonging
 *  to this user. A data source is a unique source of sensor data. Data sources
 *  can expose raw data coming from hardware sensors on local or companion
 *  devices. They can also expose derived data, created by transforming or
 *  merging other data sources. Multiple data sources can exist for the same
 *  data type. Every data point in every dataset inserted into or read from the
 *  Fitness API has an associated data source. Each data source produces a
 *  unique stream of dataset updates, with a unique data source identifier. Not
 *  all changes to data source affect the data stream ID, so that data collected
 *  by updated versions of the same application/device can still be considered
 *  to belong to the same data source. Data sources are identified using a
 *  string generated by the server, based on the contents of the source being
 *  created. The dataStreamId field should not be set when invoking this method.
 *  It will be automatically generated by the server with the correct format. If
 *  a dataStreamId is set, it must match the format that the server would
 *  generate. This format is a combination of some fields from the data source,
 *  and has a specific order. If it doesn't match, the request will fail with an
 *  error. Specifying a DataType which is not a known type (beginning with
 *  "com.google.") will create a DataSource with a *custom data type*. Custom
 *  data types are only readable by the application that created them. Custom
 *  data types are *deprecated*; use standard data types instead. In addition to
 *  the data source fields included in the data source ID, the developer project
 *  number that is authenticated when creating the data source is included. This
 *  developer project number is obfuscated when read by any other developer
 *  reading public data types.
 *
 *  @param object The @c GTLRFitness_DataSource to include in the query.
 *  @param userId Create the data source for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRFitness_DataSource *)object
                         userId:(NSString *)userId;

@end

/**
 *  Queries for user's data point changes for a particular data source.
 *
 *  Method: fitness.users.dataSources.dataPointChanges.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesDataPointChangesList : GTLRFitnessQuery

/** The data stream ID of the data source that created the dataset. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  If specified, no more than this many data point changes will be included in
 *  the response.
 */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The continuation token, which is used to page through large result sets. To
 *  get the next page of results, set this parameter to the value of
 *  nextPageToken from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  List data points for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_ListDataPointChangesResponse.
 *
 *  Queries for user's data point changes for a particular data source.
 *
 *  @param userId List data points for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source that created the
 *    dataset.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesDataPointChangesList
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId;

@end

/**
 *  Performs an inclusive delete of all data points whose start and end times
 *  have any overlap with the time range specified by the dataset ID. For most
 *  data types, the entire data point will be deleted. For data types where the
 *  time span represents a consistent value (such as
 *  com.google.activity.segment), and a data point straddles either end point of
 *  the dataset, only the overlapping portion of the data point will be deleted.
 *
 *  Method: fitness.users.dataSources.datasets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesDatasetsDelete : GTLRFitnessQuery

/**
 *  Dataset identifier that is a composite of the minimum data point start time
 *  and maximum data point end time represented as nanoseconds from the epoch.
 *  The ID is formatted like: "startTime-endTime" where startTime and endTime
 *  are 64 bit integers.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** The data stream ID of the data source that created the dataset. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Delete a dataset for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Performs an inclusive delete of all data points whose start and end times
 *  have any overlap with the time range specified by the dataset ID. For most
 *  data types, the entire data point will be deleted. For data types where the
 *  time span represents a consistent value (such as
 *  com.google.activity.segment), and a data point straddles either end point of
 *  the dataset, only the overlapping portion of the data point will be deleted.
 *
 *  @param userId Delete a dataset for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source that created the
 *    dataset.
 *  @param datasetId Dataset identifier that is a composite of the minimum data
 *    point start time and maximum data point end time represented as
 *    nanoseconds from the epoch. The ID is formatted like: "startTime-endTime"
 *    where startTime and endTime are 64 bit integers.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesDatasetsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId
                      datasetId:(NSString *)datasetId;

@end

/**
 *  Returns a dataset containing all data points whose start and end times
 *  overlap with the specified range of the dataset minimum start time and
 *  maximum end time. Specifically, any data point whose start time is less than
 *  or equal to the dataset end time and whose end time is greater than or equal
 *  to the dataset start time.
 *
 *  Method: fitness.users.dataSources.datasets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesDatasetsGet : GTLRFitnessQuery

/**
 *  Dataset identifier that is a composite of the minimum data point start time
 *  and maximum data point end time represented as nanoseconds from the epoch.
 *  The ID is formatted like: "startTime-endTime" where startTime and endTime
 *  are 64 bit integers.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** The data stream ID of the data source that created the dataset. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  If specified, no more than this many data points will be included in the
 *  dataset. If there are more data points in the dataset, nextPageToken will be
 *  set in the dataset response. The limit is applied from the end of the time
 *  range. That is, if pageToken is absent, the limit most recent data points
 *  will be returned.
 */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The continuation token, which is used to page through large datasets. To get
 *  the next page of a dataset, set this parameter to the value of nextPageToken
 *  from the previous response. Each subsequent call will yield a partial
 *  dataset with data point end timestamps that are strictly smaller than those
 *  in the previous partial response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Retrieve a dataset for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_Dataset.
 *
 *  Returns a dataset containing all data points whose start and end times
 *  overlap with the specified range of the dataset minimum start time and
 *  maximum end time. Specifically, any data point whose start time is less than
 *  or equal to the dataset end time and whose end time is greater than or equal
 *  to the dataset start time.
 *
 *  @param userId Retrieve a dataset for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source that created the
 *    dataset.
 *  @param datasetId Dataset identifier that is a composite of the minimum data
 *    point start time and maximum data point end time represented as
 *    nanoseconds from the epoch. The ID is formatted like: "startTime-endTime"
 *    where startTime and endTime are 64 bit integers.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesDatasetsGet
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId
                      datasetId:(NSString *)datasetId;

@end

/**
 *  Adds data points to a dataset. The dataset need not be previously created.
 *  All points within the given dataset will be returned with subsquent calls to
 *  retrieve this dataset. Data points can belong to more than one dataset. This
 *  method does not use patch semantics: the data points provided are merely
 *  inserted, with no existing data replaced.
 *
 *  Method: fitness.users.dataSources.datasets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesDatasetsPatch : GTLRFitnessQuery

/** This field is not used, and can be safely omitted. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** The data stream ID of the data source that created the dataset. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Patch a dataset for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_Dataset.
 *
 *  Adds data points to a dataset. The dataset need not be previously created.
 *  All points within the given dataset will be returned with subsquent calls to
 *  retrieve this dataset. Data points can belong to more than one dataset. This
 *  method does not use patch semantics: the data points provided are merely
 *  inserted, with no existing data replaced.
 *
 *  @param object The @c GTLRFitness_Dataset to include in the query.
 *  @param userId Patch a dataset for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source that created the
 *    dataset.
 *  @param datasetId This field is not used, and can be safely omitted.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesDatasetsPatch
 */
+ (instancetype)queryWithObject:(GTLRFitness_Dataset *)object
                         userId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId
                      datasetId:(NSString *)datasetId;

@end

/**
 *  Deletes the specified data source. The request will fail if the data source
 *  contains any data points.
 *
 *  Method: fitness.users.dataSources.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesDelete : GTLRFitnessQuery

/** The data stream ID of the data source to delete. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Retrieve a data source for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_DataSource.
 *
 *  Deletes the specified data source. The request will fail if the data source
 *  contains any data points.
 *
 *  @param userId Retrieve a data source for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source to delete.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId;

@end

/**
 *  Returns the specified data source.
 *
 *  Method: fitness.users.dataSources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesGet : GTLRFitnessQuery

/** The data stream ID of the data source to retrieve. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Retrieve a data source for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_DataSource.
 *
 *  Returns the specified data source.
 *
 *  @param userId Retrieve a data source for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source to retrieve.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId;

@end

/**
 *  Lists all data sources that are visible to the developer, using the OAuth
 *  scopes provided. The list is not exhaustive; the user may have private data
 *  sources that are only visible to other developers, or calls using other
 *  scopes.
 *
 *  Method: fitness.users.dataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesList : GTLRFitnessQuery

/**
 *  The names of data types to include in the list. If not specified, all data
 *  sources will be returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dataTypeName;

/**
 *  List data sources for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_ListDataSourcesResponse.
 *
 *  Lists all data sources that are visible to the developer, using the OAuth
 *  scopes provided. The list is not exhaustive; the user may have private data
 *  sources that are only visible to other developers, or calls using other
 *  scopes.
 *
 *  @param userId List data sources for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Updates the specified data source. The dataStreamId, dataType, type,
 *  dataStreamName, and device properties with the exception of version, cannot
 *  be modified. Data sources are identified by their dataStreamId.
 *
 *  Method: fitness.users.dataSources.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersDataSourcesUpdate : GTLRFitnessQuery

/** The data stream ID of the data source to update. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Update the data source for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_DataSource.
 *
 *  Updates the specified data source. The dataStreamId, dataType, type,
 *  dataStreamName, and device properties with the exception of version, cannot
 *  be modified. Data sources are identified by their dataStreamId.
 *
 *  @param object The @c GTLRFitness_DataSource to include in the query.
 *  @param userId Update the data source for the person identified. Use me to
 *    indicate the authenticated user. Only me is supported at this time.
 *  @param dataSourceId The data stream ID of the data source to update.
 *
 *  @return GTLRFitnessQuery_UsersDataSourcesUpdate
 */
+ (instancetype)queryWithObject:(GTLRFitness_DataSource *)object
                         userId:(NSString *)userId
                   dataSourceId:(NSString *)dataSourceId;

@end

/**
 *  Deletes a session specified by the given session ID.
 *
 *  Method: fitness.users.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersSessionsDelete : GTLRFitnessQuery

/** The ID of the session to be deleted. */
@property(nonatomic, copy, nullable) NSString *sessionId;

/**
 *  Delete a session for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a session specified by the given session ID.
 *
 *  @param userId Delete a session for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *  @param sessionId The ID of the session to be deleted.
 *
 *  @return GTLRFitnessQuery_UsersSessionsDelete
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                      sessionId:(NSString *)sessionId;

@end

/**
 *  Lists sessions previously created.
 *
 *  Method: fitness.users.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityRead
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessBloodGlucoseRead
 *    @c kGTLRAuthScopeFitnessBloodGlucoseWrite
 *    @c kGTLRAuthScopeFitnessBloodPressureRead
 *    @c kGTLRAuthScopeFitnessBloodPressureWrite
 *    @c kGTLRAuthScopeFitnessBodyRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureRead
 *    @c kGTLRAuthScopeFitnessBodyTemperatureWrite
 *    @c kGTLRAuthScopeFitnessBodyWrite
 *    @c kGTLRAuthScopeFitnessHeartRateRead
 *    @c kGTLRAuthScopeFitnessHeartRateWrite
 *    @c kGTLRAuthScopeFitnessLocationRead
 *    @c kGTLRAuthScopeFitnessLocationWrite
 *    @c kGTLRAuthScopeFitnessNutritionRead
 *    @c kGTLRAuthScopeFitnessNutritionWrite
 *    @c kGTLRAuthScopeFitnessOxygenSaturationRead
 *    @c kGTLRAuthScopeFitnessOxygenSaturationWrite
 *    @c kGTLRAuthScopeFitnessReproductiveHealthRead
 *    @c kGTLRAuthScopeFitnessReproductiveHealthWrite
 *    @c kGTLRAuthScopeFitnessSleepRead
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersSessionsList : GTLRFitnessQuery

/**
 *  If non-empty, only sessions with these activity types should be returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *activityType;

/**
 *  An RFC3339 timestamp. Only sessions ending between the start and end times
 *  will be included in the response. If this time is omitted but startTime is
 *  specified, all sessions from startTime to the end of time will be returned.
 */
@property(nonatomic, copy, nullable) NSString *endTime;

/**
 *  If true, and if both startTime and endTime are omitted, session deletions
 *  will be returned.
 */
@property(nonatomic, assign) BOOL includeDeleted;

/**
 *  The continuation token, which is used for incremental syncing. To get the
 *  next batch of changes, set this parameter to the value of nextPageToken from
 *  the previous response. The page token is ignored if either start or end time
 *  is specified. If none of start time, end time, and the page token is
 *  specified, sessions modified in the last 30 days are returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An RFC3339 timestamp. Only sessions ending between the start and end times
 *  will be included in the response. If this time is omitted but endTime is
 *  specified, all sessions from the start of time up to endTime will be
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  List sessions for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_ListSessionsResponse.
 *
 *  Lists sessions previously created.
 *
 *  @param userId List sessions for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *
 *  @return GTLRFitnessQuery_UsersSessionsList
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Updates or insert a given session.
 *
 *  Method: fitness.users.sessions.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFitnessActivityWrite
 *    @c kGTLRAuthScopeFitnessSleepWrite
 */
@interface GTLRFitnessQuery_UsersSessionsUpdate : GTLRFitnessQuery

/** The ID of the session to be created. */
@property(nonatomic, copy, nullable) NSString *sessionId;

/**
 *  Create sessions for the person identified. Use me to indicate the
 *  authenticated user. Only me is supported at this time.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRFitness_Session.
 *
 *  Updates or insert a given session.
 *
 *  @param object The @c GTLRFitness_Session to include in the query.
 *  @param userId Create sessions for the person identified. Use me to indicate
 *    the authenticated user. Only me is supported at this time.
 *  @param sessionId The ID of the session to be created.
 *
 *  @return GTLRFitnessQuery_UsersSessionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRFitness_Session *)object
                         userId:(NSString *)userId
                      sessionId:(NSString *)sessionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
