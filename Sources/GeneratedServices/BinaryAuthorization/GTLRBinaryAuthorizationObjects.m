// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Binary Authorization API (binaryauthorization/v1)
// Description:
//   The management interface for Binary Authorization, a service that provides
//   policy-based deployment validation and control for images deployed to
//   Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and
//   Cloud Run.
// Documentation:
//   https://cloud.google.com/binary-authorization/

#import <GoogleAPIClientForREST/GTLRBinaryAuthorizationObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRBinaryAuthorization_AdmissionRule.enforcementMode
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_DryrunAuditLogOnly = @"DRYRUN_AUDIT_LOG_ONLY";
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcedBlockAndAuditLog = @"ENFORCED_BLOCK_AND_AUDIT_LOG";
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EnforcementMode_EnforcementModeUnspecified = @"ENFORCEMENT_MODE_UNSPECIFIED";

// GTLRBinaryAuthorization_AdmissionRule.evaluationMode
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysAllow = @"ALWAYS_ALLOW";
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_AlwaysDeny = @"ALWAYS_DENY";
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_EvaluationModeUnspecified = @"EVALUATION_MODE_UNSPECIFIED";
NSString * const kGTLRBinaryAuthorization_AdmissionRule_EvaluationMode_RequireAttestation = @"REQUIRE_ATTESTATION";

// GTLRBinaryAuthorization_PkixPublicKey.signatureAlgorithm
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcdsaP256Sha256 = @"ECDSA_P256_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcdsaP384Sha384 = @"ECDSA_P384_SHA384";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcdsaP521Sha512 = @"ECDSA_P521_SHA512";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcSignP256Sha256 = @"EC_SIGN_P256_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcSignP384Sha384 = @"EC_SIGN_P384_SHA384";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_EcSignP521Sha512 = @"EC_SIGN_P521_SHA512";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaPss2048Sha256 = @"RSA_PSS_2048_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaPss3072Sha256 = @"RSA_PSS_3072_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaPss4096Sha256 = @"RSA_PSS_4096_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaPss4096Sha512 = @"RSA_PSS_4096_SHA512";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPkcs12048Sha256 = @"RSA_SIGN_PKCS1_2048_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPkcs13072Sha256 = @"RSA_SIGN_PKCS1_3072_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPkcs14096Sha256 = @"RSA_SIGN_PKCS1_4096_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPkcs14096Sha512 = @"RSA_SIGN_PKCS1_4096_SHA512";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPss2048Sha256 = @"RSA_SIGN_PSS_2048_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPss3072Sha256 = @"RSA_SIGN_PSS_3072_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPss4096Sha256 = @"RSA_SIGN_PSS_4096_SHA256";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_RsaSignPss4096Sha512 = @"RSA_SIGN_PSS_4096_SHA512";
NSString * const kGTLRBinaryAuthorization_PkixPublicKey_SignatureAlgorithm_SignatureAlgorithmUnspecified = @"SIGNATURE_ALGORITHM_UNSPECIFIED";

// GTLRBinaryAuthorization_Policy.globalPolicyEvaluationMode
NSString * const kGTLRBinaryAuthorization_Policy_GlobalPolicyEvaluationMode_Disable = @"DISABLE";
NSString * const kGTLRBinaryAuthorization_Policy_GlobalPolicyEvaluationMode_Enable = @"ENABLE";
NSString * const kGTLRBinaryAuthorization_Policy_GlobalPolicyEvaluationMode_GlobalPolicyEvaluationModeUnspecified = @"GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED";

// GTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse.result
NSString * const kGTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse_Result_AttestationNotVerifiable = @"ATTESTATION_NOT_VERIFIABLE";
NSString * const kGTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse_Result_ResultUnspecified = @"RESULT_UNSPECIFIED";
NSString * const kGTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse_Result_Verified = @"VERIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_AdmissionRule
//

@implementation GTLRBinaryAuthorization_AdmissionRule
@dynamic enforcementMode, evaluationMode, requireAttestationsBy;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requireAttestationsBy" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_AdmissionWhitelistPattern
//

@implementation GTLRBinaryAuthorization_AdmissionWhitelistPattern
@dynamic namePattern;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_AttestationOccurrence
//

@implementation GTLRBinaryAuthorization_AttestationOccurrence
@dynamic jwts, serializedPayload, signatures;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jwts" : [GTLRBinaryAuthorization_Jwt class],
    @"signatures" : [GTLRBinaryAuthorization_Signature class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Attestor
//

@implementation GTLRBinaryAuthorization_Attestor
@dynamic descriptionProperty, ETag, name, updateTime, userOwnedGrafeasNote;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_AttestorPublicKey
//

@implementation GTLRBinaryAuthorization_AttestorPublicKey
@dynamic asciiArmoredPgpPublicKey, comment, identifier, pkixPublicKey;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Binding
//

@implementation GTLRBinaryAuthorization_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Empty
//

@implementation GTLRBinaryAuthorization_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Expr
//

@implementation GTLRBinaryAuthorization_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_IamPolicy
//

@implementation GTLRBinaryAuthorization_IamPolicy
@dynamic bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bindings" : [GTLRBinaryAuthorization_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Jwt
//

@implementation GTLRBinaryAuthorization_Jwt
@dynamic compactJwt;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_ListAttestorsResponse
//

@implementation GTLRBinaryAuthorization_ListAttestorsResponse
@dynamic attestors, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"attestors" : [GTLRBinaryAuthorization_Attestor class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"attestors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_PkixPublicKey
//

@implementation GTLRBinaryAuthorization_PkixPublicKey
@dynamic publicKeyPem, signatureAlgorithm;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Policy
//

@implementation GTLRBinaryAuthorization_Policy
@dynamic admissionWhitelistPatterns, clusterAdmissionRules,
         defaultAdmissionRule, descriptionProperty, ETag,
         globalPolicyEvaluationMode, istioServiceIdentityAdmissionRules,
         kubernetesNamespaceAdmissionRules,
         kubernetesServiceAccountAdmissionRules, name, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"admissionWhitelistPatterns" : [GTLRBinaryAuthorization_AdmissionWhitelistPattern class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Policy_ClusterAdmissionRules
//

@implementation GTLRBinaryAuthorization_Policy_ClusterAdmissionRules

+ (Class)classForAdditionalProperties {
  return [GTLRBinaryAuthorization_AdmissionRule class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Policy_IstioServiceIdentityAdmissionRules
//

@implementation GTLRBinaryAuthorization_Policy_IstioServiceIdentityAdmissionRules

+ (Class)classForAdditionalProperties {
  return [GTLRBinaryAuthorization_AdmissionRule class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Policy_KubernetesNamespaceAdmissionRules
//

@implementation GTLRBinaryAuthorization_Policy_KubernetesNamespaceAdmissionRules

+ (Class)classForAdditionalProperties {
  return [GTLRBinaryAuthorization_AdmissionRule class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Policy_KubernetesServiceAccountAdmissionRules
//

@implementation GTLRBinaryAuthorization_Policy_KubernetesServiceAccountAdmissionRules

+ (Class)classForAdditionalProperties {
  return [GTLRBinaryAuthorization_AdmissionRule class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_SetIamPolicyRequest
//

@implementation GTLRBinaryAuthorization_SetIamPolicyRequest
@dynamic policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_Signature
//

@implementation GTLRBinaryAuthorization_Signature
@dynamic publicKeyId, signature;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_TestIamPermissionsRequest
//

@implementation GTLRBinaryAuthorization_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_TestIamPermissionsResponse
//

@implementation GTLRBinaryAuthorization_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_UserOwnedGrafeasNote
//

@implementation GTLRBinaryAuthorization_UserOwnedGrafeasNote
@dynamic delegationServiceAccountEmail, noteReference, publicKeys;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"publicKeys" : [GTLRBinaryAuthorization_AttestorPublicKey class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_ValidateAttestationOccurrenceRequest
//

@implementation GTLRBinaryAuthorization_ValidateAttestationOccurrenceRequest
@dynamic attestation, occurrenceNote, occurrenceResourceUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse
//

@implementation GTLRBinaryAuthorization_ValidateAttestationOccurrenceResponse
@dynamic denialReason, result;
@end
