// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Safe Browsing API (safebrowsing/v4)
// Description:
//   Enables client applications to check web resources (most commonly URLs)
//   against Google-generated lists of unsafe web resources. The Safe Browsing
//   APIs are for non-commercial use only. If you need to use APIs to detect
//   malicious URLs for commercial purposes – meaning “for sale or
//   revenue-generating purposes” – please refer to the Web Risk API.
// Documentation:
//   https://developers.google.com/safe-browsing/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSafebrowsingObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Safebrowsing query classes.
 */
@interface GTLRSafebrowsingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  GTLRSafebrowsingQuery_EncodedFullHashesGet
 *
 *  Method: safebrowsing.encodedFullHashes.get
 */
@interface GTLRSafebrowsingQuery_EncodedFullHashesGet : GTLRSafebrowsingQuery

/**
 *  A client ID that (hopefully) uniquely identifies the client implementation
 *  of the Safe Browsing API.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The version of the client implementation. */
@property(nonatomic, copy, nullable) NSString *clientVersion;

/**
 *  A serialized FindFullHashesRequest proto.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *encodedRequest;

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindFullHashesResponse.
 *
 *  @param encodedRequest A serialized FindFullHashesRequest proto.
 *
 *  @return GTLRSafebrowsingQuery_EncodedFullHashesGet
 */
+ (instancetype)queryWithEncodedRequest:(NSString *)encodedRequest;

@end

/**
 *  GTLRSafebrowsingQuery_EncodedUpdatesGet
 *
 *  Method: safebrowsing.encodedUpdates.get
 */
@interface GTLRSafebrowsingQuery_EncodedUpdatesGet : GTLRSafebrowsingQuery

/**
 *  A client ID that uniquely identifies the client implementation of the Safe
 *  Browsing API.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The version of the client implementation. */
@property(nonatomic, copy, nullable) NSString *clientVersion;

/**
 *  A serialized FetchThreatListUpdatesRequest proto.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *encodedRequest;

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse.
 *
 *  @param encodedRequest A serialized FetchThreatListUpdatesRequest proto.
 *
 *  @return GTLRSafebrowsingQuery_EncodedUpdatesGet
 */
+ (instancetype)queryWithEncodedRequest:(NSString *)encodedRequest;

@end

/**
 *  Finds the full hashes that match the requested hash prefixes.
 *
 *  Method: safebrowsing.fullHashes.find
 */
@interface GTLRSafebrowsingQuery_FullHashesFind : GTLRSafebrowsingQuery

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindFullHashesResponse.
 *
 *  Finds the full hashes that match the requested hash prefixes.
 *
 *  @param object The @c
 *    GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindFullHashesRequest to
 *    include in the query.
 *
 *  @return GTLRSafebrowsingQuery_FullHashesFind
 */
+ (instancetype)queryWithObject:(GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindFullHashesRequest *)object;

@end

/**
 *  Reports a Safe Browsing threat list hit to Google. Only projects with
 *  TRUSTED_REPORTER visibility can use this method.
 *
 *  Method: safebrowsing.threatHits.create
 */
@interface GTLRSafebrowsingQuery_ThreatHitsCreate : GTLRSafebrowsingQuery

/**
 *  Fetches a @c GTLRSafebrowsing_GoogleProtobufEmpty.
 *
 *  Reports a Safe Browsing threat list hit to Google. Only projects with
 *  TRUSTED_REPORTER visibility can use this method.
 *
 *  @param object The @c GTLRSafebrowsing_GoogleSecuritySafebrowsingV4ThreatHit
 *    to include in the query.
 *
 *  @return GTLRSafebrowsingQuery_ThreatHitsCreate
 */
+ (instancetype)queryWithObject:(GTLRSafebrowsing_GoogleSecuritySafebrowsingV4ThreatHit *)object;

@end

/**
 *  Lists the Safe Browsing threat lists available for download.
 *
 *  Method: safebrowsing.threatLists.list
 */
@interface GTLRSafebrowsingQuery_ThreatListsList : GTLRSafebrowsingQuery

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4ListThreatListsResponse.
 *
 *  Lists the Safe Browsing threat lists available for download.
 *
 *  @return GTLRSafebrowsingQuery_ThreatListsList
 */
+ (instancetype)query;

@end

/**
 *  Fetches the most recent threat list updates. A client can request updates
 *  for multiple lists at once.
 *
 *  Method: safebrowsing.threatListUpdates.fetch
 */
@interface GTLRSafebrowsingQuery_ThreatListUpdatesFetch : GTLRSafebrowsingQuery

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse.
 *
 *  Fetches the most recent threat list updates. A client can request updates
 *  for multiple lists at once.
 *
 *  @param object The @c
 *    GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequest
 *    to include in the query.
 *
 *  @return GTLRSafebrowsingQuery_ThreatListUpdatesFetch
 */
+ (instancetype)queryWithObject:(GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequest *)object;

@end

/**
 *  Finds the threat entries that match the Safe Browsing lists.
 *
 *  Method: safebrowsing.threatMatches.find
 */
@interface GTLRSafebrowsingQuery_ThreatMatchesFind : GTLRSafebrowsingQuery

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindThreatMatchesResponse.
 *
 *  Finds the threat entries that match the Safe Browsing lists.
 *
 *  @param object The @c
 *    GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindThreatMatchesRequest to
 *    include in the query.
 *
 *  @return GTLRSafebrowsingQuery_ThreatMatchesFind
 */
+ (instancetype)queryWithObject:(GTLRSafebrowsing_GoogleSecuritySafebrowsingV4FindThreatMatchesRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
