// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Safe Browsing API (safebrowsing/v5)
// Description:
//   Enables client applications to check web resources (most commonly URLs)
//   against Google-generated lists of unsafe web resources. The Safe Browsing
//   APIs are for non-commercial use only. If you need to use APIs to detect
//   malicious URLs for commercial purposes – meaning “for sale or
//   revenue-generating purposes” – please refer to the Web Risk API.
// Documentation:
//   https://developers.google.com/safe-browsing/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHash;
@class GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail.attributes

/**
 *  Indicates that the threat_type should not be used for enforcement.
 *
 *  Value: "CANARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_Attributes_Canary;
/**
 *  Indicates that the threat_type should only be used for enforcement on
 *  frames.
 *
 *  Value: "FRAME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_Attributes_FrameOnly;
/**
 *  Unknown.
 *
 *  Value: "THREAT_ATTRIBUTE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_Attributes_ThreatAttributeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail.threatType

/**
 *  Malware threat type.
 *
 *  Value: "MALWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_Malware;
/**
 *  Potentially harmful application threat type.
 *
 *  Value: "POTENTIALLY_HARMFUL_APPLICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_PotentiallyHarmfulApplication;
/**
 *  Social engineering threat type.
 *
 *  Value: "SOCIAL_ENGINEERING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_SocialEngineering;
/**
 *  Unknown.
 *
 *  Value: "THREAT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_ThreatTypeUnspecified;
/**
 *  Unwanted software threat type.
 *
 *  Value: "UNWANTED_SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_UnwantedSoftware;

/**
 *  The full hash identified with one or more matches.
 */
@interface GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHash : GTLRObject

/**
 *  The matching full hash. This is the SHA256 hash. The length will be exactly
 *  32 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *fullHash;

/**
 *  Unordered list. A repeated field identifying the details relevant to this
 *  full hash.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail *> *fullHashDetails;

@end


/**
 *  Details about a matching full hash. An important note about forward
 *  compatibility: new threat types and threat attributes may be added by the
 *  server at any time; those additions are considered minor version changes. It
 *  is Google's policy not to expose minor version numbers in APIs (see
 *  https://cloud.google.com/apis/design/versioning), so clients MUST be
 *  prepared to receive FullHashDetail messages containing ThreatType enum
 *  values or ThreatAttribute enum values that are considered invalid by the
 *  client. Therefore, it is the client's responsibility to check for the
 *  validity of all ThreatType and ThreatAttribute enum values; if any value is
 *  considered invalid, the client MUST disregard the entire FullHashDetail
 *  message.
 */
@interface GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail : GTLRObject

/**
 *  Unordered list. Additional attributes about those full hashes. This may be
 *  empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *attributes;

/**
 *  The type of threat. This field will never be empty.
 *
 *  Likely values:
 *    @arg @c kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_Malware
 *        Malware threat type. (Value: "MALWARE")
 *    @arg @c kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_PotentiallyHarmfulApplication
 *        Potentially harmful application threat type. (Value:
 *        "POTENTIALLY_HARMFUL_APPLICATION")
 *    @arg @c kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_SocialEngineering
 *        Social engineering threat type. (Value: "SOCIAL_ENGINEERING")
 *    @arg @c kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_ThreatTypeUnspecified
 *        Unknown. (Value: "THREAT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHashFullHashDetail_ThreatType_UnwantedSoftware
 *        Unwanted software threat type. (Value: "UNWANTED_SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *threatType;

@end


/**
 *  The response returned after searching threat hashes. Note that if nothing is
 *  found, the server will return an OK status (HTTP status code 200) with the
 *  `full_hashes` field empty, rather than returning a NOT_FOUND status (HTTP
 *  status code 404).
 */
@interface GTLRSafebrowsing_GoogleSecuritySafebrowsingV5SearchHashesResponse : GTLRObject

/**
 *  The client-side cache duration. The client shall add this duration to the
 *  current time to determine the expiration time. The expiration time then
 *  applies to every hash prefix queried by the client in the request,
 *  regardless of how many full hashes are returned in the response. Even if the
 *  server returns no full hashes for a particular hash prefix, this fact should
 *  also be cached by the client. Important: the client must not assume that the
 *  server will return the same cache duration for all responses. The server may
 *  choose different cache durations for different responses depending on the
 *  situation.
 */
@property(nonatomic, strong, nullable) GTLRDuration *cacheDuration;

/** Unordered list. The unordered list of full hashes found. */
@property(nonatomic, strong, nullable) NSArray<GTLRSafebrowsing_GoogleSecuritySafebrowsingV5FullHash *> *fullHashes;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
