// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Safe Browsing API (safebrowsing/v5)
// Description:
//   Enables client applications to check web resources (most commonly URLs)
//   against Google-generated lists of unsafe web resources. The Safe Browsing
//   APIs are for non-commercial use only. If you need to use APIs to detect
//   malicious URLs for commercial purposes – meaning “for sale or
//   revenue-generating purposes” – please refer to the Web Risk API.
// Documentation:
//   https://developers.google.com/safe-browsing/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Safebrowsing query classes.
 */
@interface GTLRSafebrowsingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Search for full hashes matching the specified prefixes. This is a custom
 *  method as defined by https://google.aip.dev/136 (the custom method refers to
 *  this method having a custom name within Google's general API development
 *  nomenclature; it does not refer to using a custom HTTP method).
 *
 *  Method: safebrowsing.hashes.search
 */
@interface GTLRSafebrowsingQuery_HashesSearch : GTLRSafebrowsingQuery

/**
 *  Required. The hash prefixes to be looked up. Clients MUST NOT send more than
 *  1000 hash prefixes. However, following the URL processing procedure, clients
 *  SHOULD NOT need to send more than 30 hash prefixes. Currently each hash
 *  prefix is required to be exactly 4 bytes long. This MAY be relaxed in the
 *  future.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *hashPrefixes;

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV5SearchHashesResponse.
 *
 *  Search for full hashes matching the specified prefixes. This is a custom
 *  method as defined by https://google.aip.dev/136 (the custom method refers to
 *  this method having a custom name within Google's general API development
 *  nomenclature; it does not refer to using a custom HTTP method).
 *
 *  @return GTLRSafebrowsingQuery_HashesSearch
 */
+ (instancetype)query;

@end

/**
 *  Get the latest contents of a hash list. A hash list may either by a threat
 *  list or a non-threat list such as the Global Cache. This is a standard Get
 *  method as defined by https://google.aip.dev/131 and the HTTP method is also
 *  GET.
 *
 *  Method: safebrowsing.hashList.get
 */
@interface GTLRSafebrowsingQuery_HashListGet : GTLRSafebrowsingQuery

/**
 *  Required. The name of this particular hash list. It may be a threat list, or
 *  it may be the Global Cache.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Sets the maximum number of entries that the client is willing to have in the
 *  local database for the list. (The server MAY cause the client to store less
 *  than this number of entries.) If omitted or zero, no database size limit is
 *  set.
 */
@property(nonatomic, assign) NSInteger sizeConstraintsMaxDatabaseEntries;

/**
 *  The maximum size in number of entries. The update will not contain more
 *  entries than this value, but it is possible that the update will contain
 *  fewer entries than this value. This MUST be at least 1024. If omitted or
 *  zero, no update size limit is set.
 */
@property(nonatomic, assign) NSInteger sizeConstraintsMaxUpdateEntries;

/**
 *  The version of the hash list that the client already has. If this is the
 *  first time the client is fetching the hash list, this field MUST be left
 *  empty. Otherwise, the client SHOULD supply the version previously received
 *  from the server. The client MUST NOT manipulate those bytes. **What's new in
 *  V5**: in V4 of the API, this was called `states`; it is now renamed to
 *  `version` for clarity.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *version;

/**
 *  Fetches a @c GTLRSafebrowsing_GoogleSecuritySafebrowsingV5HashList.
 *
 *  Get the latest contents of a hash list. A hash list may either by a threat
 *  list or a non-threat list such as the Global Cache. This is a standard Get
 *  method as defined by https://google.aip.dev/131 and the HTTP method is also
 *  GET.
 *
 *  @param name Required. The name of this particular hash list. It may be a
 *    threat list, or it may be the Global Cache.
 *
 *  @return GTLRSafebrowsingQuery_HashListGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get multiple hash lists at once. It is very common for a client to need to
 *  get multiple hash lists. Using this method is preferred over using the
 *  regular Get method multiple times. This is a standard batch Get method as
 *  defined by https://google.aip.dev/231 and the HTTP method is also GET.
 *
 *  Method: safebrowsing.hashLists.batchGet
 */
@interface GTLRSafebrowsingQuery_HashListsBatchGet : GTLRSafebrowsingQuery

/**
 *  Required. The names of the particular hash lists. The list MAY be a threat
 *  list, or it may be the Global Cache. The names MUST NOT contain duplicates;
 *  if they did, the client will get an error.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Sets the maximum number of entries that the client is willing to have in the
 *  local database for the list. (The server MAY cause the client to store less
 *  than this number of entries.) If omitted or zero, no database size limit is
 *  set.
 */
@property(nonatomic, assign) NSInteger sizeConstraintsMaxDatabaseEntries;

/**
 *  The maximum size in number of entries. The update will not contain more
 *  entries than this value, but it is possible that the update will contain
 *  fewer entries than this value. This MUST be at least 1024. If omitted or
 *  zero, no update size limit is set.
 */
@property(nonatomic, assign) NSInteger sizeConstraintsMaxUpdateEntries;

/**
 *  The versions of the hash list that the client already has. If this is the
 *  first time the client is fetching the hash lists, the field should be left
 *  empty. Otherwise, the client should supply the versions previously received
 *  from the server. The client MUST NOT manipulate those bytes. The client need
 *  not send the versions in the same order as the corresponding list names. The
 *  client may send fewer or more versions in a request than there are names.
 *  However the client MUST NOT send multiple versions that correspond to the
 *  same name; if it did, the client will get an error. Historical note: in V4
 *  of the API, this was called `states`; it is now renamed to `version` for
 *  clarity.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *version;

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV5BatchGetHashListsResponse.
 *
 *  Get multiple hash lists at once. It is very common for a client to need to
 *  get multiple hash lists. Using this method is preferred over using the
 *  regular Get method multiple times. This is a standard batch Get method as
 *  defined by https://google.aip.dev/231 and the HTTP method is also GET.
 *
 *  @return GTLRSafebrowsingQuery_HashListsBatchGet
 */
+ (instancetype)query;

@end

/**
 *  List hash lists. In the V5 API, Google will never remove a hash list that
 *  has ever been returned by this method. This enables clients to skip using
 *  this method and simply hard-code all hash lists they need. This is a
 *  standard List method as defined by https://google.aip.dev/132 and the HTTP
 *  method is GET.
 *
 *  Method: safebrowsing.hashLists.list
 */
@interface GTLRSafebrowsingQuery_HashListsList : GTLRSafebrowsingQuery

/**
 *  The maximum number of hash lists to return. The service may return fewer
 *  than this value. If unspecified, the server will choose a page size, which
 *  may be larger than the number of hash lists so that pagination is not
 *  necessary.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListHashLists` call. Provide this to
 *  retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRSafebrowsing_GoogleSecuritySafebrowsingV5ListHashListsResponse.
 *
 *  List hash lists. In the V5 API, Google will never remove a hash list that
 *  has ever been returned by this method. This enables clients to skip using
 *  this method and simply hard-code all hash lists they need. This is a
 *  standard List method as defined by https://google.aip.dev/132 and the HTTP
 *  method is GET.
 *
 *  @return GTLRSafebrowsingQuery_HashListsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
