// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   GKE Hub API (gkehub/v1)
// Documentation:
//   https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster

#import <GoogleAPIClientForREST/GTLRGKEHubObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRGKEHub_AuditLogConfig.logType
NSString * const kGTLRGKEHub_AuditLogConfig_LogType_AdminRead  = @"ADMIN_READ";
NSString * const kGTLRGKEHub_AuditLogConfig_LogType_DataRead   = @"DATA_READ";
NSString * const kGTLRGKEHub_AuditLogConfig_LogType_DataWrite  = @"DATA_WRITE";
NSString * const kGTLRGKEHub_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRGKEHub_BinaryAuthorizationConfig.evaluationMode
NSString * const kGTLRGKEHub_BinaryAuthorizationConfig_EvaluationMode_Disabled = @"DISABLED";
NSString * const kGTLRGKEHub_BinaryAuthorizationConfig_EvaluationMode_EvaluationModeUnspecified = @"EVALUATION_MODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_BinaryAuthorizationConfig_EvaluationMode_PolicyBindings = @"POLICY_BINDINGS";

// GTLRGKEHub_ClusterUpgradeUpgradeStatus.code
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_Complete = @"COMPLETE";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_ForcedSoaking = @"FORCED_SOAKING";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_Ineligible = @"INELIGIBLE";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_InProgress = @"IN_PROGRESS";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_Pending = @"PENDING";
NSString * const kGTLRGKEHub_ClusterUpgradeUpgradeStatus_Code_Soaking = @"SOAKING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.admissionWebhook
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_AdmissionWebhook_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_AdmissionWebhook_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_AdmissionWebhook_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_AdmissionWebhook_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_AdmissionWebhook_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.gitSync
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_GitSync_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_GitSync_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_GitSync_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_GitSync_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_GitSync_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.importer
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Importer_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Importer_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Importer_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Importer_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Importer_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.monitor
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Monitor_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Monitor_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Monitor_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Monitor_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Monitor_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.reconcilerManager
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_ReconcilerManager_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_ReconcilerManager_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_ReconcilerManager_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_ReconcilerManager_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_ReconcilerManager_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.rootReconciler
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_RootReconciler_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_RootReconciler_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_RootReconciler_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_RootReconciler_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_RootReconciler_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncDeploymentState.syncer
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Syncer_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Syncer_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Syncer_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Syncer_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncDeploymentState_Syncer_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementConfigSyncState.reposyncCrd
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_ReposyncCrd_CrdStateUnspecified = @"CRD_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_ReposyncCrd_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_ReposyncCrd_Installing = @"INSTALLING";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_ReposyncCrd_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_ReposyncCrd_Terminating = @"TERMINATING";

// GTLRGKEHub_ConfigManagementConfigSyncState.rootsyncCrd
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_RootsyncCrd_CrdStateUnspecified = @"CRD_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_RootsyncCrd_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_RootsyncCrd_Installing = @"INSTALLING";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_RootsyncCrd_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementConfigSyncState_RootsyncCrd_Terminating = @"TERMINATING";

// GTLRGKEHub_ConfigManagementGatekeeperDeploymentState.gatekeeperAudit
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperAudit_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperAudit_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperAudit_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperAudit_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperAudit_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementGatekeeperDeploymentState.gatekeeperControllerManagerState
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperControllerManagerState_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperControllerManagerState_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperControllerManagerState_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperControllerManagerState_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperControllerManagerState_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementGatekeeperDeploymentState.gatekeeperMutation
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperMutation_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperMutation_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperMutation_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperMutation_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementGatekeeperDeploymentState_GatekeeperMutation_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState.extension
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Extension_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Extension_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Extension_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Extension_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Extension_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState.hnc
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Hnc_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Hnc_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Hnc_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Hnc_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState_Hnc_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementOperatorState.deploymentState
NSString * const kGTLRGKEHub_ConfigManagementOperatorState_DeploymentState_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementOperatorState_DeploymentState_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementOperatorState_DeploymentState_Installed = @"INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementOperatorState_DeploymentState_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementOperatorState_DeploymentState_Pending = @"PENDING";

// GTLRGKEHub_ConfigManagementPolicyControllerMigration.stage
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMigration_Stage_AcmManaged = @"ACM_MANAGED";
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMigration_Stage_PocoManaged = @"POCO_MANAGED";
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMigration_Stage_StageUnspecified = @"STAGE_UNSPECIFIED";

// GTLRGKEHub_ConfigManagementPolicyControllerMonitoring.backends
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMonitoring_Backends_CloudMonitoring = @"CLOUD_MONITORING";
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMonitoring_Backends_MonitoringBackendUnspecified = @"MONITORING_BACKEND_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementPolicyControllerMonitoring_Backends_Prometheus = @"PROMETHEUS";

// GTLRGKEHub_ConfigManagementSyncState.code
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_Error = @"ERROR";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_NotConfigured = @"NOT_CONFIGURED";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_Pending = @"PENDING";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_SyncCodeUnspecified = @"SYNC_CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_Synced = @"SYNCED";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_Unauthorized = @"UNAUTHORIZED";
NSString * const kGTLRGKEHub_ConfigManagementSyncState_Code_Unreachable = @"UNREACHABLE";

// GTLRGKEHub_FeatureResourceState.state
NSString * const kGTLRGKEHub_FeatureResourceState_State_Active = @"ACTIVE";
NSString * const kGTLRGKEHub_FeatureResourceState_State_Disabling = @"DISABLING";
NSString * const kGTLRGKEHub_FeatureResourceState_State_Enabling = @"ENABLING";
NSString * const kGTLRGKEHub_FeatureResourceState_State_ServiceUpdating = @"SERVICE_UPDATING";
NSString * const kGTLRGKEHub_FeatureResourceState_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_FeatureResourceState_State_Updating = @"UPDATING";

// GTLRGKEHub_FeatureState.code
NSString * const kGTLRGKEHub_FeatureState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_FeatureState_Code_Error           = @"ERROR";
NSString * const kGTLRGKEHub_FeatureState_Code_Ok              = @"OK";
NSString * const kGTLRGKEHub_FeatureState_Code_Warning         = @"WARNING";

// GTLRGKEHub_FleetLifecycleState.code
NSString * const kGTLRGKEHub_FleetLifecycleState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_FleetLifecycleState_Code_Creating = @"CREATING";
NSString * const kGTLRGKEHub_FleetLifecycleState_Code_Deleting = @"DELETING";
NSString * const kGTLRGKEHub_FleetLifecycleState_Code_Ready    = @"READY";
NSString * const kGTLRGKEHub_FleetLifecycleState_Code_Updating = @"UPDATING";

// GTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState.code
NSString * const kGTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState_Code_Error = @"ERROR";
NSString * const kGTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState_Code_Ok = @"OK";

// GTLRGKEHub_FleetObservabilityRoutingConfig.mode
NSString * const kGTLRGKEHub_FleetObservabilityRoutingConfig_Mode_Copy = @"COPY";
NSString * const kGTLRGKEHub_FleetObservabilityRoutingConfig_Mode_ModeUnspecified = @"MODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_FleetObservabilityRoutingConfig_Mode_Move = @"MOVE";

// GTLRGKEHub_IdentityServiceMembershipState.state
NSString * const kGTLRGKEHub_IdentityServiceMembershipState_State_DeploymentStateUnspecified = @"DEPLOYMENT_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_IdentityServiceMembershipState_State_Error = @"ERROR";
NSString * const kGTLRGKEHub_IdentityServiceMembershipState_State_Ok = @"OK";

// GTLRGKEHub_MembershipBindingLifecycleState.code
NSString * const kGTLRGKEHub_MembershipBindingLifecycleState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_MembershipBindingLifecycleState_Code_Creating = @"CREATING";
NSString * const kGTLRGKEHub_MembershipBindingLifecycleState_Code_Deleting = @"DELETING";
NSString * const kGTLRGKEHub_MembershipBindingLifecycleState_Code_Ready = @"READY";
NSString * const kGTLRGKEHub_MembershipBindingLifecycleState_Code_Updating = @"UPDATING";

// GTLRGKEHub_MembershipState.code
NSString * const kGTLRGKEHub_MembershipState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_MembershipState_Code_Creating     = @"CREATING";
NSString * const kGTLRGKEHub_MembershipState_Code_Deleting     = @"DELETING";
NSString * const kGTLRGKEHub_MembershipState_Code_Ready        = @"READY";
NSString * const kGTLRGKEHub_MembershipState_Code_ServiceUpdating = @"SERVICE_UPDATING";
NSString * const kGTLRGKEHub_MembershipState_Code_Updating     = @"UPDATING";

// GTLRGKEHub_NamespaceLifecycleState.code
NSString * const kGTLRGKEHub_NamespaceLifecycleState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_NamespaceLifecycleState_Code_Creating = @"CREATING";
NSString * const kGTLRGKEHub_NamespaceLifecycleState_Code_Deleting = @"DELETING";
NSString * const kGTLRGKEHub_NamespaceLifecycleState_Code_Ready = @"READY";
NSString * const kGTLRGKEHub_NamespaceLifecycleState_Code_Updating = @"UPDATING";

// GTLRGKEHub_OnPremCluster.clusterType
NSString * const kGTLRGKEHub_OnPremCluster_ClusterType_Bootstrap = @"BOOTSTRAP";
NSString * const kGTLRGKEHub_OnPremCluster_ClusterType_ClustertypeUnspecified = @"CLUSTERTYPE_UNSPECIFIED";
NSString * const kGTLRGKEHub_OnPremCluster_ClusterType_Hybrid  = @"HYBRID";
NSString * const kGTLRGKEHub_OnPremCluster_ClusterType_Standalone = @"STANDALONE";
NSString * const kGTLRGKEHub_OnPremCluster_ClusterType_User    = @"USER";

// GTLRGKEHub_Origin.type
NSString * const kGTLRGKEHub_Origin_Type_Fleet           = @"FLEET";
NSString * const kGTLRGKEHub_Origin_Type_FleetOutOfSync  = @"FLEET_OUT_OF_SYNC";
NSString * const kGTLRGKEHub_Origin_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRGKEHub_Origin_Type_User            = @"USER";

// GTLRGKEHub_PolicyControllerHubConfig.installSpec
NSString * const kGTLRGKEHub_PolicyControllerHubConfig_InstallSpec_InstallSpecDetached = @"INSTALL_SPEC_DETACHED";
NSString * const kGTLRGKEHub_PolicyControllerHubConfig_InstallSpec_InstallSpecEnabled = @"INSTALL_SPEC_ENABLED";
NSString * const kGTLRGKEHub_PolicyControllerHubConfig_InstallSpec_InstallSpecNotInstalled = @"INSTALL_SPEC_NOT_INSTALLED";
NSString * const kGTLRGKEHub_PolicyControllerHubConfig_InstallSpec_InstallSpecSuspended = @"INSTALL_SPEC_SUSPENDED";
NSString * const kGTLRGKEHub_PolicyControllerHubConfig_InstallSpec_InstallSpecUnspecified = @"INSTALL_SPEC_UNSPECIFIED";

// GTLRGKEHub_PolicyControllerMembershipState.state
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Active = @"ACTIVE";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_ClusterError = @"CLUSTER_ERROR";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Decommissioning = @"DECOMMISSIONING";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Detached = @"DETACHED";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_HubError = @"HUB_ERROR";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Installing = @"INSTALLING";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_LifecycleStateUnspecified = @"LIFECYCLE_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Suspended = @"SUSPENDED";
NSString * const kGTLRGKEHub_PolicyControllerMembershipState_State_Updating = @"UPDATING";

// GTLRGKEHub_PolicyControllerMonitoringConfig.backends
NSString * const kGTLRGKEHub_PolicyControllerMonitoringConfig_Backends_CloudMonitoring = @"CLOUD_MONITORING";
NSString * const kGTLRGKEHub_PolicyControllerMonitoringConfig_Backends_MonitoringBackendUnspecified = @"MONITORING_BACKEND_UNSPECIFIED";
NSString * const kGTLRGKEHub_PolicyControllerMonitoringConfig_Backends_Prometheus = @"PROMETHEUS";

// GTLRGKEHub_PolicyControllerOnClusterState.state
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Active = @"ACTIVE";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_ClusterError = @"CLUSTER_ERROR";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Decommissioning = @"DECOMMISSIONING";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Detached = @"DETACHED";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_HubError = @"HUB_ERROR";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Installing = @"INSTALLING";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_LifecycleStateUnspecified = @"LIFECYCLE_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_NotInstalled = @"NOT_INSTALLED";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Suspended = @"SUSPENDED";
NSString * const kGTLRGKEHub_PolicyControllerOnClusterState_State_Updating = @"UPDATING";

// GTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig.podAffinity
NSString * const kGTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig_PodAffinity_AffinityUnspecified = @"AFFINITY_UNSPECIFIED";
NSString * const kGTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig_PodAffinity_AntiAffinity = @"ANTI_AFFINITY";
NSString * const kGTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig_PodAffinity_NoAffinity = @"NO_AFFINITY";

// GTLRGKEHub_PolicyControllerTemplateLibraryConfig.installation
NSString * const kGTLRGKEHub_PolicyControllerTemplateLibraryConfig_Installation_All = @"ALL";
NSString * const kGTLRGKEHub_PolicyControllerTemplateLibraryConfig_Installation_InstallationUnspecified = @"INSTALLATION_UNSPECIFIED";
NSString * const kGTLRGKEHub_PolicyControllerTemplateLibraryConfig_Installation_NotInstalled = @"NOT_INSTALLED";

// GTLRGKEHub_RBACRoleBindingLifecycleState.code
NSString * const kGTLRGKEHub_RBACRoleBindingLifecycleState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_RBACRoleBindingLifecycleState_Code_Creating = @"CREATING";
NSString * const kGTLRGKEHub_RBACRoleBindingLifecycleState_Code_Deleting = @"DELETING";
NSString * const kGTLRGKEHub_RBACRoleBindingLifecycleState_Code_Ready = @"READY";
NSString * const kGTLRGKEHub_RBACRoleBindingLifecycleState_Code_Updating = @"UPDATING";

// GTLRGKEHub_Role.predefinedRole
NSString * const kGTLRGKEHub_Role_PredefinedRole_Admin         = @"ADMIN";
NSString * const kGTLRGKEHub_Role_PredefinedRole_AnthosSupport = @"ANTHOS_SUPPORT";
NSString * const kGTLRGKEHub_Role_PredefinedRole_Edit          = @"EDIT";
NSString * const kGTLRGKEHub_Role_PredefinedRole_Unknown       = @"UNKNOWN";
NSString * const kGTLRGKEHub_Role_PredefinedRole_View          = @"VIEW";

// GTLRGKEHub_ScopeLifecycleState.code
NSString * const kGTLRGKEHub_ScopeLifecycleState_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ScopeLifecycleState_Code_Creating = @"CREATING";
NSString * const kGTLRGKEHub_ScopeLifecycleState_Code_Deleting = @"DELETING";
NSString * const kGTLRGKEHub_ScopeLifecycleState_Code_Ready    = @"READY";
NSString * const kGTLRGKEHub_ScopeLifecycleState_Code_Updating = @"UPDATING";

// GTLRGKEHub_SecurityPostureConfig.mode
NSString * const kGTLRGKEHub_SecurityPostureConfig_Mode_Basic  = @"BASIC";
NSString * const kGTLRGKEHub_SecurityPostureConfig_Mode_Disabled = @"DISABLED";
NSString * const kGTLRGKEHub_SecurityPostureConfig_Mode_ModeUnspecified = @"MODE_UNSPECIFIED";

// GTLRGKEHub_SecurityPostureConfig.vulnerabilityMode
NSString * const kGTLRGKEHub_SecurityPostureConfig_VulnerabilityMode_VulnerabilityBasic = @"VULNERABILITY_BASIC";
NSString * const kGTLRGKEHub_SecurityPostureConfig_VulnerabilityMode_VulnerabilityDisabled = @"VULNERABILITY_DISABLED";
NSString * const kGTLRGKEHub_SecurityPostureConfig_VulnerabilityMode_VulnerabilityEnterprise = @"VULNERABILITY_ENTERPRISE";
NSString * const kGTLRGKEHub_SecurityPostureConfig_VulnerabilityMode_VulnerabilityModeUnspecified = @"VULNERABILITY_MODE_UNSPECIFIED";

// GTLRGKEHub_ServiceMeshControlPlaneManagement.state
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_Active = @"ACTIVE";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_Disabled = @"DISABLED";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_FailedPrecondition = @"FAILED_PRECONDITION";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_LifecycleStateUnspecified = @"LIFECYCLE_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_NeedsAttention = @"NEEDS_ATTENTION";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEHub_ServiceMeshControlPlaneManagement_State_Stalled = @"STALLED";

// GTLRGKEHub_ServiceMeshDataPlaneManagement.state
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_Active = @"ACTIVE";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_Disabled = @"DISABLED";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_FailedPrecondition = @"FAILED_PRECONDITION";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_LifecycleStateUnspecified = @"LIFECYCLE_STATE_UNSPECIFIED";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_NeedsAttention = @"NEEDS_ATTENTION";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEHub_ServiceMeshDataPlaneManagement_State_Stalled = @"STALLED";

// GTLRGKEHub_ServiceMeshMembershipSpec.controlPlane
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_ControlPlane_Automatic = @"AUTOMATIC";
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_ControlPlane_ControlPlaneManagementUnspecified = @"CONTROL_PLANE_MANAGEMENT_UNSPECIFIED";
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_ControlPlane_Manual = @"MANUAL";

// GTLRGKEHub_ServiceMeshMembershipSpec.management
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_Management_ManagementAutomatic = @"MANAGEMENT_AUTOMATIC";
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_Management_ManagementManual = @"MANAGEMENT_MANUAL";
NSString * const kGTLRGKEHub_ServiceMeshMembershipSpec_Management_ManagementUnspecified = @"MANAGEMENT_UNSPECIFIED";

// GTLRGKEHub_Status.code
NSString * const kGTLRGKEHub_Status_Code_CodeUnspecified = @"CODE_UNSPECIFIED";
NSString * const kGTLRGKEHub_Status_Code_Failed          = @"FAILED";
NSString * const kGTLRGKEHub_Status_Code_Ok              = @"OK";
NSString * const kGTLRGKEHub_Status_Code_Unknown         = @"UNKNOWN";

// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_AppDevExperienceFeatureSpec
//

@implementation GTLRGKEHub_AppDevExperienceFeatureSpec
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_AppDevExperienceFeatureState
//

@implementation GTLRGKEHub_AppDevExperienceFeatureState
@dynamic networkingInstallSucceeded;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ApplianceCluster
//

@implementation GTLRGKEHub_ApplianceCluster
@dynamic resourceLink;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_AuditConfig
//

@implementation GTLRGKEHub_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRGKEHub_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_AuditLogConfig
//

@implementation GTLRGKEHub_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Authority
//

@implementation GTLRGKEHub_Authority
@dynamic identityProvider, issuer, oidcJwks, workloadIdentityPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_BinaryAuthorizationConfig
//

@implementation GTLRGKEHub_BinaryAuthorizationConfig
@dynamic evaluationMode, policyBindings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"policyBindings" : [GTLRGKEHub_PolicyBinding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Binding
//

@implementation GTLRGKEHub_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_CancelOperationRequest
//

@implementation GTLRGKEHub_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeFleetSpec
//

@implementation GTLRGKEHub_ClusterUpgradeFleetSpec
@dynamic gkeUpgradeOverrides, postConditions, upstreamFleets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gkeUpgradeOverrides" : [GTLRGKEHub_ClusterUpgradeGKEUpgradeOverride class],
    @"upstreamFleets" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeFleetState
//

@implementation GTLRGKEHub_ClusterUpgradeFleetState
@dynamic downstreamFleets, gkeState, ignored;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"downstreamFleets" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeFleetState_Ignored
//

@implementation GTLRGKEHub_ClusterUpgradeFleetState_Ignored

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_ClusterUpgradeIgnoredMembership class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgrade
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgrade
@dynamic name, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgradeFeatureCondition
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgradeFeatureCondition
@dynamic reason, status, type, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgradeFeatureState
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgradeFeatureState
@dynamic conditions, upgradeState;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRGKEHub_ClusterUpgradeGKEUpgradeFeatureCondition class],
    @"upgradeState" : [GTLRGKEHub_ClusterUpgradeGKEUpgradeState class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgradeOverride
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgradeOverride
@dynamic postConditions, upgrade;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgradeState
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgradeState
@dynamic stats, status, upgrade;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeGKEUpgradeState_Stats
//

@implementation GTLRGKEHub_ClusterUpgradeGKEUpgradeState_Stats

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeIgnoredMembership
//

@implementation GTLRGKEHub_ClusterUpgradeIgnoredMembership
@dynamic ignoredTime, reason;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeMembershipGKEUpgradeState
//

@implementation GTLRGKEHub_ClusterUpgradeMembershipGKEUpgradeState
@dynamic status, upgrade;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeMembershipState
//

@implementation GTLRGKEHub_ClusterUpgradeMembershipState
@dynamic ignored, upgrades;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"upgrades" : [GTLRGKEHub_ClusterUpgradeMembershipGKEUpgradeState class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradePostConditions
//

@implementation GTLRGKEHub_ClusterUpgradePostConditions
@dynamic soaking;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ClusterUpgradeUpgradeStatus
//

@implementation GTLRGKEHub_ClusterUpgradeUpgradeStatus
@dynamic code, reason, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_CommonFeatureSpec
//

@implementation GTLRGKEHub_CommonFeatureSpec
@dynamic appdevexperience, clusterupgrade, dataplanev2, fleetobservability,
         multiclusteringress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_CommonFeatureState
//

@implementation GTLRGKEHub_CommonFeatureState
@dynamic appdevexperience, clusterupgrade, fleetobservability, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_CommonFleetDefaultMemberConfigSpec
//

@implementation GTLRGKEHub_CommonFleetDefaultMemberConfigSpec
@dynamic configmanagement, identityservice, mesh, policycontroller;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementConfigSync
//

@implementation GTLRGKEHub_ConfigManagementConfigSync
@dynamic allowVerticalScale, enabled, git, metricsGcpServiceAccountEmail, oci,
         preventDrift, sourceFormat;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementConfigSyncDeploymentState
//

@implementation GTLRGKEHub_ConfigManagementConfigSyncDeploymentState
@dynamic admissionWebhook, gitSync, importer, monitor, reconcilerManager,
         rootReconciler, syncer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementConfigSyncError
//

@implementation GTLRGKEHub_ConfigManagementConfigSyncError
@dynamic errorMessage;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementConfigSyncState
//

@implementation GTLRGKEHub_ConfigManagementConfigSyncState
@dynamic deploymentState, errors, reposyncCrd, rootsyncCrd, syncState, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRGKEHub_ConfigManagementConfigSyncError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementConfigSyncVersion
//

@implementation GTLRGKEHub_ConfigManagementConfigSyncVersion
@dynamic admissionWebhook, gitSync, importer, monitor, reconcilerManager,
         rootReconciler, syncer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementErrorResource
//

@implementation GTLRGKEHub_ConfigManagementErrorResource
@dynamic resourceGvk, resourceName, resourceNamespace, sourcePath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementGatekeeperDeploymentState
//

@implementation GTLRGKEHub_ConfigManagementGatekeeperDeploymentState
@dynamic gatekeeperAudit, gatekeeperControllerManagerState, gatekeeperMutation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementGitConfig
//

@implementation GTLRGKEHub_ConfigManagementGitConfig
@dynamic gcpServiceAccountEmail, httpsProxy, policyDir, secretType, syncBranch,
         syncRepo, syncRev, syncWaitSecs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementGroupVersionKind
//

@implementation GTLRGKEHub_ConfigManagementGroupVersionKind
@dynamic group, kind, version;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementHierarchyControllerConfig
//

@implementation GTLRGKEHub_ConfigManagementHierarchyControllerConfig
@dynamic enabled, enableHierarchicalResourceQuota, enablePodTreeLabels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState
//

@implementation GTLRGKEHub_ConfigManagementHierarchyControllerDeploymentState
@dynamic extension, hnc;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementHierarchyControllerState
//

@implementation GTLRGKEHub_ConfigManagementHierarchyControllerState
@dynamic state, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementHierarchyControllerVersion
//

@implementation GTLRGKEHub_ConfigManagementHierarchyControllerVersion
@dynamic extension, hnc;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementInstallError
//

@implementation GTLRGKEHub_ConfigManagementInstallError
@dynamic errorMessage;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementMembershipSpec
//

@implementation GTLRGKEHub_ConfigManagementMembershipSpec
@dynamic cluster, configSync, hierarchyController, policyController, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementMembershipState
//

@implementation GTLRGKEHub_ConfigManagementMembershipState
@dynamic clusterName, configSyncState, hierarchyControllerState, membershipSpec,
         operatorState, policyControllerState;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementOciConfig
//

@implementation GTLRGKEHub_ConfigManagementOciConfig
@dynamic gcpServiceAccountEmail, policyDir, secretType, syncRepo, syncWaitSecs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementOperatorState
//

@implementation GTLRGKEHub_ConfigManagementOperatorState
@dynamic deploymentState, errors, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRGKEHub_ConfigManagementInstallError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementPolicyController
//

@implementation GTLRGKEHub_ConfigManagementPolicyController
@dynamic auditIntervalSeconds, enabled, exemptableNamespaces, logDeniesEnabled,
         monitoring, mutationEnabled, referentialRulesEnabled,
         templateLibraryInstalled, updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptableNamespaces" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementPolicyControllerMigration
//

@implementation GTLRGKEHub_ConfigManagementPolicyControllerMigration
@dynamic copyTime, stage;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementPolicyControllerMonitoring
//

@implementation GTLRGKEHub_ConfigManagementPolicyControllerMonitoring
@dynamic backends;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"backends" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementPolicyControllerState
//

@implementation GTLRGKEHub_ConfigManagementPolicyControllerState
@dynamic deploymentState, migration, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementPolicyControllerVersion
//

@implementation GTLRGKEHub_ConfigManagementPolicyControllerVersion
@dynamic version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementSyncError
//

@implementation GTLRGKEHub_ConfigManagementSyncError
@dynamic code, errorMessage, errorResources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errorResources" : [GTLRGKEHub_ConfigManagementErrorResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConfigManagementSyncState
//

@implementation GTLRGKEHub_ConfigManagementSyncState
@dynamic code, errors, importToken, lastSync, lastSyncTime, sourceToken,
         syncToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRGKEHub_ConfigManagementSyncError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ConnectAgentResource
//

@implementation GTLRGKEHub_ConnectAgentResource
@dynamic manifest, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_DataplaneV2FeatureSpec
//

@implementation GTLRGKEHub_DataplaneV2FeatureSpec
@dynamic enableEncryption;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_DefaultClusterConfig
//

@implementation GTLRGKEHub_DefaultClusterConfig
@dynamic binaryAuthorizationConfig, securityPostureConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_EdgeCluster
//

@implementation GTLRGKEHub_EdgeCluster
@dynamic resourceLink;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Empty
//

@implementation GTLRGKEHub_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Expr
//

@implementation GTLRGKEHub_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature
//

@implementation GTLRGKEHub_Feature
@dynamic createTime, deleteTime, fleetDefaultMemberConfig, labels,
         membershipSpecs, membershipStates, name, resourceState, scopeSpecs,
         scopeStates, spec, state, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature_Labels
//

@implementation GTLRGKEHub_Feature_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature_MembershipSpecs
//

@implementation GTLRGKEHub_Feature_MembershipSpecs

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_MembershipFeatureSpec class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature_MembershipStates
//

@implementation GTLRGKEHub_Feature_MembershipStates

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_MembershipFeatureState class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature_ScopeSpecs
//

@implementation GTLRGKEHub_Feature_ScopeSpecs

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_ScopeFeatureSpec class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Feature_ScopeStates
//

@implementation GTLRGKEHub_Feature_ScopeStates

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_ScopeFeatureState class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FeatureResourceState
//

@implementation GTLRGKEHub_FeatureResourceState
@dynamic state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FeatureState
//

@implementation GTLRGKEHub_FeatureState
@dynamic code, descriptionProperty, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Fleet
//

@implementation GTLRGKEHub_Fleet
@dynamic createTime, defaultClusterConfig, deleteTime, displayName, labels,
         name, state, uid, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Fleet_Labels
//

@implementation GTLRGKEHub_Fleet_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetLifecycleState
//

@implementation GTLRGKEHub_FleetLifecycleState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFeatureError
//

@implementation GTLRGKEHub_FleetObservabilityFeatureError
@dynamic code, descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFeatureSpec
//

@implementation GTLRGKEHub_FleetObservabilityFeatureSpec
@dynamic loggingConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFeatureState
//

@implementation GTLRGKEHub_FleetObservabilityFeatureState
@dynamic logging, monitoring;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState
//

@implementation GTLRGKEHub_FleetObservabilityFleetObservabilityBaseFeatureState
@dynamic code, errors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRGKEHub_FleetObservabilityFeatureError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFleetObservabilityLoggingState
//

@implementation GTLRGKEHub_FleetObservabilityFleetObservabilityLoggingState
@dynamic defaultLog, scopeLog;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityFleetObservabilityMonitoringState
//

@implementation GTLRGKEHub_FleetObservabilityFleetObservabilityMonitoringState
@dynamic state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityLoggingConfig
//

@implementation GTLRGKEHub_FleetObservabilityLoggingConfig
@dynamic defaultConfig, fleetScopeLogsConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityMembershipSpec
//

@implementation GTLRGKEHub_FleetObservabilityMembershipSpec
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityMembershipState
//

@implementation GTLRGKEHub_FleetObservabilityMembershipState
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_FleetObservabilityRoutingConfig
//

@implementation GTLRGKEHub_FleetObservabilityRoutingConfig
@dynamic mode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_GenerateConnectManifestResponse
//

@implementation GTLRGKEHub_GenerateConnectManifestResponse
@dynamic manifest;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"manifest" : [GTLRGKEHub_ConnectAgentResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_GkeCluster
//

@implementation GTLRGKEHub_GkeCluster
@dynamic clusterMissing, resourceLink;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_GoogleRpcStatus
//

@implementation GTLRGKEHub_GoogleRpcStatus
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRGKEHub_GoogleRpcStatus_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_GoogleRpcStatus_Details_Item
//

@implementation GTLRGKEHub_GoogleRpcStatus_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceAuthMethod
//

@implementation GTLRGKEHub_IdentityServiceAuthMethod
@dynamic azureadConfig, googleConfig, name, oidcConfig, proxy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceAzureADConfig
//

@implementation GTLRGKEHub_IdentityServiceAzureADConfig
@dynamic clientId, clientSecret, encryptedClientSecret, kubectlRedirectUri,
         tenant;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceGoogleConfig
//

@implementation GTLRGKEHub_IdentityServiceGoogleConfig
@dynamic disable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceMembershipSpec
//

@implementation GTLRGKEHub_IdentityServiceMembershipSpec
@dynamic authMethods;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"authMethods" : [GTLRGKEHub_IdentityServiceAuthMethod class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceMembershipState
//

@implementation GTLRGKEHub_IdentityServiceMembershipState
@dynamic failureReason, installedVersion, memberConfig, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_IdentityServiceOidcConfig
//

@implementation GTLRGKEHub_IdentityServiceOidcConfig
@dynamic certificateAuthorityData, clientId, clientSecret,
         deployCloudConsoleProxy, enableAccessToken, encryptedClientSecret,
         extraParams, groupPrefix, groupsClaim, issuerUri, kubectlRedirectUri,
         scopes, userClaim, userPrefix;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_KubernetesMetadata
//

@implementation GTLRGKEHub_KubernetesMetadata
@dynamic kubernetesApiServerVersion, memoryMb, nodeCount, nodeProviderId,
         updateTime, vcpuCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_KubernetesResource
//

@implementation GTLRGKEHub_KubernetesResource
@dynamic connectResources, membershipCrManifest, membershipResources,
         resourceOptions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectResources" : [GTLRGKEHub_ResourceManifest class],
    @"membershipResources" : [GTLRGKEHub_ResourceManifest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListFeaturesResponse
//

@implementation GTLRGKEHub_ListFeaturesResponse
@dynamic nextPageToken, resources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resources" : [GTLRGKEHub_Feature class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"resources";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListFleetsResponse
//

@implementation GTLRGKEHub_ListFleetsResponse
@dynamic fleets, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fleets" : [GTLRGKEHub_Fleet class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"fleets";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListLocationsResponse
//

@implementation GTLRGKEHub_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRGKEHub_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListMembershipBindingsResponse
//

@implementation GTLRGKEHub_ListMembershipBindingsResponse
@dynamic membershipBindings, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"membershipBindings" : [GTLRGKEHub_MembershipBinding class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"membershipBindings";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListMembershipsResponse
//

@implementation GTLRGKEHub_ListMembershipsResponse
@dynamic nextPageToken, resources, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resources" : [GTLRGKEHub_Membership class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"resources";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListOperationsResponse
//

@implementation GTLRGKEHub_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRGKEHub_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListScopeNamespacesResponse
//

@implementation GTLRGKEHub_ListScopeNamespacesResponse
@dynamic nextPageToken, scopeNamespaces;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scopeNamespaces" : [GTLRGKEHub_Namespace class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"scopeNamespaces";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListScopeRBACRoleBindingsResponse
//

@implementation GTLRGKEHub_ListScopeRBACRoleBindingsResponse
@dynamic nextPageToken, rbacrolebindings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rbacrolebindings" : [GTLRGKEHub_RBACRoleBinding class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"rbacrolebindings";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ListScopesResponse
//

@implementation GTLRGKEHub_ListScopesResponse
@dynamic nextPageToken, scopes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scopes" : [GTLRGKEHub_Scope class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"scopes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Location
//

@implementation GTLRGKEHub_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Location_Labels
//

@implementation GTLRGKEHub_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Location_Metadata
//

@implementation GTLRGKEHub_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Membership
//

@implementation GTLRGKEHub_Membership
@dynamic authority, createTime, deleteTime, descriptionProperty, endpoint,
         externalId, labels, lastConnectionTime, monitoringConfig, name, state,
         uniqueId, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Membership_Labels
//

@implementation GTLRGKEHub_Membership_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipBinding
//

@implementation GTLRGKEHub_MembershipBinding
@dynamic createTime, deleteTime, labels, name, scope, state, uid, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipBinding_Labels
//

@implementation GTLRGKEHub_MembershipBinding_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipBindingLifecycleState
//

@implementation GTLRGKEHub_MembershipBindingLifecycleState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipEndpoint
//

@implementation GTLRGKEHub_MembershipEndpoint
@dynamic applianceCluster, edgeCluster, gkeCluster, googleManaged,
         kubernetesMetadata, kubernetesResource, multiCloudCluster,
         onPremCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipFeatureSpec
//

@implementation GTLRGKEHub_MembershipFeatureSpec
@dynamic configmanagement, fleetobservability, identityservice, mesh, origin,
         policycontroller;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipFeatureState
//

@implementation GTLRGKEHub_MembershipFeatureState
@dynamic appdevexperience, clusterupgrade, configmanagement, fleetobservability,
         identityservice, policycontroller, servicemesh, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MembershipState
//

@implementation GTLRGKEHub_MembershipState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MonitoringConfig
//

@implementation GTLRGKEHub_MonitoringConfig
@dynamic cluster, clusterHash, kubernetesMetricsPrefix, location, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MultiCloudCluster
//

@implementation GTLRGKEHub_MultiCloudCluster
@dynamic clusterMissing, resourceLink;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_MultiClusterIngressFeatureSpec
//

@implementation GTLRGKEHub_MultiClusterIngressFeatureSpec
@dynamic configMembership;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Namespace
//

@implementation GTLRGKEHub_Namespace
@dynamic createTime, deleteTime, labels, name, namespaceLabels, scope, state,
         uid, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Namespace_Labels
//

@implementation GTLRGKEHub_Namespace_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Namespace_NamespaceLabels
//

@implementation GTLRGKEHub_Namespace_NamespaceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_NamespaceLifecycleState
//

@implementation GTLRGKEHub_NamespaceLifecycleState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_OnPremCluster
//

@implementation GTLRGKEHub_OnPremCluster
@dynamic adminCluster, clusterMissing, clusterType, resourceLink;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Operation
//

@implementation GTLRGKEHub_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Operation_Metadata
//

@implementation GTLRGKEHub_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Operation_Response
//

@implementation GTLRGKEHub_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_OperationMetadata
//

@implementation GTLRGKEHub_OperationMetadata
@dynamic apiVersion, cancelRequested, createTime, endTime, statusDetail, target,
         verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Origin
//

@implementation GTLRGKEHub_Origin
@dynamic type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Policy
//

@implementation GTLRGKEHub_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRGKEHub_AuditConfig class],
    @"bindings" : [GTLRGKEHub_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyBinding
//

@implementation GTLRGKEHub_PolicyBinding
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerBundleInstallSpec
//

@implementation GTLRGKEHub_PolicyControllerBundleInstallSpec
@dynamic exemptedNamespaces;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedNamespaces" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerHubConfig
//

@implementation GTLRGKEHub_PolicyControllerHubConfig
@dynamic auditIntervalSeconds, constraintViolationLimit, deploymentConfigs,
         exemptableNamespaces, installSpec, logDeniesEnabled, monitoring,
         mutationEnabled, policyContent, referentialRulesEnabled;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptableNamespaces" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerHubConfig_DeploymentConfigs
//

@implementation GTLRGKEHub_PolicyControllerHubConfig_DeploymentConfigs

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerMembershipSpec
//

@implementation GTLRGKEHub_PolicyControllerMembershipSpec
@dynamic policyControllerHubConfig, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerMembershipState
//

@implementation GTLRGKEHub_PolicyControllerMembershipState
@dynamic componentStates, policyContentState, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerMembershipState_ComponentStates
//

@implementation GTLRGKEHub_PolicyControllerMembershipState_ComponentStates

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_PolicyControllerOnClusterState class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerMonitoringConfig
//

@implementation GTLRGKEHub_PolicyControllerMonitoringConfig
@dynamic backends;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"backends" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerOnClusterState
//

@implementation GTLRGKEHub_PolicyControllerOnClusterState
@dynamic details, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerPolicyContentSpec
//

@implementation GTLRGKEHub_PolicyControllerPolicyContentSpec
@dynamic bundles, templateLibrary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerPolicyContentSpec_Bundles
//

@implementation GTLRGKEHub_PolicyControllerPolicyContentSpec_Bundles

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_PolicyControllerBundleInstallSpec class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerPolicyContentState
//

@implementation GTLRGKEHub_PolicyControllerPolicyContentState
@dynamic bundleStates, referentialSyncConfigState, templateLibraryState;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerPolicyContentState_BundleStates
//

@implementation GTLRGKEHub_PolicyControllerPolicyContentState_BundleStates

+ (Class)classForAdditionalProperties {
  return [GTLRGKEHub_PolicyControllerOnClusterState class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig
//

@implementation GTLRGKEHub_PolicyControllerPolicyControllerDeploymentConfig
@dynamic containerResources, podAffinity, podAntiAffinity, podTolerations,
         replicaCount;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"podTolerations" : [GTLRGKEHub_PolicyControllerToleration class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerResourceList
//

@implementation GTLRGKEHub_PolicyControllerResourceList
@dynamic cpu, memory;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerResourceRequirements
//

@implementation GTLRGKEHub_PolicyControllerResourceRequirements
@dynamic limits, requests;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerTemplateLibraryConfig
//

@implementation GTLRGKEHub_PolicyControllerTemplateLibraryConfig
@dynamic installation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_PolicyControllerToleration
//

@implementation GTLRGKEHub_PolicyControllerToleration
@dynamic effect, key, operatorProperty, value;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"operatorProperty" : @"operator" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_RBACRoleBinding
//

@implementation GTLRGKEHub_RBACRoleBinding
@dynamic createTime, deleteTime, group, labels, name, role, state, uid,
         updateTime, user;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_RBACRoleBinding_Labels
//

@implementation GTLRGKEHub_RBACRoleBinding_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_RBACRoleBindingLifecycleState
//

@implementation GTLRGKEHub_RBACRoleBindingLifecycleState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ResourceManifest
//

@implementation GTLRGKEHub_ResourceManifest
@dynamic clusterScoped, manifest;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ResourceOptions
//

@implementation GTLRGKEHub_ResourceOptions
@dynamic connectVersion, k8sVersion, v1beta1Crd;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Role
//

@implementation GTLRGKEHub_Role
@dynamic predefinedRole;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Scope
//

@implementation GTLRGKEHub_Scope
@dynamic createTime, deleteTime, labels, name, namespaceLabels, state, uid,
         updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Scope_Labels
//

@implementation GTLRGKEHub_Scope_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Scope_NamespaceLabels
//

@implementation GTLRGKEHub_Scope_NamespaceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ScopeFeatureSpec
//

@implementation GTLRGKEHub_ScopeFeatureSpec
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ScopeFeatureState
//

@implementation GTLRGKEHub_ScopeFeatureState
@dynamic state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ScopeLifecycleState
//

@implementation GTLRGKEHub_ScopeLifecycleState
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_SecurityPostureConfig
//

@implementation GTLRGKEHub_SecurityPostureConfig
@dynamic mode, vulnerabilityMode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ServiceMeshControlPlaneManagement
//

@implementation GTLRGKEHub_ServiceMeshControlPlaneManagement
@dynamic details, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRGKEHub_ServiceMeshStatusDetails class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ServiceMeshDataPlaneManagement
//

@implementation GTLRGKEHub_ServiceMeshDataPlaneManagement
@dynamic details, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRGKEHub_ServiceMeshStatusDetails class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ServiceMeshMembershipSpec
//

@implementation GTLRGKEHub_ServiceMeshMembershipSpec
@dynamic controlPlane, management;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ServiceMeshMembershipState
//

@implementation GTLRGKEHub_ServiceMeshMembershipState
@dynamic controlPlaneManagement, dataPlaneManagement;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_ServiceMeshStatusDetails
//

@implementation GTLRGKEHub_ServiceMeshStatusDetails
@dynamic code, details;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_SetIamPolicyRequest
//

@implementation GTLRGKEHub_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_Status
//

@implementation GTLRGKEHub_Status
@dynamic code, descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_TestIamPermissionsRequest
//

@implementation GTLRGKEHub_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_TestIamPermissionsResponse
//

@implementation GTLRGKEHub_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEHub_TypeMeta
//

@implementation GTLRGKEHub_TypeMeta
@dynamic apiVersion, kind;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end
