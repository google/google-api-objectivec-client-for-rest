// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Search Console API (searchconsole/v1)
// Description:
//   The Search Console API provides access to both Search Console data
//   (verified users only) and to public information on an URL basis (anyone)
// Documentation:
//   https://developers.google.com/webmaster-tools/search-console-api/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSearchConsole_AmpInspectionResult;
@class GTLRSearchConsole_AmpIssue;
@class GTLRSearchConsole_ApiDataRow;
@class GTLRSearchConsole_ApiDimensionFilter;
@class GTLRSearchConsole_ApiDimensionFilterGroup;
@class GTLRSearchConsole_BlockedResource;
@class GTLRSearchConsole_DetectedItems;
@class GTLRSearchConsole_Image;
@class GTLRSearchConsole_IndexStatusInspectionResult;
@class GTLRSearchConsole_Item;
@class GTLRSearchConsole_MobileFriendlyIssue;
@class GTLRSearchConsole_MobileUsabilityInspectionResult;
@class GTLRSearchConsole_MobileUsabilityIssue;
@class GTLRSearchConsole_ResourceIssue;
@class GTLRSearchConsole_RichResultsInspectionResult;
@class GTLRSearchConsole_RichResultsIssue;
@class GTLRSearchConsole_TestStatus;
@class GTLRSearchConsole_UrlInspectionResult;
@class GTLRSearchConsole_WmxSite;
@class GTLRSearchConsole_WmxSitemap;
@class GTLRSearchConsole_WmxSitemapContent;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpInspectionResult.ampIndexStatusVerdict

/**
 *  Equivalent to "Error" or "Invalid" for the page or item in Search Console.
 *
 *  Value: "FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Fail;
/**
 *  Equivalent to "Excluded" for the page or item in Search Console.
 *
 *  Value: "NEUTRAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Neutral;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Partial;
/**
 *  Equivalent to "Valid" for the page or item in Search Console.
 *
 *  Value: "PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Pass;
/**
 *  Unknown verdict.
 *
 *  Value: "VERDICT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_VerdictUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpInspectionResult.indexingState

/**
 *  Indexing allowed.
 *
 *  Value: "AMP_INDEXING_ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_IndexingState_AmpIndexingAllowed;
/**
 *  Unknown indexing status.
 *
 *  Value: "AMP_INDEXING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_IndexingState_AmpIndexingStateUnspecified;
/**
 *  Indexing not allowed, 'unavailable_after' date expired.
 *
 *  Value: "BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_IndexingState_BlockedDueToExpiredUnavailableAfter;
/**
 *  Indexing not allowed, 'noindex' detected.
 *
 *  Value: "BLOCKED_DUE_TO_NOINDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_IndexingState_BlockedDueToNoindex;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpInspectionResult.pageFetchState

/**
 *  Blocked due to unauthorized request (401).
 *
 *  Value: "ACCESS_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_AccessDenied;
/**
 *  Blocked due to access forbidden (403).
 *
 *  Value: "ACCESS_FORBIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_AccessForbidden;
/**
 *  Blocked due to other 4xx issue (not 403, 404).
 *
 *  Value: "BLOCKED_4XX"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Blocked4xx;
/**
 *  Blocked by robots.txt.
 *
 *  Value: "BLOCKED_ROBOTS_TXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_BlockedRobotsTxt;
/**
 *  Internal error.
 *
 *  Value: "INTERNAL_CRAWL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_InternalCrawlError;
/**
 *  Invalid URL.
 *
 *  Value: "INVALID_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_InvalidUrl;
/**
 *  Not found (404).
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_NotFound;
/**
 *  Unknown fetch state.
 *
 *  Value: "PAGE_FETCH_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_PageFetchStateUnspecified;
/**
 *  Redirection error.
 *
 *  Value: "REDIRECT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_RedirectError;
/**
 *  Server error (5xx).
 *
 *  Value: "SERVER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_ServerError;
/**
 *  Soft 404.
 *
 *  Value: "SOFT_404"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Soft404;
/**
 *  Successful fetch.
 *
 *  Value: "SUCCESSFUL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Successful;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpInspectionResult.robotsTxtState

/**
 *  Crawl allowed by robots.txt.
 *
 *  Value: "ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_Allowed;
/**
 *  Crawl blocked by robots.txt.
 *
 *  Value: "DISALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_Disallowed;
/**
 *  Unknown robots.txt state, typically because the page wasn't fetched or
 *  found, or because robots.txt itself couldn't be reached.
 *
 *  Value: "ROBOTS_TXT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_RobotsTxtStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpInspectionResult.verdict

/**
 *  Equivalent to "Error" or "Invalid" for the page or item in Search Console.
 *
 *  Value: "FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_Verdict_Fail;
/**
 *  Equivalent to "Excluded" for the page or item in Search Console.
 *
 *  Value: "NEUTRAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_Verdict_Neutral;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_Verdict_Partial;
/**
 *  Equivalent to "Valid" for the page or item in Search Console.
 *
 *  Value: "PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_Verdict_Pass;
/**
 *  Unknown verdict.
 *
 *  Value: "VERDICT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpInspectionResult_Verdict_VerdictUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_AmpIssue.severity

/**
 *  Error.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpIssue_Severity_Error;
/**
 *  Unknown severity.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpIssue_Severity_SeverityUnspecified;
/**
 *  Warning.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_AmpIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilter.dimension

/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Country;
/** Value: "DEVICE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Device;
/** Value: "PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Page;
/** Value: "QUERY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_Query;
/** Value: "SEARCH_APPEARANCE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_Dimension_SearchAppearance;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilter.operatorProperty

/** Value: "CONTAINS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Contains;
/** Value: "EQUALS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Equals;
/** Value: "EXCLUDING_REGEX" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_ExcludingRegex;
/** Value: "INCLUDING_REGEX" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_IncludingRegex;
/** Value: "NOT_CONTAINS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotContains;
/** Value: "NOT_EQUALS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotEquals;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_ApiDimensionFilterGroup.groupType

/** Value: "AND" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_ApiDimensionFilterGroup_GroupType_And;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_IndexStatusInspectionResult.crawledAs

/**
 *  Unknown user agent.
 *
 *  Value: "CRAWLING_USER_AGENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_CrawlingUserAgentUnspecified;
/**
 *  Desktop user agent.
 *
 *  Value: "DESKTOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_Desktop;
/**
 *  Mobile user agent.
 *
 *  Value: "MOBILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_Mobile;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_IndexStatusInspectionResult.indexingState

/**
 *  Indexing not allowed, 'noindex' detected in 'X-Robots-Tag' http header.
 *
 *  Value: "BLOCKED_BY_HTTP_HEADER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByHttpHeader;
/**
 *  Indexing not allowed, 'noindex' detected in 'robots' meta tag.
 *
 *  Value: "BLOCKED_BY_META_TAG"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByMetaTag;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "BLOCKED_BY_ROBOTS_TXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByRobotsTxt;
/**
 *  Indexing allowed.
 *
 *  Value: "INDEXING_ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_IndexingAllowed;
/**
 *  Unknown indexing status.
 *
 *  Value: "INDEXING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_IndexingStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_IndexStatusInspectionResult.pageFetchState

/**
 *  Blocked due to unauthorized request (401).
 *
 *  Value: "ACCESS_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_AccessDenied;
/**
 *  Blocked due to access forbidden (403).
 *
 *  Value: "ACCESS_FORBIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_AccessForbidden;
/**
 *  Blocked due to other 4xx issue (not 403, 404).
 *
 *  Value: "BLOCKED_4XX"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Blocked4xx;
/**
 *  Blocked by robots.txt.
 *
 *  Value: "BLOCKED_ROBOTS_TXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_BlockedRobotsTxt;
/**
 *  Internal error.
 *
 *  Value: "INTERNAL_CRAWL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_InternalCrawlError;
/**
 *  Invalid URL.
 *
 *  Value: "INVALID_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_InvalidUrl;
/**
 *  Not found (404).
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_NotFound;
/**
 *  Unknown fetch state.
 *
 *  Value: "PAGE_FETCH_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_PageFetchStateUnspecified;
/**
 *  Redirection error.
 *
 *  Value: "REDIRECT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_RedirectError;
/**
 *  Server error (5xx).
 *
 *  Value: "SERVER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_ServerError;
/**
 *  Soft 404.
 *
 *  Value: "SOFT_404"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Soft404;
/**
 *  Successful fetch.
 *
 *  Value: "SUCCESSFUL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Successful;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_IndexStatusInspectionResult.robotsTxtState

/**
 *  Crawl allowed by robots.txt.
 *
 *  Value: "ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_Allowed;
/**
 *  Crawl blocked by robots.txt.
 *
 *  Value: "DISALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_Disallowed;
/**
 *  Unknown robots.txt state, typically because the page wasn't fetched or
 *  found, or because robots.txt itself couldn't be reached.
 *
 *  Value: "ROBOTS_TXT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_RobotsTxtStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_IndexStatusInspectionResult.verdict

/**
 *  Equivalent to "Error" or "Invalid" for the page or item in Search Console.
 *
 *  Value: "FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Fail;
/**
 *  Equivalent to "Excluded" for the page or item in Search Console.
 *
 *  Value: "NEUTRAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Neutral;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Partial;
/**
 *  Equivalent to "Valid" for the page or item in Search Console.
 *
 *  Value: "PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Pass;
/**
 *  Unknown verdict.
 *
 *  Value: "VERDICT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_VerdictUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_MobileFriendlyIssue.rule

/**
 *  Viewport is not specified using the meta viewport tag. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#viewport_not_configured).
 *
 *  Value: "CONFIGURE_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_ConfigureViewport;
/**
 *  Viewport defined to a fixed width. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport).
 *
 *  Value: "FIXED_WIDTH_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_FixedWidthViewport;
/**
 *  Unknown rule. Sorry, we don't have any description for the rule that was
 *  broken.
 *
 *  Value: "MOBILE_FRIENDLY_RULE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_MobileFriendlyRuleUnspecified;
/**
 *  Content not sized to viewport. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport).
 *
 *  Value: "SIZE_CONTENT_TO_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_SizeContentToViewport;
/**
 *  Touch elements are too close to each other. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close).
 *
 *  Value: "TAP_TARGETS_TOO_CLOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_TapTargetsTooClose;
/**
 *  Font size is too small for easy reading on a small screen. [Learn More]
 *  (https://support.google.com/webmasters/answer/6352293#small_font_size).
 *
 *  Value: "USE_LEGIBLE_FONT_SIZES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_UseLegibleFontSizes;
/**
 *  Plugins incompatible with mobile devices are being used. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#flash_usage).
 *
 *  Value: "USES_INCOMPATIBLE_PLUGINS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileFriendlyIssue_Rule_UsesIncompatiblePlugins;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_MobileUsabilityInspectionResult.verdict

/**
 *  Equivalent to "Error" or "Invalid" for the page or item in Search Console.
 *
 *  Value: "FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Fail;
/**
 *  Equivalent to "Excluded" for the page or item in Search Console.
 *
 *  Value: "NEUTRAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Neutral;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Partial;
/**
 *  Equivalent to "Valid" for the page or item in Search Console.
 *
 *  Value: "PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Pass;
/**
 *  Unknown verdict.
 *
 *  Value: "VERDICT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_VerdictUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_MobileUsabilityIssue.issueType

/**
 *  Viewport is not specified using the meta viewport tag. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#viewport_not_configured#error-list).
 *
 *  Value: "CONFIGURE_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_ConfigureViewport;
/**
 *  Viewport defined to a fixed width. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport#error-list).
 *
 *  Value: "FIXED_WIDTH_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_FixedWidthViewport;
/**
 *  Unknown issue. Sorry, we don't have any description for the rule that was
 *  broken.
 *
 *  Value: "MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_MobileUsabilityIssueTypeUnspecified;
/**
 *  Content not sized to viewport. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport#error-list).
 *
 *  Value: "SIZE_CONTENT_TO_VIEWPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_SizeContentToViewport;
/**
 *  Touch elements are too close to each other. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close#error-list).
 *
 *  Value: "TAP_TARGETS_TOO_CLOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_TapTargetsTooClose;
/**
 *  Font size is too small for easy reading on a small screen. [Learn More]
 *  (https://support.google.com/webmasters/answer/6352293#small_font_size#error-list).
 *
 *  Value: "USE_LEGIBLE_FONT_SIZES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_UseLegibleFontSizes;
/**
 *  Plugins incompatible with mobile devices are being used. [Learn more]
 *  (https://support.google.com/webmasters/answer/6352293#flash_usage#error-list).
 *
 *  Value: "USES_INCOMPATIBLE_PLUGINS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_IssueType_UsesIncompatiblePlugins;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_MobileUsabilityIssue.severity

/**
 *  Error.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_Severity_Error;
/**
 *  Unknown severity.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_Severity_SeverityUnspecified;
/**
 *  Warning.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_MobileUsabilityIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_RichResultsInspectionResult.verdict

/**
 *  Equivalent to "Error" or "Invalid" for the page or item in Search Console.
 *
 *  Value: "FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Fail;
/**
 *  Equivalent to "Excluded" for the page or item in Search Console.
 *
 *  Value: "NEUTRAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Neutral;
/**
 *  Reserved, no longer in use.
 *
 *  Value: "PARTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Partial;
/**
 *  Equivalent to "Valid" for the page or item in Search Console.
 *
 *  Value: "PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Pass;
/**
 *  Unknown verdict.
 *
 *  Value: "VERDICT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsInspectionResult_Verdict_VerdictUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_RichResultsIssue.severity

/**
 *  Error.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsIssue_Severity_Error;
/**
 *  Unknown severity.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsIssue_Severity_SeverityUnspecified;
/**
 *  Warning.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RichResultsIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_RunMobileFriendlyTestResponse.mobileFriendliness

/**
 *  The page is mobile friendly.
 *
 *  Value: "MOBILE_FRIENDLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendly;
/**
 *  Internal error when running this test. Please try running the test again.
 *
 *  Value: "MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendlyTestResultUnspecified;
/**
 *  The page is not mobile friendly.
 *
 *  Value: "NOT_MOBILE_FRIENDLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_NotMobileFriendly;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.aggregationType

/** Value: "AUTO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_Auto;
/** Value: "BY_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByPage;
/** Value: "BY_PROPERTY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByProperty;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.dataState

/**
 *  Include all data, full and partial.
 *
 *  Value: "ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_All;
/**
 *  Default value, should not be used.
 *
 *  Value: "DATA_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_DataStateUnspecified;
/**
 *  Include full final data only, without partial.
 *
 *  Value: "FINAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_Final;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.dimensions

/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Country;
/** Value: "DATE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Date;
/** Value: "DEVICE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Device;
/** Value: "PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Page;
/** Value: "QUERY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_Query;
/** Value: "SEARCH_APPEARANCE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Dimensions_SearchAppearance;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.searchType

/**
 *  Discover.
 *
 *  Value: "DISCOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Discover;
/**
 *  Google News (news.google.com or mobile app).
 *
 *  Value: "GOOGLE_NEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_GoogleNews;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Image;
/**
 *  News tab in search.
 *
 *  Value: "NEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_News;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Video;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Web;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryRequest.type

/**
 *  Discover.
 *
 *  Value: "DISCOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Discover;
/**
 *  Google News (news.google.com or mobile app).
 *
 *  Value: "GOOGLE_NEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_GoogleNews;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Image;
/**
 *  News tab in search.
 *
 *  Value: "NEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_News;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Video;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Web;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_SearchAnalyticsQueryResponse.responseAggregationType

/** Value: "AUTO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_Auto;
/** Value: "BY_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByPage;
/** Value: "BY_PROPERTY" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByProperty;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_TestStatus.status

/**
 *  Inspection has completed without errors.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_Complete;
/**
 *  Inspection terminated in an error state. This indicates a problem in
 *  Google's infrastructure, not a user error. Please try again later.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_InternalError;
/**
 *  Google can not access the URL because of a user error such as a robots.txt
 *  blockage, a 403 or 500 code etc. Please make sure that the URL provided is
 *  accessible by Googlebot and is not password protected.
 *
 *  Value: "PAGE_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_PageUnreachable;
/**
 *  Internal error when running this test. Please try running the test again.
 *
 *  Value: "TEST_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_TestStatus_Status_TestStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSite.permissionLevel

/**
 *  Full users can access all data, and perform most of the operations.
 *
 *  Value: "SITE_FULL_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteFullUser;
/**
 *  Owner has complete access to the site.
 *
 *  Value: "SITE_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteOwner;
/** Value: "SITE_PERMISSION_LEVEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SitePermissionLevelUnspecified;
/**
 *  Restricted users can access most of the data, and perform some operations.
 *
 *  Value: "SITE_RESTRICTED_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteRestrictedUser;
/**
 *  Unverified user has no access to site's data.
 *
 *  Value: "SITE_UNVERIFIED_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSite_PermissionLevel_SiteUnverifiedUser;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSitemap.type

/** Value: "ATOM_FEED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_AtomFeed;
/** Value: "NOT_SITEMAP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_NotSitemap;
/** Value: "OCEANFRONT" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_Oceanfront;
/**
 *  Unsupported sitemap types.
 *
 *  Value: "PATTERN_SITEMAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_PatternSitemap;
/** Value: "RSS_FEED" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_RssFeed;
/** Value: "SITEMAP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_Sitemap;
/** Value: "URL_LIST" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemap_Type_UrlList;

// ----------------------------------------------------------------------------
// GTLRSearchConsole_WmxSitemapContent.type

/** Value: "ANDROID_APP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_AndroidApp;
/**
 *  Unsupported content type.
 *
 *  Value: "DATA_FEED_ELEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_DataFeedElement;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Image;
/** Value: "IOS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_IosApp;
/** Value: "MOBILE" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Mobile;
/** Value: "NEWS" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_News;
/**
 *  Unsupported content type.
 *
 *  Value: "PATTERN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Pattern;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Video;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRSearchConsole_WmxSitemapContent_Type_Web;

/**
 *  AMP inspection result of the live page or the current information from
 *  Google's index, depending on whether you requested a live inspection or not.
 */
@interface GTLRSearchConsole_AmpInspectionResult : GTLRObject

/**
 *  Index status of the AMP URL.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Fail
 *        Equivalent to "Error" or "Invalid" for the page or item in Search
 *        Console. (Value: "FAIL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Neutral
 *        Equivalent to "Excluded" for the page or item in Search Console.
 *        (Value: "NEUTRAL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Partial
 *        Reserved, no longer in use. (Value: "PARTIAL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_Pass
 *        Equivalent to "Valid" for the page or item in Search Console. (Value:
 *        "PASS")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_AmpIndexStatusVerdict_VerdictUnspecified
 *        Unknown verdict. (Value: "VERDICT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *ampIndexStatusVerdict;

/**
 *  URL of the AMP that was inspected. If the submitted URL is a desktop page
 *  that refers to an AMP version, the AMP version will be inspected.
 */
@property(nonatomic, copy, nullable) NSString *ampUrl;

/**
 *  Whether or not the page blocks indexing through a noindex rule.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_IndexingState_AmpIndexingAllowed
 *        Indexing allowed. (Value: "AMP_INDEXING_ALLOWED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_IndexingState_AmpIndexingStateUnspecified
 *        Unknown indexing status. (Value: "AMP_INDEXING_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_IndexingState_BlockedDueToExpiredUnavailableAfter
 *        Indexing not allowed, 'unavailable_after' date expired. (Value:
 *        "BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_IndexingState_BlockedDueToNoindex
 *        Indexing not allowed, 'noindex' detected. (Value:
 *        "BLOCKED_DUE_TO_NOINDEX")
 */
@property(nonatomic, copy, nullable) NSString *indexingState;

/** A list of zero or more AMP issues found for the inspected URL. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_AmpIssue *> *issues;

/**
 *  Last time this AMP version was crawled by Google. Absent if the URL was
 *  never crawled successfully.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastCrawlTime;

/**
 *  Whether or not Google could fetch the AMP.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_AccessDenied
 *        Blocked due to unauthorized request (401). (Value: "ACCESS_DENIED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_AccessForbidden
 *        Blocked due to access forbidden (403). (Value: "ACCESS_FORBIDDEN")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Blocked4xx
 *        Blocked due to other 4xx issue (not 403, 404). (Value: "BLOCKED_4XX")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_BlockedRobotsTxt
 *        Blocked by robots.txt. (Value: "BLOCKED_ROBOTS_TXT")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_InternalCrawlError
 *        Internal error. (Value: "INTERNAL_CRAWL_ERROR")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_InvalidUrl
 *        Invalid URL. (Value: "INVALID_URL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_NotFound Not
 *        found (404). (Value: "NOT_FOUND")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_PageFetchStateUnspecified
 *        Unknown fetch state. (Value: "PAGE_FETCH_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_RedirectError
 *        Redirection error. (Value: "REDIRECT_ERROR")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_ServerError
 *        Server error (5xx). (Value: "SERVER_ERROR")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Soft404 Soft
 *        404. (Value: "SOFT_404")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_PageFetchState_Successful
 *        Successful fetch. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *pageFetchState;

/**
 *  Whether or not the page is blocked to Google by a robots.txt rule.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_Allowed
 *        Crawl allowed by robots.txt. (Value: "ALLOWED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_Disallowed
 *        Crawl blocked by robots.txt. (Value: "DISALLOWED")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_RobotsTxtState_RobotsTxtStateUnspecified
 *        Unknown robots.txt state, typically because the page wasn't fetched or
 *        found, or because robots.txt itself couldn't be reached. (Value:
 *        "ROBOTS_TXT_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *robotsTxtState;

/**
 *  The status of the most severe error on the page. If a page has both warnings
 *  and errors, the page status is error. Error status means the page cannot be
 *  shown in Search results.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_Verdict_Fail Equivalent to
 *        "Error" or "Invalid" for the page or item in Search Console. (Value:
 *        "FAIL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_Verdict_Neutral Equivalent
 *        to "Excluded" for the page or item in Search Console. (Value:
 *        "NEUTRAL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_Verdict_Partial Reserved,
 *        no longer in use. (Value: "PARTIAL")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_Verdict_Pass Equivalent to
 *        "Valid" for the page or item in Search Console. (Value: "PASS")
 *    @arg @c kGTLRSearchConsole_AmpInspectionResult_Verdict_VerdictUnspecified
 *        Unknown verdict. (Value: "VERDICT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verdict;

@end


/**
 *  AMP issue.
 */
@interface GTLRSearchConsole_AmpIssue : GTLRObject

/** Brief description of this issue. */
@property(nonatomic, copy, nullable) NSString *issueMessage;

/**
 *  Severity of this issue: WARNING or ERROR.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_AmpIssue_Severity_Error Error. (Value: "ERROR")
 *    @arg @c kGTLRSearchConsole_AmpIssue_Severity_SeverityUnspecified Unknown
 *        severity. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_AmpIssue_Severity_Warning Warning. (Value:
 *        "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  GTLRSearchConsole_ApiDataRow
 */
@interface GTLRSearchConsole_ApiDataRow : GTLRObject

/**
 *  clicks
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clicks;

/**
 *  ctr
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ctr;

/**
 *  impressions
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *impressions;

@property(nonatomic, strong, nullable) NSArray<NSString *> *keys;

/**
 *  position
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

@end


/**
 *  A filter test to be applied to each row in the data set, where a match can
 *  return the row. Filters are string comparisons, and values and dimension
 *  names are not case-sensitive. Individual filters are either AND'ed or OR'ed
 *  within their parent filter group, according to the group's group type. You
 *  do not need to group by a specified dimension to filter against it.
 */
@interface GTLRSearchConsole_ApiDimensionFilter : GTLRObject

/**
 *  dimension
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Country Value
 *        "COUNTRY"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Device Value
 *        "DEVICE"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Page Value "PAGE"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_Query Value
 *        "QUERY"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_Dimension_SearchAppearance
 *        Value "SEARCH_APPEARANCE"
 */
@property(nonatomic, copy, nullable) NSString *dimension;

@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  operatorProperty
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Contains
 *        Value "CONTAINS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_Equals
 *        Value "EQUALS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_ExcludingRegex
 *        Value "EXCLUDING_REGEX"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_IncludingRegex
 *        Value "INCLUDING_REGEX"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotContains
 *        Value "NOT_CONTAINS"
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilter_OperatorProperty_NotEquals
 *        Value "NOT_EQUALS"
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

@end


/**
 *  A set of dimension value filters to test against each row. Only rows that
 *  pass all filter groups will be returned. All results within a filter group
 *  are either AND'ed or OR'ed together, depending on the group type selected.
 *  All filter groups are AND'ed together.
 */
@interface GTLRSearchConsole_ApiDimensionFilterGroup : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDimensionFilter *> *filters;

/**
 *  groupType
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_ApiDimensionFilterGroup_GroupType_And Value
 *        "AND"
 */
@property(nonatomic, copy, nullable) NSString *groupType;

@end


/**
 *  Blocked resource.
 */
@interface GTLRSearchConsole_BlockedResource : GTLRObject

/** URL of the blocked resource. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Rich Results items grouped by type.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSearchConsole_DetectedItems : GTLRCollectionObject

/**
 *  List of Rich Results items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_Item *> *items;

/** Rich Results type */
@property(nonatomic, copy, nullable) NSString *richResultType;

@end


/**
 *  Describe image data.
 */
@interface GTLRSearchConsole_Image : GTLRObject

/**
 *  Image data in format determined by the mime type. Currently, the format will
 *  always be "image/png", but this might change in the future.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/** The mime-type of the image data. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  Results of index status inspection for either the live page or the version
 *  in Google's index, depending on whether you requested a live inspection or
 *  not. For more information, see the [Index coverage report
 *  documentation](https://support.google.com/webmasters/answer/7440203).
 */
@interface GTLRSearchConsole_IndexStatusInspectionResult : GTLRObject

/**
 *  Could Google find and index the page. More details about page indexing
 *  appear in 'indexing_state'.
 */
@property(nonatomic, copy, nullable) NSString *coverageState;

/**
 *  Primary crawler that was used by Google to crawl your site.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_CrawlingUserAgentUnspecified
 *        Unknown user agent. (Value: "CRAWLING_USER_AGENT_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_Desktop
 *        Desktop user agent. (Value: "DESKTOP")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_CrawledAs_Mobile
 *        Mobile user agent. (Value: "MOBILE")
 */
@property(nonatomic, copy, nullable) NSString *crawledAs;

/**
 *  The URL of the page that Google selected as canonical. If the page was not
 *  indexed, this field is absent.
 */
@property(nonatomic, copy, nullable) NSString *googleCanonical;

/**
 *  Whether or not the page blocks indexing through a noindex rule.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByHttpHeader
 *        Indexing not allowed, 'noindex' detected in 'X-Robots-Tag' http
 *        header. (Value: "BLOCKED_BY_HTTP_HEADER")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByMetaTag
 *        Indexing not allowed, 'noindex' detected in 'robots' meta tag. (Value:
 *        "BLOCKED_BY_META_TAG")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_BlockedByRobotsTxt
 *        Reserved, no longer in use. (Value: "BLOCKED_BY_ROBOTS_TXT")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_IndexingAllowed
 *        Indexing allowed. (Value: "INDEXING_ALLOWED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_IndexingState_IndexingStateUnspecified
 *        Unknown indexing status. (Value: "INDEXING_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *indexingState;

/**
 *  Last time this URL was crawled by Google using the [primary
 *  crawler](https://support.google.com/webmasters/answer/7440203#primary_crawler).
 *  Absent if the URL was never crawled successfully.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastCrawlTime;

/**
 *  Whether or not Google could retrieve the page from your server. Equivalent
 *  to ["page
 *  fetch"](https://support.google.com/webmasters/answer/9012289#index_coverage)
 *  in the URL inspection report.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_AccessDenied
 *        Blocked due to unauthorized request (401). (Value: "ACCESS_DENIED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_AccessForbidden
 *        Blocked due to access forbidden (403). (Value: "ACCESS_FORBIDDEN")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Blocked4xx
 *        Blocked due to other 4xx issue (not 403, 404). (Value: "BLOCKED_4XX")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_BlockedRobotsTxt
 *        Blocked by robots.txt. (Value: "BLOCKED_ROBOTS_TXT")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_InternalCrawlError
 *        Internal error. (Value: "INTERNAL_CRAWL_ERROR")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_InvalidUrl
 *        Invalid URL. (Value: "INVALID_URL")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_NotFound
 *        Not found (404). (Value: "NOT_FOUND")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_PageFetchStateUnspecified
 *        Unknown fetch state. (Value: "PAGE_FETCH_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_RedirectError
 *        Redirection error. (Value: "REDIRECT_ERROR")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_ServerError
 *        Server error (5xx). (Value: "SERVER_ERROR")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Soft404
 *        Soft 404. (Value: "SOFT_404")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_PageFetchState_Successful
 *        Successful fetch. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *pageFetchState;

/** URLs that link to the inspected URL, directly and indirectly. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *referringUrls;

/**
 *  Whether or not the page is blocked to Google by a robots.txt rule.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_Allowed
 *        Crawl allowed by robots.txt. (Value: "ALLOWED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_Disallowed
 *        Crawl blocked by robots.txt. (Value: "DISALLOWED")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_RobotsTxtState_RobotsTxtStateUnspecified
 *        Unknown robots.txt state, typically because the page wasn't fetched or
 *        found, or because robots.txt itself couldn't be reached. (Value:
 *        "ROBOTS_TXT_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *robotsTxtState;

/**
 *  Any sitemaps that this URL was listed in, as known by Google. Not guaranteed
 *  to be an exhaustive list, especially if Google did not discover this URL
 *  through a sitemap. Absent if no sitemaps were found.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sitemap;

/**
 *  The URL that your page or site [declares as
 *  canonical](https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?#define-canonical).
 *  If you did not declare a canonical URL, this field is absent.
 */
@property(nonatomic, copy, nullable) NSString *userCanonical;

/**
 *  High level verdict about whether the URL *is* indexed (indexed status), or
 *  *can be* indexed (live inspection).
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Fail
 *        Equivalent to "Error" or "Invalid" for the page or item in Search
 *        Console. (Value: "FAIL")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Neutral
 *        Equivalent to "Excluded" for the page or item in Search Console.
 *        (Value: "NEUTRAL")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Partial
 *        Reserved, no longer in use. (Value: "PARTIAL")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_Pass
 *        Equivalent to "Valid" for the page or item in Search Console. (Value:
 *        "PASS")
 *    @arg @c kGTLRSearchConsole_IndexStatusInspectionResult_Verdict_VerdictUnspecified
 *        Unknown verdict. (Value: "VERDICT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verdict;

@end


/**
 *  Index inspection request.
 */
@interface GTLRSearchConsole_InspectUrlIndexRequest : GTLRObject

/**
 *  Required. URL to inspect. Must be under the property specified in
 *  "site_url".
 */
@property(nonatomic, copy, nullable) NSString *inspectionUrl;

/**
 *  Optional. An [IETF BCP-47](https://en.wikipedia.org/wiki/IETF_language_tag)
 *  language code representing the requested language for translated issue
 *  messages, e.g. "en-US", "or "de-CH". Default value is "en-US".
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The URL of the property as defined in Search Console.
 *  **Examples:** `http://www.example.com/` for a URL-prefix property, or
 *  `sc-domain:example.com` for a Domain property.
 */
@property(nonatomic, copy, nullable) NSString *siteUrl;

@end


/**
 *  Index-Status inspection response.
 */
@interface GTLRSearchConsole_InspectUrlIndexResponse : GTLRObject

/** URL inspection results. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_UrlInspectionResult *inspectionResult;

@end


/**
 *  A specific rich result found on the page.
 */
@interface GTLRSearchConsole_Item : GTLRObject

/** A list of zero or more rich result issues found for this instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_RichResultsIssue *> *issues;

/** The user-provided name of this item. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Mobile-friendly issue.
 */
@interface GTLRSearchConsole_MobileFriendlyIssue : GTLRObject

/**
 *  Rule violated.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_ConfigureViewport
 *        Viewport is not specified using the meta viewport tag. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#viewport_not_configured).
 *        (Value: "CONFIGURE_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_FixedWidthViewport
 *        Viewport defined to a fixed width. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport).
 *        (Value: "FIXED_WIDTH_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_MobileFriendlyRuleUnspecified
 *        Unknown rule. Sorry, we don't have any description for the rule that
 *        was broken. (Value: "MOBILE_FRIENDLY_RULE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_SizeContentToViewport
 *        Content not sized to viewport. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport).
 *        (Value: "SIZE_CONTENT_TO_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_TapTargetsTooClose
 *        Touch elements are too close to each other. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close).
 *        (Value: "TAP_TARGETS_TOO_CLOSE")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_UseLegibleFontSizes
 *        Font size is too small for easy reading on a small screen. [Learn
 *        More]
 *        (https://support.google.com/webmasters/answer/6352293#small_font_size).
 *        (Value: "USE_LEGIBLE_FONT_SIZES")
 *    @arg @c kGTLRSearchConsole_MobileFriendlyIssue_Rule_UsesIncompatiblePlugins
 *        Plugins incompatible with mobile devices are being used. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#flash_usage).
 *        (Value: "USES_INCOMPATIBLE_PLUGINS")
 */
@property(nonatomic, copy, nullable) NSString *rule;

@end


/**
 *  Mobile-usability inspection results.
 */
@interface GTLRSearchConsole_MobileUsabilityInspectionResult : GTLRObject

/** A list of zero or more mobile-usability issues detected for this URL. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_MobileUsabilityIssue *> *issues;

/**
 *  High-level mobile-usability inspection result for this URL.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Fail
 *        Equivalent to "Error" or "Invalid" for the page or item in Search
 *        Console. (Value: "FAIL")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Neutral
 *        Equivalent to "Excluded" for the page or item in Search Console.
 *        (Value: "NEUTRAL")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Partial
 *        Reserved, no longer in use. (Value: "PARTIAL")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_Pass
 *        Equivalent to "Valid" for the page or item in Search Console. (Value:
 *        "PASS")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityInspectionResult_Verdict_VerdictUnspecified
 *        Unknown verdict. (Value: "VERDICT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verdict;

@end


/**
 *  Mobile-usability issue.
 */
@interface GTLRSearchConsole_MobileUsabilityIssue : GTLRObject

/**
 *  Mobile-usability issue type.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_ConfigureViewport
 *        Viewport is not specified using the meta viewport tag. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#viewport_not_configured#error-list).
 *        (Value: "CONFIGURE_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_FixedWidthViewport
 *        Viewport defined to a fixed width. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#fixed-width_viewport#error-list).
 *        (Value: "FIXED_WIDTH_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_MobileUsabilityIssueTypeUnspecified
 *        Unknown issue. Sorry, we don't have any description for the rule that
 *        was broken. (Value: "MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_SizeContentToViewport
 *        Content not sized to viewport. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#content_not_sized_to_viewport#error-list).
 *        (Value: "SIZE_CONTENT_TO_VIEWPORT")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_TapTargetsTooClose
 *        Touch elements are too close to each other. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#touch_elements_too_close#error-list).
 *        (Value: "TAP_TARGETS_TOO_CLOSE")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_UseLegibleFontSizes
 *        Font size is too small for easy reading on a small screen. [Learn
 *        More]
 *        (https://support.google.com/webmasters/answer/6352293#small_font_size#error-list).
 *        (Value: "USE_LEGIBLE_FONT_SIZES")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_IssueType_UsesIncompatiblePlugins
 *        Plugins incompatible with mobile devices are being used. [Learn more]
 *        (https://support.google.com/webmasters/answer/6352293#flash_usage#error-list).
 *        (Value: "USES_INCOMPATIBLE_PLUGINS")
 */
@property(nonatomic, copy, nullable) NSString *issueType;

/** Additional information regarding the issue. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Not returned; reserved for future use.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_Severity_Error Error.
 *        (Value: "ERROR")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_Severity_SeverityUnspecified
 *        Unknown severity. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_MobileUsabilityIssue_Severity_Warning Warning.
 *        (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  Information about a resource with issue.
 */
@interface GTLRSearchConsole_ResourceIssue : GTLRObject

/** Describes a blocked resource issue. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_BlockedResource *blockedResource;

@end


/**
 *  Rich-Results inspection result, including any rich results found at this
 *  URL.
 */
@interface GTLRSearchConsole_RichResultsInspectionResult : GTLRObject

/**
 *  A list of zero or more rich results detected on this page. Rich results that
 *  cannot even be parsed due to syntactic issues will not be listed here.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_DetectedItems *> *detectedItems;

/**
 *  High-level rich results inspection result for this URL.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Fail
 *        Equivalent to "Error" or "Invalid" for the page or item in Search
 *        Console. (Value: "FAIL")
 *    @arg @c kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Neutral
 *        Equivalent to "Excluded" for the page or item in Search Console.
 *        (Value: "NEUTRAL")
 *    @arg @c kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Partial
 *        Reserved, no longer in use. (Value: "PARTIAL")
 *    @arg @c kGTLRSearchConsole_RichResultsInspectionResult_Verdict_Pass
 *        Equivalent to "Valid" for the page or item in Search Console. (Value:
 *        "PASS")
 *    @arg @c kGTLRSearchConsole_RichResultsInspectionResult_Verdict_VerdictUnspecified
 *        Unknown verdict. (Value: "VERDICT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verdict;

@end


/**
 *  Severity and status of a single issue affecting a single rich result
 *  instance on a page.
 */
@interface GTLRSearchConsole_RichResultsIssue : GTLRObject

/** Rich Results issue type. */
@property(nonatomic, copy, nullable) NSString *issueMessage;

/**
 *  Severity of this issue: WARNING, or ERROR. Items with an issue of status
 *  ERROR cannot appear with rich result features in Google Search results.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_RichResultsIssue_Severity_Error Error. (Value:
 *        "ERROR")
 *    @arg @c kGTLRSearchConsole_RichResultsIssue_Severity_SeverityUnspecified
 *        Unknown severity. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_RichResultsIssue_Severity_Warning Warning.
 *        (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  Mobile-friendly test request.
 */
@interface GTLRSearchConsole_RunMobileFriendlyTestRequest : GTLRObject

/**
 *  Whether or not screenshot is requested. Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestScreenshot;

/** URL for inspection. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Mobile-friendly test response, including mobile-friendly issues and resource
 *  issues.
 */
@interface GTLRSearchConsole_RunMobileFriendlyTestResponse : GTLRObject

/**
 *  Test verdict, whether the page is mobile friendly or not.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendly
 *        The page is mobile friendly. (Value: "MOBILE_FRIENDLY")
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_MobileFriendlyTestResultUnspecified
 *        Internal error when running this test. Please try running the test
 *        again. (Value: "MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_RunMobileFriendlyTestResponse_MobileFriendliness_NotMobileFriendly
 *        The page is not mobile friendly. (Value: "NOT_MOBILE_FRIENDLY")
 */
@property(nonatomic, copy, nullable) NSString *mobileFriendliness;

/** List of mobile-usability issues. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_MobileFriendlyIssue *> *mobileFriendlyIssues;

/** Information about embedded resources issues. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ResourceIssue *> *resourceIssues;

/** Screenshot of the requested URL. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_Image *screenshot;

/** Final state of the test, can be either complete or an error. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_TestStatus *testStatus;

@end


/**
 *  GTLRSearchConsole_SearchAnalyticsQueryRequest
 */
@interface GTLRSearchConsole_SearchAnalyticsQueryRequest : GTLRObject

/**
 *  [Optional; Default is \\"auto\\"] How data is aggregated. If aggregated by
 *  property, all data for the same property is aggregated; if aggregated by
 *  page, all data is aggregated by canonical URI. If you filter or group by
 *  page, choose AUTO; otherwise you can aggregate either by property or by
 *  page, depending on how you want your data calculated; see the help
 *  documentation to learn how data is calculated differently by site versus by
 *  page. **Note:** If you group or filter by page, you cannot aggregate by
 *  property. If you specify any value other than AUTO, the aggregation type in
 *  the result will match the requested type, or if you request an invalid type,
 *  you will get an error. The API will never change your aggregation type if
 *  the requested type is invalid.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_Auto
 *        Value "AUTO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByPage
 *        Value "BY_PAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_AggregationType_ByProperty
 *        Value "BY_PROPERTY"
 */
@property(nonatomic, copy, nullable) NSString *aggregationType;

/**
 *  The data state to be fetched, can be full or all, the latter including full
 *  and partial data.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_All
 *        Include all data, full and partial. (Value: "ALL")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_DataStateUnspecified
 *        Default value, should not be used. (Value: "DATA_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_DataState_Final
 *        Include full final data only, without partial. (Value: "FINAL")
 */
@property(nonatomic, copy, nullable) NSString *dataState;

/**
 *  [Optional] Zero or more filters to apply to the dimension grouping values;
 *  for example, 'query contains \\"buy\\"' to see only data where the query
 *  string contains the substring \\"buy\\" (not case-sensitive). You can filter
 *  by a dimension without grouping by it.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDimensionFilterGroup *> *dimensionFilterGroups;

/**
 *  [Optional] Zero or more dimensions to group results by. Dimensions are the
 *  group-by values in the Search Analytics page. Dimensions are combined to
 *  create a unique row key for each row. Results are grouped in the order that
 *  you supply these dimensions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  [Required] End date of the requested date range, in YYYY-MM-DD format, in
 *  PST (UTC - 8:00). Must be greater than or equal to the start date. This
 *  value is included in the range.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  [Optional; Default is 1000] The maximum number of rows to return. Must be a
 *  number from 1 to 25,000 (inclusive).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowLimit;

/**
 *  [Optional; Default is \\"web\\"] The search type to filter for.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Discover
 *        Discover. (Value: "DISCOVER")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_GoogleNews
 *        Google News (news.google.com or mobile app). (Value: "GOOGLE_NEWS")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Image
 *        Value "IMAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_News
 *        News tab in search. (Value: "NEWS")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Video
 *        Value "VIDEO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_SearchType_Web
 *        Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *searchType;

/**
 *  [Required] Start date of the requested date range, in YYYY-MM-DD format, in
 *  PST time (UTC - 8:00). Must be less than or equal to the end date. This
 *  value is included in the range.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  [Optional; Default is 0] Zero-based index of the first row in the response.
 *  Must be a non-negative number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startRow;

/**
 *  Optional. [Optional; Default is \\"web\\"] Type of report: search type, or
 *  either Discover or Gnews.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Discover
 *        Discover. (Value: "DISCOVER")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_GoogleNews
 *        Google News (news.google.com or mobile app). (Value: "GOOGLE_NEWS")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Image Value
 *        "IMAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_News News tab
 *        in search. (Value: "NEWS")
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Video Value
 *        "VIDEO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryRequest_Type_Web Value
 *        "WEB"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A list of rows, one per result, grouped by key. Metrics in each row are
 *  aggregated for all data grouped by that key either by page or property, as
 *  specified by the aggregation type parameter.
 */
@interface GTLRSearchConsole_SearchAnalyticsQueryResponse : GTLRObject

/**
 *  How the results were aggregated.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_Auto
 *        Value "AUTO"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByPage
 *        Value "BY_PAGE"
 *    @arg @c kGTLRSearchConsole_SearchAnalyticsQueryResponse_ResponseAggregationType_ByProperty
 *        Value "BY_PROPERTY"
 */
@property(nonatomic, copy, nullable) NSString *responseAggregationType;

/**
 *  A list of rows grouped by the key values in the order given in the query.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_ApiDataRow *> *rows;

@end


/**
 *  List of sitemaps.
 */
@interface GTLRSearchConsole_SitemapsListResponse : GTLRObject

/**
 *  Contains detailed information about a specific URL submitted as a
 *  [sitemap](https://support.google.com/webmasters/answer/156184).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSitemap *> *sitemap;

@end


/**
 *  List of sites with access level information.
 */
@interface GTLRSearchConsole_SitesListResponse : GTLRObject

/**
 *  Contains permission level information about a Search Console site. For more
 *  information, see [Permissions in Search
 *  Console](https://support.google.com/webmasters/answer/2451999).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSite *> *siteEntry;

@end


/**
 *  Final state of the test, including error details if necessary.
 */
@interface GTLRSearchConsole_TestStatus : GTLRObject

/** Error details if applicable. */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  Status of the test.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_Complete Inspection has
 *        completed without errors. (Value: "COMPLETE")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_InternalError Inspection
 *        terminated in an error state. This indicates a problem in Google's
 *        infrastructure, not a user error. Please try again later. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_PageUnreachable Google can
 *        not access the URL because of a user error such as a robots.txt
 *        blockage, a 403 or 500 code etc. Please make sure that the URL
 *        provided is accessible by Googlebot and is not password protected.
 *        (Value: "PAGE_UNREACHABLE")
 *    @arg @c kGTLRSearchConsole_TestStatus_Status_TestStatusUnspecified
 *        Internal error when running this test. Please try running the test
 *        again. (Value: "TEST_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  URL inspection result, including all inspection results.
 */
@interface GTLRSearchConsole_UrlInspectionResult : GTLRObject

/** Result of the AMP analysis. Absent if the page is not an AMP page. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_AmpInspectionResult *ampResult;

/** Result of the index status analysis. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_IndexStatusInspectionResult *indexStatusResult;

/** Link to Search Console URL inspection. */
@property(nonatomic, copy, nullable) NSString *inspectionResultLink;

/** Result of the Mobile usability analysis. */
@property(nonatomic, strong, nullable) GTLRSearchConsole_MobileUsabilityInspectionResult *mobileUsabilityResult;

/**
 *  Result of the Rich Results analysis. Absent if there are no rich results
 *  found.
 */
@property(nonatomic, strong, nullable) GTLRSearchConsole_RichResultsInspectionResult *richResultsResult;

@end


/**
 *  Contains permission level information about a Search Console site. For more
 *  information, see [Permissions in Search
 *  Console](https://support.google.com/webmasters/answer/2451999).
 */
@interface GTLRSearchConsole_WmxSite : GTLRObject

/**
 *  The user's permission level for the site.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteFullUser Full users
 *        can access all data, and perform most of the operations. (Value:
 *        "SITE_FULL_USER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteOwner Owner has
 *        complete access to the site. (Value: "SITE_OWNER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SitePermissionLevelUnspecified
 *        Value "SITE_PERMISSION_LEVEL_UNSPECIFIED"
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteRestrictedUser
 *        Restricted users can access most of the data, and perform some
 *        operations. (Value: "SITE_RESTRICTED_USER")
 *    @arg @c kGTLRSearchConsole_WmxSite_PermissionLevel_SiteUnverifiedUser
 *        Unverified user has no access to site's data. (Value:
 *        "SITE_UNVERIFIED_USER")
 */
@property(nonatomic, copy, nullable) NSString *permissionLevel;

/** The URL of the site. */
@property(nonatomic, copy, nullable) NSString *siteUrl;

@end


/**
 *  Contains detailed information about a specific URL submitted as a
 *  [sitemap](https://support.google.com/webmasters/answer/156184).
 */
@interface GTLRSearchConsole_WmxSitemap : GTLRObject

/** The various content types in the sitemap. */
@property(nonatomic, strong, nullable) NSArray<GTLRSearchConsole_WmxSitemapContent *> *contents;

/**
 *  Number of errors in the sitemap. These are issues with the sitemap itself
 *  that need to be fixed before it can be processed correctly.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errors;

/**
 *  If true, the sitemap has not been processed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPending;

/**
 *  If true, the sitemap is a collection of sitemaps.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSitemapsIndex;

/**
 *  Date & time in which this sitemap was last downloaded. Date format is in RFC
 *  3339 format (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastDownloaded;

/**
 *  Date & time in which this sitemap was submitted. Date format is in RFC 3339
 *  format (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSubmitted;

/** The url of the sitemap. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The type of the sitemap. For example: `rssFeed`.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_AtomFeed Value "ATOM_FEED"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_NotSitemap Value "NOT_SITEMAP"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_Oceanfront Value "OCEANFRONT"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_PatternSitemap Unsupported
 *        sitemap types. (Value: "PATTERN_SITEMAP")
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_RssFeed Value "RSS_FEED"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_Sitemap Value "SITEMAP"
 *    @arg @c kGTLRSearchConsole_WmxSitemap_Type_UrlList Value "URL_LIST"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Number of warnings for the sitemap. These are generally non-critical issues
 *  with URLs in the sitemaps.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warnings;

@end


/**
 *  Information about the various content types in the sitemap.
 */
@interface GTLRSearchConsole_WmxSitemapContent : GTLRObject

/**
 *  *Deprecated; do not use.*
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexed;

/**
 *  The number of URLs in the sitemap (of the content type).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *submitted;

/**
 *  The specific type of content in this sitemap. For example: `web`.
 *
 *  Likely values:
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_AndroidApp Value
 *        "ANDROID_APP"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_DataFeedElement
 *        Unsupported content type. (Value: "DATA_FEED_ELEMENT")
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Image Value "IMAGE"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_IosApp Value "IOS_APP"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Mobile Value "MOBILE"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_News Value "NEWS"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Pattern Unsupported
 *        content type. (Value: "PATTERN")
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Video Value "VIDEO"
 *    @arg @c kGTLRSearchConsole_WmxSitemapContent_Type_Web Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
