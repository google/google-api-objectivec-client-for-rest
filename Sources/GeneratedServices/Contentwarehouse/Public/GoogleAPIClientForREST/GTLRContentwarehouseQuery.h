// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   contentwarehouse API (contentwarehouse/v1)
// Documentation:
//   https://cloud.google.com/document-warehouse

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRContentwarehouseObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other contentwarehouse query classes.
 */
@interface GTLRContentwarehouseQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *
 *  Method: contentwarehouse.projects.fetchAcl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsFetchAcl : GTLRContentwarehouseQuery

/**
 *  Required. REQUIRED: The resource for which the policy is being requested.
 *  Format for document:
 *  projects/{project_number}/locations/{location}/documents/{document_id}.
 *  Format for project: projects/{project_number}.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclResponse.
 *
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclRequest to
 *    include in the query.
 *  @param resource Required. REQUIRED: The resource for which the policy is
 *    being requested. Format for document:
 *    projects/{project_number}/locations/{location}/documents/{document_id}.
 *    Format for project: projects/{project_number}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsFetchAcl
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a document schema.
 *
 *  Method: contentwarehouse.projects.locations.documentSchemas.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasCreate : GTLRContentwarehouseQuery

/** Required. The parent name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentSchema.
 *
 *  Creates a document schema.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentSchema to
 *    include in the query.
 *  @param parent Required. The parent name.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasCreate
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentSchema *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a document schema. Returns NOT_FOUND if the document schema does not
 *  exist. Returns BAD_REQUEST if the document schema has documents depending on
 *  it.
 *
 *  Method: contentwarehouse.projects.locations.documentSchemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasDelete : GTLRContentwarehouseQuery

/** Required. The name of the document schema to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Deletes a document schema. Returns NOT_FOUND if the document schema does not
 *  exist. Returns BAD_REQUEST if the document schema has documents depending on
 *  it.
 *
 *  @param name Required. The name of the document schema to delete.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a document schema. Returns NOT_FOUND if the document schema does not
 *  exist.
 *
 *  Method: contentwarehouse.projects.locations.documentSchemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasGet : GTLRContentwarehouseQuery

/** Required. The name of the document schema to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentSchema.
 *
 *  Gets a document schema. Returns NOT_FOUND if the document schema does not
 *  exist.
 *
 *  @param name Required. The name of the document schema to retrieve.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists document schemas.
 *
 *  Method: contentwarehouse.projects.locations.documentSchemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasList : GTLRContentwarehouseQuery

/**
 *  The maximum number of document schemas to return. The service may return
 *  fewer than this value. If unspecified, at most 50 document schemas will be
 *  returned. The maximum value is 1000; values above 1000 will be coerced to
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListDocumentSchemas` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListDocumentSchemas` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of document schemas.
 *  Format: projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListDocumentSchemasResponse.
 *
 *  Lists document schemas.
 *
 *  @param parent Required. The parent, which owns this collection of document
 *    schemas. Format: projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the
 *  Document Schema is non-empty and does not equal the existing name. Supports
 *  only appending new properties, adding new ENUM possible values, and updating
 *  the EnumTypeOptions.validation_check_disabled flag for ENUM possible values.
 *  Updating existing properties will result into INVALID_ARGUMENT.
 *
 *  Method: contentwarehouse.projects.locations.documentSchemas.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasPatch : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document schema to update. Format:
 *  projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentSchema.
 *
 *  Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the
 *  Document Schema is non-empty and does not equal the existing name. Supports
 *  only appending new properties, adding new ENUM possible values, and updating
 *  the EnumTypeOptions.validation_check_disabled flag for ENUM possible values.
 *  Updating existing properties will result into INVALID_ARGUMENT.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest
 *    to include in the query.
 *  @param name Required. The name of the document schema to update. Format:
 *    projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentSchemasPatch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a document.
 *
 *  Method: contentwarehouse.projects.locations.documents.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsCreate : GTLRContentwarehouseQuery

/**
 *  Required. The parent name. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1CreateDocumentResponse.
 *
 *  Creates a document.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1CreateDocumentRequest to
 *    include in the query.
 *  @param parent Required. The parent name. Format:
 *    projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsCreate
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1CreateDocumentRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a document. Returns NOT_FOUND if the document does not exist.
 *
 *  Method: contentwarehouse.projects.locations.documents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDelete : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to delete. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Deletes a document. Returns NOT_FOUND if the document does not exist.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to delete. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDelete
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Create a link between a source document and a target document.
 *
 *  Method: contentwarehouse.projects.locations.documents.documentLinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDocumentLinksCreate : GTLRContentwarehouseQuery

/**
 *  Required. Parent of the document-link to be created. parent of document-link
 *  should be a document. Format:
 *  projects/{project_number}/locations/{location}/documents/{source_document_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1DocumentLink.
 *
 *  Create a link between a source document and a target document.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1CreateDocumentLinkRequest
 *    to include in the query.
 *  @param parent Required. Parent of the document-link to be created. parent of
 *    document-link should be a document. Format:
 *    projects/{project_number}/locations/{location}/documents/{source_document_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDocumentLinksCreate
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1CreateDocumentLinkRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Remove the link between the source and target documents.
 *
 *  Method: contentwarehouse.projects.locations.documents.documentLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDocumentLinksDelete : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document-link to be deleted. Format:
 *  projects/{project_number}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Remove the link between the source and target documents.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest
 *    to include in the query.
 *  @param name Required. The name of the document-link to be deleted. Format:
 *    projects/{project_number}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsDocumentLinksDelete
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *
 *  Method: contentwarehouse.projects.locations.documents.fetchAcl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsFetchAcl : GTLRContentwarehouseQuery

/**
 *  Required. REQUIRED: The resource for which the policy is being requested.
 *  Format for document:
 *  projects/{project_number}/locations/{location}/documents/{document_id}.
 *  Format for project: projects/{project_number}.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclResponse.
 *
 *  Gets the access control policy for a resource. Returns NOT_FOUND error if
 *  the resource does not exist. Returns an empty policy if the resource exists
 *  but does not have a policy set.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclRequest to
 *    include in the query.
 *  @param resource Required. REQUIRED: The resource for which the policy is
 *    being requested. Format for document:
 *    projects/{project_number}/locations/{location}/documents/{document_id}.
 *    Format for project: projects/{project_number}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsFetchAcl
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1FetchAclRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets a document. Returns NOT_FOUND if the document does not exist.
 *
 *  Method: contentwarehouse.projects.locations.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsGet : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to retrieve. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1Document.
 *
 *  Gets a document. Returns NOT_FOUND if the document does not exist.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1GetDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to retrieve. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsGet
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1GetDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Return all source document-links from the document.
 *
 *  Method: contentwarehouse.projects.locations.documents.linkedSources
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsLinkedSources : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document, for which all source links are returned.
 *  Format:
 *  projects/{project_number}/locations/{location}/documents/{source_document_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedSourcesResponse.
 *
 *  Return all source document-links from the document.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedSourcesRequest
 *    to include in the query.
 *  @param parent Required. The name of the document, for which all source links
 *    are returned. Format:
 *    projects/{project_number}/locations/{location}/documents/{source_document_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsLinkedSources
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedSourcesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Return all target document-links from the document.
 *
 *  Method: contentwarehouse.projects.locations.documents.linkedTargets
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsLinkedTargets : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document, for which all target links are returned.
 *  Format:
 *  projects/{project_number}/locations/{location}/documents/{target_document_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedTargetsResponse.
 *
 *  Return all target document-links from the document.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedTargetsRequest
 *    to include in the query.
 *  @param parent Required. The name of the document, for which all target links
 *    are returned. Format:
 *    projects/{project_number}/locations/{location}/documents/{target_document_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsLinkedTargets
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListLinkedTargetsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates a document. Returns INVALID_ARGUMENT if the name of the document is
 *  non-empty and does not equal the existing name.
 *
 *  Method: contentwarehouse.projects.locations.documents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsPatch : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to update. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentResponse.
 *
 *  Updates a document. Returns INVALID_ARGUMENT if the name of the document is
 *  non-empty and does not equal the existing name.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to update. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsPatch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a document. Returns NOT_FOUND if the document does not exist.
 *
 *  Method: contentwarehouse.projects.locations.documents.referenceId.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdDelete : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to delete. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Deletes a document. Returns NOT_FOUND if the document does not exist.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to delete. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdDelete
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1DeleteDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a document. Returns NOT_FOUND if the document does not exist.
 *
 *  Method: contentwarehouse.projects.locations.documents.referenceId.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdGet : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to retrieve. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1Document.
 *
 *  Gets a document. Returns NOT_FOUND if the document does not exist.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1GetDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to retrieve. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdGet
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1GetDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a document. Returns INVALID_ARGUMENT if the name of the document is
 *  non-empty and does not equal the existing name.
 *
 *  Method: contentwarehouse.projects.locations.documents.referenceId.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdPatch : GTLRContentwarehouseQuery

/**
 *  Required. The name of the document to update. Format:
 *  projects/{project_number}/locations/{location}/documents/{document_id} or
 *  projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentResponse.
 *
 *  Updates a document. Returns INVALID_ARGUMENT if the name of the document is
 *  non-empty and does not equal the existing name.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentRequest to
 *    include in the query.
 *  @param name Required. The name of the document to update. Format:
 *    projects/{project_number}/locations/{location}/documents/{document_id} or
 *    projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsReferenceIdPatch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateDocumentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Searches for documents using provided SearchDocumentsRequest. This call only
 *  returns documents that the caller has permission to search against.
 *
 *  Method: contentwarehouse.projects.locations.documents.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsSearch : GTLRContentwarehouseQuery

/**
 *  Required. The parent, which owns this collection of documents. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1SearchDocumentsResponse.
 *
 *  Searches for documents using provided SearchDocumentsRequest. This call only
 *  returns documents that the caller has permission to search against.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1SearchDocumentsRequest
 *    to include in the query.
 *  @param parent Required. The parent, which owns this collection of documents.
 *    Format: projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsSearch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1SearchDocumentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Sets the access control policy for a resource. Replaces any existing policy.
 *
 *  Method: contentwarehouse.projects.locations.documents.setAcl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsDocumentsSetAcl : GTLRContentwarehouseQuery

/**
 *  Required. REQUIRED: The resource for which the policy is being requested.
 *  Format for document:
 *  projects/{project_number}/locations/{location}/documents/{document_id}.
 *  Format for project: projects/{project_number}.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclResponse.
 *
 *  Sets the access control policy for a resource. Replaces any existing policy.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclRequest to include
 *    in the query.
 *  @param resource Required. REQUIRED: The resource for which the policy is
 *    being requested. Format for document:
 *    projects/{project_number}/locations/{location}/documents/{document_id}.
 *    Format for project: projects/{project_number}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsDocumentsSetAcl
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Provisions resources for given tenant project. Returns a long running
 *  operation.
 *
 *  Method: contentwarehouse.projects.locations.initialize
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsInitialize : GTLRContentwarehouseQuery

/**
 *  Required. The location to be initialized Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleLongrunningOperation.
 *
 *  Provisions resources for given tenant project. Returns a long running
 *  operation.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1InitializeProjectRequest
 *    to include in the query.
 *  @param location Required. The location to be initialized Format:
 *    projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsInitialize
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1InitializeProjectRequest *)object
                       location:(NSString *)location;

@end

/**
 *  Creates a ruleset.
 *
 *  Method: contentwarehouse.projects.locations.ruleSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsCreate : GTLRContentwarehouseQuery

/**
 *  Required. The parent name. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1RuleSet.
 *
 *  Creates a ruleset.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1RuleSet to include in
 *    the query.
 *  @param parent Required. The parent name. Format:
 *    projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1RuleSet *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
 *
 *  Method: contentwarehouse.projects.locations.ruleSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsDelete : GTLRContentwarehouseQuery

/**
 *  Required. The name of the rule set to delete. Format:
 *  projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
 *
 *  @param name Required. The name of the rule set to delete. Format:
 *    projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
 *
 *  Method: contentwarehouse.projects.locations.ruleSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsGet : GTLRContentwarehouseQuery

/**
 *  Required. The name of the rule set to retrieve. Format:
 *  projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1RuleSet.
 *
 *  Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
 *
 *  @param name Required. The name of the rule set to retrieve. Format:
 *    projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists rulesets.
 *
 *  Method: contentwarehouse.projects.locations.ruleSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsList : GTLRContentwarehouseQuery

/**
 *  The maximum number of rule sets to return. The service may return fewer than
 *  this value. If unspecified, at most 50 rule sets will be returned. The
 *  maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListRuleSets` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListRuleSets` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of document. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListRuleSetsResponse.
 *
 *  Lists rulesets.
 *
 *  @param parent Required. The parent, which owns this collection of document.
 *    Format: projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is
 *  non-empty and does not equal the existing name.
 *
 *  Method: contentwarehouse.projects.locations.ruleSets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsPatch : GTLRContentwarehouseQuery

/**
 *  Required. The name of the rule set to update. Format:
 *  projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1RuleSet.
 *
 *  Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is
 *  non-empty and does not equal the existing name.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateRuleSetRequest to
 *    include in the query.
 *  @param name Required. The name of the rule set to update. Format:
 *    projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsRuleSetsPatch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1UpdateRuleSetRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a SynonymSet for a single context. Throws an ALREADY_EXISTS
 *  exception if a synonymset already exists for the context.
 *
 *  Method: contentwarehouse.projects.locations.synonymSets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsCreate : GTLRContentwarehouseQuery

/**
 *  Required. The parent name. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet.
 *
 *  Creates a SynonymSet for a single context. Throws an ALREADY_EXISTS
 *  exception if a synonymset already exists for the context.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet to include in
 *    the query.
 *  @param parent Required. The parent name. Format:
 *    projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsCreate
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a SynonymSet for a given context. Throws a NOT_FOUND exception if
 *  the SynonymSet is not found.
 *
 *  Method: contentwarehouse.projects.locations.synonymSets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsDelete : GTLRContentwarehouseQuery

/**
 *  Required. The name of the synonymSet to delete Format:
 *  projects/{project_number}/locations/{location}/synonymSets/{context}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleProtobufEmpty.
 *
 *  Deletes a SynonymSet for a given context. Throws a NOT_FOUND exception if
 *  the SynonymSet is not found.
 *
 *  @param name Required. The name of the synonymSet to delete Format:
 *    projects/{project_number}/locations/{location}/synonymSets/{context}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a SynonymSet for a particular context. Throws a NOT_FOUND exception if
 *  the Synonymset does not exist
 *
 *  Method: contentwarehouse.projects.locations.synonymSets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsGet : GTLRContentwarehouseQuery

/**
 *  Required. The name of the synonymSet to retrieve Format:
 *  projects/{project_number}/locations/{location}/synonymSets/{context}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet.
 *
 *  Gets a SynonymSet for a particular context. Throws a NOT_FOUND exception if
 *  the Synonymset does not exist
 *
 *  @param name Required. The name of the synonymSet to retrieve Format:
 *    projects/{project_number}/locations/{location}/synonymSets/{context}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns all SynonymSets (for all contexts) for the specified location.
 *
 *  Method: contentwarehouse.projects.locations.synonymSets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsList : GTLRContentwarehouseQuery

/**
 *  The maximum number of synonymSets to return. The service may return fewer
 *  than this value. If unspecified, at most 50 rule sets will be returned. The
 *  maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSynonymSets` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListSynonymSets` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent name. Format:
 *  projects/{project_number}/locations/{location}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1ListSynonymSetsResponse.
 *
 *  Returns all SynonymSets (for all contexts) for the specified location.
 *
 *  @param parent Required. The parent name. Format:
 *    projects/{project_number}/locations/{location}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Remove the existing SynonymSet for the context and replaces it with a new
 *  one. Throws a NOT_FOUND exception if the SynonymSet is not found.
 *
 *  Method: contentwarehouse.projects.locations.synonymSets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsPatch : GTLRContentwarehouseQuery

/**
 *  Required. The name of the synonymSet to update Format:
 *  projects/{project_number}/locations/{location}/synonymSets/{context}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet.
 *
 *  Remove the existing SynonymSet for the context and replaces it with a new
 *  one. Throws a NOT_FOUND exception if the SynonymSet is not found.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet to include in
 *    the query.
 *  @param name Required. The name of the synonymSet to update Format:
 *    projects/{project_number}/locations/{location}/synonymSets/{context}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsLocationsSynonymSetsPatch
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1SynonymSet *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy for a resource. Replaces any existing policy.
 *
 *  Method: contentwarehouse.projects.setAcl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeContentwarehouseCloudPlatform
 */
@interface GTLRContentwarehouseQuery_ProjectsSetAcl : GTLRContentwarehouseQuery

/**
 *  Required. REQUIRED: The resource for which the policy is being requested.
 *  Format for document:
 *  projects/{project_number}/locations/{location}/documents/{document_id}.
 *  Format for project: projects/{project_number}.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c
 *  GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclResponse.
 *
 *  Sets the access control policy for a resource. Replaces any existing policy.
 *
 *  @param object The @c
 *    GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclRequest to include
 *    in the query.
 *  @param resource Required. REQUIRED: The resource for which the policy is
 *    being requested. Format for document:
 *    projects/{project_number}/locations/{location}/documents/{document_id}.
 *    Format for project: projects/{project_number}.
 *
 *  @return GTLRContentwarehouseQuery_ProjectsSetAcl
 */
+ (instancetype)queryWithObject:(GTLRContentwarehouse_GoogleCloudContentwarehouseV1SetAclRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
