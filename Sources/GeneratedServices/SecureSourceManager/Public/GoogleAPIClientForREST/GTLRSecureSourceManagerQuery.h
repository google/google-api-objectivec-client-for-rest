// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Secure Source Manager API (securesourcemanager/v1)
// Description:
//   Regionally deployed, single-tenant managed source code repository hosted on
//   Google Cloud.
// Documentation:
//   https://cloud.google.com/secure-source-manager

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSecureSourceManagerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Secure Source Manager query classes.
 */
@interface GTLRSecureSourceManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: securesourcemanager.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsGet : GTLRSecureSourceManagerQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new instance in a given project and location.
 *
 *  Method: securesourcemanager.projects.locations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesCreate : GTLRSecureSourceManagerQuery

/** Required. ID of the instance to be created. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates a new instance in a given project and location.
 *
 *  @param object The @c GTLRSecureSourceManager_Instance to include in the
 *    query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single instance.
 *
 *  Method: securesourcemanager.projects.locations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesDelete : GTLRSecureSourceManagerQuery

/** Required. Name of the resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes a single instance.
 *
 *  @param name Required. Name of the resource.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single instance.
 *
 *  Method: securesourcemanager.projects.locations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGet : GTLRSecureSourceManagerQuery

/** Required. Name of the resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Instance.
 *
 *  Gets details of a single instance.
 *
 *  @param name Required. Name of the resource.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: securesourcemanager.projects.locations.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGetIamPolicy : GTLRSecureSourceManagerQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists Instances in a given project and location.
 *
 *  Method: securesourcemanager.projects.locations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesList : GTLRSecureSourceManagerQuery

/** Filter for filtering results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Hint for how to order the results. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListInstancesRequest. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListInstancesResponse.
 *
 *  Lists Instances in a given project and location.
 *
 *  @param parent Required. Parent value for ListInstancesRequest.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: securesourcemanager.projects.locations.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesSetIamPolicy : GTLRSecureSourceManagerQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRSecureSourceManager_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: securesourcemanager.projects.locations.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesTestIamPermissions : GTLRSecureSourceManagerQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRSecureSourceManager_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: securesourcemanager.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsList : GTLRSecureSourceManagerQuery

/**
 *  Optional. A list of extra location types that should be used as conditions
 *  for controlling the visibility of the locations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraLocationTypes;

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: securesourcemanager.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsCancel : GTLRSecureSourceManagerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRSecureSourceManager_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: securesourcemanager.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsDelete : GTLRSecureSourceManagerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: securesourcemanager.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsGet : GTLRSecureSourceManagerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: securesourcemanager.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsList : GTLRSecureSourceManagerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  CreateBranchRule creates a branch rule in a given repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.branchRules.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesCreate : GTLRSecureSourceManagerQuery

@property(nonatomic, copy, nullable) NSString *branchRuleId;

@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  CreateBranchRule creates a branch rule in a given repository.
 *
 *  @param object The @c GTLRSecureSourceManager_BranchRule to include in the
 *    query.
 *  @param parent NSString
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BranchRule *)object
                         parent:(NSString *)parent;

@end

/**
 *  DeleteBranchRule deletes a branch rule.
 *
 *  Method: securesourcemanager.projects.locations.repositories.branchRules.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesDelete : GTLRSecureSourceManagerQuery

/**
 *  Optional. If set to true, and the branch rule is not found, the request will
 *  succeed but no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  DeleteBranchRule deletes a branch rule.
 *
 *  @param name NSString
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  GetBranchRule gets a branch rule.
 *
 *  Method: securesourcemanager.projects.locations.repositories.branchRules.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the repository to retrieve. The format is
 *  `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_BranchRule.
 *
 *  GetBranchRule gets a branch rule.
 *
 *  @param name Required. Name of the repository to retrieve. The format is
 *    `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  ListBranchRules lists branch rules in a given repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.branchRules.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesList : GTLRSecureSourceManagerQuery

@property(nonatomic, assign) NSInteger pageSize;

@property(nonatomic, copy, nullable) NSString *pageToken;

@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListBranchRulesResponse.
 *
 *  ListBranchRules lists branch rules in a given repository.
 *
 *  @param parent NSString
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  UpdateBranchRule updates a branch rule.
 *
 *  Method: securesourcemanager.projects.locations.repositories.branchRules.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesPatch : GTLRSecureSourceManagerQuery

/**
 *  Optional. A unique identifier for a BranchRule. The name should be of the
 *  format:
 *  `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  branchRule resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. The special value "*" means full
 *  replacement.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. If set, validate the request and preview the review, but do not
 *  actually post it. (https://google.aip.dev/163, for declarative friendly)
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  UpdateBranchRule updates a branch rule.
 *
 *  @param object The @c GTLRSecureSourceManager_BranchRule to include in the
 *    query.
 *  @param name Optional. A unique identifier for a BranchRule. The name should
 *    be of the format:
 *    `projects/{project}/locations/{location}/repositories/{repository}/branchRules/{branch_rule}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BranchRule *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new repository in a given project and location. The
 *  Repository.Instance field is required in the request body for requests using
 *  the securesourcemanager.googleapis.com endpoint.
 *
 *  Method: securesourcemanager.projects.locations.repositories.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The project in which to create the repository. Values are of the
 *  form `projects/{project_number}/locations/{location_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The ID to use for the repository, which will become the final
 *  component of the repository's resource name. This value should be 4-63
 *  characters, and valid characters are /a-z-/.
 */
@property(nonatomic, copy, nullable) NSString *repositoryId;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates a new repository in a given project and location. The
 *  Repository.Instance field is required in the request body for requests using
 *  the securesourcemanager.googleapis.com endpoint.
 *
 *  @param object The @c GTLRSecureSourceManager_Repository to include in the
 *    query.
 *  @param parent Required. The project in which to create the repository.
 *    Values are of the form `projects/{project_number}/locations/{location_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Repository *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesDelete : GTLRSecureSourceManagerQuery

/**
 *  Optional. If set to true, and the repository is not found, the request will
 *  succeed but no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Required. Name of the repository to delete. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes a Repository.
 *
 *  @param name Required. Name of the repository to delete. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Fetches a blob from a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.fetchBlob
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchBlob : GTLRSecureSourceManagerQuery

/**
 *  Required. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *  Specifies the repository containing the blob.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/** Required. The SHA-1 hash of the blob to retrieve. */
@property(nonatomic, copy, nullable) NSString *sha;

/**
 *  Fetches a @c GTLRSecureSourceManager_FetchBlobResponse.
 *
 *  Fetches a blob from a repository.
 *
 *  @param repository Required. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *    Specifies the repository containing the blob.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchBlob
 */
+ (instancetype)queryWithRepository:(NSString *)repository;

@end

/**
 *  Fetches a tree from a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.fetchTree
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchTree : GTLRSecureSourceManagerQuery

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, at most 10,000 items will be returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. If true, include all subfolders and their files in the response.
 *  If false, only the immediate children are returned.
 */
@property(nonatomic, assign) BOOL recursive;

/**
 *  Optional. `ref` can be a SHA-1 hash, a branch name, or a tag. Specifies
 *  which tree to fetch. If not specified, the default branch will be used.
 */
@property(nonatomic, copy, nullable) NSString *ref;

/**
 *  Required. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *  Specifies the repository to fetch the tree from.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Fetches a @c GTLRSecureSourceManager_FetchTreeResponse.
 *
 *  Fetches a tree from a repository.
 *
 *  @param repository Required. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *    Specifies the repository to fetch the tree from.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchTree
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithRepository:(NSString *)repository;

@end

/**
 *  Gets metadata of a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the repository to retrieve. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Repository.
 *
 *  Gets metadata of a repository.
 *
 *  @param name Required. Name of the repository to retrieve. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get IAM policy for a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGetIamPolicy : GTLRSecureSourceManagerQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_Policy.
 *
 *  Get IAM policy for a repository.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a new hook in a given repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.hooks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The ID to use for the hook, which will become the final component
 *  of the hook's resource name. This value restricts to lower-case letters,
 *  numbers, and hyphen, with the first character a letter, the last a letter or
 *  a number, and a 63 character maximum.
 */
@property(nonatomic, copy, nullable) NSString *hookId;

/**
 *  Required. The repository in which to create the hook. Values are of the form
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates a new hook in a given repository.
 *
 *  @param object The @c GTLRSecureSourceManager_Hook to include in the query.
 *  @param parent Required. The repository in which to create the hook. Values
 *    are of the form
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Hook *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Hook.
 *
 *  Method: securesourcemanager.projects.locations.repositories.hooks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksDelete : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the hook to delete. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes a Hook.
 *
 *  @param name Required. Name of the hook to delete. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets metadata of a hook.
 *
 *  Method: securesourcemanager.projects.locations.repositories.hooks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the hook to retrieve. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Hook.
 *
 *  Gets metadata of a hook.
 *
 *  @param name Required. Name of the hook to retrieve. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists hooks in a given repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.hooks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksList : GTLRSecureSourceManagerQuery

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListHooksRequest. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListHooksResponse.
 *
 *  Lists hooks in a given repository.
 *
 *  @param parent Required. Parent value for ListHooksRequest.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the metadata of a hook.
 *
 *  Method: securesourcemanager.projects.locations.repositories.hooks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksPatch : GTLRSecureSourceManagerQuery

/**
 *  Identifier. A unique identifier for a Hook. The name should be of the
 *  format:
 *  `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  hook resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. The special value "*" means full replacement.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates the metadata of a hook.
 *
 *  @param object The @c GTLRSecureSourceManager_Hook to include in the query.
 *  @param name Identifier. A unique identifier for a Hook. The name should be
 *    of the format:
 *    `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Hook *)object
                           name:(NSString *)name;

@end

/**
 *  Closes an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.close
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesClose : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the issue to close. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Closes an issue.
 *
 *  @param object The @c GTLRSecureSourceManager_CloseIssueRequest to include in
 *    the query.
 *  @param name Required. Name of the issue to close. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesClose
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_CloseIssueRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The repository in which to create the issue. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates an issue.
 *
 *  @param object The @c GTLRSecureSourceManager_Issue to include in the query.
 *  @param parent Required. The repository in which to create the issue. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Issue *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesDelete : GTLRSecureSourceManagerQuery

/**
 *  Optional. The current etag of the issue. If the etag is provided and does
 *  not match the current etag of the issue, deletion will be blocked and an
 *  ABORTED error will be returned.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. Name of the issue to delete. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes an issue.
 *
 *  @param name Required. Name of the issue to delete. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the issue to retrieve. The format is
 *  `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Issue.
 *
 *  Gets an issue.
 *
 *  @param name Required. Name of the issue to retrieve. The format is
 *    `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates an issue comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.issueComments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The issue in which to create the issue comment. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates an issue comment.
 *
 *  @param object The @c GTLRSecureSourceManager_IssueComment to include in the
 *    query.
 *  @param parent Required. The issue in which to create the issue comment.
 *    Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_IssueComment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an issue comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.issueComments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsDelete : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the issue comment to delete. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}/issueComments/{comment_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes an issue comment.
 *
 *  @param name Required. Name of the issue comment to delete. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}/issueComments/{comment_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an issue comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.issueComments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the issue comment to retrieve. The format is
 *  `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}/issueComments/{comment_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_IssueComment.
 *
 *  Gets an issue comment.
 *
 *  @param name Required. Name of the issue comment to retrieve. The format is
 *    `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}/issueComments/{comment_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists comments in an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.issueComments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsList : GTLRSecureSourceManagerQuery

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The issue in which to list the comments. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListIssueCommentsResponse.
 *
 *  Lists comments in an issue.
 *
 *  @param parent Required. The issue in which to list the comments. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an issue comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.issueComments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsPatch : GTLRSecureSourceManagerQuery

/**
 *  Identifier. Unique identifier for an issue comment. The comment id is
 *  generated by the server. Format:
 *  `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue}/issueComments/{comment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  issue comment resource by the update. The fields specified in the
 *  update_mask are relative to the resource, not the full request. A field will
 *  be overwritten if it is in the mask. The special value "*" means full
 *  replacement.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates an issue comment.
 *
 *  @param object The @c GTLRSecureSourceManager_IssueComment to include in the
 *    query.
 *  @param name Identifier. Unique identifier for an issue comment. The comment
 *    id is generated by the server. Format:
 *    `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue}/issueComments/{comment_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_IssueComment *)object
                           name:(NSString *)name;

@end

/**
 *  Lists issues in a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesList : GTLRSecureSourceManagerQuery

/** Optional. Used to filter the resulting issues list. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The repository in which to list issues. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListIssuesResponse.
 *
 *  Lists issues in a repository.
 *
 *  @param parent Required. The repository in which to list issues. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Opens an issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.open
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesOpen : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the issue to open. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Opens an issue.
 *
 *  @param object The @c GTLRSecureSourceManager_OpenIssueRequest to include in
 *    the query.
 *  @param name Required. Name of the issue to open. The format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/issues/{issue_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesOpen
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_OpenIssueRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a issue.
 *
 *  Method: securesourcemanager.projects.locations.repositories.issues.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesPatch : GTLRSecureSourceManagerQuery

/**
 *  Identifier. Unique identifier for an issue. The issue id is generated by the
 *  server. Format:
 *  `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  issue resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. The special value "*" means full replacement.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates a issue.
 *
 *  @param object The @c GTLRSecureSourceManager_Issue to include in the query.
 *  @param name Identifier. Unique identifier for an issue. The issue id is
 *    generated by the server. Format:
 *    `projects/{project}/locations/{location}/repositories/{repository}/issues/{issue_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Issue *)object
                           name:(NSString *)name;

@end

/**
 *  Lists Repositories in a given project and location. The instance field is
 *  required in the query parameter for requests using the
 *  securesourcemanager.googleapis.com endpoint.
 *
 *  Method: securesourcemanager.projects.locations.repositories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesList : GTLRSecureSourceManagerQuery

/** Optional. Filter results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The name of the instance in which the repository is hosted,
 *  formatted as
 *  `projects/{project_number}/locations/{location_id}/instances/{instance_id}`.
 *  When listing repositories via securesourcemanager.googleapis.com, this field
 *  is required. When listing repositories via *.sourcemanager.dev, this field
 *  is ignored.
 */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent value for ListRepositoriesRequest. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListRepositoriesResponse.
 *
 *  Lists Repositories in a given project and location. The instance field is
 *  required in the query parameter for requests using the
 *  securesourcemanager.googleapis.com endpoint.
 *
 *  @param parent Required. Parent value for ListRepositoriesRequest.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the metadata of a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPatch : GTLRSecureSourceManagerQuery

/**
 *  Optional. A unique identifier for a repository. The name should be of the
 *  format:
 *  `projects/{project}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  repository resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. False by default. If set to true, the request is validated and the
 *  user is provided with an expected result, but no actual change is made.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates the metadata of a repository.
 *
 *  @param object The @c GTLRSecureSourceManager_Repository to include in the
 *    query.
 *  @param name Optional. A unique identifier for a repository. The name should
 *    be of the format:
 *    `projects/{project}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Repository *)object
                           name:(NSString *)name;

@end

/**
 *  Closes a pull request without merging.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.close
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsClose : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request to close. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Closes a pull request without merging.
 *
 *  @param object The @c GTLRSecureSourceManager_ClosePullRequestRequest to
 *    include in the query.
 *  @param name Required. The pull request to close. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsClose
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_ClosePullRequestRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a pull request.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The repository that the pull request is created from. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates a pull request.
 *
 *  @param object The @c GTLRSecureSourceManager_PullRequest to include in the
 *    query.
 *  @param parent Required. The repository that the pull request is created
 *    from. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a pull request.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the pull request to retrieve. The format is
 *  `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_PullRequest.
 *
 *  Gets a pull request.
 *
 *  @param name Required. Name of the pull request to retrieve. The format is
 *    `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists pull requests in a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsList : GTLRSecureSourceManagerQuery

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The repository in which to list pull requests. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListPullRequestsResponse.
 *
 *  Lists pull requests in a repository.
 *
 *  @param parent Required. The repository in which to list pull requests.
 *    Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists a pull request's file diffs.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.listFileDiffs
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsListFileDiffs : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request to list file diffs for. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListPullRequestFileDiffsResponse.
 *
 *  Lists a pull request's file diffs.
 *
 *  @param name Required. The pull request to list file diffs for. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsListFileDiffs
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Merges a pull request.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.merge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsMerge : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request to merge. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Merges a pull request.
 *
 *  @param object The @c GTLRSecureSourceManager_MergePullRequestRequest to
 *    include in the query.
 *  @param name Required. The pull request to merge. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsMerge
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_MergePullRequestRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Opens a pull request.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.open
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsOpen : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request to open. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Opens a pull request.
 *
 *  @param object The @c GTLRSecureSourceManager_OpenPullRequestRequest to
 *    include in the query.
 *  @param name Required. The pull request to open. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsOpen
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_OpenPullRequestRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a pull request.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPatch : GTLRSecureSourceManagerQuery

/**
 *  Output only. A unique identifier for a PullRequest. The number appended at
 *  the end is generated by the server. Format:
 *  `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  pull request resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. The special value "*" means full
 *  replacement.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates a pull request.
 *
 *  @param object The @c GTLRSecureSourceManager_PullRequest to include in the
 *    query.
 *  @param name Output only. A unique identifier for a PullRequest. The number
 *    appended at the end is generated by the server. Format:
 *    `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Batch creates pull request comments.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsBatchCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request in which to create the pull request comments.
 *  Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Batch creates pull request comments.
 *
 *  @param object The @c
 *    GTLRSecureSourceManager_BatchCreatePullRequestCommentsRequest to include
 *    in the query.
 *  @param parent Required. The pull request in which to create the pull request
 *    comments. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BatchCreatePullRequestCommentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a pull request comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsCreate : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request in which to create the pull request comment.
 *  Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Creates a pull request comment.
 *
 *  @param object The @c GTLRSecureSourceManager_PullRequestComment to include
 *    in the query.
 *  @param parent Required. The pull request in which to create the pull request
 *    comment. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsCreate
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequestComment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a pull request comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsDelete : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the pull request comment to delete. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments/{comment_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Deletes a pull request comment.
 *
 *  @param name Required. Name of the pull request comment to delete. The format
 *    is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments/{comment_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a pull request comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsGet : GTLRSecureSourceManagerQuery

/**
 *  Required. Name of the pull request comment to retrieve. The format is
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments/{comment_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSecureSourceManager_PullRequestComment.
 *
 *  Gets a pull request comment.
 *
 *  @param name Required. Name of the pull request comment to retrieve. The
 *    format is
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequestComments/{comment_id}`.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists pull request comments.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsList : GTLRSecureSourceManagerQuery

/**
 *  Optional. Requested page size. If unspecified, at most 100 pull request
 *  comments will be returned. The maximum value is 100; values above 100 will
 *  be coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The pull request in which to list pull request comments. Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_ListPullRequestCommentsResponse.
 *
 *  Lists pull request comments.
 *
 *  @param parent Required. The pull request in which to list pull request
 *    comments. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a pull request comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsPatch : GTLRSecureSourceManagerQuery

/**
 *  Identifier. Unique identifier for the pull request comment. The comment id
 *  is generated by the server. Format:
 *  `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request}/pullRequestComments/{comment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  pull request comment resource by the update. Updatable fields are `body`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Updates a pull request comment.
 *
 *  @param object The @c GTLRSecureSourceManager_PullRequestComment to include
 *    in the query.
 *  @param name Identifier. Unique identifier for the pull request comment. The
 *    comment id is generated by the server. Format:
 *    `projects/{project}/locations/{location}/repositories/{repository}/pullRequests/{pull_request}/pullRequestComments/{comment_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsPatch
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequestComment *)object
                           name:(NSString *)name;

@end

/**
 *  Resolves pull request comments.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.resolve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsResolve : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request in which to resolve the pull request comments.
 *  Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Resolves pull request comments.
 *
 *  @param object The @c
 *    GTLRSecureSourceManager_ResolvePullRequestCommentsRequest to include in
 *    the query.
 *  @param parent Required. The pull request in which to resolve the pull
 *    request comments. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsResolve
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_ResolvePullRequestCommentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Unresolves pull request comment.
 *
 *  Method: securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.unresolve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsUnresolve : GTLRSecureSourceManagerQuery

/**
 *  Required. The pull request in which to resolve the pull request comments.
 *  Format:
 *  `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRSecureSourceManager_Operation.
 *
 *  Unresolves pull request comment.
 *
 *  @param object The @c
 *    GTLRSecureSourceManager_UnresolvePullRequestCommentsRequest to include in
 *    the query.
 *  @param parent Required. The pull request in which to resolve the pull
 *    request comments. Format:
 *    `projects/{project_number}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}`
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsUnresolve
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_UnresolvePullRequestCommentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Set IAM policy on a repository.
 *
 *  Method: securesourcemanager.projects.locations.repositories.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesSetIamPolicy : GTLRSecureSourceManagerQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_Policy.
 *
 *  Set IAM policy on a repository.
 *
 *  @param object The @c GTLRSecureSourceManager_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Test IAM permissions on a repository. IAM permission checks are not required
 *  on this method.
 *
 *  Method: securesourcemanager.projects.locations.repositories.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeSecureSourceManagerCloudPlatform
 */
@interface GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesTestIamPermissions : GTLRSecureSourceManagerQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRSecureSourceManager_TestIamPermissionsResponse.
 *
 *  Test IAM permissions on a repository. IAM permission checks are not required
 *  on this method.
 *
 *  @param object The @c GTLRSecureSourceManager_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRSecureSourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
