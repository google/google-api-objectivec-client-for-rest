// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Secure Source Manager API (securesourcemanager/v1)
// Description:
//   Regionally deployed, single-tenant managed source code repository hosted on
//   Google Cloud.
// Documentation:
//   https://cloud.google.com/secure-source-manager

#import <GoogleAPIClientForREST/GTLRSecureSourceManagerQuery.h>

@implementation GTLRSecureSourceManagerQuery

@dynamic fields;

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Location class];
  query.loggingName = @"securesourcemanager.projects.locations.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesCreate

@dynamic instanceId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Instance *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Instance class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_Policy class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.getIamPolicy";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListInstancesResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_Policy class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.setIamPolicy";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRSecureSourceManagerQuery_ProjectsLocationsInstancesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_TestIamPermissionsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.instances.testIamPermissions";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsList

@dynamic extraLocationTypes, filter, name, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraLocationTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRSecureSourceManagerQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListLocationsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Empty class];
  query.loggingName = @"securesourcemanager.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Empty class];
  query.loggingName = @"securesourcemanager.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRSecureSourceManagerQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListOperationsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesCreate

@dynamic branchRuleId, parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BranchRule *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/branchRules";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.branchRules.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesDelete

@dynamic allowMissing, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.branchRules.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_BranchRule class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.branchRules.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/branchRules";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListBranchRulesResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.branchRules.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BranchRule *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesBranchRulesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.branchRules.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesCreate

@dynamic parent, repositoryId;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Repository *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/repositories";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesDelete

@dynamic allowMissing, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchBlob

@dynamic repository, sha;

+ (instancetype)queryWithRepository:(NSString *)repository {
  NSArray *pathParams = @[ @"repository" ];
  NSString *pathURITemplate = @"v1/{+repository}:fetchBlob";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchBlob *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.repository = repository;
  query.expectedObjectClass = [GTLRSecureSourceManager_FetchBlobResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.fetchBlob";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchTree

@dynamic pageSize, pageToken, recursive, ref, repository;

+ (instancetype)queryWithRepository:(NSString *)repository {
  NSArray *pathParams = @[ @"repository" ];
  NSString *pathURITemplate = @"v1/{+repository}:fetchTree";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesFetchTree *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.repository = repository;
  query.expectedObjectClass = [GTLRSecureSourceManager_FetchTreeResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.fetchTree";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Repository class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_Policy class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.getIamPolicy";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksCreate

@dynamic hookId, parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Hook *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/hooks";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.hooks.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.hooks.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Hook class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.hooks.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/hooks";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListHooksResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.hooks.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Hook *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesHooksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.hooks.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesClose

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_CloseIssueRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:close";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesClose *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.close";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Issue *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/issues";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesDelete

@dynamic ETag, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Issue class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_IssueComment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/issueComments";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.issueComments.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.issueComments.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_IssueComment class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.issueComments.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/issueComments";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListIssueCommentsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.issueComments.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_IssueComment *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesIssueCommentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.issueComments.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/issues";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListIssuesResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesOpen

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_OpenIssueRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:open";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesOpen *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.open";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Issue *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesIssuesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.issues.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesList

@dynamic filter, instance, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/repositories";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListRepositoriesResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_Repository *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsClose

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_ClosePullRequestRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:close";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsClose *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.close";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequests";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_PullRequest class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequests";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListPullRequestsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsListFileDiffs

@dynamic name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:listFileDiffs";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsListFileDiffs *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListPullRequestFileDiffsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.listFileDiffs";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsMerge

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_MergePullRequestRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:merge";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsMerge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.merge";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsOpen

@dynamic name;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_OpenPullRequestRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:open";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsOpen *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.open";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_BatchCreatePullRequestCommentsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequestComments:batchCreate";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.batchCreate";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequestComment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequestComments";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.create";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.delete";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_PullRequestComment class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.get";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequestComments";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_ListPullRequestCommentsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.list";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_PullRequestComment *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.patch";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsResolve

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_ResolvePullRequestCommentsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequestComments:resolve";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsResolve *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.resolve";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsUnresolve

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_UnresolvePullRequestCommentsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pullRequestComments:unresolve";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesPullRequestsPullRequestCommentsUnresolve *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRSecureSourceManager_Operation class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.unresolve";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_Policy class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.setIamPolicy";
  return query;
}

@end

@implementation GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRSecureSourceManager_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRSecureSourceManagerQuery_ProjectsLocationsRepositoriesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRSecureSourceManager_TestIamPermissionsResponse class];
  query.loggingName = @"securesourcemanager.projects.locations.repositories.testIamPermissions";
  return query;
}

@end
