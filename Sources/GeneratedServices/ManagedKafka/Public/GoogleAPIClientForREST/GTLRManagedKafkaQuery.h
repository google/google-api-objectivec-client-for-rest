// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Managed Service for Apache Kafka API (managedkafka/v1)
// Description:
//   Manage Apache Kafka clusters and resources.
// Documentation:
//   https://cloud.google.com/managed-service-for-apache-kafka/docs

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRManagedKafkaObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Managed Kafka query classes.
 */
@interface GTLRManagedKafkaQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes a single consumer group.
 *
 *  Method: managedkafka.projects.locations.clusters.consumerGroups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsDelete : GTLRManagedKafkaQuery

/**
 *  Required. The name of the consumer group to delete.
 *  `projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Empty.
 *
 *  Deletes a single consumer group.
 *
 *  @param name Required. The name of the consumer group to delete.
 *    `projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the properties of a single consumer group.
 *
 *  Method: managedkafka.projects.locations.clusters.consumerGroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsGet : GTLRManagedKafkaQuery

/**
 *  Required. The name of the consumer group whose configuration to return.
 *  `projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_ConsumerGroup.
 *
 *  Returns the properties of a single consumer group.
 *
 *  @param name Required. The name of the consumer group whose configuration to
 *    return.
 *    `projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the consumer groups in a given cluster.
 *
 *  Method: managedkafka.projects.locations.clusters.consumerGroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsList : GTLRManagedKafkaQuery

/**
 *  Optional. The maximum number of consumer groups to return. The service may
 *  return fewer than this value. If unset or zero, all consumer groups for the
 *  parent is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListConsumerGroups` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListConsumerGroups` must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent cluster whose consumer groups are to be listed.
 *  Structured like
 *  `projects/{project}/locations/{location}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRManagedKafka_ListConsumerGroupsResponse.
 *
 *  Lists the consumer groups in a given cluster.
 *
 *  @param parent Required. The parent cluster whose consumer groups are to be
 *    listed. Structured like
 *    `projects/{project}/locations/{location}/clusters/{cluster}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the properties of a single consumer group.
 *
 *  Method: managedkafka.projects.locations.clusters.consumerGroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsPatch : GTLRManagedKafkaQuery

/**
 *  Identifier. The name of the consumer group. The `consumer_group` segment is
 *  used when connecting directly to the cluster. Structured like:
 *  projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumer_group}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  ConsumerGroup resource by the update. The fields specified in the
 *  update_mask are relative to the resource, not the full request. A field will
 *  be overwritten if it is in the mask. The mask is required and a value of *
 *  will update all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRManagedKafka_ConsumerGroup.
 *
 *  Updates the properties of a single consumer group.
 *
 *  @param object The @c GTLRManagedKafka_ConsumerGroup to include in the query.
 *  @param name Identifier. The name of the consumer group. The `consumer_group`
 *    segment is used when connecting directly to the cluster. Structured like:
 *    projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumer_group}
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_ConsumerGroup *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new cluster in a given project and location.
 *
 *  Method: managedkafka.projects.locations.clusters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersCreate : GTLRManagedKafkaQuery

/**
 *  Required. The ID to use for the cluster, which will become the final
 *  component of the cluster's name. The ID must be 1-63 characters long, and
 *  match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` to comply with RFC
 *  1035. This value is structured like: `my-cluster-id`.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The parent region in which to create the cluster. Structured like
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID to avoid duplication of requests. If a request times out or
 *  fails, retrying with the same ID allows the server to recognize the previous
 *  attempt. For at least 60 minutes, the server ignores duplicate requests
 *  bearing the same ID. For example, consider a situation where you make an
 *  initial request and the request times out. If you make the request again
 *  with the same request ID within 60 minutes of the last request, the server
 *  checks if an original operation with the same request ID was received. If
 *  so, the server ignores the second request. The request ID must be a valid
 *  UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRManagedKafka_Operation.
 *
 *  Creates a new cluster in a given project and location.
 *
 *  @param object The @c GTLRManagedKafka_Cluster to include in the query.
 *  @param parent Required. The parent region in which to create the cluster.
 *    Structured like `projects/{project}/locations/{location}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersCreate
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_Cluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single cluster.
 *
 *  Method: managedkafka.projects.locations.clusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersDelete : GTLRManagedKafkaQuery

/** Required. The name of the cluster to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID to avoid duplication of requests. If a request times out or
 *  fails, retrying with the same ID allows the server to recognize the previous
 *  attempt. For at least 60 minutes, the server ignores duplicate requests
 *  bearing the same ID. For example, consider a situation where you make an
 *  initial request and the request times out. If you make the request again
 *  with the same request ID within 60 minutes of the last request, the server
 *  checks if an original operation with the same request ID was received. If
 *  so, the server ignores the second request. The request ID must be a valid
 *  UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRManagedKafka_Operation.
 *
 *  Deletes a single cluster.
 *
 *  @param name Required. The name of the cluster to delete.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the properties of a single cluster.
 *
 *  Method: managedkafka.projects.locations.clusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersGet : GTLRManagedKafkaQuery

/** Required. The name of the cluster whose configuration to return. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Cluster.
 *
 *  Returns the properties of a single cluster.
 *
 *  @param name Required. The name of the cluster whose configuration to return.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the clusters in a given project and location.
 *
 *  Method: managedkafka.projects.locations.clusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersList : GTLRManagedKafkaQuery

/** Optional. Filter expression for the result. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Order by fields for the result. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of clusters to return. The service may return
 *  fewer than this value. If unspecified, server will pick an appropriate
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListClusters` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListClusters` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent location whose clusters are to be listed. Structured
 *  like `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRManagedKafka_ListClustersResponse.
 *
 *  Lists the clusters in a given project and location.
 *
 *  @param parent Required. The parent location whose clusters are to be listed.
 *    Structured like `projects/{project}/locations/{location}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the properties of a single cluster.
 *
 *  Method: managedkafka.projects.locations.clusters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersPatch : GTLRManagedKafkaQuery

/**
 *  Identifier. The name of the cluster. Structured like:
 *  projects/{project_number}/locations/{location}/clusters/{cluster_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID to avoid duplication of requests. If a request times out or
 *  fails, retrying with the same ID allows the server to recognize the previous
 *  attempt. For at least 60 minutes, the server ignores duplicate requests
 *  bearing the same ID. For example, consider a situation where you make an
 *  initial request and the request times out. If you make the request again
 *  with the same request ID within 60 minutes of the last request, the server
 *  checks if an original operation with the same request ID was received. If
 *  so, the server ignores the second request. The request ID must be a valid
 *  UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  cluster resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. The mask is required and a value of * will update all
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRManagedKafka_Operation.
 *
 *  Updates the properties of a single cluster.
 *
 *  @param object The @c GTLRManagedKafka_Cluster to include in the query.
 *  @param name Identifier. The name of the cluster. Structured like:
 *    projects/{project_number}/locations/{location}/clusters/{cluster_id}
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersPatch
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_Cluster *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new topic in a given project and location.
 *
 *  Method: managedkafka.projects.locations.clusters.topics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsCreate : GTLRManagedKafkaQuery

/**
 *  Required. The parent cluster in which to create the topic. Structured like
 *  `projects/{project}/locations/{location}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The ID to use for the topic, which will become the final component
 *  of the topic's name. This value is structured like: `my-topic-name`.
 */
@property(nonatomic, copy, nullable) NSString *topicId;

/**
 *  Fetches a @c GTLRManagedKafka_Topic.
 *
 *  Creates a new topic in a given project and location.
 *
 *  @param object The @c GTLRManagedKafka_Topic to include in the query.
 *  @param parent Required. The parent cluster in which to create the topic.
 *    Structured like
 *    `projects/{project}/locations/{location}/clusters/{cluster}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsCreate
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_Topic *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single topic.
 *
 *  Method: managedkafka.projects.locations.clusters.topics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsDelete : GTLRManagedKafkaQuery

/**
 *  Required. The name of the topic to delete.
 *  `projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Empty.
 *
 *  Deletes a single topic.
 *
 *  @param name Required. The name of the topic to delete.
 *    `projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the properties of a single topic.
 *
 *  Method: managedkafka.projects.locations.clusters.topics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsGet : GTLRManagedKafkaQuery

/**
 *  Required. The name of the topic whose configuration to return. Structured
 *  like:
 *  projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Topic.
 *
 *  Returns the properties of a single topic.
 *
 *  @param name Required. The name of the topic whose configuration to return.
 *    Structured like:
 *    projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the topics in a given cluster.
 *
 *  Method: managedkafka.projects.locations.clusters.topics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsList : GTLRManagedKafkaQuery

/**
 *  Optional. The maximum number of topics to return. The service may return
 *  fewer than this value. If unset or zero, all topics for the parent is
 *  returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListTopics` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListTopics` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent cluster whose topics are to be listed. Structured like
 *  `projects/{project}/locations/{location}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRManagedKafka_ListTopicsResponse.
 *
 *  Lists the topics in a given cluster.
 *
 *  @param parent Required. The parent cluster whose topics are to be listed.
 *    Structured like
 *    `projects/{project}/locations/{location}/clusters/{cluster}`.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the properties of a single topic.
 *
 *  Method: managedkafka.projects.locations.clusters.topics.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsPatch : GTLRManagedKafkaQuery

/**
 *  Identifier. The name of the topic. The `topic` segment is used when
 *  connecting directly to the cluster. Structured like:
 *  projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  Topic resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. The mask is required and a value of * will update all
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRManagedKafka_Topic.
 *
 *  Updates the properties of a single topic.
 *
 *  @param object The @c GTLRManagedKafka_Topic to include in the query.
 *  @param name Identifier. The name of the topic. The `topic` segment is used
 *    when connecting directly to the cluster. Structured like:
 *    projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsPatch
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_Topic *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: managedkafka.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsGet : GTLRManagedKafkaQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: managedkafka.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsList : GTLRManagedKafkaQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRManagedKafka_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: managedkafka.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsOperationsCancel : GTLRManagedKafkaQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRManagedKafka_CancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRManagedKafka_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: managedkafka.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsOperationsDelete : GTLRManagedKafkaQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: managedkafka.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsOperationsGet : GTLRManagedKafkaQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRManagedKafka_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: managedkafka.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeManagedKafkaCloudPlatform
 */
@interface GTLRManagedKafkaQuery_ProjectsLocationsOperationsList : GTLRManagedKafkaQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRManagedKafka_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRManagedKafkaQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
