// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Managed Service for Apache Kafka API (managedkafka/v1)
// Description:
//   Manage Apache Kafka clusters and resources.
// Documentation:
//   https://cloud.google.com/managed-service-for-apache-kafka/docs

#import <GoogleAPIClientForREST/GTLRManagedKafkaQuery.h>

@implementation GTLRManagedKafkaQuery

@dynamic fields;

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsAddAclEntry

@dynamic acl;

+ (instancetype)queryWithObject:(GTLRManagedKafka_AclEntry *)object
                            acl:(NSString *)acl {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"acl" ];
  NSString *pathURITemplate = @"v1/{+acl}:addAclEntry";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsAddAclEntry *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.acl = acl;
  query.expectedObjectClass = [GTLRManagedKafka_AddAclEntryResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.addAclEntry";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsCreate

@dynamic aclId, parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Acl *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/acls";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_Acl class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Acl class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/acls";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListAclsResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Acl *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Acl class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsRemoveAclEntry

@dynamic acl;

+ (instancetype)queryWithObject:(GTLRManagedKafka_AclEntry *)object
                            acl:(NSString *)acl {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"acl" ];
  NSString *pathURITemplate = @"v1/{+acl}:removeAclEntry";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersAclsRemoveAclEntry *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.acl = acl;
  query.expectedObjectClass = [GTLRManagedKafka_RemoveAclEntryResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.acls.removeAclEntry";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.clusters.consumerGroups.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ConsumerGroup class];
  query.loggingName = @"managedkafka.projects.locations.clusters.consumerGroups.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/consumerGroups";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListConsumerGroupsResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.consumerGroups.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_ConsumerGroup *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersConsumerGroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ConsumerGroup class];
  query.loggingName = @"managedkafka.projects.locations.clusters.consumerGroups.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersCreate

@dynamic clusterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Cluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/clusters";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.clusters.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.clusters.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Cluster class];
  query.loggingName = @"managedkafka.projects.locations.clusters.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/clusters";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListClustersResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Cluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.clusters.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsCreate

@dynamic parent, topicId;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Topic *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/topics";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_Topic class];
  query.loggingName = @"managedkafka.projects.locations.clusters.topics.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.clusters.topics.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Topic class];
  query.loggingName = @"managedkafka.projects.locations.clusters.topics.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/topics";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListTopicsResponse class];
  query.loggingName = @"managedkafka.projects.locations.clusters.topics.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Topic *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsClustersTopicsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Topic class];
  query.loggingName = @"managedkafka.projects.locations.clusters.topics.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsCreate

@dynamic connectorId, parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Connector *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectors";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_Connector class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Connector class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectors";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListConnectorsResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_Connector *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Connector class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsPause

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_PauseConnectorRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:pause";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsPause *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_PauseConnectorResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.pause";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsRestart

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_RestartConnectorRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:restart";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsRestart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_RestartConnectorResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.restart";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsResume

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_ResumeConnectorRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:resume";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsResume *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ResumeConnectorResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.resume";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_StopConnectorRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:stop";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersConnectorsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_StopConnectorResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.connectors.stop";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersCreate

@dynamic connectClusterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRManagedKafka_ConnectCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectClusters";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ConnectCluster class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectClusters";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListConnectClustersResponse class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRManagedKafka_ConnectCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsConnectClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.connectClusters.patch";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Location class];
  query.loggingName = @"managedkafka.projects.locations.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsList

@dynamic extraLocationTypes, filter, name, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraLocationTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRManagedKafkaQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ListLocationsResponse class];
  query.loggingName = @"managedkafka.projects.locations.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRManagedKafkaQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Operation class];
  query.loggingName = @"managedkafka.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRManagedKafkaQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_ListOperationsResponse class];
  query.loggingName = @"managedkafka.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesCompatibilityCheckCompatibility

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CheckCompatibilityRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesCompatibilityCheckCompatibility *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_CheckCompatibilityResponse class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.compatibility.checkCompatibility";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.config.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigGet

@dynamic defaultToGlobal, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.config.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_UpdateSchemaConfigRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesConfigUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.config.update";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsCompatibilityCheckCompatibility

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CheckCompatibilityRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsCompatibilityCheckCompatibility *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_CheckCompatibilityResponse class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.compatibility.checkCompatibility";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.config.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigGet

@dynamic defaultToGlobal, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.config.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_UpdateSchemaConfigRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsConfigUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaConfig class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.config.update";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Context class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/contexts";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.mode.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.mode.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_UpdateSchemaModeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsModeUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.mode.update";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasGet

@dynamic name, subject;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Schema class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.schemas.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasGetSchema

@dynamic name, subject;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/schema";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasGetSchema *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.schemas.getSchema";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasSubjectsList

@dynamic deleted, parent, subject;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/subjects";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasSubjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.schemas.subjects.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasTypesList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schemas/types";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.schemas.types.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasVersionsList

@dynamic deleted, parent, subject;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSchemasVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.schemas.versions.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsDelete

@dynamic name, permanent;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsList

@dynamic deleted, parent, subjectPrefix;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/subjects";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsLookupVersion

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_LookupVersionRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsLookupVersion *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaVersion class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.lookupVersion";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CreateVersionRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_CreateVersionResponse class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsDelete

@dynamic name, permanent;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsGet

@dynamic deleted, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaVersion class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsGetSchema

@dynamic deleted, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/schema";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsGetSchema *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.getSchema";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsList

@dynamic deleted, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsReferencedbyList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/referencedby";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesContextsSubjectsVersionsReferencedbyList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.referencedby.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CreateSchemaRegistryRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schemaRegistries";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaRegistry class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Empty class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaRegistry class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schemaRegistries";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_ListSchemaRegistriesResponse class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.mode.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.mode.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRManagedKafka_UpdateSchemaModeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesModeUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaMode class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.mode.update";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasGet

@dynamic name, subject;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_Schema class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.schemas.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasGetSchema

@dynamic name, subject;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/schema";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasGetSchema *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.schemas.getSchema";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasSubjectsList

@dynamic deleted, parent, subject;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/subjects";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasSubjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.schemas.subjects.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasTypesList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schemas/types";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.schemas.types.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasVersionsList

@dynamic deleted, parent, subject;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSchemasVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.schemas.versions.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsDelete

@dynamic name, permanent;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsList

@dynamic deleted, parent, subjectPrefix;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/subjects";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsLookupVersion

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_LookupVersionRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsLookupVersion *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaVersion class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.lookupVersion";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRManagedKafka_CreateVersionRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_CreateVersionResponse class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.create";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsDelete

@dynamic name, permanent;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.delete";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsGet

@dynamic deleted, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_SchemaVersion class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.get";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsGetSchema

@dynamic deleted, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/schema";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsGetSchema *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.getSchema";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsList

@dynamic deleted, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.list";
  return query;
}

@end

@implementation GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsReferencedbyList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/referencedby";
  GTLRManagedKafkaQuery_ProjectsLocationsSchemaRegistriesSubjectsVersionsReferencedbyList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRManagedKafka_HttpBody class];
  query.loggingName = @"managedkafka.projects.locations.schemaRegistries.subjects.versions.referencedby.list";
  return query;
}

@end
