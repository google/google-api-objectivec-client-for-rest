// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   People API (people/v1)
// Description:
//   Provides access to information about profiles and contacts.
// Documentation:
//   https://developers.google.com/people/

#import <GoogleAPIClientForREST/GTLRPeopleServiceQuery.h>

// ----------------------------------------------------------------------------
// Constants

// mergeSources
NSString * const kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeContact = @"DIRECTORY_MERGE_SOURCE_TYPE_CONTACT";
NSString * const kGTLRPeopleServiceMergeSourcesDirectoryMergeSourceTypeUnspecified = @"DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED";

// sortOrder
NSString * const kGTLRPeopleServiceSortOrderFirstNameAscending = @"FIRST_NAME_ASCENDING";
NSString * const kGTLRPeopleServiceSortOrderLastModifiedAscending = @"LAST_MODIFIED_ASCENDING";
NSString * const kGTLRPeopleServiceSortOrderLastModifiedDescending = @"LAST_MODIFIED_DESCENDING";
NSString * const kGTLRPeopleServiceSortOrderLastNameAscending  = @"LAST_NAME_ASCENDING";

// sources
NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeDomainContact = @"DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT";
NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeDomainProfile = @"DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE";
NSString * const kGTLRPeopleServiceSourcesDirectorySourceTypeUnspecified = @"DIRECTORY_SOURCE_TYPE_UNSPECIFIED";
NSString * const kGTLRPeopleServiceSourcesReadSourceTypeContact = @"READ_SOURCE_TYPE_CONTACT";
NSString * const kGTLRPeopleServiceSourcesReadSourceTypeDomainContact = @"READ_SOURCE_TYPE_DOMAIN_CONTACT";
NSString * const kGTLRPeopleServiceSourcesReadSourceTypeProfile = @"READ_SOURCE_TYPE_PROFILE";
NSString * const kGTLRPeopleServiceSourcesReadSourceTypeUnspecified = @"READ_SOURCE_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRPeopleServiceQuery

@dynamic fields;

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsBatchGet

@dynamic groupFields, maxMembers, resourceNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/contactGroups:batchGet";
  GTLRPeopleServiceQuery_ContactGroupsBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_BatchGetContactGroupsResponse class];
  query.loggingName = @"people.contactGroups.batchGet";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsCreate

+ (instancetype)queryWithObject:(GTLRPeopleService_CreateContactGroupRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/contactGroups";
  GTLRPeopleServiceQuery_ContactGroupsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPeopleService_ContactGroup class];
  query.loggingName = @"people.contactGroups.create";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsDelete

@dynamic deleteContacts, resourceName;

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}";
  GTLRPeopleServiceQuery_ContactGroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_Empty class];
  query.loggingName = @"people.contactGroups.delete";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsGet

@dynamic groupFields, maxMembers, resourceName;

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}";
  GTLRPeopleServiceQuery_ContactGroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_ContactGroup class];
  query.loggingName = @"people.contactGroups.get";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsList

@dynamic groupFields, pageSize, pageToken, syncToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/contactGroups";
  GTLRPeopleServiceQuery_ContactGroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_ListContactGroupsResponse class];
  query.loggingName = @"people.contactGroups.list";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsMembersModify

@dynamic resourceName;

+ (instancetype)queryWithObject:(GTLRPeopleService_ModifyContactGroupMembersRequest *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}/members:modify";
  GTLRPeopleServiceQuery_ContactGroupsMembersModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_ModifyContactGroupMembersResponse class];
  query.loggingName = @"people.contactGroups.members.modify";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_ContactGroupsUpdate

@dynamic resourceName;

+ (instancetype)queryWithObject:(GTLRPeopleService_UpdateContactGroupRequest *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}";
  GTLRPeopleServiceQuery_ContactGroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_ContactGroup class];
  query.loggingName = @"people.contactGroups.update";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_OtherContactsCopyOtherContactToMyContactsGroup

@dynamic resourceName;

+ (instancetype)queryWithObject:(GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}:copyOtherContactToMyContactsGroup";
  GTLRPeopleServiceQuery_OtherContactsCopyOtherContactToMyContactsGroup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_Person class];
  query.loggingName = @"people.otherContacts.copyOtherContactToMyContactsGroup";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_OtherContactsList

@dynamic pageSize, pageToken, readMask, requestSyncToken, sources, syncToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/otherContacts";
  GTLRPeopleServiceQuery_OtherContactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_ListOtherContactsResponse class];
  query.loggingName = @"people.otherContacts.list";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_OtherContactsSearch

@dynamic pageSize, query, readMask;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/otherContacts:search";
  GTLRPeopleServiceQuery_OtherContactsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_SearchResponse class];
  query.loggingName = @"people.otherContacts.search";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleBatchCreateContacts

+ (instancetype)queryWithObject:(GTLRPeopleService_BatchCreateContactsRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/people:batchCreateContacts";
  GTLRPeopleServiceQuery_PeopleBatchCreateContacts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPeopleService_BatchCreateContactsResponse class];
  query.loggingName = @"people.people.batchCreateContacts";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleBatchDeleteContacts

+ (instancetype)queryWithObject:(GTLRPeopleService_BatchDeleteContactsRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/people:batchDeleteContacts";
  GTLRPeopleServiceQuery_PeopleBatchDeleteContacts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPeopleService_Empty class];
  query.loggingName = @"people.people.batchDeleteContacts";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleBatchUpdateContacts

+ (instancetype)queryWithObject:(GTLRPeopleService_BatchUpdateContactsRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/people:batchUpdateContacts";
  GTLRPeopleServiceQuery_PeopleBatchUpdateContacts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPeopleService_BatchUpdateContactsResponse class];
  query.loggingName = @"people.people.batchUpdateContacts";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleConnectionsList

@dynamic pageSize, pageToken, personFields, requestMaskIncludeField,
         requestSyncToken, resourceName, sortOrder, sources, syncToken;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"requestMaskIncludeField" : @"requestMask.includeField" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}/connections";
  GTLRPeopleServiceQuery_PeopleConnectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_ListConnectionsResponse class];
  query.loggingName = @"people.people.connections.list";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleCreateContact

@dynamic personFields, sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRPeopleService_Person *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/people:createContact";
  GTLRPeopleServiceQuery_PeopleCreateContact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRPeopleService_Person class];
  query.loggingName = @"people.people.createContact";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleDeleteContact

@dynamic resourceName;

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}:deleteContact";
  GTLRPeopleServiceQuery_PeopleDeleteContact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_Empty class];
  query.loggingName = @"people.people.deleteContact";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleDeleteContactPhoto

@dynamic personFields, resourceName, sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}:deleteContactPhoto";
  GTLRPeopleServiceQuery_PeopleDeleteContactPhoto *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_DeleteContactPhotoResponse class];
  query.loggingName = @"people.people.deleteContactPhoto";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleGet

@dynamic personFields, requestMaskIncludeField, resourceName, sources;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"requestMaskIncludeField" : @"requestMask.includeField" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}";
  GTLRPeopleServiceQuery_PeopleGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_Person class];
  query.loggingName = @"people.people.get";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleGetBatchGet

@dynamic personFields, requestMaskIncludeField, resourceNames, sources;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"requestMaskIncludeField" : @"requestMask.includeField" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceNames" : [NSString class],
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/people:batchGet";
  GTLRPeopleServiceQuery_PeopleGetBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_GetPeopleResponse class];
  query.loggingName = @"people.people.getBatchGet";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleListDirectoryPeople

@dynamic mergeSources, pageSize, pageToken, readMask, requestSyncToken, sources,
         syncToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mergeSources" : [NSString class],
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/people:listDirectoryPeople";
  GTLRPeopleServiceQuery_PeopleListDirectoryPeople *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_ListDirectoryPeopleResponse class];
  query.loggingName = @"people.people.listDirectoryPeople";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleSearchContacts

@dynamic pageSize, query, readMask, sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/people:searchContacts";
  GTLRPeopleServiceQuery_PeopleSearchContacts *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_SearchResponse class];
  query.loggingName = @"people.people.searchContacts";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleSearchDirectoryPeople

@dynamic mergeSources, pageSize, pageToken, query, readMask, sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mergeSources" : [NSString class],
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/people:searchDirectoryPeople";
  GTLRPeopleServiceQuery_PeopleSearchDirectoryPeople *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRPeopleService_SearchDirectoryPeopleResponse class];
  query.loggingName = @"people.people.searchDirectoryPeople";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleUpdateContact

@dynamic personFields, resourceName, sources, updatePersonFields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRPeopleService_Person *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}:updateContact";
  GTLRPeopleServiceQuery_PeopleUpdateContact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_Person class];
  query.loggingName = @"people.people.updateContact";
  return query;
}

@end

@implementation GTLRPeopleServiceQuery_PeopleUpdateContactPhoto

@dynamic resourceName;

+ (instancetype)queryWithObject:(GTLRPeopleService_UpdateContactPhotoRequest *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}:updateContactPhoto";
  GTLRPeopleServiceQuery_PeopleUpdateContactPhoto *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRPeopleService_UpdateContactPhotoResponse class];
  query.loggingName = @"people.people.updateContactPhoto";
  return query;
}

@end
