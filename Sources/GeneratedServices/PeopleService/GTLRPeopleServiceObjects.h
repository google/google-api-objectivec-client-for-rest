// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   People API (people/v1)
// Description:
//   Provides access to information about profiles and contacts.
// Documentation:
//   https://developers.google.com/people/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPeopleService_Address;
@class GTLRPeopleService_AgeRangeType;
@class GTLRPeopleService_BatchUpdateContactsRequest_Contacts;
@class GTLRPeopleService_BatchUpdateContactsResponse_UpdateResult;
@class GTLRPeopleService_Biography;
@class GTLRPeopleService_Birthday;
@class GTLRPeopleService_BraggingRights;
@class GTLRPeopleService_CalendarUrl;
@class GTLRPeopleService_ClientData;
@class GTLRPeopleService_ContactGroup;
@class GTLRPeopleService_ContactGroupMembership;
@class GTLRPeopleService_ContactGroupMetadata;
@class GTLRPeopleService_ContactGroupResponse;
@class GTLRPeopleService_ContactToCreate;
@class GTLRPeopleService_CoverPhoto;
@class GTLRPeopleService_Date;
@class GTLRPeopleService_DomainMembership;
@class GTLRPeopleService_EmailAddress;
@class GTLRPeopleService_Event;
@class GTLRPeopleService_ExternalId;
@class GTLRPeopleService_FieldMetadata;
@class GTLRPeopleService_FileAs;
@class GTLRPeopleService_Gender;
@class GTLRPeopleService_GroupClientData;
@class GTLRPeopleService_ImClient;
@class GTLRPeopleService_Interest;
@class GTLRPeopleService_Locale;
@class GTLRPeopleService_Location;
@class GTLRPeopleService_Membership;
@class GTLRPeopleService_MiscKeyword;
@class GTLRPeopleService_Name;
@class GTLRPeopleService_Nickname;
@class GTLRPeopleService_Occupation;
@class GTLRPeopleService_Organization;
@class GTLRPeopleService_Person;
@class GTLRPeopleService_PersonMetadata;
@class GTLRPeopleService_PersonResponse;
@class GTLRPeopleService_PhoneNumber;
@class GTLRPeopleService_Photo;
@class GTLRPeopleService_ProfileMetadata;
@class GTLRPeopleService_Relation;
@class GTLRPeopleService_RelationshipInterest;
@class GTLRPeopleService_RelationshipStatus;
@class GTLRPeopleService_Residence;
@class GTLRPeopleService_SearchResult;
@class GTLRPeopleService_SipAddress;
@class GTLRPeopleService_Skill;
@class GTLRPeopleService_Source;
@class GTLRPeopleService_Status;
@class GTLRPeopleService_Status_Details_Item;
@class GTLRPeopleService_Tagline;
@class GTLRPeopleService_Url;
@class GTLRPeopleService_UserDefined;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPeopleService_AgeRangeType.ageRange

/**
 *  Unspecified.
 *
 *  Value: "AGE_RANGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_AgeRangeUnspecified;
/**
 *  Between eighteen and twenty.
 *
 *  Value: "EIGHTEEN_TO_TWENTY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_EighteenToTwenty;
/**
 *  Younger than eighteen.
 *
 *  Value: "LESS_THAN_EIGHTEEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_LessThanEighteen;
/**
 *  Twenty-one and older.
 *
 *  Value: "TWENTY_ONE_OR_OLDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_AgeRangeType_AgeRange_TwentyOneOrOlder;

// ----------------------------------------------------------------------------
// GTLRPeopleService_BatchCreateContactsRequest.sources

/**
 *  Returns SourceType.CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchCreateContactsRequest_Sources_ReadSourceTypeContact;
/**
 *  Returns SourceType.DOMAIN_CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchCreateContactsRequest_Sources_ReadSourceTypeDomainContact;
/**
 *  Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
 *  SourceType.PROFILE.
 *
 *  Value: "READ_SOURCE_TYPE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchCreateContactsRequest_Sources_ReadSourceTypeProfile;
/**
 *  Unspecified.
 *
 *  Value: "READ_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchCreateContactsRequest_Sources_ReadSourceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPeopleService_BatchUpdateContactsRequest.sources

/**
 *  Returns SourceType.CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchUpdateContactsRequest_Sources_ReadSourceTypeContact;
/**
 *  Returns SourceType.DOMAIN_CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchUpdateContactsRequest_Sources_ReadSourceTypeDomainContact;
/**
 *  Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
 *  SourceType.PROFILE.
 *
 *  Value: "READ_SOURCE_TYPE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchUpdateContactsRequest_Sources_ReadSourceTypeProfile;
/**
 *  Unspecified.
 *
 *  Value: "READ_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_BatchUpdateContactsRequest_Sources_ReadSourceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Biography.contentType

/**
 *  Unspecified.
 *
 *  Value: "CONTENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_ContentTypeUnspecified;
/**
 *  HTML text.
 *
 *  Value: "TEXT_HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_TextHtml;
/**
 *  Plain text.
 *
 *  Value: "TEXT_PLAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Biography_ContentType_TextPlain;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ContactGroup.groupType

/**
 *  Unspecified.
 *
 *  Value: "GROUP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_GroupTypeUnspecified;
/**
 *  System defined contact group.
 *
 *  Value: "SYSTEM_CONTACT_GROUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_SystemContactGroup;
/**
 *  User defined contact group.
 *
 *  Value: "USER_CONTACT_GROUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ContactGroup_GroupType_UserContactGroup;

// ----------------------------------------------------------------------------
// GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest.sources

/**
 *  Returns SourceType.CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_CopyOtherContactToMyContactsGroupRequest_Sources_ReadSourceTypeContact;
/**
 *  Returns SourceType.DOMAIN_CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_CopyOtherContactToMyContactsGroupRequest_Sources_ReadSourceTypeDomainContact;
/**
 *  Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
 *  SourceType.PROFILE.
 *
 *  Value: "READ_SOURCE_TYPE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_CopyOtherContactToMyContactsGroupRequest_Sources_ReadSourceTypeProfile;
/**
 *  Unspecified.
 *
 *  Value: "READ_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_CopyOtherContactToMyContactsGroupRequest_Sources_ReadSourceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPeopleService_MiscKeyword.type

/**
 *  Home.
 *
 *  Value: "HOME"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_Home;
/**
 *  Other.
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_Other;
/**
 *  Outlook field for billing information.
 *
 *  Value: "OUTLOOK_BILLING_INFORMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookBillingInformation;
/**
 *  Outlook field for directory server.
 *
 *  Value: "OUTLOOK_DIRECTORY_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookDirectoryServer;
/**
 *  Outlook field for keyword.
 *
 *  Value: "OUTLOOK_KEYWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookKeyword;
/**
 *  Outlook field for mileage.
 *
 *  Value: "OUTLOOK_MILEAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookMileage;
/**
 *  Outlook field for priority.
 *
 *  Value: "OUTLOOK_PRIORITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookPriority;
/**
 *  Outlook field for sensitivity.
 *
 *  Value: "OUTLOOK_SENSITIVITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookSensitivity;
/**
 *  Outlook field for subject.
 *
 *  Value: "OUTLOOK_SUBJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookSubject;
/**
 *  Outlook field for user.
 *
 *  Value: "OUTLOOK_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_OutlookUser;
/**
 *  Unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_TypeUnspecified;
/**
 *  Work.
 *
 *  Value: "WORK"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_MiscKeyword_Type_Work;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Nickname.type

/**
 *  Alternate name person is known by.
 *
 *  Value: "ALTERNATE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_AlternateName;
/**
 *  Generic nickname.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Default;
/**
 *  Google+ profile nickname.
 *
 *  Value: "GPLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Gplus;
/**
 *  Initials.
 *
 *  Value: "INITIALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_Initials;
/**
 *  Maiden name or birth family name. Used when the person's family name has
 *  changed as a result of marriage.
 *
 *  Value: "MAIDEN_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_MaidenName;
/**
 *  A professional affiliation or other name; for example, `Dr. Smith.`
 *
 *  Value: "OTHER_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_OtherName;
/**
 *  A shorter version of the person's name.
 *
 *  Value: "SHORT_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Nickname_Type_ShortName;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Person.ageRange

/**
 *  Unspecified.
 *
 *  Value: "AGE_RANGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_AgeRangeUnspecified;
/**
 *  Between eighteen and twenty.
 *
 *  Value: "EIGHTEEN_TO_TWENTY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_EighteenToTwenty;
/**
 *  Younger than eighteen.
 *
 *  Value: "LESS_THAN_EIGHTEEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_LessThanEighteen;
/**
 *  Twenty-one and older.
 *
 *  Value: "TWENTY_ONE_OR_OLDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Person_AgeRange_TwentyOneOrOlder;

// ----------------------------------------------------------------------------
// GTLRPeopleService_PersonMetadata.objectType

/**
 *  Unspecified.
 *
 *  Value: "OBJECT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_ObjectTypeUnspecified;
/**
 *  [Currents Page.](https://workspace.google.com/products/currents/)
 *
 *  Value: "PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_Page;
/**
 *  Person.
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_PersonMetadata_ObjectType_Person;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ProfileMetadata.objectType

/**
 *  Unspecified.
 *
 *  Value: "OBJECT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_ObjectTypeUnspecified;
/**
 *  [Currents Page.](https://workspace.google.com/products/currents/)
 *
 *  Value: "PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_Page;
/**
 *  Person.
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_ObjectType_Person;

// ----------------------------------------------------------------------------
// GTLRPeopleService_ProfileMetadata.userTypes

/**
 *  The user is a Google Workspace user.
 *
 *  Value: "GOOGLE_APPS_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GoogleAppsUser;
/**
 *  The user is a Google user.
 *
 *  Value: "GOOGLE_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GoogleUser;
/**
 *  The user is a Currents user.
 *
 *  Value: "GPLUS_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_GplusUser;
/**
 *  The user type is not known.
 *
 *  Value: "USER_TYPE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_ProfileMetadata_UserTypes_UserTypeUnknown;

// ----------------------------------------------------------------------------
// GTLRPeopleService_Source.type

/**
 *  [Google Account](https://accounts.google.com).
 *
 *  Value: "ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_Account;
/**
 *  [Google contact](https://contacts.google.com). You can view the contact at
 *  [https://contact.google.com/](https://contact.google.com/){id}, where {id}
 *  is the source id.
 *
 *  Value: "CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_Contact;
/**
 *  [Google Workspace domain shared
 *  contact](https://support.google.com/a/answer/9281635).
 *
 *  Value: "DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_DomainContact;
/**
 *  [Google Workspace domain
 *  profile](https://support.google.com/a/answer/1628008).
 *
 *  Value: "DOMAIN_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_DomainProfile;
/**
 *  [Google "Other contact"](https://contacts.google.com/other).
 *
 *  Value: "OTHER_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_OtherContact;
/**
 *  [Google profile](https://profiles.google.com). You can view the profile at
 *  [https://profiles.google.com/](https://profiles.google.com/){id}, where {id}
 *  is the source id.
 *
 *  Value: "PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_Profile;
/**
 *  Unspecified.
 *
 *  Value: "SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_Source_Type_SourceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPeopleService_UpdateContactPhotoRequest.sources

/**
 *  Returns SourceType.CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_UpdateContactPhotoRequest_Sources_ReadSourceTypeContact;
/**
 *  Returns SourceType.DOMAIN_CONTACT.
 *
 *  Value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_UpdateContactPhotoRequest_Sources_ReadSourceTypeDomainContact;
/**
 *  Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
 *  SourceType.PROFILE.
 *
 *  Value: "READ_SOURCE_TYPE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_UpdateContactPhotoRequest_Sources_ReadSourceTypeProfile;
/**
 *  Unspecified.
 *
 *  Value: "READ_SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPeopleService_UpdateContactPhotoRequest_Sources_ReadSourceTypeUnspecified;

/**
 *  A person's physical address. May be a P.O. box or street address. All fields
 *  are optional.
 */
@interface GTLRPeopleService_Address : GTLRObject

/** The city of the address. */
@property(nonatomic, copy, nullable) NSString *city;

/** The country of the address. */
@property(nonatomic, copy, nullable) NSString *country;

/**
 *  The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country
 *  code of the address.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** The extended address of the address; for example, the apartment number. */
@property(nonatomic, copy, nullable) NSString *extendedAddress;

/**
 *  Output only. The type of the address translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/**
 *  The unstructured value of the address. If this is not set by the user it
 *  will be automatically constructed from structured values.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The P.O. box of the address. */
@property(nonatomic, copy, nullable) NSString *poBox;

/** The postal code of the address. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/** The region of the address; for example, the state or province. */
@property(nonatomic, copy, nullable) NSString *region;

/** The street address. */
@property(nonatomic, copy, nullable) NSString *streetAddress;

/**
 *  The type of the address. The type can be custom or one of these predefined
 *  values: * `home` * `work` * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person's age range.
 */
@interface GTLRPeopleService_AgeRangeType : GTLRObject

/**
 *  The age range.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_AgeRangeUnspecified
 *        Unspecified. (Value: "AGE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_EighteenToTwenty Between
 *        eighteen and twenty. (Value: "EIGHTEEN_TO_TWENTY")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_LessThanEighteen Younger
 *        than eighteen. (Value: "LESS_THAN_EIGHTEEN")
 *    @arg @c kGTLRPeopleService_AgeRangeType_AgeRange_TwentyOneOrOlder
 *        Twenty-one and older. (Value: "TWENTY_ONE_OR_OLDER")
 */
@property(nonatomic, copy, nullable) NSString *ageRange;

/** Metadata about the age range. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

@end


/**
 *  A request to create a batch of contacts.
 */
@interface GTLRPeopleService_BatchCreateContactsRequest : GTLRObject

/**
 *  Required. The contact to create. Allows up to 200 contacts in a single
 *  request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ContactToCreate *> *contacts;

/**
 *  Required. A field mask to restrict which fields on each person are returned
 *  in the response. Multiple fields can be specified by separating them with
 *  commas. If read mask is left empty, the post-mutate-get is skipped and no
 *  data will be returned in the response. Valid values are: * addresses *
 *  ageRanges * biographies * birthdays * calendarUrls * clientData *
 *  coverPhotos * emailAddresses * events * externalIds * genders * imClients *
 *  interests * locales * locations * memberships * metadata * miscKeywords *
 *  names * nicknames * occupations * organizations * phoneNumbers * photos *
 *  relations * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Optional. A mask of what source types to return in the post mutate read.
 *  Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not
 *  set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

@end


/**
 *  If not successful, returns BatchCreateContactsErrorDetails which contains a
 *  list of errors for each invalid contact. The response to a request to create
 *  a batch of contacts.
 */
@interface GTLRPeopleService_BatchCreateContactsResponse : GTLRObject

/**
 *  The contacts that were created, unless the request `read_mask` is empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_PersonResponse *> *createdPeople;

@end


/**
 *  A request to delete a batch of existing contacts.
 */
@interface GTLRPeopleService_BatchDeleteContactsRequest : GTLRObject

/**
 *  Required. The resource names of the contact to delete. It's repeatable.
 *  Allows up to 500 resource names in a single request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

@end


/**
 *  The response to a batch get contact groups request.
 */
@interface GTLRPeopleService_BatchGetContactGroupsResponse : GTLRObject

/** The list of responses for each requested contact group resource. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ContactGroupResponse *> *responses;

@end


/**
 *  A request to update a batch of contacts.
 */
@interface GTLRPeopleService_BatchUpdateContactsRequest : GTLRObject

/**
 *  Required. A map of resource names to the person data to be updated. Allows
 *  up to 200 contacts in a single request.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_BatchUpdateContactsRequest_Contacts *contacts;

/**
 *  Required. A field mask to restrict which fields on each person are returned.
 *  Multiple fields can be specified by separating them with commas. If read
 *  mask is left empty, the post-mutate-get is skipped and no data will be
 *  returned in the response. Valid values are: * addresses * ageRanges *
 *  biographies * birthdays * calendarUrls * clientData * coverPhotos *
 *  emailAddresses * events * externalIds * genders * imClients * interests *
 *  locales * locations * memberships * metadata * miscKeywords * names *
 *  nicknames * occupations * organizations * phoneNumbers * photos * relations
 *  * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

/**
 *  Required. A field mask to restrict which fields on the person are updated.
 *  Multiple fields can be specified by separating them with commas. All
 *  specified fields will be replaced, or cleared if left empty for each person.
 *  Valid values are: * addresses * biographies * birthdays * calendarUrls *
 *  clientData * emailAddresses * events * externalIds * genders * imClients *
 *  interests * locales * locations * memberships * miscKeywords * names *
 *  nicknames * occupations * organizations * phoneNumbers * relations *
 *  sipAddresses * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Required. A map of resource names to the person data to be updated. Allows
 *  up to 200 contacts in a single request.
 *
 *  @note This class is documented as having more properties of
 *        GTLRPeopleService_Person. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRPeopleService_BatchUpdateContactsRequest_Contacts : GTLRObject
@end


/**
 *  If not successful, returns BatchUpdateContactsErrorDetails, a list of errors
 *  corresponding to each contact. The response to a request to update a batch
 *  of contacts.
 */
@interface GTLRPeopleService_BatchUpdateContactsResponse : GTLRObject

/**
 *  A map of resource names to the contacts that were updated, unless the
 *  request `read_mask` is empty.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_BatchUpdateContactsResponse_UpdateResult *updateResult;

@end


/**
 *  A map of resource names to the contacts that were updated, unless the
 *  request `read_mask` is empty.
 *
 *  @note This class is documented as having more properties of
 *        GTLRPeopleService_PersonResponse. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRPeopleService_BatchUpdateContactsResponse_UpdateResult : GTLRObject
@end


/**
 *  A person's short biography.
 */
@interface GTLRPeopleService_Biography : GTLRObject

/**
 *  The content type of the biography.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Biography_ContentType_ContentTypeUnspecified
 *        Unspecified. (Value: "CONTENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_Biography_ContentType_TextHtml HTML text.
 *        (Value: "TEXT_HTML")
 *    @arg @c kGTLRPeopleService_Biography_ContentType_TextPlain Plain text.
 *        (Value: "TEXT_PLAIN")
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/** Metadata about the biography. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The short biography. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's birthday. At least one of the `date` and `text` fields are
 *  specified. The `date` and `text` fields typically represent the same date,
 *  but are not guaranteed to. Clients should always set the `date` field when
 *  mutating birthdays.
 */
@interface GTLRPeopleService_Birthday : GTLRObject

/** The structured date of the birthday. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *date;

/** Metadata about the birthday. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  Prefer to use the `date` field if set. A free-form string representing the
 *  user's birthday. This value is not validated.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  **DEPRECATED**: No data will be returned A person's bragging rights.
 */
@interface GTLRPeopleService_BraggingRights : GTLRObject

/** Metadata about the bragging rights. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The bragging rights; for example, `climbed mount everest`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's calendar URL.
 */
@interface GTLRPeopleService_CalendarUrl : GTLRObject

/**
 *  Output only. The type of the calendar URL translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the calendar URL. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the calendar URL. The type can be custom or one of these
 *  predefined values: * `home` * `freeBusy` * `work`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The calendar URL. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Arbitrary client data that is populated by clients. Duplicate keys and
 *  values are allowed.
 */
@interface GTLRPeopleService_ClientData : GTLRObject

/** The client specified key of the client data. */
@property(nonatomic, copy, nullable) NSString *key;

/** Metadata about the client data. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The client specified value of the client data. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A contact group.
 */
@interface GTLRPeopleService_ContactGroup : GTLRObject

/** The group's client data. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_GroupClientData *> *clientData;

/**
 *  The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
 *  resource. Used for web cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. The name translated and formatted in the viewer's account
 *  locale or the `Accept-Language` HTTP header locale for system groups names.
 *  Group names set by the owner are the same as name.
 */
@property(nonatomic, copy, nullable) NSString *formattedName;

/**
 *  Output only. The contact group type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_GroupTypeUnspecified
 *        Unspecified. (Value: "GROUP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_SystemContactGroup
 *        System defined contact group. (Value: "SYSTEM_CONTACT_GROUP")
 *    @arg @c kGTLRPeopleService_ContactGroup_GroupType_UserContactGroup User
 *        defined contact group. (Value: "USER_CONTACT_GROUP")
 */
@property(nonatomic, copy, nullable) NSString *groupType;

/**
 *  Output only. The total number of contacts in the group irrespective of max
 *  members in specified in the request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberCount;

/**
 *  Output only. The list of contact person resource names that are members of
 *  the contact group. The field is only populated for GET requests and will
 *  only return as many members as `maxMembers` in the get request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *memberResourceNames;

/** Output only. Metadata about the contact group. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroupMetadata *metadata;

/**
 *  The contact group name set by the group owner or a system provided name for
 *  system groups. For
 *  [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or
 *  [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name
 *  must be unique to the users contact groups. Attempting to create a group
 *  with a duplicate name will return a HTTP 409 error.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The resource name for the contact group, assigned by the server. An ASCII
 *  string, in the form of `contactGroups/{contact_group_id}`.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A Google contact group membership.
 */
@interface GTLRPeopleService_ContactGroupMembership : GTLRObject

/** Output only. The contact group ID for the contact group membership. */
@property(nonatomic, copy, nullable) NSString *contactGroupId;

/**
 *  The resource name for the contact group, assigned by the server. An ASCII
 *  string, in the form of `contactGroups/{contact_group_id}`. Only
 *  contact_group_resource_name can be used for modifying memberships. Any
 *  contact group membership can be removed, but only user group or "myContacts"
 *  or "starred" system groups memberships can be added. A contact must always
 *  have at least one contact group membership.
 */
@property(nonatomic, copy, nullable) NSString *contactGroupResourceName;

@end


/**
 *  The metadata about a contact group.
 */
@interface GTLRPeopleService_ContactGroupMetadata : GTLRObject

/**
 *  Output only. True if the contact group resource has been deleted. Populated
 *  only for [`ListContactGroups`](/people/api/rest/v1/contactgroups/list)
 *  requests that include a sync token.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Output only. The time the group was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The response for a specific contact group.
 */
@interface GTLRPeopleService_ContactGroupResponse : GTLRObject

/** The contact group. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

/** The original requested resource name. */
@property(nonatomic, copy, nullable) NSString *requestedResourceName;

/** The status of the response. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Status *status;

@end


/**
 *  A wrapper that contains the person data to populate a newly created source.
 */
@interface GTLRPeopleService_ContactToCreate : GTLRObject

/** Required. The person data to populate a newly created source. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *contactPerson;

@end


/**
 *  A request to copy an "Other contact" to my contacts group.
 */
@interface GTLRPeopleService_CopyOtherContactToMyContactsGroupRequest : GTLRObject

/**
 *  Required. A field mask to restrict which fields are copied into the new
 *  contact. Valid values are: * emailAddresses * names * phoneNumbers
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *copyMask NS_RETURNS_NOT_RETAINED;

/**
 *  Optional. A field mask to restrict which fields on the person are returned.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  the copy mask with metadata and membership fields if not set. Valid values
 *  are: * addresses * ageRanges * biographies * birthdays * calendarUrls *
 *  clientData * coverPhotos * emailAddresses * events * externalIds * genders *
 *  imClients * interests * locales * locations * memberships * metadata *
 *  miscKeywords * names * nicknames * occupations * organizations *
 *  phoneNumbers * photos * relations * sipAddresses * skills * urls *
 *  userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readMask;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

@end


/**
 *  A person's cover photo. A large image shown on the person's profile page
 *  that represents who they are or what they care about.
 */
@interface GTLRPeopleService_CoverPhoto : GTLRObject

/**
 *  True if the cover photo is the default cover photo; false if the cover photo
 *  is a user-provided cover photo.
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultProperty;

/** Metadata about the cover photo. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The URL of the cover photo. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A request to create a new contact group.
 */
@interface GTLRPeopleService_CreateContactGroupRequest : GTLRObject

/** Required. The contact group to create. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

/**
 *  Optional. A field mask to restrict which fields on the group are returned.
 *  Defaults to `metadata`, `groupType`, and `name` if not set or set to empty.
 *  Valid fields are: * clientData * groupType * metadata * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readGroupFields;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRPeopleService_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  The response for deleting a contact's photo.
 */
@interface GTLRPeopleService_DeleteContactPhotoResponse : GTLRObject

/**
 *  The updated person, if person_fields is set in the
 *  DeleteContactPhotoRequest; otherwise this will be unset.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *person;

@end


/**
 *  A Google Workspace Domain membership.
 */
@interface GTLRPeopleService_DomainMembership : GTLRObject

/**
 *  True if the person is in the viewer's Google Workspace domain.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inViewerDomain;

@end


/**
 *  A person's email address.
 */
@interface GTLRPeopleService_EmailAddress : GTLRObject

/** The display name of the email. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The type of the email address translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the email address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the email address. The type can be custom or one of these
 *  predefined values: * `home` * `work` * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The email address. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRPeopleService_Empty : GTLRObject
@end


/**
 *  An event related to the person.
 */
@interface GTLRPeopleService_Event : GTLRObject

/** The date of the event. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *date;

/**
 *  Output only. The type of the event translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the event. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the event. The type can be custom or one of these predefined
 *  values: * `anniversary` * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  An identifier from an external entity related to the person.
 */
@interface GTLRPeopleService_ExternalId : GTLRObject

/**
 *  Output only. The type of the event translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the external ID. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the external ID. The type can be custom or one of these
 *  predefined values: * `account` * `customer` * `loginId` * `network` *
 *  `organization`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The value of the external ID. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Metadata about a field.
 */
@interface GTLRPeopleService_FieldMetadata : GTLRObject

/**
 *  Output only. True if the field is the primary field for all sources in the
 *  person. Each person will have at most one field with `primary` set to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/** The source of the field. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Source *source;

/**
 *  True if the field is the primary field for the source. Each source must have
 *  at most one field with `source_primary` set to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourcePrimary;

/**
 *  Output only. True if the field is verified; false if the field is
 *  unverified. A verified field is typically a name, email address, phone
 *  number, or website that has been confirmed to be owned by the person.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verified;

@end


/**
 *  The name that should be used to sort the person in a list.
 */
@interface GTLRPeopleService_FileAs : GTLRObject

/** Metadata about the file-as. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The file-as value */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's gender.
 */
@interface GTLRPeopleService_Gender : GTLRObject

/**
 *  Free form text field for pronouns that should be used to address the person.
 *  Common values are: * `he`/`him` * `she`/`her` * `they`/`them`
 */
@property(nonatomic, copy, nullable) NSString *addressMeAs;

/**
 *  Output only. The value of the gender translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 *  Unspecified or custom value are not localized.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the gender. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The gender for the person. The gender can be custom or one of these
 *  predefined values: * `male` * `female` * `unspecified`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The response to a get request for a list of people by resource name.
 */
@interface GTLRPeopleService_GetPeopleResponse : GTLRObject

/** The response for each requested resource name. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_PersonResponse *> *responses;

@end


/**
 *  Arbitrary client data that is populated by clients. Duplicate keys and
 *  values are allowed.
 */
@interface GTLRPeopleService_GroupClientData : GTLRObject

/** The client specified key of the client data. */
@property(nonatomic, copy, nullable) NSString *key;

/** The client specified value of the client data. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's instant messaging client.
 */
@interface GTLRPeopleService_ImClient : GTLRObject

/**
 *  Output only. The protocol of the IM client formatted in the viewer's account
 *  locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedProtocol;

/**
 *  Output only. The type of the IM client translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the IM client. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The protocol of the IM client. The protocol can be custom or one of these
 *  predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk`
 *  * `icq` * `jabber` * `netMeeting`
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  The type of the IM client. The type can be custom or one of these predefined
 *  values: * `home` * `work` * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user name used in the IM client. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  One of the person's interests.
 */
@interface GTLRPeopleService_Interest : GTLRObject

/** Metadata about the interest. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The interest; for example, `stargazing`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The response to a request for the authenticated user's connections.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connections" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListConnectionsResponse : GTLRCollectionObject

/**
 *  The list of people that the requestor is connected to.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Person *> *connections;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A token, which can be sent as `sync_token` to retrieve changes since the
 *  last request. Request must set `request_sync_token` to return the sync
 *  token. When the response is paginated, only the last page will contain
 *  `nextSyncToken`.
 */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The total number of items in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

/**
 *  **DEPRECATED** (Please use totalItems) The total number of people in the
 *  list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalPeople;

@end


/**
 *  The response to a list contact groups request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "contactGroups" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListContactGroupsResponse : GTLRCollectionObject

/**
 *  The list of contact groups. Members of the contact groups are not populated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ContactGroup *> *contactGroups;

/** The token that can be used to retrieve the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The token that can be used to retrieve changes since the last request. */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The total number of items in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  The response to a request for the authenticated user's domain directory.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "people" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListDirectoryPeopleResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A token, which can be sent as `sync_token` to retrieve changes since the
 *  last request. Request must set `request_sync_token` to return the sync
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The list of people in the domain directory.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Person *> *people;

@end


/**
 *  The response to a request for the authenticated user's "Other contacts".
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "otherContacts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_ListOtherContactsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A token, which can be sent as `sync_token` to retrieve changes since the
 *  last request. Request must set `request_sync_token` to return the sync
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *nextSyncToken;

/**
 *  The list of "Other contacts" returned as Person resources. "Other contacts"
 *  support a limited subset of fields. See
 *  ListOtherContactsRequest.request_mask for more detailed information.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Person *> *otherContacts;

/**
 *  The total number of other contacts in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  A person's locale preference.
 */
@interface GTLRPeopleService_Locale : GTLRObject

/** Metadata about the locale. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language
 *  tag representing the locale.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's location.
 */
@interface GTLRPeopleService_Location : GTLRObject

/** The building identifier. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  Whether the location is the current location.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/** The individual desk location. */
@property(nonatomic, copy, nullable) NSString *deskCode;

/** The floor name or number. */
@property(nonatomic, copy, nullable) NSString *floor;

/** The floor section in `floor_name`. */
@property(nonatomic, copy, nullable) NSString *floorSection;

/** Metadata about the location. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the location. The type can be custom or one of these predefined
 *  values: * `desk` * `grewUp`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The free-form value of the location. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's membership in a group. Only contact group memberships can be
 *  modified.
 */
@interface GTLRPeopleService_Membership : GTLRObject

/** The contact group membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroupMembership *contactGroupMembership;

/** Output only. The domain membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_DomainMembership *domainMembership;

/** Metadata about the membership. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

@end


/**
 *  A person's miscellaneous keyword.
 */
@interface GTLRPeopleService_MiscKeyword : GTLRObject

/**
 *  Output only. The type of the miscellaneous keyword translated and formatted
 *  in the viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the miscellaneous keyword. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The miscellaneous keyword type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_Home Home. (Value: "HOME")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_Other Other. (Value: "OTHER")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookBillingInformation
 *        Outlook field for billing information. (Value:
 *        "OUTLOOK_BILLING_INFORMATION")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookDirectoryServer Outlook
 *        field for directory server. (Value: "OUTLOOK_DIRECTORY_SERVER")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookKeyword Outlook field
 *        for keyword. (Value: "OUTLOOK_KEYWORD")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookMileage Outlook field
 *        for mileage. (Value: "OUTLOOK_MILEAGE")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookPriority Outlook field
 *        for priority. (Value: "OUTLOOK_PRIORITY")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookSensitivity Outlook
 *        field for sensitivity. (Value: "OUTLOOK_SENSITIVITY")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookSubject Outlook field
 *        for subject. (Value: "OUTLOOK_SUBJECT")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_OutlookUser Outlook field for
 *        user. (Value: "OUTLOOK_USER")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_TypeUnspecified Unspecified.
 *        (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_MiscKeyword_Type_Work Work. (Value: "WORK")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The value of the miscellaneous keyword. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A request to modify an existing contact group's members. Contacts can be
 *  removed from any group but they can only be added to a user group or
 *  "myContacts" or "starred" system groups.
 */
@interface GTLRPeopleService_ModifyContactGroupMembersRequest : GTLRObject

/**
 *  Optional. The resource names of the contact people to add in the form of
 *  `people/{person_id}`. The total number of resource names in
 *  `resource_names_to_add` and `resource_names_to_remove` must be less than or
 *  equal to 1000.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNamesToAdd;

/**
 *  Optional. The resource names of the contact people to remove in the form of
 *  `people/{person_id}`. The total number of resource names in
 *  `resource_names_to_add` and `resource_names_to_remove` must be less than or
 *  equal to 1000.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNamesToRemove;

@end


/**
 *  The response to a modify contact group members request.
 */
@interface GTLRPeopleService_ModifyContactGroupMembersResponse : GTLRObject

/**
 *  The contact people resource names that cannot be removed from their last
 *  contact group.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *canNotRemoveLastContactGroupResourceNames;

/** The contact people resource names that were not found. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *notFoundResourceNames;

@end


/**
 *  A person's name. If the name is a mononym, the family name is empty.
 */
@interface GTLRPeopleService_Name : GTLRObject

/**
 *  Output only. The display name formatted according to the locale specified by
 *  the viewer's account or the `Accept-Language` HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The display name with the last name first formatted according
 *  to the locale specified by the viewer's account or the `Accept-Language`
 *  HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayNameLastFirst;

/** The family name. */
@property(nonatomic, copy, nullable) NSString *familyName;

/** The given name. */
@property(nonatomic, copy, nullable) NSString *givenName;

/** The honorific prefixes, such as `Mrs.` or `Dr.` */
@property(nonatomic, copy, nullable) NSString *honorificPrefix;

/** The honorific suffixes, such as `Jr.` */
@property(nonatomic, copy, nullable) NSString *honorificSuffix;

/** Metadata about the name. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The middle name(s). */
@property(nonatomic, copy, nullable) NSString *middleName;

/** The family name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticFamilyName;

/** The full name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticFullName;

/** The given name spelled as it sounds. */
@property(nonatomic, copy, nullable) NSString *phoneticGivenName;

/** The honorific prefixes spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticHonorificPrefix;

/** The honorific suffixes spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticHonorificSuffix;

/** The middle name(s) spelled as they sound. */
@property(nonatomic, copy, nullable) NSString *phoneticMiddleName;

/** The free form name value. */
@property(nonatomic, copy, nullable) NSString *unstructuredName;

@end


/**
 *  A person's nickname.
 */
@interface GTLRPeopleService_Nickname : GTLRObject

/** Metadata about the nickname. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the nickname.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Nickname_Type_AlternateName Alternate name
 *        person is known by. (Value: "ALTERNATE_NAME")
 *    @arg @c kGTLRPeopleService_Nickname_Type_Default Generic nickname. (Value:
 *        "DEFAULT")
 *    @arg @c kGTLRPeopleService_Nickname_Type_Gplus Google+ profile nickname.
 *        (Value: "GPLUS")
 *    @arg @c kGTLRPeopleService_Nickname_Type_Initials Initials. (Value:
 *        "INITIALS")
 *    @arg @c kGTLRPeopleService_Nickname_Type_MaidenName Maiden name or birth
 *        family name. Used when the person's family name has changed as a
 *        result of marriage. (Value: "MAIDEN_NAME")
 *    @arg @c kGTLRPeopleService_Nickname_Type_OtherName A professional
 *        affiliation or other name; for example, `Dr. Smith.` (Value:
 *        "OTHER_NAME")
 *    @arg @c kGTLRPeopleService_Nickname_Type_ShortName A shorter version of
 *        the person's name. (Value: "SHORT_NAME")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The nickname. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's occupation.
 */
@interface GTLRPeopleService_Occupation : GTLRObject

/** Metadata about the occupation. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The occupation; for example, `carpenter`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's past or current organization. Overlapping date ranges are
 *  permitted.
 */
@interface GTLRPeopleService_Organization : GTLRObject

/** The person's cost center at the organization. */
@property(nonatomic, copy, nullable) NSString *costCenter;

/**
 *  True if the organization is the person's current organization; false if the
 *  organization is a past organization.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/** The person's department at the organization. */
@property(nonatomic, copy, nullable) NSString *department;

/**
 *  The domain name associated with the organization; for example, `google.com`.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/** The end date when the person left the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *endDate;

/**
 *  Output only. The type of the organization translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/**
 *  The person's full-time equivalent millipercent within the organization
 *  (100000 = 100%).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullTimeEquivalentMillipercent;

/** The person's job description at the organization. */
@property(nonatomic, copy, nullable) NSString *jobDescription;

/** The location of the organization office the person works at. */
@property(nonatomic, copy, nullable) NSString *location;

/** Metadata about the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The name of the organization. */
@property(nonatomic, copy, nullable) NSString *name;

/** The phonetic name of the organization. */
@property(nonatomic, copy, nullable) NSString *phoneticName;

/** The start date when the person joined the organization. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Date *startDate;

/**
 *  The symbol associated with the organization; for example, a stock ticker
 *  symbol, abbreviation, or acronym.
 */
@property(nonatomic, copy, nullable) NSString *symbol;

/** The person's job title at the organization. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of the organization. The type can be custom or one of these
 *  predefined values: * `work` * `school`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about a person merged from various data sources such as the
 *  authenticated user's contacts and profile data. Most fields can have
 *  multiple items. The items in a field have no guaranteed order, but each
 *  non-empty field is guaranteed to have exactly one field with
 *  `metadata.primary` set to true.
 */
@interface GTLRPeopleService_Person : GTLRObject

/** The person's street addresses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Address *> *addresses;

/**
 *  Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The
 *  person's age range.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Person_AgeRange_AgeRangeUnspecified
 *        Unspecified. (Value: "AGE_RANGE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_EighteenToTwenty Between
 *        eighteen and twenty. (Value: "EIGHTEEN_TO_TWENTY")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_LessThanEighteen Younger than
 *        eighteen. (Value: "LESS_THAN_EIGHTEEN")
 *    @arg @c kGTLRPeopleService_Person_AgeRange_TwentyOneOrOlder Twenty-one and
 *        older. (Value: "TWENTY_ONE_OR_OLDER")
 */
@property(nonatomic, copy, nullable) NSString *ageRange;

/** Output only. The person's age ranges. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_AgeRangeType *> *ageRanges;

/**
 *  The person's biographies. This field is a singleton for contact sources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Biography *> *biographies;

/** The person's birthdays. This field is a singleton for contact sources. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Birthday *> *birthdays;

/** **DEPRECATED**: No data will be returned The person's bragging rights. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_BraggingRights *> *braggingRights;

/** The person's calendar URLs. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_CalendarUrl *> *calendarUrls;

/** The person's client data. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ClientData *> *clientData;

/** Output only. The person's cover photos. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_CoverPhoto *> *coverPhotos;

/**
 *  The person's email addresses. For `people.connections.list` and
 *  `otherContacts.list` the number of email addresses is limited to 100. If a
 *  Person has more email addresses the entire set can be obtained by calling
 *  GetPeople.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_EmailAddress *> *emailAddresses;

/**
 *  The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the
 *  resource. Used for web cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The person's events. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Event *> *events;

/** The person's external IDs. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ExternalId *> *externalIds;

/** The person's file-ases. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_FileAs *> *fileAses;

/** The person's genders. This field is a singleton for contact sources. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Gender *> *genders;

/** The person's instant messaging clients. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_ImClient *> *imClients;

/** The person's interests. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Interest *> *interests;

/** The person's locale preferences. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Locale *> *locales;

/** The person's locations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Location *> *locations;

/** The person's group memberships. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Membership *> *memberships;

/** Output only. Metadata about the person. */
@property(nonatomic, strong, nullable) GTLRPeopleService_PersonMetadata *metadata;

/** The person's miscellaneous keywords. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_MiscKeyword *> *miscKeywords;

/** The person's names. This field is a singleton for contact sources. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Name *> *names;

/** The person's nicknames. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Nickname *> *nicknames;

/** The person's occupations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Occupation *> *occupations;

/** The person's past or current organizations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Organization *> *organizations;

/**
 *  The person's phone numbers. For `people.connections.list` and
 *  `otherContacts.list` the number of phone numbers is limited to 100. If a
 *  Person has more phone numbers the entire set can be obtained by calling
 *  GetPeople.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_PhoneNumber *> *phoneNumbers;

/** Output only. The person's photos. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Photo *> *photos;

/** The person's relations. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Relation *> *relations;

/**
 *  Output only. **DEPRECATED**: No data will be returned The person's
 *  relationship interests.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_RelationshipInterest *> *relationshipInterests;

/**
 *  Output only. **DEPRECATED**: No data will be returned The person's
 *  relationship statuses.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_RelationshipStatus *> *relationshipStatuses;

/**
 *  **DEPRECATED**: (Please use `person.locations` instead) The person's
 *  residences.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Residence *> *residences;

/**
 *  The resource name for the person, assigned by the server. An ASCII string
 *  with a max length of 27 characters, in the form of `people/{person_id}`.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** The person's SIP addresses. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_SipAddress *> *sipAddresses;

/** The person's skills. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Skill *> *skills;

/**
 *  Output only. **DEPRECATED**: No data will be returned The person's taglines.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Tagline *> *taglines;

/** The person's associated URLs. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Url *> *urls;

/** The person's user defined data. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_UserDefined *> *userDefined;

@end


/**
 *  The metadata about a person.
 */
@interface GTLRPeopleService_PersonMetadata : GTLRObject

/**
 *  Output only. True if the person resource has been deleted. Populated only
 *  for `people.connections.list` and `otherContacts.list` sync requests.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Output only. Resource names of people linked to this resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedPeopleResourceNames;

/**
 *  Output only. **DEPRECATED** (Please use
 *  `person.metadata.sources.profileMetadata.objectType` instead) The type of
 *  the person object.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_ObjectTypeUnspecified
 *        Unspecified. (Value: "OBJECT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_Page [Currents
 *        Page.](https://workspace.google.com/products/currents/) (Value:
 *        "PAGE")
 *    @arg @c kGTLRPeopleService_PersonMetadata_ObjectType_Person Person.
 *        (Value: "PERSON")
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  Output only. Any former resource names this person has had. Populated only
 *  for `people.connections.list` requests that include a sync token. The
 *  resource name may change when adding or removing fields that link a contact
 *  and profile such as a verified email, verified phone number, or profile URL.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *previousResourceNames;

/** The sources of data for the person. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Source *> *sources;

@end


/**
 *  The response for a single person
 */
@interface GTLRPeopleService_PersonResponse : GTLRObject

/**
 *  **DEPRECATED** (Please use status instead) [HTTP 1.1 status code]
 *  (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatusCode;

/** The person. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *person;

/**
 *  The original requested resource name. May be different than the resource
 *  name on the returned person. The resource name can change when adding or
 *  removing fields that link a contact and profile such as a verified email,
 *  verified phone number, or a profile URL.
 */
@property(nonatomic, copy, nullable) NSString *requestedResourceName;

/** The status of the response. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Status *status;

@end


/**
 *  A person's phone number.
 */
@interface GTLRPeopleService_PhoneNumber : GTLRObject

/**
 *  Output only. The canonicalized [ITU-T
 *  E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)
 *  form of the phone number.
 */
@property(nonatomic, copy, nullable) NSString *canonicalForm;

/**
 *  Output only. The type of the phone number translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the phone number. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the phone number. The type can be custom or one of these
 *  predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` *
 *  `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` *
 *  `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The phone number. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A person's photo. A picture shown next to the person's name to help others
 *  recognize the person.
 */
@interface GTLRPeopleService_Photo : GTLRObject

/**
 *  True if the photo is a default photo; false if the photo is a user-provided
 *  photo.
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultProperty;

/** Metadata about the photo. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The URL of the photo. You can change the desired size by appending a query
 *  parameter `sz={size}` at the end of the url, where {size} is the size in
 *  pixels. Example:
 *  https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  The metadata about a profile.
 */
@interface GTLRPeopleService_ProfileMetadata : GTLRObject

/**
 *  Output only. The profile object type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_ObjectTypeUnspecified
 *        Unspecified. (Value: "OBJECT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_Page [Currents
 *        Page.](https://workspace.google.com/products/currents/) (Value:
 *        "PAGE")
 *    @arg @c kGTLRPeopleService_ProfileMetadata_ObjectType_Person Person.
 *        (Value: "PERSON")
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Output only. The user types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userTypes;

@end


/**
 *  A person's relation to another person.
 */
@interface GTLRPeopleService_Relation : GTLRObject

/**
 *  Output only. The type of the relation translated and formatted in the
 *  viewer's account locale or the locale specified in the Accept-Language HTTP
 *  header.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the relation. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The name of the other person this relation refers to. */
@property(nonatomic, copy, nullable) NSString *person;

/**
 *  The person's relation to the other person. The type can be custom or one of
 *  these predefined values: * `spouse` * `child` * `mother` * `father` *
 *  `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner`
 *  * `manager` * `assistant` * `referredBy` * `partner`
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  **DEPRECATED**: No data will be returned A person's relationship interest .
 */
@interface GTLRPeopleService_RelationshipInterest : GTLRObject

/**
 *  Output only. The value of the relationship interest translated and formatted
 *  in the viewer's account locale or the locale specified in the
 *  Accept-Language HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the relationship interest. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The kind of relationship the person is looking for. The value can be custom
 *  or one of these predefined values: * `friend` * `date` * `relationship` *
 *  `networking`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  **DEPRECATED**: No data will be returned A person's relationship status.
 */
@interface GTLRPeopleService_RelationshipStatus : GTLRObject

/**
 *  Output only. The value of the relationship status translated and formatted
 *  in the viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedValue;

/** Metadata about the relationship status. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The relationship status. The value can be custom or one of these predefined
 *  values: * `single` * `inARelationship` * `engaged` * `married` *
 *  `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership`
 *  * `inCivilUnion`
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  **DEPRECATED**: Please use `person.locations` instead. A person's past or
 *  current residence.
 */
@interface GTLRPeopleService_Residence : GTLRObject

/**
 *  True if the residence is the person's current residence; false if the
 *  residence is a past residence.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *current;

/** Metadata about the residence. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The address of the residence. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The response to a request for people in the authenticated user's domain
 *  directory that match the specified query.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "people" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPeopleService_SearchDirectoryPeopleResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of people in the domain directory that match the query.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Person *> *people;

/**
 *  The total number of items in the list without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  The response to a search request for the authenticated user, given a query.
 */
@interface GTLRPeopleService_SearchResponse : GTLRObject

/** The results of the request. */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_SearchResult *> *results;

@end


/**
 *  A result of a search query.
 */
@interface GTLRPeopleService_SearchResult : GTLRObject

/** The matched Person. */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *person;

@end


/**
 *  A person's SIP address. Session Initial Protocol addresses are used for VoIP
 *  communications to make voice or video calls over the internet.
 */
@interface GTLRPeopleService_SipAddress : GTLRObject

/**
 *  Output only. The type of the SIP address translated and formatted in the
 *  viewer's account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the SIP address. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the SIP address. The type can be custom or or one of these
 *  predefined values: * `home` * `work` * `mobile` * `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The SIP address in the [RFC 3261
 *  19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A skill that the person has.
 */
@interface GTLRPeopleService_Skill : GTLRObject

/** Metadata about the skill. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The skill; for example, `underwater basket weaving`. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The source of a field.
 */
@interface GTLRPeopleService_Source : GTLRObject

/**
 *  **Only populated in `person.metadata.sources`.** The [HTTP entity
 *  tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web
 *  cache validation.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique identifier within the source type generated by the server.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. **Only populated in `person.metadata.sources`.** Metadata about
 *  a source of type PROFILE.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_ProfileMetadata *profileMetadata;

/**
 *  The source type.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleService_Source_Type_Account [Google
 *        Account](https://accounts.google.com). (Value: "ACCOUNT")
 *    @arg @c kGTLRPeopleService_Source_Type_Contact [Google
 *        contact](https://contacts.google.com). You can view the contact at
 *        [https://contact.google.com/](https://contact.google.com/){id}, where
 *        {id} is the source id. (Value: "CONTACT")
 *    @arg @c kGTLRPeopleService_Source_Type_DomainContact [Google Workspace
 *        domain shared contact](https://support.google.com/a/answer/9281635).
 *        (Value: "DOMAIN_CONTACT")
 *    @arg @c kGTLRPeopleService_Source_Type_DomainProfile [Google Workspace
 *        domain profile](https://support.google.com/a/answer/1628008). (Value:
 *        "DOMAIN_PROFILE")
 *    @arg @c kGTLRPeopleService_Source_Type_OtherContact [Google "Other
 *        contact"](https://contacts.google.com/other). (Value: "OTHER_CONTACT")
 *    @arg @c kGTLRPeopleService_Source_Type_Profile [Google
 *        profile](https://profiles.google.com). You can view the profile at
 *        [https://profiles.google.com/](https://profiles.google.com/){id},
 *        where {id} is the source id. (Value: "PROFILE")
 *    @arg @c kGTLRPeopleService_Source_Type_SourceTypeUnspecified Unspecified.
 *        (Value: "SOURCE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Output only. **Only populated in `person.metadata.sources`.** Last update
 *  timestamp of this source.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRPeopleService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPeopleService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRPeopleService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRPeopleService_Status_Details_Item : GTLRObject
@end


/**
 *  **DEPRECATED**: No data will be returned A brief one-line description of the
 *  person.
 */
@interface GTLRPeopleService_Tagline : GTLRObject

/** Metadata about the tagline. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The tagline. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A request to update an existing user contact group. All updated fields will
 *  be replaced.
 */
@interface GTLRPeopleService_UpdateContactGroupRequest : GTLRObject

/** Required. The contact group to update. */
@property(nonatomic, strong, nullable) GTLRPeopleService_ContactGroup *contactGroup;

/**
 *  Optional. A field mask to restrict which fields on the group are returned.
 *  Defaults to `metadata`, `groupType`, and `name` if not set or set to empty.
 *  Valid fields are: * clientData * groupType * memberCount * metadata * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *readGroupFields;

/**
 *  Optional. A field mask to restrict which fields on the group are updated.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  `name` if not set or set to empty. Updated fields are replaced. Valid values
 *  are: * clientData * name
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateGroupFields;

@end


/**
 *  A request to update an existing contact's photo. All requests must have a
 *  valid photo format: JPEG or PNG.
 */
@interface GTLRPeopleService_UpdateContactPhotoRequest : GTLRObject

/**
 *  Optional. A field mask to restrict which fields on the person are returned.
 *  Multiple fields can be specified by separating them with commas. Defaults to
 *  empty if not set, which will skip the post mutate get. Valid values are: *
 *  addresses * ageRanges * biographies * birthdays * calendarUrls * clientData
 *  * coverPhotos * emailAddresses * events * externalIds * genders * imClients
 *  * interests * locales * locations * memberships * metadata * miscKeywords *
 *  names * nicknames * occupations * organizations * phoneNumbers * photos *
 *  relations * sipAddresses * skills * urls * userDefined
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *personFields;

/**
 *  Required. Raw photo bytes
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *photoBytes;

/**
 *  Optional. A mask of what source types to return. Defaults to
 *  READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sources;

@end


/**
 *  The response for updating a contact's photo.
 */
@interface GTLRPeopleService_UpdateContactPhotoResponse : GTLRObject

/**
 *  The updated person, if person_fields is set in the
 *  UpdateContactPhotoRequest; otherwise this will be unset.
 */
@property(nonatomic, strong, nullable) GTLRPeopleService_Person *person;

@end


/**
 *  A person's associated URLs.
 */
@interface GTLRPeopleService_Url : GTLRObject

/**
 *  Output only. The type of the URL translated and formatted in the viewer's
 *  account locale or the `Accept-Language` HTTP header locale.
 */
@property(nonatomic, copy, nullable) NSString *formattedType;

/** Metadata about the URL. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/**
 *  The type of the URL. The type can be custom or one of these predefined
 *  values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` *
 *  `reservations` * `appInstallPage`: website for a Currents application. *
 *  `other`
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The URL. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Arbitrary user data that is populated by the end users.
 */
@interface GTLRPeopleService_UserDefined : GTLRObject

/** The end user specified key of the user defined data. */
@property(nonatomic, copy, nullable) NSString *key;

/** Metadata about the user defined data. */
@property(nonatomic, strong, nullable) GTLRPeopleService_FieldMetadata *metadata;

/** The end user specified value of the user defined data. */
@property(nonatomic, copy, nullable) NSString *value;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
