// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v2)
// Description:
//   Notebooks API is used to manage notebook resources in Google Cloud.
// Documentation:
//   https://cloud.google.com/notebooks/docs/

#import <GoogleAPIClientForREST/GTLRAIPlatformNotebooksQuery.h>

@implementation GTLRAIPlatformNotebooksQuery

@dynamic fields;

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Location class];
  query.loggingName = @"notebooks.projects.locations.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:getIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.instances.getIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:setIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.instances.setIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:testIamPermissions";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_TestIamPermissionsResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.testIamPermissions";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListLocationsResponse class];
  query.loggingName = @"notebooks.projects.locations.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Empty class];
  query.loggingName = @"notebooks.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Empty class];
  query.loggingName = @"notebooks.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListOperationsResponse class];
  query.loggingName = @"notebooks.projects.locations.operations.list";
  return query;
}

@end
