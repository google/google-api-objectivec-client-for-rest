// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v1)
// Description:
//   Notebooks API is used to manage notebook resources in Google Cloud.
// Documentation:
//   https://cloud.google.com/notebooks/docs/

#import <GoogleAPIClientForREST/GTLRAIPlatformNotebooksQuery.h>

// ----------------------------------------------------------------------------
// Constants

// type
NSString * const kGTLRAIPlatformNotebooksTypeUpgradeAll        = @"UPGRADE_ALL";
NSString * const kGTLRAIPlatformNotebooksTypeUpgradeCuda       = @"UPGRADE_CUDA";
NSString * const kGTLRAIPlatformNotebooksTypeUpgradeFramework  = @"UPGRADE_FRAMEWORK";
NSString * const kGTLRAIPlatformNotebooksTypeUpgradeOs         = @"UPGRADE_OS";
NSString * const kGTLRAIPlatformNotebooksTypeUpgradeTypeUnspecified = @"UPGRADE_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAIPlatformNotebooksQuery

@dynamic fields;

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate

@dynamic environmentId, parent;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Environment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/environments";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.environments.create";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.environments.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Environment class];
  query.loggingName = @"notebooks.projects.locations.environments.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/environments";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListEnvironmentsResponse class];
  query.loggingName = @"notebooks.projects.locations.environments.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsCreate

@dynamic executionId, parent;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Execution *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/executions";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.executions.create";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.executions.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Execution class];
  query.loggingName = @"notebooks.projects.locations.executions.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/executions";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListExecutionsResponse class];
  query.loggingName = @"notebooks.projects.locations.executions.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Location class];
  query.loggingName = @"notebooks.projects.locations.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate

@dynamic instanceId, parent;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Instance *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.create";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_DiagnoseInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:diagnose";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.diagnose";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Instance class];
  query.loggingName = @"notebooks.projects.locations.instances.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.instances.getIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getInstanceHealth";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_GetInstanceHealthResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.getInstanceHealth";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable

@dynamic notebookInstance, type;

+ (instancetype)queryWithNotebookInstance:(NSString *)notebookInstance {
  NSArray *pathParams = @[ @"notebookInstance" ];
  NSString *pathURITemplate = @"v1/{+notebookInstance}:isUpgradeable";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.notebookInstance = notebookInstance;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_IsInstanceUpgradeableResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.isUpgradeable";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListInstancesResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RegisterInstanceRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances:register";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.register";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportInstanceInfoRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:report";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.report";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:reset";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.reset";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RollbackInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rollback";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.rollback";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:setAccelerator";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.setAccelerator";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.instances.setIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceLabelsRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:setLabels";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.setLabels";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:setMachineType";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.setMachineType";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:start";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.start";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:stop";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.stop";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_TestIamPermissionsResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.testIamPermissions";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateConfig

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateInstanceConfigRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:updateConfig";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.updateConfig";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateMetadataItems

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateInstanceMetadataItemsRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:updateMetadataItems";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateMetadataItems *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_UpdateInstanceMetadataItemsResponse class];
  query.loggingName = @"notebooks.projects.locations.instances.updateMetadataItems";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateShieldedInstanceConfig

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateShieldedInstanceConfigRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:updateShieldedInstanceConfig";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateShieldedInstanceConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.updateShieldedInstanceConfig";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:upgrade";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.upgrade";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:upgradeInternal";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.instances.upgradeInternal";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListLocationsResponse class];
  query.loggingName = @"notebooks.projects.locations.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Empty class];
  query.loggingName = @"notebooks.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Empty class];
  query.loggingName = @"notebooks.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListOperationsResponse class];
  query.loggingName = @"notebooks.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesCreate

@dynamic parent, requestId, runtimeId;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Runtime *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runtimes";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.create";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDiagnose

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_DiagnoseRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:diagnose";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDiagnose *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.diagnose";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Runtime class];
  query.loggingName = @"notebooks.projects.locations.runtimes.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.runtimes.getIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runtimes";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListRuntimesResponse class];
  query.loggingName = @"notebooks.projects.locations.runtimes.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Runtime *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.patch";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesRefreshRuntimeTokenInternal

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RefreshRuntimeTokenInternalRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:refreshRuntimeTokenInternal";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesRefreshRuntimeTokenInternal *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_RefreshRuntimeTokenInternalResponse class];
  query.loggingName = @"notebooks.projects.locations.runtimes.refreshRuntimeTokenInternal";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReportEvent

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportRuntimeEventRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:reportEvent";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReportEvent *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.reportEvent";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReset

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:reset";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.reset";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Policy class];
  query.loggingName = @"notebooks.projects.locations.runtimes.setIamPolicy";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStart

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:start";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.start";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:stop";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.stop";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSwitch

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SwitchRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:switch";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSwitch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.switch";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_TestIamPermissionsResponse class];
  query.loggingName = @"notebooks.projects.locations.runtimes.testIamPermissions";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesUpgrade

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeRuntimeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:upgrade";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesUpgrade *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.runtimes.upgrade";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesCreate

@dynamic parent, scheduleId;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Schedule *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schedules";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.schedules.create";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.schedules.delete";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Schedule class];
  query.loggingName = @"notebooks.projects.locations.schedules.get";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/schedules";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_ListSchedulesResponse class];
  query.loggingName = @"notebooks.projects.locations.schedules.list";
  return query;
}

@end

@implementation GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesTrigger

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TriggerScheduleRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:trigger";
  GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesTrigger *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAIPlatformNotebooks_Operation class];
  query.loggingName = @"notebooks.projects.locations.schedules.trigger";
  return query;
}

@end
