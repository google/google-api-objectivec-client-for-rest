// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v2)
// Description:
//   Notebooks API is used to manage notebook resources in Google Cloud.
// Documentation:
//   https://cloud.google.com/notebooks/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRAIPlatformNotebooksObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other AI Platform Notebooks query classes.
 */
@interface GTLRAIPlatformNotebooksQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: notebooks.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet : GTLRAIPlatformNotebooksQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Checks whether a notebook instance is upgradable.
 *
 *  Method: notebooks.projects.locations.instances.checkUpgradability
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCheckUpgradability : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *notebookInstance;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_CheckInstanceUpgradabilityResponse.
 *
 *  Checks whether a notebook instance is upgradable.
 *
 *  @param notebookInstance Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCheckUpgradability
 */
+ (instancetype)queryWithNotebookInstance:(NSString *)notebookInstance;

@end

/**
 *  Creates a new Instance in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate : GTLRAIPlatformNotebooksQuery

/** Required. User-defined unique ID of this instance. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/** Optional. Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Instance in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Instance to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
 *
 *  Method: notebooks.projects.locations.instances.diagnose
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_DiagnoseInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_DiagnoseInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Instance.
 *
 *  Gets details of a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: notebooks.projects.locations.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists instances in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList : GTLRAIPlatformNotebooksQuery

/** Optional. List filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Sort results. Supported values are "name", "name desc" or ""
 *  (unsorted).
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A previous returned page token that can be used to continue
 *  listing from the last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListInstancesResponse.
 *
 *  Lists instances in a given project and location.
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  UpdateInstance updates an Instance.
 *
 *  Method: notebooks.projects.locations.instances.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesPatch : GTLRAIPlatformNotebooksQuery

/**
 *  Output only. The name of this notebook instance. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Mask used to update an instance
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  UpdateInstance updates an Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Instance to include in the
 *    query.
 *  @param name Output only. The name of this notebook instance. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesPatch
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Instance *)object
                           name:(NSString *)name;

@end

/**
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  Method: notebooks.projects.locations.instances.reportInfoSystem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReportInfoSystem : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ReportInstanceInfoSystemRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReportInfoSystem
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportInstanceInfoSystemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resets a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Resets a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ResetInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Rollbacks a notebook instance to the previous version.
 *
 *  Method: notebooks.projects.locations.instances.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Rollbacks a notebook instance to the previous version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_RollbackInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RollbackInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: notebooks.projects.locations.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Starts a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Starts a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StartInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Stops a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StopInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: notebooks.projects.locations.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Upgrades a notebook instance to the latest version.
 *
 *  Method: notebooks.projects.locations.instances.upgrade
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Upgrades a notebook instance to the latest version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Allows notebook instances to upgrade themselves. Do not use this method
 *  directly.
 *
 *  Method: notebooks.projects.locations.instances.upgradeSystem
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeSystem : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to upgrade themselves. Do not use this method
 *  directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceSystemRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeSystem
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceSystemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: notebooks.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsList : GTLRAIPlatformNotebooksQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: notebooks.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: notebooks.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: notebooks.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: notebooks.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList : GTLRAIPlatformNotebooksQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
