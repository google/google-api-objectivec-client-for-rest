// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Notebooks API (notebooks/v1)
// Description:
//   Notebooks API is used to manage notebook resources in Google Cloud.
// Documentation:
//   https://cloud.google.com/notebooks/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRAIPlatformNotebooksObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// type

/**
 *  Upgrade All (OS, Framework and CUDA).
 *
 *  Value: "UPGRADE_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooksTypeUpgradeAll;
/**
 *  Upgrade CUDA.
 *
 *  Value: "UPGRADE_CUDA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooksTypeUpgradeCuda;
/**
 *  Upgrade ML framework.
 *
 *  Value: "UPGRADE_FRAMEWORK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooksTypeUpgradeFramework;
/**
 *  Upgrade Operating System.
 *
 *  Value: "UPGRADE_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooksTypeUpgradeOs;
/**
 *  Upgrade type is not specified.
 *
 *  Value: "UPGRADE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAIPlatformNotebooksTypeUpgradeTypeUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other AI Platform Notebooks query classes.
 */
@interface GTLRAIPlatformNotebooksQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new Environment.
 *
 *  Method: notebooks.projects.locations.environments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate : GTLRAIPlatformNotebooksQuery

/**
 *  Required. User-defined unique ID of this environment. The `environment_id`
 *  must be 1 to 63 characters long and contain only lowercase letters, numeric
 *  characters, and dashes. The first character must be a lowercase letter and
 *  the last character cannot be a dash.
 */
@property(nonatomic, copy, nullable) NSString *environmentId;

/** Required. Format: `projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Environment.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Environment to include in the
 *    query.
 *  @param parent Required. Format: `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Environment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Environment.
 *
 *  Method: notebooks.projects.locations.environments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/environments/{environment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Environment.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/environments/{environment_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Environment.
 *
 *  Method: notebooks.projects.locations.environments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/environments/{environment_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Environment.
 *
 *  Gets details of a single Environment.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/environments/{environment_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists environments in a project.
 *
 *  Method: notebooks.projects.locations.environments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList : GTLRAIPlatformNotebooksQuery

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListEnvironmentsResponse.
 *
 *  Lists environments in a project.
 *
 *  @param parent Required. Format: `projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsEnvironmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new Execution in a given project and location.
 *
 *  Method: notebooks.projects.locations.executions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsCreate : GTLRAIPlatformNotebooksQuery

/** Required. User-defined unique ID of this execution. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Execution in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Execution to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Execution *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes execution
 *
 *  Method: notebooks.projects.locations.executions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/executions/{execution_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes execution
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/executions/{execution_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of executions
 *
 *  Method: notebooks.projects.locations.executions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/executions/{execution_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Execution.
 *
 *  Gets details of executions
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/executions/{execution_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists executions in a given project and location
 *
 *  Method: notebooks.projects.locations.executions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsList : GTLRAIPlatformNotebooksQuery

/**
 *  Filter applied to resulting executions. Currently only supports filtering
 *  executions by a specified schedule_id. Format: `schedule_id=`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Sort by field. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListExecutionsResponse.
 *
 *  Lists executions in a given project and location
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsExecutionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets information about a location.
 *
 *  Method: notebooks.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet : GTLRAIPlatformNotebooksQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Instance in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate : GTLRAIPlatformNotebooksQuery

/** Required. User-defined unique ID of this instance. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Instance in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Instance to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
 *
 *  Method: notebooks.projects.locations.instances.diagnose
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_DiagnoseInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesDiagnose
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_DiagnoseInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Instance.
 *
 *  Gets details of a single Instance.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: notebooks.projects.locations.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Check if a notebook instance is healthy.
 *
 *  Method: notebooks.projects.locations.instances.getInstanceHealth
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_GetInstanceHealthResponse.
 *
 *  Check if a notebook instance is healthy.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesGetInstanceHealth
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Check if a notebook instance is upgradable.
 *
 *  Method: notebooks.projects.locations.instances.isUpgradeable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *notebookInstance;

/**
 *  Optional. The optional UpgradeType. Setting this field will search for
 *  additional compute images to upgrade this instance.
 *
 *  Likely values:
 *    @arg @c kGTLRAIPlatformNotebooksTypeUpgradeTypeUnspecified Upgrade type is
 *        not specified. (Value: "UPGRADE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRAIPlatformNotebooksTypeUpgradeFramework Upgrade ML framework.
 *        (Value: "UPGRADE_FRAMEWORK")
 *    @arg @c kGTLRAIPlatformNotebooksTypeUpgradeOs Upgrade Operating System.
 *        (Value: "UPGRADE_OS")
 *    @arg @c kGTLRAIPlatformNotebooksTypeUpgradeCuda Upgrade CUDA. (Value:
 *        "UPGRADE_CUDA")
 *    @arg @c kGTLRAIPlatformNotebooksTypeUpgradeAll Upgrade All (OS, Framework
 *        and CUDA). (Value: "UPGRADE_ALL")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_IsInstanceUpgradeableResponse.
 *
 *  Check if a notebook instance is upgradable.
 *
 *  @param notebookInstance Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesIsUpgradeable
 */
+ (instancetype)queryWithNotebookInstance:(NSString *)notebookInstance;

@end

/**
 *  Lists instances in a given project and location.
 *
 *  Method: notebooks.projects.locations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList : GTLRAIPlatformNotebooksQuery

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListInstancesResponse.
 *
 *  Lists instances in a given project and location.
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Registers an existing legacy notebook instance to the Notebooks API server.
 *  Legacy instances are instances created with the legacy Compute Engine calls.
 *  They are not manageable by the Notebooks API out of the box. This call makes
 *  these instances manageable by the Notebooks API.
 *
 *  Method: notebooks.projects.locations.instances.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister : GTLRAIPlatformNotebooksQuery

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Registers an existing legacy notebook instance to the Notebooks API server.
 *  Legacy instances are instances created with the legacy Compute Engine calls.
 *  They are not manageable by the Notebooks API out of the box. This call makes
 *  these instances manageable by the Notebooks API.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_RegisterInstanceRequest to
 *    include in the query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRegister
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RegisterInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  Method: notebooks.projects.locations.instances.report
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to report their latest instance information to the
 *  Notebooks API server. The server will merge the reported information to the
 *  instance metadata store. Do not use this method directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ReportInstanceInfoRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReport
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportInstanceInfoRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resets a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Resets a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ResetInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesReset
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Rollbacks a notebook instance to the previous version.
 *
 *  Method: notebooks.projects.locations.instances.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Rollbacks a notebook instance to the previous version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_RollbackInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesRollback
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RollbackInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the guest accelerators of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.setAccelerator
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Updates the guest accelerators of a single Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetAccelerator
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceAcceleratorRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: notebooks.projects.locations.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Replaces all the labels of an Instance.
 *
 *  Method: notebooks.projects.locations.instances.setLabels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Replaces all the labels of an Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceLabelsRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetLabels
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceLabelsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the machine type of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.setMachineType
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Updates the machine type of a single Instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesSetMachineType
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetInstanceMachineTypeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Starts a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Starts a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StartInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStart
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops a notebook instance.
 *
 *  Method: notebooks.projects.locations.instances.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Stops a notebook instance.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StopInstanceRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesStop
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: notebooks.projects.locations.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Update Notebook Instance configurations.
 *
 *  Method: notebooks.projects.locations.instances.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateConfig : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Update Notebook Instance configurations.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpdateInstanceConfigRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateInstanceConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Add/update metadata items for an instance.
 *
 *  Method: notebooks.projects.locations.instances.updateMetadataItems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateMetadataItems : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_UpdateInstanceMetadataItemsResponse.
 *
 *  Add/update metadata items for an instance.
 *
 *  @param object The @c
 *    GTLRAIPlatformNotebooks_UpdateInstanceMetadataItemsRequest to include in
 *    the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateMetadataItems
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateInstanceMetadataItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the Shielded instance configuration of a single Instance.
 *
 *  Method: notebooks.projects.locations.instances.updateShieldedInstanceConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateShieldedInstanceConfig : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Updates the Shielded instance configuration of a single Instance.
 *
 *  @param object The @c
 *    GTLRAIPlatformNotebooks_UpdateShieldedInstanceConfigRequest to include in
 *    the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpdateShieldedInstanceConfig
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpdateShieldedInstanceConfigRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Upgrades a notebook instance to the latest version.
 *
 *  Method: notebooks.projects.locations.instances.upgrade
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Upgrades a notebook instance to the latest version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgrade
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Allows notebook instances to call this endpoint to upgrade themselves. Do
 *  not use this method directly.
 *
 *  Method: notebooks.projects.locations.instances.upgradeInternal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/instances/{instance_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Allows notebook instances to call this endpoint to upgrade themselves. Do
 *  not use this method directly.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/instances/{instance_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsInstancesUpgradeInternal
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeInstanceInternalRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: notebooks.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsList : GTLRAIPlatformNotebooksQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: notebooks.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: notebooks.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: notebooks.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet : GTLRAIPlatformNotebooksQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: notebooks.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList : GTLRAIPlatformNotebooksQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Runtime in a given project and location.
 *
 *  Method: notebooks.projects.locations.runtimes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesCreate : GTLRAIPlatformNotebooksQuery

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/** Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/** Required. User-defined unique ID of this Runtime. */
@property(nonatomic, copy, nullable) NSString *runtimeId;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Runtime in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Runtime to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Runtime *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Runtime.
 *
 *  Method: notebooks.projects.locations.runtimes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes a single Runtime.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Diagnostic File and runs Diagnostic Tool given a Runtime.
 *
 *  Method: notebooks.projects.locations.runtimes.diagnose
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDiagnose : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtimes_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a Diagnostic File and runs Diagnostic Tool given a Runtime.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_DiagnoseRuntimeRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtimes_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesDiagnose
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_DiagnoseRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets details of a single Runtime. The location must be a regional endpoint
 *  rather than zonal.
 *
 *  Method: notebooks.projects.locations.runtimes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Runtime.
 *
 *  Gets details of a single Runtime. The location must be a regional endpoint
 *  rather than zonal.
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: notebooks.projects.locations.runtimes.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists Runtimes in a given project and location.
 *
 *  Method: notebooks.projects.locations.runtimes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesList : GTLRAIPlatformNotebooksQuery

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListRuntimesResponse.
 *
 *  Lists Runtimes in a given project and location.
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update Notebook Runtime configuration.
 *
 *  Method: notebooks.projects.locations.runtimes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesPatch : GTLRAIPlatformNotebooksQuery

/**
 *  Output only. The resource name of the runtime. Format:
 *  `projects/{project}/locations/{location}/runtimes/{runtimeId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Idempotent request UUID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Specifies the path, relative to `Runtime`, of the field to update.
 *  For example, to change the software configuration kernels, the `update_mask`
 *  parameter would be specified as `software_config.kernels`, and the `PATCH`
 *  request body would specify the new value, as follows: { "software_config":{
 *  "kernels": [{ 'repository':
 *  'gcr.io/deeplearning-platform-release/pytorch-gpu', 'tag': 'latest' }], } }
 *  Currently, only the following fields can be updated: -
 *  software_config.kernels - software_config.post_startup_script -
 *  software_config.custom_gpu_driver_path - software_config.idle_shutdown -
 *  software_config.idle_shutdown_timeout - software_config.disable_terminal
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Update Notebook Runtime configuration.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Runtime to include in the
 *    query.
 *  @param name Output only. The resource name of the runtime. Format:
 *    `projects/{project}/locations/{location}/runtimes/{runtimeId}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesPatch
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Runtime *)object
                           name:(NSString *)name;

@end

/**
 *  Gets an access token for the consumer service account that the customer
 *  attached to the runtime. Only accessible from the tenant instance.
 *
 *  Method: notebooks.projects.locations.runtimes.refreshRuntimeTokenInternal
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesRefreshRuntimeTokenInternal : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_RefreshRuntimeTokenInternalResponse.
 *
 *  Gets an access token for the consumer service account that the customer
 *  attached to the runtime. Only accessible from the tenant instance.
 *
 *  @param object The @c
 *    GTLRAIPlatformNotebooks_RefreshRuntimeTokenInternalRequest to include in
 *    the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesRefreshRuntimeTokenInternal
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_RefreshRuntimeTokenInternalRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Report and process a runtime event.
 *
 *  Method: notebooks.projects.locations.runtimes.reportEvent
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReportEvent : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Report and process a runtime event.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ReportRuntimeEventRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReportEvent
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ReportRuntimeEventRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resets a Managed Notebook Runtime.
 *
 *  Method: notebooks.projects.locations.runtimes.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReset : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Resets a Managed Notebook Runtime.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_ResetRuntimeRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesReset
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_ResetRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: notebooks.projects.locations.runtimes.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSetIamPolicy : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SetIamPolicyRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Starts a Managed Notebook Runtime. Perform "Start" on GPU instances;
 *  "Resume" on CPU instances See:
 *  https://cloud.google.com/compute/docs/instances/stop-start-instance
 *  https://cloud.google.com/compute/docs/instances/suspend-resume-instance
 *
 *  Method: notebooks.projects.locations.runtimes.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStart : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Starts a Managed Notebook Runtime. Perform "Start" on GPU instances;
 *  "Resume" on CPU instances See:
 *  https://cloud.google.com/compute/docs/instances/stop-start-instance
 *  https://cloud.google.com/compute/docs/instances/suspend-resume-instance
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StartRuntimeRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStart
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StartRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend"
 *  on CPU instances See:
 *  https://cloud.google.com/compute/docs/instances/stop-start-instance
 *  https://cloud.google.com/compute/docs/instances/suspend-resume-instance
 *
 *  Method: notebooks.projects.locations.runtimes.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStop : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend"
 *  on CPU instances See:
 *  https://cloud.google.com/compute/docs/instances/stop-start-instance
 *  https://cloud.google.com/compute/docs/instances/suspend-resume-instance
 *
 *  @param object The @c GTLRAIPlatformNotebooks_StopRuntimeRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesStop
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_StopRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Switch a Managed Notebook Runtime.
 *
 *  Method: notebooks.projects.locations.runtimes.switch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSwitch : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Switch a Managed Notebook Runtime.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_SwitchRuntimeRequest to include
 *    in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesSwitch
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_SwitchRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: notebooks.projects.locations.runtimes.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesTestIamPermissions : GTLRAIPlatformNotebooksQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Upgrades a Managed Notebook Runtime to the latest version.
 *
 *  Method: notebooks.projects.locations.runtimes.upgrade
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesUpgrade : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Upgrades a Managed Notebook Runtime to the latest version.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_UpgradeRuntimeRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsRuntimesUpgrade
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_UpgradeRuntimeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Scheduled Notebook in a given project and location.
 *
 *  Method: notebooks.projects.locations.schedules.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesCreate : GTLRAIPlatformNotebooksQuery

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. User-defined unique ID of this schedule. */
@property(nonatomic, copy, nullable) NSString *scheduleId;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Creates a new Scheduled Notebook in a given project and location.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_Schedule to include in the
 *    query.
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesCreate
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_Schedule *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes schedule and all underlying jobs
 *
 *  Method: notebooks.projects.locations.schedules.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesDelete : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Deletes schedule and all underlying jobs
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of schedule
 *
 *  Method: notebooks.projects.locations.schedules.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesGet : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Schedule.
 *
 *  Gets details of schedule
 *
 *  @param name Required. Format:
 *    `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists schedules in a given project and location.
 *
 *  Method: notebooks.projects.locations.schedules.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesList : GTLRAIPlatformNotebooksQuery

/** Filter applied to resulting schedules. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Field to order results by. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum return size of the list call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A previous returned page token that can be used to continue listing from the
 *  last result.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: `parent=projects/{project_id}/locations/{location}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_ListSchedulesResponse.
 *
 *  Lists schedules in a given project and location.
 *
 *  @param parent Required. Format:
 *    `parent=projects/{project_id}/locations/{location}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Triggers execution of an existing schedule.
 *
 *  Method: notebooks.projects.locations.schedules.trigger
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAIPlatformNotebooksCloudPlatform
 */
@interface GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesTrigger : GTLRAIPlatformNotebooksQuery

/**
 *  Required. Format:
 *  `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAIPlatformNotebooks_Operation.
 *
 *  Triggers execution of an existing schedule.
 *
 *  @param object The @c GTLRAIPlatformNotebooks_TriggerScheduleRequest to
 *    include in the query.
 *  @param name Required. Format:
 *    `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`
 *
 *  @return GTLRAIPlatformNotebooksQuery_ProjectsLocationsSchedulesTrigger
 */
+ (instancetype)queryWithObject:(GTLRAIPlatformNotebooks_TriggerScheduleRequest *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
