// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Workstations API (workstations/v1beta)
// Documentation:
//   https://cloud.google.com/workstations

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudWorkstationsObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Workstations query classes.
 */
@interface GTLRCloudWorkstationsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: workstations.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsCancel : GTLRCloudWorkstationsQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudWorkstations_CancelOperationRequest to include
 *    in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: workstations.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsDelete : GTLRCloudWorkstationsQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: workstations.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsGet : GTLRCloudWorkstationsQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: workstations.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsList : GTLRCloudWorkstationsQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new workstation cluster.
 *
 *  Method: workstations.projects.locations.workstationClusters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersCreate : GTLRCloudWorkstationsQuery

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/** Required. ID to use for the cluster. */
@property(nonatomic, copy, nullable) NSString *workstationClusterId;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Creates a new workstation cluster.
 *
 *  @param object The @c GTLRCloudWorkstations_WorkstationCluster to include in
 *    the query.
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationCluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified workstation cluster.
 *
 *  Method: workstations.projects.locations.workstationClusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersDelete : GTLRCloudWorkstationsQuery

/**
 *  If set, the request will be rejected if the latest version of the cluster on
 *  the server does not have this etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  If set, any workstation configurations and workstations in the cluster will
 *  also be deleted. Otherwise, the request will work only if the cluster has no
 *  configurations or workstations.
 */
@property(nonatomic, assign) BOOL force;

/** Required. Name of the cluster to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Deletes the specified workstation cluster.
 *
 *  @param name Required. Name of the cluster to delete.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the requested workstation cluster.
 *
 *  Method: workstations.projects.locations.workstationClusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersGet : GTLRCloudWorkstationsQuery

/** Required. Name of the requested resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_WorkstationCluster.
 *
 *  Returns the requested workstation cluster.
 *
 *  @param name Required. Name of the requested resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns all workstation clusters in the specified location.
 *
 *  Method: workstations.projects.locations.workstationClusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersList : GTLRCloudWorkstationsQuery

/** Maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** next_page_token value returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListWorkstationClustersResponse.
 *
 *  Returns all workstation clusters in the specified location.
 *
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing workstation cluster.
 *
 *  Method: workstations.projects.locations.workstationClusters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersPatch : GTLRCloudWorkstationsQuery

/**
 *  If set, and the cluster is not found, a new cluster will be created. In this
 *  situation, update_mask is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/** Full name of this resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask specifying which fields in the cluster should be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Updates an existing workstation cluster.
 *
 *  @param object The @c GTLRCloudWorkstations_WorkstationCluster to include in
 *    the query.
 *  @param name Full name of this resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationCluster *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new workstation configuration.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsCreate : GTLRCloudWorkstationsQuery

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/** Required. ID to use for the config. */
@property(nonatomic, copy, nullable) NSString *workstationConfigId;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Creates a new workstation configuration.
 *
 *  @param object The @c GTLRCloudWorkstations_WorkstationConfig to include in
 *    the query.
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified workstation configuration.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsDelete : GTLRCloudWorkstationsQuery

/**
 *  If set, the request will be rejected if the latest version of the config on
 *  the server does not have this etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  If set, any Workstations in the config will also be deleted. Otherwise, the
 *  request will work only if the config has no workstations.
 */
@property(nonatomic, assign) BOOL force;

/** Required. Name of the config to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Deletes the specified workstation configuration.
 *
 *  @param name Required. Name of the config to delete.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the requested workstation configuration.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGet : GTLRCloudWorkstationsQuery

/** Required. Name of the requested resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_WorkstationConfig.
 *
 *  Returns the requested workstation configuration.
 *
 *  @param name Required. Name of the requested resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGetIamPolicy : GTLRCloudWorkstationsQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Returns all workstation configurations in the specified cluster.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsList : GTLRCloudWorkstationsQuery

/** Maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** next_page_token value returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListWorkstationConfigsResponse.
 *
 *  Returns all workstation configurations in the specified cluster.
 *
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns all workstation configurations in the specified cluster on which the
 *  caller has the "workstations.workstation.create" permission.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.listUsable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsListUsable : GTLRCloudWorkstationsQuery

/** Maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** next_page_token value returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListUsableWorkstationConfigsResponse.
 *
 *  Returns all workstation configurations in the specified cluster on which the
 *  caller has the "workstations.workstation.create" permission.
 *
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsListUsable
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing workstation configuration.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsPatch : GTLRCloudWorkstationsQuery

/**
 *  If set, and the config is not found, a new config will be created. In this
 *  situation, update_mask is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/** Full name of this resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask specifying which fields in the config should be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Updates an existing workstation configuration.
 *
 *  @param object The @c GTLRCloudWorkstations_WorkstationConfig to include in
 *    the query.
 *  @param name Full name of this resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsSetIamPolicy : GTLRCloudWorkstationsQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudWorkstations_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsTestIamPermissions : GTLRCloudWorkstationsQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudWorkstations_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new workstation.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreate : GTLRCloudWorkstationsQuery

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/** Required. ID to use for the workstation. */
@property(nonatomic, copy, nullable) NSString *workstationId;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Creates a new workstation.
 *
 *  @param object The @c GTLRCloudWorkstations_Workstation to include in the
 *    query.
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_Workstation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified workstation.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDelete : GTLRCloudWorkstationsQuery

/**
 *  If set, the request will be rejected if the latest version of the
 *  workstation on the server does not have this etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Required. Name of the workstation to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Deletes the specified workstation.
 *
 *  @param name Required. Name of the workstation to delete.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a short-lived credential that can be used to send authenticated and
 *  authorized traffic to a workstation.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.generateAccessToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessToken : GTLRCloudWorkstationsQuery

/**
 *  Required. Name of the workstation for which the access token should be
 *  generated.
 */
@property(nonatomic, copy, nullable) NSString *workstation;

/**
 *  Fetches a @c GTLRCloudWorkstations_GenerateAccessTokenResponse.
 *
 *  Returns a short-lived credential that can be used to send authenticated and
 *  authorized traffic to a workstation.
 *
 *  @param object The @c GTLRCloudWorkstations_GenerateAccessTokenRequest to
 *    include in the query.
 *  @param workstation Required. Name of the workstation for which the access
 *    token should be generated.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessToken
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_GenerateAccessTokenRequest *)object
                    workstation:(NSString *)workstation;

@end

/**
 *  Returns the requested workstation.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGet : GTLRCloudWorkstationsQuery

/** Required. Name of the requested resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Workstation.
 *
 *  Returns the requested workstation.
 *
 *  @param name Required. Name of the requested resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicy : GTLRCloudWorkstationsQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Returns all Workstations using the specified config.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsList : GTLRCloudWorkstationsQuery

/** Maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** next_page_token value returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListWorkstationsResponse.
 *
 *  Returns all Workstations using the specified config.
 *
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns all Workstations using the specified config on which the caller has
 *  the "workstations.workstations.use" permission.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.listUsable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsable : GTLRCloudWorkstationsQuery

/** Maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** next_page_token value returned from a previous List request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudWorkstations_ListUsableWorkstationsResponse.
 *
 *  Returns all Workstations using the specified config on which the caller has
 *  the "workstations.workstations.use" permission.
 *
 *  @param parent Required. Parent resource name.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsable
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing workstation.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatch : GTLRCloudWorkstationsQuery

/**
 *  If set, and the config is not found, a new config will be created. In this
 *  situation, update_mask is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/** Full name of this resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Mask specifying which fields in the config should be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If set, validate the request and preview the review, but do not actually
 *  apply it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Updates an existing workstation.
 *
 *  @param object The @c GTLRCloudWorkstations_Workstation to include in the
 *    query.
 *  @param name Full name of this resource.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_Workstation *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicy : GTLRCloudWorkstationsQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudWorkstations_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Starts running a workstation so that users can connect to it.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStart : GTLRCloudWorkstationsQuery

/** Required. Name of the workstation to start. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Starts running a workstation so that users can connect to it.
 *
 *  @param object The @c GTLRCloudWorkstations_StartWorkstationRequest to
 *    include in the query.
 *  @param name Required. Name of the workstation to start.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStart
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_StartWorkstationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops running a workstation, reducing costs.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStop : GTLRCloudWorkstationsQuery

/** Required. Name of the workstation to stop. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudWorkstations_Operation.
 *
 *  Stops running a workstation, reducing costs.
 *
 *  @param object The @c GTLRCloudWorkstations_StopWorkstationRequest to include
 *    in the query.
 *  @param name Required. Name of the workstation to stop.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStop
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_StopWorkstationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: workstations.projects.locations.workstationClusters.workstationConfigs.workstations.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudWorkstationsCloudPlatform
 */
@interface GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissions : GTLRCloudWorkstationsQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudWorkstations_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudWorkstations_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudWorkstations_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
