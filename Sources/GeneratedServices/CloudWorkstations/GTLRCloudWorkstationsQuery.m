// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Workstations API (workstations/v1beta)
// Documentation:
//   https://cloud.google.com/workstations

#import <GoogleAPIClientForREST/GTLRCloudWorkstationsQuery.h>

@implementation GTLRCloudWorkstationsQuery

@dynamic fields;

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:cancel";
  GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Empty class];
  query.loggingName = @"workstations.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Empty class];
  query.loggingName = @"workstations.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}/operations";
  GTLRCloudWorkstationsQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListOperationsResponse class];
  query.loggingName = @"workstations.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersCreate

@dynamic parent, validateOnly, workstationClusterId;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstationClusters";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.create";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersDelete

@dynamic ETag, force, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.delete";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_WorkstationCluster class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.get";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstationClusters";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListWorkstationClustersResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.list";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersPatch

@dynamic allowMissing, name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.patch";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsCreate

@dynamic parent, validateOnly, workstationConfigId;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstationConfigs";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.create";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsDelete

@dynamic ETag, force, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.delete";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_WorkstationConfig class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.get";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:getIamPolicy";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_Policy class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstationConfigs";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListWorkstationConfigsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.list";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsListUsable

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstationConfigs:listUsable";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsListUsable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListUsableWorkstationConfigsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.listUsable";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsPatch

@dynamic allowMissing, name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_WorkstationConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.patch";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:setIamPolicy";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_Policy class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:testIamPermissions";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_TestIamPermissionsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.testIamPermissions";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreate

@dynamic parent, validateOnly, workstationId;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_Workstation *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstations";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.create";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDelete

@dynamic ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.delete";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessToken

@dynamic workstation;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_GenerateAccessTokenRequest *)object
                    workstation:(NSString *)workstation {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"workstation" ];
  NSString *pathURITemplate = @"v1beta/{+workstation}:generateAccessToken";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.workstation = workstation;
  query.expectedObjectClass = [GTLRCloudWorkstations_GenerateAccessTokenResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.generateAccessToken";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Workstation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.get";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:getIamPolicy";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_Policy class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstations";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListWorkstationsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.list";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsable

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/workstations:listUsable";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsable *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudWorkstations_ListUsableWorkstationsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.listUsable";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatch

@dynamic allowMissing, name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_Workstation *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.patch";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:setIamPolicy";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_Policy class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStart

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_StartWorkstationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:start";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.start";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_StopWorkstationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}:stop";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudWorkstations_Operation class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.stop";
  return query;
}

@end

@implementation GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudWorkstations_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1beta/{+resource}:testIamPermissions";
  GTLRCloudWorkstationsQuery_ProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudWorkstations_TestIamPermissionsResponse class];
  query.loggingName = @"workstations.projects.locations.workstationClusters.workstationConfigs.workstations.testIamPermissions";
  return query;
}

@end
