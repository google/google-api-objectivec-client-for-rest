// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome UX Report API (chromeuxreport/v1)
// Description:
//   The Chrome UX Report API lets you view real user experience data for
//   millions of websites.
// Documentation:
//   https://developers.google.com/web/tools/chrome-user-experience-report/api/reference

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRChromeUXReport_Bin;
@class GTLRChromeUXReport_CollectionPeriod;
@class GTLRChromeUXReport_Date;
@class GTLRChromeUXReport_Key;
@class GTLRChromeUXReport_Metric;
@class GTLRChromeUXReport_Percentiles;
@class GTLRChromeUXReport_Record;
@class GTLRChromeUXReport_Record_Metrics;
@class GTLRChromeUXReport_UrlNormalization;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRChromeUXReport_Key.formFactor

/**
 *  The default value, representing all device classes.
 *
 *  Value: "ALL_FORM_FACTORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_Key_FormFactor_AllFormFactors;
/**
 *  The device class representing a "desktop"/"laptop" type full size client.
 *
 *  Value: "DESKTOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_Key_FormFactor_Desktop;
/**
 *  The device class representing a "mobile"/"phone" sized client.
 *
 *  Value: "PHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_Key_FormFactor_Phone;
/**
 *  The device class representing a "tablet" type client.
 *
 *  Value: "TABLET"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_Key_FormFactor_Tablet;

// ----------------------------------------------------------------------------
// GTLRChromeUXReport_QueryRequest.formFactor

/**
 *  The default value, representing all device classes.
 *
 *  Value: "ALL_FORM_FACTORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_QueryRequest_FormFactor_AllFormFactors;
/**
 *  The device class representing a "desktop"/"laptop" type full size client.
 *
 *  Value: "DESKTOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_QueryRequest_FormFactor_Desktop;
/**
 *  The device class representing a "mobile"/"phone" sized client.
 *
 *  Value: "PHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_QueryRequest_FormFactor_Phone;
/**
 *  The device class representing a "tablet" type client.
 *
 *  Value: "TABLET"
 */
FOUNDATION_EXTERN NSString * const kGTLRChromeUXReport_QueryRequest_FormFactor_Tablet;

/**
 *  A bin is a discrete portion of data spanning from start to end, or if no end
 *  is given, then from start to +inf. A bin's start and end values are given in
 *  the value type of the metric it represents. For example, "first contentful
 *  paint" is measured in milliseconds and exposed as ints, therefore its metric
 *  bins will use int32s for its start and end types. However, "cumulative
 *  layout shift" is measured in unitless decimals and is exposed as a decimal
 *  encoded as a string, therefore its metric bins will use strings for its
 *  value type.
 */
@interface GTLRChromeUXReport_Bin : GTLRObject

/**
 *  The proportion of users that experienced this bin's value for the given
 *  metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *density;

/**
 *  End is the end of the data bin. If end is not populated, then the bin has no
 *  end and is valid from start to +inf.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id end;

/**
 *  Start is the beginning of the data bin.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id start;

@end


/**
 *  The collection period is a date range which includes the `first` and `last`
 *  day.
 */
@interface GTLRChromeUXReport_CollectionPeriod : GTLRObject

/** The first day in the collection period, inclusive. */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Date *firstDate;

/** The last day in the collection period, inclusive. */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Date *lastDate;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRChromeUXReport_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Key defines all the dimensions that identify this record as unique.
 */
@interface GTLRChromeUXReport_Key : GTLRObject

/**
 *  The effective connection type is the general connection class that all users
 *  experienced for this record. This field uses the values ["offline",
 *  "slow-2G", "2G", "3G", "4G"] as specified in:
 *  https://wicg.github.io/netinfo/#effective-connection-types If the effective
 *  connection type is unspecified, then aggregated data over all effective
 *  connection types will be returned.
 */
@property(nonatomic, copy, nullable) NSString *effectiveConnectionType;

/**
 *  The form factor is the device class that all users used to access the site
 *  for this record. If the form factor is unspecified, then aggregated data
 *  over all form factors will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeUXReport_Key_FormFactor_AllFormFactors The default
 *        value, representing all device classes. (Value: "ALL_FORM_FACTORS")
 *    @arg @c kGTLRChromeUXReport_Key_FormFactor_Desktop The device class
 *        representing a "desktop"/"laptop" type full size client. (Value:
 *        "DESKTOP")
 *    @arg @c kGTLRChromeUXReport_Key_FormFactor_Phone The device class
 *        representing a "mobile"/"phone" sized client. (Value: "PHONE")
 *    @arg @c kGTLRChromeUXReport_Key_FormFactor_Tablet The device class
 *        representing a "tablet" type client. (Value: "TABLET")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  Origin specifies the origin that this record is for. Note: When specifying
 *  an origin, data for loads under this origin over all pages are aggregated
 *  into origin level user experience data.
 */
@property(nonatomic, copy, nullable) NSString *origin;

/**
 *  Url specifies a specific url that this record is for. Note: When specifying
 *  a "url" only data for that specific url will be aggregated.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A `metric` is a set of user experience data for a single web performance
 *  metric, like "first contentful paint". It contains a summary histogram of
 *  real world Chrome usage as a series of `bins`.
 */
@interface GTLRChromeUXReport_Metric : GTLRObject

/**
 *  The histogram of user experiences for a metric. The histogram will have at
 *  least one bin and the densities of all bins will add up to ~1.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRChromeUXReport_Bin *> *histogram;

/**
 *  Common useful percentiles of the Metric. The value type for the percentiles
 *  will be the same as the value types given for the Histogram bins.
 */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Percentiles *percentiles;

@end


/**
 *  Percentiles contains synthetic values of a metric at a given statistical
 *  percentile. These are used for estimating a metric's value as experienced by
 *  a percentage of users out of the total number of users.
 */
@interface GTLRChromeUXReport_Percentiles : GTLRObject

/**
 *  75% of users experienced the given metric at or below this value.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id p75;

@end


/**
 *  Request payload sent by a physical web client. This request includes all
 *  necessary context to load a particular user experience record.
 */
@interface GTLRChromeUXReport_QueryRequest : GTLRObject

/**
 *  The effective connection type is a query dimension that specifies the
 *  effective network class that the record's data should belong to. This field
 *  uses the values ["offline", "slow-2G", "2G", "3G", "4G"] as specified in:
 *  https://wicg.github.io/netinfo/#effective-connection-types Note: If no
 *  effective connection type is specified, then a special record with
 *  aggregated data over all effective connection types will be returned.
 */
@property(nonatomic, copy, nullable) NSString *effectiveConnectionType;

/**
 *  The form factor is a query dimension that specifies the device class that
 *  the record's data should belong to. Note: If no form factor is specified,
 *  then a special record with aggregated data over all form factors will be
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRChromeUXReport_QueryRequest_FormFactor_AllFormFactors The
 *        default value, representing all device classes. (Value:
 *        "ALL_FORM_FACTORS")
 *    @arg @c kGTLRChromeUXReport_QueryRequest_FormFactor_Desktop The device
 *        class representing a "desktop"/"laptop" type full size client. (Value:
 *        "DESKTOP")
 *    @arg @c kGTLRChromeUXReport_QueryRequest_FormFactor_Phone The device class
 *        representing a "mobile"/"phone" sized client. (Value: "PHONE")
 *    @arg @c kGTLRChromeUXReport_QueryRequest_FormFactor_Tablet The device
 *        class representing a "tablet" type client. (Value: "TABLET")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  The metrics that should be included in the response. If none are specified
 *  then any metrics found will be returned. Allowed values:
 *  ["first_contentful_paint", "first_input_delay", "largest_contentful_paint",
 *  "cumulative_layout_shift", "experimental_time_to_first_byte",
 *  "experimental_interaction_to_next_paint"]
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  The url pattern "origin" refers to a url pattern that is the origin of a
 *  website. Examples: "https://example.com", "https://cloud.google.com"
 */
@property(nonatomic, copy, nullable) NSString *origin;

/**
 *  The url pattern "url" refers to a url pattern that is any arbitrary url.
 *  Examples: "https://example.com/",
 *  "https://cloud.google.com/why-google-cloud/"
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Response payload sent back to a physical web client. This response contains
 *  the record found based on the identiers present in a `QueryRequest`. The
 *  returned response will have a record, and sometimes details on normalization
 *  actions taken on the request that were necessary to make the request
 *  successful.
 */
@interface GTLRChromeUXReport_QueryResponse : GTLRObject

/** The record that was found. */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Record *record;

/**
 *  These are details about automated normalization actions that were taken in
 *  order to make the requested `url_pattern` valid.
 */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_UrlNormalization *urlNormalizationDetails;

@end


/**
 *  Record is a single Chrome UX report data record. It contains use experience
 *  statistics for a single url pattern and set of dimensions.
 */
@interface GTLRChromeUXReport_Record : GTLRObject

/**
 *  The collection period indicates when the data reflected in this record was
 *  collected.
 */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_CollectionPeriod *collectionPeriod;

/**
 *  Key defines all of the unique querying parameters needed to look up a user
 *  experience record.
 */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Key *key;

/**
 *  Metrics is the map of user experience data available for the record defined
 *  in the key field. Metrics are keyed on the metric name. Allowed key values:
 *  ["first_contentful_paint", "first_input_delay", "largest_contentful_paint",
 *  "cumulative_layout_shift"]
 */
@property(nonatomic, strong, nullable) GTLRChromeUXReport_Record_Metrics *metrics;

@end


/**
 *  Metrics is the map of user experience data available for the record defined
 *  in the key field. Metrics are keyed on the metric name. Allowed key values:
 *  ["first_contentful_paint", "first_input_delay", "largest_contentful_paint",
 *  "cumulative_layout_shift"]
 *
 *  @note This class is documented as having more properties of
 *        GTLRChromeUXReport_Metric. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRChromeUXReport_Record_Metrics : GTLRObject
@end


/**
 *  Object representing the normalization actions taken to normalize a url to
 *  achieve a higher chance of successful lookup. These are simple automated
 *  changes that are taken when looking up the provided `url_patten` would be
 *  known to fail. Complex actions like following redirects are not handled.
 */
@interface GTLRChromeUXReport_UrlNormalization : GTLRObject

/**
 *  The URL after any normalization actions. This is a valid user experience URL
 *  that could reasonably be looked up.
 */
@property(nonatomic, copy, nullable) NSString *normalizedUrl;

/** The original requested URL prior to any normalization actions. */
@property(nonatomic, copy, nullable) NSString *originalUrl;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
