// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   versionhistory.googleapis.com API (versionhistory/v1)
// Description:
//   Version History API - Prod
// Documentation:
//   https://developers.chrome.com/versionhistory

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVersionHistory_Channel;
@class GTLRVersionHistory_Interval;
@class GTLRVersionHistory_Platform;
@class GTLRVersionHistory_Release;
@class GTLRVersionHistory_Version;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVersionHistory_Channel.channelType

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_All;
/** Value: "BETA" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_Beta;
/** Value: "CANARY" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_Canary;
/** Value: "CANARY_ASAN" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_CanaryAsan;
/** Value: "CHANNEL_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_ChannelTypeUnspecified;
/** Value: "DEV" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_Dev;
/** Value: "EXTENDED" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_Extended;
/** Value: "STABLE" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Channel_ChannelType_Stable;

// ----------------------------------------------------------------------------
// GTLRVersionHistory_Platform.platformType

/** Value: "ALL" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_All;
/** Value: "ANDROID" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Android;
/** Value: "CHROMEOS" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Chromeos;
/** Value: "FUCHSIA" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Fuchsia;
/** Value: "IOS" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Ios;
/** Value: "LACROS" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Lacros;
/** Value: "LACROS_ARM32" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_LacrosArm32;
/** Value: "LACROS_ARM64" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_LacrosArm64;
/** Value: "LINUX" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Linux;
/** Value: "MAC" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Mac;
/** Value: "MAC_ARM64" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_MacArm64;
/** Value: "PLATFORM_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_PlatformTypeUnspecified;
/** Value: "WEBVIEW" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Webview;
/** Value: "WIN" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Win;
/** Value: "WIN64" */
FOUNDATION_EXTERN NSString * const kGTLRVersionHistory_Platform_PlatformType_Win64;

/**
 *  Each Channel is owned by a Platform and owns a collection of versions.
 *  Possible Channels are listed in the Channel enum below. Not all Channels are
 *  available for every Platform (e.g. CANARY does not exist for LINUX).
 */
@interface GTLRVersionHistory_Channel : GTLRObject

/**
 *  Type of channel.
 *
 *  Likely values:
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_All Value "ALL"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_Beta Value "BETA"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_Canary Value "CANARY"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_CanaryAsan Value
 *        "CANARY_ASAN"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_ChannelTypeUnspecified
 *        Value "CHANNEL_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_Dev Value "DEV"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_Extended Value "EXTENDED"
 *    @arg @c kGTLRVersionHistory_Channel_ChannelType_Stable Value "STABLE"
 */
@property(nonatomic, copy, nullable) NSString *channelType;

/**
 *  Channel name. Format is "{product}/platforms/{platform}/channels/{channel}"
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents a time interval, encoded as a Timestamp start (inclusive) and a
 *  Timestamp end (exclusive). The start must be less than or equal to the end.
 *  When the start equals the end, the interval is empty (matches no time). When
 *  both start and end are unspecified, the interval matches any time.
 */
@interface GTLRVersionHistory_Interval : GTLRObject

/**
 *  Optional. Exclusive end of the interval. If specified, a Timestamp matching
 *  this interval will have to be before the end.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Optional. Inclusive start of the interval. If specified, a Timestamp
 *  matching this interval will have to be the same or after the start.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Response message for ListChannels.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "channels" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVersionHistory_ListChannelsResponse : GTLRCollectionObject

/**
 *  The list of channels.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVersionHistory_Channel *> *channels;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListPlatforms.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "platforms" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVersionHistory_ListPlatformsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of platforms.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVersionHistory_Platform *> *platforms;

@end


/**
 *  Response message for ListReleases.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVersionHistory_ListReleasesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of releases.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVersionHistory_Release *> *releases;

@end


/**
 *  Response message for ListVersions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "versions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVersionHistory_ListVersionsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of versions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVersionHistory_Version *> *versions;

@end


/**
 *  Each Platform is owned by a Product and owns a collection of channels.
 *  Available platforms are listed in Platform enum below. Not all Channels are
 *  available for every Platform (e.g. CANARY does not exist for LINUX).
 */
@interface GTLRVersionHistory_Platform : GTLRObject

/** Platform name. Format is "{product}/platforms/{platform}" */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Type of platform.
 *
 *  Likely values:
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_All Value "ALL"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Android Value "ANDROID"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Chromeos Value
 *        "CHROMEOS"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Fuchsia Value "FUCHSIA"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Ios Value "IOS"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Lacros Value "LACROS"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_LacrosArm32 Value
 *        "LACROS_ARM32"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_LacrosArm64 Value
 *        "LACROS_ARM64"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Linux Value "LINUX"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Mac Value "MAC"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_MacArm64 Value
 *        "MAC_ARM64"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_PlatformTypeUnspecified
 *        Value "PLATFORM_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Webview Value "WEBVIEW"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Win Value "WIN"
 *    @arg @c kGTLRVersionHistory_Platform_PlatformType_Win64 Value "WIN64"
 */
@property(nonatomic, copy, nullable) NSString *platformType;

@end


/**
 *  A Release is owned by a Version. A Release contains information about the
 *  release(s) of its parent version. This includes when the release began and
 *  ended, as well as what percentage it was released at. If the version is
 *  released again, or if the serving percentage changes, it will create another
 *  release under the version.
 */
@interface GTLRVersionHistory_Release : GTLRObject

/**
 *  Rollout fraction. This fraction indicates the fraction of people that should
 *  receive this version in this release. If the fraction is not specified in
 *  ReleaseManager, the API will assume fraction is 1.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fraction;

/**
 *  Rollout fraction group. Only fractions with the same fraction_group are
 *  statistically comparable: there may be non-fractional differences between
 *  different fraction groups.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fractionGroup;

/**
 *  Release name. Format is
 *  "{product}/platforms/{platform}/channels/{channel}/versions/{version}/releases/{release}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Timestamp interval of when the release was live. If end_time is unspecified,
 *  the release is currently live.
 */
@property(nonatomic, strong, nullable) GTLRVersionHistory_Interval *serving;

/** String containing just the version number. e.g. "84.0.4147.38" */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Each Version is owned by a Channel. A Version only displays the Version
 *  number (e.g. 84.0.4147.38). A Version owns a collection of releases.
 */
@interface GTLRVersionHistory_Version : GTLRObject

/**
 *  Version name. Format is
 *  "{product}/platforms/{platform}/channels/{channel}/versions/{version}" e.g.
 *  "chrome/platforms/win/channels/beta/versions/84.0.4147.38"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** String containing just the version number. e.g. "84.0.4147.38" */
@property(nonatomic, copy, nullable) NSString *version;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
