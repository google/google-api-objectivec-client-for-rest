// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Tool Results API (toolresults/v1beta3)
// Description:
//   API to publish and access results from developer tools.
// Documentation:
//   https://firebase.google.com/docs/test-lab/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRToolResults_AndroidAppInfo;
@class GTLRToolResults_AndroidInstrumentationTest;
@class GTLRToolResults_AndroidRoboTest;
@class GTLRToolResults_AndroidTest;
@class GTLRToolResults_AndroidTestLoop;
@class GTLRToolResults_Any;
@class GTLRToolResults_AppStartTime;
@class GTLRToolResults_BasicPerfSampleSeries;
@class GTLRToolResults_CPUInfo;
@class GTLRToolResults_Duration;
@class GTLRToolResults_Environment;
@class GTLRToolResults_EnvironmentDimensionValueEntry;
@class GTLRToolResults_Execution;
@class GTLRToolResults_FailureDetail;
@class GTLRToolResults_FileReference;
@class GTLRToolResults_GraphicsStats;
@class GTLRToolResults_GraphicsStatsBucket;
@class GTLRToolResults_History;
@class GTLRToolResults_Image;
@class GTLRToolResults_InconclusiveDetail;
@class GTLRToolResults_IndividualOutcome;
@class GTLRToolResults_IosAppInfo;
@class GTLRToolResults_IosRoboTest;
@class GTLRToolResults_IosTest;
@class GTLRToolResults_IosTestLoop;
@class GTLRToolResults_IosXcTest;
@class GTLRToolResults_MatrixDimensionDefinition;
@class GTLRToolResults_MemoryInfo;
@class GTLRToolResults_MergedResult;
@class GTLRToolResults_MultiStep;
@class GTLRToolResults_NonSdkApi;
@class GTLRToolResults_NonSdkApiInsight;
@class GTLRToolResults_Outcome;
@class GTLRToolResults_PendingGoogleUpdateInsight;
@class GTLRToolResults_PerfEnvironment;
@class GTLRToolResults_PerfSample;
@class GTLRToolResults_PerfSampleSeries;
@class GTLRToolResults_PrimaryStep;
@class GTLRToolResults_RegionProto;
@class GTLRToolResults_ResultsStorage;
@class GTLRToolResults_SafeHtmlProto;
@class GTLRToolResults_Screen;
@class GTLRToolResults_ScreenshotCluster;
@class GTLRToolResults_ShardSummary;
@class GTLRToolResults_SkippedDetail;
@class GTLRToolResults_Specification;
@class GTLRToolResults_StackTrace;
@class GTLRToolResults_Status;
@class GTLRToolResults_Status_Details_Item;
@class GTLRToolResults_Step;
@class GTLRToolResults_StepDimensionValueEntry;
@class GTLRToolResults_StepLabelsEntry;
@class GTLRToolResults_StepSummary;
@class GTLRToolResults_SuccessDetail;
@class GTLRToolResults_SuggestionClusterProto;
@class GTLRToolResults_SuggestionProto;
@class GTLRToolResults_TestCase;
@class GTLRToolResults_TestCaseReference;
@class GTLRToolResults_TestExecutionStep;
@class GTLRToolResults_TestIssue;
@class GTLRToolResults_TestSuiteOverview;
@class GTLRToolResults_TestTiming;
@class GTLRToolResults_Thumbnail;
@class GTLRToolResults_Timestamp;
@class GTLRToolResults_ToolExecution;
@class GTLRToolResults_ToolExecutionStep;
@class GTLRToolResults_ToolExitCode;
@class GTLRToolResults_ToolOutputReference;
@class GTLRToolResults_UpgradeInsight;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.perfMetricType

/** Value: "cpu" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Cpu;
/** Value: "graphics" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Graphics;
/** Value: "memory" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Memory;
/** Value: "network" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Network;
/** Value: "perfMetricTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_PerfMetricTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.perfUnit

/** Value: "byte" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Byte;
/** Value: "bytesPerSecond" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_BytesPerSecond;
/** Value: "framesPerSecond" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_FramesPerSecond;
/** Value: "kibibyte" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Kibibyte;
/** Value: "percent" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Percent;
/** Value: "perfUnitUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_PerfUnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_BasicPerfSampleSeries.sampleSeriesLabel

/** Value: "cpuKernel" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuKernel;
/** Value: "cpuTotal" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuTotal;
/**
 *  CPU sample series
 *
 *  Value: "cpuUser"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuUser;
/**
 *  Graphics sample series
 *
 *  Value: "graphicsFrameRate"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_GraphicsFrameRate;
/**
 *  Memory sample series
 *
 *  Value: "memoryRssPrivate"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssPrivate;
/** Value: "memoryRssShared" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssShared;
/** Value: "memoryRssTotal" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssTotal;
/** Value: "memoryTotal" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryTotal;
/** Value: "networkReceived" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkReceived;
/** Value: "networkSent" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkSent;
/** Value: "ntBytesReceived" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesReceived;
/**
 *  Network sample series
 *
 *  Value: "ntBytesTransferred"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesTransferred;
/** Value: "sampleSeriesTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_SampleSeriesTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_Execution.state

/**
 *  The finalized, immutable state. Steps/Executions in this state cannot be
 *  modified.
 *
 *  Value: "complete"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Execution_State_Complete;
/**
 *  The Execution/Step is in progress.
 *
 *  Value: "inProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Execution_State_InProgress;
/**
 *  The Execution/Step is created, ready to run, but not running yet. If an
 *  Execution/Step is created without initial state, it is assumed that the
 *  Execution/Step is in PENDING state.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Execution_State_Pending;
/**
 *  Should never be in this state. Exists for proto deserialization backward
 *  compatibility.
 *
 *  Value: "unknownState"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Execution_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRToolResults_History.testPlatform

/** Value: "android" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_History_TestPlatform_Android;
/** Value: "ios" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_History_TestPlatform_Ios;
/** Value: "unknownPlatform" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_History_TestPlatform_UnknownPlatform;

// ----------------------------------------------------------------------------
// GTLRToolResults_IndividualOutcome.outcomeSummary

/**
 *  A run failed, for instance: - One or more test case failed. - A test timed
 *  out. - The application under test crashed.
 *
 *  Value: "failure"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Failure;
/**
 *  A group of steps that were run with the same configuration had both failure
 *  and success outcomes.
 *
 *  Value: "flaky"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Flaky;
/**
 *  Something unexpected happened. The run should still be considered
 *  unsuccessful but this is likely a transient problem and re-running the test
 *  might be successful.
 *
 *  Value: "inconclusive"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Inconclusive;
/**
 *  All tests were skipped, for instance: - All device configurations were
 *  incompatible.
 *
 *  Value: "skipped"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Skipped;
/**
 *  The test matrix run was successful, for instance: - All the test cases
 *  passed. - Robo did not detect a crash of the application under test.
 *
 *  Value: "success"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Success;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "unset"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_IndividualOutcome_OutcomeSummary_Unset;

// ----------------------------------------------------------------------------
// GTLRToolResults_MergedResult.state

/**
 *  The finalized, immutable state. Steps/Executions in this state cannot be
 *  modified.
 *
 *  Value: "complete"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_MergedResult_State_Complete;
/**
 *  The Execution/Step is in progress.
 *
 *  Value: "inProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_MergedResult_State_InProgress;
/**
 *  The Execution/Step is created, ready to run, but not running yet. If an
 *  Execution/Step is created without initial state, it is assumed that the
 *  Execution/Step is in PENDING state.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_MergedResult_State_Pending;
/**
 *  Should never be in this state. Exists for proto deserialization backward
 *  compatibility.
 *
 *  Value: "unknownState"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_MergedResult_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRToolResults_NonSdkApi.list

/** Value: "BLACK" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_Black;
/** Value: "GREY" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_Grey;
/** Value: "GREY_MAX_O" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_GreyMaxO;
/** Value: "GREY_MAX_P" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_GreyMaxP;
/** Value: "GREY_MAX_Q" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_GreyMaxQ;
/** Value: "GREY_MAX_R" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_GreyMaxR;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_None;
/** Value: "WHITE" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_NonSdkApi_List_White;

// ----------------------------------------------------------------------------
// GTLRToolResults_Outcome.summary

/**
 *  A run failed, for instance: - One or more test case failed. - A test timed
 *  out. - The application under test crashed.
 *
 *  Value: "failure"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Failure;
/**
 *  A group of steps that were run with the same configuration had both failure
 *  and success outcomes.
 *
 *  Value: "flaky"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Flaky;
/**
 *  Something unexpected happened. The run should still be considered
 *  unsuccessful but this is likely a transient problem and re-running the test
 *  might be successful.
 *
 *  Value: "inconclusive"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Inconclusive;
/**
 *  All tests were skipped, for instance: - All device configurations were
 *  incompatible.
 *
 *  Value: "skipped"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Skipped;
/**
 *  The test matrix run was successful, for instance: - All the test cases
 *  passed. - Robo did not detect a crash of the application under test.
 *
 *  Value: "success"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Success;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "unset"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Outcome_Summary_Unset;

// ----------------------------------------------------------------------------
// GTLRToolResults_PerfMetricsSummary.perfMetrics

/** Value: "cpu" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Cpu;
/** Value: "graphics" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Graphics;
/** Value: "memory" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Memory;
/** Value: "network" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_Network;
/** Value: "perfMetricTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PerfMetricsSummary_PerfMetrics_PerfMetricTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRToolResults_PrimaryStep.rollUp

/**
 *  A run failed, for instance: - One or more test case failed. - A test timed
 *  out. - The application under test crashed.
 *
 *  Value: "failure"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Failure;
/**
 *  A group of steps that were run with the same configuration had both failure
 *  and success outcomes.
 *
 *  Value: "flaky"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Flaky;
/**
 *  Something unexpected happened. The run should still be considered
 *  unsuccessful but this is likely a transient problem and re-running the test
 *  might be successful.
 *
 *  Value: "inconclusive"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Inconclusive;
/**
 *  All tests were skipped, for instance: - All device configurations were
 *  incompatible.
 *
 *  Value: "skipped"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Skipped;
/**
 *  The test matrix run was successful, for instance: - All the test cases
 *  passed. - Robo did not detect a crash of the application under test.
 *
 *  Value: "success"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Success;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "unset"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_PrimaryStep_RollUp_Unset;

// ----------------------------------------------------------------------------
// GTLRToolResults_Step.state

/**
 *  The finalized, immutable state. Steps/Executions in this state cannot be
 *  modified.
 *
 *  Value: "complete"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Step_State_Complete;
/**
 *  The Execution/Step is in progress.
 *
 *  Value: "inProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Step_State_InProgress;
/**
 *  The Execution/Step is created, ready to run, but not running yet. If an
 *  Execution/Step is created without initial state, it is assumed that the
 *  Execution/Step is in PENDING state.
 *
 *  Value: "pending"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Step_State_Pending;
/**
 *  Should never be in this state. Exists for proto deserialization backward
 *  compatibility.
 *
 *  Value: "unknownState"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_Step_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRToolResults_SuggestionClusterProto.category

/** Value: "contentLabeling" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionClusterProto_Category_ContentLabeling;
/** Value: "implementation" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionClusterProto_Category_Implementation;
/** Value: "lowContrast" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionClusterProto_Category_LowContrast;
/** Value: "touchTargetSize" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionClusterProto_Category_TouchTargetSize;
/** Value: "unknownCategory" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionClusterProto_Category_UnknownCategory;

// ----------------------------------------------------------------------------
// GTLRToolResults_SuggestionProto.priority

/** Value: "error" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionProto_Priority_Error;
/** Value: "info" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionProto_Priority_Info;
/** Value: "unknownPriority" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionProto_Priority_UnknownPriority;
/** Value: "warning" */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_SuggestionProto_Priority_Warning;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestCase.status

/**
 *  Test encountered an error
 *
 *  Value: "error"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestCase_Status_Error;
/**
 *  Test failed.
 *
 *  Value: "failed"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestCase_Status_Failed;
/**
 *  Test flaked. Present only for rollup test cases; test cases from steps that
 *  were run with the same configuration had both failure and success outcomes.
 *
 *  Value: "flaky"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestCase_Status_Flaky;
/**
 *  Test passed.
 *
 *  Value: "passed"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestCase_Status_Passed;
/**
 *  Test skipped
 *
 *  Value: "skipped"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestCase_Status_Skipped;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.category

/**
 *  Issue is not specific to a particular test kind (e.g., a native crash).
 *
 *  Value: "common"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_Common;
/**
 *  Issue is specific to Robo run.
 *
 *  Value: "robo"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_Robo;
/**
 *  Default unspecified category. Do not use. For versioning only.
 *
 *  Value: "unspecifiedCategory"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Category_UnspecifiedCategory;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.severity

/**
 *  Non critical issue, providing users with some info about the test run.
 *
 *  Value: "info"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Info;
/**
 *  Critical issue.
 *
 *  Value: "severe"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Severe;
/**
 *  Non critical issue, providing users with some hints on improving their
 *  testing experience, e.g., suggesting to use Game Loops.
 *
 *  Value: "suggestion"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Suggestion;
/**
 *  Default unspecified severity. Do not use. For versioning only.
 *
 *  Value: "unspecifiedSeverity"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_UnspecifiedSeverity;
/**
 *  Potentially critical issue.
 *
 *  Value: "warning"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRToolResults_TestIssue.type

/**
 *  Issue is an ANR crash.
 *
 *  Value: "anr"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_Anr;
/**
 *  The app-under-test has deep links, but none were provided to Robo.
 *
 *  Value: "availableDeepLinks"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_AvailableDeepLinks;
/**
 *  Blank screen is found in the Robo crawl
 *
 *  Value: "blankScreen"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_BlankScreen;
/**
 *  Issue is a suggestion to use orchestrator.
 *
 *  Value: "compatibleWithOrchestrator"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_CompatibleWithOrchestrator;
/**
 *  A Robo script was fully and successfully executed.
 *
 *  Value: "completeRoboScriptExecution"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_CompleteRoboScriptExecution;
/**
 *  Crash dialog was detected during the test execution
 *
 *  Value: "crashDialogError"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_CrashDialogError;
/**
 *  Robo detected a splash screen provided by app (vs. Android OS splash
 *  screen).
 *
 *  Value: "detectedAppSplashScreen"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_DetectedAppSplashScreen;
/**
 *  Device running out of memory was detected
 *
 *  Value: "deviceOutOfMemory"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_DeviceOutOfMemory;
/**
 *  Robo crawl encountered at least one probable login screen.
 *
 *  Value: "encounteredLoginScreen"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_EncounteredLoginScreen;
/**
 *  Robo crawl encountered at least one screen with elements that are not
 *  Android UI widgets.
 *
 *  Value: "encounteredNonAndroidUiWidgetScreen"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_EncounteredNonAndroidUiWidgetScreen;
/**
 *  The APK failed to install.
 *
 *  Value: "failedToInstall"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_FailedToInstall;
/**
 *  Issue is a fatal exception.
 *
 *  Value: "fatalException"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_FatalException;
/**
 *  Robo crawl involved some in-app purchases.
 *
 *  Value: "inAppPurchases"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_InAppPurchases;
/**
 *  A Robo script was not fully executed.
 *
 *  Value: "incompleteRoboScriptExecution"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IncompleteRoboScriptExecution;
/**
 *  Robo did not crawl some potentially important parts of the app.
 *
 *  Value: "insufficientCoverage"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_InsufficientCoverage;
/**
 *  iOS App crashed without an exception (e.g. killed).
 *
 *  Value: "iosCrash"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IosCrash;
/**
 *  iOS App crashed with an exception.
 *
 *  Value: "iosException"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_IosException;
/**
 *  Issue with finding a launcher activity
 *
 *  Value: "launcherActivityNotFound"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_LauncherActivityNotFound;
/**
 *  Problems detected while collecting logcat
 *
 *  Value: "logcatCollectionError"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_LogcatCollectionError;
/**
 *  Issue is a native crash.
 *
 *  Value: "nativeCrash"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_NativeCrash;
/**
 *  App accessed a non-sdk Api (new detailed report)
 *
 *  Value: "nonSdkApiUsageReport"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_NonSdkApiUsageReport;
/**
 *  App accessed a non-sdk Api.
 *
 *  Value: "nonSdkApiUsageViolation"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_NonSdkApiUsageViolation;
/**
 *  Overlapping UI elements are found in the Robo crawl
 *
 *  Value: "overlappingUiElements"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_OverlappingUiElements;
/**
 *  Robo signed in with Google.
 *
 *  Value: "performedGoogleLogin"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_PerformedGoogleLogin;
/**
 *  Robo crawl involved performing some monkey actions.
 *
 *  Value: "performedMonkeyActions"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_PerformedMonkeyActions;
/**
 *  Issue with resolving a user-provided intent to start an activity
 *
 *  Value: "startActivityNotFound"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_StartActivityNotFound;
/**
 *  UI element depth is greater than the threshold
 *
 *  Value: "uiElementsTooDeep"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UiElementsTooDeep;
/**
 *  An uncaught Unity exception was detected (these don't crash apps).
 *
 *  Value: "unityException"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UnityException;
/**
 *  Default unspecified type. Do not use. For versioning only.
 *
 *  Value: "unspecifiedType"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UnspecifiedType;
/**
 *  Issue is an unused robo directive.
 *
 *  Value: "unusedRoboDirective"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UnusedRoboDirective;
/**
 *  Robo crawl used a Robo directive.
 *
 *  Value: "usedRoboDirective"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UsedRoboDirective;
/**
 *  Robo crawl used a Robo directive to ignore an UI element.
 *
 *  Value: "usedRoboIgnoreDirective"
 */
FOUNDATION_EXTERN NSString * const kGTLRToolResults_TestIssue_Type_UsedRoboIgnoreDirective;

/**
 *  Android app information.
 */
@interface GTLRToolResults_AndroidAppInfo : GTLRObject

/** The name of the app. Optional */
@property(nonatomic, copy, nullable) NSString *name;

/** The package name of the app. Required. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The internal version code of the app. Optional. */
@property(nonatomic, copy, nullable) NSString *versionCode;

/** The version name of the app. Optional. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  A test of an Android application that can control an Android component
 *  independently of its normal lifecycle. See for more information on types of
 *  Android tests.
 */
@interface GTLRToolResults_AndroidInstrumentationTest : GTLRObject

/** The java package for the test to be executed. Required */
@property(nonatomic, copy, nullable) NSString *testPackageId;

/** The InstrumentationTestRunner class. Required */
@property(nonatomic, copy, nullable) NSString *testRunnerClass;

/**
 *  Each target must be fully qualified with the package name or class name, in
 *  one of these formats: - "package package_name" - "class
 *  package_name.class_name" - "class package_name.class_name#method_name" If
 *  empty, all targets in the module will be run.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testTargets;

/**
 *  The flag indicates whether Android Test Orchestrator will be used to run
 *  test or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useOrchestrator;

@end


/**
 *  A test of an android application that explores the application on a virtual
 *  or physical Android device, finding culprits and crashes as it goes.
 */
@interface GTLRToolResults_AndroidRoboTest : GTLRObject

/** The initial activity that should be used to start the app. Optional */
@property(nonatomic, copy, nullable) NSString *appInitialActivity;

/** The java package for the bootstrap. Optional */
@property(nonatomic, copy, nullable) NSString *bootstrapPackageId;

/** The runner class for the bootstrap. Optional */
@property(nonatomic, copy, nullable) NSString *bootstrapRunnerClass;

/**
 *  The max depth of the traversal stack Robo can explore. Optional
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDepth;

/**
 *  The max number of steps/actions Robo can execute. Default is no limit (0).
 *  Optional
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSteps;

@end


/**
 *  An Android mobile test specification.
 */
@interface GTLRToolResults_AndroidTest : GTLRObject

/** Information about the application under test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidAppInfo *androidAppInfo;

/** An Android instrumentation test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidInstrumentationTest *androidInstrumentationTest;

/** An Android robo test. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidRoboTest *androidRoboTest;

/** An Android test loop. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidTestLoop *androidTestLoop;

/** Max time a test is allowed to run before it is automatically cancelled. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *testTimeout;

@end


/**
 *  Test Loops are tests that can be launched by the app itself, determining
 *  when to run by listening for an intent.
 */
@interface GTLRToolResults_AndroidTestLoop : GTLRObject
@end


/**
 *  Additional details for an ANR crash.
 */
@interface GTLRToolResults_ANR : GTLRObject

/** The stack trace of the ANR crash. Optional. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

@end


/**
 *  `Any` contains an arbitrary serialized protocol buffer message along with a
 *  URL that describes the type of the serialized message. Protobuf library
 *  provides support to pack/unpack Any values in the form of utility functions
 *  or additional generated methods of the Any type. Example 1: Pack and unpack
 *  a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if
 *  (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java.
 *  Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo =
 *  any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo
 *  = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR):
 *  any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo :=
 *  &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err
 *  := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods
 *  provided by protobuf library will by default use
 *  'type.googleapis.com/full.type.name' as the type URL and the unpack methods
 *  only use the fully qualified type name after the last '/' in the type URL,
 *  for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON
 *  representation of an `Any` value uses the regular representation of the
 *  deserialized, embedded message, with an additional field `\@type` which
 *  contains the type URL. Example: package google.profile; message Person {
 *  string first_name = 1; string last_name = 2; } { "\@type":
 *  "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If
 *  the embedded message type is well-known and has a custom JSON
 *  representation, that representation will be embedded adding a field `value`
 *  which holds the custom JSON in addition to the `\@type` field. Example (for
 *  message google.protobuf.Duration): { "\@type":
 *  "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
 */
@interface GTLRToolResults_Any : GTLRObject

/**
 *  A URL/resource name that uniquely identifies the type of the serialized
 *  protocol buffer message. This string must contain at least one "/"
 *  character. The last segment of the URL's path must represent the fully
 *  qualified name of the type (as in `path/google.protobuf.Duration`). The name
 *  should be in a canonical form (e.g., leading "." is not accepted). In
 *  practice, teams usually precompile into the binary all types that they
 *  expect it to use in the context of Any. However, for URLs which use the
 *  scheme `http`, `https`, or no scheme, one can optionally set up a type
 *  server that maps type URLs to message definitions as follows: * If no scheme
 *  is provided, `https` is assumed. * An HTTP GET on the URL must yield a
 *  google.protobuf.Type value in binary format, or produce an error. *
 *  Applications are allowed to cache lookup results based on the URL, or have
 *  them precompiled into a binary to avoid any lookup. Therefore, binary
 *  compatibility needs to be preserved on changes to types. (Use versioned type
 *  names to manage breaking changes.) Note: this functionality is not currently
 *  available in the official protobuf release, and it is not used for type URLs
 *  beginning with type.googleapis.com. Schemes other than `http`, `https` (or
 *  the empty scheme) might be used with implementation specific semantics.
 */
@property(nonatomic, copy, nullable) NSString *typeUrl;

/**
 *  Must be a valid serialized protocol buffer of the above specified type.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRToolResults_AppStartTime
 */
@interface GTLRToolResults_AppStartTime : GTLRObject

/**
 *  Optional. The time from app start to reaching the developer-reported "fully
 *  drawn" time. This is only stored if the app includes a call to
 *  Activity.reportFullyDrawn(). See
 *  https://developer.android.com/topic/performance/launch-time.html#time-full
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *fullyDrawnTime;

/**
 *  The time from app start to the first displayed activity being drawn, as
 *  reported in Logcat. See
 *  https://developer.android.com/topic/performance/launch-time.html#time-initial
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *initialDisplayTime;

@end


/**
 *  A suggestion to use deep links for a Robo run.
 */
@interface GTLRToolResults_AvailableDeepLinks : GTLRObject
@end


/**
 *  Encapsulates the metadata for basic sample series represented by a line
 *  chart
 */
@interface GTLRToolResults_BasicPerfSampleSeries : GTLRObject

/**
 *  perfMetricType
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Cpu Value
 *        "cpu"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Graphics
 *        Value "graphics"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Memory Value
 *        "memory"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_Network
 *        Value "network"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfMetricType_PerfMetricTypeUnspecified
 *        Value "perfMetricTypeUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *perfMetricType;

/**
 *  perfUnit
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Byte Value "byte"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_BytesPerSecond
 *        Value "bytesPerSecond"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_FramesPerSecond
 *        Value "framesPerSecond"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Kibibyte Value
 *        "kibibyte"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_Percent Value
 *        "percent"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_PerfUnit_PerfUnitUnspecified
 *        Value "perfUnitUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *perfUnit;

/**
 *  sampleSeriesLabel
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuKernel
 *        Value "cpuKernel"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuTotal
 *        Value "cpuTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_CpuUser
 *        CPU sample series (Value: "cpuUser")
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_GraphicsFrameRate
 *        Graphics sample series (Value: "graphicsFrameRate")
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssPrivate
 *        Memory sample series (Value: "memoryRssPrivate")
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssShared
 *        Value "memoryRssShared"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryRssTotal
 *        Value "memoryRssTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_MemoryTotal
 *        Value "memoryTotal"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkReceived
 *        Value "networkReceived"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NetworkSent
 *        Value "networkSent"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesReceived
 *        Value "ntBytesReceived"
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_NtBytesTransferred
 *        Network sample series (Value: "ntBytesTransferred")
 *    @arg @c kGTLRToolResults_BasicPerfSampleSeries_SampleSeriesLabel_SampleSeriesTypeUnspecified
 *        Value "sampleSeriesTypeUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *sampleSeriesLabel;

@end


/**
 *  The request must provide up to a maximum of 5000 samples to be created; a
 *  larger sample size will cause an INVALID_ARGUMENT error
 */
@interface GTLRToolResults_BatchCreatePerfSamplesRequest : GTLRObject

/** The set of PerfSamples to create should not include existing timestamps */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  GTLRToolResults_BatchCreatePerfSamplesResponse
 */
@interface GTLRToolResults_BatchCreatePerfSamplesResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  A warning that Robo encountered a screen that was mostly blank; this may
 *  indicate a problem with the app.
 */
@interface GTLRToolResults_BlankScreen : GTLRObject

/** The screen id of the element */
@property(nonatomic, copy, nullable) NSString *screenId;

@end


/**
 *  GTLRToolResults_CPUInfo
 */
@interface GTLRToolResults_CPUInfo : GTLRObject

/**
 *  description of the device processor ie '1.8 GHz hexa core 64-bit ARMv8-A'
 */
@property(nonatomic, copy, nullable) NSString *cpuProcessor;

/**
 *  the CPU clock speed in GHz
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuSpeedInGhz;

/**
 *  the number of CPU cores
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberOfCores;

@end


/**
 *  Crash dialog was detected during the test execution
 */
@interface GTLRToolResults_CrashDialogError : GTLRObject

/** The name of the package that caused the dialog. */
@property(nonatomic, copy, nullable) NSString *crashPackage;

@end


/**
 *  A notification that Robo detected a splash screen provided by app (vs.
 *  Android OS splash screen).
 */
@interface GTLRToolResults_DetectedAppSplashScreen : GTLRObject
@end


/**
 *  A warning that device ran out of memory
 */
@interface GTLRToolResults_DeviceOutOfMemory : GTLRObject
@end


/**
 *  A Duration represents a signed, fixed-length span of time represented as a
 *  count of seconds and fractions of seconds at nanosecond resolution. It is
 *  independent of any calendar and concepts like "day" or "month". It is
 *  related to Timestamp in that the difference between two Timestamp values is
 *  a Duration and it can be added or subtracted from a Timestamp. Range is
 *  approximately +-10,000 years.
 */
@interface GTLRToolResults_Duration : GTLRObject

/**
 *  Signed fractions of a second at nanosecond resolution of the span of time.
 *  Durations less than one second are represented with a 0 `seconds` field and
 *  a positive or negative `nanos` field. For durations of one second or more, a
 *  non-zero value for the `nanos` field must be of the same sign as the
 *  `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Signed seconds of the span of time. Must be from -315,576,000,000 to
 *  +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min
 *  * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Additional details about encountered login screens.
 */
@interface GTLRToolResults_EncounteredLoginScreen : GTLRObject

/**
 *  Number of encountered distinct login screens.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distinctScreens;

/** Subset of login screens. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *screenIds;

@end


/**
 *  Additional details about encountered screens with elements that are not
 *  Android UI widgets.
 */
@interface GTLRToolResults_EncounteredNonAndroidUiWidgetScreen : GTLRObject

/**
 *  Number of encountered distinct screens with non Android UI widgets.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distinctScreens;

/** Subset of screens which contain non Android UI widgets. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *screenIds;

@end


/**
 *  An Environment represents the set of test runs (Steps) from the parent
 *  Execution that are configured with the same set of dimensions (Model,
 *  Version, Locale, and Orientation). Multiple such runs occur particularly
 *  because of features like sharding (splitting up a test suite to run in
 *  parallel across devices) and reruns (running a test multiple times to check
 *  for different outcomes).
 */
@interface GTLRToolResults_Environment : GTLRObject

/**
 *  Output only. The time when the Environment status was set to complete. This
 *  value will be set automatically when state transitions to COMPLETE.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *completionTime;

/** Output only. The time when the Environment was created. */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  Dimension values describing the environment. Dimension values always consist
 *  of "Model", "Version", "Locale", and "Orientation". - In response: always
 *  set - In create request: always set - In update request: never set
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_EnvironmentDimensionValueEntry *> *dimensionValue;

/**
 *  A short human-readable name to display in the UI. Maximum of 100 characters.
 *  For example: Nexus 5, API 27.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. An Environment id. */
@property(nonatomic, copy, nullable) NSString *environmentId;

/** Merged result of the environment. */
@property(nonatomic, strong, nullable) GTLRToolResults_MergedResult *environmentResult;

/** Output only. An Execution id. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Output only. A History id. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Output only. A Project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** The location where output files are stored in the user bucket. */
@property(nonatomic, strong, nullable) GTLRToolResults_ResultsStorage *resultsStorage;

/**
 *  Output only. Summaries of shards. Only one shard will present unless
 *  sharding feature is enabled in TestExecutionService.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ShardSummary *> *shardSummaries;

@end


/**
 *  GTLRToolResults_EnvironmentDimensionValueEntry
 */
@interface GTLRToolResults_EnvironmentDimensionValueEntry : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  An Execution represents a collection of Steps. For instance, it could
 *  represent: - a mobile test executed across a range of device configurations
 *  - a jenkins job with a build step followed by a test step The maximum size
 *  of an execution message is 1 MiB. An Execution can be updated until its
 *  state is set to COMPLETE at which point it becomes immutable.
 */
@interface GTLRToolResults_Execution : GTLRObject

/**
 *  The time when the Execution status transitioned to COMPLETE. This value will
 *  be set automatically when state transitions to COMPLETE. - In response: set
 *  if the execution state is COMPLETE. - In create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *completionTime;

/**
 *  The time when the Execution was created. This value will be set
 *  automatically when CreateExecution is called. - In response: always set - In
 *  create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  The dimensions along which different steps in this execution may vary. This
 *  must remain fixed over the life of the execution. Returns INVALID_ARGUMENT
 *  if this field is set in an update request. Returns INVALID_ARGUMENT if the
 *  same name occurs in more than one dimension_definition. Returns
 *  INVALID_ARGUMENT if the size of the list is over 100. - In response: present
 *  if set by create - In create request: optional - In update request: never
 *  set
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_MatrixDimensionDefinition *> *dimensionDefinitions;

/**
 *  A unique identifier within a History for this Execution. Returns
 *  INVALID_ARGUMENT if this field is set or overwritten by the caller. - In
 *  response always set - In create/update request: never set
 */
@property(nonatomic, copy, nullable) NSString *executionId;

/**
 *  Classify the result, for example into SUCCESS or FAILURE - In response:
 *  present if set by create/update request - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Outcome *outcome;

/**
 *  Lightweight information about execution request. - In response: present if
 *  set by create - In create: optional - In update: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Specification *specification;

/**
 *  The initial state is IN_PROGRESS. The only legal state transitions is from
 *  IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an
 *  invalid transition is requested. The state can only be set to COMPLETE once.
 *  A FAILED_PRECONDITION will be returned if the state is set to COMPLETE
 *  multiple times. If the state is set to COMPLETE, all the in-progress steps
 *  within the execution will be set as COMPLETE. If the outcome of the step is
 *  not set, the outcome will be set to INCONCLUSIVE. - In response always set -
 *  In create/update request: optional
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Execution_State_Complete The finalized, immutable
 *        state. Steps/Executions in this state cannot be modified. (Value:
 *        "complete")
 *    @arg @c kGTLRToolResults_Execution_State_InProgress The Execution/Step is
 *        in progress. (Value: "inProgress")
 *    @arg @c kGTLRToolResults_Execution_State_Pending The Execution/Step is
 *        created, ready to run, but not running yet. If an Execution/Step is
 *        created without initial state, it is assumed that the Execution/Step
 *        is in PENDING state. (Value: "pending")
 *    @arg @c kGTLRToolResults_Execution_State_UnknownState Should never be in
 *        this state. Exists for proto deserialization backward compatibility.
 *        (Value: "unknownState")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  TestExecution Matrix ID that the TestExecutionService uses. - In response:
 *  present if set by create - In create: optional - In update: never set
 */
@property(nonatomic, copy, nullable) NSString *testExecutionMatrixId;

@end


/**
 *  Failed to install the APK.
 */
@interface GTLRToolResults_FailedToInstall : GTLRObject
@end


/**
 *  Details for an outcome with a FAILURE outcome summary.
 */
@interface GTLRToolResults_FailureDetail : GTLRObject

/**
 *  If the failure was severe because the system (app) under test crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crashed;

/**
 *  If the device ran out of memory during a test, causing the test to crash.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceOutOfMemory;

/**
 *  If the Roboscript failed to complete successfully, e.g., because a
 *  Roboscript action or assertion failed or a Roboscript action could not be
 *  matched during the entire crawl.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedRoboscript;

/**
 *  If an app is not installed and thus no test can be run with the app. This
 *  might be caused by trying to run a test on an unsupported platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *notInstalled;

/**
 *  If a native process (including any other than the app) crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *otherNativeCrash;

/**
 *  If the test overran some time limit, and that is why it failed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timedOut;

/**
 *  If the robo was unable to crawl the app; perhaps because the app did not
 *  start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unableToCrawl;

@end


/**
 *  Additional details for a fatal exception.
 */
@interface GTLRToolResults_FatalException : GTLRObject

/** The stack trace of the fatal exception. Optional. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

@end


/**
 *  A reference to a file.
 */
@interface GTLRToolResults_FileReference : GTLRObject

/**
 *  The URI of a file stored in Google Cloud Storage. For example:
 *  http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format:
 *  gs://mybucket/path/to/test.xml with version-specific info,
 *  gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error
 *  will be returned if the URI format is not supported. - In response: always
 *  set - In create/update request: always set
 */
@property(nonatomic, copy, nullable) NSString *fileUri;

@end


/**
 *  Graphics statistics for the App. The information is collected from 'adb
 *  shell dumpsys graphicsstats'. For more info see:
 *  https://developer.android.com/training/testing/performance.html Statistics
 *  will only be present for API 23+.
 */
@interface GTLRToolResults_GraphicsStats : GTLRObject

/**
 *  Histogram of frame render times. There should be 154 buckets ranging from
 *  [5ms, 6ms) to [4950ms, infinity)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_GraphicsStatsBucket *> *buckets;

/**
 *  Total "high input latency" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *highInputLatencyCount;

/**
 *  Total frames with slow render time. Should be <= total_frames.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jankyFrames;

/**
 *  Total "missed vsync" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *missedVsyncCount;

/**
 *  50th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p50Millis;

/**
 *  90th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p90Millis;

/**
 *  95th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p95Millis;

/**
 *  99th percentile frame render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *p99Millis;

/**
 *  Total "slow bitmap upload" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowBitmapUploadCount;

/**
 *  Total "slow draw" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowDrawCount;

/**
 *  Total "slow UI thread" events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slowUiThreadCount;

/**
 *  Total frames rendered by package.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalFrames;

@end


/**
 *  GTLRToolResults_GraphicsStatsBucket
 */
@interface GTLRToolResults_GraphicsStatsBucket : GTLRObject

/**
 *  Number of frames in the bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *frameCount;

/**
 *  Lower bound of render time in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *renderMillis;

@end


/**
 *  A History represents a sorted list of Executions ordered by the
 *  start_timestamp_millis field (descending). It can be used to group all the
 *  Executions of a continuous build. Note that the ordering only operates on
 *  one-dimension. If a repository has multiple branches, it means that multiple
 *  histories will need to be used in order to order Executions per branch.
 */
@interface GTLRToolResults_History : GTLRObject

/**
 *  A short human-readable (plain text) name to display in the UI. Maximum of
 *  100 characters. - In response: present if set during create. - In create
 *  request: optional
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  A unique identifier within a project for this History. Returns
 *  INVALID_ARGUMENT if this field is set or overwritten by the caller. - In
 *  response always set - In create request: never set
 */
@property(nonatomic, copy, nullable) NSString *historyId;

/**
 *  A name to uniquely identify a history within a project. Maximum of 200
 *  characters. - In response always set - In create request: always set
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The platform of the test history. - In response: always set. Returns the
 *  platform of the last execution if unknown.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_History_TestPlatform_Android Value "android"
 *    @arg @c kGTLRToolResults_History_TestPlatform_Ios Value "ios"
 *    @arg @c kGTLRToolResults_History_TestPlatform_UnknownPlatform Value
 *        "unknownPlatform"
 */
@property(nonatomic, copy, nullable) NSString *testPlatform;

@end


/**
 *  An image, with a link to the main image and a thumbnail.
 */
@interface GTLRToolResults_Image : GTLRObject

/** An error explaining why the thumbnail could not be rendered. */
@property(nonatomic, strong, nullable) GTLRToolResults_Status *error;

/**
 *  A reference to the full-size, original image. This is the same as the
 *  tool_outputs entry for the image under its Step. Always set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolOutputReference *sourceImage;

/** The step to which the image is attached. Always set. */
@property(nonatomic, copy, nullable) NSString *stepId;

/** The thumbnail. */
@property(nonatomic, strong, nullable) GTLRToolResults_Thumbnail *thumbnail;

@end


/**
 *  Additional details of in-app purchases encountered during the crawl.
 */
@interface GTLRToolResults_InAppPurchasesFound : GTLRObject

/**
 *  The total number of in-app purchases flows explored: how many times the robo
 *  tries to buy a SKU.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inAppPurchasesFlowsExplored;

/**
 *  The total number of in-app purchases flows started.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inAppPurchasesFlowsStarted;

@end


/**
 *  Details for an outcome with an INCONCLUSIVE outcome summary.
 */
@interface GTLRToolResults_InconclusiveDetail : GTLRObject

/**
 *  If the end user aborted the test execution before a pass or fail could be
 *  determined. For example, the user pressed ctrl-c which sent a kill signal to
 *  the test runner while the test was running.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *abortedByUser;

/**
 *  If results are being provided to the user in certain cases of infrastructure
 *  failures
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasErrorLogs;

/**
 *  If the test runner could not determine success or failure because the test
 *  depends on a component other than the system under test which failed. For
 *  example, a mobile test requires provisioning a device where the test
 *  executes, and that provisioning can fail.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *infrastructureFailure;

@end


/**
 *  Step Id and outcome of each individual step that was run as a group with
 *  other steps with the same configuration.
 */
@interface GTLRToolResults_IndividualOutcome : GTLRObject

/**
 *  Unique int given to each step. Ranges from 0(inclusive) to total number of
 *  steps(exclusive). The primary step is 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multistepNumber;

/**
 *  outcomeSummary
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Failure A run
 *        failed, for instance: - One or more test case failed. - A test timed
 *        out. - The application under test crashed. (Value: "failure")
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Flaky A group of
 *        steps that were run with the same configuration had both failure and
 *        success outcomes. (Value: "flaky")
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Inconclusive
 *        Something unexpected happened. The run should still be considered
 *        unsuccessful but this is likely a transient problem and re-running the
 *        test might be successful. (Value: "inconclusive")
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Skipped All
 *        tests were skipped, for instance: - All device configurations were
 *        incompatible. (Value: "skipped")
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Success The test
 *        matrix run was successful, for instance: - All the test cases passed.
 *        - Robo did not detect a crash of the application under test. (Value:
 *        "success")
 *    @arg @c kGTLRToolResults_IndividualOutcome_OutcomeSummary_Unset Do not
 *        use. For proto versioning only. (Value: "unset")
 */
@property(nonatomic, copy, nullable) NSString *outcomeSummary;

/** How long it took for this step to run. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *runDuration;

@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  A warning that Robo did not crawl potentially important parts of the app.
 */
@interface GTLRToolResults_InsufficientCoverage : GTLRObject
@end


/**
 *  Additional details for an iOS app crash.
 */
@interface GTLRToolResults_IosAppCrashed : GTLRObject

/** The stack trace, if one is available. Optional. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

@end


/**
 *  iOS app information
 */
@interface GTLRToolResults_IosAppInfo : GTLRObject

/** The name of the app. Required */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A Robo test for an iOS application.
 */
@interface GTLRToolResults_IosRoboTest : GTLRObject
@end


/**
 *  A iOS mobile test specification
 */
@interface GTLRToolResults_IosTest : GTLRObject

/** Information about the application under test. */
@property(nonatomic, strong, nullable) GTLRToolResults_IosAppInfo *iosAppInfo;

/** An iOS Robo test. */
@property(nonatomic, strong, nullable) GTLRToolResults_IosRoboTest *iosRoboTest;

/** An iOS test loop. */
@property(nonatomic, strong, nullable) GTLRToolResults_IosTestLoop *iosTestLoop;

/** An iOS XCTest. */
@property(nonatomic, strong, nullable) GTLRToolResults_IosXcTest *iosXcTest;

/** Max time a test is allowed to run before it is automatically cancelled. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *testTimeout;

@end


/**
 *  A game loop test of an iOS application.
 */
@interface GTLRToolResults_IosTestLoop : GTLRObject

/** Bundle ID of the app. */
@property(nonatomic, copy, nullable) NSString *bundleId;

@end


/**
 *  A test of an iOS application that uses the XCTest framework.
 */
@interface GTLRToolResults_IosXcTest : GTLRObject

/** Bundle ID of the app. */
@property(nonatomic, copy, nullable) NSString *bundleId;

/** Xcode version that the test was run with. */
@property(nonatomic, copy, nullable) NSString *xcodeVersion;

@end


/**
 *  Failed to find the launcher activity of an app.
 */
@interface GTLRToolResults_LauncherActivityNotFound : GTLRObject
@end


/**
 *  Response message for EnvironmentService.ListEnvironments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "environments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListEnvironmentsResponse : GTLRCollectionObject

/**
 *  Environments. Always set.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Environment *> *environments;

/** A Execution id Always set. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** A History id. Always set. */
@property(nonatomic, copy, nullable) NSString *historyId;

/**
 *  A continuation token to resume the query at the next item. Will only be set
 *  if there are more Environments to fetch.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** A Project id. Always set. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRToolResults_ListExecutionsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListExecutionsResponse : GTLRCollectionObject

/**
 *  Executions. Always set.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Execution *> *executions;

/**
 *  A continuation token to resume the query at the next item. Will only be set
 *  if there are more Executions to fetch.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for HistoryService.List
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "histories" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListHistoriesResponse : GTLRCollectionObject

/**
 *  Histories.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_History *> *histories;

/**
 *  A continuation token to resume the query at the next item. Will only be set
 *  if there are more histories to fetch. Tokens are valid for up to one hour
 *  from the time of the first list request. For instance, if you make a list
 *  request at 1PM and use the token from this first request 10 minutes later,
 *  the token from this second response will only be valid for 50 minutes.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRToolResults_ListPerfSampleSeriesResponse
 */
@interface GTLRToolResults_ListPerfSampleSeriesResponse : GTLRObject

/** The resulting PerfSampleSeries sorted by id */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSampleSeries *> *perfSampleSeries;

@end


/**
 *  GTLRToolResults_ListPerfSamplesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "perfSamples" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListPerfSamplesResponse : GTLRCollectionObject

/**
 *  Optional, returned if result size exceeds the page size specified in the
 *  request (or the default page size, 500, if unspecified). It indicates the
 *  last sample timestamp to be used as page_token in subsequent request
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  perfSamples
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_PerfSample *> *perfSamples;

@end


/**
 *  GTLRToolResults_ListScreenshotClustersResponse
 */
@interface GTLRToolResults_ListScreenshotClustersResponse : GTLRObject

/** The set of clusters associated with an execution Always set */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ScreenshotCluster *> *clusters;

@end


/**
 *  Response message for AccessibilityService.ListStepAccessibilityClusters.
 */
@interface GTLRToolResults_ListStepAccessibilityClustersResponse : GTLRObject

/**
 *  A sequence of accessibility suggestions, grouped into clusters. Within the
 *  sequence, clusters that belong to the same SuggestionCategory should be
 *  adjacent. Within each category, clusters should be ordered by their
 *  SuggestionPriority (ERRORs first). The categories should be ordered by their
 *  highest priority cluster.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_SuggestionClusterProto *> *clusters;

/**
 *  A full resource name of the step. For example,
 *  projects/my-project/histories/bh.1234567890abcdef/executions/
 *  1234567890123456789/steps/bs.1234567890abcdef Always presents.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Response message for StepService.List.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "steps" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListStepsResponse : GTLRCollectionObject

/**
 *  A continuation token to resume the query at the next item. If set, indicates
 *  that there are more steps to read, by calling list again with this value in
 *  the page_token field.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Steps.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Step *> *steps;

@end


/**
 *  A response containing the thumbnails in a step.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "thumbnails" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListStepThumbnailsResponse : GTLRCollectionObject

/**
 *  A continuation token to resume the query at the next item. If set, indicates
 *  that there are more thumbnails to read, by calling list again with this
 *  value in the page_token field.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of image data. Images are returned in a deterministic order; they are
 *  ordered by these factors, in order of importance: * First, by their
 *  associated test case. Images without a test case are considered greater than
 *  images with one. * Second, by their creation time. Images without a creation
 *  time are greater than images with one. * Third, by the order in which they
 *  were added to the step (by calls to CreateStep or UpdateStep).
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Image *> *thumbnails;

@end


/**
 *  Response message for StepService.ListTestCases.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "testCases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRToolResults_ListTestCasesResponse : GTLRCollectionObject

@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of test cases.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestCase *> *testCases;

@end


/**
 *  A warning that there were issues in logcat collection.
 */
@interface GTLRToolResults_LogcatCollectionError : GTLRObject
@end


/**
 *  One dimension of the matrix of different runs of a step.
 */
@interface GTLRToolResults_MatrixDimensionDefinition : GTLRObject
@end


/**
 *  GTLRToolResults_MemoryInfo
 */
@interface GTLRToolResults_MemoryInfo : GTLRObject

/**
 *  Maximum memory that can be allocated to the process in KiB
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryCapInKibibyte;

/**
 *  Total memory available on the device in KiB
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryTotalInKibibyte;

@end


/**
 *  Merged test result for environment. If the environment has only one step (no
 *  reruns or shards), then the merged result is the same as the step result. If
 *  the environment has multiple shards and/or reruns, then the results of
 *  shards and reruns that belong to the same environment are merged into one
 *  environment result.
 */
@interface GTLRToolResults_MergedResult : GTLRObject

/** Outcome of the resource */
@property(nonatomic, strong, nullable) GTLRToolResults_Outcome *outcome;

/**
 *  State of the resource
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_MergedResult_State_Complete The finalized,
 *        immutable state. Steps/Executions in this state cannot be modified.
 *        (Value: "complete")
 *    @arg @c kGTLRToolResults_MergedResult_State_InProgress The Execution/Step
 *        is in progress. (Value: "inProgress")
 *    @arg @c kGTLRToolResults_MergedResult_State_Pending The Execution/Step is
 *        created, ready to run, but not running yet. If an Execution/Step is
 *        created without initial state, it is assumed that the Execution/Step
 *        is in PENDING state. (Value: "pending")
 *    @arg @c kGTLRToolResults_MergedResult_State_UnknownState Should never be
 *        in this state. Exists for proto deserialization backward
 *        compatibility. (Value: "unknownState")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The combined and rolled-up result of each test suite that was run as part of
 *  this environment. Combining: When the test cases from a suite are run in
 *  different steps (sharding), the results are added back together in one
 *  overview. (e.g., if shard1 has 2 failures and shard2 has 1 failure than the
 *  overview failure_count = 3). Rollup: When test cases from the same suite are
 *  run multiple times (flaky), the results are combined (e.g., if
 *  testcase1.run1 fails, testcase1.run2 passes, and both testcase2.run1 and
 *  testcase2.run2 fail then the overview flaky_count = 1 and failure_count =
 *  1).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestSuiteOverview *> *testSuiteOverviews;

@end


/**
 *  Details when multiple steps are run with the same configuration as a group.
 */
@interface GTLRToolResults_MultiStep : GTLRObject

/**
 *  Unique int given to each step. Ranges from 0(inclusive) to total number of
 *  steps(exclusive). The primary step is 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multistepNumber;

/** Present if it is a primary (original) step. */
@property(nonatomic, strong, nullable) GTLRToolResults_PrimaryStep *primaryStep;

/** Step Id of the primary (original) step, which might be this step. */
@property(nonatomic, copy, nullable) NSString *primaryStepId;

@end


/**
 *  Additional details for a native crash.
 */
@interface GTLRToolResults_NativeCrash : GTLRObject

/** The stack trace of the native crash. Optional. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

@end


/**
 *  A non-sdk API and examples of it being called along with other metadata See
 *  https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces
 */
@interface GTLRToolResults_NonSdkApi : GTLRObject

/** The signature of the Non-SDK API */
@property(nonatomic, copy, nullable) NSString *apiSignature;

/** Example stack traces of this API being called. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exampleStackTraces;

/** Optional debugging insights for non-SDK API violations. */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_NonSdkApiInsight *> *insights;

/**
 *  The total number of times this API was observed to have been called.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invocationCount;

/**
 *  Which list this API appears on
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_NonSdkApi_List_Black Value "BLACK"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_Grey Value "GREY"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_GreyMaxO Value "GREY_MAX_O"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_GreyMaxP Value "GREY_MAX_P"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_GreyMaxQ Value "GREY_MAX_Q"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_GreyMaxR Value "GREY_MAX_R"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_None Value "NONE"
 *    @arg @c kGTLRToolResults_NonSdkApi_List_White Value "WHITE"
 */
@property(nonatomic, copy, nullable) NSString *list;

@end


/**
 *  Non-SDK API insights (to address debugging solutions).
 */
@interface GTLRToolResults_NonSdkApiInsight : GTLRObject

/**
 *  Optional sample stack traces, for which this insight applies (there should
 *  be at least one).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exampleTraceMessages;

/**
 *  A unique ID, to be used for determining the effectiveness of this particular
 *  insight in the context of a matcher. (required)
 */
@property(nonatomic, copy, nullable) NSString *matcherId;

/**
 *  An insight indicating that the hidden API usage originates from a
 *  Google-provided library.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_PendingGoogleUpdateInsight *pendingGoogleUpdateInsight;

/**
 *  An insight indicating that the hidden API usage originates from the use of a
 *  library that needs to be upgraded.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_UpgradeInsight *upgradeInsight;

@end


/**
 *  Additional details for a non-sdk API usage violation.
 */
@interface GTLRToolResults_NonSdkApiUsageViolation : GTLRObject

/** Signatures of a subset of those hidden API's. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *apiSignatures;

/**
 *  Total number of unique hidden API's accessed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uniqueApis;

@end


/**
 *  Contains a summary and examples of non-sdk API usage violations.
 */
@interface GTLRToolResults_NonSdkApiUsageViolationReport : GTLRObject

/** Examples of the detected API usages. */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_NonSdkApi *> *exampleApis;

/**
 *  Minimum API level required for the application to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minSdkVersion;

/**
 *  Specifies the API Level on which the application is designed to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetSdkVersion;

/**
 *  Total number of unique Non-SDK API's accessed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uniqueApis;

@end


/**
 *  Interprets a result so that humans and machines can act on it.
 */
@interface GTLRToolResults_Outcome : GTLRObject

/**
 *  More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this
 *  field is set but the summary is not FAILURE. Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FailureDetail *failureDetail;

/**
 *  More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if
 *  this field is set but the summary is not INCONCLUSIVE. Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_InconclusiveDetail *inconclusiveDetail;

/**
 *  More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this
 *  field is set but the summary is not SKIPPED. Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SkippedDetail *skippedDetail;

/**
 *  More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this
 *  field is set but the summary is not SUCCESS. Optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SuccessDetail *successDetail;

/**
 *  The simplest way to interpret a result. Required
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Outcome_Summary_Failure A run failed, for
 *        instance: - One or more test case failed. - A test timed out. - The
 *        application under test crashed. (Value: "failure")
 *    @arg @c kGTLRToolResults_Outcome_Summary_Flaky A group of steps that were
 *        run with the same configuration had both failure and success outcomes.
 *        (Value: "flaky")
 *    @arg @c kGTLRToolResults_Outcome_Summary_Inconclusive Something unexpected
 *        happened. The run should still be considered unsuccessful but this is
 *        likely a transient problem and re-running the test might be
 *        successful. (Value: "inconclusive")
 *    @arg @c kGTLRToolResults_Outcome_Summary_Skipped All tests were skipped,
 *        for instance: - All device configurations were incompatible. (Value:
 *        "skipped")
 *    @arg @c kGTLRToolResults_Outcome_Summary_Success The test matrix run was
 *        successful, for instance: - All the test cases passed. - Robo did not
 *        detect a crash of the application under test. (Value: "success")
 *    @arg @c kGTLRToolResults_Outcome_Summary_Unset Do not use. For proto
 *        versioning only. (Value: "unset")
 */
@property(nonatomic, copy, nullable) NSString *summary;

@end


/**
 *  A warning that Robo encountered a screen that has overlapping clickable
 *  elements; this may indicate a potential UI issue.
 */
@interface GTLRToolResults_OverlappingUIElements : GTLRObject

/** Resource names of the overlapping screen elements */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceName;

/** The screen id of the elements */
@property(nonatomic, copy, nullable) NSString *screenId;

@end


/**
 *  This insight indicates that the hidden API usage originates from a
 *  Google-provided library. Users need not take any action.
 */
@interface GTLRToolResults_PendingGoogleUpdateInsight : GTLRObject

/**
 *  The name of the Google-provided library with the non-SDK API dependency.
 */
@property(nonatomic, copy, nullable) NSString *nameOfGoogleLibrary;

@end


/**
 *  Encapsulates performance environment info
 */
@interface GTLRToolResults_PerfEnvironment : GTLRObject

/** CPU related environment info */
@property(nonatomic, strong, nullable) GTLRToolResults_CPUInfo *cpuInfo;

/** Memory related environment info */
@property(nonatomic, strong, nullable) GTLRToolResults_MemoryInfo *memoryInfo;

@end


/**
 *  A summary of perf metrics collected and performance environment info
 */
@interface GTLRToolResults_PerfMetricsSummary : GTLRObject

@property(nonatomic, strong, nullable) GTLRToolResults_AppStartTime *appStartTime;

/** A tool results execution ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *executionId;

/**
 *  Graphics statistics for the entire run. Statistics are reset at the
 *  beginning of the run and collected at the end of the run.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_GraphicsStats *graphicsStats;

/** A tool results history ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *historyId;

/**
 *  Describes the environment in which the performance metrics were collected
 */
@property(nonatomic, strong, nullable) GTLRToolResults_PerfEnvironment *perfEnvironment;

/** Set of resource collected */
@property(nonatomic, strong, nullable) NSArray<NSString *> *perfMetrics;

/** The cloud project \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *projectId;

/** A tool results step ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  A notification that Robo signed in with Google.
 */
@interface GTLRToolResults_PerformedGoogleLogin : GTLRObject
@end


/**
 *  A notification that Robo performed some monkey actions.
 */
@interface GTLRToolResults_PerformedMonkeyActions : GTLRObject

/**
 *  The total number of monkey actions performed during the crawl.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalActions;

@end


/**
 *  Resource representing a single performance measure or data point
 */
@interface GTLRToolResults_PerfSample : GTLRObject

/** Timestamp of collection. */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *sampleTime;

/**
 *  Value observed
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  Resource representing a collection of performance samples (or data points)
 */
@interface GTLRToolResults_PerfSampleSeries : GTLRObject

/** Basic series represented by a line chart */
@property(nonatomic, strong, nullable) GTLRToolResults_BasicPerfSampleSeries *basicPerfSampleSeries;

/** A tool results execution ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *executionId;

/** A tool results history ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *historyId;

/** The cloud project \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *projectId;

/** A sample series id \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *sampleSeriesId;

/** A tool results step ID. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  Stores rollup test status of multiple steps that were run as a group and
 *  outcome of each individual step.
 */
@interface GTLRToolResults_PrimaryStep : GTLRObject

/** Step Id and outcome of each individual step. */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_IndividualOutcome *> *individualOutcome;

/**
 *  Rollup test status of multiple steps that were run with the same
 *  configuration as a group.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Failure A run failed, for
 *        instance: - One or more test case failed. - A test timed out. - The
 *        application under test crashed. (Value: "failure")
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Flaky A group of steps that
 *        were run with the same configuration had both failure and success
 *        outcomes. (Value: "flaky")
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Inconclusive Something
 *        unexpected happened. The run should still be considered unsuccessful
 *        but this is likely a transient problem and re-running the test might
 *        be successful. (Value: "inconclusive")
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Skipped All tests were
 *        skipped, for instance: - All device configurations were incompatible.
 *        (Value: "skipped")
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Success The test matrix run
 *        was successful, for instance: - All the test cases passed. - Robo did
 *        not detect a crash of the application under test. (Value: "success")
 *    @arg @c kGTLRToolResults_PrimaryStep_RollUp_Unset Do not use. For proto
 *        versioning only. (Value: "unset")
 */
@property(nonatomic, copy, nullable) NSString *rollUp;

@end


/**
 *  Per-project settings for the Tool Results service.
 */
@interface GTLRToolResults_ProjectSettings : GTLRObject

/**
 *  The name of the Google Cloud Storage bucket to which results are written. By
 *  default, this is unset. In update request: optional In response: optional
 */
@property(nonatomic, copy, nullable) NSString *defaultBucket;

/**
 *  The name of the project's settings. Always of the form:
 *  projects/{project-id}/settings In update request: never set In response:
 *  always set
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request message for StepService.PublishXunitXmlFiles.
 */
@interface GTLRToolResults_PublishXunitXmlFilesRequest : GTLRObject

/**
 *  URI of the Xunit XML files to publish. The maximum size of the file this
 *  reference is pointing to is 50MB. Required.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_FileReference *> *xunitXmlFiles;

@end


/**
 *  A rectangular region.
 */
@interface GTLRToolResults_RegionProto : GTLRObject

/**
 *  The height, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightPx;

/**
 *  The left side of the rectangle, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leftPx;

/**
 *  The top of the rectangle, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *topPx;

/**
 *  The width, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthPx;

@end


/**
 *  The storage for test results.
 */
@interface GTLRToolResults_ResultsStorage : GTLRObject

/** The root directory for test results. */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *resultsStoragePath;

/** The path to the Xunit XML file. */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *xunitXmlFile;

@end


/**
 *  Execution stats for a user-provided Robo script.
 */
@interface GTLRToolResults_RoboScriptExecution : GTLRObject

/**
 *  The number of Robo script actions executed successfully.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *successfulActions;

/**
 *  The total number of actions in the Robo script.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalActions;

@end


/**
 *  IMPORTANT: It is unsafe to accept this message from an untrusted source,
 *  since it's trivial for an attacker to forge serialized messages that don't
 *  fulfill the type's safety contract -- for example, it could contain attacker
 *  controlled script. A system which receives a SafeHtmlProto implicitly trusts
 *  the producer of the SafeHtmlProto. So, it's generally safe to return this
 *  message in RPC responses, but generally unsafe to accept it in RPC requests.
 */
@interface GTLRToolResults_SafeHtmlProto : GTLRObject

/**
 *  IMPORTANT: Never set or read this field, even from tests, it is private. See
 *  documentation at the top of .proto file for programming language packages
 *  with which to create or read this message.
 */
@property(nonatomic, copy, nullable) NSString *privateDoNotAccessOrElseSafeHtmlWrappedValue;

@end


/**
 *  GTLRToolResults_Screen
 */
@interface GTLRToolResults_Screen : GTLRObject

/** File reference of the png file. Required. */
@property(nonatomic, copy, nullable) NSString *fileReference;

/** Locale of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *locale;

/** Model of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *model;

/** OS version of the device that the screenshot was taken on. Required. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  GTLRToolResults_ScreenshotCluster
 */
@interface GTLRToolResults_ScreenshotCluster : GTLRObject

/** A string that describes the activity of every screen in the cluster. */
@property(nonatomic, copy, nullable) NSString *activity;

/** A unique identifier for the cluster. \@OutputOnly */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  A singular screen that represents the cluster as a whole. This screen will
 *  act as the "cover" of the entire cluster. When users look at the clusters,
 *  only the key screen from each cluster will be shown. Which screen is the key
 *  screen is determined by the ClusteringAlgorithm
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Screen *keyScreen;

/** Full list of screens. */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Screen *> *screens;

@end


/**
 *  Result summary for a shard in an environment.
 */
@interface GTLRToolResults_ShardSummary : GTLRObject

/**
 *  Summaries of the steps belonging to the shard. With flaky_test_attempts
 *  enabled from TestExecutionService, more than one run (Step) can present. And
 *  the runs will be sorted by multistep_number.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StepSummary *> *runs;

/** Merged result of the shard. */
@property(nonatomic, strong, nullable) GTLRToolResults_MergedResult *shardResult;

@end


/**
 *  Details for an outcome with a SKIPPED outcome summary.
 */
@interface GTLRToolResults_SkippedDetail : GTLRObject

/**
 *  If the App doesn't support the specific API level.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleAppVersion;

/**
 *  If the App doesn't run on the specific architecture, for example, x86.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleArchitecture;

/**
 *  If the requested OS version doesn't run on the specific device model.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *incompatibleDevice;

@end


/**
 *  The details about how to run the execution.
 */
@interface GTLRToolResults_Specification : GTLRObject

/** An Android mobile test execution specification. */
@property(nonatomic, strong, nullable) GTLRToolResults_AndroidTest *androidTest;

/** An iOS mobile test execution specification. */
@property(nonatomic, strong, nullable) GTLRToolResults_IosTest *iosTest;

@end


/**
 *  A stacktrace.
 */
@interface GTLRToolResults_StackTrace : GTLRObject

/** The stack trace message. Required */
@property(nonatomic, copy, nullable) NSString *exception;

@end


/**
 *  User provided intent failed to resolve to an activity.
 */
@interface GTLRToolResults_StartActivityNotFound : GTLRObject

@property(nonatomic, copy, nullable) NSString *action;
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRToolResults_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRToolResults_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRToolResults_Status_Details_Item : GTLRObject
@end


/**
 *  A Step represents a single operation performed as part of Execution. A step
 *  can be used to represent the execution of a tool ( for example a test runner
 *  execution or an execution of a compiler). Steps can overlap (for instance
 *  two steps might have the same start time if some operations are done in
 *  parallel). Here is an example, let's consider that we have a continuous
 *  build is executing a test runner for each iteration. The workflow would look
 *  like: - user creates a Execution with id 1 - user creates an
 *  TestExecutionStep with id 100 for Execution 1 - user update
 *  TestExecutionStep with id 100 to add a raw xml log + the service parses the
 *  xml logs and returns a TestExecutionStep with updated TestResult(s). - user
 *  update the status of TestExecutionStep with id 100 to COMPLETE A Step can be
 *  updated until its state is set to COMPLETE at which points it becomes
 *  immutable. Next tag: 27
 */
@interface GTLRToolResults_Step : GTLRObject

/**
 *  The time when the step status was set to complete. This value will be set
 *  automatically when state transitions to COMPLETE. - In response: set if the
 *  execution state is COMPLETE. - In create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *completionTime;

/**
 *  The time when the step was created. - In response: always set - In
 *  create/update request: never set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  A description of this tool For example: mvn clean package -D skipTests=true
 *  - In response: present if set by create/update request - In create/update
 *  request: optional
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  How much the device resource is used to perform the test. This is the device
 *  usage used for billing purpose, which is different from the run_duration,
 *  for example, infrastructure failure won't be charged for device usage.
 *  PRECONDITION_FAILED will be returned if one attempts to set a device_usage
 *  on a step which already has this field set. - In response: present if
 *  previously set. - In create request: optional - In update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *deviceUsageDuration;

/**
 *  If the execution containing this step has any dimension_definition set, then
 *  this field allows the child to specify the values of the dimensions. The
 *  keys must exactly match the dimension_definition of the execution. For
 *  example, if the execution has `dimension_definition = ['attempt', 'device']`
 *  then a step must define values for those dimensions, eg. `dimension_value =
 *  ['attempt': '1', 'device': 'Nexus 6']` If a step does not participate in one
 *  dimension of the matrix, the value for that dimension should be empty
 *  string. For example, if one of the tests is executed by a runner which does
 *  not support retries, the step could have `dimension_value = ['attempt': '',
 *  'device': 'Nexus 6']` If the step does not participate in any dimensions of
 *  the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will
 *  be returned if any of the keys do not exist in the dimension_definition of
 *  the execution. A PRECONDITION_FAILED will be returned if another step in
 *  this execution already has the same name and dimension_value, but differs on
 *  other data fields, for example, step field is different. A
 *  PRECONDITION_FAILED will be returned if dimension_value is set, and there is
 *  a dimension_definition in the execution which is not specified as one of the
 *  keys. - In response: present if set by create - In create request: optional
 *  - In update request: never set
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StepDimensionValueEntry *> *dimensionValue;

/**
 *  Whether any of the outputs of this step are images whose thumbnails can be
 *  fetched with ListThumbnails. - In response: always set - In create/update
 *  request: never set
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasImages;

/**
 *  Arbitrary user-supplied key/value pairs that are associated with the step.
 *  Users are responsible for managing the key namespace such that keys don't
 *  accidentally collide. An INVALID_ARGUMENT will be returned if the number of
 *  labels exceeds 100 or if the length of any of the keys or values exceeds 100
 *  characters. - In response: always set - In create request: optional - In
 *  update request: optional; any new key/value pair will be added to the map,
 *  and any new value for an existing key will update that key's value
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StepLabelsEntry *> *labels;

/**
 *  Details when multiple steps are run with the same configuration as a group.
 *  These details can be used identify which group this step is part of. It also
 *  identifies the groups 'primary step' which indexes all the group members. -
 *  In response: present if previously set. - In create request: optional, set
 *  iff this step was performed more than once. - In update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_MultiStep *multiStep;

/**
 *  A short human-readable name to display in the UI. Maximum of 100 characters.
 *  For example: Clean build A PRECONDITION_FAILED will be returned upon
 *  creating a new step if it shares its name and dimension_value with an
 *  existing step. If two steps represent a similar action, but have different
 *  dimension values, they should share the same name. For instance, if the same
 *  set of tests is run on two different platforms, the two steps should have
 *  the same name. - In response: always set - In create request: always set -
 *  In update request: never set
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Classification of the result, for example into SUCCESS or FAILURE - In
 *  response: present if set by create/update request - In create/update
 *  request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Outcome *outcome;

/**
 *  How long it took for this step to run. If unset, this is set to the
 *  difference between creation_time and completion_time when the step is set to
 *  the COMPLETE state. In some cases, it is appropriate to set this value
 *  separately: For instance, if a step is created, but the operation it
 *  represents is queued for a few minutes before it executes, it would be
 *  appropriate not to include the time spent queued in its run_duration.
 *  PRECONDITION_FAILED will be returned if one attempts to set a run_duration
 *  on a step which already has this field set. - In response: present if
 *  previously set; always present on COMPLETE step - In create request:
 *  optional - In update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *runDuration;

/**
 *  The initial state is IN_PROGRESS. The only legal state transitions are *
 *  IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid
 *  transition is requested. It is valid to create Step with a state set to
 *  COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED
 *  will be returned if the state is set to COMPLETE multiple times. - In
 *  response: always set - In create/update request: optional
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_Step_State_Complete The finalized, immutable
 *        state. Steps/Executions in this state cannot be modified. (Value:
 *        "complete")
 *    @arg @c kGTLRToolResults_Step_State_InProgress The Execution/Step is in
 *        progress. (Value: "inProgress")
 *    @arg @c kGTLRToolResults_Step_State_Pending The Execution/Step is created,
 *        ready to run, but not running yet. If an Execution/Step is created
 *        without initial state, it is assumed that the Execution/Step is in
 *        PENDING state. (Value: "pending")
 *    @arg @c kGTLRToolResults_Step_State_UnknownState Should never be in this
 *        state. Exists for proto deserialization backward compatibility.
 *        (Value: "unknownState")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  A unique identifier within a Execution for this Step. Returns
 *  INVALID_ARGUMENT if this field is set or overwritten by the caller. - In
 *  response: always set - In create/update request: never set
 */
@property(nonatomic, copy, nullable) NSString *stepId;

/** An execution of a test runner. */
@property(nonatomic, strong, nullable) GTLRToolResults_TestExecutionStep *testExecutionStep;

/** An execution of a tool (used for steps we don't explicitly support). */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecutionStep *toolExecutionStep;

@end


/**
 *  GTLRToolResults_StepDimensionValueEntry
 */
@interface GTLRToolResults_StepDimensionValueEntry : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRToolResults_StepLabelsEntry
 */
@interface GTLRToolResults_StepLabelsEntry : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Lightweight summary of a step within this execution.
 */
@interface GTLRToolResults_StepSummary : GTLRObject
@end


/**
 *  Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
 */
@interface GTLRToolResults_SuccessDetail : GTLRObject

/**
 *  If a native process other than the app crashed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *otherNativeCrash;

@end


/**
 *  A set of similar suggestions that we suspect are closely related. This proto
 *  and most of the nested protos are branched from
 *  foxandcrown.prelaunchreport.service.SuggestionClusterProto, replacing PLR's
 *  dependencies with FTL's.
 */
@interface GTLRToolResults_SuggestionClusterProto : GTLRObject

/**
 *  Category in which these types of suggestions should appear. Always set.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_SuggestionClusterProto_Category_ContentLabeling
 *        Value "contentLabeling"
 *    @arg @c kGTLRToolResults_SuggestionClusterProto_Category_Implementation
 *        Value "implementation"
 *    @arg @c kGTLRToolResults_SuggestionClusterProto_Category_LowContrast Value
 *        "lowContrast"
 *    @arg @c kGTLRToolResults_SuggestionClusterProto_Category_TouchTargetSize
 *        Value "touchTargetSize"
 *    @arg @c kGTLRToolResults_SuggestionClusterProto_Category_UnknownCategory
 *        Value "unknownCategory"
 */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  A sequence of suggestions. All of the suggestions within a cluster must have
 *  the same SuggestionPriority and belong to the same SuggestionCategory.
 *  Suggestions with the same screenshot URL should be adjacent.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_SuggestionProto *> *suggestions;

@end


/**
 *  GTLRToolResults_SuggestionProto
 */
@interface GTLRToolResults_SuggestionProto : GTLRObject

/**
 *  Reference to a help center article concerning this type of suggestion.
 *  Always set.
 */
@property(nonatomic, copy, nullable) NSString *helpUrl;

/**
 *  Message, in the user's language, explaining the suggestion, which may
 *  contain markup. Always set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SafeHtmlProto *longMessage;

/**
 *  Relative importance of a suggestion. Always set.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_SuggestionProto_Priority_Error Value "error"
 *    @arg @c kGTLRToolResults_SuggestionProto_Priority_Info Value "info"
 *    @arg @c kGTLRToolResults_SuggestionProto_Priority_UnknownPriority Value
 *        "unknownPriority"
 *    @arg @c kGTLRToolResults_SuggestionProto_Priority_Warning Value "warning"
 */
@property(nonatomic, copy, nullable) NSString *priority;

/**
 *  A somewhat human readable identifier of the source view, if it does not have
 *  a resource_name. This is a path within the accessibility hierarchy, an
 *  element with resource name; similar to an XPath.
 */
@property(nonatomic, copy, nullable) NSString *pseudoResourceId;

/**
 *  Region within the screenshot that is relevant to this suggestion. Optional.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_RegionProto *region;

/**
 *  Reference to a view element, identified by its resource name, if it has one.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  ID of the screen for the suggestion. It is used for getting the
 *  corresponding screenshot path. For example, screen_id "1" corresponds to
 *  "1.png" file in GCS. Always set.
 */
@property(nonatomic, copy, nullable) NSString *screenId;

/**
 *  Relative importance of a suggestion as compared with other suggestions that
 *  have the same priority and category. This is a meaningless value that can be
 *  used to order suggestions that are in the same category and have the same
 *  priority. The larger values have higher priority (i.e., are more important).
 *  Optional.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *secondaryPriority;

/**
 *  Concise message, in the user's language, representing the suggestion, which
 *  may contain markup. Always set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_SafeHtmlProto *shortMessage;

/**
 *  General title for the suggestion, in the user's language, without markup.
 *  Always set.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRToolResults_TestCase
 */
@interface GTLRToolResults_TestCase : GTLRObject

/** The elapsed run time of the test case. Required. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *elapsedTime;

/** The end time of the test case. */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *endTime;

/** Why the test case was skipped. Present only for skipped test case */
@property(nonatomic, copy, nullable) NSString *skippedMessage;

/**
 *  The stack trace details if the test case failed or encountered an error. The
 *  maximum size of the stack traces is 100KiB, beyond which the stack track
 *  will be truncated. Zero if the test case passed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_StackTrace *> *stackTraces;

/** The start time of the test case. */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *startTime;

/**
 *  The status of the test case. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestCase_Status_Error Test encountered an error
 *        (Value: "error")
 *    @arg @c kGTLRToolResults_TestCase_Status_Failed Test failed. (Value:
 *        "failed")
 *    @arg @c kGTLRToolResults_TestCase_Status_Flaky Test flaked. Present only
 *        for rollup test cases; test cases from steps that were run with the
 *        same configuration had both failure and success outcomes. (Value:
 *        "flaky")
 *    @arg @c kGTLRToolResults_TestCase_Status_Passed Test passed. (Value:
 *        "passed")
 *    @arg @c kGTLRToolResults_TestCase_Status_Skipped Test skipped (Value:
 *        "skipped")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** A unique identifier within a Step for this Test Case. */
@property(nonatomic, copy, nullable) NSString *testCaseId;

/**
 *  Test case reference, e.g. name, class name and test suite name. Required.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_TestCaseReference *testCaseReference;

/**
 *  References to opaque files of any format output by the tool execution.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ToolOutputReference *> *toolOutputs;

@end


/**
 *  A reference to a test case. Test case references are canonically ordered
 *  lexicographically by these three factors: * First, by test_suite_name. *
 *  Second, by class_name. * Third, by name.
 */
@interface GTLRToolResults_TestCaseReference : GTLRObject

/**
 *  The name of the class.
 *
 *  Remapped to 'classNameProperty' to avoid NSObject's 'className'.
 */
@property(nonatomic, copy, nullable) NSString *classNameProperty;

/** The name of the test case. Required. */
@property(nonatomic, copy, nullable) NSString *name;

/** The name of the test suite to which this test case belongs. */
@property(nonatomic, copy, nullable) NSString *testSuiteName;

@end


/**
 *  A step that represents running tests. It accepts ant-junit xml files which
 *  will be parsed into structured test results by the service. Xml file paths
 *  are updated in order to append more files, however they can't be deleted.
 *  Users can also add test results manually by using the test_result field.
 */
@interface GTLRToolResults_TestExecutionStep : GTLRObject

/**
 *  Issues observed during the test execution. For example, if the mobile app
 *  under test crashed during the test, the error message and the stack trace
 *  content can be recorded here to assist debugging. - In response: present if
 *  set by create or update - In create/update request: optional
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestIssue *> *testIssues;

/**
 *  List of test suite overview contents. This could be parsed from xUnit XML
 *  log by server, or uploaded directly by user. This references should only be
 *  called when test suites are fully parsed or uploaded. The maximum allowed
 *  number of test suite overviews per step is 1000. - In response: always set -
 *  In create request: optional - In update request: never (use
 *  publishXunitXmlFiles custom method instead)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_TestSuiteOverview *> *testSuiteOverviews;

/**
 *  The timing break down of the test execution. - In response: present if set
 *  by create or update - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_TestTiming *testTiming;

/**
 *  Represents the execution of the test runner. The exit code of this tool will
 *  be used to determine if the test passed. - In response: always set - In
 *  create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecution *toolExecution;

@end


/**
 *  An issue detected occurring during a test execution.
 */
@interface GTLRToolResults_TestIssue : GTLRObject

/**
 *  Category of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Category_Common Issue is not specific
 *        to a particular test kind (e.g., a native crash). (Value: "common")
 *    @arg @c kGTLRToolResults_TestIssue_Category_Robo Issue is specific to Robo
 *        run. (Value: "robo")
 *    @arg @c kGTLRToolResults_TestIssue_Category_UnspecifiedCategory Default
 *        unspecified category. Do not use. For versioning only. (Value:
 *        "unspecifiedCategory")
 */
@property(nonatomic, copy, nullable) NSString *category;

/** A brief human-readable message describing the issue. Required. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Severity of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Info Non critical issue,
 *        providing users with some info about the test run. (Value: "info")
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Severe Critical issue. (Value:
 *        "severe")
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Suggestion Non critical issue,
 *        providing users with some hints on improving their testing experience,
 *        e.g., suggesting to use Game Loops. (Value: "suggestion")
 *    @arg @c kGTLRToolResults_TestIssue_Severity_UnspecifiedSeverity Default
 *        unspecified severity. Do not use. For versioning only. (Value:
 *        "unspecifiedSeverity")
 *    @arg @c kGTLRToolResults_TestIssue_Severity_Warning Potentially critical
 *        issue. (Value: "warning")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** Deprecated in favor of stack trace fields inside specific warnings. */
@property(nonatomic, strong, nullable) GTLRToolResults_StackTrace *stackTrace;

/**
 *  Type of issue. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRToolResults_TestIssue_Type_Anr Issue is an ANR crash. (Value:
 *        "anr")
 *    @arg @c kGTLRToolResults_TestIssue_Type_AvailableDeepLinks The
 *        app-under-test has deep links, but none were provided to Robo. (Value:
 *        "availableDeepLinks")
 *    @arg @c kGTLRToolResults_TestIssue_Type_BlankScreen Blank screen is found
 *        in the Robo crawl (Value: "blankScreen")
 *    @arg @c kGTLRToolResults_TestIssue_Type_CompatibleWithOrchestrator Issue
 *        is a suggestion to use orchestrator. (Value:
 *        "compatibleWithOrchestrator")
 *    @arg @c kGTLRToolResults_TestIssue_Type_CompleteRoboScriptExecution A Robo
 *        script was fully and successfully executed. (Value:
 *        "completeRoboScriptExecution")
 *    @arg @c kGTLRToolResults_TestIssue_Type_CrashDialogError Crash dialog was
 *        detected during the test execution (Value: "crashDialogError")
 *    @arg @c kGTLRToolResults_TestIssue_Type_DetectedAppSplashScreen Robo
 *        detected a splash screen provided by app (vs. Android OS splash
 *        screen). (Value: "detectedAppSplashScreen")
 *    @arg @c kGTLRToolResults_TestIssue_Type_DeviceOutOfMemory Device running
 *        out of memory was detected (Value: "deviceOutOfMemory")
 *    @arg @c kGTLRToolResults_TestIssue_Type_EncounteredLoginScreen Robo crawl
 *        encountered at least one probable login screen. (Value:
 *        "encounteredLoginScreen")
 *    @arg @c kGTLRToolResults_TestIssue_Type_EncounteredNonAndroidUiWidgetScreen
 *        Robo crawl encountered at least one screen with elements that are not
 *        Android UI widgets. (Value: "encounteredNonAndroidUiWidgetScreen")
 *    @arg @c kGTLRToolResults_TestIssue_Type_FailedToInstall The APK failed to
 *        install. (Value: "failedToInstall")
 *    @arg @c kGTLRToolResults_TestIssue_Type_FatalException Issue is a fatal
 *        exception. (Value: "fatalException")
 *    @arg @c kGTLRToolResults_TestIssue_Type_InAppPurchases Robo crawl involved
 *        some in-app purchases. (Value: "inAppPurchases")
 *    @arg @c kGTLRToolResults_TestIssue_Type_IncompleteRoboScriptExecution A
 *        Robo script was not fully executed. (Value:
 *        "incompleteRoboScriptExecution")
 *    @arg @c kGTLRToolResults_TestIssue_Type_InsufficientCoverage Robo did not
 *        crawl some potentially important parts of the app. (Value:
 *        "insufficientCoverage")
 *    @arg @c kGTLRToolResults_TestIssue_Type_IosCrash iOS App crashed without
 *        an exception (e.g. killed). (Value: "iosCrash")
 *    @arg @c kGTLRToolResults_TestIssue_Type_IosException iOS App crashed with
 *        an exception. (Value: "iosException")
 *    @arg @c kGTLRToolResults_TestIssue_Type_LauncherActivityNotFound Issue
 *        with finding a launcher activity (Value: "launcherActivityNotFound")
 *    @arg @c kGTLRToolResults_TestIssue_Type_LogcatCollectionError Problems
 *        detected while collecting logcat (Value: "logcatCollectionError")
 *    @arg @c kGTLRToolResults_TestIssue_Type_NativeCrash Issue is a native
 *        crash. (Value: "nativeCrash")
 *    @arg @c kGTLRToolResults_TestIssue_Type_NonSdkApiUsageReport App accessed
 *        a non-sdk Api (new detailed report) (Value: "nonSdkApiUsageReport")
 *    @arg @c kGTLRToolResults_TestIssue_Type_NonSdkApiUsageViolation App
 *        accessed a non-sdk Api. (Value: "nonSdkApiUsageViolation")
 *    @arg @c kGTLRToolResults_TestIssue_Type_OverlappingUiElements Overlapping
 *        UI elements are found in the Robo crawl (Value:
 *        "overlappingUiElements")
 *    @arg @c kGTLRToolResults_TestIssue_Type_PerformedGoogleLogin Robo signed
 *        in with Google. (Value: "performedGoogleLogin")
 *    @arg @c kGTLRToolResults_TestIssue_Type_PerformedMonkeyActions Robo crawl
 *        involved performing some monkey actions. (Value:
 *        "performedMonkeyActions")
 *    @arg @c kGTLRToolResults_TestIssue_Type_StartActivityNotFound Issue with
 *        resolving a user-provided intent to start an activity (Value:
 *        "startActivityNotFound")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UiElementsTooDeep UI element depth
 *        is greater than the threshold (Value: "uiElementsTooDeep")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UnityException An uncaught Unity
 *        exception was detected (these don't crash apps). (Value:
 *        "unityException")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UnspecifiedType Default
 *        unspecified type. Do not use. For versioning only. (Value:
 *        "unspecifiedType")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UnusedRoboDirective Issue is an
 *        unused robo directive. (Value: "unusedRoboDirective")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UsedRoboDirective Robo crawl used
 *        a Robo directive. (Value: "usedRoboDirective")
 *    @arg @c kGTLRToolResults_TestIssue_Type_UsedRoboIgnoreDirective Robo crawl
 *        used a Robo directive to ignore an UI element. (Value:
 *        "usedRoboIgnoreDirective")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Warning message with additional details of the issue. Should always be a
 *  message from com.google.devtools.toolresults.v1.warnings
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Any *warning;

@end


/**
 *  A summary of a test suite result either parsed from XML or uploaded directly
 *  by a user. Note: the API related comments are for StepService only. This
 *  message is also being used in ExecutionService in a read only mode for the
 *  corresponding step.
 */
@interface GTLRToolResults_TestSuiteOverview : GTLRObject

/** Elapsed time of test suite. */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *elapsedTime;

/**
 *  Number of test cases in error, typically set by the service by parsing the
 *  xml_source. - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/**
 *  Number of failed test cases, typically set by the service by parsing the
 *  xml_source. May also be set by the user. - In create/response: always set -
 *  In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failureCount;

/**
 *  Number of flaky test cases, set by the service by rolling up flaky test
 *  attempts. Present only for rollup test suite overview at environment level.
 *  A step cannot have flaky test cases.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flakyCount;

/**
 *  The name of the test suite. - In create/response: always set - In update
 *  request: never
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Number of test cases not run, typically set by the service by parsing the
 *  xml_source. - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skippedCount;

/**
 *  Number of test cases, typically set by the service by parsing the
 *  xml_source. - In create/response: always set - In update request: never
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

/**
 *  If this test suite was parsed from XML, this is the URI where the original
 *  XML file is stored. Note: Multiple test suites can share the same xml_source
 *  Returns INVALID_ARGUMENT if the uri format is not supported. - In
 *  create/response: optional - In update request: never
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *xmlSource;

@end


/**
 *  Testing timing break down to know phases.
 */
@interface GTLRToolResults_TestTiming : GTLRObject

/**
 *  How long it took to run the test process. - In response: present if
 *  previously set. - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Duration *testProcessDuration;

@end


/**
 *  A single thumbnail, with its size and format.
 */
@interface GTLRToolResults_Thumbnail : GTLRObject

/** The thumbnail's content type, i.e. "image/png". Always set. */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The thumbnail file itself. That is, the bytes here are precisely the bytes
 *  that make up the thumbnail file; they can be served as an image as-is (with
 *  the appropriate content type.) Always set.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The height of the thumbnail, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightPx;

/**
 *  The width of the thumbnail, in pixels. Always set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthPx;

@end


/**
 *  A Timestamp represents a point in time independent of any time zone or local
 *  calendar, encoded as a count of seconds and fractions of seconds at
 *  nanosecond resolution. The count is relative to an epoch at UTC midnight on
 *  January 1, 1970, in the proleptic Gregorian calendar which extends the
 *  Gregorian calendar backwards to year one. All minutes are 60 seconds long.
 *  Leap seconds are "smeared" so that no leap second table is needed for
 *  interpretation, using a [24-hour linear
 *  smear](https://developers.google.com/time/smear). The range is from
 *  0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to
 *  that range, we ensure that we can convert to and from [RFC
 *  3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 */
@interface GTLRToolResults_Timestamp : GTLRObject

/**
 *  Non-negative fractions of a second at nanosecond resolution. Negative second
 *  values with fractions must still have non-negative nanos values that count
 *  forward in time. Must be from 0 to 999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must
 *  be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  An execution of an arbitrary tool. It could be a test runner or a tool
 *  copying artifacts or deploying code.
 */
@interface GTLRToolResults_ToolExecution : GTLRObject

/**
 *  The full tokenized command line including the program name (equivalent to
 *  argv in a C program). - In response: present if set by create request - In
 *  create request: optional - In update request: never set
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *commandLineArguments;

/**
 *  Tool execution exit code. This field will be set once the tool has exited. -
 *  In response: present if set by create/update request - In create request:
 *  optional - In update request: optional, a FAILED_PRECONDITION error will be
 *  returned if an exit_code is already set.
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExitCode *exitCode;

/**
 *  References to any plain text logs output the tool execution. This field can
 *  be set before the tool has exited in order to be able to have access to a
 *  live view of the logs while the tool is running. The maximum allowed number
 *  of tool logs per step is 1000. - In response: present if set by
 *  create/update request - In create request: optional - In update request:
 *  optional, any value provided will be appended to the existing list
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_FileReference *> *toolLogs;

/**
 *  References to opaque files of any format output by the tool execution. The
 *  maximum allowed number of tool outputs per step is 1000. - In response:
 *  present if set by create/update request - In create request: optional - In
 *  update request: optional, any value provided will be appended to the
 *  existing list
 */
@property(nonatomic, strong, nullable) NSArray<GTLRToolResults_ToolOutputReference *> *toolOutputs;

@end


/**
 *  Generic tool step to be used for binaries we do not explicitly support. For
 *  example: running cp to copy artifacts from one location to another.
 */
@interface GTLRToolResults_ToolExecutionStep : GTLRObject

/**
 *  A Tool execution. - In response: present if set by create/update request -
 *  In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_ToolExecution *toolExecution;

@end


/**
 *  Exit code from a tool execution.
 */
@interface GTLRToolResults_ToolExitCode : GTLRObject

/**
 *  Tool execution exit code. A value of 0 means that the execution was
 *  successful. - In response: always set - In create/update request: always set
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

@end


/**
 *  A reference to a ToolExecution output file.
 */
@interface GTLRToolResults_ToolOutputReference : GTLRObject

/**
 *  The creation time of the file. - In response: present if set by
 *  create/update request - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_Timestamp *creationTime;

/**
 *  A FileReference to an output file. - In response: always set - In
 *  create/update request: always set
 */
@property(nonatomic, strong, nullable) GTLRToolResults_FileReference *output;

/**
 *  The test case to which this output file belongs. - In response: present if
 *  set by create/update request - In create/update request: optional
 */
@property(nonatomic, strong, nullable) GTLRToolResults_TestCaseReference *testCase;

@end


/**
 *  A warning that the screen hierarchy is deeper than the recommended
 *  threshold.
 */
@interface GTLRToolResults_UIElementTooDeep : GTLRObject

/**
 *  The depth of the screen element
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *depth;

/** The screen id of the element */
@property(nonatomic, copy, nullable) NSString *screenId;

/** The screen state id of the element */
@property(nonatomic, copy, nullable) NSString *screenStateId;

@end


/**
 *  Default unspecified warning.
 */
@interface GTLRToolResults_UnspecifiedWarning : GTLRObject
@end


/**
 *  Additional details of an unused robodirective.
 */
@interface GTLRToolResults_UnusedRoboDirective : GTLRObject

/** The name of the resource that was unused. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  This insight is a recommendation to upgrade a given library to the specified
 *  version, in order to avoid dependencies on non-SDK APIs.
 */
@interface GTLRToolResults_UpgradeInsight : GTLRObject

/** The name of the package to be upgraded. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The suggested version to upgrade to. Optional: In case we are not sure which
 *  version solves this problem
 */
@property(nonatomic, copy, nullable) NSString *upgradeToVersion;

@end


/**
 *  Additional details of a used Robo directive.
 */
@interface GTLRToolResults_UsedRoboDirective : GTLRObject

/** The name of the resource that was used. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Additional details of a used Robo directive with an ignore action. Note:
 *  This is a different scenario than unused directive.
 */
@interface GTLRToolResults_UsedRoboIgnoreDirective : GTLRObject

/** The name of the resource that was ignored. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
