// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataproc Metastore API (metastore/v1beta)
// Description:
//   The Dataproc Metastore API is used to manage the lifecycle and
//   configuration of metastore services.
// Documentation:
//   https://cloud.google.com/dataproc-metastore/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDataprocMetastore_AuditConfig;
@class GTLRDataprocMetastore_AuditLogConfig;
@class GTLRDataprocMetastore_AuxiliaryVersionConfig;
@class GTLRDataprocMetastore_AuxiliaryVersionConfig_ConfigOverrides;
@class GTLRDataprocMetastore_BackendMetastore;
@class GTLRDataprocMetastore_Backup;
@class GTLRDataprocMetastore_Binding;
@class GTLRDataprocMetastore_Consumer;
@class GTLRDataprocMetastore_DatabaseDump;
@class GTLRDataprocMetastore_DataCatalogConfig;
@class GTLRDataprocMetastore_DataplexConfig;
@class GTLRDataprocMetastore_DataplexConfig_LakeResources;
@class GTLRDataprocMetastore_EncryptionConfig;
@class GTLRDataprocMetastore_Expr;
@class GTLRDataprocMetastore_Federation;
@class GTLRDataprocMetastore_Federation_BackendMetastores;
@class GTLRDataprocMetastore_Federation_Labels;
@class GTLRDataprocMetastore_HiveMetastoreConfig;
@class GTLRDataprocMetastore_HiveMetastoreConfig_AuxiliaryVersions;
@class GTLRDataprocMetastore_HiveMetastoreConfig_ConfigOverrides;
@class GTLRDataprocMetastore_HiveMetastoreVersion;
@class GTLRDataprocMetastore_KerberosConfig;
@class GTLRDataprocMetastore_Lake;
@class GTLRDataprocMetastore_Location;
@class GTLRDataprocMetastore_Location_Labels;
@class GTLRDataprocMetastore_Location_Metadata;
@class GTLRDataprocMetastore_MaintenanceWindow;
@class GTLRDataprocMetastore_MetadataExport;
@class GTLRDataprocMetastore_MetadataImport;
@class GTLRDataprocMetastore_MetadataIntegration;
@class GTLRDataprocMetastore_MetadataManagementActivity;
@class GTLRDataprocMetastore_NetworkConfig;
@class GTLRDataprocMetastore_Operation;
@class GTLRDataprocMetastore_Operation_Metadata;
@class GTLRDataprocMetastore_Operation_Response;
@class GTLRDataprocMetastore_Policy;
@class GTLRDataprocMetastore_Restore;
@class GTLRDataprocMetastore_Secret;
@class GTLRDataprocMetastore_Service;
@class GTLRDataprocMetastore_Service_Labels;
@class GTLRDataprocMetastore_Status;
@class GTLRDataprocMetastore_Status_Details_Item;
@class GTLRDataprocMetastore_TelemetryConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_BackendMetastore.metastoreType

/**
 *  The backend metastore is BigQuery.
 *
 *  Value: "BIGQUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_BackendMetastore_MetastoreType_Bigquery;
/**
 *  The backend metastore is Dataproc Metastore.
 *
 *  Value: "DATAPROC_METASTORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_BackendMetastore_MetastoreType_DataprocMetastore;
/**
 *  The metastore type is not set.
 *
 *  Value: "METASTORE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_BackendMetastore_MetastoreType_MetastoreTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Backup.state

/**
 *  The backup is active and ready to use.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_Active;
/**
 *  The backup is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_Creating;
/**
 *  The backup is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_Deleting;
/**
 *  The backup failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_Failed;
/**
 *  The backup is being restored.
 *
 *  Value: "RESTORING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_Restoring;
/**
 *  The state of the backup is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Backup_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_DatabaseDump.databaseType

/**
 *  The type of the source database is unknown.
 *
 *  Value: "DATABASE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_DatabaseDump_DatabaseType_DatabaseTypeUnspecified;
/**
 *  The type of the source database is MySQL.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_DatabaseDump_DatabaseType_Mysql;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_DatabaseDump.type

/**
 *  Database dump contains Avro files.
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_DatabaseDump_Type_Avro;
/**
 *  Database dump is a MySQL dump file.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_DatabaseDump_Type_Mysql;
/**
 *  The type of the database dump is unknown.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_DatabaseDump_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_ExportMetadataRequest.databaseDumpType

/**
 *  Database dump contains Avro files.
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_Avro;
/**
 *  Database dump is a MySQL dump file.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_Mysql;
/**
 *  The type of the database dump is unknown.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Federation.state

/**
 *  The metastore federation is running and ready to serve queries.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_Active;
/**
 *  The metastore federation is in the process of being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_Creating;
/**
 *  The metastore federation is undergoing deletion. It cannot be used.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_Deleting;
/**
 *  The metastore federation has encountered an error and cannot be used. The
 *  metastore federation should be deleted.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_Error;
/**
 *  The state of the metastore federation is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_StateUnspecified;
/**
 *  The metastore federation is being updated. It remains usable but cannot
 *  accept additional update requests or be deleted at this time.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Federation_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_HiveMetastoreConfig.endpointProtocol

/**
 *  The protocol is not set.
 *
 *  Value: "ENDPOINT_PROTOCOL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_EndpointProtocolUnspecified;
/**
 *  Use the modernized gRPC protocol for the metastore service endpoint.
 *
 *  Value: "GRPC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_Grpc;
/**
 *  Use the legacy Apache Thrift protocol for the metastore service endpoint.
 *
 *  Value: "THRIFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_Thrift;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_MaintenanceWindow.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_MetadataExport.databaseDumpType

/**
 *  Database dump contains Avro files.
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_Avro;
/**
 *  Database dump is a MySQL dump file.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_Mysql;
/**
 *  The type of the database dump is unknown.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_MetadataExport.state

/**
 *  The metadata export is cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_State_Cancelled;
/**
 *  The metadata export failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_State_Failed;
/**
 *  The metadata export is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_State_Running;
/**
 *  The state of the metadata export is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_State_StateUnspecified;
/**
 *  The metadata export completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataExport_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_MetadataImport.state

/**
 *  The metadata import failed, and attempted metadata changes were rolled back.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataImport_State_Failed;
/**
 *  The metadata import is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataImport_State_Running;
/**
 *  The state of the metadata import is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataImport_State_StateUnspecified;
/**
 *  The metadata import completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataImport_State_Succeeded;
/**
 *  The metadata import is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_MetadataImport_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Restore.state

/**
 *  The metadata restore is cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_State_Cancelled;
/**
 *  The metadata restore failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_State_Failed;
/**
 *  The metadata restore is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_State_Running;
/**
 *  The state of the metadata restore is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_State_StateUnspecified;
/**
 *  The metadata restore completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Restore.type

/**
 *  The service's metadata and configuration are restored.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_Type_Full;
/**
 *  Only the service's metadata is restored.
 *
 *  Value: "METADATA_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_Type_MetadataOnly;
/**
 *  The restore type is unknown.
 *
 *  Value: "RESTORE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Restore_Type_RestoreTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_RestoreServiceRequest.restoreType

/**
 *  The service's metadata and configuration are restored.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_Full;
/**
 *  Only the service's metadata is restored.
 *
 *  Value: "METADATA_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_MetadataOnly;
/**
 *  The restore type is unknown.
 *
 *  Value: "RESTORE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_RestoreTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Service.databaseType

/**
 *  The DATABASE_TYPE is not set.
 *
 *  Value: "DATABASE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_DatabaseType_DatabaseTypeUnspecified;
/**
 *  MySQL is used to persist the metastore data.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_DatabaseType_Mysql;
/**
 *  Spanner is used to persist the metastore data.
 *
 *  Value: "SPANNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_DatabaseType_Spanner;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Service.releaseChannel

/**
 *  The CANARY release channel contains the newest features, which may be
 *  unstable and subject to unresolved issues with no known workarounds.
 *  Services using the CANARY release channel are not subject to any SLAs.
 *
 *  Value: "CANARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_ReleaseChannel_Canary;
/**
 *  Release channel is not specified.
 *
 *  Value: "RELEASE_CHANNEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_ReleaseChannel_ReleaseChannelUnspecified;
/**
 *  The STABLE release channel contains features that are considered stable and
 *  have been validated for production use.
 *
 *  Value: "STABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_ReleaseChannel_Stable;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Service.state

/**
 *  The metastore service is running and ready to serve queries.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Active;
/**
 *  The metastore service is in the process of being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Creating;
/**
 *  The metastore service is undergoing deletion. It cannot be used.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Deleting;
/**
 *  The metastore service has encountered an error and cannot be used. The
 *  metastore service should be deleted.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Error;
/**
 *  The state of the metastore service is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_StateUnspecified;
/**
 *  The metastore service is suspended and unable to serve queries.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Suspended;
/**
 *  The metastore service is entering suspension. Its query-serving availability
 *  may cease unexpectedly.
 *
 *  Value: "SUSPENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Suspending;
/**
 *  The metastore service is being updated. It remains usable but cannot accept
 *  additional update requests or be deleted at this time.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_Service.tier

/**
 *  The developer tier provides limited scalability and no fault tolerance. Good
 *  for low-cost proof-of-concept.
 *
 *  Value: "DEVELOPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_Tier_Developer;
/**
 *  The enterprise tier provides multi-zone high availability, and sufficient
 *  scalability for enterprise-level Dataproc Metastore workloads.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_Tier_Enterprise;
/**
 *  The tier is not set.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_Service_Tier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataprocMetastore_TelemetryConfig.logFormat

/**
 *  Logging output uses the jsonPayload format.
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_TelemetryConfig_LogFormat_Json;
/**
 *  Logging output uses the legacy textPayload format.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_TelemetryConfig_LogFormat_Legacy;
/**
 *  The LOG_FORMAT is not set.
 *
 *  Value: "LOG_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDataprocMetastore_TelemetryConfig_LogFormat_LogFormatUnspecified;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs.If there are AuditConfigs for both allServices and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted.Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRDataprocMetastore_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  storage.googleapis.com, cloudsql.googleapis.com. allServices is a special
 *  value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRDataprocMetastore_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRDataprocMetastore_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRDataprocMetastore_AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRDataprocMetastore_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Configuration information for the auxiliary service versions.
 */
@interface GTLRDataprocMetastore_AuxiliaryVersionConfig : GTLRObject

/**
 *  A mapping of Hive metastore configuration key-value pairs to apply to the
 *  auxiliary Hive metastore (configured in hive-site.xml) in addition to the
 *  primary version's overrides. If keys are present in both the auxiliary
 *  version's overrides and the primary version's overrides, the value from the
 *  auxiliary version's overrides takes precedence.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_AuxiliaryVersionConfig_ConfigOverrides *configOverrides;

/**
 *  Output only. The network configuration contains the endpoint URI(s) of the
 *  auxiliary Hive metastore service.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_NetworkConfig *networkConfig;

/**
 *  The Hive metastore version of the auxiliary service. It must be less than
 *  the primary Hive metastore service's version.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A mapping of Hive metastore configuration key-value pairs to apply to the
 *  auxiliary Hive metastore (configured in hive-site.xml) in addition to the
 *  primary version's overrides. If keys are present in both the auxiliary
 *  version's overrides and the primary version's overrides, the value from the
 *  auxiliary version's overrides takes precedence.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_AuxiliaryVersionConfig_ConfigOverrides : GTLRObject
@end


/**
 *  Represents a backend metastore for the federation.
 */
@interface GTLRDataprocMetastore_BackendMetastore : GTLRObject

/**
 *  The type of the backend metastore.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_BackendMetastore_MetastoreType_Bigquery The
 *        backend metastore is BigQuery. (Value: "BIGQUERY")
 *    @arg @c kGTLRDataprocMetastore_BackendMetastore_MetastoreType_DataprocMetastore
 *        The backend metastore is Dataproc Metastore. (Value:
 *        "DATAPROC_METASTORE")
 *    @arg @c kGTLRDataprocMetastore_BackendMetastore_MetastoreType_MetastoreTypeUnspecified
 *        The metastore type is not set. (Value: "METASTORE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *metastoreType;

/**
 *  The relative resource name of the metastore that is being federated. The
 *  formats of the relative resource names for the currently supported
 *  metastores are listed below: Dataplex:
 *  projects/{project_id}/locations/{location}/lakes/{lake_id} BigQuery:
 *  projects/{project_id} Dataproc Metastore:
 *  projects/{project_id}/locations/{location}/services/{service_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The details of a backup resource.
 */
@interface GTLRDataprocMetastore_Backup : GTLRObject

/** Output only. The time when the backup was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The description of the backup.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The time when the backup finished creating. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Immutable. The relative resource name of the backup, in the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Services that are restoring from the backup. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *restoringServices;

/** Output only. The revision of the service at the time of backup. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Service *serviceRevision;

/**
 *  Output only. The current state of the backup.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Backup_State_Active The backup is active
 *        and ready to use. (Value: "ACTIVE")
 *    @arg @c kGTLRDataprocMetastore_Backup_State_Creating The backup is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRDataprocMetastore_Backup_State_Deleting The backup is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRDataprocMetastore_Backup_State_Failed The backup failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRDataprocMetastore_Backup_State_Restoring The backup is being
 *        restored. (Value: "RESTORING")
 *    @arg @c kGTLRDataprocMetastore_Backup_State_StateUnspecified The state of
 *        the backup is unknown. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Associates members, or principals, with a role.
 */
@interface GTLRDataprocMetastore_Binding : GTLRObject

/**
 *  The condition that is associated with this binding.If the condition
 *  evaluates to true, then this binding applies to the current request.If the
 *  condition evaluates to false, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding.To learn which resources
 *  support conditions in their IAM policies, see the IAM documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  members can have the following values: allUsers: A special identifier that
 *  represents anyone who is on the internet; with or without a Google account.
 *  allAuthenticatedUsers: A special identifier that represents anyone who is
 *  authenticated with a Google account or a service account. Does not include
 *  identities that come from external identity providers (IdPs) through
 *  identity federation. user:{emailid}: An email address that represents a
 *  specific Google account. For example, alice\@example.com .
 *  serviceAccount:{emailid}: An email address that represents a Google service
 *  account. For example, my-other-app\@appspot.gserviceaccount.com.
 *  serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An
 *  identifier for a Kubernetes service account
 *  (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa].
 *  group:{emailid}: An email address that represents a Google group. For
 *  example, admins\@example.com. deleted:user:{emailid}?uid={uniqueid}: An
 *  email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example, alice\@example.com?uid=123456789012345678901.
 *  If the user is recovered, this value reverts to user:{emailid} and the
 *  recovered user retains the role in the binding.
 *  deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus
 *  unique identifier) representing a service account that has been recently
 *  deleted. For example,
 *  my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901. If the
 *  service account is undeleted, this value reverts to serviceAccount:{emailid}
 *  and the undeleted service account retains the role in the binding.
 *  deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique
 *  identifier) representing a Google group that has been recently deleted. For
 *  example, admins\@example.com?uid=123456789012345678901. If the group is
 *  recovered, this value reverts to group:{emailid} and the recovered group
 *  retains the role in the binding. domain:{domain}: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  google.com or example.com.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of members, or principals. For example,
 *  roles/viewer, roles/editor, or roles/owner.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Contains information of the customer's network configurations.
 */
@interface GTLRDataprocMetastore_Consumer : GTLRObject

/**
 *  Output only. The URI of the endpoint used to access the metastore service.
 */
@property(nonatomic, copy, nullable) NSString *endpointUri;

/**
 *  Immutable. The subnetwork of the customer project from which an IP address
 *  is reserved and used as the Dataproc Metastore service's endpoint. It is
 *  accessible to hosts in the subnet and to all hosts in a subnet in the same
 *  region and same network. There must be at least one IP address available in
 *  the subnet's primary range. The subnet is specified in the following
 *  form:`projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  A specification of the location of and metadata about a database dump from a
 *  relational database management system.
 */
@interface GTLRDataprocMetastore_DatabaseDump : GTLRObject

/**
 *  The type of the database.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_DatabaseDump_DatabaseType_DatabaseTypeUnspecified
 *        The type of the source database is unknown. (Value:
 *        "DATABASE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_DatabaseDump_DatabaseType_Mysql The type of
 *        the source database is MySQL. (Value: "MYSQL")
 */
@property(nonatomic, copy, nullable) NSString *databaseType;

/**
 *  A Cloud Storage object or folder URI that specifies the source from which to
 *  import metadata. It must begin with gs://.
 */
@property(nonatomic, copy, nullable) NSString *gcsUri;

/** The name of the source database. */
@property(nonatomic, copy, nullable) NSString *sourceDatabase;

/**
 *  Optional. The type of the database dump. If unspecified, defaults to MYSQL.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_DatabaseDump_Type_Avro Database dump
 *        contains Avro files. (Value: "AVRO")
 *    @arg @c kGTLRDataprocMetastore_DatabaseDump_Type_Mysql Database dump is a
 *        MySQL dump file. (Value: "MYSQL")
 *    @arg @c kGTLRDataprocMetastore_DatabaseDump_Type_TypeUnspecified The type
 *        of the database dump is unknown. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies how metastore metadata should be integrated with the Data Catalog
 *  service.
 */
@interface GTLRDataprocMetastore_DataCatalogConfig : GTLRObject

/**
 *  Defines whether the metastore metadata should be synced to Data Catalog. The
 *  default value is to disable syncing metastore metadata to Data Catalog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Specifies how metastore metadata should be integrated with the Dataplex
 *  service.
 */
@interface GTLRDataprocMetastore_DataplexConfig : GTLRObject

/**
 *  A reference to the Lake resources that this metastore service is attached
 *  to. The key is the lake resource name. Example:
 *  projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_DataplexConfig_LakeResources *lakeResources;

@end


/**
 *  A reference to the Lake resources that this metastore service is attached
 *  to. The key is the lake resource name. Example:
 *  projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDataprocMetastore_Lake. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_DataplexConfig_LakeResources : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDataprocMetastore_Empty : GTLRObject
@end


/**
 *  Encryption settings for the service.
 */
@interface GTLRDataprocMetastore_EncryptionConfig : GTLRObject

/**
 *  The fully qualified customer provided Cloud KMS key name to use for customer
 *  data encryption, in the following
 *  form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
 */
@property(nonatomic, copy, nullable) NSString *kmsKey;

@end


/**
 *  Request message for DataprocMetastore.ExportMetadata.
 */
@interface GTLRDataprocMetastore_ExportMetadataRequest : GTLRObject

/**
 *  Optional. The type of the database dump. If unspecified, defaults to MYSQL.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_Avro
 *        Database dump contains Avro files. (Value: "AVRO")
 *    @arg @c kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_Mysql
 *        Database dump is a MySQL dump file. (Value: "MYSQL")
 *    @arg @c kGTLRDataprocMetastore_ExportMetadataRequest_DatabaseDumpType_TypeUnspecified
 *        The type of the database dump is unknown. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *databaseDumpType;

/**
 *  A Cloud Storage URI of a folder, in the format gs:///. A sub-folder
 *  containing exported files will be created below it.
 */
@property(nonatomic, copy, nullable) NSString *destinationGcsFolder;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec.Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRDataprocMetastore_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a federation of multiple backend metastores.
 */
@interface GTLRDataprocMetastore_Federation : GTLRObject

/**
 *  A map from BackendMetastore rank to BackendMetastores from which the
 *  federation service serves metadata at query time. The map key represents the
 *  order in which BackendMetastores should be evaluated to resolve database
 *  names at query time and should be greater than or equal to zero. A
 *  BackendMetastore with a lower number will be evaluated before a
 *  BackendMetastore with a higher number.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Federation_BackendMetastores *backendMetastores;

/** Output only. The time when the metastore federation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The federation endpoint. */
@property(nonatomic, copy, nullable) NSString *endpointUri;

/** User-defined labels for the metastore federation. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Federation_Labels *labels;

/**
 *  Immutable. The relative resource name of the federation, of the form:
 *  projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current state of the federation.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Federation_State_Active The metastore
 *        federation is running and ready to serve queries. (Value: "ACTIVE")
 *    @arg @c kGTLRDataprocMetastore_Federation_State_Creating The metastore
 *        federation is in the process of being created. (Value: "CREATING")
 *    @arg @c kGTLRDataprocMetastore_Federation_State_Deleting The metastore
 *        federation is undergoing deletion. It cannot be used. (Value:
 *        "DELETING")
 *    @arg @c kGTLRDataprocMetastore_Federation_State_Error The metastore
 *        federation has encountered an error and cannot be used. The metastore
 *        federation should be deleted. (Value: "ERROR")
 *    @arg @c kGTLRDataprocMetastore_Federation_State_StateUnspecified The state
 *        of the metastore federation is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_Federation_State_Updating The metastore
 *        federation is being updated. It remains usable but cannot accept
 *        additional update requests or be deleted at this time. (Value:
 *        "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current state of the metastore
 *  federation, if available.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/**
 *  Output only. The globally unique resource identifier of the metastore
 *  federation.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The time when the metastore federation was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Immutable. The Apache Hive metastore version of the federation. All backend
 *  metastore versions must be compatible with the federation version.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A map from BackendMetastore rank to BackendMetastores from which the
 *  federation service serves metadata at query time. The map key represents the
 *  order in which BackendMetastores should be evaluated to resolve database
 *  names at query time and should be greater than or equal to zero. A
 *  BackendMetastore with a lower number will be evaluated before a
 *  BackendMetastore with a higher number.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDataprocMetastore_BackendMetastore. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_Federation_BackendMetastores : GTLRObject
@end


/**
 *  User-defined labels for the metastore federation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_Federation_Labels : GTLRObject
@end


/**
 *  Specifies configuration information specific to running Hive metastore
 *  software as the metastore service.
 */
@interface GTLRDataprocMetastore_HiveMetastoreConfig : GTLRObject

/**
 *  A mapping of Hive metastore version to the auxiliary version configuration.
 *  When specified, a secondary Hive metastore service is created along with the
 *  primary service. All auxiliary versions must be less than the service's
 *  primary version. The key is the auxiliary service name and it must match the
 *  regular expression a-z?. This means that the first character must be a
 *  lowercase letter, and all the following characters must be hyphens,
 *  lowercase letters, or digits, except the last character, which cannot be a
 *  hyphen.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_HiveMetastoreConfig_AuxiliaryVersions *auxiliaryVersions;

/**
 *  A mapping of Hive metastore configuration key-value pairs to apply to the
 *  Hive metastore (configured in hive-site.xml). The mappings override system
 *  defaults (some keys cannot be overridden). These overrides are also applied
 *  to auxiliary versions and can be further customized in the auxiliary
 *  version's AuxiliaryVersionConfig.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_HiveMetastoreConfig_ConfigOverrides *configOverrides;

/**
 *  The protocol to use for the metastore service endpoint. If unspecified,
 *  defaults to THRIFT.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_EndpointProtocolUnspecified
 *        The protocol is not set. (Value: "ENDPOINT_PROTOCOL_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_Grpc
 *        Use the modernized gRPC protocol for the metastore service endpoint.
 *        (Value: "GRPC")
 *    @arg @c kGTLRDataprocMetastore_HiveMetastoreConfig_EndpointProtocol_Thrift
 *        Use the legacy Apache Thrift protocol for the metastore service
 *        endpoint. (Value: "THRIFT")
 */
@property(nonatomic, copy, nullable) NSString *endpointProtocol;

/**
 *  Information used to configure the Hive metastore service as a service
 *  principal in a Kerberos realm. To disable Kerberos, use the UpdateService
 *  method and specify this field's path (hive_metastore_config.kerberos_config)
 *  in the request's update_mask while omitting this field from the request's
 *  service.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_KerberosConfig *kerberosConfig;

/** Immutable. The Hive metastore schema version. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A mapping of Hive metastore version to the auxiliary version configuration.
 *  When specified, a secondary Hive metastore service is created along with the
 *  primary service. All auxiliary versions must be less than the service's
 *  primary version. The key is the auxiliary service name and it must match the
 *  regular expression a-z?. This means that the first character must be a
 *  lowercase letter, and all the following characters must be hyphens,
 *  lowercase letters, or digits, except the last character, which cannot be a
 *  hyphen.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDataprocMetastore_AuxiliaryVersionConfig. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_HiveMetastoreConfig_AuxiliaryVersions : GTLRObject
@end


/**
 *  A mapping of Hive metastore configuration key-value pairs to apply to the
 *  Hive metastore (configured in hive-site.xml). The mappings override system
 *  defaults (some keys cannot be overridden). These overrides are also applied
 *  to auxiliary versions and can be further customized in the auxiliary
 *  version's AuxiliaryVersionConfig.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_HiveMetastoreConfig_ConfigOverrides : GTLRObject
@end


/**
 *  A specification of a supported version of the Hive Metastore software.
 */
@interface GTLRDataprocMetastore_HiveMetastoreVersion : GTLRObject

/**
 *  Whether version will be chosen by the server if a metastore service is
 *  created with a HiveMetastoreConfig that omits the version.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefault;

/** The semantic version of the Hive Metastore software. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Configuration information for a Kerberos principal.
 */
@interface GTLRDataprocMetastore_KerberosConfig : GTLRObject

/**
 *  A Kerberos keytab file that can be used to authenticate a service principal
 *  with a Kerberos Key Distribution Center (KDC).
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Secret *keytab;

/**
 *  A Cloud Storage URI that specifies the path to a krb5.conf file. It is of
 *  the form gs://{bucket_name}/path/to/krb5.conf, although the file does not
 *  need to be named krb5.conf explicitly.
 */
@property(nonatomic, copy, nullable) NSString *krb5ConfigGcsUri;

/**
 *  A Kerberos principal that exists in the both the keytab the KDC to
 *  authenticate as. A typical principal is of the form primary/instance\@REALM,
 *  but there is no exact format.
 */
@property(nonatomic, copy, nullable) NSString *principal;

@end


/**
 *  Represents a Lake resource
 */
@interface GTLRDataprocMetastore_Lake : GTLRObject

/**
 *  The Lake resource name. Example:
 *  projects/{project_number}/locations/{location_id}/lakes/{lake_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Response message for DataprocMetastore.ListBackups.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backups" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataprocMetastore_ListBackupsResponse : GTLRCollectionObject

/**
 *  The backups of the specified service.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Backup *> *backups;

/**
 *  A token that can be sent as page_token to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for ListFederations
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "federations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataprocMetastore_ListFederationsResponse : GTLRCollectionObject

/**
 *  The services in the specified location.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Federation *> *federations;

/**
 *  A token that can be sent as page_token to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataprocMetastore_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for DataprocMetastore.ListMetadataImports.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "metadataImports" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDataprocMetastore_ListMetadataImportsResponse : GTLRCollectionObject

/**
 *  The imports in the specified service.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_MetadataImport *> *metadataImports;

/**
 *  A token that can be sent as page_token to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataprocMetastore_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Operation *> *operations;

@end


/**
 *  Response message for DataprocMetastore.ListServices.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataprocMetastore_ListServicesResponse : GTLRCollectionObject

/**
 *  A token that can be sent as page_token to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The services in the specified location.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Service *> *services;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRDataprocMetastore_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Location_Labels *labels;

/** The canonical id for this location. For example: "us-east1". */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: "projects/example-project/locations/us-east1"
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_Location_Metadata : GTLRObject
@end


/**
 *  Metadata about the service in a location.
 */
@interface GTLRDataprocMetastore_LocationMetadata : GTLRObject

/**
 *  The versions of Hive Metastore that can be used when creating a new
 *  metastore service in this location. The server guarantees that exactly one
 *  HiveMetastoreVersion in the list will set is_default.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_HiveMetastoreVersion *> *supportedHiveMetastoreVersions;

@end


/**
 *  Maintenance window. This specifies when Dataproc Metastore may perform
 *  system maintenance operation to the service.
 */
@interface GTLRDataprocMetastore_MaintenanceWindow : GTLRObject

/**
 *  The day of week, when the window starts.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Saturday
 *        Saturday (Value: "SATURDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Thursday
 *        Thursday (Value: "THURSDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRDataprocMetastore_MaintenanceWindow_DayOfWeek_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

/**
 *  The hour of day (0-23) when the window starts.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hourOfDay;

@end


/**
 *  The details of a metadata export operation.
 */
@interface GTLRDataprocMetastore_MetadataExport : GTLRObject

/**
 *  Output only. The type of the database dump.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_Avro
 *        Database dump contains Avro files. (Value: "AVRO")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_Mysql
 *        Database dump is a MySQL dump file. (Value: "MYSQL")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_DatabaseDumpType_TypeUnspecified
 *        The type of the database dump is unknown. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *databaseDumpType;

/**
 *  Output only. A Cloud Storage URI of a folder that metadata are exported to,
 *  in the form of gs:////, where is automatically generated.
 */
@property(nonatomic, copy, nullable) NSString *destinationGcsUri;

/** Output only. The time when the export ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The time when the export started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The current state of the export.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_State_Cancelled The metadata
 *        export is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_State_Failed The metadata
 *        export failed. (Value: "FAILED")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_State_Running The metadata
 *        export is running. (Value: "RUNNING")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_State_StateUnspecified The
 *        state of the metadata export is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_MetadataExport_State_Succeeded The metadata
 *        export completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A metastore resource that imports metadata.
 */
@interface GTLRDataprocMetastore_MetadataImport : GTLRObject

/** Output only. The time when the metadata import was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Immutable. A database dump from a pre-existing metastore's database. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_DatabaseDump *databaseDump;

/**
 *  The description of the metadata import.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The time when the metadata import finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Immutable. The relative resource name of the metadata import, of the
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current state of the metadata import.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_MetadataImport_State_Failed The metadata
 *        import failed, and attempted metadata changes were rolled back.
 *        (Value: "FAILED")
 *    @arg @c kGTLRDataprocMetastore_MetadataImport_State_Running The metadata
 *        import is running. (Value: "RUNNING")
 *    @arg @c kGTLRDataprocMetastore_MetadataImport_State_StateUnspecified The
 *        state of the metadata import is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_MetadataImport_State_Succeeded The metadata
 *        import completed successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRDataprocMetastore_MetadataImport_State_Updating The metadata
 *        import is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time when the metadata import was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Specifies how metastore metadata should be integrated with external
 *  services.
 */
@interface GTLRDataprocMetastore_MetadataIntegration : GTLRObject

/** The integration config for the Data Catalog service. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_DataCatalogConfig *dataCatalogConfig;

/** The integration config for the Dataplex service. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_DataplexConfig *dataplexConfig;

@end


/**
 *  The metadata management activities of the metastore service.
 */
@interface GTLRDataprocMetastore_MetadataManagementActivity : GTLRObject

/** Output only. The latest metadata exports of the metastore service. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_MetadataExport *> *metadataExports;

/** Output only. The latest restores of the metastore service. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Restore *> *restores;

@end


/**
 *  Network configuration for the Dataproc Metastore service.
 */
@interface GTLRDataprocMetastore_NetworkConfig : GTLRObject

/**
 *  Immutable. The consumer-side network configuration for the Dataproc
 *  Metastore instance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Consumer *> *consumers;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDataprocMetastore_Operation : GTLRObject

/**
 *  If the value is false, it means the operation is still in progress. If true,
 *  the operation is completed, and either error or response is available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the name should
 *  be a resource name ending with operations/{unique_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as Delete, the response is
 *  google.protobuf.Empty. If the original method is standard Get/Create/Update,
 *  the response should be the resource. For other methods, the response should
 *  have the type XxxResponse, where Xxx is the original method name. For
 *  example, if the original method name is TakeSnapshot(), the inferred
 *  response type is TakeSnapshotResponse.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRDataprocMetastore_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the caller has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  Code.CANCELLED.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources.A Policy is a collection of bindings. A
 *  binding binds one or more members, or principals, to a single role.
 *  Principals can be user accounts, service accounts, Google groups, and
 *  domains (such as G Suite). A role is a named list of permissions; each role
 *  can be an IAM predefined role or a user-created custom role.For some types
 *  of Google Cloud resources, a binding can also specify a condition, which is
 *  a logical expression that allows access to a resource only if the expression
 *  evaluates to true. A condition can add constraints based on attributes of
 *  the request, the resource, or both. To learn which resources support
 *  conditions in their IAM policies, see the IAM documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).JSON
 *  example: { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the IAM
 *  documentation (https://cloud.google.com/iam/docs/).
 */
@interface GTLRDataprocMetastore_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of members, or principals, with a role. Optionally, may
 *  specify a condition that determines how and when the bindings are applied.
 *  Each of the bindings must contain at least one principal.The bindings in a
 *  Policy can refer to up to 1,500 principals; up to 250 of these principals
 *  can be Google groups. Each occurrence of a principal counts towards these
 *  limits. For example, if the bindings grant 50 different roles to
 *  user:alice\@example.com, and not to any other principal, then you can add
 *  another 1,450 principals to the bindings in the Policy.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Binding *> *bindings;

/**
 *  etag is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the etag in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An etag is
 *  returned in the response to getIamPolicy, and systems are expected to put
 *  that etag in the request to setIamPolicy to ensure that their change will be
 *  applied to the same version of the policy.Important: If you use IAM
 *  Conditions, you must include the etag field whenever you call setIamPolicy.
 *  If you omit this field, then IAM allows you to overwrite a version 3 policy
 *  with a version 1 policy, and all of the conditions in the version 3 policy
 *  are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy.Valid values are 0, 1, and 3. Requests
 *  that specify an invalid value are rejected.Any operation that affects
 *  conditional role bindings must specify version 3. This requirement applies
 *  to the following operations: Getting a policy that includes a conditional
 *  role binding Adding a conditional role binding to a policy Changing a
 *  conditional role binding in a policy Removing any role binding, with or
 *  without a condition, from a policy that includes conditionsImportant: If you
 *  use IAM Conditions, you must include the etag field whenever you call
 *  setIamPolicy. If you omit this field, then IAM allows you to overwrite a
 *  version 3 policy with a version 1 policy, and all of the conditions in the
 *  version 3 policy are lost.If a policy does not include any conditions,
 *  operations on that policy may specify any valid version or leave the field
 *  unset.To learn which resources support conditions in their IAM policies, see
 *  the IAM documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for DataprocMetastore.RemoveIamPolicy.
 */
@interface GTLRDataprocMetastore_RemoveIamPolicyRequest : GTLRObject
@end


/**
 *  Response message for DataprocMetastore.RemoveIamPolicy.
 */
@interface GTLRDataprocMetastore_RemoveIamPolicyResponse : GTLRObject

/**
 *  whether related policies are removed
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *success;

@end


/**
 *  The details of a metadata restore operation.
 */
@interface GTLRDataprocMetastore_Restore : GTLRObject

/**
 *  Output only. The relative resource name of the metastore service backup to
 *  restore from, in the following
 *  form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 */
@property(nonatomic, copy, nullable) NSString *backup;

/**
 *  Output only. The restore details containing the revision of the service to
 *  be restored to, in format of JSON.
 */
@property(nonatomic, copy, nullable) NSString *details;

/** Output only. The time when the restore ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The time when the restore started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The current state of the restore.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Restore_State_Cancelled The metadata
 *        restore is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRDataprocMetastore_Restore_State_Failed The metadata restore
 *        failed. (Value: "FAILED")
 *    @arg @c kGTLRDataprocMetastore_Restore_State_Running The metadata restore
 *        is running. (Value: "RUNNING")
 *    @arg @c kGTLRDataprocMetastore_Restore_State_StateUnspecified The state of
 *        the metadata restore is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_Restore_State_Succeeded The metadata
 *        restore completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The type of restore.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Restore_Type_Full The service's metadata
 *        and configuration are restored. (Value: "FULL")
 *    @arg @c kGTLRDataprocMetastore_Restore_Type_MetadataOnly Only the
 *        service's metadata is restored. (Value: "METADATA_ONLY")
 *    @arg @c kGTLRDataprocMetastore_Restore_Type_RestoreTypeUnspecified The
 *        restore type is unknown. (Value: "RESTORE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for DataprocMetastore.Restore.
 */
@interface GTLRDataprocMetastore_RestoreServiceRequest : GTLRObject

/**
 *  Required. The relative resource name of the metastore service backup to
 *  restore from, in the following
 *  form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 */
@property(nonatomic, copy, nullable) NSString *backup;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. The type of restore. If unspecified, defaults to METADATA_ONLY.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_Full The
 *        service's metadata and configuration are restored. (Value: "FULL")
 *    @arg @c kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_MetadataOnly
 *        Only the service's metadata is restored. (Value: "METADATA_ONLY")
 *    @arg @c kGTLRDataprocMetastore_RestoreServiceRequest_RestoreType_RestoreTypeUnspecified
 *        The restore type is unknown. (Value: "RESTORE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *restoreType;

@end


/**
 *  A securely stored value.
 */
@interface GTLRDataprocMetastore_Secret : GTLRObject

/**
 *  The relative resource name of a Secret Manager secret version, in the
 *  following
 *  form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
 */
@property(nonatomic, copy, nullable) NSString *cloudSecret;

@end


/**
 *  A managed metastore service that serves metadata queries.
 */
@interface GTLRDataprocMetastore_Service : GTLRObject

/**
 *  Output only. A Cloud Storage URI (starting with gs://) that specifies where
 *  artifacts related to the metastore service are stored.
 */
@property(nonatomic, copy, nullable) NSString *artifactGcsUri;

/** Output only. The time when the metastore service was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Immutable. The database type that the Metastore service stores its data.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Service_DatabaseType_DatabaseTypeUnspecified
 *        The DATABASE_TYPE is not set. (Value: "DATABASE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_Service_DatabaseType_Mysql MySQL is used to
 *        persist the metastore data. (Value: "MYSQL")
 *    @arg @c kGTLRDataprocMetastore_Service_DatabaseType_Spanner Spanner is
 *        used to persist the metastore data. (Value: "SPANNER")
 */
@property(nonatomic, copy, nullable) NSString *databaseType;

/**
 *  Immutable. Information used to configure the Dataproc Metastore service to
 *  encrypt customer data at rest. Cannot be updated.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_EncryptionConfig *encryptionConfig;

/**
 *  Output only. The URI of the endpoint used to access the metastore service.
 */
@property(nonatomic, copy, nullable) NSString *endpointUri;

/**
 *  Configuration information specific to running Hive metastore software as the
 *  metastore service.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_HiveMetastoreConfig *hiveMetastoreConfig;

/** User-defined labels for the metastore service. */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Service_Labels *labels;

/**
 *  The one hour maintenance window of the metastore service. This specifies
 *  when the service can be restarted for maintenance purposes in UTC time.
 *  Maintenance window is not needed for services with the SPANNER database
 *  type.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_MaintenanceWindow *maintenanceWindow;

/**
 *  The setting that defines how metastore metadata should be integrated with
 *  external services and systems.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_MetadataIntegration *metadataIntegration;

/**
 *  Output only. The metadata management activities of the metastore service.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_MetadataManagementActivity *metadataManagementActivity;

/**
 *  Immutable. The relative resource name of the metastore service, in the
 *  following
 *  format:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Immutable. The relative resource name of the VPC network on which the
 *  instance can be accessed. It is specified in the following
 *  form:projects/{project_number}/global/networks/{network_id}.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  The configuration specifying the network settings for the Dataproc Metastore
 *  service.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_NetworkConfig *networkConfig;

/**
 *  The TCP port at which the metastore service is reached. Default: 9083.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Immutable. The release channel of the service. If unspecified, defaults to
 *  STABLE.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Service_ReleaseChannel_Canary The CANARY
 *        release channel contains the newest features, which may be unstable
 *        and subject to unresolved issues with no known workarounds. Services
 *        using the CANARY release channel are not subject to any SLAs. (Value:
 *        "CANARY")
 *    @arg @c kGTLRDataprocMetastore_Service_ReleaseChannel_ReleaseChannelUnspecified
 *        Release channel is not specified. (Value:
 *        "RELEASE_CHANNEL_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_Service_ReleaseChannel_Stable The STABLE
 *        release channel contains features that are considered stable and have
 *        been validated for production use. (Value: "STABLE")
 */
@property(nonatomic, copy, nullable) NSString *releaseChannel;

/**
 *  Output only. The current state of the metastore service.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Service_State_Active The metastore service
 *        is running and ready to serve queries. (Value: "ACTIVE")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Creating The metastore
 *        service is in the process of being created. (Value: "CREATING")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Deleting The metastore
 *        service is undergoing deletion. It cannot be used. (Value: "DELETING")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Error The metastore service
 *        has encountered an error and cannot be used. The metastore service
 *        should be deleted. (Value: "ERROR")
 *    @arg @c kGTLRDataprocMetastore_Service_State_StateUnspecified The state of
 *        the metastore service is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Suspended The metastore
 *        service is suspended and unable to serve queries. (Value: "SUSPENDED")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Suspending The metastore
 *        service is entering suspension. Its query-serving availability may
 *        cease unexpectedly. (Value: "SUSPENDING")
 *    @arg @c kGTLRDataprocMetastore_Service_State_Updating The metastore
 *        service is being updated. It remains usable but cannot accept
 *        additional update requests or be deleted at this time. (Value:
 *        "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current state of the metastore
 *  service, if available.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/**
 *  The configuration specifying telemetry settings for the Dataproc Metastore
 *  service. If unspecified defaults to JSON.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_TelemetryConfig *telemetryConfig;

/**
 *  The tier of the service.
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_Service_Tier_Developer The developer tier
 *        provides limited scalability and no fault tolerance. Good for low-cost
 *        proof-of-concept. (Value: "DEVELOPER")
 *    @arg @c kGTLRDataprocMetastore_Service_Tier_Enterprise The enterprise tier
 *        provides multi-zone high availability, and sufficient scalability for
 *        enterprise-level Dataproc Metastore workloads. (Value: "ENTERPRISE")
 *    @arg @c kGTLRDataprocMetastore_Service_Tier_TierUnspecified The tier is
 *        not set. (Value: "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  Output only. The globally unique resource identifier of the metastore
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The time when the metastore service was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  User-defined labels for the metastore service.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataprocMetastore_Service_Labels : GTLRObject
@end


/**
 *  Request message for SetIamPolicy method.
 */
@interface GTLRDataprocMetastore_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the resource. The size of the
 *  policy is limited to a few 10s of KB. An empty policy is a valid policy but
 *  certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRDataprocMetastore_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:paths: "bindings, etag"
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The Status type defines a logical error model that is suitable for different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  gRPC (https://github.com/grpc). Each Status message contains three pieces of
 *  data: error code, error message, and error details.You can find out more
 *  about this error model and how to work with it in the API Design Guide
 *  (https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDataprocMetastore_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataprocMetastore_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDataprocMetastore_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataprocMetastore_Status_Details_Item : GTLRObject
@end


/**
 *  Telemetry Configuration for the Dataproc Metastore service.
 */
@interface GTLRDataprocMetastore_TelemetryConfig : GTLRObject

/**
 *  logFormat
 *
 *  Likely values:
 *    @arg @c kGTLRDataprocMetastore_TelemetryConfig_LogFormat_Json Logging
 *        output uses the jsonPayload format. (Value: "JSON")
 *    @arg @c kGTLRDataprocMetastore_TelemetryConfig_LogFormat_Legacy Logging
 *        output uses the legacy textPayload format. (Value: "LEGACY")
 *    @arg @c kGTLRDataprocMetastore_TelemetryConfig_LogFormat_LogFormatUnspecified
 *        The LOG_FORMAT is not set. (Value: "LOG_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logFormat;

@end


/**
 *  Request message for TestIamPermissions method.
 */
@interface GTLRDataprocMetastore_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the resource. Permissions with wildcards
 *  (such as * or storage.*) are not allowed. For more information see IAM
 *  Overview (https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for TestIamPermissions method.
 */
@interface GTLRDataprocMetastore_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of TestPermissionsRequest.permissions that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
