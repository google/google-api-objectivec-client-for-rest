// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataproc Metastore API (metastore/v1beta)
// Description:
//   The Dataproc Metastore API is used to manage the lifecycle and
//   configuration of metastore services.
// Documentation:
//   https://cloud.google.com/dataproc-metastore/docs

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDataprocMetastoreObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Dataproc Metastore query classes.
 */
@interface GTLRDataprocMetastoreQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a metastore federation in a project and location.
 *
 *  Method: metastore.projects.locations.federations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsCreate : GTLRDataprocMetastoreQuery

/**
 *  Required. The ID of the metastore federation, which is used as the final
 *  component of the metastore federation's name.This value must be between 2
 *  and 63 characters long inclusive, begin with a letter, end with a letter or
 *  number, and consist of alpha-numeric ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *federationId;

/**
 *  Required. The relative resource name of the location in which to create a
 *  federation service, in the following
 *  form:projects/{project_number}/locations/{location_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a metastore federation in a project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_Federation to include in the
 *    query.
 *  @param parent Required. The relative resource name of the location in which
 *    to create a federation service, in the following
 *    form:projects/{project_number}/locations/{location_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Federation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single federation.
 *
 *  Method: metastore.projects.locations.federations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsDelete : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore federation to delete,
 *  in the following
 *  form:projects/{project_number}/locations/{location_id}/federations/{federation_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Deletes a single federation.
 *
 *  @param name Required. The relative resource name of the metastore federation
 *    to delete, in the following
 *    form:projects/{project_number}/locations/{location_id}/federations/{federation_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the details of a single federation.
 *
 *  Method: metastore.projects.locations.federations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsGet : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore federation to
 *  retrieve, in the following
 *  form:projects/{project_number}/locations/{location_id}/federations/{federation_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Federation.
 *
 *  Gets the details of a single federation.
 *
 *  @param name Required. The relative resource name of the metastore federation
 *    to retrieve, in the following
 *    form:projects/{project_number}/locations/{location_id}/federations/{federation_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.federations.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsGetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Optional. The maximum policy version that will be used to format the
 *  policy.Valid values are 0, 1, and 3. Requests specifying an invalid value
 *  will be rejected.Requests for policies with any conditional role bindings
 *  must specify version 3. Policies with no conditional role bindings may
 *  specify any valid value or leave the field unset.The policy in the response
 *  might use the policy version that you specified, or it might use a lower
 *  policy version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1.To learn which
 *  resources support conditions in their IAM policies, see the IAM
 *  documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists federations in a project and location.
 *
 *  Method: metastore.projects.locations.federations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsList : GTLRDataprocMetastoreQuery

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order
 *  (https://cloud.google.com/apis/design/design_patterns#sorting_order). If not
 *  specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of federations to return. The response may
 *  contain less than the maximum number. If unspecified, no more than 500
 *  services are returned. The maximum value is 1000; values above 1000 are
 *  changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous ListFederationServices
 *  call. Provide this token to retrieve the subsequent page.To retrieve the
 *  first page, supply an empty page token.When paginating, other parameters
 *  provided to ListFederationServices must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the location of metastore
 *  federations to list, in the following form:
 *  projects/{project_number}/locations/{location_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListFederationsResponse.
 *
 *  Lists federations in a project and location.
 *
 *  @param parent Required. The relative resource name of the location of
 *    metastore federations to list, in the following form:
 *    projects/{project_number}/locations/{location_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the fields of a federation.
 *
 *  Method: metastore.projects.locations.federations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsPatch : GTLRDataprocMetastoreQuery

/**
 *  Immutable. The relative resource name of the federation, of the form:
 *  projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A field mask used to specify the fields to be overwritten in the
 *  metastore federation resource by the update. Fields specified in the
 *  update_mask are relative to the resource (not to the full request). A field
 *  is overwritten if it is in the mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Updates the fields of a federation.
 *
 *  @param object The @c GTLRDataprocMetastore_Federation to include in the
 *    query.
 *  @param name Immutable. The relative resource name of the federation, of the
 *    form:
 *    projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsPatch
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Federation *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.federations.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsSetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.federations.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsTestIamPermissions : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  Resource names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsFederationsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets information about a location.
 *
 *  Method: metastore.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsGet : GTLRDataprocMetastoreQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: metastore.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsList : GTLRDataprocMetastoreQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like "displayName=tokyo", and is documented in more
 *  detail in AIP-160 (https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the next_page_token field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  google.rpc.Code.UNIMPLEMENTED.
 *
 *  Method: metastore.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete : GTLRDataprocMetastoreQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  google.rpc.Code.UNIMPLEMENTED.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: metastore.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet : GTLRDataprocMetastoreQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: metastore.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList : GTLRDataprocMetastoreQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
 *  binding allows API services to override the binding to use different
 *  resource name schemes, such as users/ * /operations. To override the
 *  binding, API services can add a binding such as "/v1/{name=users/
 *  *}/operations" to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new backup in a given project and location.
 *
 *  Method: metastore.projects.locations.services.backups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsCreate : GTLRDataprocMetastoreQuery

/**
 *  Required. The ID of the backup, which is used as the final component of the
 *  backup's name.This value must be between 1 and 64 characters long, begin
 *  with a letter, end with a letter or number, and consist of alpha-numeric
 *  ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  Required. The relative resource name of the service in which to create a
 *  backup of the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a new backup in a given project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_Backup to include in the query.
 *  @param parent Required. The relative resource name of the service in which
 *    to create a backup of the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Backup *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single backup.
 *
 *  Method: metastore.projects.locations.services.backups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsDelete : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the backup to delete, in the
 *  following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Deletes a single backup.
 *
 *  @param name Required. The relative resource name of the backup to delete, in
 *    the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single backup.
 *
 *  Method: metastore.projects.locations.services.backups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsGet : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the backup to retrieve, in the
 *  following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Backup.
 *
 *  Gets details of a single backup.
 *
 *  @param name Required. The relative resource name of the backup to retrieve,
 *    in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.services.backups.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsGetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Optional. The maximum policy version that will be used to format the
 *  policy.Valid values are 0, 1, and 3. Requests specifying an invalid value
 *  will be rejected.Requests for policies with any conditional role bindings
 *  must specify version 3. Policies with no conditional role bindings may
 *  specify any valid value or leave the field unset.The policy in the response
 *  might use the policy version that you specified, or it might use a lower
 *  policy version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1.To learn which
 *  resources support conditions in their IAM policies, see the IAM
 *  documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists backups in a service.
 *
 *  Method: metastore.projects.locations.services.backups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsList : GTLRDataprocMetastoreQuery

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order
 *  (https://cloud.google.com/apis/design/design_patterns#sorting_order). If not
 *  specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of backups to return. The response may contain
 *  less than the maximum number. If unspecified, no more than 500 backups are
 *  returned. The maximum value is 1000; values above 1000 are changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous
 *  DataprocMetastore.ListBackups call. Provide this token to retrieve the
 *  subsequent page.To retrieve the first page, supply an empty page token.When
 *  paginating, other parameters provided to DataprocMetastore.ListBackups must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the service whose backups to list,
 *  in the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListBackupsResponse.
 *
 *  Lists backups in a service.
 *
 *  @param parent Required. The relative resource name of the service whose
 *    backups to list, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.services.backups.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsSetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.services.backups.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsTestIamPermissions : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  Resource names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesBackupsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a metastore service in a project and location.
 *
 *  Method: metastore.projects.locations.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the location in which to create a
 *  metastore service, in the following
 *  form:projects/{project_number}/locations/{location_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The ID of the metastore service, which is used as the final
 *  component of the metastore service's name.This value must be between 2 and
 *  63 characters long inclusive, begin with a letter, end with a letter or
 *  number, and consist of alpha-numeric ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a metastore service in a project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_Service to include in the query.
 *  @param parent Required. The relative resource name of the location in which
 *    to create a metastore service, in the following
 *    form:projects/{project_number}/locations/{location_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.services.databases.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesGetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Optional. The maximum policy version that will be used to format the
 *  policy.Valid values are 0, 1, and 3. Requests specifying an invalid value
 *  will be rejected.Requests for policies with any conditional role bindings
 *  must specify version 3. Policies with no conditional role bindings may
 *  specify any valid value or leave the field unset.The policy in the response
 *  might use the policy version that you specified, or it might use a lower
 *  policy version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1.To learn which
 *  resources support conditions in their IAM policies, see the IAM
 *  documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.services.databases.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesSetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.services.databases.tables.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesGetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Optional. The maximum policy version that will be used to format the
 *  policy.Valid values are 0, 1, and 3. Requests specifying an invalid value
 *  will be rejected.Requests for policies with any conditional role bindings
 *  must specify version 3. Policies with no conditional role bindings may
 *  specify any valid value or leave the field unset.The policy in the response
 *  might use the policy version that you specified, or it might use a lower
 *  policy version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1.To learn which
 *  resources support conditions in their IAM policies, see the IAM
 *  documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.services.databases.tables.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesSetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.services.databases.tables.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesTestIamPermissions : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  Resource names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTablesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.services.databases.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTestIamPermissions : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  Resource names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDatabasesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Deletes a single service.
 *
 *  Method: metastore.projects.locations.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore service to delete, in
 *  the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Deletes a single service.
 *
 *  @param name Required. The relative resource name of the metastore service to
 *    delete, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports metadata from a service.
 *
 *  Method: metastore.projects.locations.services.exportMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore service to run export,
 *  in the following
 *  form:projects/{project_id}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Exports metadata from a service.
 *
 *  @param object The @c GTLRDataprocMetastore_ExportMetadataRequest to include
 *    in the query.
 *  @param service Required. The relative resource name of the metastore service
 *    to run export, in the following
 *    form:projects/{project_id}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesExportMetadata
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_ExportMetadataRequest *)object
                        service:(NSString *)service;

@end

/**
 *  Gets the details of a single service.
 *
 *  Method: metastore.projects.locations.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore service to retrieve,
 *  in the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_Service.
 *
 *  Gets the details of a single service.
 *
 *  @param name Required. The relative resource name of the metastore service to
 *    retrieve, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: metastore.projects.locations.services.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Optional. The maximum policy version that will be used to format the
 *  policy.Valid values are 0, 1, and 3. Requests specifying an invalid value
 *  will be rejected.Requests for policies with any conditional role bindings
 *  must specify version 3. Policies with no conditional role bindings may
 *  specify any valid value or leave the field unset.The policy in the response
 *  might use the policy version that you specified, or it might use a lower
 *  policy version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1.To learn which
 *  resources support conditions in their IAM policies, see the IAM
 *  documentation
 *  (https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists services in a project and location.
 *
 *  Method: metastore.projects.locations.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList : GTLRDataprocMetastoreQuery

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order
 *  (https://cloud.google.com/apis/design/design_patterns#sorting_order). If not
 *  specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of services to return. The response may contain
 *  less than the maximum number. If unspecified, no more than 500 services are
 *  returned. The maximum value is 1000; values above 1000 are changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous
 *  DataprocMetastore.ListServices call. Provide this token to retrieve the
 *  subsequent page.To retrieve the first page, supply an empty page token.When
 *  paginating, other parameters provided to DataprocMetastore.ListServices must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the location of metastore services
 *  to list, in the following
 *  form:projects/{project_number}/locations/{location_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListServicesResponse.
 *
 *  Lists services in a project and location.
 *
 *  @param parent Required. The relative resource name of the location of
 *    metastore services to list, in the following
 *    form:projects/{project_number}/locations/{location_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new MetadataImport in a given project and location.
 *
 *  Method: metastore.projects.locations.services.metadataImports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate : GTLRDataprocMetastoreQuery

/**
 *  Required. The ID of the metadata import, which is used as the final
 *  component of the metadata import's name.This value must be between 1 and 64
 *  characters long, begin with a letter, end with a letter or number, and
 *  consist of alpha-numeric ASCII characters or hyphens.
 */
@property(nonatomic, copy, nullable) NSString *metadataImportId;

/**
 *  Required. The relative resource name of the service in which to create a
 *  metastore import, in the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Creates a new MetadataImport in a given project and location.
 *
 *  @param object The @c GTLRDataprocMetastore_MetadataImport to include in the
 *    query.
 *  @param parent Required. The relative resource name of the service in which
 *    to create a metastore import, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets details of a single import.
 *
 *  Method: metastore.projects.locations.services.metadataImports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metadata import to retrieve, in
 *  the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDataprocMetastore_MetadataImport.
 *
 *  Gets details of a single import.
 *
 *  @param name Required. The relative resource name of the metadata import to
 *    retrieve, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists imports in a service.
 *
 *  Method: metastore.projects.locations.services.metadataImports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList : GTLRDataprocMetastoreQuery

/** Optional. The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Specify the ordering of results as described in Sorting Order
 *  (https://cloud.google.com/apis/design/design_patterns#sorting_order). If not
 *  specified, the results will be sorted in the default order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of imports to return. The response may contain
 *  less than the maximum number. If unspecified, no more than 500 imports are
 *  returned. The maximum value is 1000; values above 1000 are changed to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous
 *  DataprocMetastore.ListServices call. Provide this token to retrieve the
 *  subsequent page.To retrieve the first page, supply an empty page token.When
 *  paginating, other parameters provided to DataprocMetastore.ListServices must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the service whose metadata imports
 *  to list, in the following
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDataprocMetastore_ListMetadataImportsResponse.
 *
 *  Lists imports in a service.
 *
 *  @param parent Required. The relative resource name of the service whose
 *    metadata imports to list, in the following
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a single import. Only the description field of MetadataImport is
 *  supported to be updated.
 *
 *  Method: metastore.projects.locations.services.metadataImports.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch : GTLRDataprocMetastoreQuery

/**
 *  Immutable. The relative resource name of the metadata import, of the
 *  form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A field mask used to specify the fields to be overwritten in the
 *  metadata import resource by the update. Fields specified in the update_mask
 *  are relative to the resource (not to the full request). A field is
 *  overwritten if it is in the mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Updates a single import. Only the description field of MetadataImport is
 *  supported to be updated.
 *
 *  @param object The @c GTLRDataprocMetastore_MetadataImport to include in the
 *    query.
 *  @param name Immutable. The relative resource name of the metadata import, of
 *    the
 *    form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesMetadataImportsPatch
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_MetadataImport *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the parameters of a single service.
 *
 *  Method: metastore.projects.locations.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch : GTLRDataprocMetastoreQuery

/**
 *  Immutable. The relative resource name of the metastore service, in the
 *  following
 *  format:projects/{project_number}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A request ID. Specify a unique request ID to allow the server to
 *  ignore the request if it has completed. The server will ignore subsequent
 *  requests that provide a duplicate request ID for at least 60 minutes after
 *  the first request.For example, if an initial request times out, followed by
 *  another request with the same request ID, the server ignores the second
 *  request to prevent the creation of duplicate commitments.The request ID must
 *  be a valid UUID
 *  (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero
 *  UUID (00000000-0000-0000-0000-000000000000) is not supported.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. A field mask used to specify the fields to be overwritten in the
 *  metastore service resource by the update. Fields specified in the
 *  update_mask are relative to the resource (not to the full request). A field
 *  is overwritten if it is in the mask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Updates the parameters of a single service.
 *
 *  @param object The @c GTLRDataprocMetastore_Service to include in the query.
 *  @param name Immutable. The relative resource name of the metastore service,
 *    in the following
 *    format:projects/{project_number}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Removes the attached IAM policies for a resource
 *
 *  Method: metastore.projects.locations.services.removeIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesRemoveIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the dataplane resource to remove IAM
 *  policy, in the following
 *  form:projects/{project_id}/locations/{location_id}/services/{service_id}/databases/{database_id}
 *  or
 *  projects/{project_id}/locations/{location_id}/services/{service_id}/databases/{database_id}/tables/{table_id}.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_RemoveIamPolicyResponse.
 *
 *  Removes the attached IAM policies for a resource
 *
 *  @param object The @c GTLRDataprocMetastore_RemoveIamPolicyRequest to include
 *    in the query.
 *  @param resource Required. The relative resource name of the dataplane
 *    resource to remove IAM policy, in the following
 *    form:projects/{project_id}/locations/{location_id}/services/{service_id}/databases/{database_id}
 *    or
 *    projects/{project_id}/locations/{location_id}/services/{service_id}/databases/{database_id}/tables/{table_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesRemoveIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_RemoveIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Restores a service from a backup.
 *
 *  Method: metastore.projects.locations.services.restore
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesRestore : GTLRDataprocMetastoreQuery

/**
 *  Required. The relative resource name of the metastore service to run
 *  restore, in the following
 *  form:projects/{project_id}/locations/{location_id}/services/{service_id}.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Fetches a @c GTLRDataprocMetastore_Operation.
 *
 *  Restores a service from a backup.
 *
 *  @param object The @c GTLRDataprocMetastore_RestoreServiceRequest to include
 *    in the query.
 *  @param service Required. The relative resource name of the metastore service
 *    to run restore, in the following
 *    form:projects/{project_id}/locations/{location_id}/services/{service_id}.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesRestore
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_RestoreServiceRequest *)object
                        service:(NSString *)service;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  Method: metastore.projects.locations.services.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See Resource
 *  names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
 *  PERMISSION_DENIED errors.
 *
 *  @param object The @c GTLRDataprocMetastore_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: metastore.projects.locations.services.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataprocMetastoreCloudPlatform
 */
@interface GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions : GTLRDataprocMetastoreQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  Resource names (https://cloud.google.com/apis/design/resource_names) for the
 *  appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDataprocMetastore_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  NOT_FOUND error.Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDataprocMetastore_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See Resource names
 *    (https://cloud.google.com/apis/design/resource_names) for the appropriate
 *    value for this field.
 *
 *  @return GTLRDataprocMetastoreQuery_ProjectsLocationsServicesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDataprocMetastore_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
