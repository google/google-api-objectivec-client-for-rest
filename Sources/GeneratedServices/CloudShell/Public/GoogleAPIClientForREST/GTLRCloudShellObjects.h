// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Shell API (cloudshell/v1)
// Description:
//   Allows users to start, configure, and connect to interactive shell sessions
//   running in the cloud.
// Documentation:
//   https://cloud.google.com/shell/docs/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudShell_Environment;
@class GTLRCloudShell_Operation;
@class GTLRCloudShell_Operation_Metadata;
@class GTLRCloudShell_Operation_Response;
@class GTLRCloudShell_Status;
@class GTLRCloudShell_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudShell_Environment.state

/**
 *  The environment is being deleted and can't be connected to.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_Environment_State_Deleting;
/**
 *  The environment is being started but is not yet ready to accept connections.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_Environment_State_Pending;
/**
 *  The environment is running and ready to accept connections. It will
 *  automatically transition back to DISABLED after a period of inactivity or if
 *  another environment is started.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_Environment_State_Running;
/**
 *  The environment's states is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_Environment_State_StateUnspecified;
/**
 *  The environment is not running and can't be connected to. Starting the
 *  environment will transition it to the PENDING state.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_Environment_State_Suspended;

// ----------------------------------------------------------------------------
// GTLRCloudShell_StartEnvironmentMetadata.state

/**
 *  Startup is waiting for compute resources to be assigned to the environment.
 *  This should normally happen very quickly, but an environment might stay in
 *  this state for an extended period of time if the system is experiencing
 *  heavy load.
 *
 *  Value: "AWAITING_COMPUTE_RESOURCES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_StartEnvironmentMetadata_State_AwaitingComputeResources;
/**
 *  Startup has completed. If the start operation was successful, the user
 *  should be able to establish an SSH connection to their environment.
 *  Otherwise, the operation will contain details of the failure.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_StartEnvironmentMetadata_State_Finished;
/**
 *  The environment is in the process of being started, but no additional
 *  details are available.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_StartEnvironmentMetadata_State_Starting;
/**
 *  The environment's start state is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_StartEnvironmentMetadata_State_StateUnspecified;
/**
 *  Startup is waiting for the user's disk to be unarchived. This can happen
 *  when the user returns to Cloud Shell after not having used it for a while,
 *  and suggests that startup will take longer than normal.
 *
 *  Value: "UNARCHIVING_DISK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudShell_StartEnvironmentMetadata_State_UnarchivingDisk;

/**
 *  Message included in the metadata field of operations returned from
 *  AddPublicKey.
 */
@interface GTLRCloudShell_AddPublicKeyMetadata : GTLRObject
@end


/**
 *  Request message for AddPublicKey.
 */
@interface GTLRCloudShell_AddPublicKeyRequest : GTLRObject

/**
 *  Key that should be added to the environment. Supported formats are `ssh-dss`
 *  (see RFC4253), `ssh-rsa` (see RFC4253), `ecdsa-sha2-nistp256` (see RFC5656),
 *  `ecdsa-sha2-nistp384` (see RFC5656) and `ecdsa-sha2-nistp521` (see RFC5656).
 *  It should be structured as <format> <content>, where <content> part is
 *  encoded with Base64.
 */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  Response message for AddPublicKey.
 */
@interface GTLRCloudShell_AddPublicKeyResponse : GTLRObject

/** Key that was added to the environment. */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  Message included in the metadata field of operations returned from
 *  AuthorizeEnvironment.
 */
@interface GTLRCloudShell_AuthorizeEnvironmentMetadata : GTLRObject
@end


/**
 *  Request message for AuthorizeEnvironment.
 */
@interface GTLRCloudShell_AuthorizeEnvironmentRequest : GTLRObject

/** The OAuth access token that should be sent to the environment. */
@property(nonatomic, copy, nullable) NSString *accessToken;

/**
 *  The time when the credentials expire. If not set, defaults to one hour from
 *  when the server received the request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** The OAuth ID token that should be sent to the environment. */
@property(nonatomic, copy, nullable) NSString *idToken;

@end


/**
 *  Response message for AuthorizeEnvironment.
 */
@interface GTLRCloudShell_AuthorizeEnvironmentResponse : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudShell_CancelOperationRequest : GTLRObject
@end


/**
 *  Message included in the metadata field of operations returned from
 *  CreateEnvironment.
 */
@interface GTLRCloudShell_CreateEnvironmentMetadata : GTLRObject
@end


/**
 *  Message included in the metadata field of operations returned from
 *  DeleteEnvironment.
 */
@interface GTLRCloudShell_DeleteEnvironmentMetadata : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudShell_Empty : GTLRObject
@end


/**
 *  A Cloud Shell environment, which is defined as the combination of a Docker
 *  image specifying what is installed on the environment and a home directory
 *  containing the user's data that will remain across sessions. Each user has
 *  at least an environment with the ID "default".
 */
@interface GTLRCloudShell_Environment : GTLRObject

/**
 *  Required. Immutable. Full path to the Docker image used to run this
 *  environment, e.g. "gcr.io/dev-con/cloud-devshell:latest".
 */
@property(nonatomic, copy, nullable) NSString *dockerImage;

/**
 *  Output only. The environment's identifier, unique among the user's
 *  environments.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Immutable. Full name of this resource, in the format
 *  `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the
 *  email address of the user to whom this environment belongs, and
 *  `{environment_id}` is the identifier of this environment. For example,
 *  `users/someone\@example.com/environments/default`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Public keys associated with the environment. Clients can
 *  connect to this environment via SSH only if they possess a private key
 *  corresponding to at least one of these public keys. Keys can be added to or
 *  removed from the environment using the AddPublicKey and RemovePublicKey
 *  methods.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *publicKeys;

/**
 *  Output only. Host to which clients can connect to initiate SSH sessions with
 *  the environment.
 */
@property(nonatomic, copy, nullable) NSString *sshHost;

/**
 *  Output only. Port to which clients can connect to initiate SSH sessions with
 *  the environment.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sshPort;

/**
 *  Output only. Username that clients should use when initiating SSH sessions
 *  with the environment.
 */
@property(nonatomic, copy, nullable) NSString *sshUsername;

/**
 *  Output only. Current execution state of this environment.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudShell_Environment_State_Deleting The environment is
 *        being deleted and can't be connected to. (Value: "DELETING")
 *    @arg @c kGTLRCloudShell_Environment_State_Pending The environment is being
 *        started but is not yet ready to accept connections. (Value: "PENDING")
 *    @arg @c kGTLRCloudShell_Environment_State_Running The environment is
 *        running and ready to accept connections. It will automatically
 *        transition back to DISABLED after a period of inactivity or if another
 *        environment is started. (Value: "RUNNING")
 *    @arg @c kGTLRCloudShell_Environment_State_StateUnspecified The
 *        environment's states is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudShell_Environment_State_Suspended The environment is not
 *        running and can't be connected to. Starting the environment will
 *        transition it to the PENDING state. (Value: "SUSPENDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Host to which clients can connect to initiate HTTPS or WSS
 *  connections with the environment.
 */
@property(nonatomic, copy, nullable) NSString *webHost;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudShell_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudShell_Operation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudShell_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudShell_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudShell_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudShell_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudShell_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudShell_Operation_Response : GTLRObject
@end


/**
 *  Message included in the metadata field of operations returned from
 *  RemovePublicKey.
 */
@interface GTLRCloudShell_RemovePublicKeyMetadata : GTLRObject
@end


/**
 *  Request message for RemovePublicKey.
 */
@interface GTLRCloudShell_RemovePublicKeyRequest : GTLRObject

/** Key that should be removed from the environment. */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  Response message for RemovePublicKey.
 */
@interface GTLRCloudShell_RemovePublicKeyResponse : GTLRObject
@end


/**
 *  Message included in the metadata field of operations returned from
 *  StartEnvironment.
 */
@interface GTLRCloudShell_StartEnvironmentMetadata : GTLRObject

/**
 *  Current state of the environment being started.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudShell_StartEnvironmentMetadata_State_AwaitingComputeResources
 *        Startup is waiting for compute resources to be assigned to the
 *        environment. This should normally happen very quickly, but an
 *        environment might stay in this state for an extended period of time if
 *        the system is experiencing heavy load. (Value:
 *        "AWAITING_COMPUTE_RESOURCES")
 *    @arg @c kGTLRCloudShell_StartEnvironmentMetadata_State_Finished Startup
 *        has completed. If the start operation was successful, the user should
 *        be able to establish an SSH connection to their environment.
 *        Otherwise, the operation will contain details of the failure. (Value:
 *        "FINISHED")
 *    @arg @c kGTLRCloudShell_StartEnvironmentMetadata_State_Starting The
 *        environment is in the process of being started, but no additional
 *        details are available. (Value: "STARTING")
 *    @arg @c kGTLRCloudShell_StartEnvironmentMetadata_State_StateUnspecified
 *        The environment's start state is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudShell_StartEnvironmentMetadata_State_UnarchivingDisk
 *        Startup is waiting for the user's disk to be unarchived. This can
 *        happen when the user returns to Cloud Shell after not having used it
 *        for a while, and suggests that startup will take longer than normal.
 *        (Value: "UNARCHIVING_DISK")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Request message for StartEnvironment.
 */
@interface GTLRCloudShell_StartEnvironmentRequest : GTLRObject

/**
 *  The initial access token passed to the environment. If this is present and
 *  valid, the environment will be pre-authenticated with gcloud so that the
 *  user can run gcloud commands in Cloud Shell without having to log in. This
 *  code can be updated later by calling AuthorizeEnvironment.
 */
@property(nonatomic, copy, nullable) NSString *accessToken;

/**
 *  Public keys that should be added to the environment before it is started.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *publicKeys;

@end


/**
 *  Message included in the response field of operations returned from
 *  StartEnvironment once the operation is complete.
 */
@interface GTLRCloudShell_StartEnvironmentResponse : GTLRObject

/** Environment that was started. */
@property(nonatomic, strong, nullable) GTLRCloudShell_Environment *environment;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudShell_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudShell_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudShell_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudShell_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
