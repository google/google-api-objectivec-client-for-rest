// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Looker (Google Cloud core) API (looker/v1)
// Documentation:
//   https://cloud.google.com/looker/docs/reference/rest/

#import <GoogleAPIClientForREST/GTLRLookerObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRLooker_AuditLogConfig.logType
NSString * const kGTLRLooker_AuditLogConfig_LogType_AdminRead  = @"ADMIN_READ";
NSString * const kGTLRLooker_AuditLogConfig_LogType_DataRead   = @"DATA_READ";
NSString * const kGTLRLooker_AuditLogConfig_LogType_DataWrite  = @"DATA_WRITE";
NSString * const kGTLRLooker_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRLooker_CustomDomain.state
NSString * const kGTLRLooker_CustomDomain_State_Available      = @"AVAILABLE";
NSString * const kGTLRLooker_CustomDomain_State_CustomDomainStateUnspecified = @"CUSTOM_DOMAIN_STATE_UNSPECIFIED";
NSString * const kGTLRLooker_CustomDomain_State_Modifying      = @"MODIFYING";
NSString * const kGTLRLooker_CustomDomain_State_Unavailable    = @"UNAVAILABLE";
NSString * const kGTLRLooker_CustomDomain_State_Unknown        = @"UNKNOWN";
NSString * const kGTLRLooker_CustomDomain_State_Unverified     = @"UNVERIFIED";
NSString * const kGTLRLooker_CustomDomain_State_Verified       = @"VERIFIED";

// GTLRLooker_EncryptionConfig.kmsKeyState
NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_KmsKeyStateUnspecified = @"KMS_KEY_STATE_UNSPECIFIED";
NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_Revoked = @"REVOKED";
NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_Valid = @"VALID";

// GTLRLooker_ExportMetadata.source
NSString * const kGTLRLooker_ExportMetadata_Source_LookerCore  = @"LOOKER_CORE";
NSString * const kGTLRLooker_ExportMetadata_Source_LookerOriginal = @"LOOKER_ORIGINAL";
NSString * const kGTLRLooker_ExportMetadata_Source_SourceUnspecified = @"SOURCE_UNSPECIFIED";

// GTLRLooker_Instance.platformEdition
NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreEmbedAnnual = @"LOOKER_CORE_EMBED_ANNUAL";
NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreEnterpriseAnnual = @"LOOKER_CORE_ENTERPRISE_ANNUAL";
NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreStandard = @"LOOKER_CORE_STANDARD";
NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreStandardAnnual = @"LOOKER_CORE_STANDARD_ANNUAL";
NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreTrial = @"LOOKER_CORE_TRIAL";
NSString * const kGTLRLooker_Instance_PlatformEdition_PlatformEditionUnspecified = @"PLATFORM_EDITION_UNSPECIFIED";

// GTLRLooker_Instance.state
NSString * const kGTLRLooker_Instance_State_Active           = @"ACTIVE";
NSString * const kGTLRLooker_Instance_State_Creating         = @"CREATING";
NSString * const kGTLRLooker_Instance_State_Deleting         = @"DELETING";
NSString * const kGTLRLooker_Instance_State_Exporting        = @"EXPORTING";
NSString * const kGTLRLooker_Instance_State_Failed           = @"FAILED";
NSString * const kGTLRLooker_Instance_State_Importing        = @"IMPORTING";
NSString * const kGTLRLooker_Instance_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRLooker_Instance_State_Suspended        = @"SUSPENDED";
NSString * const kGTLRLooker_Instance_State_Updating         = @"UPDATING";

// GTLRLooker_MaintenanceWindow.dayOfWeek
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_DayOfWeekUnspecified = @"DAY_OF_WEEK_UNSPECIFIED";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Friday = @"FRIDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Monday = @"MONDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Saturday = @"SATURDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Sunday = @"SUNDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Thursday = @"THURSDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Tuesday = @"TUESDAY";
NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Wednesday = @"WEDNESDAY";

// GTLRLooker_ServiceAttachment.connectionStatus
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Accepted = @"ACCEPTED";
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Closed = @"CLOSED";
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_NeedsAttention = @"NEEDS_ATTENTION";
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Pending = @"PENDING";
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Rejected = @"REJECTED";
NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Unknown = @"UNKNOWN";

// ----------------------------------------------------------------------------
//
//   GTLRLooker_AdminSettings
//

@implementation GTLRLooker_AdminSettings
@dynamic allowedEmailDomains;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedEmailDomains" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_AuditConfig
//

@implementation GTLRLooker_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRLooker_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_AuditLogConfig
//

@implementation GTLRLooker_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Binding
//

@implementation GTLRLooker_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_CancelOperationRequest
//

@implementation GTLRLooker_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_CustomDomain
//

@implementation GTLRLooker_CustomDomain
@dynamic domain, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Date
//

@implementation GTLRLooker_Date
@dynamic day, month, year;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_DenyMaintenancePeriod
//

@implementation GTLRLooker_DenyMaintenancePeriod
@dynamic endDate, startDate, time;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Empty
//

@implementation GTLRLooker_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_EncryptionConfig
//

@implementation GTLRLooker_EncryptionConfig
@dynamic kmsKeyName, kmsKeyNameVersion, kmsKeyState;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ExportEncryptionConfig
//

@implementation GTLRLooker_ExportEncryptionConfig
@dynamic kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ExportInstanceRequest
//

@implementation GTLRLooker_ExportInstanceRequest
@dynamic encryptionConfig, gcsUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ExportMetadata
//

@implementation GTLRLooker_ExportMetadata
@dynamic exportEncryptionKey, filePaths, lookerEncryptionKey, lookerInstance,
         lookerPlatformEdition, lookerVersion, source;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filePaths" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ExportMetadataEncryptionKey
//

@implementation GTLRLooker_ExportMetadataEncryptionKey
@dynamic cmek, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Expr
//

@implementation GTLRLooker_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ImportInstanceRequest
//

@implementation GTLRLooker_ImportInstanceRequest
@dynamic gcsUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Instance
//

@implementation GTLRLooker_Instance
@dynamic adminSettings, consumerNetwork, createTime, customDomain,
         denyMaintenancePeriod, egressPublicIp, encryptionConfig, fipsEnabled,
         geminiEnabled, ingressPrivateIp, ingressPublicIp,
         lastDenyMaintenancePeriod, linkedLspProjectNumber, lookerUri,
         lookerVersion, maintenanceSchedule, maintenanceWindow, name,
         oauthConfig, platformEdition, privateIpEnabled, pscConfig, pscEnabled,
         publicIpEnabled, reservedRange, state, updateTime, userMetadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ListInstancesResponse
//

@implementation GTLRLooker_ListInstancesResponse
@dynamic instances, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRLooker_Instance class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"instances";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ListLocationsResponse
//

@implementation GTLRLooker_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRLooker_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ListOperationsResponse
//

@implementation GTLRLooker_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRLooker_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Location
//

@implementation GTLRLooker_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Location_Labels
//

@implementation GTLRLooker_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Location_Metadata
//

@implementation GTLRLooker_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_MaintenanceSchedule
//

@implementation GTLRLooker_MaintenanceSchedule
@dynamic endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_MaintenanceWindow
//

@implementation GTLRLooker_MaintenanceWindow
@dynamic dayOfWeek, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_OAuthConfig
//

@implementation GTLRLooker_OAuthConfig
@dynamic clientId, clientSecret;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Operation
//

@implementation GTLRLooker_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Operation_Metadata
//

@implementation GTLRLooker_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Operation_Response
//

@implementation GTLRLooker_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_OperationMetadata
//

@implementation GTLRLooker_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Policy
//

@implementation GTLRLooker_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRLooker_AuditConfig class],
    @"bindings" : [GTLRLooker_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_PscConfig
//

@implementation GTLRLooker_PscConfig
@dynamic allowedVpcs, lookerServiceAttachmentUri, serviceAttachments;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedVpcs" : [NSString class],
    @"serviceAttachments" : [GTLRLooker_ServiceAttachment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_RestartInstanceRequest
//

@implementation GTLRLooker_RestartInstanceRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_ServiceAttachment
//

@implementation GTLRLooker_ServiceAttachment
@dynamic connectionStatus, localFqdn, targetServiceAttachmentUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_SetIamPolicyRequest
//

@implementation GTLRLooker_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Status
//

@implementation GTLRLooker_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRLooker_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_Status_Details_Item
//

@implementation GTLRLooker_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_TestIamPermissionsRequest
//

@implementation GTLRLooker_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_TestIamPermissionsResponse
//

@implementation GTLRLooker_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_TimeOfDay
//

@implementation GTLRLooker_TimeOfDay
@dynamic hours, minutes, nanos, seconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRLooker_UserMetadata
//

@implementation GTLRLooker_UserMetadata
@dynamic additionalDeveloperUserCount, additionalStandardUserCount,
         additionalViewerUserCount;
@end
