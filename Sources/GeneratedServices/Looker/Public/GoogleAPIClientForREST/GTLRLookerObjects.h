// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Looker (Google Cloud core) API (looker/v1)
// Documentation:
//   https://cloud.google.com/looker/docs/reference/rest/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLooker_AdminSettings;
@class GTLRLooker_AuditConfig;
@class GTLRLooker_AuditLogConfig;
@class GTLRLooker_Binding;
@class GTLRLooker_CustomDomain;
@class GTLRLooker_Date;
@class GTLRLooker_DenyMaintenancePeriod;
@class GTLRLooker_EncryptionConfig;
@class GTLRLooker_ExportEncryptionConfig;
@class GTLRLooker_ExportMetadataEncryptionKey;
@class GTLRLooker_Expr;
@class GTLRLooker_Instance;
@class GTLRLooker_Location;
@class GTLRLooker_Location_Labels;
@class GTLRLooker_Location_Metadata;
@class GTLRLooker_MaintenanceSchedule;
@class GTLRLooker_MaintenanceWindow;
@class GTLRLooker_OAuthConfig;
@class GTLRLooker_Operation;
@class GTLRLooker_Operation_Metadata;
@class GTLRLooker_Operation_Response;
@class GTLRLooker_Policy;
@class GTLRLooker_PscConfig;
@class GTLRLooker_ServiceAttachment;
@class GTLRLooker_Status;
@class GTLRLooker_Status_Details_Item;
@class GTLRLooker_TimeOfDay;
@class GTLRLooker_UserMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRLooker_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRLooker_CustomDomain.state

/**
 *  ManagedCertificate is ready.
 *
 *  Value: "AVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Available;
/**
 *  Unspecified state.
 *
 *  Value: "CUSTOM_DOMAIN_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_CustomDomainStateUnspecified;
/**
 *  Calling SLM to update.
 *
 *  Value: "MODIFYING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Modifying;
/**
 *  ManagedCertificate is not ready.
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Unavailable;
/**
 *  Status is not known.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Unknown;
/**
 *  DNS record is not created.
 *
 *  Value: "UNVERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Unverified;
/**
 *  DNS record is created.
 *
 *  Value: "VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_CustomDomain_State_Verified;

// ----------------------------------------------------------------------------
// GTLRLooker_EncryptionConfig.kmsKeyState

/**
 *  CMEK status not specified.
 *
 *  Value: "KMS_KEY_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_KmsKeyStateUnspecified;
/**
 *  CMEK key is currently revoked (instance should in restricted mode).
 *
 *  Value: "REVOKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_Revoked;
/**
 *  CMEK key is currently valid.
 *
 *  Value: "VALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_EncryptionConfig_KmsKeyState_Valid;

// ----------------------------------------------------------------------------
// GTLRLooker_ExportMetadata.source

/**
 *  Source of export is Looker Core
 *
 *  Value: "LOOKER_CORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ExportMetadata_Source_LookerCore;
/**
 *  Source of export is Looker Original
 *
 *  Value: "LOOKER_ORIGINAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ExportMetadata_Source_LookerOriginal;
/**
 *  Source not specified
 *
 *  Value: "SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ExportMetadata_Source_SourceUnspecified;

// ----------------------------------------------------------------------------
// GTLRLooker_Instance.platformEdition

/**
 *  Subscription Embed.
 *
 *  Value: "LOOKER_CORE_EMBED_ANNUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreEmbedAnnual;
/**
 *  Subscription Enterprise.
 *
 *  Value: "LOOKER_CORE_ENTERPRISE_ANNUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreEnterpriseAnnual;
/**
 *  Standard.
 *
 *  Value: "LOOKER_CORE_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreStandard;
/**
 *  Subscription Standard.
 *
 *  Value: "LOOKER_CORE_STANDARD_ANNUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreStandardAnnual;
/**
 *  Trial.
 *
 *  Value: "LOOKER_CORE_TRIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_LookerCoreTrial;
/**
 *  Platform edition is unspecified.
 *
 *  Value: "PLATFORM_EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_PlatformEdition_PlatformEditionUnspecified;

// ----------------------------------------------------------------------------
// GTLRLooker_Instance.state

/**
 *  Instance is active and ready for use.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Active;
/**
 *  Instance provisioning is in progress.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Creating;
/**
 *  Instance delete is in progress.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Deleting;
/**
 *  Instance is being exported.
 *
 *  Value: "EXPORTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Exporting;
/**
 *  Instance is in a failed state.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Failed;
/**
 *  Instance is importing data.
 *
 *  Value: "IMPORTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Importing;
/**
 *  State is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_StateUnspecified;
/**
 *  Instance was suspended.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Suspended;
/**
 *  Instance update is in progress.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRLooker_MaintenanceWindow.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_MaintenanceWindow_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRLooker_ServiceAttachment.connectionStatus

/**
 *  Connection is established and functioning normally.
 *
 *  Value: "ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Accepted;
/**
 *  Target service attachment does not exist. This status is a terminal state.
 *
 *  Value: "CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Closed;
/**
 *  Issue with target service attachment, e.g. NAT subnet is exhausted.
 *
 *  Value: "NEEDS_ATTENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_NeedsAttention;
/**
 *  Connection is not established (Looker tenant project hasn't been
 *  allowlisted).
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Pending;
/**
 *  Connection is not established (Looker tenant project is explicitly in reject
 *  list).
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Rejected;
/**
 *  Connection status is unspecified.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRLooker_ServiceAttachment_ConnectionStatus_Unknown;

/**
 *  Looker instance Admin settings fields.
 */
@interface GTLRLooker_AdminSettings : GTLRObject

/** Email domain allowlist for the instance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedEmailDomains;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRLooker_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRLooker_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_AuditLogConfig_LogType_AdminRead Admin reads. Example:
 *        CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRLooker_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRLooker_AuditLogConfig_LogType_DataWrite Data writes. Example:
 *        CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRLooker_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRLooker_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRLooker_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRLooker_CancelOperationRequest : GTLRObject
@end


/**
 *  Custom domain information.
 */
@interface GTLRLooker_CustomDomain : GTLRObject

/** Domain name. */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Domain state.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_CustomDomain_State_Available ManagedCertificate is
 *        ready. (Value: "AVAILABLE")
 *    @arg @c kGTLRLooker_CustomDomain_State_CustomDomainStateUnspecified
 *        Unspecified state. (Value: "CUSTOM_DOMAIN_STATE_UNSPECIFIED")
 *    @arg @c kGTLRLooker_CustomDomain_State_Modifying Calling SLM to update.
 *        (Value: "MODIFYING")
 *    @arg @c kGTLRLooker_CustomDomain_State_Unavailable ManagedCertificate is
 *        not ready. (Value: "UNAVAILABLE")
 *    @arg @c kGTLRLooker_CustomDomain_State_Unknown Status is not known.
 *        (Value: "UNKNOWN")
 *    @arg @c kGTLRLooker_CustomDomain_State_Unverified DNS record is not
 *        created. (Value: "UNVERIFIED")
 *    @arg @c kGTLRLooker_CustomDomain_State_Verified DNS record is created.
 *        (Value: "VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRLooker_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Specifies the maintenance denial period.
 */
@interface GTLRLooker_DenyMaintenancePeriod : GTLRObject

/** Required. End date of the deny maintenance period. */
@property(nonatomic, strong, nullable) GTLRLooker_Date *endDate;

/** Required. Start date of the deny maintenance period. */
@property(nonatomic, strong, nullable) GTLRLooker_Date *startDate;

/** Required. Time in UTC when the period starts and ends. */
@property(nonatomic, strong, nullable) GTLRLooker_TimeOfDay *time;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRLooker_Empty : GTLRObject
@end


/**
 *  Encryption configuration (i.e. CMEK).
 */
@interface GTLRLooker_EncryptionConfig : GTLRObject

/** Name of the CMEK key in KMS (input parameter). */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Output only. Full name and version of the CMEK key currently in use to
 *  encrypt Looker data. Format:
 *  `projects/{project}/locations/{location}/keyRings/{ring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
 *  Empty if CMEK is not configured in this instance.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyNameVersion;

/**
 *  Output only. Status of the CMEK key.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_EncryptionConfig_KmsKeyState_KmsKeyStateUnspecified
 *        CMEK status not specified. (Value: "KMS_KEY_STATE_UNSPECIFIED")
 *    @arg @c kGTLRLooker_EncryptionConfig_KmsKeyState_Revoked CMEK key is
 *        currently revoked (instance should in restricted mode). (Value:
 *        "REVOKED")
 *    @arg @c kGTLRLooker_EncryptionConfig_KmsKeyState_Valid CMEK key is
 *        currently valid. (Value: "VALID")
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyState;

@end


/**
 *  Configuration for Encryption - e.g. CMEK.
 */
@interface GTLRLooker_ExportEncryptionConfig : GTLRObject

/** Required. Name of the CMEK key in KMS. */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  Request options for exporting data of an Instance.
 */
@interface GTLRLooker_ExportInstanceRequest : GTLRObject

/**
 *  Required. Encryption configuration (CMEK). For CMEK enabled instances it
 *  should be same as looker CMEK.
 */
@property(nonatomic, strong, nullable) GTLRLooker_ExportEncryptionConfig *encryptionConfig;

/**
 *  The path to the folder in Google Cloud Storage where the export will be
 *  stored. The URI is in the form `gs://bucketName/folderName`.
 */
@property(nonatomic, copy, nullable) NSString *gcsUri;

@end


/**
 *  ExportMetadata represents the metadata of the exported artifacts. The
 *  metadata.json file in export artifact can be parsed as this message
 */
@interface GTLRLooker_ExportMetadata : GTLRObject

/** Encryption key that was used to encrypt the export artifacts. */
@property(nonatomic, strong, nullable) GTLRLooker_ExportMetadataEncryptionKey *exportEncryptionKey;

/**
 *  List of files created as part of export artifact (excluding the metadata).
 *  The paths are relative to the folder containing the metadata.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *filePaths;

/**
 *  Looker encryption key, encrypted with the provided export encryption key.
 *  This value will only be populated if the looker instance uses Looker managed
 *  encryption instead of CMEK.
 */
@property(nonatomic, copy, nullable) NSString *lookerEncryptionKey;

/**
 *  Name of the exported instance. Format:
 *  projects/{project}/locations/{location}/instances/{instance}
 */
@property(nonatomic, copy, nullable) NSString *lookerInstance;

/** Platform edition of the exported instance. */
@property(nonatomic, copy, nullable) NSString *lookerPlatformEdition;

/** Version of instance when the export was created. */
@property(nonatomic, copy, nullable) NSString *lookerVersion;

/**
 *  The source type of the migration.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_ExportMetadata_Source_LookerCore Source of export is
 *        Looker Core (Value: "LOOKER_CORE")
 *    @arg @c kGTLRLooker_ExportMetadata_Source_LookerOriginal Source of export
 *        is Looker Original (Value: "LOOKER_ORIGINAL")
 *    @arg @c kGTLRLooker_ExportMetadata_Source_SourceUnspecified Source not
 *        specified (Value: "SOURCE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *source;

@end


/**
 *  Encryption key details for the exported artifact.
 */
@interface GTLRLooker_ExportMetadataEncryptionKey : GTLRObject

/** Name of the CMEK. */
@property(nonatomic, copy, nullable) NSString *cmek;

/** Version of the CMEK. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRLooker_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Requestion options for importing looker data to an Instance
 */
@interface GTLRLooker_ImportInstanceRequest : GTLRObject

/**
 *  Path to the import folder in Google Cloud Storage, in the form
 *  `gs://bucketName/folderName`.
 */
@property(nonatomic, copy, nullable) NSString *gcsUri;

@end


/**
 *  A Looker instance.
 */
@interface GTLRLooker_Instance : GTLRObject

/** Looker Instance Admin settings. */
@property(nonatomic, strong, nullable) GTLRLooker_AdminSettings *adminSettings;

/**
 *  Network name in the consumer project. Format:
 *  `projects/{project}/global/networks/{network}`. Note that the consumer
 *  network may be in a different GCP project than the consumer project that is
 *  hosting the Looker Instance.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/**
 *  Output only. The time when the Looker instance provisioning was first
 *  requested.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@property(nonatomic, strong, nullable) GTLRLooker_CustomDomain *customDomain;

/** Maintenance denial period for this instance. */
@property(nonatomic, strong, nullable) GTLRLooker_DenyMaintenancePeriod *denyMaintenancePeriod;

/** Output only. Public Egress IP (IPv4). */
@property(nonatomic, copy, nullable) NSString *egressPublicIp;

/**
 *  Encryption configuration (CMEK). Only set if CMEK has been enabled on the
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRLooker_EncryptionConfig *encryptionConfig;

/**
 *  Optional. Whether FIPS is enabled on the Looker instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fipsEnabled;

/**
 *  Optional. Whether Gemini feature is enabled on the Looker instance or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *geminiEnabled;

/** Output only. Private Ingress IP (IPv4). */
@property(nonatomic, copy, nullable) NSString *ingressPrivateIp;

/** Output only. Public Ingress IP (IPv4). */
@property(nonatomic, copy, nullable) NSString *ingressPublicIp;

/** Output only. Last computed maintenance denial period for this instance. */
@property(nonatomic, strong, nullable) GTLRLooker_DenyMaintenancePeriod *lastDenyMaintenancePeriod;

/**
 *  Optional. Linked Google Cloud Project Number for Looker Studio Pro.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *linkedLspProjectNumber;

/**
 *  Output only. Looker instance URI which can be used to access the Looker
 *  Instance UI.
 */
@property(nonatomic, copy, nullable) NSString *lookerUri;

/** Output only. The Looker version that the instance is using. */
@property(nonatomic, copy, nullable) NSString *lookerVersion;

/** Maintenance schedule for this instance. */
@property(nonatomic, strong, nullable) GTLRLooker_MaintenanceSchedule *maintenanceSchedule;

/** Maintenance window for this instance. */
@property(nonatomic, strong, nullable) GTLRLooker_MaintenanceWindow *maintenanceWindow;

/**
 *  Output only. Format:
 *  `projects/{project}/locations/{location}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Looker instance OAuth login settings. */
@property(nonatomic, strong, nullable) GTLRLooker_OAuthConfig *oauthConfig;

/**
 *  Platform edition.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_LookerCoreEmbedAnnual
 *        Subscription Embed. (Value: "LOOKER_CORE_EMBED_ANNUAL")
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_LookerCoreEnterpriseAnnual
 *        Subscription Enterprise. (Value: "LOOKER_CORE_ENTERPRISE_ANNUAL")
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_LookerCoreStandard Standard.
 *        (Value: "LOOKER_CORE_STANDARD")
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_LookerCoreStandardAnnual
 *        Subscription Standard. (Value: "LOOKER_CORE_STANDARD_ANNUAL")
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_LookerCoreTrial Trial.
 *        (Value: "LOOKER_CORE_TRIAL")
 *    @arg @c kGTLRLooker_Instance_PlatformEdition_PlatformEditionUnspecified
 *        Platform edition is unspecified. (Value:
 *        "PLATFORM_EDITION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *platformEdition;

/**
 *  Whether private IP is enabled on the Looker instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *privateIpEnabled;

/** Optional. PSC configuration. Used when `psc_enabled` is true. */
@property(nonatomic, strong, nullable) GTLRLooker_PscConfig *pscConfig;

/**
 *  Optional. Whether to use Private Service Connect (PSC) for private IP
 *  connectivity. If true, neither `public_ip_enabled` nor `private_ip_enabled`
 *  can be true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pscEnabled;

/**
 *  Whether public IP is enabled on the Looker instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *publicIpEnabled;

/**
 *  Name of a reserved IP address range within the Instance.consumer_network, to
 *  be used for private services access connection. May or may not be specified
 *  in a create request.
 */
@property(nonatomic, copy, nullable) NSString *reservedRange;

/**
 *  Output only. The state of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_Instance_State_Active Instance is active and ready for
 *        use. (Value: "ACTIVE")
 *    @arg @c kGTLRLooker_Instance_State_Creating Instance provisioning is in
 *        progress. (Value: "CREATING")
 *    @arg @c kGTLRLooker_Instance_State_Deleting Instance delete is in
 *        progress. (Value: "DELETING")
 *    @arg @c kGTLRLooker_Instance_State_Exporting Instance is being exported.
 *        (Value: "EXPORTING")
 *    @arg @c kGTLRLooker_Instance_State_Failed Instance is in a failed state.
 *        (Value: "FAILED")
 *    @arg @c kGTLRLooker_Instance_State_Importing Instance is importing data.
 *        (Value: "IMPORTING")
 *    @arg @c kGTLRLooker_Instance_State_StateUnspecified State is unspecified.
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRLooker_Instance_State_Suspended Instance was suspended.
 *        (Value: "SUSPENDED")
 *    @arg @c kGTLRLooker_Instance_State_Updating Instance update is in
 *        progress. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time when the Looker instance was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** User metadata. */
@property(nonatomic, strong, nullable) GTLRLooker_UserMetadata *userMetadata;

@end


/**
 *  Response from ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLooker_ListInstancesResponse : GTLRCollectionObject

/**
 *  The list of instances matching the request filters, up to the requested
 *  ListInstancesRequest.pageSize.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_Instance *> *instances;

/**
 *  If provided, a page token that can look up the next
 *  ListInstancesRequest.pageSize results. If empty, the results list is
 *  exhausted.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLooker_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLooker_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRLooker_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRLooker_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRLooker_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLooker_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLooker_Location_Metadata : GTLRObject
@end


/**
 *  Published upcoming future maintenance schedule.
 */
@interface GTLRLooker_MaintenanceSchedule : GTLRObject

/** The scheduled end time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The scheduled start time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Specifies the recurring maintenance window.
 */
@interface GTLRLooker_MaintenanceWindow : GTLRObject

/**
 *  Required. Day of the week for this MaintenanceWindow (in UTC).
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_DayOfWeekUnspecified The
 *        day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Friday Friday (Value:
 *        "FRIDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Monday Monday (Value:
 *        "MONDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Saturday Saturday (Value:
 *        "SATURDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Sunday Sunday (Value:
 *        "SUNDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Thursday Thursday (Value:
 *        "THURSDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Tuesday Tuesday (Value:
 *        "TUESDAY")
 *    @arg @c kGTLRLooker_MaintenanceWindow_DayOfWeek_Wednesday Wednesday
 *        (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

/**
 *  Required. Time in UTC when the period starts. Maintenance will be scheduled
 *  within 60 minutes.
 */
@property(nonatomic, strong, nullable) GTLRLooker_TimeOfDay *startTime;

@end


/**
 *  Looker instance OAuth login settings.
 */
@interface GTLRLooker_OAuthConfig : GTLRObject

/**
 *  Input only. Client ID from an external OAuth application. This is an
 *  input-only field, and thus will not be set in any responses.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/**
 *  Input only. Client secret from an external OAuth application. This is an
 *  input-only field, and thus will not be set in any responses.
 */
@property(nonatomic, copy, nullable) NSString *clientSecret;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRLooker_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRLooker_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRLooker_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRLooker_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLooker_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLooker_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRLooker_OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Identifies whether the user has requested cancellation of the operation.
 *  Operations that have successfully been cancelled have Operation.error value
 *  with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRLooker_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Information for Private Service Connect (PSC) setup for a Looker instance.
 */
@interface GTLRLooker_PscConfig : GTLRObject

/**
 *  Optional. List of VPCs that are allowed ingress into looker. Format:
 *  projects/{project}/global/networks/{network}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedVpcs;

/** Output only. URI of the Looker service attachment. */
@property(nonatomic, copy, nullable) NSString *lookerServiceAttachmentUri;

/** Optional. List of egress service attachment configurations. */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_ServiceAttachment *> *serviceAttachments;

@end


/**
 *  Request options for restarting an instance.
 */
@interface GTLRLooker_RestartInstanceRequest : GTLRObject
@end


/**
 *  Service attachment configuration.
 */
@interface GTLRLooker_ServiceAttachment : GTLRObject

/**
 *  Output only. Connection status.
 *
 *  Likely values:
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_Accepted Connection
 *        is established and functioning normally. (Value: "ACCEPTED")
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_Closed Target
 *        service attachment does not exist. This status is a terminal state.
 *        (Value: "CLOSED")
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_NeedsAttention
 *        Issue with target service attachment, e.g. NAT subnet is exhausted.
 *        (Value: "NEEDS_ATTENTION")
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_Pending Connection
 *        is not established (Looker tenant project hasn't been allowlisted).
 *        (Value: "PENDING")
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_Rejected Connection
 *        is not established (Looker tenant project is explicitly in reject
 *        list). (Value: "REJECTED")
 *    @arg @c kGTLRLooker_ServiceAttachment_ConnectionStatus_Unknown Connection
 *        status is unspecified. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *connectionStatus;

/**
 *  Required. Fully qualified domain name that will be used in the private DNS
 *  record created for the service attachment.
 */
@property(nonatomic, copy, nullable) NSString *localFqdn;

/**
 *  Required. URI of the service attachment to connect to. Format:
 *  projects/{project}/regions/{region}/serviceAttachments/{service_attachment}
 */
@property(nonatomic, copy, nullable) NSString *targetServiceAttachmentUri;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRLooker_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRLooker_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRLooker_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLooker_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRLooker_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLooker_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRLooker_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRLooker_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRLooker_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Metadata about users for a Looker instance.
 */
@interface GTLRLooker_UserMetadata : GTLRObject

/**
 *  Optional. The number of additional developer users the instance owner has
 *  purchased.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *additionalDeveloperUserCount;

/**
 *  Optional. The number of additional standard users the instance owner has
 *  purchased.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *additionalStandardUserCount;

/**
 *  Optional. The number of additional viewer users the instance owner has
 *  purchased.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *additionalViewerUserCount;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
