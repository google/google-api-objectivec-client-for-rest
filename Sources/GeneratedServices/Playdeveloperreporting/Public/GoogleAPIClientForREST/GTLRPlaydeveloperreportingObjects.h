// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Developer Reporting API (playdeveloperreporting/v1beta1)
// Documentation:
//   https://developers.google.com/play/developer/reporting

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1App;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AppVersion;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DecimalConfidenceInterval;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceId;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceModelSummary;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1OsVersion;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Release;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Track;
@class GTLRPlaydeveloperreporting_GoogleTypeDateTime;
@class GTLRPlaydeveloperreporting_GoogleTypeDecimal;
@class GTLRPlaydeveloperreporting_GoogleTypeTimeZone;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue.type

/**
 *  Application Not Responding (ANR) error. To learn more about this type of
 *  errors visit the corresponding Android Developers documentation.
 *
 *  Value: "APPLICATION_NOT_RESPONDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_ApplicationNotResponding;
/**
 *  Crash caused by an unhandled exception in Java (or Kotlin or any other JVM
 *  language) or a signal in native code such as SIGSEGV.
 *
 *  Value: "CRASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_Crash;
/**
 *  Unspecified error type.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_ErrorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport.type

/**
 *  Application Not Responding (ANR) error. To learn more about this type of
 *  errors visit the corresponding Android Developers documentation.
 *
 *  Value: "APPLICATION_NOT_RESPONDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_ApplicationNotResponding;
/**
 *  Crash caused by an unhandled exception in Java (or Kotlin or any other JVM
 *  language) or a signal in native code such as SIGSEGV.
 *
 *  Value: "CRASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_Crash;
/**
 *  Unspecified error type.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_ErrorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Daily;
/**
 *  Data is aggregated over the full timeline range. Effectively this produces a
 *  single value rather than a timeline.
 *
 *  Value: "FULL_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_FullRange;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Hourly;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Daily;
/**
 *  Data is aggregated over the full timeline range. Effectively this produces a
 *  single value rather than a timeline.
 *
 *  Value: "FULL_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_FullRange;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Hourly;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest.userCohort

/**
 *  This is the view with data only from users who have opted in to be testers
 *  for a given app, excluding OS beta data.
 *
 *  Value: "APP_TESTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_AppTesters;
/**
 *  This is the view with just android beta data excluding released OS version
 *  data.
 *
 *  Value: "OS_BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_OsBeta;
/**
 *  This is default view. Contains data from public released android versions
 *  only.
 *
 *  Value: "OS_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_OsPublic;
/**
 *  Unspecified User cohort. This will automatically choose the default value.
 *
 *  Value: "USER_COHORT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_UserCohortUnspecified;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Daily;
/**
 *  Data is aggregated over the full timeline range. Effectively this produces a
 *  single value rather than a timeline.
 *
 *  Value: "FULL_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_FullRange;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Hourly;

/**
 *  Represents an anomaly detected in a dataset. Our anomaly detection systems
 *  flag datapoints in a time series that fall outside of and expected range
 *  derived from historical data. Although those expected ranges have an upper
 *  and a lower bound, we only flag anomalies when the data has become
 *  unexpectedly _worse_, which usually corresponds to the case where the metric
 *  crosses the upper bound. Multiple contiguous datapoints in a timeline
 *  outside of the expected range will be grouped into a single anomaly.
 *  Therefore, an anomaly represents effectively a segment of a metric's
 *  timeline. The information stored in the `timeline_spec`, `dimensions` and
 *  `metric` can be used to fetch a full timeline with extended ragne for
 *  context. **Required permissions**: to access this resource, the calling user
 *  needs the _View app information (read-only)_ permission for the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly : GTLRObject

/** Combination of dimensions in which the anomaly was detected. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue *> *dimensions;

/**
 *  Metric where the anomaly was detected, together with the anomalous value.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue *metric;

/** Metric set resource where the anomaly was detected. */
@property(nonatomic, copy, nullable) NSString *metricSet;

/** Identifier. Name of the anomaly. Format: apps/{app}/anomalies/{anomaly} */
@property(nonatomic, copy, nullable) NSString *name;

/** Timeline specification that covers the anomaly period. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Singleton resource representing the set of ANR (Application not responding)
 *  metrics. This metric set contains ANRs data combined with usage data to
 *  produce a normalized metric independent of user counts. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`. * HOURLY: metrics are aggregated in hourly intervals.
 *  The default and only supported timezone is `UTC`. **Supported metrics:** *
 *  `anrRate` (`google.type.Decimal`): Percentage of distinct users in the
 *  aggregation period that experienced at least one ANR. *
 *  `anrRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of
 *  `anrRate` in the last 7 days. The daily values are weighted by the count of
 *  distinct users for the day. Not supported in HOURLY granularity. *
 *  `anrRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of
 *  `anrRate` in the last 28 days. The daily values are weighted by the count of
 *  distinct users for the day. Not supported in HOURLY granularity. *
 *  `userPerceivedAnrRate` (`google.type.Decimal`): Percentage of distinct users
 *  in the aggregation period that experienced at least one user-perceived ANR.
 *  User-perceived ANRs are currently those of 'Input dispatching' type. *
 *  `userPerceivedAnrRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 7 days. The daily values
 *  are weighted by the count of distinct users for the day. Not supported in
 *  HOURLY granularity. * `userPerceivedAnrRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedAnrRate` in
 *  the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. * `distinctUsers` (`google.type.Decimal`): Count of
 *  distinct users in the aggregation period that were used as normalization
 *  value for the `anrRate` and `userPerceivedAnrRate` metrics. A user is
 *  counted in this metric if they used the app in the foreground during the
 *  aggregation period. Care must be taken not to aggregate this count further,
 *  as it may result in users being counted multiple times. The value is rounded
 *  to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the
 *  magnitude of the value. **Supported dimensions:** * `apiLevel` (string): the
 *  API level of Android that was running on the user's device, e.g., 26. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. The form of the identifier is 'deviceBrand/device', where deviceBrand
 *  corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
 *  google/coral. * `deviceBrand` (string): unique identifier of the user's
 *  device brand, e.g., google. * `deviceType` (string): the type (also known as
 *  form factor) of the user's device, e.g., PHONE. * `countryCode` (string):
 *  the country or region of the user's device based on their IP address,
 *  represented as a 2-letter ISO-3166 code (e.g. US for the United States). *
 *  `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB,
 *  etc.). * `deviceSocMake` (string): Make of the device's primary
 *  system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app. **Related metric sets:** * vitals.errors contains unnormalized
 *  version (absolute counts) of crashes. * vitals.errors contains normalized
 *  metrics about crashes, another stability metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AnrRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** Identifier. The resource name. Format: apps/{app}/anrRateMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A representation of an app in the Play Store.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1App : GTLRObject

/**
 *  Title of the app. This is the latest title as set in the Play Console and
 *  may not yet have been reviewed, so might not match the Play Store. Example:
 *  `Google Maps`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Identifier. The resource name. Format: apps/{app} */
@property(nonatomic, copy, nullable) NSString *name;

/** Package name of the app. Example: `com.example.app123`. */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  Representations of an app version.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AppVersion : GTLRObject

/**
 *  Numeric version code of the app version (set by the app's developer).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  Singleton resource representing the set of crashrate metrics. This metric
 *  set contains crashes data combined with usage data to produce a normalized
 *  metric independent of user counts. **Supported aggregation periods:** *
 *  DAILY: metrics are aggregated in calendar date intervals. Due to historical
 *  constraints, the only supported timezone is `America/Los_Angeles`. * HOURLY:
 *  metrics are aggregated in hourly intervals. The default and only supported
 *  timezone is `UTC`. **Supported metrics:** * `crashRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one crash. * `crashRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `crashRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. Not supported in HOURLY granularity. * `crashRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `crashRate` in the last 28
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. Not supported in HOURLY granularity. * `userPerceivedCrashRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one crash while they were actively using
 *  your app (a user-perceived crash). An app is considered to be in active use
 *  if it is displaying any activity or executing any foreground service. *
 *  `userPerceivedCrashRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedCrashRate` in the last 7 days. The daily
 *  values are weighted by the count of distinct users for the day. Not
 *  supported in HOURLY granularity. * `userPerceivedCrashRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate`
 *  in the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. Not supported in HOURLY granularity. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `crashRate` and
 *  `userPerceivedCrashRate` metrics. A user is counted in this metric if they
 *  used the app actively during the aggregation period. An app is considered to
 *  be in active use if it is displaying any activity or executing any
 *  foreground service. Care must be taken not to aggregate this count further,
 *  as it may result in users being counted multiple times. The value is rounded
 *  to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the
 *  magnitude of the value. **Supported dimensions:** * `apiLevel` (string): the
 *  API level of Android that was running on the user's device, e.g., 26. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. The form of the identifier is 'deviceBrand/device', where deviceBrand
 *  corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
 *  google/coral. * `deviceBrand` (string): unique identifier of the user's
 *  device brand, e.g., google. * `deviceType` (string): the type (also known as
 *  form factor) of the user's device, e.g., PHONE. * `countryCode` (string):
 *  the country or region of the user's device based on their IP address,
 *  represented as a 2-letter ISO-3166 code (e.g. US for the United States). *
 *  `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB,
 *  etc.). * `deviceSocMake` (string): Make of the device's primary
 *  system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app. **Related metric sets:** * vitals.errors contains unnormalized
 *  version (absolute counts) of crashes. * vitals.errors contains normalized
 *  metrics about ANRs, another stability metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1CrashRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** Identifier. The resource name. Format: apps/{app}/crashRateMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents the confidence interval of a metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DecimalConfidenceInterval : GTLRObject

/** The confidence interval's lower bound. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDecimal *lowerBound;

/** The confidence interval's upper bound. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDecimal *upperBound;

@end


/**
 *  Identifier of a device.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceId : GTLRObject

/** Value of Build.BRAND. */
@property(nonatomic, copy, nullable) NSString *buildBrand;

/** Value of Build.DEVICE. */
@property(nonatomic, copy, nullable) NSString *buildDevice;

@end


/**
 *  Summary of a device
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceModelSummary : GTLRObject

/** Identifier of the device. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceId *deviceId;

/** Link to the device in Play Device Catalog. */
@property(nonatomic, copy, nullable) NSString *deviceUri;

/** Display name of the device. */
@property(nonatomic, copy, nullable) NSString *marketingName;

@end


/**
 *  Represents the value of a single dimension.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue : GTLRObject

/** Name of the dimension. */
@property(nonatomic, copy, nullable) NSString *dimension;

/**
 *  Actual value, represented as an int64.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

/** Actual value, represented as a string. */
@property(nonatomic, copy, nullable) NSString *stringValue;

/**
 *  Optional. Human-friendly label for the value, always in English. For
 *  example, 'Spain' for the 'ES' country code. Whereas the dimension value is
 *  stable, this value label is subject to change. Do not assume that the
 *  (value, value_label) relationship is stable. For example, the ISO country
 *  code 'MK' changed its name recently to 'North Macedonia'.
 */
@property(nonatomic, copy, nullable) NSString *valueLabel;

@end


/**
 *  Singleton resource representing the set of error report metrics. This metric
 *  set contains un-normalized error report counts. **Supported aggregation
 *  periods:** * HOURLY: metrics are aggregated in hourly intervals. The default
 *  and only supported timezone is `UTC`. * DAILY: metrics are aggregated in
 *  calendar date intervals. The default and only supported timezone is
 *  `America/Los_Angeles`. **Supported metrics:** * `errorReportCount`
 *  (`google.type.Decimal`): Absolute count of individual error reports that
 *  have been received for an app. * `distinctUsers` (`google.type.Decimal`):
 *  Count of distinct users for which reports have been received. Care must be
 *  taken not to aggregate this count further, as it may result in users being
 *  counted multiple times. This value is not rounded, however it may be an
 *  approximation. **Required dimension:** This dimension must be always
 *  specified in all requests in the `dimensions` field in query requests. *
 *  `reportType` (string): the type of error. The value should correspond to one
 *  of the possible values in ErrorType. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceType` (string): identifier of the
 *  device's form factor, e.g., PHONE. * `issueId` (string): the id an error was
 *  assigned to. The value should correspond to the `{issue}` component of the
 *  issue name. * `deviceRamBucket` (int64): RAM of the device, in MB, in
 *  buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device's
 *  primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app. **Related metric sets:** * vitals.errors.counts contains normalized
 *  metrics about Crashes, another stability metric. * vitals.errors.counts
 *  contains normalized metrics about ANRs, another stability metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorCountMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** The resource name. Format: apps/{app}/errorCountMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A group of related ErrorReports received for an app. Similar error reports
 *  are grouped together into issues with a likely identical root cause.
 *  **Please note:** this resource is currently in Alpha. There could be changes
 *  to the issue grouping that would result in similar but more recent error
 *  reports being assigned to different issues. This could also cause some
 *  issues disappearing entirely and being replaced by new ones. **Required
 *  permissions**: to access this resource, the calling user needs the _View app
 *  information (read-only)_ permission for the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue : GTLRObject

/**
 *  Cause of the issue. Depending on the type this can be either: *
 *  APPLICATION_NOT_RESPONDING: the type of ANR that occurred, e.g., 'Input
 *  dispatching timed out'. * CRASH: for Java unhandled exception errors, the
 *  type of the innermost exception that was thrown, e.g.,
 *  IllegalArgumentException. For signals in native code, the signal that was
 *  raised, e.g. SIGSEGV.
 */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  An estimate of the number of unique users who have experienced this issue
 *  (only considering occurrences matching the filters and within the requested
 *  time period).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distinctUsers;

/**
 *  An estimated percentage of users affected by any issue that are affected by
 *  this issue (only considering occurrences matching the filters and within the
 *  requested time period).
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDecimal *distinctUsersPercent;

/**
 *  The total number of error reports in this issue (only considering
 *  occurrences matching the filters and within the requested time period).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorReportCount;

/**
 *  The earliest (inclusive) app version appearing in this ErrorIssue in the
 *  requested time period (only considering occurrences matching the filters).
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AppVersion *firstAppVersion;

/**
 *  The smallest OS version in which this error cluster has occurred in the
 *  requested time period (only considering occurrences matching the filters and
 *  within the requested time period).
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1OsVersion *firstOsVersion;

/** Link to the issue in Android vitals in the Play Console. */
@property(nonatomic, copy, nullable) NSString *issueUri;

/**
 *  The latest (inclusive) app version appearing in this ErrorIssue in the
 *  requested time period (only considering occurrences matching the filters).
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AppVersion *lastAppVersion;

/**
 *  Start of the hour during which the last error report in this issue occurred.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastErrorReportTime;

/**
 *  The latest OS version in which this error cluster has occurred in the
 *  requested time period (only considering occurrences matching the filters and
 *  within the requested time period).
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1OsVersion *lastOsVersion;

/**
 *  Location where the issue happened. Depending on the type this can be either:
 *  * APPLICATION_NOT_RESPONDING: the name of the activity or service that
 *  stopped responding. * CRASH: the likely method name that caused the error.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Identifier. The resource name of the issue. Format:
 *  apps/{app}/errorIssues/{issue}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Type of the errors grouped in this issue.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_ApplicationNotResponding
 *        Application Not Responding (ANR) error. To learn more about this type
 *        of errors visit the corresponding Android Developers documentation.
 *        (Value: "APPLICATION_NOT_RESPONDING")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_Crash
 *        Crash caused by an unhandled exception in Java (or Kotlin or any other
 *        JVM language) or a signal in native code such as SIGSEGV. (Value:
 *        "CRASH")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue_Type_ErrorTypeUnspecified
 *        Unspecified error type. (Value: "ERROR_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  An error report received for an app. There reports are produced by the
 *  Android platform code when a (potentially fatal) error condition is
 *  detected. Identical reports from many users will be deduplicated and
 *  coalesced into a single ErrorReport. **Required permissions**: to access
 *  this resource, the calling user needs the _View app information (read-only)_
 *  permission for the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport : GTLRObject

/** The app version on which an event in this error report occurred on. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AppVersion *appVersion;

/** A device model on which an event in this error report occurred on. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DeviceModelSummary *deviceModel;

/**
 *  Start of the hour during which the latest event in this error report
 *  occurred.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  The issue this report was associated with. **Please note:** this resource is
 *  currently in Alpha. There could be changes to the issue grouping that would
 *  result in similar but more recent error reports being assigned to a
 *  different issue.
 */
@property(nonatomic, copy, nullable) NSString *issue;

/**
 *  The resource name of the report. Format: apps/{app}/errorReports/{report}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The OS version on which an event in this error report occurred on. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1OsVersion *osVersion;

/**
 *  Textual representation of the error report. These textual reports are
 *  produced by the platform. The reports are then sanitized and filtered to
 *  remove any potentially sensitive information. Although their format is
 *  fairly stable, they are not entirely meant for machine consumption and we
 *  cannot guarantee that there won't be subtle changes to the formatting that
 *  may break systems trying to parse information out of the reports.
 */
@property(nonatomic, copy, nullable) NSString *reportText;

/**
 *  Type of the error for which this report was generated.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_ApplicationNotResponding
 *        Application Not Responding (ANR) error. To learn more about this type
 *        of errors visit the corresponding Android Developers documentation.
 *        (Value: "APPLICATION_NOT_RESPONDING")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_Crash
 *        Crash caused by an unhandled exception in Java (or Kotlin or any other
 *        JVM language) or a signal in native code such as SIGSEGV. (Value:
 *        "CRASH")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport_Type_ErrorTypeUnspecified
 *        Unspecified error type. (Value: "ERROR_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Version control system information from
 *  BUNDLE-METADATA/version-control-info.textproto or
 *  META-INF/version-control-info.textproto of the app bundle or APK,
 *  respectively.
 */
@property(nonatomic, copy, nullable) NSString *vcsInformation;

@end


/**
 *  Singleton resource representing the set of Excessive Weakeups metrics. This
 *  metric set contains AlarmManager wakeup counts data combined with process
 *  state data to produce a normalized metric independent of user counts.
 *  **Supported aggregation periods:** * DAILY: metrics are aggregated in
 *  calendar date intervals. Due to historical constraints, the only supported
 *  timezone is `America/Los_Angeles`. **Supported metrics:** *
 *  `excessiveWakeupRate` (`google.type.Decimal`): Percentage of distinct users
 *  in the aggregation period that had more than 10 wakeups per hour. *
 *  `excessiveWakeupRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `excessiveWakeupRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `excessiveWakeupRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `excessiveWakeupRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `excessiveWakeupRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times. The value is rounded to the nearest
 *  multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the
 *  value. **Supported dimensions:** * `apiLevel` (string): the API level of
 *  Android that was running on the user's device, e.g., 26. * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `deviceModel` (string): unique identifier of the user's device model. The
 *  form of the identifier is 'deviceBrand/device', where deviceBrand
 *  corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
 *  google/coral. * `deviceBrand` (string): unique identifier of the user's
 *  device brand, e.g., google. * `deviceType` (string): the type (also known as
 *  form factor) of the user's device, e.g., PHONE. * `countryCode` (string):
 *  the country or region of the user's device based on their IP address,
 *  represented as a 2-letter ISO-3166 code (e.g. US for the United States). *
 *  `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB,
 *  etc.). * `deviceSocMake` (string): Make of the device's primary
 *  system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ExcessiveWakeupRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/**
 *  Identifier. The resource name. Format:
 *  apps/{app}/excessiveWakeupRateMetricSet
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents the latest available time that can be requested in a
 *  TimelineSpec. Different aggregation periods have different freshness. For
 *  example, `DAILY` aggregation may lag behind `HOURLY` in cases where such
 *  aggregation is computed only once at the end of the day.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo : GTLRObject

/**
 *  Information about data freshness for every supported aggregation period.
 *  This field has set semantics, keyed by the `aggregation_period` field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness *> *freshnesses;

@end


/**
 *  Information about data freshness for a single aggregation period.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness : GTLRObject

/**
 *  Aggregation period for which data is available.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_FullRange
 *        Data is aggregated over the full timeline range. Effectively this
 *        produces a single value rather than a timeline. (Value: "FULL_RANGE")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/**
 *  Latest end time for which data is available, for the aggregation period. The
 *  time is specified in the metric set's default timezone. *Note:* time ranges
 *  in TimelineSpec are represented as `start_time, end_time)`. For example, if
 *  the latest available timeline data point for a `DAILY` aggregation period is
 *  `2021-06-23 00:00:00 America/Los_Angeles`, the value of this field would be
 *  `2021-06-24 00:00:00 America/Los_Angeles` so it can be easily reused in
 *  [TimelineSpec.end_time.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *latestEndTime;

@end


/**
 *  Response with a list of anomalies in datasets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "anomalies" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ListAnomaliesResponse : GTLRCollectionObject

/**
 *  Anomalies that were found.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly *> *anomalies;

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Represents a row of dimensions and metrics.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow : GTLRObject

/**
 *  Granularity of the aggregation period of the row.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_FullRange
 *        Data is aggregated over the full timeline range. Effectively this
 *        produces a single value rather than a timeline. (Value: "FULL_RANGE")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/** Dimension columns in the row. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue *> *dimensions;

/** Metric columns in the row. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue *> *metrics;

/**
 *  Starting date (and time for hourly aggregation) of the period covered by
 *  this row.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *startTime;

@end


/**
 *  Represents the value of a metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue : GTLRObject

/** Actual value, represented as a decimal number. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDecimal *decimalValue;

/** Confidence interval of a value that is of type `type.Decimal`. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DecimalConfidenceInterval *decimalValueConfidenceInterval;

/** Name of the metric. */
@property(nonatomic, copy, nullable) NSString *metric;

@end


/**
 *  Representation of an OS version.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1OsVersion : GTLRObject

/**
 *  Numeric version code of the OS - API level
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *apiLevel;

@end


/**
 *  Request message for QueryAnrRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `anrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one ANR. * `anrRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `anrRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. Not supported in HOURLY granularity. * `anrRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `anrRate` in the last 28
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. Not supported in HOURLY granularity. * `userPerceivedAnrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one user-perceived ANR. User-perceived ANRs
 *  are currently those of 'Input dispatching' type. *
 *  `userPerceivedAnrRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 7 days. The daily values
 *  are weighted by the count of distinct users for the day. Not supported in
 *  HOURLY granularity. * `userPerceivedAnrRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedAnrRate` in
 *  the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. Not . supported in HOURLY granularity. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `anrRate` and
 *  `userPerceivedAnrRate` metrics. A user is counted in this metric if they
 *  used the app in the foreground during the aggregation period. Care must be
 *  taken not to aggregate this count further, as it may result in users being
 *  counted multiple times. The value is rounded to the nearest multiple of 10,
 *  100, 1,000 or 1,000,000, depending on the magnitude of the value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100,000; values above 100,000 will be coerced
 *  to 100,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the default and only supported
 *  timezone is `America/Los_Angeles`. * HOURLY: metrics are aggregated in
 *  hourly intervals. The default and only supported timezone is `UTC`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta android versions only, excluding data from released android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QueryAnrRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryCrashRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `crashRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one crash. * `crashRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `crashRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. * `crashRate28dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `crashRate` in the last 28 days. The daily values are weighted by
 *  the count of distinct users for the day. Not supported in HOURLY
 *  granularity. * `userPerceivedCrashRate` (`google.type.Decimal`): Percentage
 *  of distinct users in the aggregation period that experienced at least one
 *  crash while they were actively using your app (a user-perceived crash). An
 *  app is considered to be in active use if it is displaying any activity or
 *  executing any foreground service. * `userPerceivedCrashRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate`
 *  in the last 7 days. The daily values are weighted by the count of distinct
 *  users for the day. Not supported in HOURLY granularity. *
 *  `userPerceivedCrashRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedCrashRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. Not
 *  supported in HOURLY granularity. * `distinctUsers` (`google.type.Decimal`):
 *  Count of distinct users in the aggregation period that were used as
 *  normalization value for the `crashRate` and `userPerceivedCrashRate`
 *  metrics. A user is counted in this metric if they used the app actively
 *  during the aggregation period. An app is considered to be in active use if
 *  it is displaying any activity or executing any foreground service. Care must
 *  be taken not to aggregate this count further, as it may result in users
 *  being counted multiple times. The value is rounded to the nearest multiple
 *  of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100,000; values above 100,000 will be coerced
 *  to 100,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the default and only supported
 *  timezone is `America/Los_Angeles`. * HOURLY: metrics are aggregated in
 *  hourly intervals. The default and only supported timezone is `UTC`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta android versions only, excluding data from released android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QueryCrashRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryErrorCountMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryErrorCountMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): unique identifier of the user's device
 *  model. The form of the identifier is 'deviceBrand/device', where deviceBrand
 *  corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
 *  google/coral. * `deviceModel` (string): unique identifier of the user's
 *  device model. * `deviceType` (string): identifier of the device's form
 *  factor, e.g., PHONE. * `reportType` (string): the type of error. The value
 *  should correspond to one of the possible values in ErrorType. *
 *  `isUserPerceived` (string): denotes whether error is user perceived or not,
 *  USER_PERCEIVED or NOT_USER_PERCEIVED. * `issueId` (string): the id an error
 *  was assigned to. The value should correspond to the `{issue}` component of
 *  the issue name. * `deviceRamBucket` (int64): RAM of the device, in MB, in
 *  buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device's
 *  primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `errorReportCount`
 *  (`google.type.Decimal`): Absolute count of individual error reports that
 *  have been received for an app. * `distinctUsers` (`google.type.Decimal`):
 *  Count of distinct users for which reports have been received. Care must be
 *  taken not to aggregate this count further, as it may result in users being
 *  counted multiple times. This value is not rounded, however it may be an
 *  approximation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. The default and only supported timezone is `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Error counts query response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryErrorCountMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryExcessiveWakeupRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `excessiveWakeupRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had more than 10 wakeups per hour. *
 *  `excessiveWakeupRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `excessiveWakeupRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `excessiveWakeupRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `excessiveWakeupRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `excessiveWakeupRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times. The value is rounded to the nearest
 *  multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the
 *  value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta android versions only, excluding data from released android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QueryExcessiveWakeupRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QuerySlowRenderingRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `slowRenderingRate20Fps`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had a slow rendering. * `slowRenderingRate20Fps7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `slowRenderingRate20Fps`
 *  in the last 7 days. The daily values are weighted by the count of distinct
 *  users for the day. * `slowRenderingRate20Fps28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `slowRenderingRate20Fps`
 *  in the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. * `slowRenderingRate30Fps` (`google.type.Decimal`):
 *  Percentage of distinct users in the aggregation period that had a slow
 *  rendering. * `slowRenderingRate30Fps7dUserWeighted` (`google.type.Decimal`):
 *  Rolling average value of `slowRenderingRate30Fps` in the last 7 days. The
 *  daily values are weighted by the count of distinct users for the day. *
 *  `slowRenderingRate30Fps28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `slowRenderingRate30Fps` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the
 *  `slowRenderingRate20Fps`/`slowRenderingRate30Fps` metric. A user is counted
 *  in this metric if their app was launched in the device. Care must be taken
 *  not to aggregate this count further, as it may result in users being counted
 *  multiple times. The value is rounded to the nearest multiple of 10, 100,
 *  1,000 or 1,000,000, depending on the magnitude of the value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta Android versions only, excluding data from released Android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QuerySlowRenderingRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QuerySlowStartRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `slowStartRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had a slow start. * `slowStartRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `slowStartRate` in the
 *  last 7 days. The daily values are weighted by the count of distinct users
 *  for the day. * `slowStartRate28dUserWeighted` (`google.type.Decimal`):
 *  Rolling average value of `slowStartRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the
 *  `slowStartRate` metric. A user is counted in this metric if their app was
 *  launched in the device. Care must be taken not to aggregate this count
 *  further, as it may result in users being counted multiple times. The value
 *  is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending
 *  on the magnitude of the value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta Android versions only, excluding data from released Android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QuerySlowStartRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryStuckBackgroundWakelockRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device,
 *  e.g., 26. * `versionCode` (int64): version of the app that was running on
 *  the user's device. * `deviceModel` (string): unique identifier of the user's
 *  device model. The form of the identifier is 'deviceBrand/device', where
 *  deviceBrand corresponds to Build.BRAND and device corresponds to
 *  Build.DEVICE, e.g., google/coral. * `deviceBrand` (string): unique
 *  identifier of the user's device brand, e.g., google. * `deviceType`
 *  (string): the type (also known as form factor) of the user's device, e.g.,
 *  PHONE. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `stuckBgWakelockRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had a wakelock held in the background for longer than 1 hour. *
 *  `stuckBgWakelockRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `stuckBgWakelockRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `stuckBgWakelockRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `stuckBgWakelockRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `stuckBgWakelockRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times. The value is rounded to the nearest
 *  multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the
 *  value.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

/**
 *  User view to select. The output data will correspond to the selected view.
 *  **Supported values:** * `OS_PUBLIC` To select data from all publicly
 *  released Android versions. This is the default. Supports all the above
 *  dimensions. * `APP_TESTERS` To select data from users who have opted in to
 *  be testers. Supports all the above dimensions. * `OS_BETA` To select data
 *  from beta android versions only, excluding data from released android
 *  versions. Only the following dimensions are supported: * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `osBuild` (string): OS build of the user's device, e.g., "T1B2.220916.004".
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_AppTesters
 *        This is the view with data only from users who have opted in to be
 *        testers for a given app, excluding OS beta data. (Value:
 *        "APP_TESTERS")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_OsBeta
 *        This is the view with just android beta data excluding released OS
 *        version data. (Value: "OS_BETA")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_OsPublic
 *        This is default view. Contains data from public released android
 *        versions only. (Value: "OS_PUBLIC")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest_UserCohort_UserCohortUnspecified
 *        Unspecified User cohort. This will automatically choose the default
 *        value. (Value: "USER_COHORT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *userCohort;

@end


/**
 *  Response message for QueryStuckBackgroundWakelockRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  A representation of an app release.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Release : GTLRObject

/** Readable identifier of the release. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The version codes contained in this release.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *versionCodes;

@end


/**
 *  A set of filtering options for releases and version codes specific to an
 *  app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ReleaseFilterOptions : GTLRObject

/**
 *  List of tracks to filter releases over. Provides the grouping of version
 *  codes under releases and tracks.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Track *> *tracks;

@end


/**
 *  Response message for SearchAccessibleApps.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apps" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1SearchAccessibleAppsResponse : GTLRCollectionObject

/**
 *  The apps accessible to the user calling the endpoint.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1App *> *apps;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response with a paginated list of issues that matched the request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "errorIssues" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1SearchErrorIssuesResponse : GTLRCollectionObject

/**
 *  ErrorIssues that were found.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorIssue *> *errorIssues;

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response with a paginated list of error reports matching the search query.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "errorReports" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse : GTLRCollectionObject

/**
 *  Error reports that were found.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ErrorReport *> *errorReports;

/** Page token to fetch the next page of reports. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Singleton resource representing the set of Slow Rendering metrics. This
 *  metric set contains low-level rendering data captured by SurafeFlinger.
 *  Sessions are evaluated based on the present-to-present histogram of frames
 *  handled by any SurfaceFlinger layer owned by the app. A slow session is a
 *  session where more than 25% of frames for the session did not meet the
 *  metric's target frame rate (either 20fps, or 30fps). *NOTE:* This metric set
 *  is only available for games. **Supported aggregation periods:** * DAILY:
 *  metrics are aggregated in calendar date intervals. Due to historical
 *  constraints, the only supported timezone is `America/Los_Angeles`.
 *  **Supported metrics:** * `slowRenderingRate20Fps` (`google.type.Decimal`):
 *  Percentage of distinct users in the aggregation period that had slow
 *  rendering. * `slowRenderingRate20Fps7dUserWeighted` (`google.type.Decimal`):
 *  Rolling average value of `slowRenderingRate20Fps` in the last 7 days. The
 *  daily values are weighted by the count of distinct users for the day. *
 *  `slowRenderingRate20Fps28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `slowRenderingRate20Fps` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `slowRenderingRate30Fps` (`google.type.Decimal`): Percentage of distinct
 *  users in the aggregation period that had slow rendering. *
 *  `slowRenderingRate30Fps7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `slowRenderingRate30Fps` in the last 7 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `slowRenderingRate30Fps28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `slowRenderingRate30Fps` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the
 *  `slowRenderingRate20Fps`/`slowRenderingRate30Fps` metric. A user is counted
 *  in this metric if their app rendered any frames. Care must be taken not to
 *  aggregate this count further, as it may result in users being counted
 *  multiple times. The value is rounded to the nearest multiple of 10, 100,
 *  1,000 or 1,000,000, depending on the magnitude of the value. **Supported
 *  dimensions:** * `apiLevel` (string): the API level of Android that was
 *  running on the user's device, e.g., 26. * `versionCode` (int64): version of
 *  the app that was running on the user's device. * `deviceModel` (string):
 *  unique identifier of the user's device model. The form of the identifier is
 *  'deviceBrand/device', where deviceBrand corresponds to Build.BRAND and
 *  device corresponds to Build.DEVICE, e.g., google/coral. * `deviceBrand`
 *  (string): unique identifier of the user's device brand, e.g., google. *
 *  `deviceType` (string): the type (also known as form factor) of the user's
 *  device, e.g., PHONE. * `countryCode` (string): the country or region of the
 *  user's device based on their IP address, represented as a 2-letter ISO-3166
 *  code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of
 *  the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string):
 *  Make of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1SlowRenderingRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/**
 *  Identifier. The resource name. Format: apps/{app}/slowRenderingRateMetricSet
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Singleton resource representing the set of Slow Start metrics. This metric
 *  set contains Activity start duration data. **Supported aggregation
 *  periods:** * DAILY: metrics are aggregated in calendar date intervals. Due
 *  to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`. **Supported metrics:** * `slowStartRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had a slow start. * `slowStartRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `slowStartRate` in the
 *  last 7 days. The daily values are weighted by the count of distinct users
 *  for the day. * `slowStartRate28dUserWeighted` (`google.type.Decimal`):
 *  Rolling average value of `slowStartRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the
 *  `slowStartRate` metric. A user is counted in this metric if their app was
 *  launched in the device. Care must be taken not to aggregate this count
 *  further, as it may result in users being counted multiple times. The value
 *  is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending
 *  on the magnitude of the value. **Required dimension:** This dimension must
 *  be specified with each request for the request to be valid. * `startType`
 *  (string): the type of start that was measured. Valid types are `HOT`, `WARM`
 *  and `COLD`. **Supported dimensions:** * `apiLevel` (string): the API level
 *  of Android that was running on the user's device, e.g., 26. * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `deviceModel` (string): unique identifier of the user's device model. The
 *  form of the identifier is 'deviceBrand/device', where deviceBrand
 *  corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g.,
 *  google/coral. * `deviceBrand` (string): unique identifier of the user's
 *  device brand, e.g., google. * `deviceType` (string): the type (also known as
 *  form factor) of the user's device, e.g., PHONE. * `countryCode` (string):
 *  the country or region of the user's device based on their IP address,
 *  represented as a 2-letter ISO-3166 code (e.g. US for the United States). *
 *  `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB,
 *  etc.). * `deviceSocMake` (string): Make of the device's primary
 *  system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1SlowStartRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/**
 *  Identifier. The resource name. Format: apps/{app}/slowStartRateMetricSet
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Singleton resource representing the set of Stuck Background Wakelocks
 *  metrics. This metric set contains PowerManager wakelock duration data
 *  combined with process state data to produce a normalized metric independent
 *  of user counts. **Supported aggregation periods:** * DAILY: metrics are
 *  aggregated in calendar date intervals. Due to historical constraints, the
 *  only supported timezone is `America/Los_Angeles`. **Supported metrics:** *
 *  `stuckBgWakelockRate` (`google.type.Decimal`): Percentage of distinct users
 *  in the aggregation period that had a wakelock held in the background for
 *  longer than 1 hour. * `stuckBgWakelockRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in
 *  the last 7 days. The daily values are weighted by the count of distinct
 *  users for the day. * `stuckBgWakelockRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in
 *  the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. * `distinctUsers` (`google.type.Decimal`): Count of
 *  distinct users in the aggregation period that were used as normalization
 *  value for the `stuckBgWakelockRate` metric. A user is counted in this metric
 *  if their app was doing any work on the device, i.e., not just active
 *  foreground usage but also background work. Care must be taken not to
 *  aggregate this count further, as it may result in users being counted
 *  multiple times. The value is rounded to the nearest multiple of 10, 100,
 *  1,000 or 1,000,000, depending on the magnitude of the value. **Supported
 *  dimensions:** * `apiLevel` (string): the API level of Android that was
 *  running on the user's device, e.g., 26. * `versionCode` (int64): version of
 *  the app that was running on the user's device. * `deviceModel` (string):
 *  unique identifier of the user's device model. The form of the identifier is
 *  'deviceBrand/device', where deviceBrand corresponds to Build.BRAND and
 *  device corresponds to Build.DEVICE, e.g., google/coral. * `deviceBrand`
 *  (string): unique identifier of the user's device brand, e.g., google. *
 *  `deviceType` (string): the type (also known as form factor) of the user's
 *  device, e.g., PHONE. * `countryCode` (string): the country or region of the
 *  user's device based on their IP address, represented as a 2-letter ISO-3166
 *  code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of
 *  the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string):
 *  Make of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/**
 *  Identifier. The resource name. Format:
 *  apps/{app}/stuckBackgroundWakelockRateMetricSet
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Specification of the time-related aggregation parameters of a timeline.
 *  Timelines have an aggregation period (`DAILY`, `HOURLY`, etc) which defines
 *  how events are aggregated in metrics. The points in a timeline are defined
 *  by the starting DateTime of the aggregation period. The duration is implicit
 *  in the AggregationPeriod. Hourly aggregation periods, when supported by a
 *  metric set, are always specified in UTC to avoid ambiguities around daylight
 *  saving time transitions, where an hour is skipped when adopting DST, and
 *  repeated when abandoning DST. For example, the timestamp '2021-11-07
 *  01:00:00 America/Los_Angeles' is ambiguous since it can correspond to
 *  '2021-11-07 08:00:00 UTC' or '2021-11-07 09:00:00 UTC'. Daily aggregation
 *  periods require specifying a timezone which will determine the precise
 *  instants of the start and the end of the day. Not all metric sets support
 *  all timezones, so make sure to check which timezones are supported by the
 *  metric set you want to query.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec : GTLRObject

/**
 *  Type of the aggregation period of the datapoints in the timeline. Intervals
 *  are identified by the date and time at the start of the interval.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_FullRange
 *        Data is aggregated over the full timeline range. Effectively this
 *        produces a single value rather than a timeline. (Value: "FULL_RANGE")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/**
 *  Ending datapoint of the timeline (exclusive). See start_time for
 *  restrictions. The timezone of the end point must match the timezone of the
 *  start point.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *endTime;

/**
 *  Starting datapoint of the timeline (inclusive). Must be aligned to the
 *  aggregation period as follows: * HOURLY: the 'minutes', 'seconds' and
 *  'nanos' fields must be unset. The time_zone can be left unset (defaults to
 *  UTC) or set explicitly to "UTC". Setting any other utc_offset or timezone id
 *  will result in a validation error. * DAILY: the 'hours', 'minutes',
 *  'seconds' and 'nanos' fields must be unset. Different metric sets support
 *  different timezones. It can be left unset to use the default timezone
 *  specified by the metric set. The timezone of the end point must match the
 *  timezone of the start point.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *startTime;

@end


/**
 *  A representation of a Play release track.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Track : GTLRObject

/** Readable identifier of the track. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Represents all active releases in the track. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Release *> *servingReleases;

/** The type of the track. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents civil time (or occasionally physical time). This type can
 *  represent a civil time in one of a few possible ways: * When utc_offset is
 *  set and time_zone is unset: a civil time on a calendar day with a particular
 *  offset from UTC. * When time_zone is set and utc_offset is unset: a civil
 *  time on a calendar day in a particular time zone. * When neither time_zone
 *  nor utc_offset is set: a civil time on a calendar day in local time. The
 *  date is relative to the Proleptic Gregorian Calendar. If year, month, or day
 *  are 0, the DateTime is considered not to have a specific year, month, or day
 *  respectively. This type may also be used to represent a physical time if all
 *  the date and time fields are set and either case of the `time_offset` oneof
 *  is set. Consider using `Timestamp` message for physical time instead. If
 *  your use case also would like to store the user's timezone, that can be done
 *  in another field. This type is more flexible than some applications may
 *  want. Make sure to document and validate your application's limitations.
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeDateTime : GTLRObject

/**
 *  Optional. Day of month. Must be from 1 to 31 and valid for the year and
 *  month, or 0 if specifying a datetime without a day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults
 *  to 0 (midnight). An API may choose to allow the value "24:00:00" for
 *  scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime
 *  without a month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Optional. Fractions of seconds in nanoseconds. Must be from 0 to
 *  999,999,999, defaults to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Optional. Seconds of minutes of the time. Must normally be from 0 to 59,
 *  defaults to 0. An API may allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

/** Time zone. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeTimeZone *timeZone;

/**
 *  UTC offset. Must be whole seconds, between -18 hours and +18 hours. For
 *  example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
 */
@property(nonatomic, strong, nullable) GTLRDuration *utcOffset;

/**
 *  Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
 *  datetime without a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A representation of a decimal value, such as 2.5. Clients may convert values
 *  into language-native decimal formats, such as Java's BigDecimal or Python's
 *  decimal.Decimal. [BigDecimal]:
 *  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
 *  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeDecimal : GTLRObject

/**
 *  The decimal value, as a string. The string representation consists of an
 *  optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of
 *  zero or more decimal digits ("the integer"), optionally followed by a
 *  fraction, optionally followed by an exponent. An empty string **should** be
 *  interpreted as `0`. The fraction consists of a decimal point followed by
 *  zero or more decimal digits. The string must contain at least one digit in
 *  either the integer or the fraction. The number formed by the sign, the
 *  integer and the fraction is referred to as the significand. The exponent
 *  consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one
 *  or more decimal digits. Services **should** normalize decimal values before
 *  storing them by: - Removing an explicitly-provided `+` sign (`+2.5` ->
 *  `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). -
 *  Coercing the exponent character to upper-case, with explicit sign (`2.5e8`
 *  -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` ->
 *  `2.5`). Services **may** perform additional normalization based on its own
 *  needs and the internal decimal implementation selected, such as shifting the
 *  decimal point and exponent value together (example: `2.5E-1` <-> `0.25`).
 *  Additionally, services **may** preserve trailing zeroes in the fraction to
 *  indicate increased precision, but are not required to do so. Note that only
 *  the `.` character is supported to divide the integer and the fraction; `,`
 *  **should not** be supported regardless of locale. Additionally, thousand
 *  separators **should not** be supported. If a service does support them,
 *  values **must** be normalized. The ENBF grammar is: DecimalString = '' |
 *  [Sign] Significand [Exponent]; Sign = '+' | '-'; Significand = Digits '.' |
 *  [Digits] '.' Digits; Exponent = ('e' | 'E') [Sign] Digits; Digits = { '0' |
 *  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }; Services **should**
 *  clearly document the range of supported values, the maximum supported
 *  precision (total number of digits), and, if applicable, the scale (number of
 *  digits after the decimal point), as well as how it behaves when receiving
 *  out-of-bounds values. Services **may** choose to accept values passed as
 *  input even when the value has a higher precision or scale than the service
 *  supports, and **should** round the value to fit the supported scale.
 *  Alternatively, the service **may** error with `400 Bad Request`
 *  (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should**
 *  error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service
 *  receives a value outside of the supported range.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a time zone from the [IANA Time Zone
 *  Database](https://www.iana.org/time-zones).
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeTimeZone : GTLRObject

/**
 *  IANA Time Zone Database time zone, e.g. "America/New_York".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Optional. IANA Time Zone Database version number, e.g. "2019a". */
@property(nonatomic, copy, nullable) NSString *version;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
