// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Developer Reporting API (playdeveloperreporting/v1beta1)
// Documentation:
//   https://developers.google.com/play/developer/reporting

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue;
@class GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec;
@class GTLRPlaydeveloperreporting_GoogleTypeDateTime;
@class GTLRPlaydeveloperreporting_GoogleTypeDecimal;
@class GTLRPlaydeveloperreporting_GoogleTypeTimeZone;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Daily;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Hourly;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Daily;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Hourly;

// ----------------------------------------------------------------------------
// GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec.aggregationPeriod

/**
 *  Unspecified granularity.
 *
 *  Value: "AGGREGATION_PERIOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_AggregationPeriodUnspecified;
/**
 *  Data is aggregated in daily intervals.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Daily;
/**
 *  Data is aggregated in hourly intervals.
 *
 *  Value: "HOURLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Hourly;

/**
 *  Represents an anomaly detected in a dataset. Our anomaly detection systems
 *  flag datapoints in a time series that fall outside of and expected range
 *  derived from historical data. Although those expected ranges have an upper
 *  and a lower bound, we only flag anomalies when the data has become
 *  unexpectedly _worse_, which usually corresponds to the case where the metric
 *  crosses the upper bound. Multiple contiguous datapoints in a timeline
 *  outside of the expected range will be grouped into a single anomaly.
 *  Therefore, an anomaly represents effectively a segment of a metric's
 *  timeline. The information stored in the `timeline_spec`, `dimensions` and
 *  `metric` can be used to fetch a full timeline with extended ragne for
 *  context. **Required permissions**: to access this resource, the calling user
 *  needs the _View app information (read-only)_ permission for the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly : GTLRObject

/** Combination of dimensions in which the anomaly was detected. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue *> *dimensions;

/**
 *  Metric where the anomaly was detected, together with the anomalous value.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue *metric;

/** Metric set resource where the anomaly was detected. */
@property(nonatomic, copy, nullable) NSString *metricSet;

/** Name of the anomaly. Format: apps/{app}/anomalies/{anomaly} */
@property(nonatomic, copy, nullable) NSString *name;

/** Timeline specification that covers the anomaly period. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Singleton resource representing the set of ANR (Application not responding)
 *  metrics. This metric set contains ANRs data combined with usage data to
 *  produce a normalized metric independent of user counts. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`. **Supported metrics:** * `anrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one ANR. * `anrRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `anrRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. * `anrRate28dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `anrRate` in the last 28 days. The daily values are weighted by the
 *  count of distinct users for the day. * `userPerceivedAnrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one user-perceived ANR. User-perceived ANRs
 *  are currently those of 'Input dispatching' type. *
 *  `userPerceivedAnrRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 7 days. The daily values
 *  are weighted by the count of distinct users for the day. *
 *  `userPerceivedAnrRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the `anrRate`
 *  and `userPerceivedAnrRate` metrics. A user is counted in this metric if they
 *  used the app in the foreground during the aggregation period. Care must be
 *  taken not to aggregate this count further, as it may result in users being
 *  counted multiple times. **Supported dimensions:** * `apiLevel` (string): the
 *  API level of Android that was running on the user's device. * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `deviceModel` (string): unique identifier of the user's device model. *
 *  `deviceType` (string): the type (also known as form factor) of the user's
 *  device. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app. **Related metric sets:** * vitals.errors contains unnormalized
 *  version (absolute counts) of crashes. * vitals.errors contains normalized
 *  metrics about crashes, another stability metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1AnrRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** The resource name. Format: apps/{app}/anrRateMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Singleton resource representing the set of crashrate metrics. This metric
 *  set contains crashes data combined with usage data to produce a normalized
 *  metric independent of user counts. **Supported aggregation periods:** *
 *  DAILY: metrics are aggregated in calendar date intervals. Due to historical
 *  constraints, the only supported timezone is `America/Los_Angeles`.
 *  **Supported metrics:** * `crashRate` (`google.type.Decimal`): Percentage of
 *  distinct users in the aggregation period that experienced at least one
 *  crash. * `crashRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `crashRate` in the last 7 days. The daily values are weighted by
 *  the count of distinct users for the day. * `crashRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `crashRate` in the last 28
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. * `userPerceivedCrashRate` (`google.type.Decimal`): Percentage of
 *  distinct users in the aggregation period that experienced at least one crash
 *  while they were actively using your app (a user-perceived crash). An app is
 *  considered to be in active use if it is displaying any activity or executing
 *  any foreground service. * `userPerceivedCrashRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate`
 *  in the last 7 days. The daily values are weighted by the count of distinct
 *  users for the day. * `userPerceivedCrashRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate`
 *  in the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. * `distinctUsers` (`google.type.Decimal`): Count of
 *  distinct users in the aggregation period that were used as normalization
 *  value for the `crashRate` and `userPerceivedCrashRate` metrics. A user is
 *  counted in this metric if they used the app actively during the aggregation
 *  period. An app is considered to be in active use if it is displaying any
 *  activity or executing any foreground service. Care must be taken not to
 *  aggregate this count further, as it may result in users being counted
 *  multiple times. **Supported dimensions:** * `apiLevel` (string): the API
 *  level of Android that was running on the user's device. * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `deviceModel` (string): unique identifier of the user's device model. *
 *  `deviceType` (string): the type (also known as form factor) of the user's
 *  device. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app. **Related metric sets:** * vitals.errors contains unnormalized
 *  version (absolute counts) of crashes. * vitals.errors contains normalized
 *  metrics about ANRs, another stability metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1CrashRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** The resource name. Format: apps/{app}/crashRateMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents the value of a single dimension.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue : GTLRObject

/** Name of the dimension. */
@property(nonatomic, copy, nullable) NSString *dimension;

/**
 *  Actual value, represented as an int64.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

/** Actual value, represented as a string. */
@property(nonatomic, copy, nullable) NSString *stringValue;

/**
 *  Optional. Human-friendly label for the value, always in English. For
 *  example, 'Spain' for the 'ES' country code. Whereas the dimension value is
 *  stable, this value label is subject to change. Do not assume that the
 *  (value, value_label) relationship is stable. For example, the ISO country
 *  code 'MK' changed its name recently to 'North Macedonia'.
 */
@property(nonatomic, copy, nullable) NSString *valueLabel;

@end


/**
 *  Singleton resource representing the set of Excessive Weakeups metrics. This
 *  metric set contains AlarmManager wakeup counts data combined with process
 *  state data to produce a normalized metric independent of user counts.
 *  **Supported aggregation periods:** * DAILY: metrics are aggregated in
 *  calendar date intervals. Due to historical constraints, the only supported
 *  timezone is `America/Los_Angeles`. **Supported metrics:** *
 *  `excessiveWakeupRate` (`google.type.Decimal`): Percentage of distinct users
 *  in the aggregation period that had more than 10 wakeups per hour. *
 *  `excessiveWakeupRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `excessiveWakeupRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `excessiveWakeupRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `excessiveWakeupRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `excessiveWakeupRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. * `deviceType` (string): the type (also known as form factor) of the
 *  user's device. * `countryCode` (string): the country or region of the user's
 *  device based on their IP address, represented as a 2-letter ISO-3166 code
 *  (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the
 *  device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make
 *  of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ExcessiveWakeupRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/** The resource name. Format: apps/{app}/excessiveWakeupRateMetricSet */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents the latest available time that can be requested in a
 *  TimelineSpec. Different aggregation periods have different freshness. For
 *  example, `DAILY` aggregation may lag behind `HOURLY` in cases where such
 *  aggregation is computed only once at the end of the day.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo : GTLRObject

/**
 *  Information about data freshness for every supported aggregation period.
 *  This field has set semantics, keyed by the `aggregation_period` field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness *> *freshnesses;

@end


/**
 *  Information about data freshness for a single aggregation period.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness : GTLRObject

/**
 *  Aggregation period for which data is available.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/**
 *  Latest end time for which data is available, for the aggregation period. The
 *  time is specified in the metric set's default timezone. *Note:* time ranges
 *  in TimelineSpec are represented as `start_time, end_time)`. For example, if
 *  the latest available timeline data point for a `DAILY` aggregation period is
 *  `2021-06-23 00:00:00 America/Los_Angeles`, the value of this field would be
 *  `2021-06-24 00:00:00 America/Los_Angeles` so it can be easily reused in
 *  [TimelineSpec.end_time.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *latestEndTime;

@end


/**
 *  Response with a list of anomalies in datasets.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "anomalies" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1ListAnomaliesResponse : GTLRCollectionObject

/**
 *  Anomalies that were found.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1Anomaly *> *anomalies;

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Represents a row of dimensions and metrics.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow : GTLRObject

/**
 *  Granularity of the aggregation period of the row.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/** Dimension columns in the row. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1DimensionValue *> *dimensions;

/** Metric columns in the row. */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue *> *metrics;

/**
 *  Starting date (and time for hourly aggregation) of the period covered by
 *  this row.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *startTime;

@end


/**
 *  Represents the value of a metric.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricValue : GTLRObject

/** Actual value, represented as a decimal number. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDecimal *decimalValue;

/** Name of the metric. */
@property(nonatomic, copy, nullable) NSString *metric;

@end


/**
 *  Request message for QueryAnrRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. * `deviceType` (string): the type (also known as form factor) of the
 *  user's device. * `countryCode` (string): the country or region of the user's
 *  device based on their IP address, represented as a 2-letter ISO-3166 code
 *  (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the
 *  device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make
 *  of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `anrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one ANR. * `anrRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `anrRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. * `anrRate28dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `anrRate` in the last 28 days. The daily values are weighted by the
 *  count of distinct users for the day. * `userPerceivedAnrRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one user-perceived ANR. User-perceived ANRs
 *  are currently those of 'Input dispatching' type. *
 *  `userPerceivedAnrRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 7 days. The daily values
 *  are weighted by the count of distinct users for the day. *
 *  `userPerceivedAnrRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedAnrRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the `anrRate`
 *  and `userPerceivedAnrRate` metrics. A user is counted in this metric if they
 *  used the app in the foreground during the aggregation period. Care must be
 *  taken not to aggregate this count further, as it may result in users being
 *  counted multiple times.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100,000; values above 100,000 will be coerced
 *  to 100,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the default and only supported
 *  timezone is `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Response message for QueryAnrRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryCrashRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. * `deviceType` (string): the type (also known as form factor) of the
 *  user's device. * `countryCode` (string): the country or region of the user's
 *  device based on their IP address, represented as a 2-letter ISO-3166 code
 *  (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the
 *  device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make
 *  of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `crashRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one crash. * `crashRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `crashRate` in the last 7
 *  days. The daily values are weighted by the count of distinct users for the
 *  day. * `crashRate28dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `crashRate` in the last 28 days. The daily values are weighted by
 *  the count of distinct users for the day. * `userPerceivedCrashRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that experienced at least one crash while they were actively using
 *  your app (a user-perceived crash). An app is considered to be in active use
 *  if it is displaying any activity or executing any foreground service. *
 *  `userPerceivedCrashRate7dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedCrashRate` in the last 7 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `userPerceivedCrashRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `userPerceivedCrashRate` in the last 28 days. The daily
 *  values are weighted by the count of distinct users for the day. *
 *  `distinctUsers` (`google.type.Decimal`): Count of distinct users in the
 *  aggregation period that were used as normalization value for the `crashRate`
 *  and `userPerceivedCrashRate` metrics. A user is counted in this metric if
 *  they used the app actively during the aggregation period. An app is
 *  considered to be in active use if it is displaying any activity or executing
 *  any foreground service. Care must be taken not to aggregate this count
 *  further, as it may result in users being counted multiple times.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100,000; values above 100,000 will be coerced
 *  to 100,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the default and only supported
 *  timezone is `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Response message for QueryCrashRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryExcessiveWakeupRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. * `deviceType` (string): the type (also known as form factor) of the
 *  user's device. * `countryCode` (string): the country or region of the user's
 *  device based on their IP address, represented as a 2-letter ISO-3166 code
 *  (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the
 *  device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make
 *  of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `excessiveWakeupRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had more than 10 wakeups per hour. *
 *  `excessiveWakeupRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `excessiveWakeupRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `excessiveWakeupRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `excessiveWakeupRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `excessiveWakeupRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Response message for QueryExcessiveWakeupRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Request message for QueryStuckBackgroundWakelockRateMetricSet.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest : GTLRObject

/**
 *  Dimensions to slice the data by. **Supported dimensions:** * `apiLevel`
 *  (string): the API level of Android that was running on the user's device. *
 *  `versionCode` (int64): version of the app that was running on the user's
 *  device. * `deviceModel` (string): unique identifier of the user's device
 *  model. * `deviceType` (string): the type (also known as form factor) of the
 *  user's device. * `countryCode` (string): the country or region of the user's
 *  device based on their IP address, represented as a 2-letter ISO-3166 code
 *  (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the
 *  device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make
 *  of the device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dimensions;

/**
 *  Filters to apply to data. The filtering expression follows
 *  [AIP-160](https://google.aip.dev/160) standard and supports filtering by
 *  equality of all breakdown dimensions.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Metrics to aggregate. **Supported metrics:** * `stuckBgWakelockRate`
 *  (`google.type.Decimal`): Percentage of distinct users in the aggregation
 *  period that had a wakelock held in the background for longer than 1 hour. *
 *  `stuckBgWakelockRate7dUserWeighted` (`google.type.Decimal`): Rolling average
 *  value of `stuckBgWakelockRate` in the last 7 days. The daily values are
 *  weighted by the count of distinct users for the day. *
 *  `stuckBgWakelockRate28dUserWeighted` (`google.type.Decimal`): Rolling
 *  average value of `stuckBgWakelockRate` in the last 28 days. The daily values
 *  are weighted by the count of distinct users for the day. * `distinctUsers`
 *  (`google.type.Decimal`): Count of distinct users in the aggregation period
 *  that were used as normalization value for the `stuckBgWakelockRate` metric.
 *  A user is counted in this metric if they app was doing any work on the
 *  device, i.e., not just active foreground usage but also background work.
 *  Care must be taken not to aggregate this count further, as it may result in
 *  users being counted multiple times.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  Maximum size of the returned data. If unspecified, at most 1000 rows will be
 *  returned. The maximum value is 100000; values above 100000 will be coerced
 *  to 100000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A page token, received from a previous call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to the
 *  request must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specification of the timeline aggregation parameters. **Supported
 *  aggregation periods:** * DAILY: metrics are aggregated in calendar date
 *  intervals. Due to historical constraints, the only supported timezone is
 *  `America/Los_Angeles`.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec *timelineSpec;

@end


/**
 *  Response message for QueryStuckBackgroundWakelockRateMetricSet.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rows" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse : GTLRCollectionObject

/** Continuation token to fetch the next page of data. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Returned rows of data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1MetricsRow *> *rows;

@end


/**
 *  Singleton resource representing the set of Stuck Background Wakelocks
 *  metrics. This metric set contains PowerManager wakelock duration data
 *  combined with process state data to produce a normalized metric independent
 *  of user counts. **Supported aggregation periods:** * DAILY: metrics are
 *  aggregated in calendar date intervals. Due to historical constraints, the
 *  only supported timezone is `America/Los_Angeles`. **Supported metrics:** *
 *  `stuckBgWakelockRate` (`google.type.Decimal`): Percentage of distinct users
 *  in the aggregation period that had a wakelock held in the background for
 *  longer than 1 hour. * `stuckBgWakelockRate7dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in
 *  the last 7 days. The daily values are weighted by the count of distinct
 *  users for the day. * `stuckBgWakelockRate28dUserWeighted`
 *  (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in
 *  the last 28 days. The daily values are weighted by the count of distinct
 *  users for the day. * `distinctUsers` (`google.type.Decimal`): Count of
 *  distinct users in the aggregation period that were used as normalization
 *  value for the `stuckBgWakelockRate` metric. A user is counted in this metric
 *  if their app was doing any work on the device, i.e., not just active
 *  foreground usage but also background work. Care must be taken not to
 *  aggregate this count further, as it may result in users being counted
 *  multiple times. **Supported dimensions:** * `apiLevel` (string): the API
 *  level of Android that was running on the user's device. * `versionCode`
 *  (int64): version of the app that was running on the user's device. *
 *  `deviceModel` (string): unique identifier of the user's device model. *
 *  `deviceType` (string): the type (also known as form factor) of the user's
 *  device. * `countryCode` (string): the country or region of the user's device
 *  based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US
 *  for the United States). * `deviceRamBucket` (int64): RAM of the device, in
 *  MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the
 *  device's primary system-on-chip, e.g., Samsung.
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER)
 *  * `deviceSocModel` (string): Model of the device's primary system-on-chip,
 *  e.g., "Exynos 2100".
 *  [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL)
 *  * `deviceCpuMake` (string): Make of the device's CPU, e.g., Qualcomm. *
 *  `deviceCpuModel` (string): Model of the device's CPU, e.g., "Kryo 240". *
 *  `deviceGpuMake` (string): Make of the device's GPU, e.g., ARM. *
 *  `deviceGpuModel` (string): Model of the device's GPU, e.g., Mali. *
 *  `deviceGpuVersion` (string): Version of the device's GPU, e.g., T750. *
 *  `deviceVulkanVersion` (string): Vulkan version of the device, e.g.,
 *  "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device,
 *  e.g., "196610". * `deviceScreenSize` (string): Screen size of the device,
 *  e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the
 *  device, e.g., mdpi, hdpi. **Required permissions**: to access this resource,
 *  the calling user needs the _View app information (read-only)_ permission for
 *  the app.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet : GTLRObject

/** Summary about data freshness in this resource. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1FreshnessInfo *freshnessInfo;

/**
 *  The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Specification of the time-related aggregation parameters of a timeline.
 *  Timelines have an aggregation period (`DAILY`, `HOURLY`, etc) which defines
 *  how events are aggregated in metrics. The points in a timeline are defined
 *  by the starting DateTime of the aggregation period. The duration is implicit
 *  in the AggregationPeriod. Hourly aggregation periods, when supported by a
 *  metric set, are always specified in UTC to avoid ambiguities around daylight
 *  saving time transitions, where an hour is skipped when adopting DST, and
 *  repeated when abandoning DST. For example, the timestamp '2021-11-07
 *  01:00:00 America/Los_Angeles' is ambiguous since it can correspond to
 *  '2021-11-07 08:00:00 UTC' or '2021-11-07 09:00:00 UTC'. Daily aggregation
 *  periods require specifying a timezone which will determine the precise
 *  instants of the start and the end of the day. Not all metric sets support
 *  all timezones, so make sure to check which timezones are supported by the
 *  metric set you want to query.
 */
@interface GTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec : GTLRObject

/**
 *  Type of the aggregation period of the datapoints in the timeline. Intervals
 *  are identified by the date and time at the start of the interval.
 *
 *  Likely values:
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_AggregationPeriodUnspecified
 *        Unspecified granularity. (Value: "AGGREGATION_PERIOD_UNSPECIFIED")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Daily
 *        Data is aggregated in daily intervals. (Value: "DAILY")
 *    @arg @c kGTLRPlaydeveloperreporting_GooglePlayDeveloperReportingV1beta1TimelineSpec_AggregationPeriod_Hourly
 *        Data is aggregated in hourly intervals. (Value: "HOURLY")
 */
@property(nonatomic, copy, nullable) NSString *aggregationPeriod;

/**
 *  Ending datapoint of the timeline (exclusive). See start_time for
 *  restrictions. The timezone of the end point must match the timezone of the
 *  start point.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *endTime;

/**
 *  Starting datapoint of the timeline (inclusive). Must be aligned to the
 *  aggregation period as follows: * HOURLY: the 'minutes', 'seconds' and
 *  'nanos' fields must be unset. The time_zone can be left unset (defaults to
 *  UTC) or set explicitly to "UTC". Setting any other utc_offset or timezone id
 *  will result in a validation error. * DAILY: the 'hours', 'minutes',
 *  'seconds' and 'nanos' fields must be unset. Different metric sets support
 *  different timezones. It can be left unset to use the default timezone
 *  specified by the metric set. The timezone of the end point must match the
 *  timezone of the start point.
 */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeDateTime *startTime;

@end


/**
 *  Represents civil time (or occasionally physical time). This type can
 *  represent a civil time in one of a few possible ways: * When utc_offset is
 *  set and time_zone is unset: a civil time on a calendar day with a particular
 *  offset from UTC. * When time_zone is set and utc_offset is unset: a civil
 *  time on a calendar day in a particular time zone. * When neither time_zone
 *  nor utc_offset is set: a civil time on a calendar day in local time. The
 *  date is relative to the Proleptic Gregorian Calendar. If year, month, or day
 *  are 0, the DateTime is considered not to have a specific year, month, or day
 *  respectively. This type may also be used to represent a physical time if all
 *  the date and time fields are set and either case of the `time_offset` oneof
 *  is set. Consider using `Timestamp` message for physical time instead. If
 *  your use case also would like to store the user's timezone, that can be done
 *  in another field. This type is more flexible than some applications may
 *  want. Make sure to document and validate your application's limitations.
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeDateTime : GTLRObject

/**
 *  Optional. Day of month. Must be from 1 to 31 and valid for the year and
 *  month, or 0 if specifying a datetime without a day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults
 *  to 0 (midnight). An API may choose to allow the value "24:00:00" for
 *  scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime
 *  without a month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Optional. Fractions of seconds in nanoseconds. Must be from 0 to
 *  999,999,999, defaults to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Optional. Seconds of minutes of the time. Must normally be from 0 to 59,
 *  defaults to 0. An API may allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

/** Time zone. */
@property(nonatomic, strong, nullable) GTLRPlaydeveloperreporting_GoogleTypeTimeZone *timeZone;

/**
 *  UTC offset. Must be whole seconds, between -18 hours and +18 hours. For
 *  example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
 */
@property(nonatomic, strong, nullable) GTLRDuration *utcOffset;

/**
 *  Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
 *  datetime without a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A representation of a decimal value, such as 2.5. Clients may convert values
 *  into language-native decimal formats, such as Java's BigDecimal or Python's
 *  decimal.Decimal. [BigDecimal]:
 *  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
 *  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeDecimal : GTLRObject

/**
 *  The decimal value, as a string. The string representation consists of an
 *  optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of
 *  zero or more decimal digits ("the integer"), optionally followed by a
 *  fraction, optionally followed by an exponent. An empty string **should** be
 *  interpreted as `0`. The fraction consists of a decimal point followed by
 *  zero or more decimal digits. The string must contain at least one digit in
 *  either the integer or the fraction. The number formed by the sign, the
 *  integer and the fraction is referred to as the significand. The exponent
 *  consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one
 *  or more decimal digits. Services **should** normalize decimal values before
 *  storing them by: - Removing an explicitly-provided `+` sign (`+2.5` ->
 *  `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). -
 *  Coercing the exponent character to upper-case, with explicit sign (`2.5e8`
 *  -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` ->
 *  `2.5`). Services **may** perform additional normalization based on its own
 *  needs and the internal decimal implementation selected, such as shifting the
 *  decimal point and exponent value together (example: `2.5E-1` <-> `0.25`).
 *  Additionally, services **may** preserve trailing zeroes in the fraction to
 *  indicate increased precision, but are not required to do so. Note that only
 *  the `.` character is supported to divide the integer and the fraction; `,`
 *  **should not** be supported regardless of locale. Additionally, thousand
 *  separators **should not** be supported. If a service does support them,
 *  values **must** be normalized. The ENBF grammar is: DecimalString = '' |
 *  [Sign] Significand [Exponent]; Sign = '+' | '-'; Significand = Digits '.' |
 *  [Digits] '.' Digits; Exponent = ('e' | 'E') [Sign] Digits; Digits = { '0' |
 *  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }; Services **should**
 *  clearly document the range of supported values, the maximum supported
 *  precision (total number of digits), and, if applicable, the scale (number of
 *  digits after the decimal point), as well as how it behaves when receiving
 *  out-of-bounds values. Services **may** choose to accept values passed as
 *  input even when the value has a higher precision or scale than the service
 *  supports, and **should** round the value to fit the supported scale.
 *  Alternatively, the service **may** error with `400 Bad Request`
 *  (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should**
 *  error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service
 *  receives a value outside of the supported range.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a time zone from the [IANA Time Zone
 *  Database](https://www.iana.org/time-zones).
 */
@interface GTLRPlaydeveloperreporting_GoogleTypeTimeZone : GTLRObject

/**
 *  IANA Time Zone Database time zone, e.g. "America/New_York".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Optional. IANA Time Zone Database version number, e.g. "2019a". */
@property(nonatomic, copy, nullable) NSString *version;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
