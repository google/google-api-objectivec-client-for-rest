// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Talent Solution API (jobs/v4)
// Description:
//   Cloud Talent Solution provides the capability to create, read, update, and
//   delete job postings, as well as search jobs based on keywords and filters.
// Documentation:
//   https://cloud.google.com/talent-solution/job-search/docs/

#import <GoogleAPIClientForREST/GTLRCloudTalentSolutionQuery.h>

// ----------------------------------------------------------------------------
// Constants

// jobView
NSString * const kGTLRCloudTalentSolutionJobViewJobViewFull    = @"JOB_VIEW_FULL";
NSString * const kGTLRCloudTalentSolutionJobViewJobViewIdOnly  = @"JOB_VIEW_ID_ONLY";
NSString * const kGTLRCloudTalentSolutionJobViewJobViewMinimal = @"JOB_VIEW_MINIMAL";
NSString * const kGTLRCloudTalentSolutionJobViewJobViewSmall   = @"JOB_VIEW_SMALL";
NSString * const kGTLRCloudTalentSolutionJobViewJobViewUnspecified = @"JOB_VIEW_UNSPECIFIED";

// scope
NSString * const kGTLRCloudTalentSolutionScopeCompletionScopeUnspecified = @"COMPLETION_SCOPE_UNSPECIFIED";
NSString * const kGTLRCloudTalentSolutionScopePublic           = @"PUBLIC";
NSString * const kGTLRCloudTalentSolutionScopeTenant           = @"TENANT";

// type
NSString * const kGTLRCloudTalentSolutionTypeCombined          = @"COMBINED";
NSString * const kGTLRCloudTalentSolutionTypeCompanyName       = @"COMPANY_NAME";
NSString * const kGTLRCloudTalentSolutionTypeCompletionTypeUnspecified = @"COMPLETION_TYPE_UNSPECIFIED";
NSString * const kGTLRCloudTalentSolutionTypeJobTitle          = @"JOB_TITLE";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRCloudTalentSolutionQuery

@dynamic fields;

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Operation class];
  query.loggingName = @"jobs.projects.operations.get";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsClientEventsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_ClientEvent *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/clientEvents";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsClientEventsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_ClientEvent class];
  query.loggingName = @"jobs.projects.tenants.clientEvents.create";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Company *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/companies";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Company class];
  query.loggingName = @"jobs.projects.tenants.companies.create";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Empty class];
  query.loggingName = @"jobs.projects.tenants.companies.delete";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Company class];
  query.loggingName = @"jobs.projects.tenants.companies.get";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesList

@dynamic pageSize, pageToken, parent, requireOpenJobs;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/companies";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_ListCompaniesResponse class];
  query.loggingName = @"jobs.projects.tenants.companies.list";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Company *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompaniesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Company class];
  query.loggingName = @"jobs.projects.tenants.companies.patch";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCompleteQuery

@dynamic company, languageCodes, pageSize, query, scope, tenant, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"languageCodes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithTenant:(NSString *)tenant {
  NSArray *pathParams = @[ @"tenant" ];
  NSString *pathURITemplate = @"v4/{+tenant}:completeQuery";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCompleteQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.tenant = tenant;
  query.expectedObjectClass = [GTLRCloudTalentSolution_CompleteQueryResponse class];
  query.loggingName = @"jobs.projects.tenants.completeQuery";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Tenant *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/tenants";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Tenant class];
  query.loggingName = @"jobs.projects.tenants.create";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Empty class];
  query.loggingName = @"jobs.projects.tenants.delete";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Tenant class];
  query.loggingName = @"jobs.projects.tenants.get";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_BatchCreateJobsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs:batchCreate";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Operation class];
  query.loggingName = @"jobs.projects.tenants.jobs.batchCreate";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchDelete

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_BatchDeleteJobsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs:batchDelete";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Operation class];
  query.loggingName = @"jobs.projects.tenants.jobs.batchDelete";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchUpdate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_BatchUpdateJobsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs:batchUpdate";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsBatchUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Operation class];
  query.loggingName = @"jobs.projects.tenants.jobs.batchUpdate";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Job *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Job class];
  query.loggingName = @"jobs.projects.tenants.jobs.create";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Empty class];
  query.loggingName = @"jobs.projects.tenants.jobs.delete";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Job class];
  query.loggingName = @"jobs.projects.tenants.jobs.get";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsList

@dynamic filter, jobView, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_ListJobsResponse class];
  query.loggingName = @"jobs.projects.tenants.jobs.list";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Job *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Job class];
  query.loggingName = @"jobs.projects.tenants.jobs.patch";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsSearch

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_SearchJobsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs:search";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_SearchJobsResponse class];
  query.loggingName = @"jobs.projects.tenants.jobs.search";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsSearchForAlert

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_SearchJobsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/jobs:searchForAlert";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsJobsSearchForAlert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_SearchJobsResponse class];
  query.loggingName = @"jobs.projects.tenants.jobs.searchForAlert";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v4/{+parent}/tenants";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTalentSolution_ListTenantsResponse class];
  query.loggingName = @"jobs.projects.tenants.list";
  return query;
}

@end

@implementation GTLRCloudTalentSolutionQuery_ProjectsTenantsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudTalentSolution_Tenant *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRCloudTalentSolutionQuery_ProjectsTenantsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTalentSolution_Tenant class];
  query.loggingName = @"jobs.projects.tenants.patch";
  return query;
}

@end
