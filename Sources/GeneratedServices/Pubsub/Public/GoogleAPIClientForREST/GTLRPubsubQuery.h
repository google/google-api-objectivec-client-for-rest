// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Pub/Sub API (pubsub/v1)
// Description:
//   Provides reliable, many-to-many, asynchronous messaging between
//   applications.
// Documentation:
//   https://cloud.google.com/pubsub/docs

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRPubsubObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Include the name and type of the schema, but not the definition.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsubViewBasic;
/**
 *  Include all Schema object fields.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsubViewFull;
/**
 *  The default / unset value. The API will default to the BASIC view.
 *
 *  Value: "SCHEMA_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsubViewSchemaViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Pubsub query classes.
 */
@interface GTLRPubsubQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a schema.
 *
 *  Method: pubsub.projects.schemas.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasCreate : GTLRPubsubQuery

/**
 *  Required. The name of the project in which to create the schema. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The ID to use for the schema, which will become the final component of the
 *  schema's resource name. See
 *  https://cloud.google.com/pubsub/docs/admin#resource_names for resource name
 *  constraints.
 */
@property(nonatomic, copy, nullable) NSString *schemaId;

/**
 *  Fetches a @c GTLRPubsub_Schema.
 *
 *  Creates a schema.
 *
 *  @param object The @c GTLRPubsub_Schema to include in the query.
 *  @param parent Required. The name of the project in which to create the
 *    schema. Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_Schema *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a schema.
 *
 *  Method: pubsub.projects.schemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasDelete : GTLRPubsubQuery

/**
 *  Required. Name of the schema to delete. Format is
 *  `projects/{project}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Deletes a schema.
 *
 *  @param name Required. Name of the schema to delete. Format is
 *    `projects/{project}/schemas/{schema}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a schema.
 *
 *  Method: pubsub.projects.schemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasGet : GTLRPubsubQuery

/**
 *  Required. The name of the schema to get. Format is
 *  `projects/{project}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The set of fields to return in the response. If not set, returns a Schema
 *  with all fields filled out. Set to `BASIC` to omit the `definition`.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsubViewSchemaViewUnspecified The default / unset value.
 *        The API will default to the BASIC view. (Value:
 *        "SCHEMA_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRPubsubViewBasic Include the name and type of the schema, but
 *        not the definition. (Value: "BASIC")
 *    @arg @c kGTLRPubsubViewFull Include all Schema object fields. (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRPubsub_Schema.
 *
 *  Gets a schema.
 *
 *  @param name Required. The name of the schema to get. Format is
 *    `projects/{project}/schemas/{schema}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: pubsub.projects.schemas.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasGetIamPolicy : GTLRPubsubQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists schemas in a project.
 *
 *  Method: pubsub.projects.schemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasList : GTLRPubsubQuery

/** Maximum number of schemas to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSchemasResponse`; indicates that this is
 *  a continuation of a prior `ListSchemas` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project in which to list schemas. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The set of Schema fields to return in the response. If not set, returns
 *  Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
 *  retrieve all fields.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsubViewSchemaViewUnspecified The default / unset value.
 *        The API will default to the BASIC view. (Value:
 *        "SCHEMA_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRPubsubViewBasic Include the name and type of the schema, but
 *        not the definition. (Value: "BASIC")
 *    @arg @c kGTLRPubsubViewFull Include all Schema object fields. (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRPubsub_ListSchemasResponse.
 *
 *  Lists schemas in a project.
 *
 *  @param parent Required. The name of the project in which to list schemas.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: pubsub.projects.schemas.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasSetIamPolicy : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: pubsub.projects.schemas.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasTestIamPermissions : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Validates a schema.
 *
 *  Method: pubsub.projects.schemas.validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasValidate : GTLRPubsubQuery

/**
 *  Required. The name of the project in which to validate schemas. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRPubsub_ValidateSchemaResponse.
 *
 *  Validates a schema.
 *
 *  @param object The @c GTLRPubsub_ValidateSchemaRequest to include in the
 *    query.
 *  @param parent Required. The name of the project in which to validate
 *    schemas. Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasValidate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ValidateSchemaRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Validates a message against a schema.
 *
 *  Method: pubsub.projects.schemas.validateMessage
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSchemasValidateMessage : GTLRPubsubQuery

/**
 *  Required. The name of the project in which to validate schemas. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRPubsub_ValidateMessageResponse.
 *
 *  Validates a message against a schema.
 *
 *  @param object The @c GTLRPubsub_ValidateMessageRequest to include in the
 *    query.
 *  @param parent Required. The name of the project in which to validate
 *    schemas. Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSchemasValidateMessage
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ValidateMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a snapshot from the requested subscription. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. If the snapshot already exists, returns
 *  `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns
 *  `NOT_FOUND`. If the backlog in the subscription is too old -- and the
 *  resulting snapshot would expire in less than 1 hour -- then
 *  `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time`
 *  field. If the name is not provided in the request, the server will assign a
 *  random name for this snapshot on the same project as the subscription,
 *  conforming to the [resource name format]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
 *  name is populated in the returned Snapshot object. Note that for REST API
 *  requests, you must specify a name in the request.
 *
 *  Method: pubsub.projects.snapshots.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsCreate : GTLRPubsubQuery

/**
 *  Required. User-provided name for this snapshot. If the name is not provided
 *  in the request, the server will assign a random name for this snapshot on
 *  the same project as the subscription. Note that for REST API requests, you
 *  must specify a name. See the [resource name
 *  rules](https://cloud.google.com/pubsub/docs/admin#resource_names). Format is
 *  `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Creates a snapshot from the requested subscription. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. If the snapshot already exists, returns
 *  `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns
 *  `NOT_FOUND`. If the backlog in the subscription is too old -- and the
 *  resulting snapshot would expire in less than 1 hour -- then
 *  `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time`
 *  field. If the name is not provided in the request, the server will assign a
 *  random name for this snapshot on the same project as the subscription,
 *  conforming to the [resource name format]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
 *  name is populated in the returned Snapshot object. Note that for REST API
 *  requests, you must specify a name in the request.
 *
 *  @param object The @c GTLRPubsub_CreateSnapshotRequest to include in the
 *    query.
 *  @param name Required. User-provided name for this snapshot. If the name is
 *    not provided in the request, the server will assign a random name for this
 *    snapshot on the same project as the subscription. Note that for REST API
 *    requests, you must specify a name. See the [resource name
 *    rules](https://cloud.google.com/pubsub/docs/admin#resource_names). Format
 *    is `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_CreateSnapshotRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Removes an existing snapshot. Snapshots are used in [Seek]
 *  (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. When the snapshot is deleted, all messages
 *  retained in the snapshot are immediately dropped. After a snapshot is
 *  deleted, a new one may be created with the same name, but the new one has no
 *  association with the old snapshot or its subscription, unless the same
 *  subscription is specified.
 *
 *  Method: pubsub.projects.snapshots.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsDelete : GTLRPubsubQuery

/**
 *  Required. The name of the snapshot to delete. Format is
 *  `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Removes an existing snapshot. Snapshots are used in [Seek]
 *  (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. When the snapshot is deleted, all messages
 *  retained in the snapshot are immediately dropped. After a snapshot is
 *  deleted, a new one may be created with the same name, but the new one has no
 *  association with the old snapshot or its subscription, unless the same
 *  subscription is specified.
 *
 *  @param snapshot Required. The name of the snapshot to delete. Format is
 *    `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsDelete
 */
+ (instancetype)queryWithSnapshot:(NSString *)snapshot;

@end

/**
 *  Gets the configuration details of a snapshot. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  Method: pubsub.projects.snapshots.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsGet : GTLRPubsubQuery

/**
 *  Required. The name of the snapshot to get. Format is
 *  `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Gets the configuration details of a snapshot. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  @param snapshot Required. The name of the snapshot to get. Format is
 *    `projects/{project}/snapshots/{snap}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsGet
 */
+ (instancetype)queryWithSnapshot:(NSString *)snapshot;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: pubsub.projects.snapshots.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsGetIamPolicy : GTLRPubsubQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the existing snapshots. Snapshots are used in [Seek](
 *  https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  Method: pubsub.projects.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsList : GTLRPubsubQuery

/** Maximum number of snapshots to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSnapshotsResponse`; indicates that this
 *  is a continuation of a prior `ListSnapshots` call, and that the system
 *  should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project in which to list snapshots. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListSnapshotsResponse.
 *
 *  Lists the existing snapshots. Snapshots are used in [Seek](
 *  https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  @param project Required. The name of the project in which to list snapshots.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Updates an existing snapshot. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  Method: pubsub.projects.snapshots.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsPatch : GTLRPubsubQuery

/** The name of the snapshot. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Snapshot.
 *
 *  Updates an existing snapshot. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  @param object The @c GTLRPubsub_UpdateSnapshotRequest to include in the
 *    query.
 *  @param name The name of the snapshot.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateSnapshotRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: pubsub.projects.snapshots.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsSetIamPolicy : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: pubsub.projects.snapshots.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSnapshotsTestIamPermissions : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSnapshotsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Acknowledges the messages associated with the `ack_ids` in the
 *  `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
 *  from the subscription. Acknowledging a message whose ack deadline has
 *  expired may succeed, but such a message may be redelivered later.
 *  Acknowledging a message more than once will not result in an error.
 *
 *  Method: pubsub.projects.subscriptions.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsAcknowledge : GTLRPubsubQuery

/**
 *  Required. The subscription whose message is being acknowledged. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Acknowledges the messages associated with the `ack_ids` in the
 *  `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
 *  from the subscription. Acknowledging a message whose ack deadline has
 *  expired may succeed, but such a message may be redelivered later.
 *  Acknowledging a message more than once will not result in an error.
 *
 *  @param object The @c GTLRPubsub_AcknowledgeRequest to include in the query.
 *  @param subscription Required. The subscription whose message is being
 *    acknowledged. Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRPubsub_AcknowledgeRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Creates a subscription to a given topic. See the [resource name rules]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). If the
 *  subscription already exists, returns `ALREADY_EXISTS`. If the corresponding
 *  topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the
 *  request, the server will assign a random name for this subscription on the
 *  same project as the topic, conforming to the [resource name format]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
 *  name is populated in the returned Subscription object. Note that for REST
 *  API requests, you must specify a name in the request.
 *
 *  Method: pubsub.projects.subscriptions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsCreate : GTLRPubsubQuery

/**
 *  Required. The name of the subscription. It must have the format
 *  `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *  start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *  (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *  plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *  in length, and it must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Creates a subscription to a given topic. See the [resource name rules]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). If the
 *  subscription already exists, returns `ALREADY_EXISTS`. If the corresponding
 *  topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the
 *  request, the server will assign a random name for this subscription on the
 *  same project as the topic, conforming to the [resource name format]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
 *  name is populated in the returned Subscription object. Note that for REST
 *  API requests, you must specify a name in the request.
 *
 *  @param object The @c GTLRPubsub_Subscription to include in the query.
 *  @param name Required. The name of the subscription. It must have the format
 *    `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *    start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *    (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *    plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *    in length, and it must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_Subscription *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an existing subscription. All messages retained in the subscription
 *  are immediately dropped. Calls to `Pull` after deletion will return
 *  `NOT_FOUND`. After a subscription is deleted, a new one may be created with
 *  the same name, but the new one has no association with the old subscription
 *  or its topic unless the same topic is specified.
 *
 *  Method: pubsub.projects.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsDelete : GTLRPubsubQuery

/**
 *  Required. The subscription to delete. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Deletes an existing subscription. All messages retained in the subscription
 *  are immediately dropped. Calls to `Pull` after deletion will return
 *  `NOT_FOUND`. After a subscription is deleted, a new one may be created with
 *  the same name, but the new one has no association with the old subscription
 *  or its topic unless the same topic is specified.
 *
 *  @param subscription Required. The subscription to delete. Format is
 *    `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsDelete
 */
+ (instancetype)queryWithSubscription:(NSString *)subscription;

@end

/**
 *  Detaches a subscription from this topic. All messages retained in the
 *  subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
 *  will return FAILED_PRECONDITION. If the subscription is a push subscription,
 *  pushes to the endpoint will stop.
 *
 *  Method: pubsub.projects.subscriptions.detach
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsDetach : GTLRPubsubQuery

/**
 *  Required. The subscription to detach. Format is
 *  `projects/{project}/subscriptions/{subscription}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_DetachSubscriptionResponse.
 *
 *  Detaches a subscription from this topic. All messages retained in the
 *  subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
 *  will return FAILED_PRECONDITION. If the subscription is a push subscription,
 *  pushes to the endpoint will stop.
 *
 *  @param subscription Required. The subscription to detach. Format is
 *    `projects/{project}/subscriptions/{subscription}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsDetach
 */
+ (instancetype)queryWithSubscription:(NSString *)subscription;

@end

/**
 *  Gets the configuration details of a subscription.
 *
 *  Method: pubsub.projects.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsGet : GTLRPubsubQuery

/**
 *  Required. The name of the subscription to get. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Gets the configuration details of a subscription.
 *
 *  @param subscription Required. The name of the subscription to get. Format is
 *    `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsGet
 */
+ (instancetype)queryWithSubscription:(NSString *)subscription;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: pubsub.projects.subscriptions.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsGetIamPolicy : GTLRPubsubQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists matching subscriptions.
 *
 *  Method: pubsub.projects.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsList : GTLRPubsubQuery

/** Maximum number of subscriptions to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListSubscriptionsResponse`; indicates that
 *  this is a continuation of a prior `ListSubscriptions` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project in which to list subscriptions. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListSubscriptionsResponse.
 *
 *  Lists matching subscriptions.
 *
 *  @param project Required. The name of the project in which to list
 *    subscriptions. Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Modifies the ack deadline for a specific message. This method is useful to
 *  indicate that more time is needed to process a message by the subscriber, or
 *  to make the message available for redelivery if the processing was
 *  interrupted. Note that this does not modify the subscription-level
 *  `ackDeadlineSeconds` used for subsequent messages.
 *
 *  Method: pubsub.projects.subscriptions.modifyAckDeadline
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsModifyAckDeadline : GTLRPubsubQuery

/**
 *  Required. The name of the subscription. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Modifies the ack deadline for a specific message. This method is useful to
 *  indicate that more time is needed to process a message by the subscriber, or
 *  to make the message available for redelivery if the processing was
 *  interrupted. Note that this does not modify the subscription-level
 *  `ackDeadlineSeconds` used for subsequent messages.
 *
 *  @param object The @c GTLRPubsub_ModifyAckDeadlineRequest to include in the
 *    query.
 *  @param subscription Required. The name of the subscription. Format is
 *    `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsModifyAckDeadline
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ModifyAckDeadlineRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Modifies the `PushConfig` for a specified subscription. This may be used to
 *  change a push subscription to a pull one (signified by an empty
 *  `PushConfig`) or vice versa, or change the endpoint URL and other attributes
 *  of a push subscription. Messages will accumulate for delivery continuously
 *  through the call regardless of changes to the `PushConfig`.
 *
 *  Method: pubsub.projects.subscriptions.modifyPushConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsModifyPushConfig : GTLRPubsubQuery

/**
 *  Required. The name of the subscription. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Modifies the `PushConfig` for a specified subscription. This may be used to
 *  change a push subscription to a pull one (signified by an empty
 *  `PushConfig`) or vice versa, or change the endpoint URL and other attributes
 *  of a push subscription. Messages will accumulate for delivery continuously
 *  through the call regardless of changes to the `PushConfig`.
 *
 *  @param object The @c GTLRPubsub_ModifyPushConfigRequest to include in the
 *    query.
 *  @param subscription Required. The name of the subscription. Format is
 *    `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsModifyPushConfig
 */
+ (instancetype)queryWithObject:(GTLRPubsub_ModifyPushConfigRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Updates an existing subscription. Note that certain properties of a
 *  subscription, such as its topic, are not modifiable.
 *
 *  Method: pubsub.projects.subscriptions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsPatch : GTLRPubsubQuery

/**
 *  Required. The name of the subscription. It must have the format
 *  `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *  start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *  (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *  plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *  in length, and it must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Subscription.
 *
 *  Updates an existing subscription. Note that certain properties of a
 *  subscription, such as its topic, are not modifiable.
 *
 *  @param object The @c GTLRPubsub_UpdateSubscriptionRequest to include in the
 *    query.
 *  @param name Required. The name of the subscription. It must have the format
 *    `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *    start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *    (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *    plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *    in length, and it must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateSubscriptionRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Pulls messages from the server.
 *
 *  Method: pubsub.projects.subscriptions.pull
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsPull : GTLRPubsubQuery

/**
 *  Required. The subscription from which messages should be pulled. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_PullResponse.
 *
 *  Pulls messages from the server.
 *
 *  @param object The @c GTLRPubsub_PullRequest to include in the query.
 *  @param subscription Required. The subscription from which messages should be
 *    pulled. Format is `projects/{project}/subscriptions/{sub}`.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsPull
 */
+ (instancetype)queryWithObject:(GTLRPubsub_PullRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Seeks an existing subscription to a point in time or to a given snapshot,
 *  whichever is provided in the request. Snapshots are used in [Seek]
 *  (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. Note that both the subscription and the
 *  snapshot must be on the same topic.
 *
 *  Method: pubsub.projects.subscriptions.seek
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsSeek : GTLRPubsubQuery

/** Required. The subscription to affect. */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Fetches a @c GTLRPubsub_SeekResponse.
 *
 *  Seeks an existing subscription to a point in time or to a given snapshot,
 *  whichever is provided in the request. Snapshots are used in [Seek]
 *  (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
 *  allow you to manage message acknowledgments in bulk. That is, you can set
 *  the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot. Note that both the subscription and the
 *  snapshot must be on the same topic.
 *
 *  @param object The @c GTLRPubsub_SeekRequest to include in the query.
 *  @param subscription Required. The subscription to affect.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsSeek
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SeekRequest *)object
                   subscription:(NSString *)subscription;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: pubsub.projects.subscriptions.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsSetIamPolicy : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: pubsub.projects.subscriptions.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsSubscriptionsTestIamPermissions : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsSubscriptionsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates the given topic with the given name. See the [resource name rules]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names).
 *
 *  Method: pubsub.projects.topics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsCreate : GTLRPubsubQuery

/**
 *  Required. The name of the topic. It must have the format
 *  `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *  and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *  underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs
 *  (`%`). It must be between 3 and 255 characters in length, and it must not
 *  start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Creates the given topic with the given name. See the [resource name rules]
 *  (https://cloud.google.com/pubsub/docs/admin#resource_names).
 *
 *  @param object The @c GTLRPubsub_Topic to include in the query.
 *  @param name Required. The name of the topic. It must have the format
 *    `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *    and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *    underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *    signs (`%`). It must be between 3 and 255 characters in length, and it
 *    must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsCreate
 */
+ (instancetype)queryWithObject:(GTLRPubsub_Topic *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does
 *  not exist. After a topic is deleted, a new topic may be created with the
 *  same name; this is an entirely new topic with none of the old configuration
 *  or subscriptions. Existing subscriptions to this topic are not deleted, but
 *  their `topic` field is set to `_deleted-topic_`.
 *
 *  Method: pubsub.projects.topics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsDelete : GTLRPubsubQuery

/**
 *  Required. Name of the topic to delete. Format is
 *  `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_Empty.
 *
 *  Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does
 *  not exist. After a topic is deleted, a new topic may be created with the
 *  same name; this is an entirely new topic with none of the old configuration
 *  or subscriptions. Existing subscriptions to this topic are not deleted, but
 *  their `topic` field is set to `_deleted-topic_`.
 *
 *  @param topic Required. Name of the topic to delete. Format is
 *    `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsDelete
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Gets the configuration of a topic.
 *
 *  Method: pubsub.projects.topics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsGet : GTLRPubsubQuery

/**
 *  Required. The name of the topic to get. Format is
 *  `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Gets the configuration of a topic.
 *
 *  @param topic Required. The name of the topic to get. Format is
 *    `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsGet
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: pubsub.projects.topics.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsGetIamPolicy : GTLRPubsubQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists matching topics.
 *
 *  Method: pubsub.projects.topics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsList : GTLRPubsubQuery

/** Maximum number of topics to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicsResponse`; indicates that this is
 *  a continuation of a prior `ListTopics` call, and that the system should
 *  return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project in which to list topics. Format is
 *  `projects/{project-id}`.
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c GTLRPubsub_ListTopicsResponse.
 *
 *  Lists matching topics.
 *
 *  @param project Required. The name of the project in which to list topics.
 *    Format is `projects/{project-id}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProject:(NSString *)project;

@end

/**
 *  Updates an existing topic. Note that certain properties of a topic are not
 *  modifiable.
 *
 *  Method: pubsub.projects.topics.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsPatch : GTLRPubsubQuery

/**
 *  Required. The name of the topic. It must have the format
 *  `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *  and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *  underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs
 *  (`%`). It must be between 3 and 255 characters in length, and it must not
 *  start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRPubsub_Topic.
 *
 *  Updates an existing topic. Note that certain properties of a topic are not
 *  modifiable.
 *
 *  @param object The @c GTLRPubsub_UpdateTopicRequest to include in the query.
 *  @param name Required. The name of the topic. It must have the format
 *    `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *    and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *    underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
 *    signs (`%`). It must be between 3 and 255 characters in length, and it
 *    must not start with `"goog"`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsPatch
 */
+ (instancetype)queryWithObject:(GTLRPubsub_UpdateTopicRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
 *  does not exist.
 *
 *  Method: pubsub.projects.topics.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsPublish : GTLRPubsubQuery

/**
 *  Required. The messages in the request will be published on this topic.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_PublishResponse.
 *
 *  Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
 *  does not exist.
 *
 *  @param object The @c GTLRPubsub_PublishRequest to include in the query.
 *  @param topic Required. The messages in the request will be published on this
 *    topic. Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsPublish
 */
+ (instancetype)queryWithObject:(GTLRPubsub_PublishRequest *)object
                          topic:(NSString *)topic;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: pubsub.projects.topics.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSetIamPolicy : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRPubsub_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRPubsub_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the names of the snapshots on this topic. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  Method: pubsub.projects.topics.snapshots.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSnapshotsList : GTLRPubsubQuery

/** Maximum number of snapshot names to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicSnapshotsResponse`; indicates that
 *  this is a continuation of a prior `ListTopicSnapshots` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the topic that snapshots are attached to. Format is
 *  `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_ListTopicSnapshotsResponse.
 *
 *  Lists the names of the snapshots on this topic. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 *
 *  @param topic Required. The name of the topic that snapshots are attached to.
 *    Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSnapshotsList
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Lists the names of the attached subscriptions on this topic.
 *
 *  Method: pubsub.projects.topics.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsSubscriptionsList : GTLRPubsubQuery

/** Maximum number of subscription names to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListTopicSubscriptionsResponse`; indicates
 *  that this is a continuation of a prior `ListTopicSubscriptions` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the topic that subscriptions are attached to. Format
 *  is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Fetches a @c GTLRPubsub_ListTopicSubscriptionsResponse.
 *
 *  Lists the names of the attached subscriptions on this topic.
 *
 *  @param topic Required. The name of the topic that subscriptions are attached
 *    to. Format is `projects/{project}/topics/{topic}`.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsSubscriptionsList
 */
+ (instancetype)queryWithTopic:(NSString *)topic;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: pubsub.projects.topics.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePubsub
 *    @c kGTLRAuthScopePubsubCloudPlatform
 */
@interface GTLRPubsubQuery_ProjectsTopicsTestIamPermissions : GTLRPubsubQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRPubsub_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRPubsub_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRPubsubQuery_ProjectsTopicsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRPubsub_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
