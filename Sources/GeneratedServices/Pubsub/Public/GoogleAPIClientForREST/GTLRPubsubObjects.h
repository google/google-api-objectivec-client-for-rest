// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Pub/Sub API (pubsub/v1)
// Description:
//   Provides reliable, many-to-many, asynchronous messaging between
//   applications.
// Documentation:
//   https://cloud.google.com/pubsub/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPubsub_BigQueryConfig;
@class GTLRPubsub_Binding;
@class GTLRPubsub_CreateSnapshotRequest_Labels;
@class GTLRPubsub_DeadLetterPolicy;
@class GTLRPubsub_ExpirationPolicy;
@class GTLRPubsub_Expr;
@class GTLRPubsub_Message;
@class GTLRPubsub_Message_Attributes;
@class GTLRPubsub_MessageStoragePolicy;
@class GTLRPubsub_OidcToken;
@class GTLRPubsub_Policy;
@class GTLRPubsub_PushConfig;
@class GTLRPubsub_PushConfig_Attributes;
@class GTLRPubsub_ReceivedMessage;
@class GTLRPubsub_RetryPolicy;
@class GTLRPubsub_Schema;
@class GTLRPubsub_SchemaSettings;
@class GTLRPubsub_Snapshot;
@class GTLRPubsub_Snapshot_Labels;
@class GTLRPubsub_Subscription;
@class GTLRPubsub_Subscription_Labels;
@class GTLRPubsub_Topic;
@class GTLRPubsub_Topic_Labels;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPubsub_BigQueryConfig.state

/**
 *  The subscription can actively send messages to BigQuery
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_BigQueryConfig_State_Active;
/**
 *  Cannot write to the BigQuery table because it does not exist.
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_BigQueryConfig_State_NotFound;
/**
 *  Cannot write to the BigQuery table because of permission denied errors.
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_BigQueryConfig_State_PermissionDenied;
/**
 *  Cannot write to the BigQuery table due to a schema mismatch.
 *
 *  Value: "SCHEMA_MISMATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_BigQueryConfig_State_SchemaMismatch;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_BigQueryConfig_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRPubsub_Schema.type

/**
 *  An Avro schema definition.
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Schema_Type_Avro;
/**
 *  A Protocol Buffer schema definition.
 *
 *  Value: "PROTOCOL_BUFFER"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Schema_Type_ProtocolBuffer;
/**
 *  Default value. This value is unused.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Schema_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPubsub_SchemaSettings.encoding

/**
 *  Binary encoding, as defined by the schema type. For some schema types,
 *  binary encoding may not be available.
 *
 *  Value: "BINARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_SchemaSettings_Encoding_Binary;
/**
 *  Unspecified
 *
 *  Value: "ENCODING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_SchemaSettings_Encoding_EncodingUnspecified;
/**
 *  JSON encoding
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_SchemaSettings_Encoding_Json;

// ----------------------------------------------------------------------------
// GTLRPubsub_Subscription.state

/**
 *  The subscription can actively receive messages
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Subscription_State_Active;
/**
 *  The subscription cannot receive messages because of an error with the
 *  resource to which it pushes messages. See the more detailed error state in
 *  the corresponding configuration.
 *
 *  Value: "RESOURCE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Subscription_State_ResourceError;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_Subscription_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRPubsub_ValidateMessageRequest.encoding

/**
 *  Binary encoding, as defined by the schema type. For some schema types,
 *  binary encoding may not be available.
 *
 *  Value: "BINARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_ValidateMessageRequest_Encoding_Binary;
/**
 *  Unspecified
 *
 *  Value: "ENCODING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_ValidateMessageRequest_Encoding_EncodingUnspecified;
/**
 *  JSON encoding
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRPubsub_ValidateMessageRequest_Encoding_Json;

/**
 *  Request for the Acknowledge method.
 */
@interface GTLRPubsub_AcknowledgeRequest : GTLRObject

/**
 *  Required. The acknowledgment ID for the messages being acknowledged that was
 *  returned by the Pub/Sub system in the `Pull` response. Must not be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ackIds;

@end


/**
 *  Configuration for a BigQuery subscription.
 */
@interface GTLRPubsub_BigQueryConfig : GTLRObject

/**
 *  When true and use_topic_schema is true, any fields that are a part of the
 *  topic schema that are not part of the BigQuery table schema are dropped when
 *  writing to BigQuery. Otherwise, the schemas must be kept in sync and any
 *  messages with extra fields are not written and remain in the subscription's
 *  backlog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dropUnknownFields;

/**
 *  Output only. An output-only field that indicates whether or not the
 *  subscription can receive messages.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsub_BigQueryConfig_State_Active The subscription can
 *        actively send messages to BigQuery (Value: "ACTIVE")
 *    @arg @c kGTLRPubsub_BigQueryConfig_State_NotFound Cannot write to the
 *        BigQuery table because it does not exist. (Value: "NOT_FOUND")
 *    @arg @c kGTLRPubsub_BigQueryConfig_State_PermissionDenied Cannot write to
 *        the BigQuery table because of permission denied errors. (Value:
 *        "PERMISSION_DENIED")
 *    @arg @c kGTLRPubsub_BigQueryConfig_State_SchemaMismatch Cannot write to
 *        the BigQuery table due to a schema mismatch. (Value:
 *        "SCHEMA_MISMATCH")
 *    @arg @c kGTLRPubsub_BigQueryConfig_State_StateUnspecified Default value.
 *        This value is unused. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The name of the table to which to write data, of the form
 *  {projectId}.{datasetId}.{tableId}
 */
@property(nonatomic, copy, nullable) NSString *table;

/**
 *  When true, use the topic's schema as the columns to write to in BigQuery, if
 *  it exists.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useTopicSchema;

/**
 *  When true, write the subscription name, message_id, publish_time,
 *  attributes, and ordering_key to additional columns in the table. The
 *  subscription name, message_id, and publish_time fields are put in their own
 *  columns while all other message properties (other than data) are written to
 *  a JSON object in the attributes column.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMetadata;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRPubsub_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Request for the `CreateSnapshot` method.
 */
@interface GTLRPubsub_CreateSnapshotRequest : GTLRObject

/**
 *  See [Creating and managing
 *  labels](https://cloud.google.com/pubsub/docs/labels).
 */
@property(nonatomic, strong, nullable) GTLRPubsub_CreateSnapshotRequest_Labels *labels;

/**
 *  Required. The subscription whose backlog the snapshot retains. Specifically,
 *  the created snapshot is guaranteed to retain: (a) The existing backlog on
 *  the subscription. More precisely, this is defined as the messages in the
 *  subscription's backlog that are unacknowledged upon the successful
 *  completion of the `CreateSnapshot` request; as well as: (b) Any messages
 *  published to the subscription's topic following the successful completion of
 *  the CreateSnapshot request. Format is
 *  `projects/{project}/subscriptions/{sub}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

@end


/**
 *  See [Creating and managing
 *  labels](https://cloud.google.com/pubsub/docs/labels).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_CreateSnapshotRequest_Labels : GTLRObject
@end


/**
 *  Dead lettering is done on a best effort basis. The same message might be
 *  dead lettered multiple times. If validation on any of the fields fails at
 *  subscription creation/updation, the create/update subscription request will
 *  fail.
 */
@interface GTLRPubsub_DeadLetterPolicy : GTLRObject

/**
 *  The name of the topic to which dead letter messages should be published.
 *  Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
 *  account associated with the enclosing subscription's parent project (i.e.,
 *  service-{project_number}\@gcp-sa-pubsub.iam.gserviceaccount.com) must have
 *  permission to Publish() to this topic. The operation will fail if the topic
 *  does not exist. Users should ensure that there is a subscription attached to
 *  this topic since messages published to a topic with no subscriptions are
 *  lost.
 */
@property(nonatomic, copy, nullable) NSString *deadLetterTopic;

/**
 *  The maximum number of delivery attempts for any message. The value must be
 *  between 5 and 100. The number of delivery attempts is defined as 1 + (the
 *  sum of number of NACKs and number of times the acknowledgement deadline has
 *  been exceeded for the message). A NACK is any call to ModifyAckDeadline with
 *  a 0 deadline. Note that client libraries may automatically extend
 *  ack_deadlines. This field will be honored on a best effort basis. If this
 *  parameter is 0, a default value of 5 is used.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDeliveryAttempts;

@end


/**
 *  Response for the DetachSubscription method. Reserved for future use.
 */
@interface GTLRPubsub_DetachSubscriptionResponse : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRPubsub_Empty : GTLRObject
@end


/**
 *  A policy that specifies the conditions for resource expiration (i.e.,
 *  automatic resource deletion).
 */
@interface GTLRPubsub_ExpirationPolicy : GTLRObject

/**
 *  Specifies the "time-to-live" duration for an associated resource. The
 *  resource expires if it is not active for a period of `ttl`. The definition
 *  of "activity" depends on the type of the associated resource. The minimum
 *  and maximum allowed values for `ttl` depend on the type of the associated
 *  resource, as well. If `ttl` is not set, the associated resource never
 *  expires.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRPubsub_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response for the `ListSchemas` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "schemas" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPubsub_ListSchemasResponse : GTLRCollectionObject

/**
 *  If not empty, indicates that there may be more schemas that match the
 *  request; this value should be passed in a new `ListSchemasRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting schemas.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Schema *> *schemas;

@end


/**
 *  Response for the `ListSnapshots` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "snapshots" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPubsub_ListSnapshotsResponse : GTLRCollectionObject

/**
 *  If not empty, indicates that there may be more snapshot that match the
 *  request; this value should be passed in a new `ListSnapshotsRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting snapshots.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Snapshot *> *snapshots;

@end


/**
 *  Response for the `ListSubscriptions` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subscriptions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPubsub_ListSubscriptionsResponse : GTLRCollectionObject

/**
 *  If not empty, indicates that there may be more subscriptions that match the
 *  request; this value should be passed in a new `ListSubscriptionsRequest` to
 *  get more subscriptions.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The subscriptions that match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Subscription *> *subscriptions;

@end


/**
 *  Response for the `ListTopicSnapshots` method.
 */
@interface GTLRPubsub_ListTopicSnapshotsResponse : GTLRObject

/**
 *  If not empty, indicates that there may be more snapshots that match the
 *  request; this value should be passed in a new `ListTopicSnapshotsRequest` to
 *  get more snapshots.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The names of the snapshots that match the request. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *snapshots;

@end


/**
 *  Response for the `ListTopics` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "topics" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPubsub_ListTopicsResponse : GTLRCollectionObject

/**
 *  If not empty, indicates that there may be more topics that match the
 *  request; this value should be passed in a new `ListTopicsRequest`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting topics.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Topic *> *topics;

@end


/**
 *  Response for the `ListTopicSubscriptions` method.
 */
@interface GTLRPubsub_ListTopicSubscriptionsResponse : GTLRObject

/**
 *  If not empty, indicates that there may be more subscriptions that match the
 *  request; this value should be passed in a new
 *  `ListTopicSubscriptionsRequest` to get more subscriptions.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The names of subscriptions attached to the topic specified in the request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *subscriptions;

@end


/**
 *  A message that is published by publishers and consumed by subscribers. The
 *  message must contain either a non-empty data field or at least one
 *  attribute. Note that client libraries represent this object differently
 *  depending on the language. See the corresponding [client library
 *  documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for
 *  more information. See [quotas and limits]
 *  (https://cloud.google.com/pubsub/quotas) for more information about message
 *  limits.
 */
@interface GTLRPubsub_Message : GTLRObject

/**
 *  Attributes for this message. If this field is empty, the message must
 *  contain non-empty data. This can be used to filter messages on the
 *  subscription.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Message_Attributes *attributes;

/**
 *  The message data field. If this field is empty, the message must contain at
 *  least one attribute.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  ID of this message, assigned by the server when the message is published.
 *  Guaranteed to be unique within the topic. This value may be read by a
 *  subscriber that receives a `PubsubMessage` via a `Pull` call or a push
 *  delivery. It must not be populated by the publisher in a `Publish` call.
 */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  If non-empty, identifies related messages for which publish order should be
 *  respected. If a `Subscription` has `enable_message_ordering` set to `true`,
 *  messages published with the same non-empty `ordering_key` value will be
 *  delivered to subscribers in the order in which they are received by the
 *  Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest`
 *  must specify the same `ordering_key` value. For more information, see
 *  [ordering messages](https://cloud.google.com/pubsub/docs/ordering).
 */
@property(nonatomic, copy, nullable) NSString *orderingKey;

/**
 *  The time at which the message was published, populated by the server when it
 *  receives the `Publish` call. It must not be populated by the publisher in a
 *  `Publish` call.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

@end


/**
 *  Attributes for this message. If this field is empty, the message must
 *  contain non-empty data. This can be used to filter messages on the
 *  subscription.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_Message_Attributes : GTLRObject
@end


/**
 *  A policy constraining the storage of messages published to the topic.
 */
@interface GTLRPubsub_MessageStoragePolicy : GTLRObject

/**
 *  A list of IDs of GCP regions where messages that are published to the topic
 *  may be persisted in storage. Messages published by publishers running in
 *  non-allowed GCP regions (or running outside of GCP altogether) will be
 *  routed for storage in one of the allowed regions. An empty list means that
 *  no regions are allowed, and is not a valid configuration.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedPersistenceRegions;

@end


/**
 *  Request for the ModifyAckDeadline method.
 */
@interface GTLRPubsub_ModifyAckDeadlineRequest : GTLRObject

/**
 *  Required. The new ack deadline with respect to the time this request was
 *  sent to the Pub/Sub system. For example, if the value is 10, the new ack
 *  deadline will expire 10 seconds after the `ModifyAckDeadline` call was made.
 *  Specifying zero might immediately make the message available for delivery to
 *  another subscriber client. This typically results in an increase in the rate
 *  of message redeliveries (that is, duplicates). The minimum deadline you can
 *  specify is 0 seconds. The maximum deadline you can specify is 600 seconds
 *  (10 minutes).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ackDeadlineSeconds;

/** Required. List of acknowledgment IDs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ackIds;

@end


/**
 *  Request for the ModifyPushConfig method.
 */
@interface GTLRPubsub_ModifyPushConfigRequest : GTLRObject

/**
 *  Required. The push configuration for future deliveries. An empty
 *  `pushConfig` indicates that the Pub/Sub system should stop pushing messages
 *  from the given subscription and allow messages to be pulled and acknowledged
 *  - effectively pausing the subscription if `Pull` or `StreamingPull` is not
 *  called.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_PushConfig *pushConfig;

@end


/**
 *  Contains information needed for generating an [OpenID Connect
 *  token](https://developers.google.com/identity/protocols/OpenIDConnect).
 *  [Service account email](https://cloud.google.com/iam/docs/service-accounts)
 *  used for generating the OIDC token. For more information on setting up
 *  authentication, see [Push
 *  subscriptions](https://cloud.google.com/pubsub/docs/push).
 */
@interface GTLRPubsub_OidcToken : GTLRObject

/**
 *  Audience to be used when generating OIDC token. The audience claim
 *  identifies the recipients that the JWT is intended for. The audience value
 *  is a single case-sensitive string. Having multiple values (array) for the
 *  audience field is not supported. More info about the OIDC JWT token audience
 *  here: https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not
 *  specified, the Push endpoint URL will be used.
 */
@property(nonatomic, copy, nullable) NSString *audience;

@property(nonatomic, copy, nullable) NSString *serviceAccountEmail;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRPubsub_Policy : GTLRObject

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request for the Publish method.
 */
@interface GTLRPubsub_PublishRequest : GTLRObject

/** Required. The messages to publish. */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_Message *> *messages;

@end


/**
 *  Response for the `Publish` method.
 */
@interface GTLRPubsub_PublishResponse : GTLRObject

/**
 *  The server-assigned ID of each published message, in the same order as the
 *  messages in the request. IDs are guaranteed to be unique within the topic.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *messageIds;

@end


/**
 *  Request for the `Pull` method.
 */
@interface GTLRPubsub_PullRequest : GTLRObject

/**
 *  Required. The maximum number of messages to return for this request. Must be
 *  a positive integer. The Pub/Sub system may return fewer than the number
 *  specified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxMessages;

/**
 *  Optional. If this field set to true, the system will respond immediately
 *  even if it there are no messages available to return in the `Pull` response.
 *  Otherwise, the system may wait (for a bounded amount of time) until at least
 *  one message is available, rather than returning no messages. Warning:
 *  setting this field to `true` is discouraged because it adversely impacts the
 *  performance of `Pull` operations. We recommend that users do not set this
 *  field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *returnImmediately;

@end


/**
 *  Response for the `Pull` method.
 */
@interface GTLRPubsub_PullResponse : GTLRObject

/**
 *  Received Pub/Sub messages. The list will be empty if there are no more
 *  messages available in the backlog, or if no messages could be returned
 *  before the request timeout. For JSON, the response can be entirely empty.
 *  The Pub/Sub system may return fewer than the `maxMessages` requested even if
 *  there are more messages available in the backlog.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPubsub_ReceivedMessage *> *receivedMessages;

@end


/**
 *  Configuration for a push delivery endpoint.
 */
@interface GTLRPubsub_PushConfig : GTLRObject

/**
 *  Endpoint configuration attributes that can be used to control different
 *  aspects of the message delivery. The only currently supported attribute is
 *  `x-goog-version`, which you can use to change the format of the pushed
 *  message. This attribute indicates the version of the data expected by the
 *  endpoint. This controls the shape of the pushed message (i.e., its fields
 *  and metadata). If not present during the `CreateSubscription` call, it will
 *  default to the version of the Pub/Sub API used to make such call. If not
 *  present in a `ModifyPushConfig` call, its value will not be changed.
 *  `GetSubscription` calls will always return a valid version, even if the
 *  subscription was created without this attribute. The only supported values
 *  for the `x-goog-version` attribute are: * `v1beta1`: uses the push format
 *  defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push
 *  format defined in the v1 Pub/Sub API. For example: `attributes {
 *  "x-goog-version": "v1" }`
 */
@property(nonatomic, strong, nullable) GTLRPubsub_PushConfig_Attributes *attributes;

/**
 *  If specified, Pub/Sub will generate and attach an OIDC JWT token as an
 *  `Authorization` header in the HTTP request for every pushed message.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_OidcToken *oidcToken;

/**
 *  A URL locating the endpoint to which messages should be pushed. For example,
 *  a Webhook endpoint might use `https://example.com/push`.
 */
@property(nonatomic, copy, nullable) NSString *pushEndpoint;

@end


/**
 *  Endpoint configuration attributes that can be used to control different
 *  aspects of the message delivery. The only currently supported attribute is
 *  `x-goog-version`, which you can use to change the format of the pushed
 *  message. This attribute indicates the version of the data expected by the
 *  endpoint. This controls the shape of the pushed message (i.e., its fields
 *  and metadata). If not present during the `CreateSubscription` call, it will
 *  default to the version of the Pub/Sub API used to make such call. If not
 *  present in a `ModifyPushConfig` call, its value will not be changed.
 *  `GetSubscription` calls will always return a valid version, even if the
 *  subscription was created without this attribute. The only supported values
 *  for the `x-goog-version` attribute are: * `v1beta1`: uses the push format
 *  defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push
 *  format defined in the v1 Pub/Sub API. For example: `attributes {
 *  "x-goog-version": "v1" }`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_PushConfig_Attributes : GTLRObject
@end


/**
 *  A message and its corresponding acknowledgment ID.
 */
@interface GTLRPubsub_ReceivedMessage : GTLRObject

/** This ID can be used to acknowledge the received message. */
@property(nonatomic, copy, nullable) NSString *ackId;

/**
 *  The approximate number of times that Cloud Pub/Sub has attempted to deliver
 *  the associated message to a subscriber. More precisely, this is 1 + (number
 *  of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any
 *  call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event
 *  is whenever a message is not acknowledged within ack_deadline. Note that
 *  ack_deadline is initially Subscription.ackDeadlineSeconds, but may get
 *  extended automatically by the client library. Upon the first delivery of a
 *  given message, `delivery_attempt` will have a value of 1. The value is
 *  calculated at best effort and is approximate. If a DeadLetterPolicy is not
 *  set on the subscription, this will be 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deliveryAttempt;

/** The message. */
@property(nonatomic, strong, nullable) GTLRPubsub_Message *message;

@end


/**
 *  A policy that specifies how Cloud Pub/Sub retries message delivery. Retry
 *  delay will be exponential based on provided minimum and maximum backoffs.
 *  https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be
 *  triggered on NACKs or acknowledgement deadline exceeded events for a given
 *  message. Retry Policy is implemented on a best effort basis. At times, the
 *  delay between consecutive deliveries may not match the configuration. That
 *  is, delay can be more or less than configured backoff.
 */
@interface GTLRPubsub_RetryPolicy : GTLRObject

/**
 *  The maximum delay between consecutive deliveries of a given message. Value
 *  should be between 0 and 600 seconds. Defaults to 600 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maximumBackoff;

/**
 *  The minimum delay between consecutive deliveries of a given message. Value
 *  should be between 0 and 600 seconds. Defaults to 10 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minimumBackoff;

@end


/**
 *  A schema resource.
 */
@interface GTLRPubsub_Schema : GTLRObject

/**
 *  The definition of the schema. This should contain a string representing the
 *  full definition of the schema that is a valid schema definition of the type
 *  specified in `type`.
 */
@property(nonatomic, copy, nullable) NSString *definition;

/**
 *  Required. Name of the schema. Format is
 *  `projects/{project}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The timestamp that the revision was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/** Output only. Immutable. The revision ID of the schema. */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  The type of the schema definition.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsub_Schema_Type_Avro An Avro schema definition. (Value:
 *        "AVRO")
 *    @arg @c kGTLRPubsub_Schema_Type_ProtocolBuffer A Protocol Buffer schema
 *        definition. (Value: "PROTOCOL_BUFFER")
 *    @arg @c kGTLRPubsub_Schema_Type_TypeUnspecified Default value. This value
 *        is unused. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Settings for validating messages published against a schema.
 */
@interface GTLRPubsub_SchemaSettings : GTLRObject

/**
 *  The encoding of messages validated against `schema`.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsub_SchemaSettings_Encoding_Binary Binary encoding, as
 *        defined by the schema type. For some schema types, binary encoding may
 *        not be available. (Value: "BINARY")
 *    @arg @c kGTLRPubsub_SchemaSettings_Encoding_EncodingUnspecified
 *        Unspecified (Value: "ENCODING_UNSPECIFIED")
 *    @arg @c kGTLRPubsub_SchemaSettings_Encoding_Json JSON encoding (Value:
 *        "JSON")
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  The minimum (inclusive) revision allowed for validating messages. If empty
 *  or not present, allow any revision to be validated against last_revision or
 *  any revision created before.
 */
@property(nonatomic, copy, nullable) NSString *firstRevisionId;

/**
 *  The maximum (inclusive) revision allowed for validating messages. If empty
 *  or not present, allow any revision to be validated against first_revision or
 *  any revision created after.
 */
@property(nonatomic, copy, nullable) NSString *lastRevisionId;

/**
 *  Required. The name of the schema that messages published should be validated
 *  against. Format is `projects/{project}/schemas/{schema}`. The value of this
 *  field will be `_deleted-schema_` if the schema has been deleted.
 */
@property(nonatomic, copy, nullable) NSString *schema;

@end


/**
 *  Request for the `Seek` method.
 */
@interface GTLRPubsub_SeekRequest : GTLRObject

/**
 *  The snapshot to seek to. The snapshot's topic must be the same as that of
 *  the provided subscription. Format is `projects/{project}/snapshots/{snap}`.
 */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  The time to seek to. Messages retained in the subscription that were
 *  published before this time are marked as acknowledged, and messages retained
 *  in the subscription that were published after this time are marked as
 *  unacknowledged. Note that this operation affects only those messages
 *  retained in the subscription (configured by the combination of
 *  `message_retention_duration` and `retain_acked_messages`). For example, if
 *  `time` corresponds to a point before the message retention window (or to a
 *  point before the system's notion of the subscription creation time), only
 *  retained messages will be marked as unacknowledged, and already-expunged
 *  messages will not be restored.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *time;

@end


/**
 *  Response for the `Seek` method (this response is empty).
 */
@interface GTLRPubsub_SeekResponse : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRPubsub_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Policy *policy;

@end


/**
 *  A snapshot resource. Snapshots are used in
 *  [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
 *  which allow you to manage message acknowledgments in bulk. That is, you can
 *  set the acknowledgment state of messages in an existing subscription to the
 *  state captured by a snapshot.
 */
@interface GTLRPubsub_Snapshot : GTLRObject

/**
 *  The snapshot is guaranteed to exist up until this time. A newly-created
 *  snapshot expires no later than 7 days from the time of its creation. Its
 *  exact lifetime is determined at creation by the existing backlog in the
 *  source subscription. Specifically, the lifetime of the snapshot is `7 days -
 *  (age of oldest unacked message in the subscription)`. For example, consider
 *  a subscription whose oldest unacked message is 3 days old. If a snapshot is
 *  created from this subscription, the snapshot -- which will always capture
 *  this 3-day-old backlog as long as the snapshot exists -- will expire in 4
 *  days. The service will refuse to create a snapshot that would expire in less
 *  than 1 hour after creation.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  See [Creating and managing labels]
 *  (https://cloud.google.com/pubsub/docs/labels).
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Snapshot_Labels *labels;

/** The name of the snapshot. */
@property(nonatomic, copy, nullable) NSString *name;

/** The name of the topic from which this snapshot is retaining messages. */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  See [Creating and managing labels]
 *  (https://cloud.google.com/pubsub/docs/labels).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_Snapshot_Labels : GTLRObject
@end


/**
 *  A subscription resource. If none of `push_config` or `bigquery_config` is
 *  set, then the subscriber will pull and ack messages using API methods. At
 *  most one of these fields may be set.
 */
@interface GTLRPubsub_Subscription : GTLRObject

/**
 *  The approximate amount of time (on a best-effort basis) Pub/Sub waits for
 *  the subscriber to acknowledge receipt before resending the message. In the
 *  interval after the message is delivered and before it is acknowledged, it is
 *  considered to be _outstanding_. During that time period, the message will
 *  not be redelivered (on a best-effort basis). For pull subscriptions, this
 *  value is used as the initial value for the ack deadline. To override this
 *  value for a given message, call `ModifyAckDeadline` with the corresponding
 *  `ack_id` if using non-streaming pull or send the `ack_id` in a
 *  `StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum
 *  custom deadline you can specify is 10 seconds. The maximum custom deadline
 *  you can specify is 600 seconds (10 minutes). If this parameter is 0, a
 *  default value of 10 seconds is used. For push delivery, this value is also
 *  used to set the request timeout for the call to the push endpoint. If the
 *  subscriber never acknowledges the message, the Pub/Sub system will
 *  eventually redeliver the message.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ackDeadlineSeconds;

/**
 *  If delivery to BigQuery is used with this subscription, this field is used
 *  to configure it.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_BigQueryConfig *bigqueryConfig;

/**
 *  A policy that specifies the conditions for dead lettering messages in this
 *  subscription. If dead_letter_policy is not set, dead lettering is disabled.
 *  The Cloud Pub/Sub service account associated with this subscriptions's
 *  parent project (i.e.,
 *  service-{project_number}\@gcp-sa-pubsub.iam.gserviceaccount.com) must have
 *  permission to Acknowledge() messages on this subscription.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_DeadLetterPolicy *deadLetterPolicy;

/**
 *  Indicates whether the subscription is detached from its topic. Detached
 *  subscriptions don't receive messages from their topic and don't retain any
 *  backlog. `Pull` and `StreamingPull` requests will return
 *  FAILED_PRECONDITION. If the subscription is a push subscription, pushes to
 *  the endpoint will not be made.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *detached;

/**
 *  If true, Pub/Sub provides the following guarantees for the delivery of a
 *  message with a given value of `message_id` on this subscription: * The
 *  message sent to a subscriber is guaranteed not to be resent before the
 *  message's acknowledgement deadline expires. * An acknowledged message will
 *  not be resent to a subscriber. Note that subscribers may still receive
 *  multiple copies of a message when `enable_exactly_once_delivery` is true if
 *  the message was published multiple times by a publisher client. These copies
 *  are considered distinct by Pub/Sub and have distinct `message_id` values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableExactlyOnceDelivery;

/**
 *  If true, messages published with the same `ordering_key` in `PubsubMessage`
 *  will be delivered to the subscribers in the order in which they are received
 *  by the Pub/Sub system. Otherwise, they may be delivered in any order.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableMessageOrdering;

/**
 *  A policy that specifies the conditions for this subscription's expiration. A
 *  subscription is considered active as long as any connected subscriber is
 *  successfully consuming messages from the subscription or is issuing
 *  operations on the subscription. If `expiration_policy` is not set, a
 *  *default policy* with `ttl` of 31 days will be used. The minimum allowed
 *  value for `expiration_policy.ttl` is 1 day. If `expiration_policy` is set,
 *  but `expiration_policy.ttl` is not set, the subscription never expires.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_ExpirationPolicy *expirationPolicy;

/**
 *  An expression written in the Pub/Sub [filter
 *  language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,
 *  then only `PubsubMessage`s whose `attributes` field matches the filter are
 *  delivered on this subscription. If empty, then no messages are filtered out.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  See [Creating and managing
 *  labels](https://cloud.google.com/pubsub/docs/labels).
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Subscription_Labels *labels;

/**
 *  How long to retain unacknowledged messages in the subscription's backlog,
 *  from the moment a message is published. If `retain_acked_messages` is true,
 *  then this also configures the retention of acknowledged messages, and thus
 *  configures how far back in time a `Seek` can be done. Defaults to 7 days.
 *  Cannot be more than 7 days or less than 10 minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *messageRetentionDuration;

/**
 *  Required. The name of the subscription. It must have the format
 *  `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
 *  start with a letter, and contain only letters (`[A-Za-z]`), numbers
 *  (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
 *  plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
 *  in length, and it must not start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If push delivery is used with this subscription, this field is used to
 *  configure it.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_PushConfig *pushConfig;

/**
 *  Indicates whether to retain acknowledged messages. If true, then messages
 *  are not expunged from the subscription's backlog, even if they are
 *  acknowledged, until they fall out of the `message_retention_duration`
 *  window. This must be true if you would like to [`Seek` to a timestamp]
 *  (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) in the
 *  past to replay previously-acknowledged messages.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retainAckedMessages;

/**
 *  A policy that specifies how Pub/Sub retries message delivery for this
 *  subscription. If not set, the default retry policy is applied. This
 *  generally implies that messages will be retried as soon as possible for
 *  healthy subscribers. RetryPolicy will be triggered on NACKs or
 *  acknowledgement deadline exceeded events for a given message.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_RetryPolicy *retryPolicy;

/**
 *  Output only. An output-only field indicating whether or not the subscription
 *  can receive messages.
 *
 *  Likely values:
 *    @arg @c kGTLRPubsub_Subscription_State_Active The subscription can
 *        actively receive messages (Value: "ACTIVE")
 *    @arg @c kGTLRPubsub_Subscription_State_ResourceError The subscription
 *        cannot receive messages because of an error with the resource to which
 *        it pushes messages. See the more detailed error state in the
 *        corresponding configuration. (Value: "RESOURCE_ERROR")
 *    @arg @c kGTLRPubsub_Subscription_State_StateUnspecified Default value.
 *        This value is unused. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Required. The name of the topic from which this subscription is receiving
 *  messages. Format is `projects/{project}/topics/{topic}`. The value of this
 *  field will be `_deleted-topic_` if the topic has been deleted.
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Output only. Indicates the minimum duration for which a message is retained
 *  after it is published to the subscription's topic. If this field is set,
 *  messages published to the subscription's topic in the last
 *  `topic_message_retention_duration` are always available to subscribers. See
 *  the `message_retention_duration` field in `Topic`. This field is set only in
 *  responses from the server; it is ignored if it is set in any requests.
 */
@property(nonatomic, strong, nullable) GTLRDuration *topicMessageRetentionDuration;

@end


/**
 *  See [Creating and managing
 *  labels](https://cloud.google.com/pubsub/docs/labels).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_Subscription_Labels : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRPubsub_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRPubsub_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  A topic resource.
 */
@interface GTLRPubsub_Topic : GTLRObject

/**
 *  The resource name of the Cloud KMS CryptoKey to be used to protect access to
 *  messages published on this topic. The expected format is `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  See [Creating and managing labels]
 *  (https://cloud.google.com/pubsub/docs/labels).
 */
@property(nonatomic, strong, nullable) GTLRPubsub_Topic_Labels *labels;

/**
 *  Indicates the minimum duration to retain a message after it is published to
 *  the topic. If this field is set, messages published to the topic in the last
 *  `message_retention_duration` are always available to subscribers. For
 *  instance, it allows any attached subscription to [seek to a
 *  timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time)
 *  that is up to `message_retention_duration` in the past. If this field is not
 *  set, message retention is controlled by settings on individual
 *  subscriptions. Cannot be more than 31 days or less than 10 minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *messageRetentionDuration;

/**
 *  Policy constraining the set of Google Cloud Platform regions where messages
 *  published to the topic may be stored. If not present, then no constraints
 *  are in effect.
 */
@property(nonatomic, strong, nullable) GTLRPubsub_MessageStoragePolicy *messageStoragePolicy;

/**
 *  Required. The name of the topic. It must have the format
 *  `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
 *  and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
 *  underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs
 *  (`%`). It must be between 3 and 255 characters in length, and it must not
 *  start with `"goog"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Reserved for future use. This field is set only in responses from the
 *  server; it is ignored if it is set in any requests.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/** Settings for validating messages published against a schema. */
@property(nonatomic, strong, nullable) GTLRPubsub_SchemaSettings *schemaSettings;

@end


/**
 *  See [Creating and managing labels]
 *  (https://cloud.google.com/pubsub/docs/labels).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRPubsub_Topic_Labels : GTLRObject
@end


/**
 *  Request for the UpdateSnapshot method.
 */
@interface GTLRPubsub_UpdateSnapshotRequest : GTLRObject

/** Required. The updated snapshot object. */
@property(nonatomic, strong, nullable) GTLRPubsub_Snapshot *snapshot;

/**
 *  Required. Indicates which fields in the provided snapshot to update. Must be
 *  specified and non-empty.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request for the UpdateSubscription method.
 */
@interface GTLRPubsub_UpdateSubscriptionRequest : GTLRObject

/** Required. The updated subscription object. */
@property(nonatomic, strong, nullable) GTLRPubsub_Subscription *subscription;

/**
 *  Required. Indicates which fields in the provided subscription to update.
 *  Must be specified and non-empty.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request for the UpdateTopic method.
 */
@interface GTLRPubsub_UpdateTopicRequest : GTLRObject

/** Required. The updated topic object. */
@property(nonatomic, strong, nullable) GTLRPubsub_Topic *topic;

/**
 *  Required. Indicates which fields in the provided topic to update. Must be
 *  specified and non-empty. Note that if `update_mask` contains
 *  "message_storage_policy" but the `message_storage_policy` is not set in the
 *  `topic` provided above, then the updated value is determined by the policy
 *  configured at the project or organization level.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request for the `ValidateMessage` method.
 */
@interface GTLRPubsub_ValidateMessageRequest : GTLRObject

/**
 *  The encoding expected for messages
 *
 *  Likely values:
 *    @arg @c kGTLRPubsub_ValidateMessageRequest_Encoding_Binary Binary
 *        encoding, as defined by the schema type. For some schema types, binary
 *        encoding may not be available. (Value: "BINARY")
 *    @arg @c kGTLRPubsub_ValidateMessageRequest_Encoding_EncodingUnspecified
 *        Unspecified (Value: "ENCODING_UNSPECIFIED")
 *    @arg @c kGTLRPubsub_ValidateMessageRequest_Encoding_Json JSON encoding
 *        (Value: "JSON")
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  Message to validate against the provided `schema_spec`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Name of the schema against which to validate. Format is
 *  `projects/{project}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Ad-hoc schema against which to validate */
@property(nonatomic, strong, nullable) GTLRPubsub_Schema *schema;

@end


/**
 *  Response for the `ValidateMessage` method. Empty for now.
 */
@interface GTLRPubsub_ValidateMessageResponse : GTLRObject
@end


/**
 *  Request for the `ValidateSchema` method.
 */
@interface GTLRPubsub_ValidateSchemaRequest : GTLRObject

/** Required. The schema object to validate. */
@property(nonatomic, strong, nullable) GTLRPubsub_Schema *schema;

@end


/**
 *  Response for the `ValidateSchema` method. Empty for now.
 */
@interface GTLRPubsub_ValidateSchemaResponse : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
