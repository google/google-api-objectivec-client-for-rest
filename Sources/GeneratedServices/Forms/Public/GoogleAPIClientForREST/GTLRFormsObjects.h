// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Forms API (forms/v1)
// Description:
//   Reads and writes Google Forms and responses.
// Documentation:
//   https://developers.google.com/forms/api

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRForms_Answer;
@class GTLRForms_ChoiceQuestion;
@class GTLRForms_CloudPubsubTopic;
@class GTLRForms_CorrectAnswer;
@class GTLRForms_CorrectAnswers;
@class GTLRForms_CreateItemRequest;
@class GTLRForms_CreateItemResponse;
@class GTLRForms_DateQuestion;
@class GTLRForms_DeleteItemRequest;
@class GTLRForms_Ettings;
@class GTLRForms_ExtraMaterial;
@class GTLRForms_Feedback;
@class GTLRForms_FileUploadAnswer;
@class GTLRForms_FileUploadAnswers;
@class GTLRForms_FileUploadQuestion;
@class GTLRForms_Form;
@class GTLRForms_FormResponse;
@class GTLRForms_FormResponse_Answers;
@class GTLRForms_Grade;
@class GTLRForms_Grading;
@class GTLRForms_Grid;
@class GTLRForms_Image;
@class GTLRForms_ImageItem;
@class GTLRForms_Info;
@class GTLRForms_Item;
@class GTLRForms_Location;
@class GTLRForms_MediaProperties;
@class GTLRForms_MoveItemRequest;
@class GTLRForms_Option;
@class GTLRForms_PageBreakItem;
@class GTLRForms_Question;
@class GTLRForms_QuestionGroupItem;
@class GTLRForms_QuestionItem;
@class GTLRForms_QuizSettings;
@class GTLRForms_Request;
@class GTLRForms_Response;
@class GTLRForms_RowQuestion;
@class GTLRForms_ScaleQuestion;
@class GTLRForms_TextAnswer;
@class GTLRForms_TextAnswers;
@class GTLRForms_TextItem;
@class GTLRForms_TextLink;
@class GTLRForms_TextQuestion;
@class GTLRForms_TimeQuestion;
@class GTLRForms_UpdateFormInfoRequest;
@class GTLRForms_UpdateItemRequest;
@class GTLRForms_UpdateSettingsRequest;
@class GTLRForms_Video;
@class GTLRForms_VideoItem;
@class GTLRForms_VideoLink;
@class GTLRForms_Watch;
@class GTLRForms_WatchTarget;
@class GTLRForms_WriteControl;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRForms_ChoiceQuestion.type

/**
 *  Checkboxes: All choices are shown to the user, who can pick any number of
 *  them.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_ChoiceQuestion_Type_Checkbox;
/**
 *  Default value. Unused.
 *
 *  Value: "CHOICE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_ChoiceQuestion_Type_ChoiceTypeUnspecified;
/**
 *  Drop-down menu: The choices are only shown to the user on demand, otherwise
 *  only the current choice is shown. Only one option can be chosen.
 *
 *  Value: "DROP_DOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_ChoiceQuestion_Type_DropDown;
/**
 *  Radio buttons: All choices are shown to the user, who can only pick one of
 *  them.
 *
 *  Value: "RADIO"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_ChoiceQuestion_Type_Radio;

// ----------------------------------------------------------------------------
// GTLRForms_FileUploadQuestion.types

/**
 *  No restrictions on type.
 *
 *  Value: "ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Any;
/**
 *  An audio file.
 *
 *  Value: "AUDIO"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Audio;
/**
 *  A Google Docs document.
 *
 *  Value: "DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Document;
/**
 *  A drawing.
 *
 *  Value: "DRAWING"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Drawing;
/**
 *  Default value. Unused.
 *
 *  Value: "FILE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_FileTypeUnspecified;
/**
 *  An image.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Image;
/**
 *  A PDF.
 *
 *  Value: "PDF"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Pdf;
/**
 *  A Google Slides presentation.
 *
 *  Value: "PRESENTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Presentation;
/**
 *  A Google Sheets spreadsheet.
 *
 *  Value: "SPREADSHEET"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Spreadsheet;
/**
 *  A video.
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_FileUploadQuestion_Types_Video;

// ----------------------------------------------------------------------------
// GTLRForms_MediaProperties.alignment

/**
 *  Default value. Unused.
 *
 *  Value: "ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_MediaProperties_Alignment_AlignmentUnspecified;
/**
 *  Center.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_MediaProperties_Alignment_Center;
/**
 *  Left align.
 *
 *  Value: "LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_MediaProperties_Alignment_Left;
/**
 *  Right align.
 *
 *  Value: "RIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_MediaProperties_Alignment_Right;

// ----------------------------------------------------------------------------
// GTLRForms_Option.goToAction

/**
 *  Default value. Unused.
 *
 *  Value: "GO_TO_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Option_GoToAction_GoToActionUnspecified;
/**
 *  Go to the next section.
 *
 *  Value: "NEXT_SECTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Option_GoToAction_NextSection;
/**
 *  Go back to the beginning of the form.
 *
 *  Value: "RESTART_FORM"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Option_GoToAction_RestartForm;
/**
 *  Submit form immediately.
 *
 *  Value: "SUBMIT_FORM"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Option_GoToAction_SubmitForm;

// ----------------------------------------------------------------------------
// GTLRForms_Watch.errorType

/**
 *  Unspecified error type.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_ErrorType_ErrorTypeUnspecified;
/**
 *  The user that granted access no longer has access to the form being watched.
 *  Watches with this error will not be retried. To attempt to begin watching
 *  the form again a call can be made to watches.renew
 *
 *  Value: "NO_USER_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_ErrorType_NoUserAccess;
/**
 *  Another type of error has occurred. Whether notifications will continue
 *  depends on the watch state.
 *
 *  Value: "OTHER_ERRORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_ErrorType_OtherErrors;
/**
 *  The cloud project does not have access to the form being watched. This
 *  occurs if the user has revoked the authorization for your project to access
 *  their form(s). Watches with this error will not be retried. To attempt to
 *  begin watching the form again a call can be made to watches.renew
 *
 *  Value: "PROJECT_NOT_AUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_ErrorType_ProjectNotAuthorized;

// ----------------------------------------------------------------------------
// GTLRForms_Watch.eventType

/**
 *  Unspecified event type. This value should not be used.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_EventType_EventTypeUnspecified;
/**
 *  The responses event type. A watch with this event type will be notified when
 *  form responses are submitted.
 *
 *  Value: "RESPONSES"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_EventType_Responses;
/**
 *  The schema event type. A watch with this event type will be notified about
 *  changes to form content and settings.
 *
 *  Value: "SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_EventType_Schema;

// ----------------------------------------------------------------------------
// GTLRForms_Watch.state

/**
 *  Watch is active.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_State_Active;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_State_StateUnspecified;
/**
 *  The watch is suspended due to an error that may be resolved. The watch will
 *  continue to exist until it expires. To attempt to reactivate the watch a
 *  call can be made to watches.renew
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRForms_Watch_State_Suspended;

/**
 *  The submitted answer for a question.
 */
@interface GTLRForms_Answer : GTLRObject

/** Output only. The answers to a file upload question. */
@property(nonatomic, strong, nullable) GTLRForms_FileUploadAnswers *fileUploadAnswers;

/** Output only. The grade for the answer if the form was a quiz. */
@property(nonatomic, strong, nullable) GTLRForms_Grade *grade;

/** Output only. The question's ID. See also Question.question_id. */
@property(nonatomic, copy, nullable) NSString *questionId;

/** Output only. The specific answers as text. */
@property(nonatomic, strong, nullable) GTLRForms_TextAnswers *textAnswers;

@end


/**
 *  A batch of updates to perform on a form. All the specified updates are made
 *  or none of them are.
 */
@interface GTLRForms_BatchUpdateFormRequest : GTLRObject

/**
 *  Whether to return an updated version of the model in the response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeFormInResponse;

/** Required. The update requests of this batch. */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Request *> *requests;

/** Provides control over how write requests are executed. */
@property(nonatomic, strong, nullable) GTLRForms_WriteControl *writeControl;

@end


/**
 *  Response to a BatchUpdateFormRequest.
 */
@interface GTLRForms_BatchUpdateFormResponse : GTLRObject

/**
 *  Based on the bool request field `include_form_in_response`, a form with all
 *  applied mutations/updates is returned or not. This may be later than the
 *  revision ID created by these changes.
 */
@property(nonatomic, strong, nullable) GTLRForms_Form *form;

/**
 *  The reply of the updates. This maps 1:1 with the update requests, although
 *  replies to some requests may be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Response *> *replies;

/** The updated write control after applying the request. */
@property(nonatomic, strong, nullable) GTLRForms_WriteControl *writeControl;

@end


/**
 *  A radio/checkbox/dropdown question.
 */
@interface GTLRForms_ChoiceQuestion : GTLRObject

/** Required. List of options that a respondent must choose from. */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Option *> *options;

/**
 *  Whether the options should be displayed in random order for different
 *  instances of the quiz. This is often used to prevent cheating by respondents
 *  who might be looking at another respondent's screen, or to address bias in a
 *  survey that might be introduced by always putting the same options first or
 *  last.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffle;

/**
 *  Required. The type of choice question.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_ChoiceQuestion_Type_Checkbox Checkboxes: All choices
 *        are shown to the user, who can pick any number of them. (Value:
 *        "CHECKBOX")
 *    @arg @c kGTLRForms_ChoiceQuestion_Type_ChoiceTypeUnspecified Default
 *        value. Unused. (Value: "CHOICE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRForms_ChoiceQuestion_Type_DropDown Drop-down menu: The
 *        choices are only shown to the user on demand, otherwise only the
 *        current choice is shown. Only one option can be chosen. (Value:
 *        "DROP_DOWN")
 *    @arg @c kGTLRForms_ChoiceQuestion_Type_Radio Radio buttons: All choices
 *        are shown to the user, who can only pick one of them. (Value: "RADIO")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A Pub/Sub topic.
 */
@interface GTLRForms_CloudPubsubTopic : GTLRObject

/**
 *  Required. A fully qualified Pub/Sub topic name to publish the events to.
 *  This topic must be owned by the calling project and already exist in
 *  Pub/Sub.
 */
@property(nonatomic, copy, nullable) NSString *topicName;

@end


/**
 *  A single correct answer for a question. For multiple-valued (`CHECKBOX`)
 *  questions, several `CorrectAnswer`s may be needed to represent a single
 *  correct response option.
 */
@interface GTLRForms_CorrectAnswer : GTLRObject

/**
 *  Required. The correct answer value. See the documentation for
 *  TextAnswer.value for details on how various value types are formatted.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The answer key for a question.
 */
@interface GTLRForms_CorrectAnswers : GTLRObject

/**
 *  A list of correct answers. A quiz response can be automatically graded based
 *  on these answers. For single-valued questions, a response is marked correct
 *  if it matches any value in this list (in other words, multiple correct
 *  answers are possible). For multiple-valued (`CHECKBOX`) questions, a
 *  response is marked correct if it contains exactly the values in this list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_CorrectAnswer *> *answers;

@end


/**
 *  Create an item in a form.
 */
@interface GTLRForms_CreateItemRequest : GTLRObject

/** Required. The item to create. */
@property(nonatomic, strong, nullable) GTLRForms_Item *item;

/** Required. Where to place the new item. */
@property(nonatomic, strong, nullable) GTLRForms_Location *location;

@end


/**
 *  The result of creating an item.
 */
@interface GTLRForms_CreateItemResponse : GTLRObject

/** The ID of the created item. */
@property(nonatomic, copy, nullable) NSString *itemId;

/**
 *  The ID of the question created as part of this item, for a question group it
 *  lists IDs of all the questions created for this item.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *questionId;

@end


/**
 *  Create a new watch.
 */
@interface GTLRForms_CreateWatchRequest : GTLRObject

/**
 *  Required. The watch object. No ID should be set on this object; use
 *  `watch_id` instead.
 */
@property(nonatomic, strong, nullable) GTLRForms_Watch *watch;

/**
 *  The ID to use for the watch. If specified, the ID must not already be in
 *  use. If not specified, an ID is generated. This value should be 4-63
 *  characters, and valid characters are /a-z-/.
 */
@property(nonatomic, copy, nullable) NSString *watchId;

@end


/**
 *  A date question. Date questions default to just month + day.
 */
@interface GTLRForms_DateQuestion : GTLRObject

/**
 *  Whether to include the time as part of the question.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTime;

/**
 *  Whether to include the year as part of the question.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeYear;

@end


/**
 *  Delete an item in a form.
 */
@interface GTLRForms_DeleteItemRequest : GTLRObject

/** Required. The location of the item to delete. */
@property(nonatomic, strong, nullable) GTLRForms_Location *location;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRForms_Empty : GTLRObject
@end


/**
 *  A form's settings.
 */
@interface GTLRForms_Ettings : GTLRObject

/** Settings related to quiz forms and grading. */
@property(nonatomic, strong, nullable) GTLRForms_QuizSettings *quizSettings;

@end


/**
 *  Supplementary material to the feedback.
 */
@interface GTLRForms_ExtraMaterial : GTLRObject

/** Text feedback. */
@property(nonatomic, strong, nullable) GTLRForms_TextLink *link;

/** Video feedback. */
@property(nonatomic, strong, nullable) GTLRForms_VideoLink *video;

@end


/**
 *  Feedback for a respondent about their response to a question.
 */
@interface GTLRForms_Feedback : GTLRObject

/**
 *  Additional information provided as part of the feedback, often used to point
 *  the respondent to more reading and resources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_ExtraMaterial *> *material;

/** Required. The main text of the feedback. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Info for a single file submitted to a file upload question.
 */
@interface GTLRForms_FileUploadAnswer : GTLRObject

/** Output only. The ID of the Google Drive file. */
@property(nonatomic, copy, nullable) NSString *fileId;

/** Output only. The file name, as stored in Google Drive on upload. */
@property(nonatomic, copy, nullable) NSString *fileName;

/**
 *  Output only. The MIME type of the file, as stored in Google Drive on upload.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  All submitted files for a FileUpload question.
 */
@interface GTLRForms_FileUploadAnswers : GTLRObject

/** Output only. All submitted files for a FileUpload question. */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_FileUploadAnswer *> *answers;

@end


/**
 *  A file upload question. The API currently does not support creating file
 *  upload questions.
 */
@interface GTLRForms_FileUploadQuestion : GTLRObject

/** Required. The ID of the Drive folder where uploaded files are stored. */
@property(nonatomic, copy, nullable) NSString *folderId;

/**
 *  Maximum number of files that can be uploaded for this question in a single
 *  response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFiles;

/**
 *  Maximum number of bytes allowed for any single file uploaded to this
 *  question.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFileSize;

/** File types accepted by this question. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  A Google Forms document. A form is created in Drive, and deleting a form or
 *  changing its access protections is done via the [Drive
 *  API](https://developers.google.com/drive/api/v3/about-sdk).
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRForms_Form : GTLRCollectionObject

/** Output only. The form ID. */
@property(nonatomic, copy, nullable) NSString *formId;

/** Required. The title and description of the form. */
@property(nonatomic, strong, nullable) GTLRForms_Info *info;

/**
 *  Required. A list of the form's items, which can include section headers,
 *  questions, embedded media, etc.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Item *> *items;

/**
 *  Output only. The ID of the linked Google Sheet which is accumulating
 *  responses from this Form (if such a Sheet exists).
 */
@property(nonatomic, copy, nullable) NSString *linkedSheetId;

/**
 *  Output only. The form URI to share with responders. This opens a page that
 *  allows the user to submit responses but not edit the questions.
 */
@property(nonatomic, copy, nullable) NSString *responderUri;

/**
 *  Output only. The revision ID of the form. Used in the WriteControl in update
 *  requests to identify the revision on which the changes are based. The format
 *  of the revision ID may change over time, so it should be treated opaquely. A
 *  returned revision ID is only guaranteed to be valid for 24 hours after it
 *  has been returned and cannot be shared across users. If the revision ID is
 *  unchanged between calls, then the form has not changed. Conversely, a
 *  changed ID (for the same form and user) usually means the form has been
 *  updated; however, a changed ID can also be due to internal factors such as
 *  ID format changes.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  The form's settings. This must be updated with UpdateSettingsRequest; it is
 *  ignored during `forms.create` and UpdateFormInfoRequest.
 */
@property(nonatomic, strong, nullable) GTLRForms_Ettings *settings;

@end


/**
 *  A form response.
 */
@interface GTLRForms_FormResponse : GTLRObject

/** Output only. The actual answers to the questions, keyed by question_id. */
@property(nonatomic, strong, nullable) GTLRForms_FormResponse_Answers *answers;

/** Output only. Timestamp for the first time the response was submitted. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The form ID. */
@property(nonatomic, copy, nullable) NSString *formId;

/**
 *  Output only. Timestamp for the most recent time the response was submitted.
 *  Does not track changes to grades.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSubmittedTime;

/** Output only. The email address (if collected) for the respondent. */
@property(nonatomic, copy, nullable) NSString *respondentEmail;

/** Output only. The response ID. */
@property(nonatomic, copy, nullable) NSString *responseId;

/**
 *  Output only. The total number of points the respondent received for their
 *  submission Only set if the form was a quiz and the response was graded. This
 *  includes points automatically awarded via autograding adjusted by any manual
 *  corrections entered by the form owner.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalScore;

@end


/**
 *  Output only. The actual answers to the questions, keyed by question_id.
 *
 *  @note This class is documented as having more properties of
 *        GTLRForms_Answer. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRForms_FormResponse_Answers : GTLRObject
@end


/**
 *  Grade information associated with a respondent's answer to a question.
 */
@interface GTLRForms_Grade : GTLRObject

/**
 *  Output only. Whether the question was answered correctly or not. A
 *  zero-point score is not enough to infer incorrectness, since a correctly
 *  answered question could be worth zero points.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *correct;

/** Output only. Additional feedback given for an answer. */
@property(nonatomic, strong, nullable) GTLRForms_Feedback *feedback;

/**
 *  Output only. The numeric score awarded for the answer.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  Grading for a single question
 */
@interface GTLRForms_Grading : GTLRObject

/**
 *  Required. The answer key for the question. Responses are automatically
 *  graded based on this field.
 */
@property(nonatomic, strong, nullable) GTLRForms_CorrectAnswers *correctAnswers;

/**
 *  The feedback displayed for all answers. This is commonly used for short
 *  answer questions when a quiz owner wants to quickly give respondents some
 *  sense of whether they answered the question correctly before they've had a
 *  chance to officially grade the response. General feedback cannot be set for
 *  automatically graded multiple choice questions.
 */
@property(nonatomic, strong, nullable) GTLRForms_Feedback *generalFeedback;

/**
 *  Required. The maximum number of points a respondent can automatically get
 *  for a correct answer. This must not be negative.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pointValue;

/**
 *  The feedback displayed for correct responses. This feedback can only be set
 *  for multiple choice questions that have correct answers provided.
 */
@property(nonatomic, strong, nullable) GTLRForms_Feedback *whenRight;

/**
 *  The feedback displayed for incorrect responses. This feedback can only be
 *  set for multiple choice questions that have correct answers provided.
 */
@property(nonatomic, strong, nullable) GTLRForms_Feedback *whenWrong;

@end


/**
 *  A grid of choices (radio or check boxes) with each row constituting a
 *  separate question. Each row has the same choices, which are shown as the
 *  columns.
 */
@interface GTLRForms_Grid : GTLRObject

/**
 *  Required. The choices shared by each question in the grid. In other words,
 *  the values of the columns. Only `CHECK_BOX` and `RADIO` choices are allowed.
 */
@property(nonatomic, strong, nullable) GTLRForms_ChoiceQuestion *columns;

/**
 *  If `true`, the questions are randomly ordered. In other words, the rows
 *  appear in a different order for every respondent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleQuestions;

@end


/**
 *  Data representing an image.
 */
@interface GTLRForms_Image : GTLRObject

/**
 *  A description of the image that is shown on hover and read by screenreaders.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  Output only. A URI from which you can download the image; this is valid only
 *  for a limited time.
 */
@property(nonatomic, copy, nullable) NSString *contentUri;

/** Properties of an image. */
@property(nonatomic, strong, nullable) GTLRForms_MediaProperties *properties;

/**
 *  Input only. The source URI is the URI used to insert the image. The source
 *  URI can be empty when fetched.
 */
@property(nonatomic, copy, nullable) NSString *sourceUri;

@end


/**
 *  An item containing an image.
 */
@interface GTLRForms_ImageItem : GTLRObject

/** Required. The image displayed in the item. */
@property(nonatomic, strong, nullable) GTLRForms_Image *image;

@end


/**
 *  The general information for a form.
 */
@interface GTLRForms_Info : GTLRObject

/**
 *  The description of the form.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The title of the document which is visible in Drive. If
 *  `Info.title` is empty, `document_title` may appear in its place in the
 *  Google Forms UI and be visible to responders. `document_title` can be set on
 *  create, but cannot be modified by a batchUpdate request. Please use the
 *  [Google Drive
 *  API](https://developers.google.com/drive/api/v3/reference/files/update) if
 *  you need to programmatically update `document_title`.
 */
@property(nonatomic, copy, nullable) NSString *documentTitle;

/** Required. The title of the form which is visible to responders. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A single item of the form. `kind` defines which kind of item it is.
 */
@interface GTLRForms_Item : GTLRObject

/**
 *  The description of the item.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Displays an image on the page. */
@property(nonatomic, strong, nullable) GTLRForms_ImageItem *imageItem;

/**
 *  The item ID. On creation, it can be provided but the ID must not be already
 *  used in the form. If not provided, a new ID is assigned.
 */
@property(nonatomic, copy, nullable) NSString *itemId;

/** Starts a new page with a title. */
@property(nonatomic, strong, nullable) GTLRForms_PageBreakItem *pageBreakItem;

/** Poses one or more questions to the user with a single major prompt. */
@property(nonatomic, strong, nullable) GTLRForms_QuestionGroupItem *questionGroupItem;

/** Poses a question to the user. */
@property(nonatomic, strong, nullable) GTLRForms_QuestionItem *questionItem;

/** Displays a title and description on the page. */
@property(nonatomic, strong, nullable) GTLRForms_TextItem *textItem;

/** The title of the item. */
@property(nonatomic, copy, nullable) NSString *title;

/** Displays a video on the page. */
@property(nonatomic, strong, nullable) GTLRForms_VideoItem *videoItem;

@end


/**
 *  Response to a ListFormResponsesRequest.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "responses" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRForms_ListFormResponsesResponse : GTLRCollectionObject

/**
 *  If set, there are more responses. To get the next page of responses, provide
 *  this as `page_token` in a future request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The returned form responses. Note: The `formId` field is not returned in the
 *  `FormResponse` object for list requests.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_FormResponse *> *responses;

@end


/**
 *  The response of a ListWatchesRequest.
 */
@interface GTLRForms_ListWatchesResponse : GTLRObject

/** The returned watches. */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Watch *> *watches;

@end


/**
 *  A specific location in a form.
 */
@interface GTLRForms_Location : GTLRObject

/**
 *  The index of an item in the form. This must be in the range [0..*N*), where
 *  *N* is the number of items in the form.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

@end


/**
 *  Properties of the media.
 */
@interface GTLRForms_MediaProperties : GTLRObject

/**
 *  Position of the media.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_MediaProperties_Alignment_AlignmentUnspecified Default
 *        value. Unused. (Value: "ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRForms_MediaProperties_Alignment_Center Center. (Value:
 *        "CENTER")
 *    @arg @c kGTLRForms_MediaProperties_Alignment_Left Left align. (Value:
 *        "LEFT")
 *    @arg @c kGTLRForms_MediaProperties_Alignment_Right Right align. (Value:
 *        "RIGHT")
 */
@property(nonatomic, copy, nullable) NSString *alignment;

/**
 *  The width of the media in pixels. When the media is displayed, it is scaled
 *  to the smaller of this value or the width of the displayed form. The
 *  original aspect ratio of the media is preserved. If a width is not specified
 *  when the media is added to the form, it is set to the width of the media
 *  source. Width must be between 0 and 740, inclusive. Setting width to 0 or
 *  unspecified is only permitted when updating the media source.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Move an item in a form.
 */
@interface GTLRForms_MoveItemRequest : GTLRObject

/** Required. The new location for the item. */
@property(nonatomic, strong, nullable) GTLRForms_Location *newLocation NS_RETURNS_NOT_RETAINED;

/** Required. The location of the item to move. */
@property(nonatomic, strong, nullable) GTLRForms_Location *originalLocation;

@end


/**
 *  An option for a Choice question.
 */
@interface GTLRForms_Option : GTLRObject

/**
 *  Section navigation type.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_Option_GoToAction_GoToActionUnspecified Default value.
 *        Unused. (Value: "GO_TO_ACTION_UNSPECIFIED")
 *    @arg @c kGTLRForms_Option_GoToAction_NextSection Go to the next section.
 *        (Value: "NEXT_SECTION")
 *    @arg @c kGTLRForms_Option_GoToAction_RestartForm Go back to the beginning
 *        of the form. (Value: "RESTART_FORM")
 *    @arg @c kGTLRForms_Option_GoToAction_SubmitForm Submit form immediately.
 *        (Value: "SUBMIT_FORM")
 */
@property(nonatomic, copy, nullable) NSString *goToAction;

/** Item ID of section header to go to. */
@property(nonatomic, copy, nullable) NSString *goToSectionId;

/** Display image as an option. */
@property(nonatomic, strong, nullable) GTLRForms_Image *image;

/**
 *  Whether the option is "other". Currently only applies to `RADIO` and
 *  `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isOther;

/** Required. The choice as presented to the user. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A page break. The title and description of this item are shown at the top of
 *  the new page.
 */
@interface GTLRForms_PageBreakItem : GTLRObject
@end


/**
 *  Any question. The specific type of question is known by its `kind`.
 */
@interface GTLRForms_Question : GTLRObject

/** A respondent can choose from a pre-defined set of options. */
@property(nonatomic, strong, nullable) GTLRForms_ChoiceQuestion *choiceQuestion;

/** A respondent can enter a date. */
@property(nonatomic, strong, nullable) GTLRForms_DateQuestion *dateQuestion;

/** A respondent can upload one or more files. */
@property(nonatomic, strong, nullable) GTLRForms_FileUploadQuestion *fileUploadQuestion;

/** Grading setup for the question. */
@property(nonatomic, strong, nullable) GTLRForms_Grading *grading;

/**
 *  Read only. The question ID. On creation, it can be provided but the ID must
 *  not be already used in the form. If not provided, a new ID is assigned.
 */
@property(nonatomic, copy, nullable) NSString *questionId;

/**
 *  Whether the question must be answered in order for a respondent to submit
 *  their response.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *required;

/** A row of a QuestionGroupItem. */
@property(nonatomic, strong, nullable) GTLRForms_RowQuestion *rowQuestion;

/** A respondent can choose a number from a range. */
@property(nonatomic, strong, nullable) GTLRForms_ScaleQuestion *scaleQuestion;

/** A respondent can enter a free text response. */
@property(nonatomic, strong, nullable) GTLRForms_TextQuestion *textQuestion;

/** A respondent can enter a time. */
@property(nonatomic, strong, nullable) GTLRForms_TimeQuestion *timeQuestion;

@end


/**
 *  Defines a question that comprises multiple questions grouped together.
 */
@interface GTLRForms_QuestionGroupItem : GTLRObject

/**
 *  The question group is a grid with rows of multiple choice questions that
 *  share the same options. When `grid` is set, all questions in the group must
 *  be of kind `row`.
 */
@property(nonatomic, strong, nullable) GTLRForms_Grid *grid;

/**
 *  The image displayed within the question group above the specific questions.
 */
@property(nonatomic, strong, nullable) GTLRForms_Image *image;

/**
 *  Required. A list of questions that belong in this question group. A question
 *  must only belong to one group. The `kind` of the group may affect what types
 *  of questions are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_Question *> *questions;

@end


/**
 *  A form item containing a single question.
 */
@interface GTLRForms_QuestionItem : GTLRObject

/** The image displayed within the question. */
@property(nonatomic, strong, nullable) GTLRForms_Image *image;

/** Required. The displayed question. */
@property(nonatomic, strong, nullable) GTLRForms_Question *question;

@end


/**
 *  Settings related to quiz forms and grading. These must be updated with the
 *  UpdateSettingsRequest.
 */
@interface GTLRForms_QuizSettings : GTLRObject

/**
 *  Whether this form is a quiz or not. When true, responses are graded based on
 *  question Grading. Upon setting to false, all question Grading is deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isQuiz;

@end


/**
 *  Renew an existing Watch for seven days.
 */
@interface GTLRForms_RenewWatchRequest : GTLRObject
@end


/**
 *  The kinds of update requests that can be made.
 */
@interface GTLRForms_Request : GTLRObject

/** Create a new item. */
@property(nonatomic, strong, nullable) GTLRForms_CreateItemRequest *createItem;

/** Delete an item. */
@property(nonatomic, strong, nullable) GTLRForms_DeleteItemRequest *deleteItem;

/** Move an item to a specified location. */
@property(nonatomic, strong, nullable) GTLRForms_MoveItemRequest *moveItem;

/** Update Form's Info. */
@property(nonatomic, strong, nullable) GTLRForms_UpdateFormInfoRequest *updateFormInfo;

/** Update an item. */
@property(nonatomic, strong, nullable) GTLRForms_UpdateItemRequest *updateItem;

/** Updates the Form's settings. */
@property(nonatomic, strong, nullable) GTLRForms_UpdateSettingsRequest *updateSettings;

@end


/**
 *  A single response from an update.
 */
@interface GTLRForms_Response : GTLRObject

/** The result of creating an item. */
@property(nonatomic, strong, nullable) GTLRForms_CreateItemResponse *createItem;

@end


/**
 *  Configuration for a question that is part of a question group.
 */
@interface GTLRForms_RowQuestion : GTLRObject

/** Required. The title for the single row in the QuestionGroupItem. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A scale question. The user has a range of numeric values to choose from.
 */
@interface GTLRForms_ScaleQuestion : GTLRObject

/**
 *  Required. The highest possible value for the scale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *high;

/** The label to display describing the highest point on the scale. */
@property(nonatomic, copy, nullable) NSString *highLabel;

/**
 *  Required. The lowest possible value for the scale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *low;

/** The label to display describing the lowest point on the scale. */
@property(nonatomic, copy, nullable) NSString *lowLabel;

@end


/**
 *  An answer to a question represented as text.
 */
@interface GTLRForms_TextAnswer : GTLRObject

/**
 *  Output only. The answer value. Formatting used for different kinds of
 *  question: * ChoiceQuestion * `RADIO` or `DROP_DOWN`: A single string
 *  corresponding to the option that was selected. * `CHECKBOX`: Multiple
 *  strings corresponding to each option that was selected. * TextQuestion: The
 *  text that the user entered. * ScaleQuestion: A string containing the number
 *  that was selected. * DateQuestion * Without time or year: MM-DD e.g. "05-19"
 *  * With year: YYYY-MM-DD e.g. "1986-05-19" * With time: MM-DD HH:MM e.g.
 *  "05-19 14:51" * With year and time: YYYY-MM-DD HH:MM e.g. "1986-05-19 14:51"
 *  * TimeQuestion: String with time or duration in HH:MM format e.g. "14:51" *
 *  RowQuestion within QuestionGroupItem: The answer for each row of a
 *  QuestionGroupItem is represented as a separate Answer. Each will contain one
 *  string for `RADIO`-type choices or multiple strings for `CHECKBOX` choices.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A question's answers as text.
 */
@interface GTLRForms_TextAnswers : GTLRObject

/**
 *  Output only. Answers to a question. For multiple-value ChoiceQuestions, each
 *  answer is a separate value.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRForms_TextAnswer *> *answers;

@end


/**
 *  A text item.
 */
@interface GTLRForms_TextItem : GTLRObject
@end


/**
 *  Link for text.
 */
@interface GTLRForms_TextLink : GTLRObject

/** Required. Display text for the URI. */
@property(nonatomic, copy, nullable) NSString *displayText;

/** Required. The URI. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  A text-based question.
 */
@interface GTLRForms_TextQuestion : GTLRObject

/**
 *  Whether the question is a paragraph question or not. If not, the question is
 *  a short text question.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paragraph;

@end


/**
 *  A time question.
 */
@interface GTLRForms_TimeQuestion : GTLRObject

/**
 *  `true` if the question is about an elapsed time. Otherwise it is about a
 *  time of day.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *duration;

@end


/**
 *  Update Form's Info.
 */
@interface GTLRForms_UpdateFormInfoRequest : GTLRObject

/** The info to update. */
@property(nonatomic, strong, nullable) GTLRForms_Info *info;

/**
 *  Required. Only values named in this mask are changed. At least one field
 *  must be specified. The root `info` is implied and should not be specified. A
 *  single `"*"` can be used as short-hand for updating every field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Update an item in a form.
 */
@interface GTLRForms_UpdateItemRequest : GTLRObject

/**
 *  Required. New values for the item. Note that item and question IDs are used
 *  if they are provided (and are in the field mask). If an ID is blank (and in
 *  the field mask) a new ID is generated. This means you can modify an item by
 *  getting the form via forms.get, modifying your local copy of that item to be
 *  how you want it, and using UpdateItemRequest to write it back, with the IDs
 *  being the same (or not in the field mask).
 */
@property(nonatomic, strong, nullable) GTLRForms_Item *item;

/** Required. The location identifying the item to update. */
@property(nonatomic, strong, nullable) GTLRForms_Location *location;

/**
 *  Required. Only values named in this mask are changed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Update Form's FormSettings.
 */
@interface GTLRForms_UpdateSettingsRequest : GTLRObject

/** Required. The settings to update with. */
@property(nonatomic, strong, nullable) GTLRForms_Ettings *settings;

/**
 *  Required. Only values named in this mask are changed. At least one field
 *  must be specified. The root `settings` is implied and should not be
 *  specified. A single `"*"` can be used as short-hand for updating every
 *  field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Data representing a video.
 */
@interface GTLRForms_Video : GTLRObject

/** Properties of a video. */
@property(nonatomic, strong, nullable) GTLRForms_MediaProperties *properties;

/** Required. A YouTube URI. */
@property(nonatomic, copy, nullable) NSString *youtubeUri;

@end


/**
 *  An item containing a video.
 */
@interface GTLRForms_VideoItem : GTLRObject

/** The text displayed below the video. */
@property(nonatomic, copy, nullable) NSString *caption;

/** Required. The video displayed in the item. */
@property(nonatomic, strong, nullable) GTLRForms_Video *video;

@end


/**
 *  Link to a video.
 */
@interface GTLRForms_VideoLink : GTLRObject

/** Required. The display text for the link. */
@property(nonatomic, copy, nullable) NSString *displayText;

/** The URI of a YouTube video. */
@property(nonatomic, copy, nullable) NSString *youtubeUri;

@end


/**
 *  A watch for events for a form. When the designated event happens, a
 *  notification will be published to the specified target. The notification's
 *  attributes will include a `formId` key that has the ID of the watched form
 *  and an `eventType` key that has the string of the type. Messages are sent
 *  with at-least-once delivery and are only dropped in extraordinary
 *  circumstances. Typically all notifications should be reliably delivered
 *  within a few seconds; however, in some situations notifications may be
 *  delayed. A watch expires seven days after it is created unless it is renewed
 *  with watches.renew
 */
@interface GTLRForms_Watch : GTLRObject

/** Output only. Timestamp of when this was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The most recent error type for an attempted delivery. To begin
 *  watching the form again a call can be made to watches.renew which also
 *  clears this error information.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_Watch_ErrorType_ErrorTypeUnspecified Unspecified error
 *        type. (Value: "ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRForms_Watch_ErrorType_NoUserAccess The user that granted
 *        access no longer has access to the form being watched. Watches with
 *        this error will not be retried. To attempt to begin watching the form
 *        again a call can be made to watches.renew (Value: "NO_USER_ACCESS")
 *    @arg @c kGTLRForms_Watch_ErrorType_OtherErrors Another type of error has
 *        occurred. Whether notifications will continue depends on the watch
 *        state. (Value: "OTHER_ERRORS")
 *    @arg @c kGTLRForms_Watch_ErrorType_ProjectNotAuthorized The cloud project
 *        does not have access to the form being watched. This occurs if the
 *        user has revoked the authorization for your project to access their
 *        form(s). Watches with this error will not be retried. To attempt to
 *        begin watching the form again a call can be made to watches.renew
 *        (Value: "PROJECT_NOT_AUTHORIZED")
 */
@property(nonatomic, copy, nullable) NSString *errorType;

/**
 *  Required. Which event type to watch for.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_Watch_EventType_EventTypeUnspecified Unspecified event
 *        type. This value should not be used. (Value: "EVENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRForms_Watch_EventType_Responses The responses event type. A
 *        watch with this event type will be notified when form responses are
 *        submitted. (Value: "RESPONSES")
 *    @arg @c kGTLRForms_Watch_EventType_Schema The schema event type. A watch
 *        with this event type will be notified about changes to form content
 *        and settings. (Value: "SCHEMA")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Output only. Timestamp for when this will expire. Each watches.renew call
 *  resets this to seven days in the future.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. The current state of the watch. Additional details about
 *  suspended watches can be found by checking the `error_type`.
 *
 *  Likely values:
 *    @arg @c kGTLRForms_Watch_State_Active Watch is active. (Value: "ACTIVE")
 *    @arg @c kGTLRForms_Watch_State_StateUnspecified Unspecified state. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRForms_Watch_State_Suspended The watch is suspended due to an
 *        error that may be resolved. The watch will continue to exist until it
 *        expires. To attempt to reactivate the watch a call can be made to
 *        watches.renew (Value: "SUSPENDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Required. Where to send the notification. */
@property(nonatomic, strong, nullable) GTLRForms_WatchTarget *target;

@end


/**
 *  The target for notification delivery.
 */
@interface GTLRForms_WatchTarget : GTLRObject

/**
 *  A Pub/Sub topic. To receive notifications, the topic must grant publish
 *  privileges to the Forms service account
 *  `serviceAccount:forms-notifications\@system.gserviceaccount.com`. Only the
 *  project that owns a topic may create a watch with it. Pub/Sub delivery
 *  guarantees should be considered.
 */
@property(nonatomic, strong, nullable) GTLRForms_CloudPubsubTopic *topic;

@end


/**
 *  Provides control over how write requests are executed.
 */
@interface GTLRForms_WriteControl : GTLRObject

/**
 *  The revision ID of the form that the write request is applied to. If this is
 *  not the latest revision of the form, the request is not processed and
 *  returns a 400 bad request error.
 */
@property(nonatomic, copy, nullable) NSString *requiredRevisionId;

/**
 *  The target revision ID of the form that the write request is applied to. If
 *  changes have occurred after this revision, the changes in this update
 *  request are transformed against those changes. This results in a new
 *  revision of the form that incorporates both the changes in the request and
 *  the intervening changes, with the server resolving conflicting changes. The
 *  target revision ID may only be used to write to recent versions of a form.
 *  If the target revision is too far behind the latest revision, the request is
 *  not processed and returns a 400 (Bad Request Error). The request may be
 *  retried after reading the latest version of the form. In most cases a target
 *  revision ID remains valid for several minutes after it is read, but for
 *  frequently-edited forms this window may be shorter.
 */
@property(nonatomic, copy, nullable) NSString *targetRevisionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
