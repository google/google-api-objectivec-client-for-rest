// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   AdSense Host API (adsensehost/v4.1)
// Description:
//   Generates performance reports, generates ad codes, and provides publisher
//   management capabilities for AdSense Hosts.
// Documentation:
//   https://developers.google.com/adsense/host/

#import <GoogleAPIClientForREST/GTLRAdSenseHostQuery.h>

// ----------------------------------------------------------------------------
// Constants

// productCode
NSString * const kGTLRAdSenseHostProductCodeAfc  = @"AFC";
NSString * const kGTLRAdSenseHostProductCodeAfg  = @"AFG";
NSString * const kGTLRAdSenseHostProductCodeAfmc = @"AFMC";
NSString * const kGTLRAdSenseHostProductCodeAfs  = @"AFS";
NSString * const kGTLRAdSenseHostProductCodeAfv  = @"AFV";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAdSenseHostQuery

@dynamic fields;

@end

@implementation GTLRAdSenseHostQuery_AccountsAdclientsGet

@dynamic accountId, adClientId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId {
  NSArray *pathParams = @[
    @"accountId", @"adClientId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}";
  GTLRAdSenseHostQuery_AccountsAdclientsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdClient class];
  query.loggingName = @"adsensehost.accounts.adclients.get";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdclientsList

@dynamic accountId, maxResults, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients";
  GTLRAdSenseHostQuery_AccountsAdclientsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdClients class];
  query.loggingName = @"adsensehost.accounts.adclients.list";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsDelete

@dynamic accountId, adClientId, adUnitId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId {
  NSArray *pathParams = @[
    @"accountId", @"adClientId", @"adUnitId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}";
  GTLRAdSenseHostQuery_AccountsAdunitsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.adUnitId = adUnitId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnit class];
  query.loggingName = @"adsensehost.accounts.adunits.delete";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsGet

@dynamic accountId, adClientId, adUnitId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId {
  NSArray *pathParams = @[
    @"accountId", @"adClientId", @"adUnitId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}";
  GTLRAdSenseHostQuery_AccountsAdunitsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.adUnitId = adUnitId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnit class];
  query.loggingName = @"adsensehost.accounts.adunits.get";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsGetAdCode

@dynamic accountId, adClientId, adUnitId, hostCustomChannelId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"hostCustomChannelId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId
                          adUnitId:(NSString *)adUnitId {
  NSArray *pathParams = @[
    @"accountId", @"adClientId", @"adUnitId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode";
  GTLRAdSenseHostQuery_AccountsAdunitsGetAdCode *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.adUnitId = adUnitId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdCode class];
  query.loggingName = @"adsensehost.accounts.adunits.getAdCode";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsInsert

@dynamic accountId, adClientId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_AdUnit *)object
                      accountId:(NSString *)accountId
                     adClientId:(NSString *)adClientId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"adClientId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits";
  GTLRAdSenseHostQuery_AccountsAdunitsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnit class];
  query.loggingName = @"adsensehost.accounts.adunits.insert";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsList

@dynamic accountId, adClientId, includeInactive, maxResults, pageToken;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                        adClientId:(NSString *)adClientId {
  NSArray *pathParams = @[
    @"accountId", @"adClientId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits";
  GTLRAdSenseHostQuery_AccountsAdunitsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnits class];
  query.loggingName = @"adsensehost.accounts.adunits.list";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsPatch

@dynamic accountId, adClientId, adUnitId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_AdUnit *)object
                      accountId:(NSString *)accountId
                     adClientId:(NSString *)adClientId
                       adUnitId:(NSString *)adUnitId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"adClientId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits";
  GTLRAdSenseHostQuery_AccountsAdunitsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.adUnitId = adUnitId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnit class];
  query.loggingName = @"adsensehost.accounts.adunits.patch";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsAdunitsUpdate

@dynamic accountId, adClientId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_AdUnit *)object
                      accountId:(NSString *)accountId
                     adClientId:(NSString *)adClientId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"adClientId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/adclients/{adClientId}/adunits";
  GTLRAdSenseHostQuery_AccountsAdunitsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdUnit class];
  query.loggingName = @"adsensehost.accounts.adunits.update";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsGet

@dynamic accountId;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}";
  GTLRAdSenseHostQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAdSenseHost_Account class];
  query.loggingName = @"adsensehost.accounts.get";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsList

@dynamic filterAdClientId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"filterAdClientId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithFilterAdClientId:(NSArray<NSString *> *)filterAdClientId {
  NSString *pathURITemplate = @"accounts";
  GTLRAdSenseHostQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.filterAdClientId = filterAdClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_Accounts class];
  query.loggingName = @"adsensehost.accounts.list";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AccountsReportsGenerate

@dynamic accountId, dimension, endDate, filter, locale, maxResults, metric,
         sort, startDate, startIndex;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dimension" : [NSString class],
    @"filter" : [NSString class],
    @"metric" : [NSString class],
    @"sort" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                         startDate:(NSString *)startDate
                           endDate:(NSString *)endDate {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/reports";
  GTLRAdSenseHostQuery_AccountsReportsGenerate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.startDate = startDate;
  query.endDate = endDate;
  query.expectedObjectClass = [GTLRAdSenseHost_Report class];
  query.loggingName = @"adsensehost.accounts.reports.generate";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AdclientsGet

@dynamic adClientId;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId {
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}";
  GTLRAdSenseHostQuery_AdclientsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_AdClient class];
  query.loggingName = @"adsensehost.adclients.get";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AdclientsList

@dynamic maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"adclients";
  GTLRAdSenseHostQuery_AdclientsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAdSenseHost_AdClients class];
  query.loggingName = @"adsensehost.adclients.list";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AssociationsessionsStart

@dynamic callbackUrl, productCode, userLocale, websiteLocale, websiteUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"productCode" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProductCode:(NSArray<NSString *> *)productCode
                          websiteUrl:(NSString *)websiteUrl {
  NSString *pathURITemplate = @"associationsessions/start";
  GTLRAdSenseHostQuery_AssociationsessionsStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.productCode = productCode;
  query.websiteUrl = websiteUrl;
  query.expectedObjectClass = [GTLRAdSenseHost_AssociationSession class];
  query.loggingName = @"adsensehost.associationsessions.start";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_AssociationsessionsVerify

@dynamic token;

+ (instancetype)queryWithToken:(NSString *)token {
  NSString *pathURITemplate = @"associationsessions/verify";
  GTLRAdSenseHostQuery_AssociationsessionsVerify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.token = token;
  query.expectedObjectClass = [GTLRAdSenseHost_AssociationSession class];
  query.loggingName = @"adsensehost.associationsessions.verify";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsDelete

@dynamic adClientId, customChannelId;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                    customChannelId:(NSString *)customChannelId {
  NSArray *pathParams = @[
    @"adClientId", @"customChannelId"
  ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels/{customChannelId}";
  GTLRAdSenseHostQuery_CustomchannelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.customChannelId = customChannelId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannel class];
  query.loggingName = @"adsensehost.customchannels.delete";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsGet

@dynamic adClientId, customChannelId;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                    customChannelId:(NSString *)customChannelId {
  NSArray *pathParams = @[
    @"adClientId", @"customChannelId"
  ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels/{customChannelId}";
  GTLRAdSenseHostQuery_CustomchannelsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.customChannelId = customChannelId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannel class];
  query.loggingName = @"adsensehost.customchannels.get";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsInsert

@dynamic adClientId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_CustomChannel *)object
                     adClientId:(NSString *)adClientId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels";
  GTLRAdSenseHostQuery_CustomchannelsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannel class];
  query.loggingName = @"adsensehost.customchannels.insert";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsList

@dynamic adClientId, maxResults, pageToken;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId {
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels";
  GTLRAdSenseHostQuery_CustomchannelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannels class];
  query.loggingName = @"adsensehost.customchannels.list";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsPatch

@dynamic adClientId, customChannelId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_CustomChannel *)object
                     adClientId:(NSString *)adClientId
                customChannelId:(NSString *)customChannelId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels";
  GTLRAdSenseHostQuery_CustomchannelsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.adClientId = adClientId;
  query.customChannelId = customChannelId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannel class];
  query.loggingName = @"adsensehost.customchannels.patch";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_CustomchannelsUpdate

@dynamic adClientId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_CustomChannel *)object
                     adClientId:(NSString *)adClientId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/customchannels";
  GTLRAdSenseHostQuery_CustomchannelsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_CustomChannel class];
  query.loggingName = @"adsensehost.customchannels.update";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_ReportsGenerate

@dynamic dimension, endDate, filter, locale, maxResults, metric, sort,
         startDate, startIndex;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dimension" : [NSString class],
    @"filter" : [NSString class],
    @"metric" : [NSString class],
    @"sort" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithStartDate:(NSString *)startDate
                           endDate:(NSString *)endDate {
  NSString *pathURITemplate = @"reports";
  GTLRAdSenseHostQuery_ReportsGenerate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.startDate = startDate;
  query.endDate = endDate;
  query.expectedObjectClass = [GTLRAdSenseHost_Report class];
  query.loggingName = @"adsensehost.reports.generate";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_UrlchannelsDelete

@dynamic adClientId, urlChannelId;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId
                       urlChannelId:(NSString *)urlChannelId {
  NSArray *pathParams = @[
    @"adClientId", @"urlChannelId"
  ];
  NSString *pathURITemplate = @"adclients/{adClientId}/urlchannels/{urlChannelId}";
  GTLRAdSenseHostQuery_UrlchannelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.urlChannelId = urlChannelId;
  query.expectedObjectClass = [GTLRAdSenseHost_UrlChannel class];
  query.loggingName = @"adsensehost.urlchannels.delete";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_UrlchannelsInsert

@dynamic adClientId;

+ (instancetype)queryWithObject:(GTLRAdSenseHost_UrlChannel *)object
                     adClientId:(NSString *)adClientId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/urlchannels";
  GTLRAdSenseHostQuery_UrlchannelsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_UrlChannel class];
  query.loggingName = @"adsensehost.urlchannels.insert";
  return query;
}

@end

@implementation GTLRAdSenseHostQuery_UrlchannelsList

@dynamic adClientId, maxResults, pageToken;

+ (instancetype)queryWithAdClientId:(NSString *)adClientId {
  NSArray *pathParams = @[ @"adClientId" ];
  NSString *pathURITemplate = @"adclients/{adClientId}/urlchannels";
  GTLRAdSenseHostQuery_UrlchannelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.adClientId = adClientId;
  query.expectedObjectClass = [GTLRAdSenseHost_UrlChannels class];
  query.loggingName = @"adsensehost.urlchannels.list";
  return query;
}

@end
