// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Places API (New) (places/v1)
// Documentation:
//   https://mapsplatform.google.com/maps-products/#places-section

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRMapsPlaces_GoogleGeoTypeViewport;
@class GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Circle;
@class GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptions;
@class GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation;
@class GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptions;
@class GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Photo;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Place;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAccessibilityOptions;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceParkingOptions;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlacePaymentOptions;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceSubDestination;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Review;
@class GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction;
@class GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias;
@class GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction;
@class GTLRMapsPlaces_GoogleTypeDate;
@class GTLRMapsPlaces_GoogleTypeLatLng;
@class GTLRMapsPlaces_GoogleTypeLocalizedText;
@class GTLRMapsPlaces_GoogleTypeMoney;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.type

/**
 *  Combined Charging System (AC and DC). Based on SAE. Type-1 J-1772 connector
 *
 *  Value: "EV_CONNECTOR_TYPE_CCS_COMBO_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeCcsCombo1;
/**
 *  Combined Charging System (AC and DC). Based on Type-2 Mennekes connector
 *
 *  Value: "EV_CONNECTOR_TYPE_CCS_COMBO_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeCcsCombo2;
/**
 *  CHAdeMO type connector.
 *
 *  Value: "EV_CONNECTOR_TYPE_CHADEMO"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeChademo;
/**
 *  J1772 type 1 connector.
 *
 *  Value: "EV_CONNECTOR_TYPE_J1772"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeJ1772;
/**
 *  Other connector types.
 *
 *  Value: "EV_CONNECTOR_TYPE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeOther;
/**
 *  The generic TESLA connector. This is NACS in the North America but can be
 *  non-NACS in other parts of the world (e.g. CCS Combo 2 (CCS2) or GB/T). This
 *  value is less representative of an actual connector type, and more
 *  represents the ability to charge a Tesla brand vehicle at a Tesla owned
 *  charging station.
 *
 *  Value: "EV_CONNECTOR_TYPE_TESLA"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeTesla;
/**
 *  IEC 62196 type 2 connector. Often referred to as MENNEKES.
 *
 *  Value: "EV_CONNECTOR_TYPE_TYPE_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeType2;
/**
 *  Unspecified connector.
 *
 *  Value: "EV_CONNECTOR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecified;
/**
 *  GB/T type corresponds to the GB/T standard in China. This type covers all
 *  GB_T types.
 *
 *  Value: "EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecifiedGbT;
/**
 *  Unspecified wall outlet.
 *
 *  Value: "EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecifiedWallOutlet;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice.type

/**
 *  Bio-diesel.
 *
 *  Value: "BIO_DIESEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_BioDiesel;
/**
 *  Diesel fuel.
 *
 *  Value: "DIESEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Diesel;
/**
 *  E 80.
 *
 *  Value: "E80"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_E80;
/**
 *  E 85.
 *
 *  Value: "E85"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_E85;
/**
 *  Unspecified fuel type.
 *
 *  Value: "FUEL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_FuelTypeUnspecified;
/**
 *  LPG.
 *
 *  Value: "LPG"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Lpg;
/**
 *  Methane.
 *
 *  Value: "METHANE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Methane;
/**
 *  Midgrade.
 *
 *  Value: "MIDGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Midgrade;
/**
 *  Premium.
 *
 *  Value: "PREMIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Premium;
/**
 *  Regular unleaded.
 *
 *  Value: "REGULAR_UNLEADED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_RegularUnleaded;
/**
 *  SP 100.
 *
 *  Value: "SP100"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp100;
/**
 *  SP 91.
 *
 *  Value: "SP91"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp91;
/**
 *  SP 91 E10.
 *
 *  Value: "SP91_E10"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp91E10;
/**
 *  SP 92.
 *
 *  Value: "SP92"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp92;
/**
 *  SP 95.
 *
 *  Value: "SP95"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp95;
/**
 *  SP95 E10.
 *
 *  Value: "SP95_E10"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp95E10;
/**
 *  SP 98.
 *
 *  Value: "SP98"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp98;
/**
 *  SP 99.
 *
 *  Value: "SP99"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp99;
/**
 *  Truck diesel.
 *
 *  Value: "TRUCK_DIESEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_TruckDiesel;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1Place.businessStatus

/**
 *  Default value. This value is unused.
 *
 *  Value: "BUSINESS_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_BusinessStatusUnspecified;
/**
 *  The establishment is permanently closed.
 *
 *  Value: "CLOSED_PERMANENTLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedPermanently;
/**
 *  The establishment is temporarily closed.
 *
 *  Value: "CLOSED_TEMPORARILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedTemporarily;
/**
 *  The establishment is operational, not necessarily open now.
 *
 *  Value: "OPERATIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_Operational;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1Place.priceLevel

/**
 *  Place provides expensive services.
 *
 *  Value: "PRICE_LEVEL_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelExpensive;
/**
 *  Place provides free services.
 *
 *  Value: "PRICE_LEVEL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelFree;
/**
 *  Place provides inexpensive services.
 *
 *  Value: "PRICE_LEVEL_INEXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelInexpensive;
/**
 *  Place provides moderately priced services.
 *
 *  Value: "PRICE_LEVEL_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelModerate;
/**
 *  Place price level is unspecified or unknown.
 *
 *  Value: "PRICE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelUnspecified;
/**
 *  Place provides very expensive service s.
 *
 *  Value: "PRICE_LEVEL_VERY_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelVeryExpensive;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours.secondaryHoursType

/**
 *  The access hours for storage places.
 *
 *  Value: "ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Access;
/**
 *  The breakfast hour.
 *
 *  Value: "BREAKFAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Breakfast;
/**
 *  The brunch hour.
 *
 *  Value: "BRUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Brunch;
/**
 *  The delivery hour.
 *
 *  Value: "DELIVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Delivery;
/**
 *  The dinner hour.
 *
 *  Value: "DINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Dinner;
/**
 *  The drive-through hour for banks, restaurants, or pharmacies.
 *
 *  Value: "DRIVE_THROUGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_DriveThrough;
/**
 *  The happy hour.
 *
 *  Value: "HAPPY_HOUR"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_HappyHour;
/**
 *  The kitchen hour.
 *
 *  Value: "KITCHEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Kitchen;
/**
 *  The lunch hour.
 *
 *  Value: "LUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Lunch;
/**
 *  The online service hours.
 *
 *  Value: "ONLINE_SERVICE_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_OnlineServiceHours;
/**
 *  The pickup hour.
 *
 *  Value: "PICKUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Pickup;
/**
 *  Default value when secondary hour type is not specified.
 *
 *  Value: "SECONDARY_HOURS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SecondaryHoursTypeUnspecified;
/**
 *  The special hours for seniors.
 *
 *  Value: "SENIOR_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SeniorHours;
/**
 *  The takeout hour.
 *
 *  Value: "TAKEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Takeout;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest.rankPreference

/**
 *  Ranks results by distance.
 *
 *  Value: "DISTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_Distance;
/**
 *  Ranks results by popularity.
 *
 *  Value: "POPULARITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_Popularity;
/**
 *  RankPreference value not set. Will use rank by POPULARITY by default.
 *
 *  Value: "RANK_PREFERENCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_RankPreferenceUnspecified;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest.priceLevels

/**
 *  Place provides expensive services.
 *
 *  Value: "PRICE_LEVEL_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelExpensive;
/**
 *  Place provides free services.
 *
 *  Value: "PRICE_LEVEL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelFree;
/**
 *  Place provides inexpensive services.
 *
 *  Value: "PRICE_LEVEL_INEXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelInexpensive;
/**
 *  Place provides moderately priced services.
 *
 *  Value: "PRICE_LEVEL_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelModerate;
/**
 *  Place price level is unspecified or unknown.
 *
 *  Value: "PRICE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelUnspecified;
/**
 *  Place provides very expensive service s.
 *
 *  Value: "PRICE_LEVEL_VERY_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelVeryExpensive;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest.rankPreference

/**
 *  Ranks results by distance.
 *
 *  Value: "DISTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Distance;
/**
 *  RankPreference value not set. Will default to DISTANCE.
 *
 *  Value: "RANK_PREFERENCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_RankPreferenceUnspecified;
/**
 *  Ranks results by relevance. Sort order determined by normal ranking stack.
 *  See SortRefinement::RELEVANCE.
 *
 *  Value: "RELEVANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Relevance;

/**
 *  A latitude-longitude viewport, represented as two diagonally opposite `low`
 *  and `high` points. A viewport is considered a closed region, i.e. it
 *  includes its boundary. The latitude bounds must range between -90 to 90
 *  degrees inclusive, and the longitude bounds must range between -180 to 180
 *  degrees inclusive. Various cases include: - If `low` = `high`, the viewport
 *  consists of that single point. - If `low.longitude` > `high.longitude`, the
 *  longitude range is inverted (the viewport crosses the 180 degree longitude
 *  line). - If `low.longitude` = -180 degrees and `high.longitude` = 180
 *  degrees, the viewport includes all longitudes. - If `low.longitude` = 180
 *  degrees and `high.longitude` = -180 degrees, the longitude range is empty. -
 *  If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low`
 *  and `high` must be populated, and the represented box cannot be empty (as
 *  specified by the definitions above). An empty viewport will result in an
 *  error. For example, this viewport fully encloses New York City: { "low": {
 *  "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude":
 *  40.91618, "longitude": -73.70018 } }
 */
@interface GTLRMapsPlaces_GoogleGeoTypeViewport : GTLRObject

/** Required. The high point of the viewport. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *high;

/** Required. The low point of the viewport. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *low;

@end


/**
 *  Information about the author of the UGC data. Used in Photo, and Review.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution : GTLRObject

/** Output only. Name of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Profile photo URI of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *photoUri;

/** Output only. URI of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Circle with a LatLng as center and radius.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Circle : GTLRObject

/**
 *  Required. Center latitude and longitude. The range of latitude must be
 *  within [-90.0, 90.0]. The range of the longitude must be within [-180.0,
 *  180.0].
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *center;

/**
 *  Required. Radius measured in meters. The radius must be within [0.0,
 *  50000.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radius;

@end


/**
 *  Information about the EV Charge Station hosted in Place. Terminology follows
 *  https://afdc.energy.gov/fuels/electricity_infrastructure.html One port could
 *  charge one car at a time. One port has one or more connectors. One station
 *  has one or more ports.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptions : GTLRObject

/**
 *  A list of EV charging connector aggregations that contain connectors of the
 *  same type and same charge rate.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation *> *connectorAggregation;

/**
 *  Number of connectors at this station. However, because some ports can have
 *  multiple connectors but only be able to charge one car at a time (e.g.) the
 *  number of connectors may be greater than the total number of cars which can
 *  charge simultaneously.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectorCount;

@end


/**
 *  EV charging information grouped by [type, max_charge_rate_kw]. Shows EV
 *  charge aggregation of connectors that have the same type and max charge rate
 *  in kw.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation : GTLRObject

/**
 *  The timestamp when the connector availability information in this
 *  aggregation was last updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *availabilityLastUpdateTime;

/**
 *  Number of connectors in this aggregation that are currently available.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *availableCount;

/**
 *  Number of connectors in this aggregation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  The static max charging rate in kw of each connector in the aggregation.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxChargeRateKw;

/**
 *  Number of connectors in this aggregation that are currently out of service.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outOfServiceCount;

/**
 *  The connector type of this aggregation.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeCcsCombo1
 *        Combined Charging System (AC and DC). Based on SAE. Type-1 J-1772
 *        connector (Value: "EV_CONNECTOR_TYPE_CCS_COMBO_1")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeCcsCombo2
 *        Combined Charging System (AC and DC). Based on Type-2 Mennekes
 *        connector (Value: "EV_CONNECTOR_TYPE_CCS_COMBO_2")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeChademo
 *        CHAdeMO type connector. (Value: "EV_CONNECTOR_TYPE_CHADEMO")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeJ1772
 *        J1772 type 1 connector. (Value: "EV_CONNECTOR_TYPE_J1772")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeOther
 *        Other connector types. (Value: "EV_CONNECTOR_TYPE_OTHER")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeTesla
 *        The generic TESLA connector. This is NACS in the North America but can
 *        be non-NACS in other parts of the world (e.g. CCS Combo 2 (CCS2) or
 *        GB/T). This value is less representative of an actual connector type,
 *        and more represents the ability to charge a Tesla brand vehicle at a
 *        Tesla owned charging station. (Value: "EV_CONNECTOR_TYPE_TESLA")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeType2
 *        IEC 62196 type 2 connector. Often referred to as MENNEKES. (Value:
 *        "EV_CONNECTOR_TYPE_TYPE_2")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecified
 *        Unspecified connector. (Value: "EV_CONNECTOR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecifiedGbT
 *        GB/T type corresponds to the GB/T standard in China. This type covers
 *        all GB_T types. (Value: "EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation_Type_EvConnectorTypeUnspecifiedWallOutlet
 *        Unspecified wall outlet. (Value:
 *        "EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The most recent information about fuel options in a gas station. This
 *  information is updated regularly.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptions : GTLRObject

/**
 *  The last known fuel price for each type of fuel this station has. There is
 *  one entry per fuel type this station has. Order is not important.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice *> *fuelPrices;

@end


/**
 *  Fuel price information for a given type.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice : GTLRObject

/** The price of the fuel. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeMoney *price;

/**
 *  The type of fuel.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_BioDiesel
 *        Bio-diesel. (Value: "BIO_DIESEL")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Diesel
 *        Diesel fuel. (Value: "DIESEL")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_E80 E
 *        80. (Value: "E80")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_E85 E
 *        85. (Value: "E85")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_FuelTypeUnspecified
 *        Unspecified fuel type. (Value: "FUEL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Lpg
 *        LPG. (Value: "LPG")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Methane
 *        Methane. (Value: "METHANE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Midgrade
 *        Midgrade. (Value: "MIDGRADE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Premium
 *        Premium. (Value: "PREMIUM")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_RegularUnleaded
 *        Regular unleaded. (Value: "REGULAR_UNLEADED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp100
 *        SP 100. (Value: "SP100")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp91
 *        SP 91. (Value: "SP91")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp91E10
 *        SP 91 E10. (Value: "SP91_E10")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp92
 *        SP 92. (Value: "SP92")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp95
 *        SP 95. (Value: "SP95")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp95E10
 *        SP95 E10. (Value: "SP95_E10")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp98
 *        SP 98. (Value: "SP98")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_Sp99
 *        SP 99. (Value: "SP99")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1FuelOptionsFuelPrice_Type_TruckDiesel
 *        Truck diesel. (Value: "TRUCK_DIESEL")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The time the fuel price was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Information about a photo of a place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Photo : GTLRObject

/** Output only. This photo's authors. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution *> *authorAttributions;

/**
 *  Output only. The maximum available height, in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightPx;

/**
 *  Output only. A reference representing this place photo which may be used to
 *  look up this place photo again (a.k.a. the API "resource" name:
 *  places/{place_id}/photos/{photo}).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The maximum available width, in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthPx;

@end


/**
 *  A photo media from Places API.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PhotoMedia : GTLRObject

/**
 *  The resource name of a photo in the format:
 *  places/place_id/photos/photo_reference.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A short-lived uri that can be used to render the photo. */
@property(nonatomic, copy, nullable) NSString *photoUri;

@end


/**
 *  All the information representing a Place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Place : GTLRObject

/** Information about the accessibility options a place offers. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAccessibilityOptions *accessibilityOptions;

/**
 *  Repeated components for each locality level. Note the following facts about
 *  the address_components[] array: - The array of address components may
 *  contain more components than the formatted_address. - The array does not
 *  necessarily include all the political entities that contain an address,
 *  apart from those included in the formatted_address. To retrieve all the
 *  political entities that contain a specific address, you should use reverse
 *  geocoding, passing the latitude/longitude of the address as a parameter to
 *  the request. - The format of the response is not guaranteed to remain the
 *  same between requests. In particular, the number of address_components
 *  varies based on the address requested and can change over time for the same
 *  address. A component can change position in the array. The type of the
 *  component can change. A particular component may be missing in a later
 *  response.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent *> *addressComponents;

/**
 *  The place's address in adr microformat: http://microformats.org/wiki/adr.
 */
@property(nonatomic, copy, nullable) NSString *adrFormatAddress;

/**
 *  Place allows dogs.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowsDogs;

/** A set of data provider that must be shown with this result. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution *> *attributions;

/**
 *  The business status for the place.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_BusinessStatusUnspecified
 *        Default value. This value is unused. (Value:
 *        "BUSINESS_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedPermanently
 *        The establishment is permanently closed. (Value: "CLOSED_PERMANENTLY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedTemporarily
 *        The establishment is temporarily closed. (Value: "CLOSED_TEMPORARILY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_Operational
 *        The establishment is operational, not necessarily open now. (Value:
 *        "OPERATIONAL")
 */
@property(nonatomic, copy, nullable) NSString *businessStatus;

/**
 *  Specifies if the business supports curbside pickup.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *curbsidePickup;

/**
 *  The hours of operation for the next seven days (including today). The time
 *  period starts at midnight on the date of the request and ends at 11:59 pm
 *  six days later. This field includes the special_days subfield of all hours,
 *  set for dates that have exceptional hours.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *currentOpeningHours;

/**
 *  Contains an array of entries for the next seven days including information
 *  about secondary hours of a business. Secondary hours are different from a
 *  business's main hours. For example, a restaurant can specify drive through
 *  hours or delivery hours as its secondary hours. This field populates the
 *  type subfield, which draws from a predefined list of opening hours types
 *  (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
 *  This field includes the special_days subfield of all hours, set for dates
 *  that have exceptional hours.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *> *currentSecondaryOpeningHours;

/**
 *  Specifies if the business supports delivery.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *delivery;

/**
 *  Specifies if the business supports indoor or outdoor seating options.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dineIn;

/**
 *  The localized name of the place, suitable as a short human-readable
 *  description. For example, "Google Sydney", "Starbucks", "Pyrmont", etc.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *displayName;

/**
 *  Contains a summary of the place. A summary is comprised of a textual
 *  overview, and also includes the language code for these if applicable.
 *  Summary text must be presented as-is and can not be modified or altered.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *editorialSummary;

/** Information of ev charging options. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1EVChargeOptions *evChargeOptions;

/** A full, human-readable address for this place. */
@property(nonatomic, copy, nullable) NSString *formattedAddress;

/**
 *  The most recent information about fuel options in a gas station. This
 *  information is updated regularly.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1FuelOptions *fuelOptions;

/**
 *  Place is good for children.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *goodForChildren;

/**
 *  Place accommodates groups.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *goodForGroups;

/**
 *  Place is suitable for watching sports.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *goodForWatchingSports;

/** A URL providing more information about this place. */
@property(nonatomic, copy, nullable) NSString *googleMapsUri;

/** Background color for icon_mask in hex format, e.g. #909CE1. */
@property(nonatomic, copy, nullable) NSString *iconBackgroundColor;

/**
 *  A truncated URL to an v2 icon mask. User can access different icon type by
 *  appending type suffix to the end (eg, ".svg" or ".png").
 */
@property(nonatomic, copy, nullable) NSString *iconMaskBaseUri;

/**
 *  The unique identifier of a place.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A human-readable phone number for the place, in international format. */
@property(nonatomic, copy, nullable) NSString *internationalPhoneNumber;

/**
 *  Place provides live music.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *liveMusic;

/** The position of this place. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *location;

/**
 *  Place has a children's menu.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *menuForChildren;

/**
 *  An ID representing this place which may be used to look up this place again
 *  (a.k.a. the API "resource" name: places/place_id).
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A human-readable phone number for the place, in national format. */
@property(nonatomic, copy, nullable) NSString *nationalPhoneNumber;

/**
 *  Place provides outdoor seating.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outdoorSeating;

/** Options of parking provided by the place. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceParkingOptions *parkingOptions;

/**
 *  Payment options the place accepts. If a payment option data is not
 *  available, the payment option field will be unset.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlacePaymentOptions *paymentOptions;

/** Information (including references) about photos of this place. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Photo *> *photos;

/** Plus code of the place location lat/long. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode *plusCode;

/**
 *  Price level of the place.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelExpensive
 *        Place provides expensive services. (Value: "PRICE_LEVEL_EXPENSIVE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelFree
 *        Place provides free services. (Value: "PRICE_LEVEL_FREE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelInexpensive
 *        Place provides inexpensive services. (Value:
 *        "PRICE_LEVEL_INEXPENSIVE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelModerate
 *        Place provides moderately priced services. (Value:
 *        "PRICE_LEVEL_MODERATE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelUnspecified
 *        Place price level is unspecified or unknown. (Value:
 *        "PRICE_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelVeryExpensive
 *        Place provides very expensive service s. (Value:
 *        "PRICE_LEVEL_VERY_EXPENSIVE")
 */
@property(nonatomic, copy, nullable) NSString *priceLevel;

/**
 *  The primary type of the given result. This type must one of the Places API
 *  supported types. For example, "restaurant", "cafe", "airport", etc. A place
 *  can only have a single primary type.
 */
@property(nonatomic, copy, nullable) NSString *primaryType;

/**
 *  The display name of the primary type, localized to the request language if
 *  applicable.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *primaryTypeDisplayName;

/**
 *  A rating between 1.0 and 5.0, based on user reviews of this place.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rating;

/** The regular hours of operation. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *regularOpeningHours;

/**
 *  Contains an array of entries for information about regular secondary hours
 *  of a business. Secondary hours are different from a business's main hours.
 *  For example, a restaurant can specify drive through hours or delivery hours
 *  as its secondary hours. This field populates the type subfield, which draws
 *  from a predefined list of opening hours types (such as DRIVE_THROUGH,
 *  PICKUP, or TAKEOUT) based on the types of the place.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *> *regularSecondaryOpeningHours;

/**
 *  Specifies if the place supports reservations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reservable;

/**
 *  Place has restroom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restroom;

/** List of reviews about this place. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Review *> *reviews;

/**
 *  Specifies if the place serves beer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBeer;

/**
 *  Specifies if the place serves breakfast.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBreakfast;

/**
 *  Specifies if the place serves brunch.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBrunch;

/**
 *  Place serves cocktails.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesCocktails;

/**
 *  Place serves coffee.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesCoffee;

/**
 *  Place serves dessert.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesDessert;

/**
 *  Specifies if the place serves dinner.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesDinner;

/**
 *  Specifies if the place serves lunch.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesLunch;

/**
 *  Specifies if the place serves vegetarian food.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesVegetarianFood;

/**
 *  Specifies if the place serves wine.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesWine;

/** A short, human-readable address for this place. */
@property(nonatomic, copy, nullable) NSString *shortFormattedAddress;

/** A list of sub destinations related to the place. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceSubDestination *> *subDestinations;

/**
 *  Specifies if the business supports takeout.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *takeout;

/**
 *  A set of type tags for this result. For example, "political" and "locality".
 *  See:
 *  https://developers.google.com/maps/documentation/places/web-service/place-types
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

/**
 *  The total number of reviews (with or without text) for this place.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userRatingCount;

/**
 *  Number of minutes this place's timezone is currently offset from UTC. This
 *  is expressed in minutes to support timezones that are offset by fractions of
 *  an hour, e.g. X hours and 15 minutes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *utcOffsetMinutes;

/** A viewport suitable for displaying the place on an average-sized map. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *viewport;

/**
 *  The authoritative website for this place, e.g. a business' homepage. Note
 *  that for places that are part of a chain (e.g. an IKEA store), this will
 *  usually be the website for the individual store, not the overall chain.
 */
@property(nonatomic, copy, nullable) NSString *websiteUri;

@end


/**
 *  Information about the accessibility options a place offers.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAccessibilityOptions : GTLRObject

/**
 *  Places has wheelchair accessible entrance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wheelchairAccessibleEntrance;

/**
 *  Place offers wheelchair accessible parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wheelchairAccessibleParking;

/**
 *  Place has wheelchair accessible restroom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wheelchairAccessibleRestroom;

/**
 *  Place has wheelchair accessible seating.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wheelchairAccessibleSeating;

@end


/**
 *  The structured components that form the formatted address, if this
 *  information is available.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent : GTLRObject

/** The language used to format this components, in CLDR notation. */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The full text description or name of the address component. For example, an
 *  address component for the country Australia may have a long_name of
 *  "Australia".
 */
@property(nonatomic, copy, nullable) NSString *longText;

/**
 *  An abbreviated textual name for the address component, if available. For
 *  example, an address component for the country of Australia may have a
 *  short_name of "AU".
 */
@property(nonatomic, copy, nullable) NSString *shortText;

/** An array indicating the type(s) of the address component. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  Information about data providers of this place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution : GTLRObject

/** Name of the Place's data provider. */
@property(nonatomic, copy, nullable) NSString *provider;

/** URI to the Place's data provider. */
@property(nonatomic, copy, nullable) NSString *providerUri;

@end


/**
 *  Information about business hour of the place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours : GTLRObject

/**
 *  Is this place open right now? Always present unless we lack time-of-day or
 *  timezone data for these opening hours.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *openNow;

/**
 *  The periods that this place is open during the week. The periods are in
 *  chronological order, starting with Sunday in the place-local timezone. An
 *  empty (but not absent) value indicates a place that is never open, e.g.
 *  because it is closed temporarily for renovations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod *> *periods;

/**
 *  A type string used to identify the type of secondary hours.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Access
 *        The access hours for storage places. (Value: "ACCESS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Breakfast
 *        The breakfast hour. (Value: "BREAKFAST")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Brunch
 *        The brunch hour. (Value: "BRUNCH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Delivery
 *        The delivery hour. (Value: "DELIVERY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Dinner
 *        The dinner hour. (Value: "DINNER")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_DriveThrough
 *        The drive-through hour for banks, restaurants, or pharmacies. (Value:
 *        "DRIVE_THROUGH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_HappyHour
 *        The happy hour. (Value: "HAPPY_HOUR")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Kitchen
 *        The kitchen hour. (Value: "KITCHEN")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Lunch
 *        The lunch hour. (Value: "LUNCH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_OnlineServiceHours
 *        The online service hours. (Value: "ONLINE_SERVICE_HOURS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Pickup
 *        The pickup hour. (Value: "PICKUP")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SecondaryHoursTypeUnspecified
 *        Default value when secondary hour type is not specified. (Value:
 *        "SECONDARY_HOURS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SeniorHours
 *        The special hours for seniors. (Value: "SENIOR_HOURS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Takeout
 *        The takeout hour. (Value: "TAKEOUT")
 */
@property(nonatomic, copy, nullable) NSString *secondaryHoursType;

/**
 *  Structured information for special days that fall within the period that the
 *  returned opening hours cover. Special days are days that could impact the
 *  business hours of a place, e.g. Christmas day. Set for current_opening_hours
 *  and current_secondary_opening_hours if there are exceptional hours.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay *> *specialDays;

/**
 *  Localized strings describing the opening hours of this place, one string for
 *  each day of the week. Will be empty if the hours are unknown or could not be
 *  converted to localized text. Example: "Sun: 18:00–06:00"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *weekdayDescriptions;

@end


/**
 *  A period the place remains in open_now status.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod : GTLRObject

/** The time that the place starts to be closed. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint *close;

/** The time that the place starts to be open. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint *open;

@end


/**
 *  Status changing points.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint : GTLRObject

/** Date in the local timezone for the place. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeDate *date;

/**
 *  A day of the week, as an integer in the range 0-6. 0 is Sunday, 1 is Monday,
 *  etc.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  The hour in 2 digits. Ranges from 00 to 23.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hour;

/**
 *  The minute in 2 digits. Ranges from 00 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minute;

/**
 *  Whether or not this endpoint was truncated. Truncation occurs when the real
 *  hours are outside the times we are willing to return hours between, so we
 *  truncate the hours back to these boundaries. This ensures that at most 24 *
 *  7 hours from midnight of the day of the request are returned.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truncated;

@end


/**
 *  Structured information for special days that fall within the period that the
 *  returned opening hours cover. Special days are days that could impact the
 *  business hours of a place, e.g. Christmas day.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay : GTLRObject

/** The date of this special day. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeDate *date;

@end


/**
 *  Information about parking options for the place. A parking lot could support
 *  more than one option at the same time.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceParkingOptions : GTLRObject

/**
 *  Place offers free garage parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freeGarageParking;

/**
 *  Place offers free parking lots.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freeParkingLot;

/**
 *  Place offers free street parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freeStreetParking;

/**
 *  Place offers paid garage parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paidGarageParking;

/**
 *  Place offers paid parking lots.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paidParkingLot;

/**
 *  Place offers paid street parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paidStreetParking;

/**
 *  Place offers valet parking.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valetParking;

@end


/**
 *  Payment options the place accepts.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlacePaymentOptions : GTLRObject

/**
 *  Place accepts cash only as payment. Places with this attribute may still
 *  accept other payment methods.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceptsCashOnly;

/**
 *  Place accepts credit cards as payment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceptsCreditCards;

/**
 *  Place accepts debit cards as payment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceptsDebitCards;

/**
 *  Place accepts NFC payments.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acceptsNfc;

@end


/**
 *  Plus code (http://plus.codes) is a location reference with two formats:
 *  global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle,
 *  and compound code, replacing the prefix with a reference location.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode : GTLRObject

/**
 *  Place's compound code, such as "33GV+HQ, Ramberg, Norway", containing the
 *  suffix of the global code and replacing the prefix with a formatted name of
 *  a reference entity.
 */
@property(nonatomic, copy, nullable) NSString *compoundCode;

/**
 *  Place's global (full) code, such as "9FWM33GV+HQ", representing an 1/8000 by
 *  1/8000 degree area (~14 by 14 meters).
 */
@property(nonatomic, copy, nullable) NSString *globalCode;

@end


/**
 *  Place resource name and id of sub destinations that relate to the place. For
 *  example, different terminals are different destinations of an airport.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceSubDestination : GTLRObject

/**
 *  The place id of the sub destination.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource name of the sub destination. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Information about a review of a place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Review : GTLRObject

/** Output only. This review's author. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution *authorAttribution;

/**
 *  Output only. A reference representing this place review which may be used to
 *  look up this place review again (a.k.a. the API "resource" name:
 *  places/{place_id}/reviews/{review}).
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The review text in its original language. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *originalText;

/** Output only. Timestamp for the review. */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

/**
 *  Output only. A number between 1.0 and 5.0, a.k.a. the number of stars.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rating;

/**
 *  Output only. A string of formatted recent time, expressing the review time
 *  relative to the current time in a form appropriate for the language and
 *  country.
 */
@property(nonatomic, copy, nullable) NSString *relativePublishTimeDescription;

/** Output only. The localized text of the review. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *text;

@end


/**
 *  Request proto for Search Nearby.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest : GTLRObject

/**
 *  Excluded primary Place type (e.g. "restaurant" or "gas_station") from
 *  https://developers.google.com/maps/documentation/places/web-service/place-types.
 *  If there are any conflicting primary types, i.e. a type appears in both
 *  included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error
 *  is returned. If a Place type is specified with multiple type restrictions,
 *  only places that satisfy all of the restrictions are returned. For example,
 *  if we have {included_types = ["restaurant"], excluded_primary_types =
 *  ["restaurant"]}, the returned places provide "restaurant" related services
 *  but do not operate primarily as "restaurants".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludedPrimaryTypes;

/**
 *  Excluded Place type (eg, "restaurant" or "gas_station") from
 *  https://developers.google.com/maps/documentation/places/web-service/place-types.
 *  If the client provides both included_types (e.g. restaurant) and
 *  excluded_types (e.g. cafe), then the response should include places that are
 *  restaurant but not cafe. The response includes places that match at least
 *  one of the included_types and none of the excluded_types. If there are any
 *  conflicting types, i.e. a type appears in both included_types and
 *  excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is
 *  specified with multiple type restrictions, only places that satisfy all of
 *  the restrictions are returned. For example, if we have {included_types =
 *  ["restaurant"], excluded_primary_types = ["restaurant"]}, the returned
 *  places provide "restaurant" related services but do not operate primarily as
 *  "restaurants".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludedTypes;

/**
 *  Included primary Place type (e.g. "restaurant" or "gas_station") from
 *  https://developers.google.com/maps/documentation/places/web-service/place-types.
 *  A place can only have a single primary type from the supported types table
 *  associated with it. If there are any conflicting primary types, i.e. a type
 *  appears in both included_primary_types and excluded_primary_types, an
 *  INVALID_ARGUMENT error is returned. If a Place type is specified with
 *  multiple type restrictions, only places that satisfy all of the restrictions
 *  are returned. For example, if we have {included_types = ["restaurant"],
 *  excluded_primary_types = ["restaurant"]}, the returned places provide
 *  "restaurant" related services but do not operate primarily as "restaurants".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedPrimaryTypes;

/**
 *  Included Place type (eg, "restaurant" or "gas_station") from
 *  https://developers.google.com/maps/documentation/places/web-service/place-types.
 *  If there are any conflicting types, i.e. a type appears in both
 *  included_types and excluded_types, an INVALID_ARGUMENT error is returned. If
 *  a Place type is specified with multiple type restrictions, only places that
 *  satisfy all of the restrictions are returned. For example, if we have
 *  {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]},
 *  the returned places provide "restaurant" related services but do not operate
 *  primarily as "restaurants".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedTypes;

/**
 *  Place details will be displayed with the preferred language if available. If
 *  the language code is unspecified or unrecognized, place details of any
 *  language may be returned, with a preference for English if such details
 *  exist. Current list of supported languages:
 *  https://developers.google.com/maps/faq#languagesupport.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. The region to search. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction *locationRestriction;

/**
 *  Maximum number of results to return. It must be between 1 and 20 (default),
 *  inclusively. If the number is unset, it falls back to the upper limit. If
 *  the number is set to negative or exceeds the upper limit, an
 *  INVALID_ARGUMENT error is returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResultCount;

/**
 *  How results will be ranked in the response.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_Distance
 *        Ranks results by distance. (Value: "DISTANCE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_Popularity
 *        Ranks results by popularity. (Value: "POPULARITY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequest_RankPreference_RankPreferenceUnspecified
 *        RankPreference value not set. Will use rank by POPULARITY by default.
 *        (Value: "RANK_PREFERENCE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *rankPreference;

/**
 *  The Unicode country/region code (CLDR) of the location where the request is
 *  coming from. This parameter is used to display the place details, like
 *  region-specific place name, if available. The parameter can affect results
 *  based on applicable law. For more information, see
 *  https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.
 *  Note that 3-digit region codes are not currently supported.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  The region to search.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction : GTLRObject

/** A circle defined by center point and radius. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1Circle *circle;

@end


/**
 *  Response proto for Search Nearby.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchNearbyResponse : GTLRObject

/**
 *  A list of places that meets user's requirements like places types, number of
 *  places and specific location restriction.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Place *> *places;

@end


/**
 *  Request proto for SearchText.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest : GTLRObject

/**
 *  The requested place type. Full list of types supported:
 *  https://developers.google.com/maps/documentation/places/web-service/place-types.
 *  Only support one included type.
 */
@property(nonatomic, copy, nullable) NSString *includedType;

/**
 *  Place details will be displayed with the preferred language if available. If
 *  the language code is unspecified or unrecognized, place details of any
 *  language may be returned, with a preference for English if such details
 *  exist. Current list of supported languages:
 *  https://developers.google.com/maps/faq#languagesupport.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The region to search. This location serves as a bias which means results
 *  around given location might be returned. Cannot be set along with
 *  location_restriction.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias *locationBias;

/**
 *  The region to search. This location serves as a restriction which means
 *  results outside given location will not be returned. Cannot be set along
 *  with location_bias.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction *locationRestriction;

/**
 *  Maximum number of results to return. It must be between 1 and 20,
 *  inclusively. If the number is unset, it falls back to the upper limit. If
 *  the number is set to negative or exceeds the upper limit, an
 *  INVALID_ARGUMENT error is returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResultCount;

/**
 *  Filter out results whose average user rating is strictly less than this
 *  limit. A valid value must be an float between 0 and 5 (inclusively) at a 0.5
 *  cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. This is to keep parity
 *  with LocalRefinement_UserRating. The input rating will round up to the
 *  nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all
 *  results with a less than 1.0 rating.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRating;

/**
 *  Used to restrict the search to places that are currently open.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *openNow;

/**
 *  Used to restrict the search to places that are marked as certain price
 *  levels. Users can choose any combinations of price levels. Default to select
 *  all price levels.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *priceLevels;

/**
 *  How results will be ranked in the response.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Distance
 *        Ranks results by distance. (Value: "DISTANCE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_RankPreferenceUnspecified
 *        RankPreference value not set. Will default to DISTANCE. (Value:
 *        "RANK_PREFERENCE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Relevance
 *        Ranks results by relevance. Sort order determined by normal ranking
 *        stack. See SortRefinement::RELEVANCE. (Value: "RELEVANCE")
 */
@property(nonatomic, copy, nullable) NSString *rankPreference;

/**
 *  The Unicode country/region code (CLDR) of the location where the request is
 *  coming from. This parameter is used to display the place details, like
 *  region-specific place name, if available. The parameter can affect results
 *  based on applicable law. For more information, see
 *  https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.
 *  Note that 3-digit region codes are not currently supported.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Used to set strict type filtering for included_type. If set to true, only
 *  results of the same type will be returned. Default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strictTypeFiltering;

/** Required. The text query for textual search. */
@property(nonatomic, copy, nullable) NSString *textQuery;

@end


/**
 *  The region to search. This location serves as a bias which means results
 *  around given location might be returned.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias : GTLRObject

/** A circle defined by center point and radius. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1Circle *circle;

/** A rectangle box defined by northeast and southwest corner. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *rectangle;

@end


/**
 *  The region to search. This location serves as a restriction which means
 *  results outside given location will not be returned.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction : GTLRObject

/** A rectangle box defined by northeast and southwest corner. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *rectangle;

@end


/**
 *  Response proto for SearchText.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextResponse : GTLRObject

/** A list of places that meet the user's text search criteria. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Place *> *places;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRMapsPlaces_GoogleTypeDate : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  An object that represents a latitude/longitude pair. This is expressed as a
 *  pair of doubles to represent degrees latitude and degrees longitude. Unless
 *  specified otherwise, this object must conform to the WGS84 standard. Values
 *  must be within normalized ranges.
 */
@interface GTLRMapsPlaces_GoogleTypeLatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Localized variant of a text in a particular language.
 */
@interface GTLRMapsPlaces_GoogleTypeLocalizedText : GTLRObject

/**
 *  The text's BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Localized string in the language corresponding to language_code below. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Represents an amount of money with its currency type.
 */
@interface GTLRMapsPlaces_GoogleTypeMoney : GTLRObject

/** The three-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Number of nano (10^-9) units of the amount. The value must be between
 *  -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos`
 *  must be positive or zero. If `units` is zero, `nanos` can be positive, zero,
 *  or negative. If `units` is negative, `nanos` must be negative or zero. For
 *  example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  The whole units of the amount. For example if `currencyCode` is `"USD"`,
 *  then 1 unit is one US dollar.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
