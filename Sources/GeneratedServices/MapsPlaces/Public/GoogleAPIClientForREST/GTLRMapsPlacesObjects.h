// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Places API (New) (places/v1)
// Documentation:
//   https://mapsplatform.google.com/maps-products/#places-section

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRMapsPlaces_GoogleGeoTypeViewport;
@class GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Circle;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Place;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay;
@class GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode;
@class GTLRMapsPlaces_GoogleMapsPlacesV1Review;
@class GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias;
@class GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction;
@class GTLRMapsPlaces_GoogleTypeDate;
@class GTLRMapsPlaces_GoogleTypeLatLng;
@class GTLRMapsPlaces_GoogleTypeLocalizedText;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1Place.businessStatus

/**
 *  Default value. This value is unused.
 *
 *  Value: "BUSINESS_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_BusinessStatusUnspecified;
/**
 *  The establishment is permanently closed.
 *
 *  Value: "CLOSED_PERMANENTLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedPermanently;
/**
 *  The establishment is temporarily closed.
 *
 *  Value: "CLOSED_TEMPORARILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedTemporarily;
/**
 *  The establishment is operational, not necessarily open now.
 *
 *  Value: "OPERATIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_Operational;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1Place.priceLevel

/**
 *  Place provides expensive services.
 *
 *  Value: "PRICE_LEVEL_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelExpensive;
/**
 *  Place provides free services.
 *
 *  Value: "PRICE_LEVEL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelFree;
/**
 *  Place provides inexpensive services.
 *
 *  Value: "PRICE_LEVEL_INEXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelInexpensive;
/**
 *  Place provides moderately priced services.
 *
 *  Value: "PRICE_LEVEL_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelModerate;
/**
 *  Place price level is unspecified or unknown.
 *
 *  Value: "PRICE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelUnspecified;
/**
 *  Place provides very expensive services.
 *
 *  Value: "PRICE_LEVEL_VERY_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelVeryExpensive;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours.secondaryHoursType

/**
 *  The access hours for storage places.
 *
 *  Value: "ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Access;
/**
 *  The breakfast hour.
 *
 *  Value: "BREAKFAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Breakfast;
/**
 *  The brunch hour.
 *
 *  Value: "BRUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Brunch;
/**
 *  The delivery hour.
 *
 *  Value: "DELIVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Delivery;
/**
 *  The dinner hour.
 *
 *  Value: "DINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Dinner;
/**
 *  The drive-through hour for banks, restaurants, or pharmacies.
 *
 *  Value: "DRIVE_THROUGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_DriveThrough;
/**
 *  The happy hour.
 *
 *  Value: "HAPPY_HOUR"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_HappyHour;
/**
 *  The kitchen hour.
 *
 *  Value: "KITCHEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Kitchen;
/**
 *  The lunch hour.
 *
 *  Value: "LUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Lunch;
/**
 *  The online service hours.
 *
 *  Value: "ONLINE_SERVICE_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_OnlineServiceHours;
/**
 *  The pickup hour.
 *
 *  Value: "PICKUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Pickup;
/**
 *  Default value when secondary hour type is not specified.
 *
 *  Value: "SECONDARY_HOURS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SecondaryHoursTypeUnspecified;
/**
 *  The special hours for seniors.
 *
 *  Value: "SENIOR_HOURS"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SeniorHours;
/**
 *  The takeout hour.
 *
 *  Value: "TAKEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Takeout;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest.priceLevels

/**
 *  Place provides expensive services.
 *
 *  Value: "PRICE_LEVEL_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelExpensive;
/**
 *  Place provides free services.
 *
 *  Value: "PRICE_LEVEL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelFree;
/**
 *  Place provides inexpensive services.
 *
 *  Value: "PRICE_LEVEL_INEXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelInexpensive;
/**
 *  Place provides moderately priced services.
 *
 *  Value: "PRICE_LEVEL_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelModerate;
/**
 *  Place price level is unspecified or unknown.
 *
 *  Value: "PRICE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelUnspecified;
/**
 *  Place provides very expensive services.
 *
 *  Value: "PRICE_LEVEL_VERY_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_PriceLevels_PriceLevelVeryExpensive;

// ----------------------------------------------------------------------------
// GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest.rankPreference

/**
 *  Ranks results by distance.
 *
 *  Value: "DISTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Distance;
/**
 *  RankPreference value not set. Will default to DISTANCE.
 *
 *  Value: "RANK_PREFERENCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_RankPreferenceUnspecified;
/**
 *  Ranks results by relevance. Sort order determined by normal ranking stack.
 *  See SortRefinement::RELEVANCE.
 *
 *  Value: "RELEVANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Relevance;

/**
 *  A latitude-longitude viewport, represented as two diagonally opposite `low`
 *  and `high` points. A viewport is considered a closed region, i.e. it
 *  includes its boundary. The latitude bounds must range between -90 to 90
 *  degrees inclusive, and the longitude bounds must range between -180 to 180
 *  degrees inclusive. Various cases include: - If `low` = `high`, the viewport
 *  consists of that single point. - If `low.longitude` > `high.longitude`, the
 *  longitude range is inverted (the viewport crosses the 180 degree longitude
 *  line). - If `low.longitude` = -180 degrees and `high.longitude` = 180
 *  degrees, the viewport includes all longitudes. - If `low.longitude` = 180
 *  degrees and `high.longitude` = -180 degrees, the longitude range is empty. -
 *  If `low.latitude` > `high.latitude`, the latitude range is empty. Both `low`
 *  and `high` must be populated, and the represented box cannot be empty (as
 *  specified by the definitions above). An empty viewport will result in an
 *  error. For example, this viewport fully encloses New York City: { "low": {
 *  "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude":
 *  40.91618, "longitude": -73.70018 } }
 */
@interface GTLRMapsPlaces_GoogleGeoTypeViewport : GTLRObject

/** Required. The high point of the viewport. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *high;

/** Required. The low point of the viewport. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *low;

@end


/**
 *  Information about the author of the UGC data. Used in Photo, and Review.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution : GTLRObject

/** Output only. Name of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Profile photo URI of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *photoUri;

/** Output only. URI of the author of the Photo or Review. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Circle with a LatLng as center and radius.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Circle : GTLRObject

/**
 *  Required. Center latitude and longitude. The range of latitude must be
 *  within [-90.0, 90.0]. The range of the longitude must be within [-180.0,
 *  180.0].
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *center;

/**
 *  Required. Radius measured in meters. The radius must be within [0.0,
 *  50000.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radius;

@end


/**
 *  All the information representing a Place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Place : GTLRObject

/** Output only. Repeated components for each locality level. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent *> *addressComponents;

/**
 *  Output only. The place's address in adr microformat:
 *  http://microformats.org/wiki/adr.
 */
@property(nonatomic, copy, nullable) NSString *adrFormatAddress;

/**
 *  Output only. A set of data provider that must be shown with this result.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution *> *attributions;

/**
 *  Output only. The business status for the place.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_BusinessStatusUnspecified
 *        Default value. This value is unused. (Value:
 *        "BUSINESS_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedPermanently
 *        The establishment is permanently closed. (Value: "CLOSED_PERMANENTLY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_ClosedTemporarily
 *        The establishment is temporarily closed. (Value: "CLOSED_TEMPORARILY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_BusinessStatus_Operational
 *        The establishment is operational, not necessarily open now. (Value:
 *        "OPERATIONAL")
 */
@property(nonatomic, copy, nullable) NSString *businessStatus;

/**
 *  Output only. Specifies if the business supports curbside pickup.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *curbsidePickup;

/**
 *  Output only. The hours of operation for the next seven days (including
 *  today). The time period starts at midnight on the date of the request and
 *  ends at 11:59 pm six days later. This field includes the special_days
 *  subfield of all hours, set for dates that have exceptional hours.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *currentOpeningHours;

/**
 *  Output only. Contains an array of entries for the next seven days including
 *  information about secondary hours of a business. Secondary hours are
 *  different from a business's main hours. For example, a restaurant can
 *  specify drive through hours or delivery hours as its secondary hours. This
 *  field populates the type subfield, which draws from a predefined list of
 *  opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the
 *  types of the place. This field includes the special_days subfield of all
 *  hours, set for dates that have exceptional hours.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *> *currentSecondaryOpeningHours;

/**
 *  Output only. Specifies if the business supports delivery.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *delivery;

/**
 *  Output only. Specifies if the business supports indoor or outdoor seating
 *  options.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dineIn;

/**
 *  Output only. The localized name of the place, suitable as a short
 *  human-readable description. For example, "Google Sydney", "Starbucks",
 *  "Pyrmont", etc.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *displayName;

/**
 *  Output only. Contains a summary of the place. A summary is comprised of a
 *  textual overview, and also includes the language code for these if
 *  applicable. Summary text must be presented as-is and can not be modified or
 *  altered.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *editorialSummary;

/** Output only. A full, human-readable address for this place. */
@property(nonatomic, copy, nullable) NSString *formattedAddress;

/** Output only. A URL providing more information about this place. */
@property(nonatomic, copy, nullable) NSString *googleMapsUri;

/**
 *  Output only. Background color for icon_mask in hex format, e.g. #909CE1.
 */
@property(nonatomic, copy, nullable) NSString *iconBackgroundColor;

/**
 *  Output only. A truncated URL to an v2 icon mask. User can access different
 *  icon type by appending type suffix to the end (eg, ".svg" or ".png").
 */
@property(nonatomic, copy, nullable) NSString *iconMaskBaseUri;

/**
 *  Output only. The unique identifier of a place.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. A human-readable phone number for the place, in international
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *internationalPhoneNumber;

/** Output only. The position of this place. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLatLng *location;

/**
 *  Output only. An ID representing this place which may be used to look up this
 *  place again (a.k.a. the API "resource" name: places/).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A human-readable phone number for the place, in national
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *nationalPhoneNumber;

/** Output only. The regular hours of operation. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *openingHours;

/** Output only. Plus code of the place location lat/long. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode *plusCode;

/**
 *  Output only. Price level of the place.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelExpensive
 *        Place provides expensive services. (Value: "PRICE_LEVEL_EXPENSIVE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelFree
 *        Place provides free services. (Value: "PRICE_LEVEL_FREE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelInexpensive
 *        Place provides inexpensive services. (Value:
 *        "PRICE_LEVEL_INEXPENSIVE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelModerate
 *        Place provides moderately priced services. (Value:
 *        "PRICE_LEVEL_MODERATE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelUnspecified
 *        Place price level is unspecified or unknown. (Value:
 *        "PRICE_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1Place_PriceLevel_PriceLevelVeryExpensive
 *        Place provides very expensive services. (Value:
 *        "PRICE_LEVEL_VERY_EXPENSIVE")
 */
@property(nonatomic, copy, nullable) NSString *priceLevel;

/**
 *  Output only. A rating between 1.0 and 5.0, based on user reviews of this
 *  place.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rating;

/**
 *  Output only. Specifies if the place supports reservations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reservable;

/** Output only. List of reviews about this place. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Review *> *reviews;

/**
 *  Output only. Contains an array of entries for information about regular
 *  secondary hours of a business. Secondary hours are different from a
 *  business's main hours. For example, a restaurant can specify drive through
 *  hours or delivery hours as its secondary hours. This field populates the
 *  type subfield, which draws from a predefined list of opening hours types
 *  (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours *> *secondaryOpeningHours;

/**
 *  Output only. Specifies if the place serves beer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBeer;

/**
 *  Output only. Specifies if the place serves breakfast.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBreakfast;

/**
 *  Output only. Specifies if the place serves brunch.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesBrunch;

/**
 *  Output only. Specifies if the place serves dinner.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesDinner;

/**
 *  Output only. Specifies if the place serves lunch.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesLunch;

/**
 *  Output only. Specifies if the place serves vegetarian food.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesVegetarianFood;

/**
 *  Output only. Specifies if the place serves wine.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *servesWine;

/**
 *  Output only. Specifies if the business supports takeout.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *takeout;

/**
 *  Output only. A set of type tags for this result. For example, "political"
 *  and "locality".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

/**
 *  Output only. The total number of reviews (with or without text) for this
 *  place.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userRatingCount;

/**
 *  Output only. Number of minutes this place's timezone is currently offset
 *  from UTC. This is expressed in minutes to support timezones that are offset
 *  by fractions of an hour, e.g. X hours and 15 minutes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *utcOffsetMinutes;

/**
 *  Output only. A viewport suitable for displaying the place on an
 *  average-sized map.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *viewport;

/**
 *  Output only. The authoritative website for this place, e.g. a business'
 *  homepage. Note that for places that are part of a chain (e.g. an IKEA
 *  store), this will usually be the website for the individual store, not the
 *  overall chain.
 */
@property(nonatomic, copy, nullable) NSString *websiteUri;

/**
 *  Output only. Specifies if the place has an entrance that is
 *  wheelchair-accessible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wheelchairAccessibleEntrance;

@end


/**
 *  The structured components that form the formatted address, if this
 *  information is available.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAddressComponent : GTLRObject

/**
 *  Output only. The language used to format this components, in CLDR notation.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Output only. The full text description or name of the address component. For
 *  example, an address component for the country Australia may have a long_name
 *  of "Australia".
 */
@property(nonatomic, copy, nullable) NSString *longText;

/**
 *  Output only. An abbreviated textual name for the address component, if
 *  available. For example, an address component for the country of Australia
 *  may have a short_name of "AU".
 */
@property(nonatomic, copy, nullable) NSString *shortText;

/** Output only. An array indicating the type(s) of the address component. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  Information about data providers of this place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceAttribution : GTLRObject

/** Output only. Name of the Place's data provider. */
@property(nonatomic, copy, nullable) NSString *provider;

/** Output only. URI to the Place's data provider. */
@property(nonatomic, copy, nullable) NSString *providerUri;

@end


/**
 *  Information about business hour of the place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours : GTLRObject

/**
 *  Output only. Is this place open right now? Always present unless we lack
 *  time-of-day or timezone data for these opening hours.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *openNow;

/**
 *  Output only. The periods that this place is open during the week. The
 *  periods are in chronological order, starting with Sunday in the place-local
 *  timezone. An empty (but not absent) value indicates a place that is never
 *  open, e.g. because it is closed temporarily for renovations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod *> *periods;

/**
 *  Output only. A type string used to identify the type of secondary hours.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Access
 *        The access hours for storage places. (Value: "ACCESS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Breakfast
 *        The breakfast hour. (Value: "BREAKFAST")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Brunch
 *        The brunch hour. (Value: "BRUNCH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Delivery
 *        The delivery hour. (Value: "DELIVERY")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Dinner
 *        The dinner hour. (Value: "DINNER")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_DriveThrough
 *        The drive-through hour for banks, restaurants, or pharmacies. (Value:
 *        "DRIVE_THROUGH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_HappyHour
 *        The happy hour. (Value: "HAPPY_HOUR")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Kitchen
 *        The kitchen hour. (Value: "KITCHEN")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Lunch
 *        The lunch hour. (Value: "LUNCH")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_OnlineServiceHours
 *        The online service hours. (Value: "ONLINE_SERVICE_HOURS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Pickup
 *        The pickup hour. (Value: "PICKUP")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SecondaryHoursTypeUnspecified
 *        Default value when secondary hour type is not specified. (Value:
 *        "SECONDARY_HOURS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_SeniorHours
 *        The special hours for seniors. (Value: "SENIOR_HOURS")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHours_SecondaryHoursType_Takeout
 *        The takeout hour. (Value: "TAKEOUT")
 */
@property(nonatomic, copy, nullable) NSString *secondaryHoursType;

/**
 *  Output only. Structured information for special days that fall within the
 *  period that the returned opening hours cover. Special days are days that
 *  could impact the business hours of a place, e.g. Christmas day. Set for
 *  current_opening_hours and current_secondary_opening_hours if there are
 *  exceptional hours.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay *> *specialDays;

/**
 *  Output only. Localized strings describing the opening hours of this place,
 *  one string for each day of the week. Will be empty if the hours are unknown
 *  or could not be converted to localized text. Example: "Sun: 18:00–06:00"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *weekdayDescriptions;

@end


/**
 *  A period the place remains in open_now status.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriod : GTLRObject

/** Output only. The time that the place starts to be closed. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint *close;

/** Output only. The time that the place starts to be open. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint *open;

@end


/**
 *  Status changing points.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint : GTLRObject

/** Output only. Date in the local timezone for the place. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeDate *date;

/**
 *  Output only. A day of the week, as an integer in the range 0-6. 0 is Sunday,
 *  1 is Monday, etc.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Output only. The hour in 2 digits. Ranges from 00 to 23.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hour;

/**
 *  Output only. The minute in 2 digits. Ranges from 00 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minute;

/**
 *  Output only. Whether or not this endpoint was truncated. Truncation occurs
 *  when the real hours are outside the times we are willing to return hours
 *  between, so we truncate the hours back to these boundaries. This ensures
 *  that at most 24 * 7 hours from midnight of the day of the request are
 *  returned.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truncated;

@end


/**
 *  Structured information for special days that fall within the period that the
 *  returned opening hours cover. Special days are days that could impact the
 *  business hours of a place, e.g. Christmas day.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay : GTLRObject

/** Output only. The date of this special day. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeDate *date;

@end


/**
 *  Plus code (http://plus.codes) is a location reference with two formats:
 *  global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle,
 *  and compound code, replacing the prefix with a reference location.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1PlacePlusCode : GTLRObject

/**
 *  Output only. Place's compound code, such as "33GV+HQ, Ramberg, Norway",
 *  containing the suffix of the global code and replacing the prefix with a
 *  formatted name of a reference entity.
 */
@property(nonatomic, copy, nullable) NSString *compoundCode;

/**
 *  Output only. Place's global (full) code, such as "9FWM33GV+HQ", representing
 *  an 1/8000 by 1/8000 degree area (~14 by 14 meters).
 */
@property(nonatomic, copy, nullable) NSString *globalCode;

@end


/**
 *  Information about a review of a place.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1Review : GTLRObject

/** Output only. This review's author. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1AuthorAttribution *authorAttribution;

/** Output only. The review text in its original language. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *originalText;

/** Output only. Timestamp for the review. */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

/**
 *  Output only. A number between 1.0 and 5.0, a.k.a. the number of stars.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rating;

/**
 *  Output only. A string of formatted recent time, expressing the review time
 *  relative to the current time in a form appropriate for the language and
 *  country.
 */
@property(nonatomic, copy, nullable) NSString *relativePublishTimeDescription;

/** Output only. The localized text of the review. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleTypeLocalizedText *text;

@end


/**
 *  Request proto for SearchText.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest : GTLRObject

/**
 *  The requested place type. Full list of types supported:
 *  https://developers.google.com/places/supported_types. Only support one
 *  included type.
 */
@property(nonatomic, copy, nullable) NSString *includedType;

/**
 *  Place details will be displayed with the preferred language if available. If
 *  the language code is unspecified or unrecognized, place details of any
 *  language may be returned, with a preference for English if such details
 *  exist. Current list of supported languages:
 *  https://developers.google.com/maps/faq#languagesupport.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The region to search. This location serves as a bias which means results
 *  around given location might be returned. Cannot be set along with
 *  location_restriction.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias *locationBias;

/**
 *  The region to search. This location serves as a restriction which means
 *  results outside given location will not be returned. Cannot be set along
 *  with location_bias.
 */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction *locationRestriction;

/**
 *  Maximum number of results to return. It must be between 1 and 20,
 *  inclusively. If the number is unset, it falls back to the upper limit. If
 *  the number is set to negative or exceeds the upper limit, an
 *  INVALID_ARGUMENT error is returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResultCount;

/**
 *  Filter out results whose average user rating is strictly less than this
 *  limit. A valid value must be an float between 0 and 5 (inclusively) at a 0.5
 *  cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. This is to keep parity
 *  with LocalRefinement_UserRating. The input rating will round up to the
 *  nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all
 *  results with a less than 1.0 rating.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRating;

/**
 *  Used to restrict the search to places that are open at a specific time.
 *  open_now marks if a business is currently open.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *openNow;

/**
 *  Used to restrict the search to places that are marked as certain price
 *  levels. Users can choose any combinations of price levels. Default to select
 *  all price levels.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *priceLevels;

/**
 *  How results will be ranked in the response.
 *
 *  Likely values:
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Distance
 *        Ranks results by distance. (Value: "DISTANCE")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_RankPreferenceUnspecified
 *        RankPreference value not set. Will default to DISTANCE. (Value:
 *        "RANK_PREFERENCE_UNSPECIFIED")
 *    @arg @c kGTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequest_RankPreference_Relevance
 *        Ranks results by relevance. Sort order determined by normal ranking
 *        stack. See SortRefinement::RELEVANCE. (Value: "RELEVANCE")
 */
@property(nonatomic, copy, nullable) NSString *rankPreference;

/**
 *  The Unicode country/region code (CLDR) of the location where the request is
 *  coming from. This parameter is used to display the place details, like
 *  region-specific place name, if available. The parameter can affect results
 *  based on applicable law. For more information, see
 *  http://www.unicode.org/reports/tr35/#unicode_region_subtag. Note that
 *  3-digit region codes are not currently supported.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Used to set strict type filtering for included_type. If set to true, only
 *  results of the same type will be returned. Default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strictTypeFiltering;

/** Required. The text query for textual search. */
@property(nonatomic, copy, nullable) NSString *textQuery;

@end


/**
 *  The region to search. This location serves as a bias which means results
 *  around given location might be returned.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationBias : GTLRObject

/** A circle defined by center point and radius. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleMapsPlacesV1Circle *circle;

/** A rectangle box defined by northeast and southwest corner. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *rectangle;

@end


/**
 *  The region to search. This location serves as a restriction which means
 *  results outside given location will not be returned.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextRequestLocationRestriction : GTLRObject

/** A rectangle box defined by northeast and southwest corner. */
@property(nonatomic, strong, nullable) GTLRMapsPlaces_GoogleGeoTypeViewport *rectangle;

@end


/**
 *  Response proto for SearchText.
 */
@interface GTLRMapsPlaces_GoogleMapsPlacesV1SearchTextResponse : GTLRObject

/** A list of places that meet the user's text search criteria. */
@property(nonatomic, strong, nullable) NSArray<GTLRMapsPlaces_GoogleMapsPlacesV1Place *> *places;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRMapsPlaces_GoogleTypeDate : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  An object that represents a latitude/longitude pair. This is expressed as a
 *  pair of doubles to represent degrees latitude and degrees longitude. Unless
 *  specified otherwise, this object must conform to the WGS84 standard. Values
 *  must be within normalized ranges.
 */
@interface GTLRMapsPlaces_GoogleTypeLatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Localized variant of a text in a particular language.
 */
@interface GTLRMapsPlaces_GoogleTypeLocalizedText : GTLRObject

/**
 *  The text's BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Localized string in the language corresponding to `language_code' below.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
