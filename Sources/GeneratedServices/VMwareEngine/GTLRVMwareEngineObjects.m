// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   VMware Engine API (vmwareengine/v1)
// Description:
//   The Google VMware Engine API lets you programmatically manage VMware
//   environments.
// Documentation:
//   https://cloud.google.com/solutions/vmware-as-a-service

#import <GoogleAPIClientForREST/GTLRVMwareEngineObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRVMwareEngine_AuditLogConfig.logType
NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRVMwareEngine_Cluster.state
NSString * const kGTLRVMwareEngine_Cluster_State_Active        = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Cluster_State_Creating      = @"CREATING";
NSString * const kGTLRVMwareEngine_Cluster_State_Deleting      = @"DELETING";
NSString * const kGTLRVMwareEngine_Cluster_State_Repairing     = @"REPAIRING";
NSString * const kGTLRVMwareEngine_Cluster_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_Cluster_State_Updating      = @"UPDATING";

// GTLRVMwareEngine_ExternalAccessRule.action
NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_ActionUnspecified = @"ACTION_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_Allow = @"ALLOW";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_Deny = @"DENY";

// GTLRVMwareEngine_ExternalAccessRule.state
NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Deleting = @"DELETING";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Updating = @"UPDATING";

// GTLRVMwareEngine_ExternalAddress.state
NSString * const kGTLRVMwareEngine_ExternalAddress_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_ExternalAddress_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_ExternalAddress_State_Deleting = @"DELETING";
NSString * const kGTLRVMwareEngine_ExternalAddress_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_ExternalAddress_State_Updating = @"UPDATING";

// GTLRVMwareEngine_Hcx.state
NSString * const kGTLRVMwareEngine_Hcx_State_Activating       = @"ACTIVATING";
NSString * const kGTLRVMwareEngine_Hcx_State_Active           = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Hcx_State_Creating         = @"CREATING";
NSString * const kGTLRVMwareEngine_Hcx_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRVMwareEngine_HcxActivationKey.state
NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Available = @"AVAILABLE";
NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Consumed = @"CONSUMED";
NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_HcxActivationKey_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRVMwareEngine_LocationMetadata.capabilities
NSString * const kGTLRVMwareEngine_LocationMetadata_Capabilities_CapabilityUnspecified = @"CAPABILITY_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_LocationMetadata_Capabilities_StretchedClusters = @"STRETCHED_CLUSTERS";

// GTLRVMwareEngine_LoggingServer.protocol
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_ProtocolUnspecified = @"PROTOCOL_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Relp = @"RELP";
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Ssl  = @"SSL";
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Tcp  = @"TCP";
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Tls  = @"TLS";
NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Udp  = @"UDP";

// GTLRVMwareEngine_LoggingServer.sourceType
NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_Esxi = @"ESXI";
NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_SourceTypeUnspecified = @"SOURCE_TYPE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_Vcsa = @"VCSA";

// GTLRVMwareEngine_ManagementDnsZoneBinding.state
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Deleting = @"DELETING";
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Failed = @"FAILED";
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Updating = @"UPDATING";

// GTLRVMwareEngine_Network.state
NSString * const kGTLRVMwareEngine_Network_State_Active        = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Network_State_Creating      = @"CREATING";
NSString * const kGTLRVMwareEngine_Network_State_Deleting      = @"DELETING";
NSString * const kGTLRVMwareEngine_Network_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_Network_State_Updating      = @"UPDATING";

// GTLRVMwareEngine_Network.type
NSString * const kGTLRVMwareEngine_Network_Type_Legacy         = @"LEGACY";
NSString * const kGTLRVMwareEngine_Network_Type_Standard       = @"STANDARD";
NSString * const kGTLRVMwareEngine_Network_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRVMwareEngine_NetworkPeering.peerNetworkType
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_DellPowerscale = @"DELL_POWERSCALE";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_GoogleCloudNetappVolumes = @"GOOGLE_CLOUD_NETAPP_VOLUMES";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_NetappCloudVolumes = @"NETAPP_CLOUD_VOLUMES";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PeerNetworkTypeUnspecified = @"PEER_NETWORK_TYPE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PrivateServicesAccess = @"PRIVATE_SERVICES_ACCESS";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_Standard = @"STANDARD";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_ThirdPartyService = @"THIRD_PARTY_SERVICE";
NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_VmwareEngineNetwork = @"VMWARE_ENGINE_NETWORK";

// GTLRVMwareEngine_NetworkPeering.state
NSString * const kGTLRVMwareEngine_NetworkPeering_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_NetworkPeering_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_NetworkPeering_State_Deleting = @"DELETING";
NSString * const kGTLRVMwareEngine_NetworkPeering_State_Inactive = @"INACTIVE";
NSString * const kGTLRVMwareEngine_NetworkPeering_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRVMwareEngine_NetworkService.state
NSString * const kGTLRVMwareEngine_NetworkService_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_NetworkService_State_Reconciling = @"RECONCILING";
NSString * const kGTLRVMwareEngine_NetworkService_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_NetworkService_State_Unprovisioned = @"UNPROVISIONED";

// GTLRVMwareEngine_Node.state
NSString * const kGTLRVMwareEngine_Node_State_Active           = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Node_State_Creating         = @"CREATING";
NSString * const kGTLRVMwareEngine_Node_State_Failed           = @"FAILED";
NSString * const kGTLRVMwareEngine_Node_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_Node_State_Upgrading        = @"UPGRADING";

// GTLRVMwareEngine_NodeType.capabilities
NSString * const kGTLRVMwareEngine_NodeType_Capabilities_CapabilityUnspecified = @"CAPABILITY_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_NodeType_Capabilities_StretchedClusters = @"STRETCHED_CLUSTERS";

// GTLRVMwareEngine_NodeType.kind
NSString * const kGTLRVMwareEngine_NodeType_Kind_KindUnspecified = @"KIND_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_NodeType_Kind_Standard      = @"STANDARD";
NSString * const kGTLRVMwareEngine_NodeType_Kind_StorageOnly   = @"STORAGE_ONLY";

// GTLRVMwareEngine_Nsx.state
NSString * const kGTLRVMwareEngine_Nsx_State_Active           = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Nsx_State_Creating         = @"CREATING";
NSString * const kGTLRVMwareEngine_Nsx_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRVMwareEngine_PeeringRoute.direction
NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_DirectionUnspecified = @"DIRECTION_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_Incoming = @"INCOMING";
NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_Outgoing = @"OUTGOING";

// GTLRVMwareEngine_PeeringRoute.type
NSString * const kGTLRVMwareEngine_PeeringRoute_Type_DynamicPeeringRoute = @"DYNAMIC_PEERING_ROUTE";
NSString * const kGTLRVMwareEngine_PeeringRoute_Type_StaticPeeringRoute = @"STATIC_PEERING_ROUTE";
NSString * const kGTLRVMwareEngine_PeeringRoute_Type_SubnetPeeringRoute = @"SUBNET_PEERING_ROUTE";
NSString * const kGTLRVMwareEngine_PeeringRoute_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRVMwareEngine_PrivateCloud.state
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Active   = @"ACTIVE";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Deleted  = @"DELETED";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Failed   = @"FAILED";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Purging  = @"PURGING";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_PrivateCloud_State_Updating = @"UPDATING";

// GTLRVMwareEngine_PrivateCloud.type
NSString * const kGTLRVMwareEngine_PrivateCloud_Type_Standard  = @"STANDARD";
NSString * const kGTLRVMwareEngine_PrivateCloud_Type_Stretched = @"STRETCHED";
NSString * const kGTLRVMwareEngine_PrivateCloud_Type_TimeLimited = @"TIME_LIMITED";

// GTLRVMwareEngine_PrivateConnection.peeringState
NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringActive = @"PEERING_ACTIVE";
NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringInactive = @"PEERING_INACTIVE";
NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringStateUnspecified = @"PEERING_STATE_UNSPECIFIED";

// GTLRVMwareEngine_PrivateConnection.routingMode
NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_Global = @"GLOBAL";
NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_Regional = @"REGIONAL";
NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_RoutingModeUnspecified = @"ROUTING_MODE_UNSPECIFIED";

// GTLRVMwareEngine_PrivateConnection.state
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Active = @"ACTIVE";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Creating = @"CREATING";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Deleting = @"DELETING";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Failed = @"FAILED";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Unprovisioned = @"UNPROVISIONED";
NSString * const kGTLRVMwareEngine_PrivateConnection_State_Updating = @"UPDATING";

// GTLRVMwareEngine_PrivateConnection.type
NSString * const kGTLRVMwareEngine_PrivateConnection_Type_DellPowerscale = @"DELL_POWERSCALE";
NSString * const kGTLRVMwareEngine_PrivateConnection_Type_NetappCloudVolumes = @"NETAPP_CLOUD_VOLUMES";
NSString * const kGTLRVMwareEngine_PrivateConnection_Type_PrivateServiceAccess = @"PRIVATE_SERVICE_ACCESS";
NSString * const kGTLRVMwareEngine_PrivateConnection_Type_ThirdPartyService = @"THIRD_PARTY_SERVICE";
NSString * const kGTLRVMwareEngine_PrivateConnection_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRVMwareEngine_Subnet.state
NSString * const kGTLRVMwareEngine_Subnet_State_Active         = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Subnet_State_Creating       = @"CREATING";
NSString * const kGTLRVMwareEngine_Subnet_State_Deleting       = @"DELETING";
NSString * const kGTLRVMwareEngine_Subnet_State_Failed         = @"FAILED";
NSString * const kGTLRVMwareEngine_Subnet_State_Reconciling    = @"RECONCILING";
NSString * const kGTLRVMwareEngine_Subnet_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRVMwareEngine_Subnet_State_Updating       = @"UPDATING";

// GTLRVMwareEngine_Vcenter.state
NSString * const kGTLRVMwareEngine_Vcenter_State_Active        = @"ACTIVE";
NSString * const kGTLRVMwareEngine_Vcenter_State_Creating      = @"CREATING";
NSString * const kGTLRVMwareEngine_Vcenter_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRVMwareEngine_VpcNetwork.type
NSString * const kGTLRVMwareEngine_VpcNetwork_Type_GoogleCloud = @"GOOGLE_CLOUD";
NSString * const kGTLRVMwareEngine_VpcNetwork_Type_Internet    = @"INTERNET";
NSString * const kGTLRVMwareEngine_VpcNetwork_Type_Intranet    = @"INTRANET";
NSString * const kGTLRVMwareEngine_VpcNetwork_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_AuditConfig
//

@implementation GTLRVMwareEngine_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRVMwareEngine_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_AuditLogConfig
//

@implementation GTLRVMwareEngine_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_AutoscalingPolicy
//

@implementation GTLRVMwareEngine_AutoscalingPolicy
@dynamic consumedMemoryThresholds, cpuThresholds, grantedMemoryThresholds,
         nodeTypeId, scaleOutSize, storageThresholds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_AutoscalingSettings
//

@implementation GTLRVMwareEngine_AutoscalingSettings
@dynamic autoscalingPolicies, coolDownPeriod, maxClusterNodeCount,
         minClusterNodeCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_AutoscalingSettings_AutoscalingPolicies
//

@implementation GTLRVMwareEngine_AutoscalingSettings_AutoscalingPolicies

+ (Class)classForAdditionalProperties {
  return [GTLRVMwareEngine_AutoscalingPolicy class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Binding
//

@implementation GTLRVMwareEngine_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Cluster
//

@implementation GTLRVMwareEngine_Cluster
@dynamic autoscalingSettings, createTime, management, name, nodeTypeConfigs,
         state, stretchedClusterConfig, uid, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Cluster_NodeTypeConfigs
//

@implementation GTLRVMwareEngine_Cluster_NodeTypeConfigs

+ (Class)classForAdditionalProperties {
  return [GTLRVMwareEngine_NodeTypeConfig class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Credentials
//

@implementation GTLRVMwareEngine_Credentials
@dynamic password, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_DnsBindPermission
//

@implementation GTLRVMwareEngine_DnsBindPermission
@dynamic name, principals;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"principals" : [GTLRVMwareEngine_Principal class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_DnsForwarding
//

@implementation GTLRVMwareEngine_DnsForwarding
@dynamic createTime, forwardingRules, name, updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"forwardingRules" : [GTLRVMwareEngine_ForwardingRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Empty
//

@implementation GTLRVMwareEngine_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Expr
//

@implementation GTLRVMwareEngine_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ExternalAccessRule
//

@implementation GTLRVMwareEngine_ExternalAccessRule
@dynamic action, createTime, descriptionProperty, destinationIpRanges,
         destinationPorts, ipProtocol, name, priority, sourceIpRanges,
         sourcePorts, state, uid, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinationIpRanges" : [GTLRVMwareEngine_IpRange class],
    @"destinationPorts" : [NSString class],
    @"sourceIpRanges" : [GTLRVMwareEngine_IpRange class],
    @"sourcePorts" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ExternalAddress
//

@implementation GTLRVMwareEngine_ExternalAddress
@dynamic createTime, descriptionProperty, externalIp, internalIp, name, state,
         uid, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_FetchNetworkPolicyExternalAddressesResponse
//

@implementation GTLRVMwareEngine_FetchNetworkPolicyExternalAddressesResponse
@dynamic externalAddresses, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"externalAddresses" : [GTLRVMwareEngine_ExternalAddress class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"externalAddresses";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ForwardingRule
//

@implementation GTLRVMwareEngine_ForwardingRule
@dynamic domain, nameServers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nameServers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_GrantDnsBindPermissionRequest
//

@implementation GTLRVMwareEngine_GrantDnsBindPermissionRequest
@dynamic principal, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Hcx
//

@implementation GTLRVMwareEngine_Hcx
@dynamic fqdn, internalIp, state, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_HcxActivationKey
//

@implementation GTLRVMwareEngine_HcxActivationKey
@dynamic activationKey, createTime, name, state, uid;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_IpRange
//

@implementation GTLRVMwareEngine_IpRange
@dynamic externalAddress, ipAddress, ipAddressRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListClustersResponse
//

@implementation GTLRVMwareEngine_ListClustersResponse
@dynamic clusters, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusters" : [GTLRVMwareEngine_Cluster class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"clusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListExternalAccessRulesResponse
//

@implementation GTLRVMwareEngine_ListExternalAccessRulesResponse
@dynamic externalAccessRules, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"externalAccessRules" : [GTLRVMwareEngine_ExternalAccessRule class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"externalAccessRules";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListExternalAddressesResponse
//

@implementation GTLRVMwareEngine_ListExternalAddressesResponse
@dynamic externalAddresses, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"externalAddresses" : [GTLRVMwareEngine_ExternalAddress class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"externalAddresses";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListHcxActivationKeysResponse
//

@implementation GTLRVMwareEngine_ListHcxActivationKeysResponse
@dynamic hcxActivationKeys, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"hcxActivationKeys" : [GTLRVMwareEngine_HcxActivationKey class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"hcxActivationKeys";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListLocationsResponse
//

@implementation GTLRVMwareEngine_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRVMwareEngine_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListLoggingServersResponse
//

@implementation GTLRVMwareEngine_ListLoggingServersResponse
@dynamic loggingServers, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"loggingServers" : [GTLRVMwareEngine_LoggingServer class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"loggingServers";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListManagementDnsZoneBindingsResponse
//

@implementation GTLRVMwareEngine_ListManagementDnsZoneBindingsResponse
@dynamic managementDnsZoneBindings, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"managementDnsZoneBindings" : [GTLRVMwareEngine_ManagementDnsZoneBinding class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"managementDnsZoneBindings";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListNetworkPeeringsResponse
//

@implementation GTLRVMwareEngine_ListNetworkPeeringsResponse
@dynamic networkPeerings, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"networkPeerings" : [GTLRVMwareEngine_NetworkPeering class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"networkPeerings";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListNetworkPoliciesResponse
//

@implementation GTLRVMwareEngine_ListNetworkPoliciesResponse
@dynamic networkPolicies, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"networkPolicies" : [GTLRVMwareEngine_NetworkPolicy class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"networkPolicies";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListNodesResponse
//

@implementation GTLRVMwareEngine_ListNodesResponse
@dynamic nextPageToken, nodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodes" : [GTLRVMwareEngine_Node class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"nodes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListNodeTypesResponse
//

@implementation GTLRVMwareEngine_ListNodeTypesResponse
@dynamic nextPageToken, nodeTypes, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodeTypes" : [GTLRVMwareEngine_NodeType class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"nodeTypes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListOperationsResponse
//

@implementation GTLRVMwareEngine_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRVMwareEngine_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListPeeringRoutesResponse
//

@implementation GTLRVMwareEngine_ListPeeringRoutesResponse
@dynamic nextPageToken, peeringRoutes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"peeringRoutes" : [GTLRVMwareEngine_PeeringRoute class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"peeringRoutes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListPrivateCloudsResponse
//

@implementation GTLRVMwareEngine_ListPrivateCloudsResponse
@dynamic nextPageToken, privateClouds, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"privateClouds" : [GTLRVMwareEngine_PrivateCloud class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"privateClouds";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListPrivateConnectionPeeringRoutesResponse
//

@implementation GTLRVMwareEngine_ListPrivateConnectionPeeringRoutesResponse
@dynamic nextPageToken, peeringRoutes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"peeringRoutes" : [GTLRVMwareEngine_PeeringRoute class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"peeringRoutes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListPrivateConnectionsResponse
//

@implementation GTLRVMwareEngine_ListPrivateConnectionsResponse
@dynamic nextPageToken, privateConnections, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"privateConnections" : [GTLRVMwareEngine_PrivateConnection class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"privateConnections";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListSubnetsResponse
//

@implementation GTLRVMwareEngine_ListSubnetsResponse
@dynamic nextPageToken, subnets, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subnets" : [GTLRVMwareEngine_Subnet class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"subnets";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ListVmwareEngineNetworksResponse
//

@implementation GTLRVMwareEngine_ListVmwareEngineNetworksResponse
@dynamic nextPageToken, unreachable, vmwareEngineNetworks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unreachable" : [NSString class],
    @"vmwareEngineNetworks" : [GTLRVMwareEngine_Network class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"vmwareEngineNetworks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Location
//

@implementation GTLRVMwareEngine_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Location_Labels
//

@implementation GTLRVMwareEngine_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Location_Metadata
//

@implementation GTLRVMwareEngine_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_LocationMetadata
//

@implementation GTLRVMwareEngine_LocationMetadata
@dynamic capabilities;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"capabilities" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_LoggingServer
//

@implementation GTLRVMwareEngine_LoggingServer
@dynamic createTime, hostname, name, port, protocol, sourceType, uid,
         updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ManagementCluster
//

@implementation GTLRVMwareEngine_ManagementCluster
@dynamic clusterId, nodeTypeConfigs, stretchedClusterConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ManagementCluster_NodeTypeConfigs
//

@implementation GTLRVMwareEngine_ManagementCluster_NodeTypeConfigs

+ (Class)classForAdditionalProperties {
  return [GTLRVMwareEngine_NodeTypeConfig class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ManagementDnsZoneBinding
//

@implementation GTLRVMwareEngine_ManagementDnsZoneBinding
@dynamic createTime, descriptionProperty, name, state, uid, updateTime,
         vmwareEngineNetwork, vpcNetwork;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Network
//

@implementation GTLRVMwareEngine_Network
@dynamic createTime, descriptionProperty, ETag, name, state, type, uid,
         updateTime, vpcNetworks;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"vpcNetworks" : [GTLRVMwareEngine_VpcNetwork class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NetworkConfig
//

@implementation GTLRVMwareEngine_NetworkConfig
@dynamic dnsServerIp, managementCidr, managementIpAddressLayoutVersion,
         vmwareEngineNetwork, vmwareEngineNetworkCanonical;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NetworkPeering
//

@implementation GTLRVMwareEngine_NetworkPeering
@dynamic createTime, descriptionProperty, exchangeSubnetRoutes,
         exportCustomRoutes, exportCustomRoutesWithPublicIp, importCustomRoutes,
         importCustomRoutesWithPublicIp, name, peerMtu, peerNetwork,
         peerNetworkType, state, stateDetails, uid, updateTime,
         vmwareEngineNetwork;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NetworkPolicy
//

@implementation GTLRVMwareEngine_NetworkPolicy
@dynamic createTime, descriptionProperty, edgeServicesCidr, externalIp,
         internetAccess, name, uid, updateTime, vmwareEngineNetwork,
         vmwareEngineNetworkCanonical;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NetworkService
//

@implementation GTLRVMwareEngine_NetworkService
@dynamic enabled, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Node
//

@implementation GTLRVMwareEngine_Node
@dynamic customCoreCount, fqdn, internalIp, name, nodeTypeId, state, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NodeType
//

@implementation GTLRVMwareEngine_NodeType
@dynamic availableCustomCoreCounts, capabilities, diskSizeGb, displayName,
         families, kind, memoryGb, name, nodeTypeId, totalCoreCount,
         virtualCpuCount;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"availableCustomCoreCounts" : [NSNumber class],
    @"capabilities" : [NSString class],
    @"families" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_NodeTypeConfig
//

@implementation GTLRVMwareEngine_NodeTypeConfig
@dynamic customCoreCount, nodeCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Nsx
//

@implementation GTLRVMwareEngine_Nsx
@dynamic fqdn, internalIp, state, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Operation
//

@implementation GTLRVMwareEngine_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Operation_Metadata
//

@implementation GTLRVMwareEngine_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Operation_Response
//

@implementation GTLRVMwareEngine_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_OperationMetadata
//

@implementation GTLRVMwareEngine_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_PeeringRoute
//

@implementation GTLRVMwareEngine_PeeringRoute
@dynamic destRange, direction, imported, nextHopRegion, priority, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Policy
//

@implementation GTLRVMwareEngine_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRVMwareEngine_AuditConfig class],
    @"bindings" : [GTLRVMwareEngine_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Principal
//

@implementation GTLRVMwareEngine_Principal
@dynamic serviceAccount, user;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_PrivateCloud
//

@implementation GTLRVMwareEngine_PrivateCloud
@dynamic createTime, deleteTime, descriptionProperty, expireTime, hcx,
         managementCluster, name, networkConfig, nsx, state, type, uid,
         updateTime, vcenter;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_PrivateConnection
//

@implementation GTLRVMwareEngine_PrivateConnection
@dynamic createTime, descriptionProperty, name, peeringId, peeringState,
         routingMode, serviceNetwork, state, type, uid, updateTime,
         vmwareEngineNetwork, vmwareEngineNetworkCanonical;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_RepairManagementDnsZoneBindingRequest
//

@implementation GTLRVMwareEngine_RepairManagementDnsZoneBindingRequest
@dynamic requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ResetNsxCredentialsRequest
//

@implementation GTLRVMwareEngine_ResetNsxCredentialsRequest
@dynamic requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_ResetVcenterCredentialsRequest
//

@implementation GTLRVMwareEngine_ResetVcenterCredentialsRequest
@dynamic requestId, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_RevokeDnsBindPermissionRequest
//

@implementation GTLRVMwareEngine_RevokeDnsBindPermissionRequest
@dynamic principal, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_SetIamPolicyRequest
//

@implementation GTLRVMwareEngine_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Status
//

@implementation GTLRVMwareEngine_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRVMwareEngine_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Status_Details_Item
//

@implementation GTLRVMwareEngine_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_StretchedClusterConfig
//

@implementation GTLRVMwareEngine_StretchedClusterConfig
@dynamic preferredLocation, secondaryLocation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Subnet
//

@implementation GTLRVMwareEngine_Subnet
@dynamic gatewayIp, ipCidrRange, name, state, type, vlanId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_TestIamPermissionsRequest
//

@implementation GTLRVMwareEngine_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_TestIamPermissionsResponse
//

@implementation GTLRVMwareEngine_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Thresholds
//

@implementation GTLRVMwareEngine_Thresholds
@dynamic scaleIn, scaleOut;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_UndeletePrivateCloudRequest
//

@implementation GTLRVMwareEngine_UndeletePrivateCloudRequest
@dynamic requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_Vcenter
//

@implementation GTLRVMwareEngine_Vcenter
@dynamic fqdn, internalIp, state, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVMwareEngine_VpcNetwork
//

@implementation GTLRVMwareEngine_VpcNetwork
@dynamic network, type;
@end
