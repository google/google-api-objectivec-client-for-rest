// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   VMware Engine API (vmwareengine/v1)
// Description:
//   The Google VMware Engine API lets you programmatically manage VMware
//   environments.
// Documentation:
//   https://cloud.google.com/solutions/vmware-as-a-service

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVMwareEngine_AuditConfig;
@class GTLRVMwareEngine_AuditLogConfig;
@class GTLRVMwareEngine_Binding;
@class GTLRVMwareEngine_Cluster;
@class GTLRVMwareEngine_Cluster_NodeTypeConfigs;
@class GTLRVMwareEngine_Expr;
@class GTLRVMwareEngine_ExternalAccessRule;
@class GTLRVMwareEngine_ExternalAddress;
@class GTLRVMwareEngine_ForwardingRule;
@class GTLRVMwareEngine_Hcx;
@class GTLRVMwareEngine_HcxActivationKey;
@class GTLRVMwareEngine_IpRange;
@class GTLRVMwareEngine_Location;
@class GTLRVMwareEngine_Location_Labels;
@class GTLRVMwareEngine_Location_Metadata;
@class GTLRVMwareEngine_LoggingServer;
@class GTLRVMwareEngine_ManagementCluster;
@class GTLRVMwareEngine_ManagementCluster_NodeTypeConfigs;
@class GTLRVMwareEngine_ManagementDnsZoneBinding;
@class GTLRVMwareEngine_Network;
@class GTLRVMwareEngine_NetworkConfig;
@class GTLRVMwareEngine_NetworkPeering;
@class GTLRVMwareEngine_NetworkPolicy;
@class GTLRVMwareEngine_NetworkService;
@class GTLRVMwareEngine_Node;
@class GTLRVMwareEngine_NodeType;
@class GTLRVMwareEngine_NodeTypeConfig;
@class GTLRVMwareEngine_Nsx;
@class GTLRVMwareEngine_Operation;
@class GTLRVMwareEngine_Operation_Metadata;
@class GTLRVMwareEngine_Operation_Response;
@class GTLRVMwareEngine_PeeringRoute;
@class GTLRVMwareEngine_Policy;
@class GTLRVMwareEngine_Principal;
@class GTLRVMwareEngine_PrivateCloud;
@class GTLRVMwareEngine_PrivateConnection;
@class GTLRVMwareEngine_Status;
@class GTLRVMwareEngine_Status_Details_Item;
@class GTLRVMwareEngine_StretchedClusterConfig;
@class GTLRVMwareEngine_Subnet;
@class GTLRVMwareEngine_Vcenter;
@class GTLRVMwareEngine_VpcNetwork;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Cluster.state

/**
 *  The Cluster is operational and can be used by the user.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_Active;
/**
 *  The Cluster is being deployed.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_Creating;
/**
 *  The Cluster is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_Deleting;
/**
 *  The Cluster is undergoing maintenance, for example: a failed node is getting
 *  replaced.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_Repairing;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_StateUnspecified;
/**
 *  Adding or removing of a node to the cluster, any other cluster specific
 *  updates.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Cluster_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_ExternalAccessRule.action

/**
 *  Defaults to allow.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_ActionUnspecified;
/**
 *  Allows connections that match the other specified components.
 *
 *  Value: "ALLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_Allow;
/**
 *  Blocks connections that match the other specified components.
 *
 *  Value: "DENY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_Action_Deny;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_ExternalAccessRule.state

/**
 *  The rule is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Active;
/**
 *  The rule is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Creating;
/**
 *  The rule is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Deleting;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_StateUnspecified;
/**
 *  The rule is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAccessRule_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_ExternalAddress.state

/**
 *  The address is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAddress_State_Active;
/**
 *  The address is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAddress_State_Creating;
/**
 *  The address is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAddress_State_Deleting;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAddress_State_StateUnspecified;
/**
 *  The address is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ExternalAddress_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Hcx.state

/**
 *  The appliance is being activated.
 *
 *  Value: "ACTIVATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Hcx_State_Activating;
/**
 *  The appliance is operational and can be used.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Hcx_State_Active;
/**
 *  The appliance is being deployed.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Hcx_State_Creating;
/**
 *  Unspecified appliance state. This is the default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Hcx_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_HcxActivationKey.state

/**
 *  State of a newly generated activation key.
 *
 *  Value: "AVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Available;
/**
 *  State of key when it has been used to activate HCX appliance.
 *
 *  Value: "CONSUMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Consumed;
/**
 *  State of key when it is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_HcxActivationKey_State_Creating;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_HcxActivationKey_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_LocationMetadata.capabilities

/**
 *  The default value. This value is used if the capability is omitted or
 *  unknown.
 *
 *  Value: "CAPABILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LocationMetadata_Capabilities_CapabilityUnspecified;
/**
 *  Stretch clusters are supported in this location.
 *
 *  Value: "STRETCHED_CLUSTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LocationMetadata_Capabilities_StretchedClusters;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_LoggingServer.protocol

/**
 *  Unspecified communications protocol. This is the default value.
 *
 *  Value: "PROTOCOL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_ProtocolUnspecified;
/**
 *  RELP
 *
 *  Value: "RELP"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Relp;
/**
 *  SSL
 *
 *  Value: "SSL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Ssl;
/**
 *  TCP
 *
 *  Value: "TCP"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Tcp;
/**
 *  TLS
 *
 *  Value: "TLS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Tls;
/**
 *  UDP
 *
 *  Value: "UDP"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_Protocol_Udp;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_LoggingServer.sourceType

/**
 *  Logs produced by ESXI hosts
 *
 *  Value: "ESXI"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_Esxi;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "SOURCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_SourceTypeUnspecified;
/**
 *  Logs produced by vCenter server
 *
 *  Value: "VCSA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_LoggingServer_SourceType_Vcsa;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_ManagementDnsZoneBinding.state

/**
 *  The binding is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Active;
/**
 *  The binding is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Creating;
/**
 *  The binding is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Deleting;
/**
 *  The binding has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Failed;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_StateUnspecified;
/**
 *  The binding is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Network.state

/**
 *  The VMware Engine network is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_State_Active;
/**
 *  The VMware Engine network is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_State_Creating;
/**
 *  The VMware Engine network is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_State_Deleting;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_State_StateUnspecified;
/**
 *  The VMware Engine network is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Network.type

/**
 *  Network type used by private clouds created in projects without a network of
 *  type `STANDARD`. This network type is no longer used for new VMware Engine
 *  private cloud deployments.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_Type_Legacy;
/**
 *  Standard network type used for private cloud connectivity.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_Type_Standard;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Network_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_NetworkPeering.peerNetworkType

/**
 *  Peering connection used for connecting to Dell PowerScale Filers
 *
 *  Value: "DELL_POWERSCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_DellPowerscale;
/**
 *  Peering connection used for connecting to Google Cloud NetApp Volumes.
 *
 *  Value: "GOOGLE_CLOUD_NETAPP_VOLUMES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_GoogleCloudNetappVolumes;
/**
 *  Peering connection used for connecting to NetApp Cloud Volumes.
 *
 *  Value: "NETAPP_CLOUD_VOLUMES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_NetappCloudVolumes;
/**
 *  Unspecified
 *
 *  Value: "PEER_NETWORK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PeerNetworkTypeUnspecified;
/**
 *  Peering connection used for establishing [private services
 *  access](https://cloud.google.com/vpc/docs/private-services-access).
 *
 *  Value: "PRIVATE_SERVICES_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PrivateServicesAccess;
/**
 *  Peering connection used for connecting to another VPC network established by
 *  the same user. For example, a peering connection to another VPC network in
 *  the same project or to an on-premises network.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_Standard;
/**
 *  Peering connection used for connecting to third-party services. Most
 *  third-party services require manual setup of reverse peering on the VPC
 *  network associated with the third-party service.
 *
 *  Value: "THIRD_PARTY_SERVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_ThirdPartyService;
/**
 *  Peering connection used for connecting to another VMware Engine network.
 *
 *  Value: "VMWARE_ENGINE_NETWORK"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_VmwareEngineNetwork;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_NetworkPeering.state

/**
 *  The peering is active.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_State_Active;
/**
 *  The peering is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_State_Creating;
/**
 *  The peering is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_State_Deleting;
/**
 *  The peering is not active.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_State_Inactive;
/**
 *  Unspecified network peering state. This is the default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkPeering_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_NetworkService.state

/**
 *  Service is active.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkService_State_Active;
/**
 *  Service is in the process of being provisioned/deprovisioned.
 *
 *  Value: "RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkService_State_Reconciling;
/**
 *  Unspecified service state. This is the default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkService_State_StateUnspecified;
/**
 *  Service is not provisioned.
 *
 *  Value: "UNPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NetworkService_State_Unprovisioned;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Node.state

/**
 *  Node is operational and can be used by the user.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Node_State_Active;
/**
 *  Node is being provisioned.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Node_State_Creating;
/**
 *  Node is in a failed state.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Node_State_Failed;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Node_State_StateUnspecified;
/**
 *  Node is undergoing maintenance, e.g.: during private cloud upgrade.
 *
 *  Value: "UPGRADING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Node_State_Upgrading;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_NodeType.capabilities

/**
 *  The default value. This value is used if the capability is omitted or
 *  unknown.
 *
 *  Value: "CAPABILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NodeType_Capabilities_CapabilityUnspecified;
/**
 *  This node type supports stretch clusters.
 *
 *  Value: "STRETCHED_CLUSTERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NodeType_Capabilities_StretchedClusters;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_NodeType.kind

/**
 *  The default value. This value should never be used.
 *
 *  Value: "KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NodeType_Kind_KindUnspecified;
/**
 *  Standard HCI node.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NodeType_Kind_Standard;
/**
 *  Storage only Node.
 *
 *  Value: "STORAGE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_NodeType_Kind_StorageOnly;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Nsx.state

/**
 *  The appliance is operational and can be used.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Nsx_State_Active;
/**
 *  The appliance is being deployed.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Nsx_State_Creating;
/**
 *  Unspecified appliance state. This is the default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Nsx_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PeeringRoute.direction

/**
 *  Unspecified exchanged routes direction. This is default.
 *
 *  Value: "DIRECTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_DirectionUnspecified;
/**
 *  Routes imported from the peer network.
 *
 *  Value: "INCOMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_Incoming;
/**
 *  Routes exported to the peer network.
 *
 *  Value: "OUTGOING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Direction_Outgoing;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PeeringRoute.type

/**
 *  Dynamic routes in the peer network.
 *
 *  Value: "DYNAMIC_PEERING_ROUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Type_DynamicPeeringRoute;
/**
 *  Static routes in the peer network.
 *
 *  Value: "STATIC_PEERING_ROUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Type_StaticPeeringRoute;
/**
 *  Created, updated, and removed automatically by Google Cloud when subnets are
 *  created, modified, or deleted in the peer network.
 *
 *  Value: "SUBNET_PEERING_ROUTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Type_SubnetPeeringRoute;
/**
 *  Unspecified peering route type. This is the default value.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PeeringRoute_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateCloud.state

/**
 *  The private cloud is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Active;
/**
 *  The private cloud is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Creating;
/**
 *  The private cloud is scheduled for deletion. The deletion process can be
 *  cancelled by using the corresponding undelete method.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Deleted;
/**
 *  The private cloud is in failed state.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Failed;
/**
 *  The private cloud is irreversibly deleted and is being removed from the
 *  system.
 *
 *  Value: "PURGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Purging;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_StateUnspecified;
/**
 *  The private cloud is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateCloud.type

/**
 *  Standard private is a zonal resource, with 3+ nodes. Default type.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_Type_Standard;
/**
 *  Stretched private cloud is a regional resource with redundancy, with a
 *  minimum of 6 nodes, nodes count has to be even.
 *
 *  Value: "STRETCHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_Type_Stretched;
/**
 *  Time limited private cloud is a zonal resource, can have only 1 node and has
 *  limited life span. Will be deleted after defined period of time, can be
 *  converted into standard private cloud by expanding it up to 3 or more nodes.
 *
 *  Value: "TIME_LIMITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateCloud_Type_TimeLimited;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateConnection.peeringState

/**
 *  The peering is in active state.
 *
 *  Value: "PEERING_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringActive;
/**
 *  The peering is in inactive state.
 *
 *  Value: "PEERING_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringInactive;
/**
 *  The default value. This value is used if the peering state is omitted or
 *  unknown.
 *
 *  Value: "PEERING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateConnection.routingMode

/**
 *  Global Routing Mode
 *
 *  Value: "GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_Global;
/**
 *  Regional Routing Mode
 *
 *  Value: "REGIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_Regional;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "ROUTING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_RoutingMode_RoutingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateConnection.state

/**
 *  The private connection is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Active;
/**
 *  The private connection is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Creating;
/**
 *  The private connection is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Deleting;
/**
 *  The private connection is in failed state.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Failed;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_StateUnspecified;
/**
 *  The private connection is not provisioned, since no private cloud is present
 *  for which this private connection is needed.
 *
 *  Value: "UNPROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Unprovisioned;
/**
 *  The private connection is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_PrivateConnection.type

/**
 *  Connection used for connecting to Dell PowerScale.
 *
 *  Value: "DELL_POWERSCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_Type_DellPowerscale;
/**
 *  Connection used for connecting to NetApp Cloud Volumes.
 *
 *  Value: "NETAPP_CLOUD_VOLUMES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_Type_NetappCloudVolumes;
/**
 *  Connection used for establishing [private services
 *  access](https://cloud.google.com/vpc/docs/private-services-access).
 *
 *  Value: "PRIVATE_SERVICE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_Type_PrivateServiceAccess;
/**
 *  Connection used for connecting to third-party services.
 *
 *  Value: "THIRD_PARTY_SERVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_Type_ThirdPartyService;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_PrivateConnection_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Subnet.state

/**
 *  The subnet is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Active;
/**
 *  The subnet is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Creating;
/**
 *  The subnet is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Deleting;
/**
 *  Last operation on the subnet did not succeed. Subnet's payload is reverted
 *  back to its most recent working state.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Failed;
/**
 *  Changes requested in the last operation are being propagated.
 *
 *  Value: "RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Reconciling;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_StateUnspecified;
/**
 *  The subnet is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Subnet_State_Updating;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_Vcenter.state

/**
 *  The appliance is operational and can be used.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Vcenter_State_Active;
/**
 *  The appliance is being deployed.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Vcenter_State_Creating;
/**
 *  Unspecified appliance state. This is the default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_Vcenter_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMwareEngine_VpcNetwork.type

/**
 *  VPC network used for access to Google Cloud services like Cloud Storage.
 *
 *  Value: "GOOGLE_CLOUD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_VpcNetwork_Type_GoogleCloud;
/**
 *  VPC network used for internet access to and from a private cloud.
 *
 *  Value: "INTERNET"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_VpcNetwork_Type_Internet;
/**
 *  VPC network that will be peered with a consumer VPC network or the intranet
 *  VPC of another VMware Engine network. Access a private cloud through Compute
 *  Engine VMs on a peered VPC network or an on-premises resource connected to a
 *  peered consumer VPC network.
 *
 *  Value: "INTRANET"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_VpcNetwork_Type_Intranet;
/**
 *  The default value. This value should never be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMwareEngine_VpcNetwork_Type_TypeUnspecified;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRVMwareEngine_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRVMwareEngine_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRVMwareEngine_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRVMwareEngine_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRVMwareEngine_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRVMwareEngine_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A cluster in a private cloud.
 */
@interface GTLRVMwareEngine_Cluster : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. True if the cluster is a management cluster; false otherwise.
 *  There can only be one management cluster in a private cloud and it has to be
 *  the first one.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *management;

/**
 *  Output only. The resource name of this cluster. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The map of cluster node types in this cluster, where the key is
 *  canonical identifier of the node type (corresponds to the `NodeType`).
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Cluster_NodeTypeConfigs *nodeTypeConfigs;

/**
 *  Output only. State of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Cluster_State_Active The Cluster is operational
 *        and can be used by the user. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Cluster_State_Creating The Cluster is being
 *        deployed. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Cluster_State_Deleting The Cluster is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_Cluster_State_Repairing The Cluster is
 *        undergoing maintenance, for example: a failed node is getting
 *        replaced. (Value: "REPAIRING")
 *    @arg @c kGTLRVMwareEngine_Cluster_State_StateUnspecified The default
 *        value. This value should never be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_Cluster_State_Updating Adding or removing of a
 *        node to the cluster, any other cluster specific updates. (Value:
 *        "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. Configuration of a stretched cluster. Required for clusters that
 *  belong to a STRETCHED private cloud.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_StretchedClusterConfig *stretchedClusterConfig;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Required. The map of cluster node types in this cluster, where the key is
 *  canonical identifier of the node type (corresponds to the `NodeType`).
 *
 *  @note This class is documented as having more properties of
 *        GTLRVMwareEngine_NodeTypeConfig. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_Cluster_NodeTypeConfigs : GTLRObject
@end


/**
 *  Credentials for a private cloud.
 */
@interface GTLRVMwareEngine_Credentials : GTLRObject

/** Initial password. */
@property(nonatomic, copy, nullable) NSString *password;

/** Initial username. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  DnsBindPermission resource that contains the accounts having the consumer
 *  DNS bind permission on the corresponding intranet VPC of the consumer
 *  project.
 */
@interface GTLRVMwareEngine_DnsBindPermission : GTLRObject

/**
 *  Required. Output only. The name of the resource which stores the
 *  users/service accounts having the permission to bind to the corresponding
 *  intranet VPC of the consumer project. DnsBindPermission is a global resource
 *  and location can only be global. Resource names are schemeless URIs that
 *  follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/global/dnsBindPermission`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Users/Service accounts which have access for binding on the
 *  intranet VPC project corresponding to the consumer project.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Principal *> *principals;

@end


/**
 *  DNS forwarding config. This config defines a list of domain to name server
 *  mappings, and is attached to the private cloud for custom domain resolution.
 */
@interface GTLRVMwareEngine_DnsForwarding : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. List of domain mappings to configure */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_ForwardingRule *> *forwardingRules;

/**
 *  Output only. The resource name of this DNS profile. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/dnsForwarding`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRVMwareEngine_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRVMwareEngine_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  External access firewall rules for filtering incoming traffic destined to
 *  `ExternalAddress` resources.
 */
@interface GTLRVMwareEngine_ExternalAccessRule : GTLRObject

/**
 *  The action that the external access rule performs.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_Action_ActionUnspecified
 *        Defaults to allow. (Value: "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_Action_Allow Allows
 *        connections that match the other specified components. (Value:
 *        "ALLOW")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_Action_Deny Blocks
 *        connections that match the other specified components. (Value: "DENY")
 */
@property(nonatomic, copy, nullable) NSString *action;

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description for this external access rule.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  If destination ranges are specified, the external access rule applies only
 *  to the traffic that has a destination IP address in these ranges. The
 *  specified IP addresses must have reserved external IP addresses in the scope
 *  of the parent network policy. To match all external IP addresses in the
 *  scope of the parent network policy, specify `0.0.0.0/0`. To match a specific
 *  external IP address, specify it using the `IpRange.external_address`
 *  property.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_IpRange *> *destinationIpRanges;

/**
 *  A list of destination ports to which the external access rule applies. This
 *  field is only applicable for the UDP or TCP protocol. Each entry must be
 *  either an integer or a range. For example: `["22"]`, `["80","443"]`, or
 *  `["12345-12349"]`. To match all destination ports, specify `["0-65535"]`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinationPorts;

/**
 *  The IP protocol to which the external access rule applies. This value can be
 *  one of the following three protocol strings (not case-sensitive): `tcp`,
 *  `udp`, or `icmp`.
 */
@property(nonatomic, copy, nullable) NSString *ipProtocol;

/**
 *  Output only. The resource name of this external access rule. Resource names
 *  are schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  External access rule priority, which determines the external access rule to
 *  use when multiple rules apply. If multiple rules have the same priority,
 *  their ordering is non-deterministic. If specific ordering is required,
 *  assign unique priorities to enforce such ordering. The external access rule
 *  priority is an integer from 100 to 4096, both inclusive. Lower integers
 *  indicate higher precedence. For example, a rule with priority `100` has
 *  higher precedence than a rule with priority `101`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  If source ranges are specified, the external access rule applies only to
 *  traffic that has a source IP address in these ranges. These ranges can
 *  either be expressed in the CIDR format or as an IP address. As only inbound
 *  rules are supported, `ExternalAddress` resources cannot be the source IP
 *  addresses of an external access rule. To match all source addresses, specify
 *  `0.0.0.0/0`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_IpRange *> *sourceIpRanges;

/**
 *  A list of source ports to which the external access rule applies. This field
 *  is only applicable for the UDP or TCP protocol. Each entry must be either an
 *  integer or a range. For example: `["22"]`, `["80","443"]`, or
 *  `["12345-12349"]`. To match all source ports, specify `["0-65535"]`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourcePorts;

/**
 *  Output only. The state of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_State_Active The rule is
 *        ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_State_Creating The rule is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_State_Deleting The rule is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_State_StateUnspecified The
 *        default value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_ExternalAccessRule_State_Updating The rule is
 *        being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Represents an allocated external IP address and its corresponding internal
 *  IP address in a private cloud.
 */
@interface GTLRVMwareEngine_ExternalAddress : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description for this resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The external IP address of a workload VM. */
@property(nonatomic, copy, nullable) NSString *externalIp;

/** The internal IP address of a workload VM. */
@property(nonatomic, copy, nullable) NSString *internalIp;

/**
 *  Output only. The resource name of this external IP address. Resource names
 *  are schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The state of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_ExternalAddress_State_Active The address is
 *        ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_ExternalAddress_State_Creating The address is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_ExternalAddress_State_Deleting The address is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_ExternalAddress_State_StateUnspecified The
 *        default value. This value should never be used. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_ExternalAddress_State_Updating The address is
 *        being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Response message for VmwareEngine.FetchNetworkPolicyExternalAddresses
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "externalAddresses" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_FetchNetworkPolicyExternalAddressesResponse : GTLRCollectionObject

/**
 *  A list of external IP addresses assigned to VMware workload VMs within the
 *  scope of the given network policy.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_ExternalAddress *> *externalAddresses;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A forwarding rule is a mapping of a `domain` to `name_servers`. This mapping
 *  allows VMware Engine to resolve domains for attached private clouds by
 *  forwarding DNS requests for a given domain to the specified nameservers.
 */
@interface GTLRVMwareEngine_ForwardingRule : GTLRObject

/** Required. Domain used to resolve a `name_servers` list. */
@property(nonatomic, copy, nullable) NSString *domain;

/** Required. List of DNS servers to use for domain resolution */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nameServers;

@end


/**
 *  Request message for VmwareEngine.GrantDnsBindPermission
 */
@interface GTLRVMwareEngine_GrantDnsBindPermissionRequest : GTLRObject

/**
 *  Required. The consumer provided user/service account which needs to be
 *  granted permission to bind with the intranet VPC corresponding to the
 *  consumer project.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Principal *principal;

/**
 *  Optional. A request ID to identify requests. Specify a unique request ID so
 *  that if you must retry your request, the server will know to ignore the
 *  request if it has already been completed. The server guarantees that a
 *  request doesn't result in creation of duplicate commitments for at least 60
 *  minutes. For example, consider a situation where you make an initial request
 *  and the request times out. If you make the request again with the same
 *  request ID, the server can check if original operation with the same request
 *  ID was received, and if so, will ignore the second request. This prevents
 *  clients from accidentally creating duplicate commitments. The request ID
 *  must be a valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Details about a HCX Cloud Manager appliance.
 */
@interface GTLRVMwareEngine_Hcx : GTLRObject

/** Fully qualified domain name of the appliance. */
@property(nonatomic, copy, nullable) NSString *fqdn;

/** Internal IP address of the appliance. */
@property(nonatomic, copy, nullable) NSString *internalIp;

/**
 *  Output only. The state of the appliance.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Hcx_State_Activating The appliance is being
 *        activated. (Value: "ACTIVATING")
 *    @arg @c kGTLRVMwareEngine_Hcx_State_Active The appliance is operational
 *        and can be used. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Hcx_State_Creating The appliance is being
 *        deployed. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Hcx_State_StateUnspecified Unspecified appliance
 *        state. This is the default value. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Version of the appliance. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  HCX activation key. A default key is created during private cloud
 *  provisioning, but this behavior is subject to change and you should always
 *  verify active keys. Use VmwareEngine.ListHcxActivationKeys to retrieve
 *  existing keys and VmwareEngine.CreateHcxActivationKey to create new ones.
 */
@interface GTLRVMwareEngine_HcxActivationKey : GTLRObject

/** Output only. HCX activation key. */
@property(nonatomic, copy, nullable) NSString *activationKey;

/** Output only. Creation time of HCX activation key. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The resource name of this HcxActivationKey. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of HCX activation key.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_HcxActivationKey_State_Available State of a
 *        newly generated activation key. (Value: "AVAILABLE")
 *    @arg @c kGTLRVMwareEngine_HcxActivationKey_State_Consumed State of key
 *        when it has been used to activate HCX appliance. (Value: "CONSUMED")
 *    @arg @c kGTLRVMwareEngine_HcxActivationKey_State_Creating State of key
 *        when it is being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_HcxActivationKey_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  An IP range provided in any one of the supported formats.
 */
@interface GTLRVMwareEngine_IpRange : GTLRObject

/**
 *  The name of an `ExternalAddress` resource. The external address must have
 *  been reserved in the scope of this external access rule's parent network
 *  policy. Provide the external address name in the form of
 *  `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`.
 *  For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
 */
@property(nonatomic, copy, nullable) NSString *externalAddress;

/** A single IP address. For example: `10.0.0.5`. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/** An IP address range in the CIDR format. For example: `10.0.0.0/24`. */
@property(nonatomic, copy, nullable) NSString *ipAddressRange;

@end


/**
 *  Response message for VmwareEngine.ListClusters
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "clusters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListClustersResponse : GTLRCollectionObject

/**
 *  A list of private cloud clusters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Cluster *> *clusters;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListExternalAccessRules
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "externalAccessRules" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListExternalAccessRulesResponse : GTLRCollectionObject

/**
 *  A list of external access firewall rules.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_ExternalAccessRule *> *externalAccessRules;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListExternalAddresses
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "externalAddresses" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListExternalAddressesResponse : GTLRCollectionObject

/**
 *  A list of external IP addresses.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_ExternalAddress *> *externalAddresses;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListHcxActivationKeys
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "hcxActivationKeys" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListHcxActivationKeysResponse : GTLRCollectionObject

/**
 *  List of HCX activation keys.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_HcxActivationKey *> *hcxActivationKeys;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for VmwareEngine.ListLoggingServers
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "loggingServers" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRVMwareEngine_ListLoggingServersResponse : GTLRCollectionObject

/**
 *  A list of Logging Servers.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_LoggingServer *> *loggingServers;

/**
 *  A token, which can be send as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListManagementDnsZoneBindings
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "managementDnsZoneBindings" property. If returned as the result of
 *        a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListManagementDnsZoneBindingsResponse : GTLRCollectionObject

/**
 *  A list of management DNS zone bindings.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_ManagementDnsZoneBinding *> *managementDnsZoneBindings;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListNetworkPeerings
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "networkPeerings" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRVMwareEngine_ListNetworkPeeringsResponse : GTLRCollectionObject

/**
 *  A list of network peerings.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_NetworkPeering *> *networkPeerings;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListNetworkPolicies
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "networkPolicies" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRVMwareEngine_ListNetworkPoliciesResponse : GTLRCollectionObject

/**
 *  A list of network policies.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_NetworkPolicy *> *networkPolicies;

/**
 *  A token, which can be send as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListNodes
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "nodes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListNodesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The nodes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Node *> *nodes;

@end


/**
 *  Response message for VmwareEngine.ListNodeTypes
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "nodeTypes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListNodeTypesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of Node Types.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_NodeType *> *nodeTypes;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Operation *> *operations;

@end


/**
 *  Response message for VmwareEngine.ListPeeringRoutes
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "peeringRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListPeeringRoutesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of peering routes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_PeeringRoute *> *peeringRoutes;

@end


/**
 *  Response message for VmwareEngine.ListPrivateClouds
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "privateClouds" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListPrivateCloudsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of private clouds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_PrivateCloud *> *privateClouds;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListPrivateConnectionPeeringRoutes
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "peeringRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListPrivateConnectionPeeringRoutesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of peering routes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_PeeringRoute *> *peeringRoutes;

@end


/**
 *  Response message for VmwareEngine.ListPrivateConnections
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "privateConnections" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListPrivateConnectionsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of private connections.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_PrivateConnection *> *privateConnections;

/** Unreachable resources. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListSubnets
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subnets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMwareEngine_ListSubnetsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of subnets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Subnet *> *subnets;

/**
 *  Locations that could not be reached when making an aggregated query using
 *  wildcards.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for VmwareEngine.ListVmwareEngineNetworks
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "vmwareEngineNetworks" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMwareEngine_ListVmwareEngineNetworksResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

/**
 *  A list of VMware Engine networks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Network *> *vmwareEngineNetworks;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRVMwareEngine_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMwareEngine_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_Location_Metadata : GTLRObject
@end


/**
 *  VmwareEngine specific metadata for the given google.cloud.location.Location.
 *  It is returned as a content of the `google.cloud.location.Location.metadata`
 *  field.
 */
@interface GTLRVMwareEngine_LocationMetadata : GTLRObject

/** Output only. Capabilities of this location. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capabilities;

@end


/**
 *  Logging server to receive vCenter or ESXi logs.
 */
@interface GTLRVMwareEngine_LoggingServer : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. Fully-qualified domain name (FQDN) or IP Address of the logging
 *  server.
 */
@property(nonatomic, copy, nullable) NSString *hostname;

/**
 *  Output only. The resource name of this logging server. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Port number at which the logging server receives logs.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Required. Protocol used by vCenter to send logs to a logging server.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_ProtocolUnspecified
 *        Unspecified communications protocol. This is the default value.
 *        (Value: "PROTOCOL_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_Relp RELP (Value: "RELP")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_Ssl SSL (Value: "SSL")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_Tcp TCP (Value: "TCP")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_Tls TLS (Value: "TLS")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_Protocol_Udp UDP (Value: "UDP")
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  Required. The type of component that produces logs that will be forwarded to
 *  this logging server.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_LoggingServer_SourceType_Esxi Logs produced by
 *        ESXI hosts (Value: "ESXI")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_SourceType_SourceTypeUnspecified
 *        The default value. This value should never be used. (Value:
 *        "SOURCE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_LoggingServer_SourceType_Vcsa Logs produced by
 *        vCenter server (Value: "VCSA")
 */
@property(nonatomic, copy, nullable) NSString *sourceType;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Management cluster configuration.
 */
@interface GTLRVMwareEngine_ManagementCluster : GTLRObject

/**
 *  Required. The user-provided identifier of the new `Cluster`. The identifier
 *  must meet the following requirements: * Only contains 1-63 alphanumeric
 *  characters and hyphens * Begins with an alphabetical character * Ends with a
 *  non-hyphen character * Not formatted as a UUID * Complies with [RFC
 *  1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The map of cluster node types in this cluster, where the key is
 *  canonical identifier of the node type (corresponds to the `NodeType`).
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_ManagementCluster_NodeTypeConfigs *nodeTypeConfigs;

/**
 *  Optional. Configuration of a stretched cluster. Required for STRETCHED
 *  private clouds.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_StretchedClusterConfig *stretchedClusterConfig;

@end


/**
 *  Required. The map of cluster node types in this cluster, where the key is
 *  canonical identifier of the node type (corresponds to the `NodeType`).
 *
 *  @note This class is documented as having more properties of
 *        GTLRVMwareEngine_NodeTypeConfig. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_ManagementCluster_NodeTypeConfigs : GTLRObject
@end


/**
 *  Represents a binding between a network and the management DNS zone. A
 *  management DNS zone is the Cloud DNS cross-project binding zone that VMware
 *  Engine creates for each private cloud. It contains FQDNs and corresponding
 *  IP addresses for the private cloud's ESXi hosts and management VM appliances
 *  like vCenter and NSX Manager.
 */
@interface GTLRVMwareEngine_ManagementDnsZoneBinding : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description for this resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The resource name of this binding. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/managementDnsZoneBindings/my-management-dns-zone-binding`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The state of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Active The
 *        binding is ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Creating The
 *        binding is being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Deleting The
 *        binding is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Failed The
 *        binding has failed. (Value: "FAILED")
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_StateUnspecified
 *        The default value. This value should never be used. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_ManagementDnsZoneBinding_State_Updating The
 *        binding is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Network to bind is a VMware Engine network. Specify the name in the
 *  following form for VMware engine network:
 *  `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
 *  `{project}` can either be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetwork;

/**
 *  Network to bind is a standard consumer VPC. Specify the name in the
 *  following form for consumer VPC network:
 *  `projects/{project}/global/networks/{network_id}`. `{project}` can either be
 *  a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  VMware Engine network resource that provides connectivity for VMware Engine
 *  private clouds.
 */
@interface GTLRVMwareEngine_Network : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description for this VMware Engine network.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Checksum that may be sent on update and delete requests to ensure that the
 *  user-provided value is up to date before the server processes a request. The
 *  server computes checksums based on the value of other fields in the request.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. The resource name of the VMware Engine network. Resource names
 *  are schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/global/vmwareEngineNetworks/my-network`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of the VMware Engine network.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Network_State_Active The VMware Engine network
 *        is ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Network_State_Creating The VMware Engine network
 *        is being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Network_State_Deleting The VMware Engine network
 *        is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_Network_State_StateUnspecified The default
 *        value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_Network_State_Updating The VMware Engine network
 *        is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Required. VMware Engine network type.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Network_Type_Legacy Network type used by private
 *        clouds created in projects without a network of type `STANDARD`. This
 *        network type is no longer used for new VMware Engine private cloud
 *        deployments. (Value: "LEGACY")
 *    @arg @c kGTLRVMwareEngine_Network_Type_Standard Standard network type used
 *        for private cloud connectivity. (Value: "STANDARD")
 *    @arg @c kGTLRVMwareEngine_Network_Type_TypeUnspecified The default value.
 *        This value should never be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. VMware Engine service VPC networks that provide connectivity
 *  from a private cloud to customer projects, the internet, and other Google
 *  Cloud services.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_VpcNetwork *> *vpcNetworks;

@end


/**
 *  Network configuration in the consumer project with which the peering has to
 *  be done.
 */
@interface GTLRVMwareEngine_NetworkConfig : GTLRObject

/**
 *  Output only. DNS Server IP of the Private Cloud. All DNS queries can be
 *  forwarded to this address for name resolution of Private Cloud's management
 *  entities like vCenter, NSX-T Manager and ESXi hosts.
 */
@property(nonatomic, copy, nullable) NSString *dnsServerIp;

/** Required. Management CIDR used by VMware management appliances. */
@property(nonatomic, copy, nullable) NSString *managementCidr;

/**
 *  Output only. The IP address layout version of the management IP address
 *  range. Possible versions include: * `managementIpAddressLayoutVersion=1`:
 *  Indicates the legacy IP address layout used by some existing private clouds.
 *  This is no longer supported for new private clouds as it does not support
 *  all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest
 *  IP address layout used by all newly created private clouds. This version
 *  supports all current features.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managementIpAddressLayoutVersion;

/**
 *  Optional. The relative resource name of the VMware Engine network attached
 *  to the private cloud. Specify the name in the following form:
 *  `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 *  where `{project}` can either be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetwork;

/**
 *  Output only. The canonical name of the VMware Engine network in the form:
 *  `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetworkCanonical;

@end


/**
 *  Details of a network peering.
 */
@interface GTLRVMwareEngine_NetworkPeering : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. User-provided description for this network peering.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. True if full mesh connectivity is created and managed
 *  automatically between peered networks; false otherwise. Currently this field
 *  is always true because Google Compute Engine automatically creates and
 *  manages subnetwork routes between two VPC networks when peering state is
 *  'ACTIVE'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exchangeSubnetRoutes;

/**
 *  Optional. True if custom routes are exported to the peered network; false
 *  otherwise. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportCustomRoutes;

/**
 *  Optional. True if all subnet routes with a public IP address range are
 *  exported; false otherwise. The default value is true. IPv4 special-use
 *  ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
 *  exported to peers and are not controlled by this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportCustomRoutesWithPublicIp;

/**
 *  Optional. True if custom routes are imported from the peered network; false
 *  otherwise. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importCustomRoutes;

/**
 *  Optional. True if all subnet routes with public IP address range are
 *  imported; false otherwise. The default value is true. IPv4 special-use
 *  ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
 *  imported to peers and are not controlled by this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importCustomRoutesWithPublicIp;

/**
 *  Output only. The resource name of the network peering. NetworkPeering is a
 *  global resource and location can only be global. Resource names are
 *  scheme-less URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/global/networkPeerings/my-peering`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Maximum transmission unit (MTU) in bytes. The default value is
 *  `1500`. If a value of `0` is provided for this field, VMware Engine uses the
 *  default value instead.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *peerMtu;

/**
 *  Required. The relative resource name of the network to peer with a standard
 *  VMware Engine network. The provided network can be a consumer VPC network or
 *  another standard VMware Engine network. If the `peer_network_type` is
 *  VMWARE_ENGINE_NETWORK, specify the name in the form:
 *  `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
 *  Otherwise specify the name in the form:
 *  `projects/{project}/global/networks/{network_id}`, where `{project}` can
 *  either be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *peerNetwork;

/**
 *  Required. The type of the network to peer with the VMware Engine network.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_DellPowerscale
 *        Peering connection used for connecting to Dell PowerScale Filers
 *        (Value: "DELL_POWERSCALE")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_GoogleCloudNetappVolumes
 *        Peering connection used for connecting to Google Cloud NetApp Volumes.
 *        (Value: "GOOGLE_CLOUD_NETAPP_VOLUMES")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_NetappCloudVolumes
 *        Peering connection used for connecting to NetApp Cloud Volumes.
 *        (Value: "NETAPP_CLOUD_VOLUMES")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PeerNetworkTypeUnspecified
 *        Unspecified (Value: "PEER_NETWORK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_PrivateServicesAccess
 *        Peering connection used for establishing [private services
 *        access](https://cloud.google.com/vpc/docs/private-services-access).
 *        (Value: "PRIVATE_SERVICES_ACCESS")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_Standard Peering
 *        connection used for connecting to another VPC network established by
 *        the same user. For example, a peering connection to another VPC
 *        network in the same project or to an on-premises network. (Value:
 *        "STANDARD")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_ThirdPartyService
 *        Peering connection used for connecting to third-party services. Most
 *        third-party services require manual setup of reverse peering on the
 *        VPC network associated with the third-party service. (Value:
 *        "THIRD_PARTY_SERVICE")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_PeerNetworkType_VmwareEngineNetwork
 *        Peering connection used for connecting to another VMware Engine
 *        network. (Value: "VMWARE_ENGINE_NETWORK")
 */
@property(nonatomic, copy, nullable) NSString *peerNetworkType;

/**
 *  Output only. State of the network peering. This field has a value of
 *  'ACTIVE' when there's a matching configuration in the peer network. New
 *  values may be added to this enum when appropriate.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_State_Active The peering is
 *        active. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_State_Creating The peering is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_State_Deleting The peering is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_State_Inactive The peering is not
 *        active. (Value: "INACTIVE")
 *    @arg @c kGTLRVMwareEngine_NetworkPeering_State_StateUnspecified
 *        Unspecified network peering state. This is the default value. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Output Only. Details about the current state of the network
 *  peering.
 */
@property(nonatomic, copy, nullable) NSString *stateDetails;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Required. The relative resource name of the VMware Engine network. Specify
 *  the name in the following form:
 *  `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 *  where `{project}` can either be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetwork;

@end


/**
 *  Represents a network policy resource. Network policies are regional
 *  resources. You can use a network policy to enable or disable internet access
 *  and external IP access. Network policies are associated with a VMware Engine
 *  network, which might span across regions. For a given region, a network
 *  policy applies to all private clouds in the VMware Engine network associated
 *  with the policy.
 */
@interface GTLRVMwareEngine_NetworkPolicy : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. User-provided description for this network policy.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. IP address range in CIDR notation used to create internet access
 *  and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is
 *  required. The range cannot overlap with any prefixes either in the consumer
 *  VPC network or in use by the private clouds attached to that VPC network.
 */
@property(nonatomic, copy, nullable) NSString *edgeServicesCidr;

/**
 *  Network service that allows External IP addresses to be assigned to VMware
 *  workloads. This service can only be enabled when `internet_access` is also
 *  enabled.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_NetworkService *externalIp;

/** Network service that allows VMware workloads to access the internet. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_NetworkService *internetAccess;

/**
 *  Output only. The resource name of this network policy. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. The relative resource name of the VMware Engine network. Specify
 *  the name in the following form:
 *  `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 *  where `{project}` can either be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetwork;

/**
 *  Output only. The canonical name of the VMware Engine network in the form:
 *  `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetworkCanonical;

@end


/**
 *  Represents a network service that is managed by a `NetworkPolicy` resource.
 *  A network service provides a way to control an aspect of external access to
 *  VMware workloads. For example, whether the VMware workloads in the private
 *  clouds governed by a network policy can access or be accessed from the
 *  internet.
 */
@interface GTLRVMwareEngine_NetworkService : GTLRObject

/**
 *  True if the service is enabled; false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/**
 *  Output only. State of the service. New values may be added to this enum when
 *  appropriate.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_NetworkService_State_Active Service is active.
 *        (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_NetworkService_State_Reconciling Service is in
 *        the process of being provisioned/deprovisioned. (Value: "RECONCILING")
 *    @arg @c kGTLRVMwareEngine_NetworkService_State_StateUnspecified
 *        Unspecified service state. This is the default value. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_NetworkService_State_Unprovisioned Service is
 *        not provisioned. (Value: "UNPROVISIONED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Node in a cluster.
 */
@interface GTLRVMwareEngine_Node : GTLRObject

/**
 *  Output only. Customized number of cores
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *customCoreCount;

/** Output only. Fully qualified domain name of the node. */
@property(nonatomic, copy, nullable) NSString *fqdn;

/** Output only. Internal IP address of the node. */
@property(nonatomic, copy, nullable) NSString *internalIp;

/**
 *  Output only. The resource name of this node. Resource names are schemeless
 *  URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The canonical identifier of the node type (corresponds to the
 *  `NodeType`). For example: standard-72.
 */
@property(nonatomic, copy, nullable) NSString *nodeTypeId;

/**
 *  Output only. The state of the appliance.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Node_State_Active Node is operational and can be
 *        used by the user. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Node_State_Creating Node is being provisioned.
 *        (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Node_State_Failed Node is in a failed state.
 *        (Value: "FAILED")
 *    @arg @c kGTLRVMwareEngine_Node_State_StateUnspecified The default value.
 *        This value should never be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_Node_State_Upgrading Node is undergoing
 *        maintenance, e.g.: during private cloud upgrade. (Value: "UPGRADING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The version number of the VMware ESXi management component in
 *  this cluster.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Describes node type.
 */
@interface GTLRVMwareEngine_NodeType : GTLRObject

/**
 *  Output only. List of possible values of custom core count.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *availableCustomCoreCounts;

/** Output only. Capabilities of this node type. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capabilities;

/**
 *  Output only. The amount of storage available, defined in GB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Output only. The friendly name for this node type. For example:
 *  ve1-standard-72
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Families of the node type. For node types to be in the same
 *  cluster they must share at least one element in the `families`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *families;

/**
 *  Output only. The type of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_NodeType_Kind_KindUnspecified The default value.
 *        This value should never be used. (Value: "KIND_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_NodeType_Kind_Standard Standard HCI node.
 *        (Value: "STANDARD")
 *    @arg @c kGTLRVMwareEngine_NodeType_Kind_StorageOnly Storage only Node.
 *        (Value: "STORAGE_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. The amount of physical memory available, defined in GB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryGb;

/**
 *  Output only. The resource name of this node type. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The canonical identifier of the node type (corresponds to the
 *  `NodeType`). For example: standard-72.
 */
@property(nonatomic, copy, nullable) NSString *nodeTypeId;

/**
 *  Output only. The total number of CPU cores in a single node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCoreCount;

/**
 *  Output only. The total number of virtual CPUs in a single node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *virtualCpuCount;

@end


/**
 *  Information about the type and number of nodes associated with the cluster.
 */
@interface GTLRVMwareEngine_NodeTypeConfig : GTLRObject

/**
 *  Optional. Customized number of cores available to each node of the type.
 *  This number must always be one of `nodeType.availableCustomCoreCounts`. If
 *  zero is provided max value from `nodeType.availableCustomCoreCounts` will be
 *  used.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *customCoreCount;

/**
 *  Required. The number of nodes of this type in the cluster
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeCount;

@end


/**
 *  Details about a NSX Manager appliance.
 */
@interface GTLRVMwareEngine_Nsx : GTLRObject

/** Fully qualified domain name of the appliance. */
@property(nonatomic, copy, nullable) NSString *fqdn;

/** Internal IP address of the appliance. */
@property(nonatomic, copy, nullable) NSString *internalIp;

/**
 *  Output only. The state of the appliance.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Nsx_State_Active The appliance is operational
 *        and can be used. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Nsx_State_Creating The appliance is being
 *        deployed. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Nsx_State_StateUnspecified Unspecified appliance
 *        state. This is the default value. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Version of the appliance. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRVMwareEngine_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRVMwareEngine_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. True if the user has requested cancellation of the operation;
 *  false otherwise. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Exchanged network peering route.
 */
@interface GTLRVMwareEngine_PeeringRoute : GTLRObject

/** Output only. Destination range of the peering route in CIDR notation. */
@property(nonatomic, copy, nullable) NSString *destRange;

/**
 *  Output only. Direction of the routes exchanged with the peer network, from
 *  the VMware Engine network perspective: * Routes of direction `INCOMING` are
 *  imported from the peer network. * Routes of direction `OUTGOING` are
 *  exported from the intranet VPC network of the VMware Engine network.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Direction_DirectionUnspecified
 *        Unspecified exchanged routes direction. This is default. (Value:
 *        "DIRECTION_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Direction_Incoming Routes imported
 *        from the peer network. (Value: "INCOMING")
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Direction_Outgoing Routes exported
 *        to the peer network. (Value: "OUTGOING")
 */
@property(nonatomic, copy, nullable) NSString *direction;

/**
 *  Output only. True if the peering route has been imported from a peered VPC
 *  network; false otherwise. The import happens if the field
 *  `NetworkPeering.importCustomRoutes` is true for this network,
 *  `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
 *  the import does not result in a route conflict.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *imported;

/**
 *  Output only. Region containing the next hop of the peering route. This field
 *  only applies to dynamic routes in the peer VPC network.
 */
@property(nonatomic, copy, nullable) NSString *nextHopRegion;

/**
 *  Output only. The priority of the peering route.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  Output only. Type of the route in the peer VPC network.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Type_DynamicPeeringRoute Dynamic
 *        routes in the peer network. (Value: "DYNAMIC_PEERING_ROUTE")
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Type_StaticPeeringRoute Static
 *        routes in the peer network. (Value: "STATIC_PEERING_ROUTE")
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Type_SubnetPeeringRoute Created,
 *        updated, and removed automatically by Google Cloud when subnets are
 *        created, modified, or deleted in the peer network. (Value:
 *        "SUBNET_PEERING_ROUTE")
 *    @arg @c kGTLRVMwareEngine_PeeringRoute_Type_TypeUnspecified Unspecified
 *        peering route type. This is the default value. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRVMwareEngine_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Users/Service accounts which have access for DNS binding on the intranet VPC
 *  corresponding to the consumer project.
 */
@interface GTLRVMwareEngine_Principal : GTLRObject

/** The service account which needs to be granted the permission. */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** The user who needs to be granted permission. */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Represents a private cloud resource. Private clouds of type `STANDARD` and
 *  `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional.
 */
@interface GTLRVMwareEngine_PrivateCloud : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time when the resource was scheduled for deletion. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  User-provided description for this private cloud.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. Time when the resource will be irreversibly deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** Output only. HCX appliance. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Hcx *hcx;

/**
 *  Required. Input only. The management cluster for this private cloud. This
 *  field is required during creation of the private cloud to provide details
 *  for the default cluster. The following fields can't be changed after private
 *  cloud creation: `ManagementCluster.clusterId`,
 *  `ManagementCluster.nodeTypeId`.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_ManagementCluster *managementCluster;

/**
 *  Output only. The resource name of this private cloud. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Network configuration of the private cloud. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_NetworkConfig *networkConfig;

/** Output only. NSX appliance. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Nsx *nsx;

/**
 *  Output only. State of the resource. New values may be added to this enum
 *  when appropriate.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Active The private cloud is
 *        ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Creating The private cloud is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Deleted The private cloud is
 *        scheduled for deletion. The deletion process can be cancelled by using
 *        the corresponding undelete method. (Value: "DELETED")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Failed The private cloud is
 *        in failed state. (Value: "FAILED")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Purging The private cloud is
 *        irreversibly deleted and is being removed from the system. (Value:
 *        "PURGING")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_StateUnspecified The default
 *        value. This value should never be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_State_Updating The private cloud is
 *        being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Optional. Type of the private cloud. Defaults to STANDARD.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_Type_Standard Standard private is a
 *        zonal resource, with 3+ nodes. Default type. (Value: "STANDARD")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_Type_Stretched Stretched private
 *        cloud is a regional resource with redundancy, with a minimum of 6
 *        nodes, nodes count has to be even. (Value: "STRETCHED")
 *    @arg @c kGTLRVMwareEngine_PrivateCloud_Type_TimeLimited Time limited
 *        private cloud is a zonal resource, can have only 1 node and has
 *        limited life span. Will be deleted after defined period of time, can
 *        be converted into standard private cloud by expanding it up to 3 or
 *        more nodes. (Value: "TIME_LIMITED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. Vcenter appliance. */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Vcenter *vcenter;

@end


/**
 *  Private connection resource that provides connectivity for VMware Engine
 *  private clouds.
 */
@interface GTLRVMwareEngine_PrivateConnection : GTLRObject

/** Output only. Creation time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. User-provided description for this private connection.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The resource name of the private connection. Resource names are
 *  schemeless URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1/privateConnections/my-connection`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. VPC network peering id between given network VPC and
 *  VMwareEngineNetwork.
 */
@property(nonatomic, copy, nullable) NSString *peeringId;

/**
 *  Output only. Peering state between service network and VMware Engine
 *  network.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringActive The
 *        peering is in active state. (Value: "PEERING_ACTIVE")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringInactive
 *        The peering is in inactive state. (Value: "PEERING_INACTIVE")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_PeeringState_PeeringStateUnspecified
 *        The default value. This value is used if the peering state is omitted
 *        or unknown. (Value: "PEERING_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *peeringState;

/**
 *  Optional. Routing Mode. Default value is set to GLOBAL. For type =
 *  PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for
 *  other types only GLOBAL is supported.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_RoutingMode_Global Global
 *        Routing Mode (Value: "GLOBAL")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_RoutingMode_Regional Regional
 *        Routing Mode (Value: "REGIONAL")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_RoutingMode_RoutingModeUnspecified
 *        The default value. This value should never be used. (Value:
 *        "ROUTING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *routingMode;

/**
 *  Required. Service network to create private connection. Specify the name in
 *  the following form: `projects/{project}/global/networks/{network_id}` For
 *  type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC,
 *  e.g. projects/project-tp/global/networks/servicenetworking. For type =
 *  NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g.
 *  projects/project-tp/global/networks/netapp-tenant-vpc. For type =
 *  DELL_POWERSCALE, this field represent Dell service VPC, e.g.
 *  projects/project-tp/global/networks/dell-tenant-vpc. For type=
 *  THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other
 *  producer VPC to which the VMware Engine Network needs to be connected, e.g.
 *  projects/project/global/networks/vpc.
 */
@property(nonatomic, copy, nullable) NSString *serviceNetwork;

/**
 *  Output only. State of the private connection.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Active The private
 *        connection is ready. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Creating The private
 *        connection is being created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Deleting The private
 *        connection is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Failed The private
 *        connection is in failed state. (Value: "FAILED")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_StateUnspecified The
 *        default value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Unprovisioned The
 *        private connection is not provisioned, since no private cloud is
 *        present for which this private connection is needed. (Value:
 *        "UNPROVISIONED")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_State_Updating The private
 *        connection is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Required. Private connection type.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_Type_DellPowerscale Connection
 *        used for connecting to Dell PowerScale. (Value: "DELL_POWERSCALE")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_Type_NetappCloudVolumes
 *        Connection used for connecting to NetApp Cloud Volumes. (Value:
 *        "NETAPP_CLOUD_VOLUMES")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_Type_PrivateServiceAccess
 *        Connection used for establishing [private services
 *        access](https://cloud.google.com/vpc/docs/private-services-access).
 *        (Value: "PRIVATE_SERVICE_ACCESS")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_Type_ThirdPartyService
 *        Connection used for connecting to third-party services. (Value:
 *        "THIRD_PARTY_SERVICE")
 *    @arg @c kGTLRVMwareEngine_PrivateConnection_Type_TypeUnspecified The
 *        default value. This value should never be used. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. System-generated unique identifier for the resource. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Last update time of this resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Required. The relative resource name of Legacy VMware Engine network.
 *  Specify the name in the following form:
 *  `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 *  where `{project}`, `{location}` will be same as specified in private
 *  connection resource name and `{vmware_engine_network_id}` will be in the
 *  form of `{location}`-default e.g.
 *  projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetwork;

/**
 *  Output only. The canonical name of the VMware Engine network in the form:
 *  `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 */
@property(nonatomic, copy, nullable) NSString *vmwareEngineNetworkCanonical;

@end


/**
 *  Request message for VmwareEngine.RepairManagementDnsZoneBindings
 */
@interface GTLRVMwareEngine_RepairManagementDnsZoneBindingRequest : GTLRObject

/**
 *  Optional. A request ID to identify requests. Specify a unique request ID so
 *  that if you must retry your request, the server will know to ignore the
 *  request if it has already been completed. The server guarantees that a
 *  request doesn't result in creation of duplicate commitments for at least 60
 *  minutes. For example, consider a situation where you make an initial request
 *  and the request times out. If you make the request again with the same
 *  request ID, the server can check if the original operation with the same
 *  request ID was received, and if so, will ignore the second request. This
 *  prevents clients from accidentally creating duplicate commitments. The
 *  request ID must be a valid UUID with the exception that zero UUID is not
 *  supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Request message for VmwareEngine.ResetNsxCredentials
 */
@interface GTLRVMwareEngine_ResetNsxCredentialsRequest : GTLRObject

/**
 *  Optional. A request ID to identify requests. Specify a unique request ID so
 *  that if you must retry your request, the server will know to ignore the
 *  request if it has already been completed. The server guarantees that a
 *  request doesn't result in creation of duplicate commitments for at least 60
 *  minutes. For example, consider a situation where you make an initial request
 *  and the request times out. If you make the request again with the same
 *  request ID, the server can check if original operation with the same request
 *  ID was received, and if so, will ignore the second request. This prevents
 *  clients from accidentally creating duplicate commitments. The request ID
 *  must be a valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Request message for VmwareEngine.ResetVcenterCredentials
 */
@interface GTLRVMwareEngine_ResetVcenterCredentialsRequest : GTLRObject

/**
 *  Optional. A request ID to identify requests. Specify a unique request ID so
 *  that if you must retry your request, the server will know to ignore the
 *  request if it has already been completed. The server guarantees that a
 *  request doesn't result in creation of duplicate commitments for at least 60
 *  minutes. For example, consider a situation where you make an initial request
 *  and the request times out. If you make the request again with the same
 *  request ID, the server can check if original operation with the same request
 *  ID was received, and if so, will ignore the second request. This prevents
 *  clients from accidentally creating duplicate commitments. The request ID
 *  must be a valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. The username of the user to be to reset the credentials. The
 *  default value of this field is CloudOwner\@gve.local. The provided value
 *  should be one of the following: solution-user-01\@gve.local,
 *  solution-user-02\@gve.local, solution-user-03\@gve.local,
 *  solution-user-04\@gve.local, solution-user-05\@gve.local,
 *  zertoadmin\@gve.local.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Request message for VmwareEngine.RevokeDnsBindPermission
 */
@interface GTLRVMwareEngine_RevokeDnsBindPermissionRequest : GTLRObject

/**
 *  Required. The consumer provided user/service account which needs to be
 *  granted permission to bind with the intranet VPC corresponding to the
 *  consumer project.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Principal *principal;

/**
 *  Optional. A request ID to identify requests. Specify a unique request ID so
 *  that if you must retry your request, the server will know to ignore the
 *  request if it has already been completed. The server guarantees that a
 *  request doesn't result in creation of duplicate commitments for at least 60
 *  minutes. For example, consider a situation where you make an initial request
 *  and the request times out. If you make the request again with the same
 *  request ID, the server can check if original operation with the same request
 *  ID was received, and if so, will ignore the second request. This prevents
 *  clients from accidentally creating duplicate commitments. The request ID
 *  must be a valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRVMwareEngine_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRVMwareEngine_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRVMwareEngine_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMwareEngine_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRVMwareEngine_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMwareEngine_Status_Details_Item : GTLRObject
@end


/**
 *  Configuration of a stretched cluster.
 */
@interface GTLRVMwareEngine_StretchedClusterConfig : GTLRObject

/**
 *  Required. Zone that will remain operational when connection between the two
 *  zones is lost. Specify the resource name of a zone that belongs to the
 *  region of the private cloud. For example:
 *  `projects/{project}/locations/europe-west3-a` where `{project}` can either
 *  be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *preferredLocation;

/**
 *  Required. Additional zone for a higher level of availability and load
 *  balancing. Specify the resource name of a zone that belongs to the region of
 *  the private cloud. For example:
 *  `projects/{project}/locations/europe-west3-b` where `{project}` can either
 *  be a project number or a project ID.
 */
@property(nonatomic, copy, nullable) NSString *secondaryLocation;

@end


/**
 *  Subnet in a private cloud. Either `management` subnets (such as vMotion)
 *  that are read-only, or `userDefined`, which can also be updated.
 */
@interface GTLRVMwareEngine_Subnet : GTLRObject

/**
 *  The IP address of the gateway of this subnet. Must fall within the IP prefix
 *  defined above.
 */
@property(nonatomic, copy, nullable) NSString *gatewayIp;

/** The IP address range of the subnet in CIDR format '10.0.0.0/24'. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/**
 *  Output only. The resource name of this subnet. Resource names are schemeless
 *  URIs that follow the conventions in
 *  https://cloud.google.com/apis/design/resource_names. For example:
 *  `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/subnets/my-subnet`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The state of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Active The subnet is ready. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Creating The subnet is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Deleting The subnet is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Failed Last operation on the subnet
 *        did not succeed. Subnet's payload is reverted back to its most recent
 *        working state. (Value: "FAILED")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Reconciling Changes requested in
 *        the last operation are being propagated. (Value: "RECONCILING")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_StateUnspecified The default value.
 *        This value should never be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMwareEngine_Subnet_State_Updating The subnet is being
 *        updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The type of the subnet. For example "management" or
 *  "userDefined".
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Output only. VLAN ID of the VLAN on which the subnet is configured
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vlanId;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRVMwareEngine_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRVMwareEngine_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for VmwareEngine.UndeletePrivateCloud
 */
@interface GTLRVMwareEngine_UndeletePrivateCloudRequest : GTLRObject

/**
 *  Optional. The request ID must be a valid UUID with the exception that zero
 *  UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Details about a vCenter Server management appliance.
 */
@interface GTLRVMwareEngine_Vcenter : GTLRObject

/** Fully qualified domain name of the appliance. */
@property(nonatomic, copy, nullable) NSString *fqdn;

/** Internal IP address of the appliance. */
@property(nonatomic, copy, nullable) NSString *internalIp;

/**
 *  Output only. The state of the appliance.
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_Vcenter_State_Active The appliance is
 *        operational and can be used. (Value: "ACTIVE")
 *    @arg @c kGTLRVMwareEngine_Vcenter_State_Creating The appliance is being
 *        deployed. (Value: "CREATING")
 *    @arg @c kGTLRVMwareEngine_Vcenter_State_StateUnspecified Unspecified
 *        appliance state. This is the default value. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Version of the appliance. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Represents a VMware Engine VPC network that is managed by a VMware Engine
 *  network resource.
 */
@interface GTLRVMwareEngine_VpcNetwork : GTLRObject

/**
 *  Output only. The relative resource name of the service VPC network this
 *  VMware Engine network is attached to. For example:
 *  `projects/123123/global/networks/my-network`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Output only. Type of VPC network (INTRANET, INTERNET, or GOOGLE_CLOUD)
 *
 *  Likely values:
 *    @arg @c kGTLRVMwareEngine_VpcNetwork_Type_GoogleCloud VPC network used for
 *        access to Google Cloud services like Cloud Storage. (Value:
 *        "GOOGLE_CLOUD")
 *    @arg @c kGTLRVMwareEngine_VpcNetwork_Type_Internet VPC network used for
 *        internet access to and from a private cloud. (Value: "INTERNET")
 *    @arg @c kGTLRVMwareEngine_VpcNetwork_Type_Intranet VPC network that will
 *        be peered with a consumer VPC network or the intranet VPC of another
 *        VMware Engine network. Access a private cloud through Compute Engine
 *        VMs on a peered VPC network or an on-premises resource connected to a
 *        peered consumer VPC network. (Value: "INTRANET")
 *    @arg @c kGTLRVMwareEngine_VpcNetwork_Type_TypeUnspecified The default
 *        value. This value should never be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
