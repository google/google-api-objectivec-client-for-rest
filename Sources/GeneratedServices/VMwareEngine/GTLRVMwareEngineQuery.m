// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   VMware Engine API (vmwareengine/v1)
// Description:
//   The Google VMware Engine API lets you programmatically manage VMware
//   environments.
// Documentation:
//   https://cloud.google.com/solutions/vmware-as-a-service

#import <GoogleAPIClientForREST/GTLRVMwareEngineQuery.h>

@implementation GTLRVMwareEngineQuery

@dynamic fields;

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Location class];
  query.loggingName = @"vmwareengine.projects.locations.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRVMwareEngineQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_ListLocationsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesCreate

@dynamic networkPolicyId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_NetworkPolicy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/networkPolicies";
  GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.networkPolicies.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.networkPolicies.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_NetworkPolicy class];
  query.loggingName = @"vmwareengine.projects.locations.networkPolicies.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/networkPolicies";
  GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListNetworkPoliciesResponse class];
  query.loggingName = @"vmwareengine.projects.locations.networkPolicies.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_NetworkPolicy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsNetworkPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.networkPolicies.patch";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNodeTypesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsNodeTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_NodeType class];
  query.loggingName = @"vmwareengine.projects.locations.nodeTypes.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsNodeTypesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/nodeTypes";
  GTLRVMwareEngineQuery_ProjectsLocationsNodeTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListNodeTypesResponse class];
  query.loggingName = @"vmwareengine.projects.locations.nodeTypes.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Empty class];
  query.loggingName = @"vmwareengine.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRVMwareEngineQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_ListOperationsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersCreate

@dynamic clusterId, parent, requestId, validateOnly;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_Cluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/clusters";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Cluster class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.getIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/clusters";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListClustersResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersPatch

@dynamic name, requestId, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_Cluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.patch";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.setIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsClustersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_TestIamPermissionsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.clusters.testIamPermissions";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsCreate

@dynamic parent, privateCloudId, requestId, validateOnly;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_PrivateCloud *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/privateClouds";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsDelete

@dynamic delayHours, force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_PrivateCloud class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.getIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysCreate

@dynamic hcxActivationKeyId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_HcxActivationKey *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/hcxActivationKeys";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_HcxActivationKey class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.getIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/hcxActivationKeys";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListHcxActivationKeysResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.setIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsHcxActivationKeysTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_TestIamPermissionsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.hcxActivationKeys.testIamPermissions";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/privateClouds";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListPrivateCloudsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_PrivateCloud *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.patch";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsResetNsxCredentials

@dynamic privateCloud;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_ResetNsxCredentialsRequest *)object
                   privateCloud:(NSString *)privateCloud {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"privateCloud" ];
  NSString *pathURITemplate = @"v1/{+privateCloud}:resetNsxCredentials";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsResetNsxCredentials *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.privateCloud = privateCloud;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.resetNsxCredentials";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsResetVcenterCredentials

@dynamic privateCloud;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_ResetVcenterCredentialsRequest *)object
                   privateCloud:(NSString *)privateCloud {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"privateCloud" ];
  NSString *pathURITemplate = @"v1/{+privateCloud}:resetVcenterCredentials";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsResetVcenterCredentials *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.privateCloud = privateCloud;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.resetVcenterCredentials";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_Policy class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.setIamPolicy";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsShowNsxCredentials

@dynamic privateCloud;

+ (instancetype)queryWithPrivateCloud:(NSString *)privateCloud {
  NSArray *pathParams = @[ @"privateCloud" ];
  NSString *pathURITemplate = @"v1/{+privateCloud}:showNsxCredentials";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsShowNsxCredentials *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.privateCloud = privateCloud;
  query.expectedObjectClass = [GTLRVMwareEngine_Credentials class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.showNsxCredentials";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsShowVcenterCredentials

@dynamic privateCloud;

+ (instancetype)queryWithPrivateCloud:(NSString *)privateCloud {
  NSArray *pathParams = @[ @"privateCloud" ];
  NSString *pathURITemplate = @"v1/{+privateCloud}:showVcenterCredentials";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsShowVcenterCredentials *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.privateCloud = privateCloud;
  query.expectedObjectClass = [GTLRVMwareEngine_Credentials class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.showVcenterCredentials";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Subnet class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.subnets.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/subnets";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListSubnetsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.subnets.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_Subnet *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsSubnetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.subnets.patch";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRVMwareEngine_TestIamPermissionsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.testIamPermissions";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsUndelete

@dynamic name;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_UndeletePrivateCloudRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:undelete";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateCloudsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateClouds.undelete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsCreate

@dynamic parent, privateConnectionId, requestId;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_PrivateConnection *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/privateConnections";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_PrivateConnection class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/privateConnections";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListPrivateConnectionsResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_PrivateConnection *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.patch";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsPeeringRoutesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/peeringRoutes";
  GTLRVMwareEngineQuery_ProjectsLocationsPrivateConnectionsPeeringRoutesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListPrivateConnectionPeeringRoutesResponse class];
  query.loggingName = @"vmwareengine.projects.locations.privateConnections.peeringRoutes.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksCreate

@dynamic parent, requestId, vmwareEngineNetworkId;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_Network *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareEngineNetworks";
  GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.vmwareEngineNetworks.create";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksDelete

@dynamic ETag, name, requestId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.vmwareEngineNetworks.delete";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Network class];
  query.loggingName = @"vmwareengine.projects.locations.vmwareEngineNetworks.get";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareEngineNetworks";
  GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRVMwareEngine_ListVmwareEngineNetworksResponse class];
  query.loggingName = @"vmwareengine.projects.locations.vmwareEngineNetworks.list";
  return query;
}

@end

@implementation GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRVMwareEngine_Network *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRVMwareEngineQuery_ProjectsLocationsVmwareEngineNetworksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRVMwareEngine_Operation class];
  query.loggingName = @"vmwareengine.projects.locations.vmwareEngineNetworks.patch";
  return query;
}

@end
