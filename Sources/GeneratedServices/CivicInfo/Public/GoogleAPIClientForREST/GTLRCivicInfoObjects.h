// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Civic Information API (civicinfo/v2)
// Description:
//   Provides polling places, early vote locations, contest data, election
//   officials, and government representatives for U.S. residential addresses.
// Documentation:
//   https://developers.google.com/civic-information/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCivicInfo_AdministrationRegion;
@class GTLRCivicInfo_AdministrativeBody;
@class GTLRCivicInfo_Candidate;
@class GTLRCivicInfo_Channel;
@class GTLRCivicInfo_Contest;
@class GTLRCivicInfo_DivisionSearchResult;
@class GTLRCivicInfo_Election;
@class GTLRCivicInfo_ElectionOfficial;
@class GTLRCivicInfo_ElectoralDistrict;
@class GTLRCivicInfo_FeatureIdProto;
@class GTLRCivicInfo_GeocodingSummary;
@class GTLRCivicInfo_GeographicDivision;
@class GTLRCivicInfo_MessageSet;
@class GTLRCivicInfo_Office;
@class GTLRCivicInfo_Official;
@class GTLRCivicInfo_PollingLocation;
@class GTLRCivicInfo_Precinct;
@class GTLRCivicInfo_RepresentativeInfoData_Divisions;
@class GTLRCivicInfo_RepresentativeInfoResponse_Divisions;
@class GTLRCivicInfo_SimpleAddressType;
@class GTLRCivicInfo_Source;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCivicInfo_Contest.level

/** Value: "administrativeArea1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_AdministrativeArea1;
/** Value: "administrativeArea2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_AdministrativeArea2;
/** Value: "country" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_Country;
/** Value: "international" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_International;
/** Value: "locality" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_Locality;
/** Value: "regional" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_Regional;
/** Value: "special" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_Special;
/** Value: "subLocality1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_SubLocality1;
/** Value: "subLocality2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Level_SubLocality2;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_Contest.roles

/** Value: "deputyHeadOfGovernment" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_DeputyHeadOfGovernment;
/** Value: "executiveCouncil" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_ExecutiveCouncil;
/** Value: "governmentOfficer" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_GovernmentOfficer;
/** Value: "headOfGovernment" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_HeadOfGovernment;
/** Value: "headOfState" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_HeadOfState;
/** Value: "highestCourtJudge" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_HighestCourtJudge;
/** Value: "judge" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_Judge;
/** Value: "legislatorLowerBody" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_LegislatorLowerBody;
/** Value: "legislatorUpperBody" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_LegislatorUpperBody;
/** Value: "otherRole" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_OtherRole;
/** Value: "schoolBoard" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_SchoolBoard;
/** Value: "specialPurposeOfficer" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Contest_Roles_SpecialPurposeOfficer;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_Election.shapeLookupBehavior

/** Value: "shapeLookupDefault" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDefault;
/** Value: "shapeLookupDisabled" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDisabled;
/** Value: "shapeLookupEnabled" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupEnabled;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_ElectoralDistrict.scope

/** Value: "cityCouncil" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_CityCouncil;
/** Value: "citywide" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Citywide;
/** Value: "congressional" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Congressional;
/** Value: "countyCouncil" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_CountyCouncil;
/** Value: "countywide" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Countywide;
/** Value: "judicial" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Judicial;
/** Value: "national" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_National;
/** Value: "schoolBoard" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_SchoolBoard;
/** Value: "special" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Special;
/** Value: "stateLower" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_StateLower;
/** Value: "stateUpper" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_StateUpper;
/** Value: "statewide" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Statewide;
/** Value: "township" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Township;
/** Value: "ward" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Ward;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_GeocodingSummary.featureType

/**
 *  An address template feature provides region-specific conventions for
 *  structuring addresses. These features aren't necessarily defined by physical
 *  geographic features, so they are classified as meta-features.
 *
 *  Value: "typeAddressTemplate"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAddressTemplate;
/**
 *  ABSTRACT
 *
 *  Value: "typeAdministrativeArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea;
/** Value: "typeAdministrativeArea1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea1;
/** Value: "typeAdministrativeArea2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea2;
/** Value: "typeAdministrativeArea3" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea3;
/** Value: "typeAdministrativeArea4" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea4;
/** Value: "typeAdministrativeArea5" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea5;
/** Value: "typeAdministrativeArea6" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea6;
/** Value: "typeAdministrativeArea7" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea7;
/** Value: "typeAdministrativeArea8" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea8;
/** Value: "typeAdministrativeArea9" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea9;
/** Value: "typeAgricultural" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAgricultural;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirport"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirport;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirportCivil"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportCivil;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirportGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportGrounds;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirportMilitary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMilitary;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirportMixed"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMixed;
/**
 *  DEPRECATED
 *
 *  Value: "typeAirstrip"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirstrip;
/**
 *  Subtype within a zoo - a cage or fenced-off or otherwise delineated area
 *  containing animals.
 *
 *  Value: "typeAnimalEnclosure"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAnimalEnclosure;
/**
 *  ABSTRACT
 *
 *  Value: "typeAny"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAny;
/**
 *  A feature representing a group or chain of islands.
 *
 *  Value: "typeArchipelago"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeArchipelago;
/** Value: "typeAtoll" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAtoll;
/**
 *  DEPRECATED
 *
 *  Value: "typeBank"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBank;
/**
 *  DEPRECATED
 *
 *  Value: "typeBar"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBar;
/**
 *  An ocean subdivision formed by a coastal indentation. Includes coves and
 *  gulfs.
 *
 *  Value: "typeBay"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBay;
/** Value: "typeBeach" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBeach;
/**
 *  A designated bicycle route, whose segments may consist of any combination of
 *  bicycle paths, bicycle lanes, or city streets.
 *
 *  Value: "typeBicycleRoute"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBicycleRoute;
/**
 *  An open body of water formed by a slight coastal indentation.
 *
 *  Value: "typeBight"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBight;
/**
 *  DEPRECATED
 *
 *  Value: "typeBirdWatching"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBirdWatching;
/**
 *  A line representing the boundary between two features. See border.proto for
 *  details.
 *
 *  Value: "typeBorder"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorder;
/**
 *  DEPRECATED
 *
 *  Value: "typeBorderCrossing"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorderCrossing;
/** Value: "typeBroadTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBroadTrack;
/**
 *  DEPRECATED
 *
 *  Value: "typeBuilding"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuilding;
/**
 *  DEPRECATED
 *
 *  Value: "typeBuildingGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuildingGrounds;
/**
 *  Terrain that looks populated.
 *
 *  Value: "typeBuiltUpArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuiltUpArea;
/**
 *  DEPRECATED
 *
 *  Value: "typeBusiness"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusiness;
/**
 *  A business chain feature is used to represent a chain, e.g. Starbucks,
 *  McDonald's, etc. Other features representing specific stores/franchises of
 *  this chain may refer to one such feature via RELATION_MEMBER_OF_CHAIN. This
 *  is not strictly reserved to commercial chains but can also be used to model
 *  organizations such as the Red Cross or the United Nations.
 *
 *  Value: "typeBusinessChain"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessChain;
/**
 *  A Business Corridor is a dense cluster of semantically similar
 *  establishments. TYPE_BUSINESS_CORRIDOR features are distinguished from
 *  TYPE_COLLOQUIAL_AREA features because the corridors are not under the
 *  political hierarchy, are allowed to be nameless, and may not correspond to
 *  well-known real world locations. For more details, see
 *  go/geo-corridors-schema.
 *
 *  Value: "typeBusinessCorridor"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessCorridor;
/**
 *  DEPRECATED
 *
 *  Value: "typeBusStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeCableCarStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCableCarStation;
/** Value: "typeCampfirePit" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampfirePit;
/**
 *  DEPRECATED
 *
 *  Value: "typeCampgrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampgrounds;
/**
 *  DEPRECATED
 *
 *  Value: "typeCampingSite"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampingSite;
/**
 *  A narrow passage used by boats. Normally artificial.
 *
 *  Value: "typeCanal"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCanal;
/**
 *  DEPRECATED
 *
 *  Value: "typeCarRental"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRental;
/**
 *  DEPRECATED
 *
 *  Value: "typeCarRepair"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRepair;
/**
 *  Cartographic features are used to capture real-world objects for which there
 *  is no current desire to model any specific attributes. These are only useful
 *  to make the map tiles look pretty.
 *
 *  Value: "typeCartographic"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographic;
/**
 *  A line for a cartographic detail. For example the international date line.
 *  Such features should have polyline geometry.
 *
 *  Value: "typeCartographicLine"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographicLine;
/**
 *  DEPRECATED
 *
 *  Value: "typeCashMachine"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCashMachine;
/**
 *  Don't use 0xA7. Use 8 bits for additional types under TYPE_NATURAL_FEATURE,
 *  so we don't run out of space. The following are miscellaneous natural
 *  features that don't fit any of the categories above.
 *
 *  Value: "typeCave"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCave;
/**
 *  A small, low-elevation, sandy island formed on the surface of coral reefs
 *
 *  Value: "typeCay"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCay;
/**
 *  The root of types of features that are in the sky, rather than on the earth.
 *  There will eventually be a hierarchy of types here.
 *
 *  Value: "typeCelestial"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCelestial;
/**
 *  DEPRECATED
 *
 *  Value: "typeCemetery"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCemetery;
/**
 *  A deep part in a body of water that is suitable for navigation. Includes
 *  narrows.
 *
 *  Value: "typeChannel"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChannel;
/**
 *  DEPRECATED
 *
 *  Value: "typeChurch"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChurch;
/**
 *  DEPRECATED
 *
 *  Value: "typeCityHall"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCityHall;
/**
 *  A vertical or nearly vertical slope. Includes escarpments.
 *
 *  Value: "typeCliff"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCliff;
/**
 *  DEPRECATED
 *
 *  Value: "typeCoffee"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCoffee;
/**
 *  e.g. Silicon Valley
 *
 *  Value: "typeColloquialArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialArea;
/**
 *  An entity widely considered to be a city, that may itself be made up of
 *  smaller political entities, some of which are cities/towns/villages
 *  themselves. For example, the colloquial view of Sydney, Australia actually
 *  comprises many smaller cities, but is regarded as a city itself. This type
 *  is not suitable for modeling official metro-/micropolitan or other
 *  statistical areas.
 *
 *  Value: "typeColloquialCity"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialCity;
/**
 *  ABSTRACT
 *
 *  Value: "typeCompound"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompound;
/**
 *  e.g. single family dwelling, office building.
 *
 *  Value: "typeCompoundBuilding"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundBuilding;
/**
 *  e.g. campus, compound, parcel.
 *
 *  Value: "typeCompoundGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundGrounds;
/**
 *  e.g. suite, room, hallway, cubicle.
 *
 *  Value: "typeCompoundSection"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundSection;
/**
 *  A place where two or more rivers join.
 *
 *  Value: "typeConfluence"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConfluence;
/** Value: "typeConstituency" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituency;
/**
 *  DEPRECATED
 *
 *  Value: "typeConstituencyFuture"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituencyFuture;
/** Value: "typeContinent" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContinent;
/**
 *  All the points on the polygon are at the same elevation.
 *
 *  Value: "typeContourLine"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContourLine;
/** Value: "typeCountry" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCountry;
/**
 *  DEPRECATED
 *
 *  Value: "typeCourthouse"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCourthouse;
/**
 *  Depressions causes by impact, explosion, and sometimes sink-holes.
 *
 *  Value: "typeCrater"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCrater;
/**
 *  Includes overfalls.
 *
 *  Value: "typeCurrent"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCurrent;
/**
 *  DEPRECATED
 *
 *  Value: "typeDam"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDam;
/**
 *  Every data source used in constructing a data repository has a corresponding
 *  feature that provides more information about that data source. The extra
 *  information is stored in the optional data_source field below.
 *
 *  Value: "typeDataSource"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDataSource;
/**
 *  DEPRECATED
 *
 *  Value: "typeDentist"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDentist;
/**
 *  DEPRECATED
 *
 *  Value: "typeDeprecatedGolfShop"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedGolfShop;
/**
 *  DEPRECATED
 *
 *  Value: "typeDeprecatedHighwayDoNotUse"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedHighwayDoNotUse;
/**
 *  DEPRECATED
 *
 *  Value: "typeDeprecatedTarmac"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedTarmac;
/** Value: "typeDesert" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesert;
/** Value: "typeDesignatedBarbecuePit" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedBarbecuePit;
/** Value: "typeDesignatedCookingArea" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedCookingArea;
/**
 *  Designated Market Areas (or DMAs) are used by marketing and ratings
 *  companies (such as the Nielsen Media Research company) to describe
 *  geographical regions (such as the greater New York metropolitan area) that
 *  are covered by a set of television stations. (See
 *  http://www.schooldata.com/pdfs/DMA.pdf) In the United States, DMAs should
 *  have a DMA numeric ID name, tagged with the FLAG_DESIGNATED_MARKET_AREA_ID
 *  flag.
 *
 *  Value: "typeDesignatedMarketArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedMarketArea;
/**
 *  RESERVED
 *
 *  Value: "typeDigitalElevationModel"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDigitalElevationModel;
/**
 *  Eventually we'll have more data for disputed areas (e.g., who makes claims
 *  on the area, who has de facto control, etc.). For the moment, we just define
 *  a type so we can simply mark areas as disputed.
 *
 *  Value: "typeDisputedArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDisputedArea;
/**
 *  A branch which flows away from the main river. Includes deltas.
 *
 *  Value: "typeDistributary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDistributary;
/**
 *  DEPRECATED
 *
 *  Value: "typeDoctor"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoctor;
/**
 *  DEPRECATED
 *
 *  Value: "typeDoNotUseReservedToCatchGeneratedFiles"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoNotUseReservedToCatchGeneratedFiles;
/**
 *  DEPRECATED
 *
 *  Value: "typeDoodle"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoodle;
/** Value: "typeDrinkingWater" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDrinkingWater;
/** Value: "typeDune" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDune;
/**
 *  DEPRECATED
 *
 *  Value: "typeEarthquake"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEarthquake;
/**
 *  DEPRECATED
 *
 *  Value: "typeEcoTouristDestination"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEcoTouristDestination;
/**
 *  Features that are notable for being high (or low), or for having sudden
 *  changes in elevation. These features might have an "elevation" extension to
 *  specify the actual elevation. See ElevationProto for more information.
 *
 *  Value: "typeElevated"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeElevated;
/**
 *  DEPRECATED
 *
 *  Value: "typeEmbassy"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmbassy;
/**
 *  DEPRECATED
 *
 *  Value: "typeEmergency"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmergency;
/**
 *  DEPRECATED
 *
 *  Value: "typeEnclosedTrafficArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEnclosedTrafficArea;
/**
 *  A portal of entry or exit to another feature. Examples: - Subway station
 *  entrance. - Parking lot entrance.
 *
 *  Value: "typeEntrance"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEntrance;
/**
 *  ABSTRACT This type is being replaced by TYPE_COMPOUND_GROUNDS. For further
 *  details, see go/compounds-v2
 *
 *  Value: "typeEstablishment"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishment;
/**
 *  DEPRECATED
 *
 *  Value: "typeEstablishmentBuilding"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentBuilding;
/**
 *  DEPRECATED This type has been replaced by TYPE_COMPOUND_BUILDING. For
 *  further details, see go/oyster-compounds
 *
 *  Value: "typeEstablishmentGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentGrounds;
/**
 *  An establishment which has a address (a.k.a. location or storefront). Note
 *  that it *may* also have a service area (e.g. a restaurant that offers both
 *  dine-in and delivery). This type of business is also known as a "hybrid"
 *  Service Area Business. Establishment POIs can be referenced by TYPE_COMPOUND
 *  features using the RELATION_PRIMARILY_OCCUPIED_BY. This is the reciprocal
 *  relation of the RELATION_OCCUPIES.
 *
 *  Value: "typeEstablishmentPoi"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentPoi;
/**
 *  A business without a storefront, e.g. a plumber. It would normally not have
 *  a place that a customer could visit to receive service, but it would have an
 *  area served by the business. Also known as a "pure" Service Area Business.
 *  NOTE(tcain): Using value 0xD441, since we could find ourselves with a need
 *  to differentiate service areas from online-only at this level in the future,
 *  but still benefit from being able to group those under a common parent,
 *  disjoint from TYPE_ESTABLISHMENT_POI.
 *
 *  Value: "typeEstablishmentService"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentService;
/**
 *  A place at the end of a river where fresh and salt water mix. Includes tidal
 *  creeks and limans.
 *
 *  Value: "typeEstuary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstuary;
/**
 *  DEPRECATED
 *
 *  Value: "typeEvent"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEvent;
/** Value: "typeFault" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFault;
/**
 *  ABSTRACT
 *
 *  Value: "typeFerry"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerry;
/**
 *  The vast majority of ferries are ferry boats.
 *
 *  Value: "typeFerryBoat"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryBoat;
/**
 *  DEPRECATED
 *
 *  Value: "typeFerryTerminal"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTerminal;
/**
 *  Also called a "car transport", a ferry train is a rail service that carries
 *  passengers and their vehicles across undrivable terrain. The Channel Tunnel
 *  ("Chunnel") is the most famous example, but they are also common in the Alps
 *  where they connect neighboring valleys otherwise separated by impassable
 *  mountains.
 *
 *  Value: "typeFerryTrain"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTrain;
/**
 *  DEPRECATED
 *
 *  Value: "typeFire"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFire;
/**
 *  DEPRECATED
 *
 *  Value: "typeFishing"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFishing;
/** Value: "typeFissure" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFissure;
/** Value: "typeFjord" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFjord;
/**
 *  A shallow place where water may be waded through.
 *
 *  Value: "typeFord"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFord;
/**
 *  DEPRECATED
 *
 *  Value: "typeFunicularStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFunicularStation;
/**
 *  A feature whose geometry is planned to replace the geometry on another
 *  feature.
 *
 *  Value: "typeFutureGeometry"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFutureGeometry;
/**
 *  DEPRECATED
 *
 *  Value: "typeGasStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGasStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbCountry"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbCountry;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbDependentLocality"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDependentLocality;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbDoubleDependentLocality"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDoubleDependentLocality;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbFormerPostalCounty"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbFormerPostalCounty;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbPostTown"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbPostTown;
/**
 *  DEPRECATED
 *
 *  Value: "typeGbTraditionalCounty"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbTraditionalCounty;
/**
 *  An association of a point with an address, with no other information.
 *
 *  Value: "typeGeocodedAddress"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeocodedAddress;
/** Value: "typeGeyser" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeyser;
/** Value: "typeGlacier" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGlacier;
/**
 *  DEPRECATED
 *
 *  Value: "typeGolf"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolf;
/**
 *  DEPRECATED
 *
 *  Value: "typeGolfCourse"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfCourse;
/** Value: "typeGolfFairway" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfFairway;
/**
 *  Use TYPE_ESTABLISHMENT_POI and gcid:golf_shop for golf shops instead.
 *
 *  Value: "typeGolfHole"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfHole;
/** Value: "typeGolfPuttingGreen" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfPuttingGreen;
/** Value: "typeGolfRough" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfRough;
/** Value: "typeGolfSandBunker" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfSandBunker;
/**
 *  Sub-types within a golf course.
 *
 *  Value: "typeGolfTeeingGround"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfTeeingGround;
/**
 *  DEPRECATED
 *
 *  Value: "typeGondolaLiftStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGondolaLiftStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeGovernment"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGovernment;
/** Value: "typeGrassland" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrassland;
/**
 *  DEPRECATED
 *
 *  Value: "typeGrocery"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrocery;
/**
 *  DEPRECATED
 *
 *  Value: "typeGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrounds;
/**
 *  DEPRECATED
 *
 *  Value: "typeGurudwara"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGurudwara;
/**
 *  A deep place near a shore where ships commonly drop anchor.
 *
 *  Value: "typeHarbor"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHarbor;
/**
 *  DEPRECATED
 *
 *  Value: "typeHeliport"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHeliport;
/** Value: "typeHighSpeedRail" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighSpeedRail;
/**
 *  DEPRECATED
 *
 *  Value: "typeHighTension"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighTension;
/**
 *  ABSTRACT
 *
 *  Value: "typeHighway"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway;
/** Value: "typeHighway1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway1;
/** Value: "typeHighway2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway2;
/** Value: "typeHighway3" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway3;
/** Value: "typeHighway4" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway4;
/** Value: "typeHighway5" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway5;
/** Value: "typeHighway6" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway6;
/** Value: "typeHighway7" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway7;
/** Value: "typeHighway8" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway8;
/** Value: "typeHighway9" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway9;
/**
 *  DEPRECATED
 *
 *  Value: "typeHikingArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHikingArea;
/**
 *  DEPRECATED
 *
 *  Value: "typeHinduTemple"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHinduTemple;
/**
 *  DEPRECATED
 *
 *  Value: "typeHorseCarriageStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHorseCarriageStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeHospital"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospital;
/**
 *  DEPRECATED
 *
 *  Value: "typeHospitalGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospitalGrounds;
/** Value: "typeHotSpring" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHotSpring;
/**
 *  DEPRECATED
 *
 *  Value: "typeHunting"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHunting;
/**
 *  DEPRECATED
 *
 *  Value: "typeHurricane"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHurricane;
/** Value: "typeIce" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIce;
/**
 *  DEPRECATED
 *
 *  Value: "typeIndustrial"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIndustrial;
/** Value: "typeInlet" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeInlet;
/**
 *  An intersection consists of a collection of segments that terminate at the
 *  same location. This is topological definition: it may not match what a
 *  typical user would think of as an "intersection". See
 *  TYPE_INTERSECTION_GROUP, below, for more information. Each segment
 *  terminating at an intersection has an "endpoint type" that specifies how
 *  that segment is terminated: stop sign, yield sign, three-way light, etc.
 *
 *  Value: "typeIntersection"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersection;
/**
 *  Our TYPE_INTERSECTION feature, above, models the point where one or more
 *  segments terminate. This is topological definition: it may not match what a
 *  typical user would think of as an "intersection". Consider the intersections
 *  where Hayes, Market, Larkin, and 9th Street meet near (37.77765, -122.41638)
 *  in San Francisco. Most people would probably consider this a single feature,
 *  even though we model it as four separate TYPE_INTERSECTION features. This
 *  TYPE_INTERSECTION_GROUP is used to model the user's concept of a complex
 *  intersection.
 *
 *  Value: "typeIntersectionGroup"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersectionGroup;
/**
 *  Man-made (and sometimes natural) channels used to move water. This type was
 *  used for both dam structures and water that is hold back by dams. We should
 *  use TYPE_COMPOUND_BUILDING for dam structures and TYPE_RESERVOIR for water.
 *
 *  Value: "typeIrrigation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIrrigation;
/** Value: "typeIsland" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsland;
/**
 *  A strip of land connecting two larger land masses, such as continents.
 *
 *  Value: "typeIsthmus"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsthmus;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpChiban"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpChiban;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpEdaban"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpEdaban;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpGaiku"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGaiku;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpGun"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGun;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpKoaza"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpKoaza;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpOoaza"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpOoaza;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpShikuchouson"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpShikuchouson;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpSubShikuchouson"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpSubShikuchouson;
/**
 *  DEPRECATED
 *
 *  Value: "typeJpTodoufuken"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpTodoufuken;
/** Value: "typeJrTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJrTrack;
/**
 *  Topography formed on limestone and gypsum by dissolution with sinkholes,
 *  caves, etc.
 *
 *  Value: "typeKarst"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeKarst;
/** Value: "typeLagoon" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLagoon;
/**
 *  An inland body of standing water.
 *
 *  Value: "typeLake"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLake;
/** Value: "typeLandMass" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandMass;
/** Value: "typeLandParcel" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandParcel;
/** Value: "typeLavaField" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLavaField;
/**
 *  A feature used to represent a logical level, e.g. floor.
 *
 *  Value: "typeLevel"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLevel;
/**
 *  DEPRECATED
 *
 *  Value: "typeLibrary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLibrary;
/** Value: "typeLightRailTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLightRailTrack;
/** Value: "typeLitterReceptacle" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLitterReceptacle;
/**
 *  A locale feature provides region specific conventions such as preferred
 *  language and formatting details for time, date, and currency values. Locales
 *  aren't necessary defined by physical geographic features, so they are
 *  classified as meta-features.
 *
 *  Value: "typeLocale"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocale;
/** Value: "typeLocality" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocality;
/**
 *  DEPRECATED
 *
 *  Value: "typeLocalPark"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocalPark;
/** Value: "typeLockerArea" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLockerArea;
/**
 *  DEPRECATED
 *
 *  Value: "typeLodging"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLodging;
/**
 *  A grouping of TYPE_BORDER features ("border segments"), which together
 *  represent a border between two features of the same type.
 *
 *  Value: "typeLogicalBorder"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLogicalBorder;
/**
 *  ABSTRACT
 *
 *  Value: "typeMetaFeature"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMetaFeature;
/**
 *  DEPRECATED
 *
 *  Value: "typeMilitary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMilitary;
/**
 *  DEPRECATED
 *
 *  Value: "typeMonorailStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailStation;
/** Value: "typeMonorailTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailTrack;
/**
 *  DEPRECATED
 *
 *  Value: "typeMosque"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMosque;
/**
 *  A series of mountains or hills ranged in a line and connected by high
 *  ground. Mountain ranges usually consist of many smaller ridges. For example,
 *  the Himalayas, the Andes. the Alps, etc.
 *
 *  Value: "typeMountainRange"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMountainRange;
/**
 *  DEPRECATED
 *
 *  Value: "typeMovieRental"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMovieRental;
/** Value: "typeNarrowTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNarrowTrack;
/**
 *  DEPRECATED
 *
 *  Value: "typeNationalForest"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalForest;
/**
 *  DEPRECATED
 *
 *  Value: "typeNationalPark"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalPark;
/**
 *  ABSTRACT
 *
 *  Value: "typeNaturalFeature"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNaturalFeature;
/**
 *  DEPRECATED
 *
 *  Value: "typeNatureReserve"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNatureReserve;
/** Value: "typeNeighborhood" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNeighborhood;
/**
 *  A peak or ridge of a mountain that extends through a glacier.
 *
 *  Value: "typeNunatak"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNunatak;
/**
 *  One of the large salt-water bodies that covers most of the globe.
 *
 *  Value: "typeOcean"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOcean;
/**
 *  An exposed rock in the water.
 *
 *  Value: "typeOceanRockExposed"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOceanRockExposed;
/**
 *  DEPRECATED
 *
 *  Value: "typeOffRoadArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOffRoadArea;
/**
 *  A near-level shallow, natural depression or basin, usually containing an
 *  intermittent lake, pond, or pool.
 *
 *  Value: "typePan"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePan;
/**
 *  DEPRECATED
 *
 *  Value: "typePark"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePark;
/**
 *  DEPRECATED
 *
 *  Value: "typeParking"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParking;
/**
 *  DEPRECATED
 *
 *  Value: "typeParkingGarage"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingGarage;
/**
 *  DEPRECATED
 *
 *  Value: "typeParkingLot"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingLot;
/**
 *  A route over an otherwise difficult to traverse feature. Includes saddle.
 *
 *  Value: "typePass"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePass;
/**
 *  RESERVED
 *
 *  Value: "typePathway"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePathway;
/**
 *  Elevations that have a distinctive peak.
 *
 *  Value: "typePeak"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeak;
/**
 *  A stretch of land projecting into water. Includes capes and spits.
 *
 *  Value: "typePeninsula"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeninsula;
/**
 *  DEPRECATED
 *
 *  Value: "typePharmacy"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePharmacy;
/**
 *  A phone number area code is a prefix which also coincides with the area
 *  code, or national destination code, of a particular region.
 *
 *  Value: "typePhoneNumberAreaCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberAreaCode;
/**
 *  A phone number prefix feature is used to specify the region where phone
 *  numbers (typically fixed-line numbers) must begin with a certain prefix. Any
 *  phone number prefix down to any level of granularity could be represented by
 *  this type.
 *
 *  Value: "typePhoneNumberPrefix"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberPrefix;
/**
 *  DEPRECATED
 *
 *  Value: "typePicnicArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePicnicArea;
/**
 *  Elevations that are flat on top. Includes mesas and buttes.
 *
 *  Value: "typePlateau"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlateau;
/**
 *  DEPRECATED
 *
 *  Value: "typePlayGround"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlayGround;
/**
 *  DEPRECATED
 *
 *  Value: "typePolice"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolice;
/**
 *  Boundaries representing the jurisdiction of a particular police station.
 *
 *  Value: "typePoliceJurisdiction"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePoliceJurisdiction;
/**
 *  ABSTRACT
 *
 *  Value: "typePolitical"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolitical;
/** Value: "typePond" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePond;
/**
 *  ABSTRACT
 *
 *  Value: "typePostal"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostal;
/**
 *  This is the type for postal codes which are complete and independent enough
 *  that there should be a feature for them (e.g. US 5-digit ZIP codes). For
 *  even more detailed suffixes that further subdivide a postal code (such as
 *  the +4 component in US ZIP codes), store the information in a
 *  TYPE_POSTAL_CODE_SUFFIX address component. When a range or set of postal
 *  codes share the same geographical area, e.g. because a precise subdivision
 *  does not exist or this subdivision is unknown, this type is used for each
 *  individual postal code.
 *
 *  Value: "typePostalCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCode;
/**
 *  A prefix portion of a postal code which does not meet the requirements for
 *  TYPE_POSTAL_CODE, but which is useful to search for, for example UK
 *  outcodes.
 *
 *  Value: "typePostalCodePrefix"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCodePrefix;
/**
 *  DEPRECATED
 *
 *  Value: "typePostalRound"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalRound;
/**
 *  DEPRECATED
 *
 *  Value: "typePostOffice"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostOffice;
/**
 *  The term "post town" is used for a locality-like-entity that is only used
 *  for postal addresses.
 *
 *  Value: "typePostTown"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostTown;
/**
 *  DEPRECATED
 *
 *  Value: "typePremise"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePremise;
/**
 *  DEPRECATED
 *
 *  Value: "typeProvincialForest"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialForest;
/**
 *  DEPRECATED
 *
 *  Value: "typeProvincialPark"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialPark;
/**
 *  ABSTRACT
 *
 *  Value: "typePublicSpacesAndMonuments"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePublicSpacesAndMonuments;
/**
 *  Railroads use several different incompatible track types.
 *
 *  Value: "typeRailway"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRailway;
/** Value: "typeRapids" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRapids;
/**
 *  Steep declines usually carved by erosion. Includes valleys, canyons,
 *  ditches, and gorges.
 *
 *  Value: "typeRavine"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRavine;
/**
 *  Rocks, coral, sandbars, or other features beneath the surface of the water
 *  that pose a hazard to passing ships. Includes shoals.
 *
 *  Value: "typeReef"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReef;
/**
 *  The full extent of the reef complex.
 *
 *  Value: "typeReefExtent"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefExtent;
/**
 *  A relatively shallow zone of the back reef located closest to the shore,
 *  that may be exposed at low tide.
 *
 *  Value: "typeReefFlat"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefFlat;
/**
 *  A small section of rocks, coral, sandbars, or other features beneath the
 *  surface of the water that forms part of a reef.
 *
 *  Value: "typeReefGrowth"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefGrowth;
/**
 *  A submerged rock in the water.
 *
 *  Value: "typeReefRockSubmerged"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefRockSubmerged;
/**
 *  An area controlled in some way by an authoritative source, such as a
 *  government-designated COVID containment zone. Features of this type should
 *  have one or more gcids corresponding to their specific regulation.
 *
 *  Value: "typeRegulatedArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRegulatedArea;
/**
 *  A reservation is a region collectively held or governed by indigenous people
 *  and officially recognized by the country’s government at the federal or
 *  state level. A reservation may be fully contained within an administrative
 *  feature or partially contained within two or more. These regions are
 *  referred to by different categorical names depending on country and even by
 *  state, including but not limited to: “Indian Reservations”, “Indian
 *  Reserves”, “Land Claim Settlement Lands”, “Indian Lands”, “Treaty Lands”,
 *  “Indigenous Territories”, etc. A reservation is not a historic indigenous
 *  territory boundary or a region which has applied for land rights but has not
 *  yet received official recognition.
 *
 *  Value: "typeReservation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservation;
/**
 *  An artificial body of water, possibly created by a dam, often used for
 *  irrigation or house use.
 *
 *  Value: "typeReservoir"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservoir;
/**
 *  DEPRECATED
 *
 *  Value: "typeRestArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestArea;
/**
 *  DEPRECATED
 *
 *  Value: "typeRestaurant"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestaurant;
/**
 *  A restriction group describes a set of segment restrictions that belong
 *  together and have a name or an associated event. See also
 *  restriction_group.proto
 *
 *  Value: "typeRestrictionGroup"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestrictionGroup;
/**
 *  A ridge is a geographical feature consisting of a chain of mountains or
 *  hills that form a continuous elevated crest with a single ridgeline for some
 *  distance.
 *
 *  Value: "typeRidge"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRidge;
/**
 *  An inland body of moving water, or parts associated with it in which there
 *  is little or no current (backwater).
 *
 *  Value: "typeRiver"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRiver;
/** Value: "typeRoad" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoad;
/**
 *  Features responsible for monitoring traffic on roads (usually for speed).
 *  Includes cameras at particular points as well as monitors that cover larger
 *  spans. Features of this type should have a corresponding gcid that specifies
 *  the correct subtype (e.g. gcid:road_camera or gcid:speed_camera_zone). This
 *  type was originally named as TYPE_ROAD_CAMERA.
 *
 *  Value: "typeRoadMonitor"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadMonitor;
/**
 *  Road sign features have names, point geometry, etc. They also have
 *  segment_path data (see below) which lists the segments that refer to the
 *  sign. See segment.proto for the reference from the segment to the road sign.
 *
 *  Value: "typeRoadSign"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadSign;
/** Value: "typeRock" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRock;
/** Value: "typeRocky" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRocky;
/**
 *  A route is any section of road (or rails, etc.) that has a name. This
 *  includes city streets as well as highways. Road segments can belong to
 *  multiple routes (e.g. El Camino, CA-82).
 *
 *  Value: "typeRoute"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoute;
/**
 *  A flat expanse of salt left by the evaporation of a body of salt water.
 *
 *  Value: "typeSaltFlat"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSaltFlat;
/** Value: "typeSand" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSand;
/**
 *  DEPRECATED
 *
 *  Value: "typeSchool"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchool;
/** Value: "typeSchoolDistrict" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchoolDistrict;
/**
 *  An ocean subdivision more or less confined by land and islands.
 *
 *  Value: "typeSea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSea;
/**
 *  DEPRECATED
 *
 *  Value: "typeSeaplaneBase"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaplaneBase;
/**
 *  DEPRECATED
 *
 *  Value: "typeSeaport"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaport;
/**
 *  A lake that dries up part of the year.
 *
 *  Value: "typeSeasonalLake"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalLake;
/**
 *  A river that dries up part of the year.
 *
 *  Value: "typeSeasonalRiver"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalRiver;
/**
 *  ABSTRACT
 *
 *  Value: "typeSegment"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegment;
/**
 *  ABSTRACT
 *
 *  Value: "typeSegmentPath"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegmentPath;
/**
 *  DEPRECATED
 *
 *  Value: "typeShopping"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShopping;
/**
 *  DEPRECATED
 *
 *  Value: "typeShoppingCenter"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShoppingCenter;
/** Value: "typeShrubbery" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShrubbery;
/**
 *  Also see skiboundary.proto
 *
 *  Value: "typeSkiBoundary"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiBoundary;
/**
 *  Also see skilift.proto
 *
 *  Value: "typeSkiLift"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiLift;
/**
 *  Also see skitrail.proto
 *
 *  Value: "typeSkiTrail"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiTrail;
/**
 *  Land not so steep as a cliff, but changing elevation. Includes slides.
 *
 *  Value: "typeSlope"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSlope;
/**
 *  DEPRECATED
 *
 *  Value: "typeSpecialStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpecialStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeSportsComplex"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSportsComplex;
/**
 *  A place where ground water flows naturally out of the ground.
 *
 *  Value: "typeSpring"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpring;
/**
 *  A subsidiary peak of a mountain.
 *
 *  Value: "typeSpur"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpur;
/**
 *  DEPRECATED
 *
 *  Value: "typeStadium"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStadium;
/** Value: "typeStandardTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStandardTrack;
/**
 *  An area used for aggregating statistical data, eg, a census region. Note
 *  that TYPE_STATISTICAL_AREA has a third nibble so we can add an abstract
 *  parent above it later if need be at 0x2E1 (and rename TYPE_STATISTICAL_AREA
 *  as TYPE_STATISTICAL_AREA1).
 *
 *  Value: "typeStatisticalArea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatisticalArea;
/**
 *  Note that this type does not distinguish the nature of the statue
 *  (religious, historical, memorial, tourist, ...).
 *
 *  Value: "typeStatue"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatue;
/**
 *  A long narrow ocean subdivision. Includes sounds.
 *
 *  Value: "typeStrait"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStrait;
/**
 *  ABSTRACT
 *
 *  Value: "typeSublocality"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality;
/** Value: "typeSublocality1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality1;
/** Value: "typeSublocality2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality2;
/** Value: "typeSublocality3" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality3;
/** Value: "typeSublocality4" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality4;
/** Value: "typeSublocality5" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality5;
/** Value: "typeSubmarineBasin" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineBasin;
/** Value: "typeSubmarineCliff" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineCliff;
/** Value: "typeSubmarineDeep" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineDeep;
/** Value: "typeSubmarineFractureZone" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineFractureZone;
/**
 *  includes saddles
 *
 *  Value: "typeSubmarineGap"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineGap;
/** Value: "typeSubmarinePlain" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlain;
/** Value: "typeSubmarinePlateau" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlateau;
/** Value: "typeSubmarineRidge" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineRidge;
/**
 *  includes peaks, ranges, and spurs
 *
 *  Value: "typeSubmarineSeamount"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSeamount;
/** Value: "typeSubmarineSlope" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSlope;
/**
 *  includes trenches and troughs
 *
 *  Value: "typeSubmarineValley"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineValley;
/**
 *  DEPRECATED This is deprecated and we want to use TYPE_COMPOUND_SECTION
 *  instead.
 *
 *  Value: "typeSubPremise"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubPremise;
/**
 *  DEPRECATED
 *
 *  Value: "typeSubwayStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayStation;
/** Value: "typeSubwayTrack" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayTrack;
/**
 *  DEPRECATED
 *
 *  Value: "typeSuite"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSuite;
/**
 *  DEPRECATED
 *
 *  Value: "typeSynagogue"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSynagogue;
/**
 *  Starting with TYPE_TARMAC, we use longer IDs, so that we can expand the
 *  number of feature types under TYPE_CARTOGRAPHIC.
 *
 *  Value: "typeTarmac"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTarmac;
/**
 *  ABSTRACT This type is incorrectly under TYPE_TECTONIC instead of TYPE_WATER.
 *  This was a mistake and is now fixed. See TYPE_WATERING_HOLE for the
 *  replacement.
 *
 *  Value: "typeTectonic"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTectonic;
/**
 *  DEPRECATED
 *
 *  Value: "typeTemple"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTemple;
/**
 *  A terminal point represents a good location for a user to meet a taxi,
 *  ridesharing vehicle, or general driver.
 *
 *  Value: "typeTerminalPoint"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerminalPoint;
/** Value: "typeTerrace" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrace;
/**
 *  Expanses of land that share common surface attributes. These areas would
 *  look more or less uniform from a high altitude.
 *
 *  Value: "typeTerrain"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrain;
/**
 *  A timezone feature is used to specify the region covering an international
 *  timezone. When a point is covered by multiple timezone features, the most
 *  specific one can be used to compute the local time at this point. Most
 *  specific implies a much smaller region or the one that is closer to the
 *  center. A feature's timezone can be specified in the repeated
 *  related_timezone field.
 *
 *  Value: "typeTimezone"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTimezone;
/**
 *  A toll cluster is either a single point on a segment (represented as a point
 *  at the end of the segment that has ENDPOINT_TOLL_BOOTH set) or a group of
 *  points on various road segments in MapFacts that represents one or more
 *  lanes passing through a toll fixture that all go to the same routing
 *  destination. Each toll cluster should have at most a single price per
 *  payment method. E.g. {CASH = $5, PASS = $1}. Note: If a toll fixture has
 *  different prices for multiple routing destinations, drivers need to be in
 *  the correct lane before passing through the toll fixture and hence such a
 *  fixture is represented by multiple toll clusters. A toll cluster does not
 *  necessarily represent a real-world entity, e.g. a particular plaza/structure
 *  as perceived by humans. This is because a plaza can be represented by more
 *  than one toll cluster. We require toll clusters to have names, but they
 *  might be non-unique. For example, a plaza might be represented by multiple
 *  toll clusters that may have the same plaza name. For further details, please
 *  see go/toll-cluster-schema.
 *
 *  Value: "typeTollCluster"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTollCluster;
/**
 *  DEPRECATED
 *
 *  Value: "typeTouristDestination"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTouristDestination;
/**
 *  Open space used for events, gathering, or as market-place.
 *
 *  Value: "typeTownSquare"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTownSquare;
/**
 *  A designated trail, which may consist of paved walkways, dirt paths, fire
 *  road, streets or highways, etc.
 *
 *  Value: "typeTrail"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrail;
/** Value: "typeTrailHead" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrailHead;
/**
 *  DEPRECATED
 *
 *  Value: "typeTrainStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrainStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeTramwayStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTramwayStation;
/**
 *  RESERVED
 *
 *  Value: "typeTransient"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransient;
/**
 *  ABSTRACT
 *
 *  Value: "typeTransit"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransit;
/**
 *  A transit agency operates a number of lines, typically all in the same city,
 *  region or country. See also transitagency.proto
 *
 *  Value: "typeTransitAgency"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgency;
/**
 *  TYPE_TRANSIT_AGENCY was moved to 0xC91. This deprecated enum value still
 *  exists for debugging purposes only.
 *
 *  Value: "typeTransitAgencyDeprecatedValue"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgencyDeprecatedValue;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitDeparture"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitDeparture;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitLeg"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLeg;
/**
 *  A transit line is a collection of transit legs, associated with some
 *  invariant properties of the trips that run over the legs. See also
 *  transitline.proto
 *
 *  Value: "typeTransitLine"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLine;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitStation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStation;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitStop"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStop;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitTransfer"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTransfer;
/**
 *  DEPRECATED
 *
 *  Value: "typeTransitTrip"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTrip;
/**
 *  ABSTRACT
 *
 *  Value: "typeTransportation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransportation;
/**
 *  DEPRECATED
 *
 *  Value: "typeTravelService"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTravelService;
/**
 *  Tracks for streetcars, cable-cars, etc. Ferries are services that are part
 *  of the road network but are not roads. They typically involve fares and
 *  scheduled departure times.
 *
 *  Value: "typeTrolleyTrack"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrolleyTrack;
/** Value: "typeTundra" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTundra;
/**
 *  Features that are notable for being high (or low), or for having sudden
 *  changes in elevation. These features might have an "elevation" extension to
 *  specify the actual elevation. See ElevationProto for more information.
 *
 *  Value: "typeUndersea"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUndersea;
/**
 *  DEPRECATED
 *
 *  Value: "typeUniversity"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversity;
/**
 *  DEPRECATED
 *
 *  Value: "typeUniversityGrounds"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversityGrounds;
/**
 *  A feature of completely unknown type. This should only be used when
 *  absolutely necessary. One example in which this type is useful is in the
 *  Chinese importer, which must heuristically segment addresses into components
 *  - it often does not know what types to make those components. Please note
 *  that the Oyster address formatter does not currently support address
 *  components of TYPE_UNKNOWN well.
 *
 *  Value: "typeUnknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnknown;
/** Value: "typeUnstableHillside" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnstableHillside;
/**
 *  Land along streams higher than the alluvial plain or stream terrace.
 *
 *  Value: "typeUpland"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUpland;
/**
 *  DEPRECATED
 *
 *  Value: "typeUsBorough"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsBorough;
/**
 *  DEPRECATED
 *
 *  Value: "typeUsNationalMonument"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalMonument;
/**
 *  DEPRECATED
 *
 *  Value: "typeUsNationalPark"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalPark;
/**
 *  DEPRECATED
 *
 *  Value: "typeUsState"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsState;
/**
 *  Terrain that is covered in vegetation.
 *
 *  Value: "typeVegetation"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVegetation;
/**
 *  DEPRECATED
 *
 *  Value: "typeVeterinarian"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVeterinarian;
/**
 *  Any plausible 1-dimensional path through a 2+ dimensional space, for the
 *  purposes of making graph-search-based routing possible. Such segments can be
 *  used to model paths through parking lots, squares, floors of buildings and
 *  other areas.
 *
 *  Value: "typeVirtualSegment"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVirtualSegment;
/**
 *  An elevated place that is notable for having a good view. Raster digital
 *  elevation data. This is not a type to be used by providers or consumed by
 *  clients.
 *
 *  Value: "typeVista"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVista;
/** Value: "typeVolcano" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVolcano;
/**
 *  A dry riverbed that occasionally receives flashfloods.
 *
 *  Value: "typeWadi"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWadi;
/**
 *  Use TYPE_COMPOUND_GROUND and appropriate gcids for the next two.
 *
 *  Value: "typeWall"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWall;
/**
 *  Features can be TYPE_WATER if we don't have enough information to properly
 *  type the body of water. TYPE_WATER is also used as the type for child
 *  features that compose a TYPE_RIVER feature.
 *
 *  Value: "typeWater"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWater;
/** Value: "typeWaterfall" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterfall;
/** Value: "typeWaterFountain" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterFountain;
/**
 *  A natural depression filled with water where animals come to drink.
 *
 *  Value: "typeWateringHole"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHole;
/**
 *  DEPRECATED
 *
 *  Value: "typeWateringHoleDeprecated"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHoleDeprecated;
/** Value: "typeWaterNavigation" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterNavigation;
/** Value: "typeWatershedBoundary" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWatershedBoundary;
/**
 *  DEPRECATED
 *
 *  Value: "typeWeatherCondition"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWeatherCondition;
/**
 *  Land that is usually flooded. Includes bogs, marshes, flats, moors, and
 *  swamps.
 *
 *  Value: "typeWetland"
 */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWetland;
/** Value: "typeWoods" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWoods;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_Office.levels

/** Value: "administrativeArea1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_AdministrativeArea1;
/** Value: "administrativeArea2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_AdministrativeArea2;
/** Value: "country" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_Country;
/** Value: "international" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_International;
/** Value: "locality" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_Locality;
/** Value: "regional" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_Regional;
/** Value: "special" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_Special;
/** Value: "subLocality1" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_SubLocality1;
/** Value: "subLocality2" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Levels_SubLocality2;

// ----------------------------------------------------------------------------
// GTLRCivicInfo_Office.roles

/** Value: "deputyHeadOfGovernment" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_DeputyHeadOfGovernment;
/** Value: "executiveCouncil" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_ExecutiveCouncil;
/** Value: "governmentOfficer" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_GovernmentOfficer;
/** Value: "headOfGovernment" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_HeadOfGovernment;
/** Value: "headOfState" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_HeadOfState;
/** Value: "highestCourtJudge" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_HighestCourtJudge;
/** Value: "judge" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_Judge;
/** Value: "legislatorLowerBody" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_LegislatorLowerBody;
/** Value: "legislatorUpperBody" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_LegislatorUpperBody;
/** Value: "otherRole" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_OtherRole;
/** Value: "schoolBoard" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_SchoolBoard;
/** Value: "specialPurposeOfficer" */
FOUNDATION_EXTERN NSString * const kGTLRCivicInfo_Office_Roles_SpecialPurposeOfficer;

/**
 *  Describes information about a regional election administrative area.
 */
@interface GTLRCivicInfo_AdministrationRegion : GTLRObject

/** The election administration body for this area. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_AdministrativeBody *electionAdministrationBody;

/**
 *  The city or county that provides election information for this voter. This
 *  object can have the same elements as state.
 */
@property(nonatomic, strong, nullable) GTLRCivicInfo_AdministrationRegion *localJurisdiction;

/** The name of the jurisdiction. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A list of sources for this area. If multiple sources are listed the data has
 *  been aggregated from those sources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Source *> *sources;

@end


/**
 *  Information about an election administrative body (e.g. County Board of
 *  Elections).
 */
@interface GTLRCivicInfo_AdministrativeBody : GTLRObject

/**
 *  A URL provided by this administrative body for information on absentee
 *  voting.
 */
@property(nonatomic, copy, nullable) NSString *absenteeVotingInfoUrl;

/**
 *  A URL provided by this administrative body to give contest information to
 *  the voter.
 */
@property(nonatomic, copy, nullable) NSString *ballotInfoUrl;

/** The mailing address of this administrative body. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_SimpleAddressType *correspondenceAddress;

/**
 *  A URL provided by this administrative body for looking up general election
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *electionInfoUrl;

/**
 *  A last minute or emergency notification text provided by this administrative
 *  body.
 */
@property(nonatomic, copy, nullable) NSString *electionNoticeText;

/**
 *  A URL provided by this administrative body for additional information
 *  related to the last minute or emergency notification.
 */
@property(nonatomic, copy, nullable) NSString *electionNoticeUrl;

/** The election officials for this election administrative body. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_ElectionOfficial *> *electionOfficials;

/**
 *  A URL provided by this administrative body for confirming that the voter is
 *  registered to vote.
 */
@property(nonatomic, copy, nullable) NSString *electionRegistrationConfirmationUrl;

/**
 *  A URL provided by this administrative body for looking up how to register to
 *  vote.
 */
@property(nonatomic, copy, nullable) NSString *electionRegistrationUrl;

/**
 *  A URL provided by this administrative body describing election rules to the
 *  voter.
 */
@property(nonatomic, copy, nullable) NSString *electionRulesUrl;

/** A description of the hours of operation for this administrative body. */
@property(nonatomic, copy, nullable) NSString *hoursOfOperation;

/** The name of this election administrative body. */
@property(nonatomic, copy, nullable) NSString *name;

/** The physical address of this administrative body. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_SimpleAddressType *physicalAddress;

/** A description of the services this administrative body may provide. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *voterServices;

/**
 *  A URL provided by this administrative body for looking up where to vote.
 */
@property(nonatomic, copy, nullable) NSString *votingLocationFinderUrl;

@end


/**
 *  Information about a candidate running for elected office.
 */
@interface GTLRCivicInfo_Candidate : GTLRObject

/** The URL for the candidate's campaign web site. */
@property(nonatomic, copy, nullable) NSString *candidateUrl;

/** A list of known (social) media channels for this candidate. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Channel *> *channels;

/** The email address for the candidate's campaign. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  The candidate's name. If this is a joint ticket it will indicate the name of
 *  the candidate at the top of a ticket followed by a / and that name of
 *  candidate at the bottom of the ticket. e.g. "Mitt Romney / Paul Ryan"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The order the candidate appears on the ballot for this contest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *orderOnBallot;

/** The full name of the party the candidate is a member of. */
@property(nonatomic, copy, nullable) NSString *party;

/** The voice phone number for the candidate's campaign office. */
@property(nonatomic, copy, nullable) NSString *phone;

/** A URL for a photo of the candidate. */
@property(nonatomic, copy, nullable) NSString *photoUrl;

@end


/**
 *  A social media or web channel for a candidate.
 */
@interface GTLRCivicInfo_Channel : GTLRObject

/**
 *  The unique public identifier for the candidate's channel.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of channel. The following is a list of types of channels, but is
 *  not exhaustive. More channel types may be added at a later time. One of:
 *  GooglePlus, YouTube, Facebook, Twitter
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about a contest that appears on a voter's ballot.
 */
@interface GTLRCivicInfo_Contest : GTLRObject

/**
 *  A number specifying the position of this contest on the voter's ballot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ballotPlacement;

/**
 *  The official title on the ballot for this contest, only where available.
 */
@property(nonatomic, copy, nullable) NSString *ballotTitle;

/** The candidate choices for this contest. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Candidate *> *candidates;

/** Information about the electoral district that this contest is in. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_ElectoralDistrict *district;

/**
 *  A description of any additional eligibility requirements for voting in this
 *  contest.
 */
@property(nonatomic, copy, nullable) NSString *electorateSpecifications;

/**
 *  The levels of government of the office for this contest. There may be more
 *  than one in cases where a jurisdiction effectively acts at two different
 *  levels of government; for example, the mayor of the District of Columbia
 *  acts at "locality" level, but also effectively at both
 *  "administrative-area-2" and "administrative-area-1".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *level;

/**
 *  The number of candidates that will be elected to office in this contest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberElected;

/**
 *  The number of candidates that a voter may vote for in this contest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberVotingFor;

/** The name of the office for this contest. */
@property(nonatomic, copy, nullable) NSString *office;

/**
 *  If this is a partisan election, the name of the party/parties it is for.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *primaryParties;

/**
 *  [DEPRECATED] If this is a partisan election, the name of the party it is
 *  for. This field as deprecated in favor of the array "primaryParties", as
 *  contests may contain more than one party.
 */
@property(nonatomic, copy, nullable) NSString *primaryParty;

/**
 *  The set of ballot responses for the referendum. A ballot response represents
 *  a line on the ballot. Common examples might include "yes" or "no" for
 *  referenda. This field is only populated for contests of type 'Referendum'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *referendumBallotResponses;

/**
 *  Specifies a short summary of the referendum that is typically on the ballot
 *  below the title but above the text. This field is only populated for
 *  contests of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumBrief;

/**
 *  A statement in opposition to the referendum. It does not necessarily appear
 *  on the ballot. This field is only populated for contests of type
 *  'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumConStatement;

/**
 *  Specifies what effect abstaining (not voting) on the proposition will have
 *  (i.e. whether abstaining is considered a vote against it). This field is
 *  only populated for contests of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumEffectOfAbstain;

/**
 *  The threshold of votes that the referendum needs in order to pass, e.g.
 *  "two-thirds". This field is only populated for contests of type
 *  'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumPassageThreshold;

/**
 *  A statement in favor of the referendum. It does not necessarily appear on
 *  the ballot. This field is only populated for contests of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumProStatement;

/**
 *  A brief description of the referendum. This field is only populated for
 *  contests of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumSubtitle;

/**
 *  The full text of the referendum. This field is only populated for contests
 *  of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumText;

/**
 *  The title of the referendum (e.g. 'Proposition 42'). This field is only
 *  populated for contests of type 'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumTitle;

/**
 *  A link to the referendum. This field is only populated for contests of type
 *  'Referendum'.
 */
@property(nonatomic, copy, nullable) NSString *referendumUrl;

/** The roles which this office fulfills. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *roles;

/**
 *  A list of sources for this contest. If multiple sources are listed, the data
 *  has been aggregated from those sources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Source *> *sources;

/**
 *  "Yes" or "No" depending on whether this a contest being held outside the
 *  normal election cycle.
 */
@property(nonatomic, copy, nullable) NSString *special;

/**
 *  The type of contest. Usually this will be 'General', 'Primary', or 'Run-off'
 *  for contests with candidates. For referenda this will be 'Referendum'. For
 *  Retention contests this will typically be 'Retention'.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The result of a division search query.
 */
@interface GTLRCivicInfo_DivisionSearchResponse : GTLRObject

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "civicinfo#divisionSearchResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_DivisionSearchResult *> *results;

@end


/**
 *  Represents a political geographic division that matches the requested query.
 */
@interface GTLRCivicInfo_DivisionSearchResult : GTLRObject

/**
 *  Other Open Civic Data identifiers that refer to the same division -- for
 *  example, those that refer to other political divisions whose boundaries are
 *  defined to be coterminous with this one. For example,
 *  ocd-division/country:us/state:wy will include an alias of
 *  ocd-division/country:us/state:wy/cd:1, since Wyoming has only one
 *  Congressional district.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aliases;

/** The name of the division. */
@property(nonatomic, copy, nullable) NSString *name;

/** The unique Open Civic Data identifier for this division */
@property(nonatomic, copy, nullable) NSString *ocdId;

@end


/**
 *  Information about the election that was queried.
 */
@interface GTLRCivicInfo_Election : GTLRObject

/** Day of the election in YYYY-MM-DD format. */
@property(nonatomic, copy, nullable) NSString *electionDay;

/**
 *  The unique ID of this election.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/** A displayable name for the election. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The political division of the election. Represented as an OCD Division ID.
 *  Voters within these political jurisdictions are covered by this election.
 *  This is typically a state such as ocd-division/country:us/state:ca or for
 *  the midterms or general election the entire US (i.e.
 *  ocd-division/country:us).
 */
@property(nonatomic, copy, nullable) NSString *ocdDivisionId;

/**
 *  shapeLookupBehavior
 *
 *  Likely values:
 *    @arg @c kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDefault
 *        Value "shapeLookupDefault"
 *    @arg @c kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDisabled
 *        Value "shapeLookupDisabled"
 *    @arg @c kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupEnabled
 *        Value "shapeLookupEnabled"
 */
@property(nonatomic, copy, nullable) NSString *shapeLookupBehavior;

@end


/**
 *  Information about individual election officials.
 */
@interface GTLRCivicInfo_ElectionOfficial : GTLRObject

/** The email address of the election official. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/** The fax number of the election official. */
@property(nonatomic, copy, nullable) NSString *faxNumber;

/** The full name of the election official. */
@property(nonatomic, copy, nullable) NSString *name;

/** The office phone number of the election official. */
@property(nonatomic, copy, nullable) NSString *officePhoneNumber;

/** The title of the election official. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The list of elections available for this version of the API.
 */
@interface GTLRCivicInfo_ElectionsQueryResponse : GTLRObject

/** A list of available elections */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Election *> *elections;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "civicinfo#electionsQueryResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Describes the geographic scope of a contest.
 */
@interface GTLRCivicInfo_ElectoralDistrict : GTLRObject

/**
 *  An identifier for this district, relative to its scope. For example, the
 *  34th State Senate district would have id "34" and a scope of stateUpper.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The name of the district. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The geographic scope of this district. If unspecified the district's
 *  geography is not known. One of: national, statewide, congressional,
 *  stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide,
 *  township, countyCouncil, cityCouncil, ward, special
 *
 *  Likely values:
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_CityCouncil Value
 *        "cityCouncil"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Citywide Value "citywide"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Congressional Value
 *        "congressional"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_CountyCouncil Value
 *        "countyCouncil"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Countywide Value
 *        "countywide"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Judicial Value "judicial"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_National Value "national"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_SchoolBoard Value
 *        "schoolBoard"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Special Value "special"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_StateLower Value
 *        "stateLower"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_StateUpper Value
 *        "stateUpper"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Statewide Value "statewide"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Township Value "township"
 *    @arg @c kGTLRCivicInfo_ElectoralDistrict_Scope_Ward Value "ward"
 */
@property(nonatomic, copy, nullable) NSString *scope;

@end


/**
 *  A globally unique identifier associated with each feature. We use 128-bit
 *  identifiers so that we have lots of bits available to distinguish between
 *  features. The feature id currently consists of a 64-bit "cell id" that
 *  **sometimes** corresponds to the approximate centroid of the feature, plus a
 *  64-bit fingerprint of other identifying information. See more on each
 *  respective field in its comments. Feature ids are first assigned when the
 *  data is created in MapFacts. After initial creation of the feature, they are
 *  immutable. This means that the only properties that you should rely on are
 *  that they are unique, and that cell_ids often - but not always - preserve
 *  spatial locality. The degree of locality varies as the feature undergoes
 *  geometry changes, and should not in general be considered a firm guarantee
 *  of the location of any particular feature. In fact, some locationless
 *  features have randomized cell IDs! Consumers of FeatureProtos from Mapfacts
 *  are guaranteed that fprints in the id field of features will be globally
 *  unique. Using the fprint allows consumers who don't need the spatial benefit
 *  of cell ids to uniquely identify features in a 64-bit address space. This
 *  property is not guaranteed for other sources of FeatureProtos.
 */
@interface GTLRCivicInfo_FeatureIdProto : GTLRObject

/**
 *  The S2CellId corresponding to the approximate location of this feature as of
 *  when it was first created. This can be of variable accuracy, ranging from
 *  the exact centroid of the feature at creation, a very large S2 Cell, or even
 *  being completely randomized for locationless features. Cell ids have the
 *  nice property that they follow a space-filling curve over the surface of the
 *  earth. (See s2cellid.h for details.) WARNING: Clients should only use cell
 *  IDs to perform spatial locality optimizations. There is no strict guarantee
 *  that the cell ID of a feature is related to the current geometry of the
 *  feature in any way.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cellId;

/**
 *  A 64-bit fingerprint used to identify features. Most clients should rely on
 *  MapFacts or OneRing to choose fingerprints. If creating new fprints, the
 *  strategy should be chosen so that the chance of collision is remote or
 *  non-existent, and the distribution should be reasonably uniform. For
 *  example, if the source data assigns unique ids to features, then a
 *  fingerprint of the provider name, version, and source id is sufficient.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fprint;

/**
 *  A place for clients to attach arbitrary data to a feature ID. Never set in
 *  MapFacts.
 */
@property(nonatomic, strong, nullable) GTLRCivicInfo_MessageSet *temporaryData;

@end


/**
 *  Detailed summary of the result from geocoding an address
 */
@interface GTLRCivicInfo_GeocodingSummary : GTLRObject

/**
 *  Represents the best estimate of whether or not the input address was fully
 *  understood and the address is correctly componentized. Mirrors the same-name
 *  field in geostore.staging.AddressLinkupScoringProto.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *addressUnderstood;

/** The ID of the FeatureProto returned by the geocoder */
@property(nonatomic, strong, nullable) GTLRCivicInfo_FeatureIdProto *featureId;

/**
 *  The feature type for the FeatureProto returned by the geocoder
 *
 *  Likely values:
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAddressTemplate An
 *        address template feature provides region-specific conventions for
 *        structuring addresses. These features aren't necessarily defined by
 *        physical geographic features, so they are classified as meta-features.
 *        (Value: "typeAddressTemplate")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea
 *        ABSTRACT (Value: "typeAdministrativeArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea1
 *        Value "typeAdministrativeArea1"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea2
 *        Value "typeAdministrativeArea2"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea3
 *        Value "typeAdministrativeArea3"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea4
 *        Value "typeAdministrativeArea4"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea5
 *        Value "typeAdministrativeArea5"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea6
 *        Value "typeAdministrativeArea6"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea7
 *        Value "typeAdministrativeArea7"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea8
 *        Value "typeAdministrativeArea8"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea9
 *        Value "typeAdministrativeArea9"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAgricultural Value
 *        "typeAgricultural"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirport DEPRECATED
 *        (Value: "typeAirport")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportCivil
 *        DEPRECATED (Value: "typeAirportCivil")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportGrounds
 *        DEPRECATED (Value: "typeAirportGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMilitary
 *        DEPRECATED (Value: "typeAirportMilitary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMixed
 *        DEPRECATED (Value: "typeAirportMixed")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirstrip
 *        DEPRECATED (Value: "typeAirstrip")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAnimalEnclosure
 *        Subtype within a zoo - a cage or fenced-off or otherwise delineated
 *        area containing animals. (Value: "typeAnimalEnclosure")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAny ABSTRACT
 *        (Value: "typeAny")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeArchipelago A
 *        feature representing a group or chain of islands. (Value:
 *        "typeArchipelago")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAtoll Value
 *        "typeAtoll"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBank DEPRECATED
 *        (Value: "typeBank")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBar DEPRECATED
 *        (Value: "typeBar")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBay An ocean
 *        subdivision formed by a coastal indentation. Includes coves and gulfs.
 *        (Value: "typeBay")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBeach Value
 *        "typeBeach"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBicycleRoute A
 *        designated bicycle route, whose segments may consist of any
 *        combination of bicycle paths, bicycle lanes, or city streets. (Value:
 *        "typeBicycleRoute")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBight An open body
 *        of water formed by a slight coastal indentation. (Value: "typeBight")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBirdWatching
 *        DEPRECATED (Value: "typeBirdWatching")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorder A line
 *        representing the boundary between two features. See border.proto for
 *        details. (Value: "typeBorder")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorderCrossing
 *        DEPRECATED (Value: "typeBorderCrossing")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBroadTrack Value
 *        "typeBroadTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuilding
 *        DEPRECATED (Value: "typeBuilding")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuildingGrounds
 *        DEPRECATED (Value: "typeBuildingGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuiltUpArea
 *        Terrain that looks populated. (Value: "typeBuiltUpArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusiness
 *        DEPRECATED (Value: "typeBusiness")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessChain A
 *        business chain feature is used to represent a chain, e.g. Starbucks,
 *        McDonald's, etc. Other features representing specific
 *        stores/franchises of this chain may refer to one such feature via
 *        RELATION_MEMBER_OF_CHAIN. This is not strictly reserved to commercial
 *        chains but can also be used to model organizations such as the Red
 *        Cross or the United Nations. (Value: "typeBusinessChain")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessCorridor A
 *        Business Corridor is a dense cluster of semantically similar
 *        establishments. TYPE_BUSINESS_CORRIDOR features are distinguished from
 *        TYPE_COLLOQUIAL_AREA features because the corridors are not under the
 *        political hierarchy, are allowed to be nameless, and may not
 *        correspond to well-known real world locations. For more details, see
 *        go/geo-corridors-schema. (Value: "typeBusinessCorridor")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusStation
 *        DEPRECATED (Value: "typeBusStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCableCarStation
 *        DEPRECATED (Value: "typeCableCarStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampfirePit Value
 *        "typeCampfirePit"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampgrounds
 *        DEPRECATED (Value: "typeCampgrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampingSite
 *        DEPRECATED (Value: "typeCampingSite")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCanal A narrow
 *        passage used by boats. Normally artificial. (Value: "typeCanal")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRental
 *        DEPRECATED (Value: "typeCarRental")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRepair
 *        DEPRECATED (Value: "typeCarRepair")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographic
 *        Cartographic features are used to capture real-world objects for which
 *        there is no current desire to model any specific attributes. These are
 *        only useful to make the map tiles look pretty. (Value:
 *        "typeCartographic")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographicLine A
 *        line for a cartographic detail. For example the international date
 *        line. Such features should have polyline geometry. (Value:
 *        "typeCartographicLine")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCashMachine
 *        DEPRECATED (Value: "typeCashMachine")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCave Don't use
 *        0xA7. Use 8 bits for additional types under TYPE_NATURAL_FEATURE, so
 *        we don't run out of space. The following are miscellaneous natural
 *        features that don't fit any of the categories above. (Value:
 *        "typeCave")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCay A small,
 *        low-elevation, sandy island formed on the surface of coral reefs
 *        (Value: "typeCay")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCelestial The root
 *        of types of features that are in the sky, rather than on the earth.
 *        There will eventually be a hierarchy of types here. (Value:
 *        "typeCelestial")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCemetery
 *        DEPRECATED (Value: "typeCemetery")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChannel A deep
 *        part in a body of water that is suitable for navigation. Includes
 *        narrows. (Value: "typeChannel")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChurch DEPRECATED
 *        (Value: "typeChurch")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCityHall
 *        DEPRECATED (Value: "typeCityHall")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCliff A vertical
 *        or nearly vertical slope. Includes escarpments. (Value: "typeCliff")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCoffee DEPRECATED
 *        (Value: "typeCoffee")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialArea
 *        e.g. Silicon Valley (Value: "typeColloquialArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialCity An
 *        entity widely considered to be a city, that may itself be made up of
 *        smaller political entities, some of which are cities/towns/villages
 *        themselves. For example, the colloquial view of Sydney, Australia
 *        actually comprises many smaller cities, but is regarded as a city
 *        itself. This type is not suitable for modeling official
 *        metro-/micropolitan or other statistical areas. (Value:
 *        "typeColloquialCity")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompound ABSTRACT
 *        (Value: "typeCompound")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundBuilding
 *        e.g. single family dwelling, office building. (Value:
 *        "typeCompoundBuilding")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundGrounds
 *        e.g. campus, compound, parcel. (Value: "typeCompoundGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundSection
 *        e.g. suite, room, hallway, cubicle. (Value: "typeCompoundSection")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConfluence A place
 *        where two or more rivers join. (Value: "typeConfluence")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituency Value
 *        "typeConstituency"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituencyFuture
 *        DEPRECATED (Value: "typeConstituencyFuture")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContinent Value
 *        "typeContinent"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContourLine All
 *        the points on the polygon are at the same elevation. (Value:
 *        "typeContourLine")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCountry Value
 *        "typeCountry"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCourthouse
 *        DEPRECATED (Value: "typeCourthouse")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCrater Depressions
 *        causes by impact, explosion, and sometimes sink-holes. (Value:
 *        "typeCrater")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCurrent Includes
 *        overfalls. (Value: "typeCurrent")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDam DEPRECATED
 *        (Value: "typeDam")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDataSource Every
 *        data source used in constructing a data repository has a corresponding
 *        feature that provides more information about that data source. The
 *        extra information is stored in the optional data_source field below.
 *        (Value: "typeDataSource")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDentist DEPRECATED
 *        (Value: "typeDentist")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedGolfShop
 *        DEPRECATED (Value: "typeDeprecatedGolfShop")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedHighwayDoNotUse
 *        DEPRECATED (Value: "typeDeprecatedHighwayDoNotUse")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedTarmac
 *        DEPRECATED (Value: "typeDeprecatedTarmac")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesert Value
 *        "typeDesert"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedBarbecuePit
 *        Value "typeDesignatedBarbecuePit"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedCookingArea
 *        Value "typeDesignatedCookingArea"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedMarketArea
 *        Designated Market Areas (or DMAs) are used by marketing and ratings
 *        companies (such as the Nielsen Media Research company) to describe
 *        geographical regions (such as the greater New York metropolitan area)
 *        that are covered by a set of television stations. (See
 *        http://www.schooldata.com/pdfs/DMA.pdf) In the United States, DMAs
 *        should have a DMA numeric ID name, tagged with the
 *        FLAG_DESIGNATED_MARKET_AREA_ID flag. (Value:
 *        "typeDesignatedMarketArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDigitalElevationModel
 *        RESERVED (Value: "typeDigitalElevationModel")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDisputedArea
 *        Eventually we'll have more data for disputed areas (e.g., who makes
 *        claims on the area, who has de facto control, etc.). For the moment,
 *        we just define a type so we can simply mark areas as disputed. (Value:
 *        "typeDisputedArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDistributary A
 *        branch which flows away from the main river. Includes deltas. (Value:
 *        "typeDistributary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoctor DEPRECATED
 *        (Value: "typeDoctor")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoNotUseReservedToCatchGeneratedFiles
 *        DEPRECATED (Value: "typeDoNotUseReservedToCatchGeneratedFiles")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoodle DEPRECATED
 *        (Value: "typeDoodle")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDrinkingWater
 *        Value "typeDrinkingWater"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDune Value
 *        "typeDune"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEarthquake
 *        DEPRECATED (Value: "typeEarthquake")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEcoTouristDestination
 *        DEPRECATED (Value: "typeEcoTouristDestination")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeElevated Features
 *        that are notable for being high (or low), or for having sudden changes
 *        in elevation. These features might have an "elevation" extension to
 *        specify the actual elevation. See ElevationProto for more information.
 *        (Value: "typeElevated")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmbassy DEPRECATED
 *        (Value: "typeEmbassy")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmergency
 *        DEPRECATED (Value: "typeEmergency")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEnclosedTrafficArea
 *        DEPRECATED (Value: "typeEnclosedTrafficArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEntrance A portal
 *        of entry or exit to another feature. Examples: - Subway station
 *        entrance. - Parking lot entrance. (Value: "typeEntrance")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishment
 *        ABSTRACT This type is being replaced by TYPE_COMPOUND_GROUNDS. For
 *        further details, see go/compounds-v2 (Value: "typeEstablishment")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentBuilding
 *        DEPRECATED (Value: "typeEstablishmentBuilding")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentGrounds
 *        DEPRECATED This type has been replaced by TYPE_COMPOUND_BUILDING. For
 *        further details, see go/oyster-compounds (Value:
 *        "typeEstablishmentGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentPoi
 *        An establishment which has a address (a.k.a. location or storefront).
 *        Note that it *may* also have a service area (e.g. a restaurant that
 *        offers both dine-in and delivery). This type of business is also known
 *        as a "hybrid" Service Area Business. Establishment POIs can be
 *        referenced by TYPE_COMPOUND features using the
 *        RELATION_PRIMARILY_OCCUPIED_BY. This is the reciprocal relation of the
 *        RELATION_OCCUPIES. (Value: "typeEstablishmentPoi")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentService
 *        A business without a storefront, e.g. a plumber. It would normally not
 *        have a place that a customer could visit to receive service, but it
 *        would have an area served by the business. Also known as a "pure"
 *        Service Area Business. NOTE(tcain): Using value 0xD441, since we could
 *        find ourselves with a need to differentiate service areas from
 *        online-only at this level in the future, but still benefit from being
 *        able to group those under a common parent, disjoint from
 *        TYPE_ESTABLISHMENT_POI. (Value: "typeEstablishmentService")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstuary A place at
 *        the end of a river where fresh and salt water mix. Includes tidal
 *        creeks and limans. (Value: "typeEstuary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEvent DEPRECATED
 *        (Value: "typeEvent")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFault Value
 *        "typeFault"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerry ABSTRACT
 *        (Value: "typeFerry")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryBoat The vast
 *        majority of ferries are ferry boats. (Value: "typeFerryBoat")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTerminal
 *        DEPRECATED (Value: "typeFerryTerminal")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTrain Also
 *        called a "car transport", a ferry train is a rail service that carries
 *        passengers and their vehicles across undrivable terrain. The Channel
 *        Tunnel ("Chunnel") is the most famous example, but they are also
 *        common in the Alps where they connect neighboring valleys otherwise
 *        separated by impassable mountains. (Value: "typeFerryTrain")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFire DEPRECATED
 *        (Value: "typeFire")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFishing DEPRECATED
 *        (Value: "typeFishing")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFissure Value
 *        "typeFissure"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFjord Value
 *        "typeFjord"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFord A shallow
 *        place where water may be waded through. (Value: "typeFord")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFunicularStation
 *        DEPRECATED (Value: "typeFunicularStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFutureGeometry A
 *        feature whose geometry is planned to replace the geometry on another
 *        feature. (Value: "typeFutureGeometry")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGasStation
 *        DEPRECATED (Value: "typeGasStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbCountry
 *        DEPRECATED (Value: "typeGbCountry")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDependentLocality
 *        DEPRECATED (Value: "typeGbDependentLocality")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDoubleDependentLocality
 *        DEPRECATED (Value: "typeGbDoubleDependentLocality")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbFormerPostalCounty
 *        DEPRECATED (Value: "typeGbFormerPostalCounty")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbPostTown
 *        DEPRECATED (Value: "typeGbPostTown")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbTraditionalCounty
 *        DEPRECATED (Value: "typeGbTraditionalCounty")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeocodedAddress An
 *        association of a point with an address, with no other information.
 *        (Value: "typeGeocodedAddress")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeyser Value
 *        "typeGeyser"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGlacier Value
 *        "typeGlacier"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolf DEPRECATED
 *        (Value: "typeGolf")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfCourse
 *        DEPRECATED (Value: "typeGolfCourse")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfFairway Value
 *        "typeGolfFairway"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfHole Use
 *        TYPE_ESTABLISHMENT_POI and gcid:golf_shop for golf shops instead.
 *        (Value: "typeGolfHole")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfPuttingGreen
 *        Value "typeGolfPuttingGreen"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfRough Value
 *        "typeGolfRough"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfSandBunker
 *        Value "typeGolfSandBunker"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfTeeingGround
 *        Sub-types within a golf course. (Value: "typeGolfTeeingGround")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGondolaLiftStation
 *        DEPRECATED (Value: "typeGondolaLiftStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGovernment
 *        DEPRECATED (Value: "typeGovernment")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrassland Value
 *        "typeGrassland"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrocery DEPRECATED
 *        (Value: "typeGrocery")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrounds DEPRECATED
 *        (Value: "typeGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGurudwara
 *        DEPRECATED (Value: "typeGurudwara")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHarbor A deep
 *        place near a shore where ships commonly drop anchor. (Value:
 *        "typeHarbor")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHeliport
 *        DEPRECATED (Value: "typeHeliport")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighSpeedRail
 *        Value "typeHighSpeedRail"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighTension
 *        DEPRECATED (Value: "typeHighTension")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway ABSTRACT
 *        (Value: "typeHighway")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway1 Value
 *        "typeHighway1"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway2 Value
 *        "typeHighway2"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway3 Value
 *        "typeHighway3"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway4 Value
 *        "typeHighway4"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway5 Value
 *        "typeHighway5"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway6 Value
 *        "typeHighway6"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway7 Value
 *        "typeHighway7"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway8 Value
 *        "typeHighway8"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway9 Value
 *        "typeHighway9"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHikingArea
 *        DEPRECATED (Value: "typeHikingArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHinduTemple
 *        DEPRECATED (Value: "typeHinduTemple")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHorseCarriageStation
 *        DEPRECATED (Value: "typeHorseCarriageStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospital
 *        DEPRECATED (Value: "typeHospital")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospitalGrounds
 *        DEPRECATED (Value: "typeHospitalGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHotSpring Value
 *        "typeHotSpring"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHunting DEPRECATED
 *        (Value: "typeHunting")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHurricane
 *        DEPRECATED (Value: "typeHurricane")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIce Value
 *        "typeIce"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIndustrial
 *        DEPRECATED (Value: "typeIndustrial")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeInlet Value
 *        "typeInlet"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersection An
 *        intersection consists of a collection of segments that terminate at
 *        the same location. This is topological definition: it may not match
 *        what a typical user would think of as an "intersection". See
 *        TYPE_INTERSECTION_GROUP, below, for more information. Each segment
 *        terminating at an intersection has an "endpoint type" that specifies
 *        how that segment is terminated: stop sign, yield sign, three-way
 *        light, etc. (Value: "typeIntersection")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersectionGroup
 *        Our TYPE_INTERSECTION feature, above, models the point where one or
 *        more segments terminate. This is topological definition: it may not
 *        match what a typical user would think of as an "intersection".
 *        Consider the intersections where Hayes, Market, Larkin, and 9th Street
 *        meet near (37.77765, -122.41638) in San Francisco. Most people would
 *        probably consider this a single feature, even though we model it as
 *        four separate TYPE_INTERSECTION features. This TYPE_INTERSECTION_GROUP
 *        is used to model the user's concept of a complex intersection. (Value:
 *        "typeIntersectionGroup")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIrrigation
 *        Man-made (and sometimes natural) channels used to move water. This
 *        type was used for both dam structures and water that is hold back by
 *        dams. We should use TYPE_COMPOUND_BUILDING for dam structures and
 *        TYPE_RESERVOIR for water. (Value: "typeIrrigation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsland Value
 *        "typeIsland"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsthmus A strip of
 *        land connecting two larger land masses, such as continents. (Value:
 *        "typeIsthmus")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpChiban
 *        DEPRECATED (Value: "typeJpChiban")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpEdaban
 *        DEPRECATED (Value: "typeJpEdaban")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGaiku DEPRECATED
 *        (Value: "typeJpGaiku")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGun DEPRECATED
 *        (Value: "typeJpGun")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpKoaza DEPRECATED
 *        (Value: "typeJpKoaza")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpOoaza DEPRECATED
 *        (Value: "typeJpOoaza")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpShikuchouson
 *        DEPRECATED (Value: "typeJpShikuchouson")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpSubShikuchouson
 *        DEPRECATED (Value: "typeJpSubShikuchouson")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpTodoufuken
 *        DEPRECATED (Value: "typeJpTodoufuken")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJrTrack Value
 *        "typeJrTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeKarst Topography
 *        formed on limestone and gypsum by dissolution with sinkholes, caves,
 *        etc. (Value: "typeKarst")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLagoon Value
 *        "typeLagoon"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLake An inland
 *        body of standing water. (Value: "typeLake")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandMass Value
 *        "typeLandMass"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandParcel Value
 *        "typeLandParcel"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLavaField Value
 *        "typeLavaField"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLevel A feature
 *        used to represent a logical level, e.g. floor. (Value: "typeLevel")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLibrary DEPRECATED
 *        (Value: "typeLibrary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLightRailTrack
 *        Value "typeLightRailTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLitterReceptacle
 *        Value "typeLitterReceptacle"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocale A locale
 *        feature provides region specific conventions such as preferred
 *        language and formatting details for time, date, and currency values.
 *        Locales aren't necessary defined by physical geographic features, so
 *        they are classified as meta-features. (Value: "typeLocale")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocality Value
 *        "typeLocality"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocalPark
 *        DEPRECATED (Value: "typeLocalPark")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLockerArea Value
 *        "typeLockerArea"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLodging DEPRECATED
 *        (Value: "typeLodging")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLogicalBorder A
 *        grouping of TYPE_BORDER features ("border segments"), which together
 *        represent a border between two features of the same type. (Value:
 *        "typeLogicalBorder")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMetaFeature
 *        ABSTRACT (Value: "typeMetaFeature")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMilitary
 *        DEPRECATED (Value: "typeMilitary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailStation
 *        DEPRECATED (Value: "typeMonorailStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailTrack
 *        Value "typeMonorailTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMosque DEPRECATED
 *        (Value: "typeMosque")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMountainRange A
 *        series of mountains or hills ranged in a line and connected by high
 *        ground. Mountain ranges usually consist of many smaller ridges. For
 *        example, the Himalayas, the Andes. the Alps, etc. (Value:
 *        "typeMountainRange")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMovieRental
 *        DEPRECATED (Value: "typeMovieRental")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNarrowTrack Value
 *        "typeNarrowTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalForest
 *        DEPRECATED (Value: "typeNationalForest")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalPark
 *        DEPRECATED (Value: "typeNationalPark")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNaturalFeature
 *        ABSTRACT (Value: "typeNaturalFeature")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNatureReserve
 *        DEPRECATED (Value: "typeNatureReserve")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNeighborhood Value
 *        "typeNeighborhood"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNunatak A peak or
 *        ridge of a mountain that extends through a glacier. (Value:
 *        "typeNunatak")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOcean One of the
 *        large salt-water bodies that covers most of the globe. (Value:
 *        "typeOcean")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOceanRockExposed
 *        An exposed rock in the water. (Value: "typeOceanRockExposed")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOffRoadArea
 *        DEPRECATED (Value: "typeOffRoadArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePan A near-level
 *        shallow, natural depression or basin, usually containing an
 *        intermittent lake, pond, or pool. (Value: "typePan")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePark DEPRECATED
 *        (Value: "typePark")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParking DEPRECATED
 *        (Value: "typeParking")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingGarage
 *        DEPRECATED (Value: "typeParkingGarage")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingLot
 *        DEPRECATED (Value: "typeParkingLot")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePass A route over
 *        an otherwise difficult to traverse feature. Includes saddle. (Value:
 *        "typePass")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePathway RESERVED
 *        (Value: "typePathway")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeak Elevations
 *        that have a distinctive peak. (Value: "typePeak")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeninsula A
 *        stretch of land projecting into water. Includes capes and spits.
 *        (Value: "typePeninsula")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePharmacy
 *        DEPRECATED (Value: "typePharmacy")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberAreaCode
 *        A phone number area code is a prefix which also coincides with the
 *        area code, or national destination code, of a particular region.
 *        (Value: "typePhoneNumberAreaCode")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberPrefix
 *        A phone number prefix feature is used to specify the region where
 *        phone numbers (typically fixed-line numbers) must begin with a certain
 *        prefix. Any phone number prefix down to any level of granularity could
 *        be represented by this type. (Value: "typePhoneNumberPrefix")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePicnicArea
 *        DEPRECATED (Value: "typePicnicArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlateau Elevations
 *        that are flat on top. Includes mesas and buttes. (Value:
 *        "typePlateau")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlayGround
 *        DEPRECATED (Value: "typePlayGround")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolice DEPRECATED
 *        (Value: "typePolice")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePoliceJurisdiction
 *        Boundaries representing the jurisdiction of a particular police
 *        station. (Value: "typePoliceJurisdiction")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolitical ABSTRACT
 *        (Value: "typePolitical")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePond Value
 *        "typePond"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostal ABSTRACT
 *        (Value: "typePostal")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCode This is
 *        the type for postal codes which are complete and independent enough
 *        that there should be a feature for them (e.g. US 5-digit ZIP codes).
 *        For even more detailed suffixes that further subdivide a postal code
 *        (such as the +4 component in US ZIP codes), store the information in a
 *        TYPE_POSTAL_CODE_SUFFIX address component. When a range or set of
 *        postal codes share the same geographical area, e.g. because a precise
 *        subdivision does not exist or this subdivision is unknown, this type
 *        is used for each individual postal code. (Value: "typePostalCode")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCodePrefix A
 *        prefix portion of a postal code which does not meet the requirements
 *        for TYPE_POSTAL_CODE, but which is useful to search for, for example
 *        UK outcodes. (Value: "typePostalCodePrefix")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalRound
 *        DEPRECATED (Value: "typePostalRound")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostOffice
 *        DEPRECATED (Value: "typePostOffice")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostTown The term
 *        "post town" is used for a locality-like-entity that is only used for
 *        postal addresses. (Value: "typePostTown")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePremise DEPRECATED
 *        (Value: "typePremise")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialForest
 *        DEPRECATED (Value: "typeProvincialForest")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialPark
 *        DEPRECATED (Value: "typeProvincialPark")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePublicSpacesAndMonuments
 *        ABSTRACT (Value: "typePublicSpacesAndMonuments")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRailway Railroads
 *        use several different incompatible track types. (Value: "typeRailway")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRapids Value
 *        "typeRapids"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRavine Steep
 *        declines usually carved by erosion. Includes valleys, canyons,
 *        ditches, and gorges. (Value: "typeRavine")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReef Rocks, coral,
 *        sandbars, or other features beneath the surface of the water that pose
 *        a hazard to passing ships. Includes shoals. (Value: "typeReef")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefExtent The
 *        full extent of the reef complex. (Value: "typeReefExtent")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefFlat A
 *        relatively shallow zone of the back reef located closest to the shore,
 *        that may be exposed at low tide. (Value: "typeReefFlat")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefGrowth A small
 *        section of rocks, coral, sandbars, or other features beneath the
 *        surface of the water that forms part of a reef. (Value:
 *        "typeReefGrowth")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefRockSubmerged
 *        A submerged rock in the water. (Value: "typeReefRockSubmerged")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRegulatedArea An
 *        area controlled in some way by an authoritative source, such as a
 *        government-designated COVID containment zone. Features of this type
 *        should have one or more gcids corresponding to their specific
 *        regulation. (Value: "typeRegulatedArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservation A
 *        reservation is a region collectively held or governed by indigenous
 *        people and officially recognized by the country’s government at the
 *        federal or state level. A reservation may be fully contained within an
 *        administrative feature or partially contained within two or more.
 *        These regions are referred to by different categorical names depending
 *        on country and even by state, including but not limited to: “Indian
 *        Reservations”, “Indian Reserves”, “Land Claim Settlement Lands”,
 *        “Indian Lands”, “Treaty Lands”, “Indigenous Territories”, etc. A
 *        reservation is not a historic indigenous territory boundary or a
 *        region which has applied for land rights but has not yet received
 *        official recognition. (Value: "typeReservation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservoir An
 *        artificial body of water, possibly created by a dam, often used for
 *        irrigation or house use. (Value: "typeReservoir")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestArea
 *        DEPRECATED (Value: "typeRestArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestaurant
 *        DEPRECATED (Value: "typeRestaurant")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestrictionGroup A
 *        restriction group describes a set of segment restrictions that belong
 *        together and have a name or an associated event. See also
 *        restriction_group.proto (Value: "typeRestrictionGroup")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRidge A ridge is a
 *        geographical feature consisting of a chain of mountains or hills that
 *        form a continuous elevated crest with a single ridgeline for some
 *        distance. (Value: "typeRidge")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRiver An inland
 *        body of moving water, or parts associated with it in which there is
 *        little or no current (backwater). (Value: "typeRiver")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoad Value
 *        "typeRoad"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadMonitor
 *        Features responsible for monitoring traffic on roads (usually for
 *        speed). Includes cameras at particular points as well as monitors that
 *        cover larger spans. Features of this type should have a corresponding
 *        gcid that specifies the correct subtype (e.g. gcid:road_camera or
 *        gcid:speed_camera_zone). This type was originally named as
 *        TYPE_ROAD_CAMERA. (Value: "typeRoadMonitor")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadSign Road sign
 *        features have names, point geometry, etc. They also have segment_path
 *        data (see below) which lists the segments that refer to the sign. See
 *        segment.proto for the reference from the segment to the road sign.
 *        (Value: "typeRoadSign")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRock Value
 *        "typeRock"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRocky Value
 *        "typeRocky"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoute A route is
 *        any section of road (or rails, etc.) that has a name. This includes
 *        city streets as well as highways. Road segments can belong to multiple
 *        routes (e.g. El Camino, CA-82). (Value: "typeRoute")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSaltFlat A flat
 *        expanse of salt left by the evaporation of a body of salt water.
 *        (Value: "typeSaltFlat")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSand Value
 *        "typeSand"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchool DEPRECATED
 *        (Value: "typeSchool")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchoolDistrict
 *        Value "typeSchoolDistrict"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSea An ocean
 *        subdivision more or less confined by land and islands. (Value:
 *        "typeSea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaplaneBase
 *        DEPRECATED (Value: "typeSeaplaneBase")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaport DEPRECATED
 *        (Value: "typeSeaport")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalLake A
 *        lake that dries up part of the year. (Value: "typeSeasonalLake")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalRiver A
 *        river that dries up part of the year. (Value: "typeSeasonalRiver")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegment ABSTRACT
 *        (Value: "typeSegment")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegmentPath
 *        ABSTRACT (Value: "typeSegmentPath")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShopping
 *        DEPRECATED (Value: "typeShopping")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShoppingCenter
 *        DEPRECATED (Value: "typeShoppingCenter")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShrubbery Value
 *        "typeShrubbery"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiBoundary Also
 *        see skiboundary.proto (Value: "typeSkiBoundary")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiLift Also see
 *        skilift.proto (Value: "typeSkiLift")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiTrail Also see
 *        skitrail.proto (Value: "typeSkiTrail")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSlope Land not so
 *        steep as a cliff, but changing elevation. Includes slides. (Value:
 *        "typeSlope")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpecialStation
 *        DEPRECATED (Value: "typeSpecialStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSportsComplex
 *        DEPRECATED (Value: "typeSportsComplex")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpring A place
 *        where ground water flows naturally out of the ground. (Value:
 *        "typeSpring")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpur A subsidiary
 *        peak of a mountain. (Value: "typeSpur")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStadium DEPRECATED
 *        (Value: "typeStadium")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStandardTrack
 *        Value "typeStandardTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatisticalArea An
 *        area used for aggregating statistical data, eg, a census region. Note
 *        that TYPE_STATISTICAL_AREA has a third nibble so we can add an
 *        abstract parent above it later if need be at 0x2E1 (and rename
 *        TYPE_STATISTICAL_AREA as TYPE_STATISTICAL_AREA1). (Value:
 *        "typeStatisticalArea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatue Note that
 *        this type does not distinguish the nature of the statue (religious,
 *        historical, memorial, tourist, ...). (Value: "typeStatue")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStrait A long
 *        narrow ocean subdivision. Includes sounds. (Value: "typeStrait")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality
 *        ABSTRACT (Value: "typeSublocality")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality1 Value
 *        "typeSublocality1"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality2 Value
 *        "typeSublocality2"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality3 Value
 *        "typeSublocality3"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality4 Value
 *        "typeSublocality4"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality5 Value
 *        "typeSublocality5"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineBasin
 *        Value "typeSubmarineBasin"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineCliff
 *        Value "typeSubmarineCliff"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineDeep
 *        Value "typeSubmarineDeep"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineFractureZone
 *        Value "typeSubmarineFractureZone"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineGap
 *        includes saddles (Value: "typeSubmarineGap")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlain
 *        Value "typeSubmarinePlain"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlateau
 *        Value "typeSubmarinePlateau"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineRidge
 *        Value "typeSubmarineRidge"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSeamount
 *        includes peaks, ranges, and spurs (Value: "typeSubmarineSeamount")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSlope
 *        Value "typeSubmarineSlope"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineValley
 *        includes trenches and troughs (Value: "typeSubmarineValley")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubPremise
 *        DEPRECATED This is deprecated and we want to use TYPE_COMPOUND_SECTION
 *        instead. (Value: "typeSubPremise")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayStation
 *        DEPRECATED (Value: "typeSubwayStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayTrack Value
 *        "typeSubwayTrack"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSuite DEPRECATED
 *        (Value: "typeSuite")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSynagogue
 *        DEPRECATED (Value: "typeSynagogue")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTarmac Starting
 *        with TYPE_TARMAC, we use longer IDs, so that we can expand the number
 *        of feature types under TYPE_CARTOGRAPHIC. (Value: "typeTarmac")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTectonic ABSTRACT
 *        This type is incorrectly under TYPE_TECTONIC instead of TYPE_WATER.
 *        This was a mistake and is now fixed. See TYPE_WATERING_HOLE for the
 *        replacement. (Value: "typeTectonic")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTemple DEPRECATED
 *        (Value: "typeTemple")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerminalPoint A
 *        terminal point represents a good location for a user to meet a taxi,
 *        ridesharing vehicle, or general driver. (Value: "typeTerminalPoint")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrace Value
 *        "typeTerrace"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrain Expanses
 *        of land that share common surface attributes. These areas would look
 *        more or less uniform from a high altitude. (Value: "typeTerrain")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTimezone A
 *        timezone feature is used to specify the region covering an
 *        international timezone. When a point is covered by multiple timezone
 *        features, the most specific one can be used to compute the local time
 *        at this point. Most specific implies a much smaller region or the one
 *        that is closer to the center. A feature's timezone can be specified in
 *        the repeated related_timezone field. (Value: "typeTimezone")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTollCluster A toll
 *        cluster is either a single point on a segment (represented as a point
 *        at the end of the segment that has ENDPOINT_TOLL_BOOTH set) or a group
 *        of points on various road segments in MapFacts that represents one or
 *        more lanes passing through a toll fixture that all go to the same
 *        routing destination. Each toll cluster should have at most a single
 *        price per payment method. E.g. {CASH = $5, PASS = $1}. Note: If a toll
 *        fixture has different prices for multiple routing destinations,
 *        drivers need to be in the correct lane before passing through the toll
 *        fixture and hence such a fixture is represented by multiple toll
 *        clusters. A toll cluster does not necessarily represent a real-world
 *        entity, e.g. a particular plaza/structure as perceived by humans. This
 *        is because a plaza can be represented by more than one toll cluster.
 *        We require toll clusters to have names, but they might be non-unique.
 *        For example, a plaza might be represented by multiple toll clusters
 *        that may have the same plaza name. For further details, please see
 *        go/toll-cluster-schema. (Value: "typeTollCluster")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTouristDestination
 *        DEPRECATED (Value: "typeTouristDestination")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTownSquare Open
 *        space used for events, gathering, or as market-place. (Value:
 *        "typeTownSquare")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrail A designated
 *        trail, which may consist of paved walkways, dirt paths, fire road,
 *        streets or highways, etc. (Value: "typeTrail")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrailHead Value
 *        "typeTrailHead"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrainStation
 *        DEPRECATED (Value: "typeTrainStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTramwayStation
 *        DEPRECATED (Value: "typeTramwayStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransient RESERVED
 *        (Value: "typeTransient")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransit ABSTRACT
 *        (Value: "typeTransit")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgency A
 *        transit agency operates a number of lines, typically all in the same
 *        city, region or country. See also transitagency.proto (Value:
 *        "typeTransitAgency")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgencyDeprecatedValue
 *        TYPE_TRANSIT_AGENCY was moved to 0xC91. This deprecated enum value
 *        still exists for debugging purposes only. (Value:
 *        "typeTransitAgencyDeprecatedValue")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitDeparture
 *        DEPRECATED (Value: "typeTransitDeparture")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLeg
 *        DEPRECATED (Value: "typeTransitLeg")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLine A
 *        transit line is a collection of transit legs, associated with some
 *        invariant properties of the trips that run over the legs. See also
 *        transitline.proto (Value: "typeTransitLine")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStation
 *        DEPRECATED (Value: "typeTransitStation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStop
 *        DEPRECATED (Value: "typeTransitStop")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTransfer
 *        DEPRECATED (Value: "typeTransitTransfer")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTrip
 *        DEPRECATED (Value: "typeTransitTrip")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransportation
 *        ABSTRACT (Value: "typeTransportation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTravelService
 *        DEPRECATED (Value: "typeTravelService")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrolleyTrack
 *        Tracks for streetcars, cable-cars, etc. Ferries are services that are
 *        part of the road network but are not roads. They typically involve
 *        fares and scheduled departure times. (Value: "typeTrolleyTrack")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTundra Value
 *        "typeTundra"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUndersea Features
 *        that are notable for being high (or low), or for having sudden changes
 *        in elevation. These features might have an "elevation" extension to
 *        specify the actual elevation. See ElevationProto for more information.
 *        (Value: "typeUndersea")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversity
 *        DEPRECATED (Value: "typeUniversity")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversityGrounds
 *        DEPRECATED (Value: "typeUniversityGrounds")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnknown A feature
 *        of completely unknown type. This should only be used when absolutely
 *        necessary. One example in which this type is useful is in the Chinese
 *        importer, which must heuristically segment addresses into components -
 *        it often does not know what types to make those components. Please
 *        note that the Oyster address formatter does not currently support
 *        address components of TYPE_UNKNOWN well. (Value: "typeUnknown")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnstableHillside
 *        Value "typeUnstableHillside"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUpland Land along
 *        streams higher than the alluvial plain or stream terrace. (Value:
 *        "typeUpland")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsBorough
 *        DEPRECATED (Value: "typeUsBorough")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalMonument
 *        DEPRECATED (Value: "typeUsNationalMonument")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalPark
 *        DEPRECATED (Value: "typeUsNationalPark")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsState DEPRECATED
 *        (Value: "typeUsState")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVegetation Terrain
 *        that is covered in vegetation. (Value: "typeVegetation")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVeterinarian
 *        DEPRECATED (Value: "typeVeterinarian")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVirtualSegment Any
 *        plausible 1-dimensional path through a 2+ dimensional space, for the
 *        purposes of making graph-search-based routing possible. Such segments
 *        can be used to model paths through parking lots, squares, floors of
 *        buildings and other areas. (Value: "typeVirtualSegment")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVista An elevated
 *        place that is notable for having a good view. Raster digital elevation
 *        data. This is not a type to be used by providers or consumed by
 *        clients. (Value: "typeVista")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVolcano Value
 *        "typeVolcano"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWadi A dry
 *        riverbed that occasionally receives flashfloods. (Value: "typeWadi")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWall Use
 *        TYPE_COMPOUND_GROUND and appropriate gcids for the next two. (Value:
 *        "typeWall")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWater Features can
 *        be TYPE_WATER if we don't have enough information to properly type the
 *        body of water. TYPE_WATER is also used as the type for child features
 *        that compose a TYPE_RIVER feature. (Value: "typeWater")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterfall Value
 *        "typeWaterfall"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterFountain
 *        Value "typeWaterFountain"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHole A
 *        natural depression filled with water where animals come to drink.
 *        (Value: "typeWateringHole")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHoleDeprecated
 *        DEPRECATED (Value: "typeWateringHoleDeprecated")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterNavigation
 *        Value "typeWaterNavigation"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWatershedBoundary
 *        Value "typeWatershedBoundary"
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWeatherCondition
 *        DEPRECATED (Value: "typeWeatherCondition")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWetland Land that
 *        is usually flooded. Includes bogs, marshes, flats, moors, and swamps.
 *        (Value: "typeWetland")
 *    @arg @c kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWoods Value
 *        "typeWoods"
 */
@property(nonatomic, copy, nullable) NSString *featureType;

/**
 *  Precision of the center point (lat/long) of the geocoded FeatureProto
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *positionPrecisionMeters;

/** The query sent to the geocoder */
@property(nonatomic, copy, nullable) NSString *queryString;

@end


/**
 *  Describes a political geography.
 */
@interface GTLRCivicInfo_GeographicDivision : GTLRObject

/**
 *  Any other valid OCD IDs that refer to the same division.\\n\\nBecause OCD
 *  IDs are meant to be human-readable and at least somewhat predictable, there
 *  are occasionally several identifiers for a single division. These
 *  identifiers are defined to be equivalent to one another, and one is always
 *  indicated as the primary identifier. The primary identifier will be returned
 *  in ocd_id above, and any other equivalent valid identifiers will be returned
 *  in this list.\\n\\nFor example, if this division's OCD ID is
 *  ocd-division/country:us/district:dc, this will contain
 *  ocd-division/country:us/state:dc.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *alsoKnownAs;

/** The name of the division. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of indices in the offices array, one for each office elected from this
 *  division. Will only be present if includeOffices was true (or absent) in the
 *  request.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *officeIndices;

@end


/**
 *  This is proto2's version of MessageSet.
 */
@interface GTLRCivicInfo_MessageSet : GTLRObject
@end


/**
 *  Information about an Office held by one or more Officials.
 */
@interface GTLRCivicInfo_Office : GTLRObject

/** The OCD ID of the division with which this office is associated. */
@property(nonatomic, copy, nullable) NSString *divisionId;

/**
 *  The levels of government of which this office is part. There may be more
 *  than one in cases where a jurisdiction effectively acts at two different
 *  levels of government; for example, the mayor of the District of Columbia
 *  acts at "locality" level, but also effectively at both
 *  "administrative-area-2" and "administrative-area-1".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *levels;

/** The human-readable name of the office. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of indices in the officials array of people who presently hold this
 *  office.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *officialIndices;

/**
 *  The roles which this office fulfills. Roles are not meant to be exhaustive,
 *  or to exactly specify the entire set of responsibilities of a given office,
 *  but are meant to be rough categories that are useful for general selection
 *  from or sorting of a list of offices.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *roles;

/**
 *  A list of sources for this office. If multiple sources are listed, the data
 *  has been aggregated from those sources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Source *> *sources;

@end


/**
 *  Information about a person holding an elected office.
 */
@interface GTLRCivicInfo_Official : GTLRObject

/** Addresses at which to contact the official. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_SimpleAddressType *> *address;

/** A list of known (social) media channels for this official. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Channel *> *channels;

/** The direct email addresses for the official. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

/** Detailed summary about the official's address's geocoding */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_GeocodingSummary *> *geocodingSummaries;

/** The official's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The full name of the party the official belongs to. */
@property(nonatomic, copy, nullable) NSString *party;

/** The official's public contact phone numbers. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *phones;

/** A URL for a photo of the official. */
@property(nonatomic, copy, nullable) NSString *photoUrl;

/** The official's public website URLs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *urls;

@end


/**
 *  A location where a voter can vote. This may be an early vote site, an
 *  election day voting location, or a drop off location for a completed ballot.
 */
@interface GTLRCivicInfo_PollingLocation : GTLRObject

/** The address of the location. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_SimpleAddressType *address;

/**
 *  The last date that this early vote site or drop off location may be used.
 *  This field is not populated for polling locations.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  Latitude of the location, in degrees north of the equator. Note this field
 *  may not be available for some locations.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  Longitude of the location, in degrees east of the Prime Meridian. Note this
 *  field may not be available for some locations.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

/**
 *  The name of the early vote site or drop off location. This field is not
 *  populated for polling locations.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Notes about this location (e.g. accessibility ramp or entrance to use). */
@property(nonatomic, copy, nullable) NSString *notes;

/** A description of when this location is open. */
@property(nonatomic, copy, nullable) NSString *pollingHours;

/**
 *  A list of sources for this location. If multiple sources are listed the data
 *  has been aggregated from those sources.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Source *> *sources;

/**
 *  The first date that this early vote site or drop off location may be used.
 *  This field is not populated for polling locations.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  The services provided by this early vote site or drop off location. This
 *  field is not populated for polling locations.
 */
@property(nonatomic, copy, nullable) NSString *voterServices;

@end


/**
 *  GTLRCivicInfo_Precinct
 */
@interface GTLRCivicInfo_Precinct : GTLRObject

/**
 *  ID of the AdministrationRegion message for this precinct. Corresponds to
 *  LocalityId xml tag.
 */
@property(nonatomic, copy, nullable) NSString *administrationRegionId;

/** ID(s) of the Contest message(s) for this precinct. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *contestId;

/**
 *  Required. Dataset ID. What datasets our Precincts come from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *datasetId;

/** ID(s) of the PollingLocation message(s) for this precinct. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *earlyVoteSiteId;

/** ID(s) of the ElectoralDistrict message(s) for this precinct. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *electoralDistrictId;

/**
 *  Required. A unique identifier for this precinct.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Specifies if the precinct runs mail-only elections.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mailOnly;

/** Required. The name of the precinct. */
@property(nonatomic, copy, nullable) NSString *name;

/** The number of the precinct. */
@property(nonatomic, copy, nullable) NSString *number;

/** Encouraged. The OCD ID of the precinct */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ocdId;

/** ID(s) of the PollingLocation message(s) for this precinct. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *pollingLocationId;

/**
 *  ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a
 *  geometrical boundary of the precinct.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *spatialBoundaryId;

/**
 *  If present, this proto corresponds to one portion of split precinct. Other
 *  portions of this precinct are guaranteed to have the same `name`. If not
 *  present, this proto represents a full precicnt.
 */
@property(nonatomic, copy, nullable) NSString *splitName;

/** Specifies the ward the precinct is contained within. */
@property(nonatomic, copy, nullable) NSString *ward;

@end


/**
 *  GTLRCivicInfo_RepresentativeInfoData
 */
@interface GTLRCivicInfo_RepresentativeInfoData : GTLRObject

/**
 *  A map of political geographic divisions that contain the requested address,
 *  keyed by the unique Open Civic Data identifier for this division.
 */
@property(nonatomic, strong, nullable) GTLRCivicInfo_RepresentativeInfoData_Divisions *divisions;

/**
 *  Elected offices referenced by the divisions listed above. Will only be
 *  present if includeOffices was true in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Office *> *offices;

/**
 *  Officials holding the offices listed above. Will only be present if
 *  includeOffices was true in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Official *> *officials;

@end


/**
 *  A map of political geographic divisions that contain the requested address,
 *  keyed by the unique Open Civic Data identifier for this division.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCivicInfo_GeographicDivision. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCivicInfo_RepresentativeInfoData_Divisions : GTLRObject
@end


/**
 *  The result of a representative info lookup query.
 */
@interface GTLRCivicInfo_RepresentativeInfoResponse : GTLRObject

/**
 *  A map of political geographic divisions that contain the requested address,
 *  keyed by the unique Open Civic Data identifier for this division.
 */
@property(nonatomic, strong, nullable) GTLRCivicInfo_RepresentativeInfoResponse_Divisions *divisions;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "civicinfo#representativeInfoResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The normalized version of the requested address */
@property(nonatomic, strong, nullable) GTLRCivicInfo_SimpleAddressType *normalizedInput;

/**
 *  Elected offices referenced by the divisions listed above. Will only be
 *  present if includeOffices was true in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Office *> *offices;

/**
 *  Officials holding the offices listed above. Will only be present if
 *  includeOffices was true in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Official *> *officials;

@end


/**
 *  A map of political geographic divisions that contain the requested address,
 *  keyed by the unique Open Civic Data identifier for this division.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCivicInfo_GeographicDivision. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCivicInfo_RepresentativeInfoResponse_Divisions : GTLRObject
@end


/**
 *  A simple representation of an address.
 */
@interface GTLRCivicInfo_SimpleAddressType : GTLRObject

/** The city or town for the address. */
@property(nonatomic, copy, nullable) NSString *city;

/** The street name and number of this address. */
@property(nonatomic, copy, nullable) NSString *line1;

/** The second line the address, if needed. */
@property(nonatomic, copy, nullable) NSString *line2;

/** The third line of the address, if needed. */
@property(nonatomic, copy, nullable) NSString *line3;

/** The name of the location. */
@property(nonatomic, copy, nullable) NSString *locationName;

/** The US two letter state abbreviation of the address. */
@property(nonatomic, copy, nullable) NSString *state;

/** The US Postal Zip Code of the address. */
@property(nonatomic, copy, nullable) NSString *zip;

@end


/**
 *  Contains information about the data source for the element containing it.
 */
@interface GTLRCivicInfo_Source : GTLRObject

/** The name of the data source. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Whether this data comes from an official government source.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *official;

@end


/**
 *  The result of a voter info lookup query.
 */
@interface GTLRCivicInfo_VoterInfoResponse : GTLRObject

/** Contests that will appear on the voter's ballot. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Contest *> *contests;

/**
 *  Locations where a voter is eligible to drop off a completed ballot. The
 *  voter must have received and completed a ballot prior to arriving at the
 *  location. The location may not have ballots available on the premises. These
 *  locations could be open on or before election day as indicated in the
 *  pollingHours field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_PollingLocation *> *dropOffLocations;

/**
 *  Locations where the voter is eligible to vote early, prior to election day.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_PollingLocation *> *earlyVoteSites;

/** The election that was queried. */
@property(nonatomic, strong, nullable) GTLRCivicInfo_Election *election;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  "civicinfo#voterInfoResponse".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Specifies whether voters in the precinct vote only by mailing their ballots
 *  (with the possible option of dropping off their ballots as well).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mailOnly;

/** The normalized version of the requested address */
@property(nonatomic, strong, nullable) GTLRCivicInfo_SimpleAddressType *normalizedInput;

/**
 *  When there are multiple elections for a voter address, the otherElections
 *  field is populated in the API response and there are two possibilities: 1.
 *  If the earliest election is not the intended election, specify the election
 *  ID of the desired election in a second API request using the electionId
 *  field. 2. If these elections occur on the same day, the API doesn?t return
 *  any polling location, contest, or election official information to ensure
 *  that an additional query is made. For user-facing applications, we recommend
 *  displaying these elections to the user to disambiguate. A second API request
 *  using the electionId field should be made for the election that is relevant
 *  to the user.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Election *> *otherElections;

/** Locations where the voter is eligible to vote on election day. */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_PollingLocation *> *pollingLocations;

@property(nonatomic, copy, nullable) NSString *precinctId;

/**
 *  The precincts that match this voter's address. Will only be returned for
 *  project IDs which have been whitelisted as "partner projects".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_Precinct *> *precincts;

/**
 *  Local Election Information for the state that the voter votes in. For the
 *  US, there will only be one element in this array.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCivicInfo_AdministrationRegion *> *state;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
