// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Civic Information API (civicinfo/v2)
// Description:
//   Provides polling places, early vote locations, contest data, election
//   officials, and government representatives for U.S. residential addresses.
// Documentation:
//   https://developers.google.com/civic-information/

#import <GoogleAPIClientForREST/GTLRCivicInfoObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRCivicInfo_Contest.level
NSString * const kGTLRCivicInfo_Contest_Level_AdministrativeArea1 = @"administrativeArea1";
NSString * const kGTLRCivicInfo_Contest_Level_AdministrativeArea2 = @"administrativeArea2";
NSString * const kGTLRCivicInfo_Contest_Level_Country          = @"country";
NSString * const kGTLRCivicInfo_Contest_Level_International    = @"international";
NSString * const kGTLRCivicInfo_Contest_Level_Locality         = @"locality";
NSString * const kGTLRCivicInfo_Contest_Level_Regional         = @"regional";
NSString * const kGTLRCivicInfo_Contest_Level_Special          = @"special";
NSString * const kGTLRCivicInfo_Contest_Level_SubLocality1     = @"subLocality1";
NSString * const kGTLRCivicInfo_Contest_Level_SubLocality2     = @"subLocality2";

// GTLRCivicInfo_Contest.roles
NSString * const kGTLRCivicInfo_Contest_Roles_DeputyHeadOfGovernment = @"deputyHeadOfGovernment";
NSString * const kGTLRCivicInfo_Contest_Roles_ExecutiveCouncil = @"executiveCouncil";
NSString * const kGTLRCivicInfo_Contest_Roles_GovernmentOfficer = @"governmentOfficer";
NSString * const kGTLRCivicInfo_Contest_Roles_HeadOfGovernment = @"headOfGovernment";
NSString * const kGTLRCivicInfo_Contest_Roles_HeadOfState      = @"headOfState";
NSString * const kGTLRCivicInfo_Contest_Roles_HighestCourtJudge = @"highestCourtJudge";
NSString * const kGTLRCivicInfo_Contest_Roles_Judge            = @"judge";
NSString * const kGTLRCivicInfo_Contest_Roles_LegislatorLowerBody = @"legislatorLowerBody";
NSString * const kGTLRCivicInfo_Contest_Roles_LegislatorUpperBody = @"legislatorUpperBody";
NSString * const kGTLRCivicInfo_Contest_Roles_OtherRole        = @"otherRole";
NSString * const kGTLRCivicInfo_Contest_Roles_SchoolBoard      = @"schoolBoard";
NSString * const kGTLRCivicInfo_Contest_Roles_SpecialPurposeOfficer = @"specialPurposeOfficer";

// GTLRCivicInfo_Election.shapeLookupBehavior
NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDefault = @"shapeLookupDefault";
NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupDisabled = @"shapeLookupDisabled";
NSString * const kGTLRCivicInfo_Election_ShapeLookupBehavior_ShapeLookupEnabled = @"shapeLookupEnabled";

// GTLRCivicInfo_ElectoralDistrict.scope
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_CityCouncil = @"cityCouncil";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Citywide = @"citywide";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Congressional = @"congressional";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_CountyCouncil = @"countyCouncil";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Countywide = @"countywide";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Judicial = @"judicial";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_National = @"national";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_SchoolBoard = @"schoolBoard";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Special = @"special";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_StateLower = @"stateLower";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_StateUpper = @"stateUpper";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Statewide = @"statewide";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Township = @"township";
NSString * const kGTLRCivicInfo_ElectoralDistrict_Scope_Ward   = @"ward";

// GTLRCivicInfo_GeocodingSummary.featureType
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAddressTemplate = @"typeAddressTemplate";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea = @"typeAdministrativeArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea1 = @"typeAdministrativeArea1";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea2 = @"typeAdministrativeArea2";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea3 = @"typeAdministrativeArea3";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea4 = @"typeAdministrativeArea4";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea5 = @"typeAdministrativeArea5";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea6 = @"typeAdministrativeArea6";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea7 = @"typeAdministrativeArea7";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea8 = @"typeAdministrativeArea8";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAdministrativeArea9 = @"typeAdministrativeArea9";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAgricultural = @"typeAgricultural";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirport = @"typeAirport";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportCivil = @"typeAirportCivil";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportGrounds = @"typeAirportGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMilitary = @"typeAirportMilitary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirportMixed = @"typeAirportMixed";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAirstrip = @"typeAirstrip";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAnimalEnclosure = @"typeAnimalEnclosure";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAny = @"typeAny";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeArchipelago = @"typeArchipelago";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeAtoll = @"typeAtoll";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBank = @"typeBank";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBar = @"typeBar";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBay = @"typeBay";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBeach = @"typeBeach";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBicycleRoute = @"typeBicycleRoute";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBight = @"typeBight";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBirdWatching = @"typeBirdWatching";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorder = @"typeBorder";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBorderCrossing = @"typeBorderCrossing";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBroadTrack = @"typeBroadTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuilding = @"typeBuilding";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuildingGrounds = @"typeBuildingGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBuiltUpArea = @"typeBuiltUpArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusiness = @"typeBusiness";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessChain = @"typeBusinessChain";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusinessCorridor = @"typeBusinessCorridor";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeBusStation = @"typeBusStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCableCarStation = @"typeCableCarStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampfirePit = @"typeCampfirePit";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampgrounds = @"typeCampgrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCampingSite = @"typeCampingSite";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCanal = @"typeCanal";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRental = @"typeCarRental";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCarRepair = @"typeCarRepair";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographic = @"typeCartographic";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCartographicLine = @"typeCartographicLine";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCashMachine = @"typeCashMachine";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCave = @"typeCave";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCay = @"typeCay";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCelestial = @"typeCelestial";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCemetery = @"typeCemetery";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChannel = @"typeChannel";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeChurch = @"typeChurch";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCityHall = @"typeCityHall";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCliff = @"typeCliff";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCoffee = @"typeCoffee";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialArea = @"typeColloquialArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeColloquialCity = @"typeColloquialCity";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompound = @"typeCompound";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundBuilding = @"typeCompoundBuilding";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundGrounds = @"typeCompoundGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCompoundSection = @"typeCompoundSection";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConfluence = @"typeConfluence";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituency = @"typeConstituency";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeConstituencyFuture = @"typeConstituencyFuture";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContinent = @"typeContinent";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeContourLine = @"typeContourLine";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCountry = @"typeCountry";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCourthouse = @"typeCourthouse";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCrater = @"typeCrater";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeCurrent = @"typeCurrent";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDam = @"typeDam";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDataSource = @"typeDataSource";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDentist = @"typeDentist";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedGolfShop = @"typeDeprecatedGolfShop";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedHighwayDoNotUse = @"typeDeprecatedHighwayDoNotUse";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDeprecatedTarmac = @"typeDeprecatedTarmac";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesert = @"typeDesert";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedBarbecuePit = @"typeDesignatedBarbecuePit";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedCookingArea = @"typeDesignatedCookingArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDesignatedMarketArea = @"typeDesignatedMarketArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDigitalElevationModel = @"typeDigitalElevationModel";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDisputedArea = @"typeDisputedArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDistributary = @"typeDistributary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoctor = @"typeDoctor";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoNotUseReservedToCatchGeneratedFiles = @"typeDoNotUseReservedToCatchGeneratedFiles";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDoodle = @"typeDoodle";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDrinkingWater = @"typeDrinkingWater";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeDune = @"typeDune";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEarthquake = @"typeEarthquake";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEcoTouristDestination = @"typeEcoTouristDestination";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeElevated = @"typeElevated";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmbassy = @"typeEmbassy";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEmergency = @"typeEmergency";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEnclosedTrafficArea = @"typeEnclosedTrafficArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEntrance = @"typeEntrance";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishment = @"typeEstablishment";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentBuilding = @"typeEstablishmentBuilding";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentGrounds = @"typeEstablishmentGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentPoi = @"typeEstablishmentPoi";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstablishmentService = @"typeEstablishmentService";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEstuary = @"typeEstuary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeEvent = @"typeEvent";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFault = @"typeFault";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerry = @"typeFerry";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryBoat = @"typeFerryBoat";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTerminal = @"typeFerryTerminal";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFerryTrain = @"typeFerryTrain";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFire = @"typeFire";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFishing = @"typeFishing";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFissure = @"typeFissure";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFjord = @"typeFjord";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFord = @"typeFord";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFunicularStation = @"typeFunicularStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeFutureGeometry = @"typeFutureGeometry";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGasStation = @"typeGasStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbCountry = @"typeGbCountry";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDependentLocality = @"typeGbDependentLocality";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbDoubleDependentLocality = @"typeGbDoubleDependentLocality";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbFormerPostalCounty = @"typeGbFormerPostalCounty";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbPostTown = @"typeGbPostTown";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGbTraditionalCounty = @"typeGbTraditionalCounty";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeocodedAddress = @"typeGeocodedAddress";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGeyser = @"typeGeyser";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGlacier = @"typeGlacier";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolf = @"typeGolf";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfCourse = @"typeGolfCourse";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfFairway = @"typeGolfFairway";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfHole = @"typeGolfHole";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfPuttingGreen = @"typeGolfPuttingGreen";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfRough = @"typeGolfRough";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfSandBunker = @"typeGolfSandBunker";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGolfTeeingGround = @"typeGolfTeeingGround";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGondolaLiftStation = @"typeGondolaLiftStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGovernment = @"typeGovernment";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrassland = @"typeGrassland";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrocery = @"typeGrocery";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGrounds = @"typeGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeGurudwara = @"typeGurudwara";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHarbor = @"typeHarbor";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHeliport = @"typeHeliport";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighSpeedRail = @"typeHighSpeedRail";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighTension = @"typeHighTension";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway = @"typeHighway";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway1 = @"typeHighway1";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway2 = @"typeHighway2";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway3 = @"typeHighway3";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway4 = @"typeHighway4";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway5 = @"typeHighway5";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway6 = @"typeHighway6";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway7 = @"typeHighway7";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway8 = @"typeHighway8";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHighway9 = @"typeHighway9";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHikingArea = @"typeHikingArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHinduTemple = @"typeHinduTemple";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHorseCarriageStation = @"typeHorseCarriageStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospital = @"typeHospital";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHospitalGrounds = @"typeHospitalGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHotSpring = @"typeHotSpring";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHunting = @"typeHunting";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeHurricane = @"typeHurricane";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIce = @"typeIce";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIndustrial = @"typeIndustrial";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeInlet = @"typeInlet";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersection = @"typeIntersection";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIntersectionGroup = @"typeIntersectionGroup";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIrrigation = @"typeIrrigation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsland = @"typeIsland";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeIsthmus = @"typeIsthmus";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpChiban = @"typeJpChiban";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpEdaban = @"typeJpEdaban";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGaiku = @"typeJpGaiku";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpGun = @"typeJpGun";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpKoaza = @"typeJpKoaza";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpOoaza = @"typeJpOoaza";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpShikuchouson = @"typeJpShikuchouson";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpSubShikuchouson = @"typeJpSubShikuchouson";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJpTodoufuken = @"typeJpTodoufuken";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeJrTrack = @"typeJrTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeKarst = @"typeKarst";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLagoon = @"typeLagoon";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLake = @"typeLake";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandMass = @"typeLandMass";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLandParcel = @"typeLandParcel";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLavaField = @"typeLavaField";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLevel = @"typeLevel";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLibrary = @"typeLibrary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLightRailTrack = @"typeLightRailTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLitterReceptacle = @"typeLitterReceptacle";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocale = @"typeLocale";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocality = @"typeLocality";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLocalPark = @"typeLocalPark";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLockerArea = @"typeLockerArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLodging = @"typeLodging";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeLogicalBorder = @"typeLogicalBorder";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMetaFeature = @"typeMetaFeature";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMilitary = @"typeMilitary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailStation = @"typeMonorailStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMonorailTrack = @"typeMonorailTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMosque = @"typeMosque";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMountainRange = @"typeMountainRange";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeMovieRental = @"typeMovieRental";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNarrowTrack = @"typeNarrowTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalForest = @"typeNationalForest";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNationalPark = @"typeNationalPark";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNaturalFeature = @"typeNaturalFeature";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNatureReserve = @"typeNatureReserve";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNeighborhood = @"typeNeighborhood";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeNunatak = @"typeNunatak";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOcean = @"typeOcean";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOceanRockExposed = @"typeOceanRockExposed";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeOffRoadArea = @"typeOffRoadArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePan = @"typePan";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePark = @"typePark";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParking = @"typeParking";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingGarage = @"typeParkingGarage";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeParkingLot = @"typeParkingLot";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePass = @"typePass";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePathway = @"typePathway";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeak = @"typePeak";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePeninsula = @"typePeninsula";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePharmacy = @"typePharmacy";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberAreaCode = @"typePhoneNumberAreaCode";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePhoneNumberPrefix = @"typePhoneNumberPrefix";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePicnicArea = @"typePicnicArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlateau = @"typePlateau";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePlayGround = @"typePlayGround";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolice = @"typePolice";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePoliceJurisdiction = @"typePoliceJurisdiction";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePolitical = @"typePolitical";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePond = @"typePond";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostal = @"typePostal";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCode = @"typePostalCode";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalCodePrefix = @"typePostalCodePrefix";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostalRound = @"typePostalRound";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostOffice = @"typePostOffice";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePostTown = @"typePostTown";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePremise = @"typePremise";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialForest = @"typeProvincialForest";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeProvincialPark = @"typeProvincialPark";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypePublicSpacesAndMonuments = @"typePublicSpacesAndMonuments";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRailway = @"typeRailway";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRapids = @"typeRapids";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRavine = @"typeRavine";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReef = @"typeReef";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefExtent = @"typeReefExtent";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefFlat = @"typeReefFlat";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefGrowth = @"typeReefGrowth";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReefRockSubmerged = @"typeReefRockSubmerged";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRegulatedArea = @"typeRegulatedArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservation = @"typeReservation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeReservoir = @"typeReservoir";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestArea = @"typeRestArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestaurant = @"typeRestaurant";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRestrictionGroup = @"typeRestrictionGroup";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRidge = @"typeRidge";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRiver = @"typeRiver";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoad = @"typeRoad";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadMonitor = @"typeRoadMonitor";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoadSign = @"typeRoadSign";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRock = @"typeRock";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRocky = @"typeRocky";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeRoute = @"typeRoute";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSaltFlat = @"typeSaltFlat";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSand = @"typeSand";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchool = @"typeSchool";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSchoolDistrict = @"typeSchoolDistrict";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSea = @"typeSea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaplaneBase = @"typeSeaplaneBase";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeaport = @"typeSeaport";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalLake = @"typeSeasonalLake";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSeasonalRiver = @"typeSeasonalRiver";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegment = @"typeSegment";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSegmentPath = @"typeSegmentPath";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShopping = @"typeShopping";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShoppingCenter = @"typeShoppingCenter";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeShrubbery = @"typeShrubbery";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiBoundary = @"typeSkiBoundary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiLift = @"typeSkiLift";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSkiTrail = @"typeSkiTrail";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSlope = @"typeSlope";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpecialStation = @"typeSpecialStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSportsComplex = @"typeSportsComplex";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpring = @"typeSpring";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSpur = @"typeSpur";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStadium = @"typeStadium";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStandardTrack = @"typeStandardTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatisticalArea = @"typeStatisticalArea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStatue = @"typeStatue";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeStrait = @"typeStrait";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality = @"typeSublocality";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality1 = @"typeSublocality1";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality2 = @"typeSublocality2";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality3 = @"typeSublocality3";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality4 = @"typeSublocality4";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSublocality5 = @"typeSublocality5";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineBasin = @"typeSubmarineBasin";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineCliff = @"typeSubmarineCliff";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineDeep = @"typeSubmarineDeep";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineFractureZone = @"typeSubmarineFractureZone";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineGap = @"typeSubmarineGap";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlain = @"typeSubmarinePlain";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarinePlateau = @"typeSubmarinePlateau";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineRidge = @"typeSubmarineRidge";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSeamount = @"typeSubmarineSeamount";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineSlope = @"typeSubmarineSlope";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubmarineValley = @"typeSubmarineValley";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubPremise = @"typeSubPremise";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayStation = @"typeSubwayStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSubwayTrack = @"typeSubwayTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSuite = @"typeSuite";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeSynagogue = @"typeSynagogue";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTarmac = @"typeTarmac";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTectonic = @"typeTectonic";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTemple = @"typeTemple";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerminalPoint = @"typeTerminalPoint";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrace = @"typeTerrace";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTerrain = @"typeTerrain";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTimezone = @"typeTimezone";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTollCluster = @"typeTollCluster";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTouristDestination = @"typeTouristDestination";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTownSquare = @"typeTownSquare";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrail = @"typeTrail";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrailHead = @"typeTrailHead";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrainStation = @"typeTrainStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTramwayStation = @"typeTramwayStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransient = @"typeTransient";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransit = @"typeTransit";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgency = @"typeTransitAgency";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitAgencyDeprecatedValue = @"typeTransitAgencyDeprecatedValue";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitDeparture = @"typeTransitDeparture";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLeg = @"typeTransitLeg";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitLine = @"typeTransitLine";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStation = @"typeTransitStation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitStop = @"typeTransitStop";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTransfer = @"typeTransitTransfer";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransitTrip = @"typeTransitTrip";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTransportation = @"typeTransportation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTravelService = @"typeTravelService";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTrolleyTrack = @"typeTrolleyTrack";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeTundra = @"typeTundra";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUndersea = @"typeUndersea";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversity = @"typeUniversity";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUniversityGrounds = @"typeUniversityGrounds";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnknown = @"typeUnknown";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUnstableHillside = @"typeUnstableHillside";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUpland = @"typeUpland";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsBorough = @"typeUsBorough";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalMonument = @"typeUsNationalMonument";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsNationalPark = @"typeUsNationalPark";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeUsState = @"typeUsState";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVegetation = @"typeVegetation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVeterinarian = @"typeVeterinarian";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVirtualSegment = @"typeVirtualSegment";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVista = @"typeVista";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeVolcano = @"typeVolcano";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWadi = @"typeWadi";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWall = @"typeWall";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWater = @"typeWater";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterfall = @"typeWaterfall";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterFountain = @"typeWaterFountain";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHole = @"typeWateringHole";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWateringHoleDeprecated = @"typeWateringHoleDeprecated";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWaterNavigation = @"typeWaterNavigation";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWatershedBoundary = @"typeWatershedBoundary";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWeatherCondition = @"typeWeatherCondition";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWetland = @"typeWetland";
NSString * const kGTLRCivicInfo_GeocodingSummary_FeatureType_TypeWoods = @"typeWoods";

// GTLRCivicInfo_Office.levels
NSString * const kGTLRCivicInfo_Office_Levels_AdministrativeArea1 = @"administrativeArea1";
NSString * const kGTLRCivicInfo_Office_Levels_AdministrativeArea2 = @"administrativeArea2";
NSString * const kGTLRCivicInfo_Office_Levels_Country          = @"country";
NSString * const kGTLRCivicInfo_Office_Levels_International    = @"international";
NSString * const kGTLRCivicInfo_Office_Levels_Locality         = @"locality";
NSString * const kGTLRCivicInfo_Office_Levels_Regional         = @"regional";
NSString * const kGTLRCivicInfo_Office_Levels_Special          = @"special";
NSString * const kGTLRCivicInfo_Office_Levels_SubLocality1     = @"subLocality1";
NSString * const kGTLRCivicInfo_Office_Levels_SubLocality2     = @"subLocality2";

// GTLRCivicInfo_Office.roles
NSString * const kGTLRCivicInfo_Office_Roles_DeputyHeadOfGovernment = @"deputyHeadOfGovernment";
NSString * const kGTLRCivicInfo_Office_Roles_ExecutiveCouncil  = @"executiveCouncil";
NSString * const kGTLRCivicInfo_Office_Roles_GovernmentOfficer = @"governmentOfficer";
NSString * const kGTLRCivicInfo_Office_Roles_HeadOfGovernment  = @"headOfGovernment";
NSString * const kGTLRCivicInfo_Office_Roles_HeadOfState       = @"headOfState";
NSString * const kGTLRCivicInfo_Office_Roles_HighestCourtJudge = @"highestCourtJudge";
NSString * const kGTLRCivicInfo_Office_Roles_Judge             = @"judge";
NSString * const kGTLRCivicInfo_Office_Roles_LegislatorLowerBody = @"legislatorLowerBody";
NSString * const kGTLRCivicInfo_Office_Roles_LegislatorUpperBody = @"legislatorUpperBody";
NSString * const kGTLRCivicInfo_Office_Roles_OtherRole         = @"otherRole";
NSString * const kGTLRCivicInfo_Office_Roles_SchoolBoard       = @"schoolBoard";
NSString * const kGTLRCivicInfo_Office_Roles_SpecialPurposeOfficer = @"specialPurposeOfficer";

// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_AdministrationRegion
//

@implementation GTLRCivicInfo_AdministrationRegion
@dynamic electionAdministrationBody, localJurisdiction, name, sources;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"localJurisdiction" : @"local_jurisdiction" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRCivicInfo_Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_AdministrativeBody
//

@implementation GTLRCivicInfo_AdministrativeBody
@dynamic absenteeVotingInfoUrl, ballotInfoUrl, correspondenceAddress,
         electionInfoUrl, electionNoticeText, electionNoticeUrl,
         electionOfficials, electionRegistrationConfirmationUrl,
         electionRegistrationUrl, electionRulesUrl, hoursOfOperation, name,
         physicalAddress, voterServices, votingLocationFinderUrl;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"voterServices" : @"voter_services" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"electionOfficials" : [GTLRCivicInfo_ElectionOfficial class],
    @"voter_services" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Candidate
//

@implementation GTLRCivicInfo_Candidate
@dynamic candidateUrl, channels, email, name, orderOnBallot, party, phone,
         photoUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channels" : [GTLRCivicInfo_Channel class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Channel
//

@implementation GTLRCivicInfo_Channel
@dynamic identifier, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Contest
//

@implementation GTLRCivicInfo_Contest
@dynamic ballotPlacement, ballotTitle, candidates, district,
         electorateSpecifications, level, numberElected, numberVotingFor,
         office, primaryParties, primaryParty, referendumBallotResponses,
         referendumBrief, referendumConStatement, referendumEffectOfAbstain,
         referendumPassageThreshold, referendumProStatement, referendumSubtitle,
         referendumText, referendumTitle, referendumUrl, roles, sources,
         special, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"candidates" : [GTLRCivicInfo_Candidate class],
    @"level" : [NSString class],
    @"primaryParties" : [NSString class],
    @"referendumBallotResponses" : [NSString class],
    @"roles" : [NSString class],
    @"sources" : [GTLRCivicInfo_Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_DivisionSearchResponse
//

@implementation GTLRCivicInfo_DivisionSearchResponse
@dynamic kind, results;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"results" : [GTLRCivicInfo_DivisionSearchResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_DivisionSearchResult
//

@implementation GTLRCivicInfo_DivisionSearchResult
@dynamic aliases, name, ocdId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Election
//

@implementation GTLRCivicInfo_Election
@dynamic electionDay, identifier, name, ocdDivisionId, shapeLookupBehavior;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ElectionOfficial
//

@implementation GTLRCivicInfo_ElectionOfficial
@dynamic emailAddress, faxNumber, name, officePhoneNumber, title;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ElectionsQueryResponse
//

@implementation GTLRCivicInfo_ElectionsQueryResponse
@dynamic elections, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elections" : [GTLRCivicInfo_Election class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ElectoralDistrict
//

@implementation GTLRCivicInfo_ElectoralDistrict
@dynamic identifier, name, scope;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_FeatureIdProto
//

@implementation GTLRCivicInfo_FeatureIdProto
@dynamic cellId, fprint, temporaryData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_GeocodingSummary
//

@implementation GTLRCivicInfo_GeocodingSummary
@dynamic addressUnderstood, featureId, featureType, positionPrecisionMeters,
         queryString;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_GeographicDivision
//

@implementation GTLRCivicInfo_GeographicDivision
@dynamic alsoKnownAs, name, officeIndices;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"alsoKnownAs" : [NSString class],
    @"officeIndices" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_MessageSet
//

@implementation GTLRCivicInfo_MessageSet
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Office
//

@implementation GTLRCivicInfo_Office
@dynamic divisionId, levels, name, officialIndices, roles, sources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"levels" : [NSString class],
    @"officialIndices" : [NSNumber class],
    @"roles" : [NSString class],
    @"sources" : [GTLRCivicInfo_Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Official
//

@implementation GTLRCivicInfo_Official
@dynamic address, channels, emails, geocodingSummaries, name, party, phones,
         photoUrl, urls;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"address" : [GTLRCivicInfo_SimpleAddressType class],
    @"channels" : [GTLRCivicInfo_Channel class],
    @"emails" : [NSString class],
    @"geocodingSummaries" : [GTLRCivicInfo_GeocodingSummary class],
    @"phones" : [NSString class],
    @"urls" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_PollingLocation
//

@implementation GTLRCivicInfo_PollingLocation
@dynamic address, endDate, latitude, longitude, name, notes, pollingHours,
         sources, startDate, voterServices;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRCivicInfo_Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Precinct
//

@implementation GTLRCivicInfo_Precinct
@dynamic administrationRegionId, contestId, datasetId, earlyVoteSiteId,
         electoralDistrictId, identifier, mailOnly, name, number, ocdId,
         pollingLocationId, spatialBoundaryId, splitName, ward;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contestId" : [NSString class],
    @"earlyVoteSiteId" : [NSString class],
    @"electoralDistrictId" : [NSString class],
    @"ocdId" : [NSString class],
    @"pollingLocationId" : [NSString class],
    @"spatialBoundaryId" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_RepresentativeInfoData
//

@implementation GTLRCivicInfo_RepresentativeInfoData
@dynamic divisions, offices, officials;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"offices" : [GTLRCivicInfo_Office class],
    @"officials" : [GTLRCivicInfo_Official class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_RepresentativeInfoData_Divisions
//

@implementation GTLRCivicInfo_RepresentativeInfoData_Divisions

+ (Class)classForAdditionalProperties {
  return [GTLRCivicInfo_GeographicDivision class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_RepresentativeInfoResponse
//

@implementation GTLRCivicInfo_RepresentativeInfoResponse
@dynamic divisions, kind, normalizedInput, offices, officials;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"offices" : [GTLRCivicInfo_Office class],
    @"officials" : [GTLRCivicInfo_Official class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_RepresentativeInfoResponse_Divisions
//

@implementation GTLRCivicInfo_RepresentativeInfoResponse_Divisions

+ (Class)classForAdditionalProperties {
  return [GTLRCivicInfo_GeographicDivision class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SimpleAddressType
//

@implementation GTLRCivicInfo_SimpleAddressType
@dynamic city, line1, line2, line3, locationName, state, zip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_Source
//

@implementation GTLRCivicInfo_Source
@dynamic name, official;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_VoterInfoResponse
//

@implementation GTLRCivicInfo_VoterInfoResponse
@dynamic contests, dropOffLocations, earlyVoteSites, election, kind, mailOnly,
         normalizedInput, otherElections, pollingLocations, precinctId,
         precincts, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contests" : [GTLRCivicInfo_Contest class],
    @"dropOffLocations" : [GTLRCivicInfo_PollingLocation class],
    @"earlyVoteSites" : [GTLRCivicInfo_PollingLocation class],
    @"otherElections" : [GTLRCivicInfo_Election class],
    @"pollingLocations" : [GTLRCivicInfo_PollingLocation class],
    @"precincts" : [GTLRCivicInfo_Precinct class],
    @"state" : [GTLRCivicInfo_AdministrationRegion class]
  };
  return map;
}

@end
