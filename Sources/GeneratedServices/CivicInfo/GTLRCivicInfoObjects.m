// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Civic Information API (civicinfo/v2)
// Description:
//   Provides polling places, early vote locations, contest data, election
//   officials, and government representatives for U.S. residential addresses.
// Documentation:
//   https://developers.google.com/civic-information/

#import <GoogleAPIClientForREST/GTLRCivicInfoObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRCivicInfo_SchemaV2Contest.level
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_AdministrativeArea1 = @"administrativeArea1";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_AdministrativeArea2 = @"administrativeArea2";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_Country  = @"country";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_International = @"international";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_Locality = @"locality";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_Regional = @"regional";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_Special  = @"special";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_SubLocality1 = @"subLocality1";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Level_SubLocality2 = @"subLocality2";

// GTLRCivicInfo_SchemaV2Contest.roles
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_DeputyHeadOfGovernment = @"deputyHeadOfGovernment";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_ExecutiveCouncil = @"executiveCouncil";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_GovernmentOfficer = @"governmentOfficer";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_HeadOfGovernment = @"headOfGovernment";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_HeadOfState = @"headOfState";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_HighestCourtJudge = @"highestCourtJudge";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_Judge    = @"judge";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_LegislatorLowerBody = @"legislatorLowerBody";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_LegislatorUpperBody = @"legislatorUpperBody";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_OtherRole = @"otherRole";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_SchoolBoard = @"schoolBoard";
NSString * const kGTLRCivicInfo_SchemaV2Contest_Roles_SpecialPurposeOfficer = @"specialPurposeOfficer";

// GTLRCivicInfo_SchemaV2Election.shapeLookupBehavior
NSString * const kGTLRCivicInfo_SchemaV2Election_ShapeLookupBehavior_ShapeLookupDefault = @"shapeLookupDefault";
NSString * const kGTLRCivicInfo_SchemaV2Election_ShapeLookupBehavior_ShapeLookupDisabled = @"shapeLookupDisabled";
NSString * const kGTLRCivicInfo_SchemaV2Election_ShapeLookupBehavior_ShapeLookupEnabled = @"shapeLookupEnabled";

// GTLRCivicInfo_SchemaV2ElectoralDistrict.scope
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_CityCouncil = @"cityCouncil";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Citywide = @"citywide";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Congressional = @"congressional";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_CountyCouncil = @"countyCouncil";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Countywide = @"countywide";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Judicial = @"judicial";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_National = @"national";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_SchoolBoard = @"schoolBoard";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Special = @"special";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_StateLower = @"stateLower";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_StateUpper = @"stateUpper";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Statewide = @"statewide";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Township = @"township";
NSString * const kGTLRCivicInfo_SchemaV2ElectoralDistrict_Scope_Ward = @"ward";

// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ApiprotosV2DivisionByAddressResponse
//

@implementation GTLRCivicInfo_ApiprotosV2DivisionByAddressResponse
@dynamic divisions, normalizedInput;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ApiprotosV2DivisionByAddressResponse_Divisions
//

@implementation GTLRCivicInfo_ApiprotosV2DivisionByAddressResponse_Divisions

+ (Class)classForAdditionalProperties {
  return [GTLRCivicInfo_SchemaV2GeographicDivision class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_ApiprotosV2DivisionSearchResult
//

@implementation GTLRCivicInfo_ApiprotosV2DivisionSearchResult
@dynamic aliases, name, ocdId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_CivicinfoApiprotosV2DivisionSearchResponse
//

@implementation GTLRCivicInfo_CivicinfoApiprotosV2DivisionSearchResponse
@dynamic kind, results;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"results" : [GTLRCivicInfo_ApiprotosV2DivisionSearchResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_CivicinfoApiprotosV2ElectionsQueryResponse
//

@implementation GTLRCivicInfo_CivicinfoApiprotosV2ElectionsQueryResponse
@dynamic elections, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elections" : [GTLRCivicInfo_SchemaV2Election class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_CivicinfoApiprotosV2VoterInfoResponse
//

@implementation GTLRCivicInfo_CivicinfoApiprotosV2VoterInfoResponse
@dynamic contests, dropOffLocations, earlyVoteSites, election, kind, mailOnly,
         normalizedInput, otherElections, pollingLocations, precinctId,
         precincts, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contests" : [GTLRCivicInfo_SchemaV2Contest class],
    @"dropOffLocations" : [GTLRCivicInfo_SchemaV2PollingLocation class],
    @"earlyVoteSites" : [GTLRCivicInfo_SchemaV2PollingLocation class],
    @"otherElections" : [GTLRCivicInfo_SchemaV2Election class],
    @"pollingLocations" : [GTLRCivicInfo_SchemaV2PollingLocation class],
    @"precincts" : [GTLRCivicInfo_SchemaV2Precinct class],
    @"state" : [GTLRCivicInfo_SchemaV2AdministrationRegion class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2AdministrationRegion
//

@implementation GTLRCivicInfo_SchemaV2AdministrationRegion
@dynamic electionAdministrationBody, localJurisdiction, name, sources;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"localJurisdiction" : @"local_jurisdiction" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRCivicInfo_SchemaV2Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2AdministrativeBody
//

@implementation GTLRCivicInfo_SchemaV2AdministrativeBody
@dynamic absenteeVotingInfoUrl, ballotInfoUrl, correspondenceAddress,
         electionInfoUrl, electionNoticeText, electionNoticeUrl,
         electionOfficials, electionRegistrationConfirmationUrl,
         electionRegistrationUrl, electionRulesUrl, hoursOfOperation, name,
         physicalAddress, voterServices, votingLocationFinderUrl;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"voterServices" : @"voter_services" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"electionOfficials" : [GTLRCivicInfo_SchemaV2ElectionOfficial class],
    @"voter_services" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Candidate
//

@implementation GTLRCivicInfo_SchemaV2Candidate
@dynamic candidateUrl, channels, email, name, orderOnBallot, party, phone,
         photoUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channels" : [GTLRCivicInfo_SchemaV2Channel class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Channel
//

@implementation GTLRCivicInfo_SchemaV2Channel
@dynamic identifier, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Contest
//

@implementation GTLRCivicInfo_SchemaV2Contest
@dynamic ballotPlacement, ballotTitle, candidates, district,
         electorateSpecifications, level, numberElected, numberVotingFor,
         office, primaryParties, referendumBallotResponses, referendumBrief,
         referendumConStatement, referendumEffectOfAbstain,
         referendumPassageThreshold, referendumProStatement, referendumSubtitle,
         referendumText, referendumTitle, referendumUrl, roles, sources,
         special, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"candidates" : [GTLRCivicInfo_SchemaV2Candidate class],
    @"level" : [NSString class],
    @"primaryParties" : [NSString class],
    @"referendumBallotResponses" : [NSString class],
    @"roles" : [NSString class],
    @"sources" : [GTLRCivicInfo_SchemaV2Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Election
//

@implementation GTLRCivicInfo_SchemaV2Election
@dynamic electionDay, identifier, name, ocdDivisionId, shapeLookupBehavior;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2ElectionOfficial
//

@implementation GTLRCivicInfo_SchemaV2ElectionOfficial
@dynamic emailAddress, faxNumber, name, officePhoneNumber, title;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2ElectoralDistrict
//

@implementation GTLRCivicInfo_SchemaV2ElectoralDistrict
@dynamic identifier, name, scope;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2GeographicDivision
//

@implementation GTLRCivicInfo_SchemaV2GeographicDivision
@dynamic alsoKnownAs, name, officeIndices;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"alsoKnownAs" : [NSString class],
    @"officeIndices" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2PollingLocation
//

@implementation GTLRCivicInfo_SchemaV2PollingLocation
@dynamic address, endDate, latitude, longitude, name, notes, pollingHours,
         sources, startDate, voterServices;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRCivicInfo_SchemaV2Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Precinct
//

@implementation GTLRCivicInfo_SchemaV2Precinct
@dynamic administrationRegionId, contestId, datasetId, earlyVoteSiteId,
         electoralDistrictId, identifier, mailOnly, name, number, ocdId,
         pollingLocationId, spatialBoundaryId, splitName, ward;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contestId" : [NSString class],
    @"earlyVoteSiteId" : [NSString class],
    @"electoralDistrictId" : [NSString class],
    @"ocdId" : [NSString class],
    @"pollingLocationId" : [NSString class],
    @"spatialBoundaryId" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2SimpleAddressType
//

@implementation GTLRCivicInfo_SchemaV2SimpleAddressType
@dynamic city, line1, line2, line3, locationName, state, zip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCivicInfo_SchemaV2Source
//

@implementation GTLRCivicInfo_SchemaV2Source
@dynamic name, official;
@end
