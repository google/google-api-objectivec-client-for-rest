// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Reservation API (bigqueryreservation/v1)
// Description:
//   A service to modify your BigQuery flat-rate reservations.
// Documentation:
//   https://cloud.google.com/bigquery/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigQueryReservation_Assignment;
@class GTLRBigQueryReservation_Autoscale;
@class GTLRBigQueryReservation_CapacityCommitment;
@class GTLRBigQueryReservation_ReplicationStatus;
@class GTLRBigQueryReservation_Reservation;
@class GTLRBigQueryReservation_Reservation_Labels;
@class GTLRBigQueryReservation_Status;
@class GTLRBigQueryReservation_Status_Details_Item;
@class GTLRBigQueryReservation_TableReference;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_Assignment.jobType

/**
 *  Background jobs that BigQuery runs for the customers in the background.
 *
 *  Value: "BACKGROUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_Background;
/**
 *  Continuous SQL jobs will use this reservation. Reservations with continuous
 *  assignments cannot be mixed with non-continuous assignments.
 *
 *  Value: "CONTINUOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_Continuous;
/**
 *  Invalid type. Requests with this value will be rejected with error code
 *  `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "JOB_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_JobTypeUnspecified;
/**
 *  BigQuery ML jobs that use services external to BigQuery for model training.
 *  These jobs will not utilize idle slots from other reservations.
 *
 *  Value: "ML_EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_MlExternal;
/**
 *  Pipeline (load/export) jobs from the project will use the reservation.
 *
 *  Value: "PIPELINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_Pipeline;
/**
 *  Query jobs from the project will use the reservation.
 *
 *  Value: "QUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_JobType_Query;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_Assignment.state

/**
 *  Assignment is ready.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_State_Active;
/**
 *  Queries from assignee will be executed as on-demand, if related assignment
 *  is pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_State_Pending;
/**
 *  Invalid state value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Assignment_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_CapacityCommitment.edition

/**
 *  Default value, which will be treated as ENTERPRISE.
 *
 *  Value: "EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Edition_EditionUnspecified;
/**
 *  Enterprise edition.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Edition_Enterprise;
/**
 *  Enterprise Plus edition.
 *
 *  Value: "ENTERPRISE_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Edition_EnterprisePlus;
/**
 *  Standard edition.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Edition_Standard;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_CapacityCommitment.plan

/**
 *  Annual commitments have a committed period of 365 days after becoming
 *  ACTIVE. After that they are converted to a new commitment based on the
 *  renewal_plan.
 *
 *  Value: "ANNUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_Annual;
/**
 *  Same as ANNUAL, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "ANNUAL_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_AnnualFlatRate GTLR_DEPRECATED;
/**
 *  Invalid plan value. Requests with this value will be rejected with error
 *  code `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "COMMITMENT_PLAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_CommitmentPlanUnspecified;
/**
 *  Flex commitments have committed period of 1 minute after becoming ACTIVE.
 *  After that, they are not in a committed period anymore and can be removed
 *  any time.
 *
 *  Value: "FLEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_Flex;
/**
 *  Same as FLEX, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "FLEX_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_FlexFlatRate GTLR_DEPRECATED;
/**
 *  Monthly commitments have a committed period of 30 days after becoming
 *  ACTIVE. After that, they are not in a committed period anymore and can be
 *  removed any time.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_Monthly;
/**
 *  Same as MONTHLY, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "MONTHLY_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_MonthlyFlatRate GTLR_DEPRECATED;
/**
 *  Should only be used for `renewal_plan` and is only meaningful if edition is
 *  specified to values other than EDITION_UNSPECIFIED. Otherwise
 *  CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest will be
 *  rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. If the
 *  renewal_plan is NONE, capacity commitment will be removed at the end of its
 *  commitment period.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_None;
/**
 *  3-year commitments have a committed period of 1095(3 * 365) days after
 *  becoming ACTIVE. After that they are converted to a new commitment based on
 *  the renewal_plan.
 *
 *  Value: "THREE_YEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_ThreeYear;
/**
 *  Trial commitments have a committed period of 182 days after becoming ACTIVE.
 *  After that, they are converted to a new commitment based on the
 *  `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so that
 *  it can be deleted right after committed period ends.
 *
 *  Value: "TRIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_Plan_Trial GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_CapacityCommitment.renewalPlan

/**
 *  Annual commitments have a committed period of 365 days after becoming
 *  ACTIVE. After that they are converted to a new commitment based on the
 *  renewal_plan.
 *
 *  Value: "ANNUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Annual;
/**
 *  Same as ANNUAL, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "ANNUAL_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_AnnualFlatRate GTLR_DEPRECATED;
/**
 *  Invalid plan value. Requests with this value will be rejected with error
 *  code `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "COMMITMENT_PLAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_CommitmentPlanUnspecified;
/**
 *  Flex commitments have committed period of 1 minute after becoming ACTIVE.
 *  After that, they are not in a committed period anymore and can be removed
 *  any time.
 *
 *  Value: "FLEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Flex;
/**
 *  Same as FLEX, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "FLEX_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_FlexFlatRate GTLR_DEPRECATED;
/**
 *  Monthly commitments have a committed period of 30 days after becoming
 *  ACTIVE. After that, they are not in a committed period anymore and can be
 *  removed any time.
 *
 *  Value: "MONTHLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Monthly;
/**
 *  Same as MONTHLY, should only be used if flat-rate commitments are still
 *  available.
 *
 *  Value: "MONTHLY_FLAT_RATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_MonthlyFlatRate GTLR_DEPRECATED;
/**
 *  Should only be used for `renewal_plan` and is only meaningful if edition is
 *  specified to values other than EDITION_UNSPECIFIED. Otherwise
 *  CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest will be
 *  rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. If the
 *  renewal_plan is NONE, capacity commitment will be removed at the end of its
 *  commitment period.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_None;
/**
 *  3-year commitments have a committed period of 1095(3 * 365) days after
 *  becoming ACTIVE. After that they are converted to a new commitment based on
 *  the renewal_plan.
 *
 *  Value: "THREE_YEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_ThreeYear;
/**
 *  Trial commitments have a committed period of 182 days after becoming ACTIVE.
 *  After that, they are converted to a new commitment based on the
 *  `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so that
 *  it can be deleted right after committed period ends.
 *
 *  Value: "TRIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Trial GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_CapacityCommitment.state

/**
 *  Once slots are provisioned, capacity commitment becomes active. slot_count
 *  is added to the project's slot_capacity.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_State_Active;
/**
 *  Capacity commitment is failed to be activated by the backend.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_State_Failed;
/**
 *  Capacity commitment is pending provisioning. Pending capacity commitment
 *  does not contribute to the project's slot_capacity.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_State_Pending;
/**
 *  Invalid state value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_CapacityCommitment_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_Reservation.edition

/**
 *  Default value, which will be treated as ENTERPRISE.
 *
 *  Value: "EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_Edition_EditionUnspecified;
/**
 *  Enterprise edition.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_Edition_Enterprise;
/**
 *  Enterprise Plus edition.
 *
 *  Value: "ENTERPRISE_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_Edition_EnterprisePlus;
/**
 *  Standard edition.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_Edition_Standard;

// ----------------------------------------------------------------------------
// GTLRBigQueryReservation_Reservation.scalingMode

/**
 *  The reservation will scale up using all slots available to it. It will use
 *  idle slots contributed by other reservations or from unassigned commitments
 *  first. If no idle slots are available it will scale up using autoscaling.
 *  For example, if max_slots is 1000, baseline is 200 and customer sets
 *  ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
 *  reservations, the reservation will scale up to 1000 slots with 200 baseline
 *  and 800 idle slots. 2. if there are 500 idle slots available in other
 *  reservations, the reservation will scale up to 1000 slots with 200 baseline,
 *  500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
 *  available in other reservations, it will scale up to 1000 slots with 200
 *  baseline and 800 autoscaling slots. Please note, in this mode, the
 *  ignore_idle_slots field must be set to false. Otherwise the request will be
 *  rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "ALL_SLOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_ScalingMode_AllSlots;
/**
 *  The reservation will scale up only using slots from autoscaling. It will not
 *  use any idle slots even if there may be some available. The upper limit that
 *  autoscaling can scale up to will be max_slots - baseline. For example, if
 *  max_slots is 1000, baseline is 200 and customer sets ScalingMode to
 *  AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots and no idle
 *  slots will be used. Please note, in this mode, the ignore_idle_slots field
 *  must be set to true. Otherwise the request will be rejected with error code
 *  `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "AUTOSCALE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_ScalingMode_AutoscaleOnly;
/**
 *  The reservation will scale up using only idle slots contributed by other
 *  reservations or from unassigned commitments. If no idle slots are available
 *  it will not scale up further. If the idle slots which it is using are
 *  reclaimed by the contributing reservation(s) it may be forced to scale down.
 *  The max idle slots the reservation can be max_slots - baseline capacity. For
 *  example, if max_slots is 1000, baseline is 200 and customer sets ScalingMode
 *  to IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other
 *  reservations, the reservation will scale up to 1000 slots with 200 baseline
 *  and 800 idle slots. 2. if there are 500 idle slots available in other
 *  reservations, the reservation will scale up to 700 slots with 200 baseline
 *  and 300 idle slots. Please note, in this mode, the reservation might not be
 *  able to scale up to max_slots. Please note, in this mode, the
 *  ignore_idle_slots field must be set to false. Otherwise the request will be
 *  rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Value: "IDLE_SLOTS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_ScalingMode_IdleSlotsOnly;
/**
 *  Default value of ScalingMode.
 *
 *  Value: "SCALING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryReservation_Reservation_ScalingMode_ScalingModeUnspecified;

/**
 *  An assignment allows a project to submit jobs of a certain type using slots
 *  from the specified reservation.
 */
@interface GTLRBigQueryReservation_Assignment : GTLRObject

/**
 *  The resource which will use the reservation. E.g. `projects/myproject`,
 *  `folders/123`, or `organizations/456`.
 */
@property(nonatomic, copy, nullable) NSString *assignee;

/**
 *  Optional. This field controls if "Gemini in BigQuery"
 *  (https://cloud.google.com/gemini/docs/bigquery/overview) features should be
 *  enabled for this reservation assignment, which is not on by default. "Gemini
 *  in BigQuery" has a distinct compliance posture from BigQuery. If this field
 *  is set to true, the assignment job type is QUERY, and the parent reservation
 *  edition is ENTERPRISE_PLUS, then the assignment will give the grantee
 *  project/organization access to "Gemini in BigQuery" features.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableGeminiInBigquery;

/**
 *  Which type of jobs will use the reservation.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_Background Background
 *        jobs that BigQuery runs for the customers in the background. (Value:
 *        "BACKGROUND")
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_Continuous Continuous
 *        SQL jobs will use this reservation. Reservations with continuous
 *        assignments cannot be mixed with non-continuous assignments. (Value:
 *        "CONTINUOUS")
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_JobTypeUnspecified
 *        Invalid type. Requests with this value will be rejected with error
 *        code `google.rpc.Code.INVALID_ARGUMENT`. (Value:
 *        "JOB_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_MlExternal BigQuery ML
 *        jobs that use services external to BigQuery for model training. These
 *        jobs will not utilize idle slots from other reservations. (Value:
 *        "ML_EXTERNAL")
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_Pipeline Pipeline
 *        (load/export) jobs from the project will use the reservation. (Value:
 *        "PIPELINE")
 *    @arg @c kGTLRBigQueryReservation_Assignment_JobType_Query Query jobs from
 *        the project will use the reservation. (Value: "QUERY")
 */
@property(nonatomic, copy, nullable) NSString *jobType;

/**
 *  Output only. Name of the resource. E.g.:
 *  `projects/myproject/locations/US/reservations/team1-prod/assignments/123`.
 *  The assignment_id must only contain lower case alphanumeric characters or
 *  dashes and the max length is 64 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of the assignment.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_Assignment_State_Active Assignment is
 *        ready. (Value: "ACTIVE")
 *    @arg @c kGTLRBigQueryReservation_Assignment_State_Pending Queries from
 *        assignee will be executed as on-demand, if related assignment is
 *        pending. (Value: "PENDING")
 *    @arg @c kGTLRBigQueryReservation_Assignment_State_StateUnspecified Invalid
 *        state value. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Auto scaling settings.
 */
@interface GTLRBigQueryReservation_Autoscale : GTLRObject

/**
 *  Output only. The slot capacity added to this reservation when autoscale
 *  happens. Will be between [0, max_slots]. Note: after users reduce max_slots,
 *  it may take a while before it can be propagated, so current_slots may stay
 *  in the original value and could be larger than max_slots for that brief
 *  period (less than one minute)
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSlots;

/**
 *  Number of slots to be scaled when needed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSlots;

@end


/**
 *  Represents a BI Reservation.
 */
@interface GTLRBigQueryReservation_BiReservation : GTLRObject

/**
 *  The resource name of the singleton BI reservation. Reservation names have
 *  the form `projects/{project_id}/locations/{location_id}/biReservation`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Preferred tables to use BI capacity for. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_TableReference *> *preferredTables;

/**
 *  Size of a reservation, in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

/** Output only. The last update timestamp of a reservation. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Capacity commitment is a way to purchase compute capacity for BigQuery jobs
 *  (in the form of slots) with some committed period of usage. Annual
 *  commitments renew by default. Commitments can be removed after their
 *  commitment end time passes. In order to remove annual commitment, its plan
 *  needs to be changed to monthly or flex first. A capacity commitment resource
 *  exists as a child resource of the admin project.
 */
@interface GTLRBigQueryReservation_CapacityCommitment : GTLRObject

/**
 *  Output only. The end of the current commitment period. It is applicable only
 *  for ACTIVE capacity commitments. Note after renewal, commitment_end_time is
 *  the time the renewed commitment expires. So itwould be at a time after
 *  commitment_start_time + committed period, because we don't change
 *  commitment_start_time ,
 */
@property(nonatomic, strong, nullable) GTLRDateTime *commitmentEndTime;

/**
 *  Output only. The start of the current commitment period. It is applicable
 *  only for ACTIVE capacity commitments. Note after the commitment is renewed,
 *  commitment_start_time won't be changed. It refers to the start time of the
 *  original commitment.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *commitmentStartTime;

/**
 *  Edition of the capacity commitment.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Edition_EditionUnspecified
 *        Default value, which will be treated as ENTERPRISE. (Value:
 *        "EDITION_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Edition_Enterprise
 *        Enterprise edition. (Value: "ENTERPRISE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Edition_EnterprisePlus
 *        Enterprise Plus edition. (Value: "ENTERPRISE_PLUS")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Edition_Standard
 *        Standard edition. (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *edition;

/**
 *  Output only. For FAILED commitment plan, provides the reason of failure.
 */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_Status *failureStatus;

/**
 *  Output only. If true, the commitment is a flat-rate commitment, otherwise,
 *  it's an edition commitment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFlatRate;

/**
 *  Applicable only for commitments located within one of the BigQuery
 *  multi-regions (US or EU). If set to true, this commitment is placed in the
 *  organization's secondary region which is designated for disaster recovery
 *  purposes. If false, this commitment is placed in the organization's default
 *  region. NOTE: this is a preview feature. Project must be allow-listed in
 *  order to set this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multiRegionAuxiliary;

/**
 *  Output only. The resource name of the capacity commitment, e.g.,
 *  `projects/myproject/locations/US/capacityCommitments/123` The commitment_id
 *  must only contain lower case alphanumeric characters or dashes. It must
 *  start with a letter and must not end with a dash. Its maximum length is 64
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Capacity commitment commitment plan.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_Annual Annual
 *        commitments have a committed period of 365 days after becoming ACTIVE.
 *        After that they are converted to a new commitment based on the
 *        renewal_plan. (Value: "ANNUAL")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_AnnualFlatRate
 *        Same as ANNUAL, should only be used if flat-rate commitments are still
 *        available. (Value: "ANNUAL_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_CommitmentPlanUnspecified
 *        Invalid plan value. Requests with this value will be rejected with
 *        error code `google.rpc.Code.INVALID_ARGUMENT`. (Value:
 *        "COMMITMENT_PLAN_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_Flex Flex
 *        commitments have committed period of 1 minute after becoming ACTIVE.
 *        After that, they are not in a committed period anymore and can be
 *        removed any time. (Value: "FLEX")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_FlexFlatRate Same
 *        as FLEX, should only be used if flat-rate commitments are still
 *        available. (Value: "FLEX_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_Monthly Monthly
 *        commitments have a committed period of 30 days after becoming ACTIVE.
 *        After that, they are not in a committed period anymore and can be
 *        removed any time. (Value: "MONTHLY")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_MonthlyFlatRate
 *        Same as MONTHLY, should only be used if flat-rate commitments are
 *        still available. (Value: "MONTHLY_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_None Should only
 *        be used for `renewal_plan` and is only meaningful if edition is
 *        specified to values other than EDITION_UNSPECIFIED. Otherwise
 *        CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest
 *        will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *        If the renewal_plan is NONE, capacity commitment will be removed at
 *        the end of its commitment period. (Value: "NONE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_ThreeYear 3-year
 *        commitments have a committed period of 1095(3 * 365) days after
 *        becoming ACTIVE. After that they are converted to a new commitment
 *        based on the renewal_plan. (Value: "THREE_YEAR")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_Plan_Trial Trial
 *        commitments have a committed period of 182 days after becoming ACTIVE.
 *        After that, they are converted to a new commitment based on the
 *        `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so
 *        that it can be deleted right after committed period ends. (Value:
 *        "TRIAL")
 */
@property(nonatomic, copy, nullable) NSString *plan;

/**
 *  The plan this capacity commitment is converted to after commitment_end_time
 *  passes. Once the plan is changed, committed period is extended according to
 *  commitment plan. Only applicable for ANNUAL and TRIAL commitments.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Annual
 *        Annual commitments have a committed period of 365 days after becoming
 *        ACTIVE. After that they are converted to a new commitment based on the
 *        renewal_plan. (Value: "ANNUAL")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_AnnualFlatRate
 *        Same as ANNUAL, should only be used if flat-rate commitments are still
 *        available. (Value: "ANNUAL_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_CommitmentPlanUnspecified
 *        Invalid plan value. Requests with this value will be rejected with
 *        error code `google.rpc.Code.INVALID_ARGUMENT`. (Value:
 *        "COMMITMENT_PLAN_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Flex Flex
 *        commitments have committed period of 1 minute after becoming ACTIVE.
 *        After that, they are not in a committed period anymore and can be
 *        removed any time. (Value: "FLEX")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_FlexFlatRate
 *        Same as FLEX, should only be used if flat-rate commitments are still
 *        available. (Value: "FLEX_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Monthly
 *        Monthly commitments have a committed period of 30 days after becoming
 *        ACTIVE. After that, they are not in a committed period anymore and can
 *        be removed any time. (Value: "MONTHLY")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_MonthlyFlatRate
 *        Same as MONTHLY, should only be used if flat-rate commitments are
 *        still available. (Value: "MONTHLY_FLAT_RATE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_None
 *        Should only be used for `renewal_plan` and is only meaningful if
 *        edition is specified to values other than EDITION_UNSPECIFIED.
 *        Otherwise CreateCapacityCommitmentRequest or
 *        UpdateCapacityCommitmentRequest will be rejected with error code
 *        `google.rpc.Code.INVALID_ARGUMENT`. If the renewal_plan is NONE,
 *        capacity commitment will be removed at the end of its commitment
 *        period. (Value: "NONE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_ThreeYear
 *        3-year commitments have a committed period of 1095(3 * 365) days after
 *        becoming ACTIVE. After that they are converted to a new commitment
 *        based on the renewal_plan. (Value: "THREE_YEAR")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_RenewalPlan_Trial
 *        Trial commitments have a committed period of 182 days after becoming
 *        ACTIVE. After that, they are converted to a new commitment based on
 *        the `renewal_plan`. Default `renewal_plan` for Trial commitment is
 *        Flex so that it can be deleted right after committed period ends.
 *        (Value: "TRIAL")
 */
@property(nonatomic, copy, nullable) NSString *renewalPlan;

/**
 *  Number of slots in this commitment.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotCount;

/**
 *  Output only. State of the commitment.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_State_Active Once
 *        slots are provisioned, capacity commitment becomes active. slot_count
 *        is added to the project's slot_capacity. (Value: "ACTIVE")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_State_Failed Capacity
 *        commitment is failed to be activated by the backend. (Value: "FAILED")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_State_Pending Capacity
 *        commitment is pending provisioning. Pending capacity commitment does
 *        not contribute to the project's slot_capacity. (Value: "PENDING")
 *    @arg @c kGTLRBigQueryReservation_CapacityCommitment_State_StateUnspecified
 *        Invalid state value. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRBigQueryReservation_Empty : GTLRObject
@end


/**
 *  The request for ReservationService.FailoverReservation.
 */
@interface GTLRBigQueryReservation_FailoverReservationRequest : GTLRObject
@end


/**
 *  The response for ReservationService.ListAssignments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "assignments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryReservation_ListAssignmentsResponse : GTLRCollectionObject

/**
 *  List of assignments visible to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_Assignment *> *assignments;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response for ReservationService.ListCapacityCommitments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "capacityCommitments" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRBigQueryReservation_ListCapacityCommitmentsResponse : GTLRCollectionObject

/**
 *  List of capacity commitments visible to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_CapacityCommitment *> *capacityCommitments;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response for ReservationService.ListReservations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "reservations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryReservation_ListReservationsResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of reservations visible to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_Reservation *> *reservations;

@end


/**
 *  The request for ReservationService.MergeCapacityCommitments.
 */
@interface GTLRBigQueryReservation_MergeCapacityCommitmentsRequest : GTLRObject

/**
 *  Ids of capacity commitments to merge. These capacity commitments must exist
 *  under admin project and location specified in the parent. ID is the last
 *  portion of capacity commitment name e.g., 'abc' for
 *  projects/myproject/locations/US/capacityCommitments/abc
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *capacityCommitmentIds;

@end


/**
 *  The request for ReservationService.MoveAssignment. **Note**:
 *  "bigquery.reservationAssignments.create" permission is required on the
 *  destination_id. **Note**: "bigquery.reservationAssignments.create" and
 *  "bigquery.reservationAssignments.delete" permission are required on the
 *  related assignee.
 */
@interface GTLRBigQueryReservation_MoveAssignmentRequest : GTLRObject

/**
 *  The optional assignment ID. A new assignment name is generated if this field
 *  is empty. This field can contain only lowercase alphanumeric characters or
 *  dashes. Max length is 64 characters.
 */
@property(nonatomic, copy, nullable) NSString *assignmentId;

/**
 *  The new reservation ID, e.g.:
 *  `projects/myotherproject/locations/US/reservations/team2-prod`
 */
@property(nonatomic, copy, nullable) NSString *destinationId;

@end


/**
 *  Disaster Recovery(DR) replication status of the reservation.
 */
@interface GTLRBigQueryReservation_ReplicationStatus : GTLRObject

/**
 *  Output only. The last error encountered while trying to replicate changes
 *  from the primary to the secondary. This field is only available if the
 *  replication has not succeeded since.
 */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_Status *error;

/**
 *  Output only. The time at which the last error was encountered while trying
 *  to replicate changes from the primary to the secondary. This field is only
 *  available if the replication has not succeeded since.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastErrorTime;

/**
 *  Output only. A timestamp corresponding to the last change on the primary
 *  that was successfully replicated to the secondary.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastReplicationTime;

@end


/**
 *  A reservation is a mechanism used to guarantee slots to users.
 */
@interface GTLRBigQueryReservation_Reservation : GTLRObject

/** The configuration parameters for the auto scaling feature. */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_Autoscale *autoscale;

/**
 *  Job concurrency target which sets a soft upper bound on the number of jobs
 *  that can run concurrently in this reservation. This is a soft target due to
 *  asynchronous nature of the system and various optimizations for small
 *  queries. Default value is 0 which means that concurrency target will be
 *  automatically computed by the system. NOTE: this field is exposed as target
 *  job concurrency in the Information Schema, DDL and BigQuery CLI.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *concurrency;

/** Output only. Creation time of the reservation. */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/**
 *  Edition of the reservation.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_Reservation_Edition_EditionUnspecified
 *        Default value, which will be treated as ENTERPRISE. (Value:
 *        "EDITION_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryReservation_Reservation_Edition_Enterprise Enterprise
 *        edition. (Value: "ENTERPRISE")
 *    @arg @c kGTLRBigQueryReservation_Reservation_Edition_EnterprisePlus
 *        Enterprise Plus edition. (Value: "ENTERPRISE_PLUS")
 *    @arg @c kGTLRBigQueryReservation_Reservation_Edition_Standard Standard
 *        edition. (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *edition;

/**
 *  If false, any query or pipeline job using this reservation will use idle
 *  slots from other reservations within the same admin project. If true, a
 *  query or pipeline job using this reservation will execute with the slot
 *  capacity specified in the slot_capacity field at most.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreIdleSlots;

/**
 *  Optional. The labels associated with this reservation. You can use these to
 *  organize and group your reservations. You can set this property when
 *  inserting or updating a reservation.
 */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_Reservation_Labels *labels;

/**
 *  Optional. The overall max slots for the reservation, covering slot_capacity
 *  (baseline), idle slots (if ignore_idle_slots is false) and scaled slots. If
 *  present, the reservation won't use more than the specified number of slots,
 *  even if there is demand and supply (from idle slots). NOTE: capping a
 *  reservation's idle slot usage is best effort and its usage may exceed the
 *  max_slots value. However, in terms of autoscale.current_slots (which
 *  accounts for the additional added slots), it will never exceed the max_slots
 *  - baseline. This field must be set together with the scaling_mode enum
 *  value, otherwise the request will be rejected with error code
 *  `google.rpc.Code.INVALID_ARGUMENT`. If the max_slots and scaling_mode are
 *  set, the autoscale or autoscale.max_slots field must be unset. Otherwise the
 *  request will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *  However, the autoscale field may still be in the output. The
 *  autopscale.max_slots will always show as 0 and the autoscaler.current_slots
 *  will represent the current slots from autoscaler excluding idle slots. For
 *  example, if the max_slots is 1000 and scaling_mode is AUTOSCALE_ONLY, then
 *  in the output, the autoscaler.max_slots will be 0 and the
 *  autoscaler.current_slots may be any value between 0 and 1000. If the
 *  max_slots is 1000, scaling_mode is ALL_SLOTS, the baseline is 100 and idle
 *  slots usage is 200, then in the output, the autoscaler.max_slots will be 0
 *  and the autoscaler.current_slots will not be higher than 700. If the
 *  max_slots is 1000, scaling_mode is IDLE_SLOTS_ONLY, then in the output, the
 *  autoscaler field will be null. If the max_slots and scaling_mode are set,
 *  then the ignore_idle_slots field must be aligned with the scaling_mode enum
 *  value.(See details in ScalingMode comments). Otherwise the request will be
 *  rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. Please note,
 *  the max_slots is for user to manage the part of slots greater than the
 *  baseline. Therefore, we don't allow users to set max_slots smaller or equal
 *  to the baseline as it will not be meaningful. If the field is present and
 *  slot_capacity>=max_slots, requests will be rejected with error code
 *  `google.rpc.Code.INVALID_ARGUMENT`. Please note that if max_slots is set to
 *  0, we will treat it as unset. Customers can set max_slots to 0 and set
 *  scaling_mode to SCALING_MODE_UNSPECIFIED to disable the max_slots feature.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSlots;

/**
 *  Applicable only for reservations located within one of the BigQuery
 *  multi-regions (US or EU). If set to true, this reservation is placed in the
 *  organization's secondary region which is designated for disaster recovery
 *  purposes. If false, this reservation is placed in the organization's default
 *  region. NOTE: this is a preview feature. Project must be allow-listed in
 *  order to set this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multiRegionAuxiliary;

/**
 *  The resource name of the reservation, e.g., `projects/ * /locations/ *
 *  /reservations/team1-prod`. The reservation_id must only contain lower case
 *  alphanumeric characters or dashes. It must start with a letter and must not
 *  end with a dash. Its maximum length is 64 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The location where the reservation was originally created. This
 *  is set only during the failover reservation's creation. All billing charges
 *  for the failover reservation will be applied to this location.
 */
@property(nonatomic, copy, nullable) NSString *originalPrimaryLocation;

/**
 *  Output only. The current location of the reservation's primary replica. This
 *  field is only set for reservations using the managed disaster recovery
 *  feature.
 */
@property(nonatomic, copy, nullable) NSString *primaryLocation;

/**
 *  Output only. The Disaster Recovery(DR) replication status of the
 *  reservation. This is only available for the primary replicas of DR/failover
 *  reservations and provides information about the both the staleness of the
 *  secondary and the last error encountered while trying to replicate changes
 *  from the primary to the secondary. If this field is blank, it means that the
 *  reservation is either not a DR reservation or the reservation is a DR
 *  secondary or that any replication operations on the reservation have
 *  succeeded.
 */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_ReplicationStatus *replicationStatus;

/**
 *  The scaling mode for the reservation. If the field is present but max_slots
 *  is not present, requests will be rejected with error code
 *  `google.rpc.Code.INVALID_ARGUMENT`.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryReservation_Reservation_ScalingMode_AllSlots The
 *        reservation will scale up using all slots available to it. It will use
 *        idle slots contributed by other reservations or from unassigned
 *        commitments first. If no idle slots are available it will scale up
 *        using autoscaling. For example, if max_slots is 1000, baseline is 200
 *        and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle
 *        slots available in other reservations, the reservation will scale up
 *        to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
 *        500 idle slots available in other reservations, the reservation will
 *        scale up to 1000 slots with 200 baseline, 500 idle slots and 300
 *        autoscaling slots. 3. if there are no idle slots available in other
 *        reservations, it will scale up to 1000 slots with 200 baseline and 800
 *        autoscaling slots. Please note, in this mode, the ignore_idle_slots
 *        field must be set to false. Otherwise the request will be rejected
 *        with error code `google.rpc.Code.INVALID_ARGUMENT`. (Value:
 *        "ALL_SLOTS")
 *    @arg @c kGTLRBigQueryReservation_Reservation_ScalingMode_AutoscaleOnly The
 *        reservation will scale up only using slots from autoscaling. It will
 *        not use any idle slots even if there may be some available. The upper
 *        limit that autoscaling can scale up to will be max_slots - baseline.
 *        For example, if max_slots is 1000, baseline is 200 and customer sets
 *        ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800
 *        slots and no idle slots will be used. Please note, in this mode, the
 *        ignore_idle_slots field must be set to true. Otherwise the request
 *        will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *        (Value: "AUTOSCALE_ONLY")
 *    @arg @c kGTLRBigQueryReservation_Reservation_ScalingMode_IdleSlotsOnly The
 *        reservation will scale up using only idle slots contributed by other
 *        reservations or from unassigned commitments. If no idle slots are
 *        available it will not scale up further. If the idle slots which it is
 *        using are reclaimed by the contributing reservation(s) it may be
 *        forced to scale down. The max idle slots the reservation can be
 *        max_slots - baseline capacity. For example, if max_slots is 1000,
 *        baseline is 200 and customer sets ScalingMode to IDLE_SLOTS_ONLY, 1.
 *        if there are 1000 idle slots available in other reservations, the
 *        reservation will scale up to 1000 slots with 200 baseline and 800 idle
 *        slots. 2. if there are 500 idle slots available in other reservations,
 *        the reservation will scale up to 700 slots with 200 baseline and 300
 *        idle slots. Please note, in this mode, the reservation might not be
 *        able to scale up to max_slots. Please note, in this mode, the
 *        ignore_idle_slots field must be set to false. Otherwise the request
 *        will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
 *        (Value: "IDLE_SLOTS_ONLY")
 *    @arg @c kGTLRBigQueryReservation_Reservation_ScalingMode_ScalingModeUnspecified
 *        Default value of ScalingMode. (Value: "SCALING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *scalingMode;

/**
 *  Optional. The current location of the reservation's secondary replica. This
 *  field is only set for reservations using the managed disaster recovery
 *  feature. Users can set this in create reservation calls to create a failover
 *  reservation or in update reservation calls to convert a non-failover
 *  reservation to a failover reservation(or vice versa).
 */
@property(nonatomic, copy, nullable) NSString *secondaryLocation;

/**
 *  Baseline slots available to this reservation. A slot is a unit of
 *  computational power in BigQuery, and serves as the unit of parallelism.
 *  Queries using this reservation might use more slots during runtime if
 *  ignore_idle_slots is set to false, or autoscaling is enabled. The total
 *  slot_capacity of the reservation and its siblings may exceed the total
 *  slot_count of capacity commitments. In that case, the exceeding slots will
 *  be charged with the autoscale SKU. You can increase the number of baseline
 *  slots in a reservation every few minutes. If you want to decrease your
 *  baseline slots, you are limited to once an hour if you have recently changed
 *  your baseline slot capacity and your baseline slots exceed your committed
 *  slots. Otherwise, you can decrease your baseline slots every few minutes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotCapacity;

/** Output only. Last update time of the reservation. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. The labels associated with this reservation. You can use these to
 *  organize and group your reservations. You can set this property when
 *  inserting or updating a reservation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigQueryReservation_Reservation_Labels : GTLRObject
@end


/**
 *  The response for ReservationService.SearchAllAssignments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "assignments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryReservation_SearchAllAssignmentsResponse : GTLRCollectionObject

/**
 *  List of assignments visible to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_Assignment *> *assignments;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response for ReservationService.SearchAssignments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "assignments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryReservation_SearchAssignmentsResponse : GTLRCollectionObject

/**
 *  List of assignments visible to the user.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_Assignment *> *assignments;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The request for ReservationService.SplitCapacityCommitment.
 */
@interface GTLRBigQueryReservation_SplitCapacityCommitmentRequest : GTLRObject

/**
 *  Number of slots in the capacity commitment after the split.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotCount;

@end


/**
 *  The response for ReservationService.SplitCapacityCommitment.
 */
@interface GTLRBigQueryReservation_SplitCapacityCommitmentResponse : GTLRObject

/** First capacity commitment, result of a split. */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_CapacityCommitment *first;

/** Second capacity commitment, result of a split. */
@property(nonatomic, strong, nullable) GTLRBigQueryReservation_CapacityCommitment *second;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRBigQueryReservation_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryReservation_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRBigQueryReservation_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigQueryReservation_Status_Details_Item : GTLRObject
@end


/**
 *  Fully qualified reference to BigQuery table. Internally stored as
 *  google.cloud.bi.v1.BqTableReference.
 */
@interface GTLRBigQueryReservation_TableReference : GTLRObject

/** The ID of the dataset in the above project. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** The assigned project ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** The ID of the table in the above dataset. */
@property(nonatomic, copy, nullable) NSString *tableId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
