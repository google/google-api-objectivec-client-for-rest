// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Anthos On-Prem API (gkeonprem/v1)
// Documentation:
//   https://cloud.google.com/anthos/clusters/docs/on-prem/

#import <GoogleAPIClientForREST/GTLRGKEOnPremObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRGKEOnPrem_BareMetalAdminCluster.state
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Error = @"ERROR";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Running = @"RUNNING";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_BareMetalAdminCluster_State_Stopping = @"STOPPING";

// GTLRGKEOnPrem_BareMetalCluster.state
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Error   = @"ERROR";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Running = @"RUNNING";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_BareMetalCluster_State_Stopping = @"STOPPING";

// GTLRGKEOnPrem_BareMetalNodePool.state
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Error  = @"ERROR";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Running = @"RUNNING";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_BareMetalNodePool_State_Stopping = @"STOPPING";

// GTLRGKEOnPrem_BareMetalNodePoolConfig.operatingSystem
NSString * const kGTLRGKEOnPrem_BareMetalNodePoolConfig_OperatingSystem_Linux = @"LINUX";
NSString * const kGTLRGKEOnPrem_BareMetalNodePoolConfig_OperatingSystem_OperatingSystemUnspecified = @"OPERATING_SYSTEM_UNSPECIFIED";

// GTLRGKEOnPrem_BareMetalWorkloadNodeConfig.containerRuntime
NSString * const kGTLRGKEOnPrem_BareMetalWorkloadNodeConfig_ContainerRuntime_Containerd = @"CONTAINERD";
NSString * const kGTLRGKEOnPrem_BareMetalWorkloadNodeConfig_ContainerRuntime_ContainerRuntimeUnspecified = @"CONTAINER_RUNTIME_UNSPECIFIED";

// GTLRGKEOnPrem_NodeTaint.effect
NSString * const kGTLRGKEOnPrem_NodeTaint_Effect_EffectUnspecified = @"EFFECT_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_NodeTaint_Effect_NoExecute     = @"NO_EXECUTE";
NSString * const kGTLRGKEOnPrem_NodeTaint_Effect_NoSchedule    = @"NO_SCHEDULE";
NSString * const kGTLRGKEOnPrem_NodeTaint_Effect_PreferNoSchedule = @"PREFER_NO_SCHEDULE";

// GTLRGKEOnPrem_OperationMetadata.type
NSString * const kGTLRGKEOnPrem_OperationMetadata_Type_Create  = @"CREATE";
NSString * const kGTLRGKEOnPrem_OperationMetadata_Type_Delete  = @"DELETE";
NSString * const kGTLRGKEOnPrem_OperationMetadata_Type_OperationTypeUnspecified = @"OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_OperationMetadata_Type_Update  = @"UPDATE";
NSString * const kGTLRGKEOnPrem_OperationMetadata_Type_Upgrade = @"UPGRADE";

// GTLRGKEOnPrem_ResourceCondition.state
NSString * const kGTLRGKEOnPrem_ResourceCondition_State_StateFalse = @"STATE_FALSE";
NSString * const kGTLRGKEOnPrem_ResourceCondition_State_StateTrue = @"STATE_TRUE";
NSString * const kGTLRGKEOnPrem_ResourceCondition_State_StateUnknown = @"STATE_UNKNOWN";
NSString * const kGTLRGKEOnPrem_ResourceCondition_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRGKEOnPrem_ValidationCheck.option
NSString * const kGTLRGKEOnPrem_ValidationCheck_Option_OptionsUnspecified = @"OPTIONS_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_ValidationCheck_Option_SkipValidationAll = @"SKIP_VALIDATION_ALL";
NSString * const kGTLRGKEOnPrem_ValidationCheck_Option_SkipValidationCheckBlocking = @"SKIP_VALIDATION_CHECK_BLOCKING";

// GTLRGKEOnPrem_ValidationCheck.scenario
NSString * const kGTLRGKEOnPrem_ValidationCheck_Scenario_Create = @"CREATE";
NSString * const kGTLRGKEOnPrem_ValidationCheck_Scenario_ScenarioUnspecified = @"SCENARIO_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_ValidationCheck_Scenario_Update = @"UPDATE";

// GTLRGKEOnPrem_ValidationCheckResult.state
NSString * const kGTLRGKEOnPrem_ValidationCheckResult_State_StateFailure = @"STATE_FAILURE";
NSString * const kGTLRGKEOnPrem_ValidationCheckResult_State_StateFatal = @"STATE_FATAL";
NSString * const kGTLRGKEOnPrem_ValidationCheckResult_State_StateSkipped = @"STATE_SKIPPED";
NSString * const kGTLRGKEOnPrem_ValidationCheckResult_State_StateUnknown = @"STATE_UNKNOWN";
NSString * const kGTLRGKEOnPrem_ValidationCheckResult_State_StateWarning = @"STATE_WARNING";

// GTLRGKEOnPrem_VmwareAdminCluster.state
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Degraded = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Error = @"ERROR";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Running = @"RUNNING";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_VmwareAdminCluster_State_Stopping = @"STOPPING";

// GTLRGKEOnPrem_VmwareCluster.state
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Degraded   = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Error      = @"ERROR";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Running    = @"RUNNING";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_VmwareCluster_State_Stopping   = @"STOPPING";

// GTLRGKEOnPrem_VmwareNodePool.state
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Degraded  = @"DEGRADED";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Error     = @"ERROR";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Provisioning = @"PROVISIONING";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Reconciling = @"RECONCILING";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Running   = @"RUNNING";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRGKEOnPrem_VmwareNodePool_State_Stopping  = @"STOPPING";

// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Authorization
//

@implementation GTLRGKEOnPrem_Authorization
@dynamic adminUsers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"adminUsers" : [GTLRGKEOnPrem_ClusterUser class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminApiServerArgument
//

@implementation GTLRGKEOnPrem_BareMetalAdminApiServerArgument
@dynamic argument, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminCluster
//

@implementation GTLRGKEOnPrem_BareMetalAdminCluster
@dynamic annotations, bareMetalVersion, clusterOperations, controlPlane,
         createTime, deleteTime, descriptionProperty, endpoint, ETag, fleet,
         loadBalancer, localName, maintenanceConfig, maintenanceStatus, name,
         networkConfig, nodeAccessConfig, nodeConfig, osEnvironmentConfig,
         proxy, reconciling, securityConfig, state, status, storage, uid,
         updateTime, validationCheck;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminCluster_Annotations
//

@implementation GTLRGKEOnPrem_BareMetalAdminCluster_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminClusterOperationsConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminClusterOperationsConfig
@dynamic enableApplicationLogs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminControlPlaneConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminControlPlaneConfig
@dynamic apiServerArgs, controlPlaneNodePoolConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apiServerArgs" : [GTLRGKEOnPrem_BareMetalAdminApiServerArgument class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminControlPlaneNodePoolConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminControlPlaneNodePoolConfig
@dynamic nodePoolConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminDrainedMachine
//

@implementation GTLRGKEOnPrem_BareMetalAdminDrainedMachine
@dynamic nodeIp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminDrainingMachine
//

@implementation GTLRGKEOnPrem_BareMetalAdminDrainingMachine
@dynamic nodeIp, podCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminIslandModeCidrConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminIslandModeCidrConfig
@dynamic podAddressCidrBlocks, serviceAddressCidrBlocks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"podAddressCidrBlocks" : [NSString class],
    @"serviceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminLoadBalancerConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminLoadBalancerConfig
@dynamic manualLbConfig, portConfig, vipConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminMachineDrainStatus
//

@implementation GTLRGKEOnPrem_BareMetalAdminMachineDrainStatus
@dynamic drainedMachines, drainingMachines;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"drainedMachines" : [GTLRGKEOnPrem_BareMetalAdminDrainedMachine class],
    @"drainingMachines" : [GTLRGKEOnPrem_BareMetalAdminDrainingMachine class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminMaintenanceConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminMaintenanceConfig
@dynamic maintenanceAddressCidrBlocks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"maintenanceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminMaintenanceStatus
//

@implementation GTLRGKEOnPrem_BareMetalAdminMaintenanceStatus
@dynamic machineDrainStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminManualLbConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminManualLbConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminNetworkConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminNetworkConfig
@dynamic islandModeCidr;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminNodeAccessConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminNodeAccessConfig
@dynamic loginUser;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminOsEnvironmentConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminOsEnvironmentConfig
@dynamic packageRepoExcluded;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminPortConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminPortConfig
@dynamic controlPlaneLoadBalancerPort;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminProxyConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminProxyConfig
@dynamic noProxy, uri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"noProxy" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminSecurityConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminSecurityConfig
@dynamic authorization;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminStorageConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminStorageConfig
@dynamic lvpNodeMountsConfig, lvpShareConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminVipConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminVipConfig
@dynamic controlPlaneVip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalAdminWorkloadNodeConfig
//

@implementation GTLRGKEOnPrem_BareMetalAdminWorkloadNodeConfig
@dynamic maxPodsPerNode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalApiServerArgument
//

@implementation GTLRGKEOnPrem_BareMetalApiServerArgument
@dynamic argument, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalBgpLbConfig
//

@implementation GTLRGKEOnPrem_BareMetalBgpLbConfig
@dynamic addressPools, asn, bgpPeerConfigs, loadBalancerNodePoolConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addressPools" : [GTLRGKEOnPrem_BareMetalLoadBalancerAddressPool class],
    @"bgpPeerConfigs" : [GTLRGKEOnPrem_BareMetalBgpPeerConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalBgpPeerConfig
//

@implementation GTLRGKEOnPrem_BareMetalBgpPeerConfig
@dynamic asn, controlPlaneNodes, ipAddress;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"controlPlaneNodes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalCluster
//

@implementation GTLRGKEOnPrem_BareMetalCluster
@dynamic adminClusterMembership, adminClusterName, annotations,
         bareMetalVersion, clusterOperations, controlPlane, createTime,
         deleteTime, descriptionProperty, endpoint, ETag, fleet, loadBalancer,
         localName, maintenanceConfig, maintenanceStatus, name, networkConfig,
         nodeAccessConfig, nodeConfig, osEnvironmentConfig, proxy, reconciling,
         securityConfig, state, status, storage, uid, updateTime,
         validationCheck;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalCluster_Annotations
//

@implementation GTLRGKEOnPrem_BareMetalCluster_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalClusterOperationsConfig
//

@implementation GTLRGKEOnPrem_BareMetalClusterOperationsConfig
@dynamic enableApplicationLogs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalControlPlaneConfig
//

@implementation GTLRGKEOnPrem_BareMetalControlPlaneConfig
@dynamic apiServerArgs, controlPlaneNodePoolConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apiServerArgs" : [GTLRGKEOnPrem_BareMetalApiServerArgument class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalControlPlaneNodePoolConfig
//

@implementation GTLRGKEOnPrem_BareMetalControlPlaneNodePoolConfig
@dynamic nodePoolConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalDrainedMachine
//

@implementation GTLRGKEOnPrem_BareMetalDrainedMachine
@dynamic nodeIp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalDrainingMachine
//

@implementation GTLRGKEOnPrem_BareMetalDrainingMachine
@dynamic nodeIp, podCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalIslandModeCidrConfig
//

@implementation GTLRGKEOnPrem_BareMetalIslandModeCidrConfig
@dynamic podAddressCidrBlocks, serviceAddressCidrBlocks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"podAddressCidrBlocks" : [NSString class],
    @"serviceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalKubeletConfig
//

@implementation GTLRGKEOnPrem_BareMetalKubeletConfig
@dynamic registryBurst, registryPullQps, serializeImagePullsDisabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalLoadBalancerAddressPool
//

@implementation GTLRGKEOnPrem_BareMetalLoadBalancerAddressPool
@dynamic addresses, avoidBuggyIps, manualAssign, pool;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addresses" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalLoadBalancerConfig
//

@implementation GTLRGKEOnPrem_BareMetalLoadBalancerConfig
@dynamic bgpLbConfig, manualLbConfig, metalLbConfig, portConfig, vipConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalLoadBalancerNodePoolConfig
//

@implementation GTLRGKEOnPrem_BareMetalLoadBalancerNodePoolConfig
@dynamic nodePoolConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalLvpConfig
//

@implementation GTLRGKEOnPrem_BareMetalLvpConfig
@dynamic path, storageClass;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalLvpShareConfig
//

@implementation GTLRGKEOnPrem_BareMetalLvpShareConfig
@dynamic lvpConfig, sharedPathPvCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalMachineDrainStatus
//

@implementation GTLRGKEOnPrem_BareMetalMachineDrainStatus
@dynamic drainedMachines, drainingMachines;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"drainedMachines" : [GTLRGKEOnPrem_BareMetalDrainedMachine class],
    @"drainingMachines" : [GTLRGKEOnPrem_BareMetalDrainingMachine class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalMaintenanceConfig
//

@implementation GTLRGKEOnPrem_BareMetalMaintenanceConfig
@dynamic maintenanceAddressCidrBlocks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"maintenanceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalMaintenanceStatus
//

@implementation GTLRGKEOnPrem_BareMetalMaintenanceStatus
@dynamic machineDrainStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalManualLbConfig
//

@implementation GTLRGKEOnPrem_BareMetalManualLbConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalMetalLbConfig
//

@implementation GTLRGKEOnPrem_BareMetalMetalLbConfig
@dynamic addressPools, loadBalancerNodePoolConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addressPools" : [GTLRGKEOnPrem_BareMetalLoadBalancerAddressPool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalMultipleNetworkInterfacesConfig
//

@implementation GTLRGKEOnPrem_BareMetalMultipleNetworkInterfacesConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNetworkConfig
//

@implementation GTLRGKEOnPrem_BareMetalNetworkConfig
@dynamic advancedNetworking, islandModeCidr, multipleNetworkInterfacesConfig,
         srIovConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodeAccessConfig
//

@implementation GTLRGKEOnPrem_BareMetalNodeAccessConfig
@dynamic loginUser;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodeConfig
//

@implementation GTLRGKEOnPrem_BareMetalNodeConfig
@dynamic labels, nodeIp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodeConfig_Labels
//

@implementation GTLRGKEOnPrem_BareMetalNodeConfig_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodePool
//

@implementation GTLRGKEOnPrem_BareMetalNodePool
@dynamic annotations, createTime, deleteTime, displayName, ETag, name,
         nodePoolConfig, reconciling, state, status, uid, updateTime,
         upgradePolicy;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodePool_Annotations
//

@implementation GTLRGKEOnPrem_BareMetalNodePool_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodePoolConfig
//

@implementation GTLRGKEOnPrem_BareMetalNodePoolConfig
@dynamic kubeletConfig, labels, nodeConfigs, operatingSystem, taints;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodeConfigs" : [GTLRGKEOnPrem_BareMetalNodeConfig class],
    @"taints" : [GTLRGKEOnPrem_NodeTaint class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodePoolConfig_Labels
//

@implementation GTLRGKEOnPrem_BareMetalNodePoolConfig_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalNodePoolUpgradePolicy
//

@implementation GTLRGKEOnPrem_BareMetalNodePoolUpgradePolicy
@dynamic parallelUpgradeConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalOsEnvironmentConfig
//

@implementation GTLRGKEOnPrem_BareMetalOsEnvironmentConfig
@dynamic packageRepoExcluded;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalParallelUpgradeConfig
//

@implementation GTLRGKEOnPrem_BareMetalParallelUpgradeConfig
@dynamic concurrentNodes, minimumAvailableNodes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalPortConfig
//

@implementation GTLRGKEOnPrem_BareMetalPortConfig
@dynamic controlPlaneLoadBalancerPort;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalProxyConfig
//

@implementation GTLRGKEOnPrem_BareMetalProxyConfig
@dynamic noProxy, uri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"noProxy" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalSecurityConfig
//

@implementation GTLRGKEOnPrem_BareMetalSecurityConfig
@dynamic authorization;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalSrIovConfig
//

@implementation GTLRGKEOnPrem_BareMetalSrIovConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalStorageConfig
//

@implementation GTLRGKEOnPrem_BareMetalStorageConfig
@dynamic lvpNodeMountsConfig, lvpShareConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalVersionInfo
//

@implementation GTLRGKEOnPrem_BareMetalVersionInfo
@dynamic dependencies, hasDependencies, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dependencies" : [GTLRGKEOnPrem_UpgradeDependency class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalVipConfig
//

@implementation GTLRGKEOnPrem_BareMetalVipConfig
@dynamic controlPlaneVip, ingressVip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_BareMetalWorkloadNodeConfig
//

@implementation GTLRGKEOnPrem_BareMetalWorkloadNodeConfig
@dynamic containerRuntime, maxPodsPerNode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Binding
//

@implementation GTLRGKEOnPrem_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_CancelOperationRequest
//

@implementation GTLRGKEOnPrem_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ClusterUser
//

@implementation GTLRGKEOnPrem_ClusterUser
@dynamic username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Empty
//

@implementation GTLRGKEOnPrem_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollBareMetalAdminClusterRequest
//

@implementation GTLRGKEOnPrem_EnrollBareMetalAdminClusterRequest
@dynamic bareMetalAdminClusterId, membership;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollBareMetalClusterRequest
//

@implementation GTLRGKEOnPrem_EnrollBareMetalClusterRequest
@dynamic adminClusterMembership, bareMetalClusterId, localName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollBareMetalNodePoolRequest
//

@implementation GTLRGKEOnPrem_EnrollBareMetalNodePoolRequest
@dynamic bareMetalNodePoolId, validateOnly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollVmwareAdminClusterRequest
//

@implementation GTLRGKEOnPrem_EnrollVmwareAdminClusterRequest
@dynamic membership, vmwareAdminClusterId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollVmwareClusterRequest
//

@implementation GTLRGKEOnPrem_EnrollVmwareClusterRequest
@dynamic adminClusterMembership, localName, validateOnly, vmwareClusterId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_EnrollVmwareNodePoolRequest
//

@implementation GTLRGKEOnPrem_EnrollVmwareNodePoolRequest
@dynamic vmwareNodePoolId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Expr
//

@implementation GTLRGKEOnPrem_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Fleet
//

@implementation GTLRGKEOnPrem_Fleet
@dynamic membership;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListBareMetalAdminClustersResponse
//

@implementation GTLRGKEOnPrem_ListBareMetalAdminClustersResponse
@dynamic bareMetalAdminClusters, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bareMetalAdminClusters" : [GTLRGKEOnPrem_BareMetalAdminCluster class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"bareMetalAdminClusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListBareMetalClustersResponse
//

@implementation GTLRGKEOnPrem_ListBareMetalClustersResponse
@dynamic bareMetalClusters, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bareMetalClusters" : [GTLRGKEOnPrem_BareMetalCluster class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"bareMetalClusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListBareMetalNodePoolsResponse
//

@implementation GTLRGKEOnPrem_ListBareMetalNodePoolsResponse
@dynamic bareMetalNodePools, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bareMetalNodePools" : [GTLRGKEOnPrem_BareMetalNodePool class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"bareMetalNodePools";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListLocationsResponse
//

@implementation GTLRGKEOnPrem_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRGKEOnPrem_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListOperationsResponse
//

@implementation GTLRGKEOnPrem_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRGKEOnPrem_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListVmwareAdminClustersResponse
//

@implementation GTLRGKEOnPrem_ListVmwareAdminClustersResponse
@dynamic nextPageToken, unreachable, vmwareAdminClusters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unreachable" : [NSString class],
    @"vmwareAdminClusters" : [GTLRGKEOnPrem_VmwareAdminCluster class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"vmwareAdminClusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListVmwareClustersResponse
//

@implementation GTLRGKEOnPrem_ListVmwareClustersResponse
@dynamic nextPageToken, unreachable, vmwareClusters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unreachable" : [NSString class],
    @"vmwareClusters" : [GTLRGKEOnPrem_VmwareCluster class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"vmwareClusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ListVmwareNodePoolsResponse
//

@implementation GTLRGKEOnPrem_ListVmwareNodePoolsResponse
@dynamic nextPageToken, unreachable, vmwareNodePools;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"unreachable" : [NSString class],
    @"vmwareNodePools" : [GTLRGKEOnPrem_VmwareNodePool class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"vmwareNodePools";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Location
//

@implementation GTLRGKEOnPrem_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Location_Labels
//

@implementation GTLRGKEOnPrem_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Location_Metadata
//

@implementation GTLRGKEOnPrem_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_NodeTaint
//

@implementation GTLRGKEOnPrem_NodeTaint
@dynamic effect, key, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Operation
//

@implementation GTLRGKEOnPrem_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Operation_Metadata
//

@implementation GTLRGKEOnPrem_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Operation_Response
//

@implementation GTLRGKEOnPrem_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_OperationMetadata
//

@implementation GTLRGKEOnPrem_OperationMetadata
@dynamic apiVersion, controlPlaneDisconnected, createTime, endTime,
         requestedCancellation, statusMessage, target, type, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Policy
//

@implementation GTLRGKEOnPrem_Policy
@dynamic bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bindings" : [GTLRGKEOnPrem_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_QueryBareMetalAdminVersionConfigResponse
//

@implementation GTLRGKEOnPrem_QueryBareMetalAdminVersionConfigResponse
@dynamic versions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"versions" : [GTLRGKEOnPrem_BareMetalVersionInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_QueryBareMetalVersionConfigResponse
//

@implementation GTLRGKEOnPrem_QueryBareMetalVersionConfigResponse
@dynamic versions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"versions" : [GTLRGKEOnPrem_BareMetalVersionInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_QueryVmwareVersionConfigResponse
//

@implementation GTLRGKEOnPrem_QueryVmwareVersionConfigResponse
@dynamic versions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"versions" : [GTLRGKEOnPrem_VmwareVersionInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ResourceCondition
//

@implementation GTLRGKEOnPrem_ResourceCondition
@dynamic lastTransitionTime, message, reason, state, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ResourceStatus
//

@implementation GTLRGKEOnPrem_ResourceStatus
@dynamic conditions, errorMessage;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRGKEOnPrem_ResourceCondition class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_SetIamPolicyRequest
//

@implementation GTLRGKEOnPrem_SetIamPolicyRequest
@dynamic policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Status
//

@implementation GTLRGKEOnPrem_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRGKEOnPrem_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_Status_Details_Item
//

@implementation GTLRGKEOnPrem_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_TestIamPermissionsRequest
//

@implementation GTLRGKEOnPrem_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_TestIamPermissionsResponse
//

@implementation GTLRGKEOnPrem_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_UpgradeDependency
//

@implementation GTLRGKEOnPrem_UpgradeDependency
@dynamic currentVersion, localName, resourceName, targetVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ValidationCheck
//

@implementation GTLRGKEOnPrem_ValidationCheck
@dynamic option, scenario, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ValidationCheckResult
//

@implementation GTLRGKEOnPrem_ValidationCheckResult
@dynamic category, descriptionProperty, details, reason, state;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_ValidationCheckStatus
//

@implementation GTLRGKEOnPrem_ValidationCheckStatus
@dynamic result;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"result" : [GTLRGKEOnPrem_ValidationCheckResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAAGConfig
//

@implementation GTLRGKEOnPrem_VmwareAAGConfig
@dynamic aagConfigDisabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAddressPool
//

@implementation GTLRGKEOnPrem_VmwareAddressPool
@dynamic addresses, avoidBuggyIps, manualAssign, pool;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addresses" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminAddonNodeConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminAddonNodeConfig
@dynamic autoResizeConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminCluster
//

@implementation GTLRGKEOnPrem_VmwareAdminCluster
@dynamic addonNode, annotations, antiAffinityGroups, autoRepairConfig,
         bootstrapClusterMembership, controlPlaneNode, createTime,
         descriptionProperty, endpoint, ETag, fleet, imageType, loadBalancer,
         localName, name, networkConfig, onPremVersion, platformConfig,
         reconciling, state, status, uid, updateTime, vcenter;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminCluster_Annotations
//

@implementation GTLRGKEOnPrem_VmwareAdminCluster_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminControlPlaneNodeConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminControlPlaneNodeConfig
@dynamic cpus, memory;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminF5BigIpConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminF5BigIpConfig
@dynamic address, partition, snatPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminLoadBalancerConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminLoadBalancerConfig
@dynamic f5Config, manualLbConfig, metalLbConfig, vipConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminManualLbConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminManualLbConfig
@dynamic addonsNodePort, controlPlaneNodePort, ingressHttpNodePort,
         ingressHttpsNodePort, konnectivityServerNodePort;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminMetalLbConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminMetalLbConfig
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminNetworkConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminNetworkConfig
@dynamic dhcpIpConfig, hostConfig, podAddressCidrBlocks,
         serviceAddressCidrBlocks, staticIpConfig, vcenterNetwork;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"podAddressCidrBlocks" : [NSString class],
    @"serviceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminVCenterConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminVCenterConfig
@dynamic address, caCertData, cluster, datacenter, dataDisk, datastore, folder,
         resourcePool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAdminVipConfig
//

@implementation GTLRGKEOnPrem_VmwareAdminVipConfig
@dynamic addonsVip, controlPlaneVip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAutoRepairConfig
//

@implementation GTLRGKEOnPrem_VmwareAutoRepairConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareAutoResizeConfig
//

@implementation GTLRGKEOnPrem_VmwareAutoResizeConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareBundleConfig
//

@implementation GTLRGKEOnPrem_VmwareBundleConfig
@dynamic status, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareCluster
//

@implementation GTLRGKEOnPrem_VmwareCluster
@dynamic adminClusterMembership, adminClusterName, annotations,
         antiAffinityGroups, authorization, autoRepairConfig, controlPlaneNode,
         createTime, dataplaneV2, deleteTime, descriptionProperty,
         enableControlPlaneV2, endpoint, ETag, fleet, loadBalancer, localName,
         name, networkConfig, onPremVersion, reconciling, state, status,
         storage, uid, updateTime, validationCheck, vcenter, vmTrackingEnabled;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareCluster_Annotations
//

@implementation GTLRGKEOnPrem_VmwareCluster_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareControlPlaneNodeConfig
//

@implementation GTLRGKEOnPrem_VmwareControlPlaneNodeConfig
@dynamic autoResizeConfig, cpus, memory, replicas, vsphereConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareControlPlaneV2Config
//

@implementation GTLRGKEOnPrem_VmwareControlPlaneV2Config
@dynamic controlPlaneIpBlock;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareControlPlaneVsphereConfig
//

@implementation GTLRGKEOnPrem_VmwareControlPlaneVsphereConfig
@dynamic datastore, storagePolicyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareDataplaneV2Config
//

@implementation GTLRGKEOnPrem_VmwareDataplaneV2Config
@dynamic advancedNetworking, dataplaneV2Enabled, windowsDataplaneV2Enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareDhcpIpConfig
//

@implementation GTLRGKEOnPrem_VmwareDhcpIpConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareF5BigIpConfig
//

@implementation GTLRGKEOnPrem_VmwareF5BigIpConfig
@dynamic address, partition, snatPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareHostConfig
//

@implementation GTLRGKEOnPrem_VmwareHostConfig
@dynamic dnsSearchDomains, dnsServers, ntpServers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dnsSearchDomains" : [NSString class],
    @"dnsServers" : [NSString class],
    @"ntpServers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareHostIp
//

@implementation GTLRGKEOnPrem_VmwareHostIp
@dynamic hostname, ip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareIpBlock
//

@implementation GTLRGKEOnPrem_VmwareIpBlock
@dynamic gateway, ips, netmask;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ips" : [GTLRGKEOnPrem_VmwareHostIp class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareLoadBalancerConfig
//

@implementation GTLRGKEOnPrem_VmwareLoadBalancerConfig
@dynamic f5Config, manualLbConfig, metalLbConfig, vipConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareManualLbConfig
//

@implementation GTLRGKEOnPrem_VmwareManualLbConfig
@dynamic controlPlaneNodePort, ingressHttpNodePort, ingressHttpsNodePort,
         konnectivityServerNodePort;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareMetalLbConfig
//

@implementation GTLRGKEOnPrem_VmwareMetalLbConfig
@dynamic addressPools;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addressPools" : [GTLRGKEOnPrem_VmwareAddressPool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNetworkConfig
//

@implementation GTLRGKEOnPrem_VmwareNetworkConfig
@dynamic controlPlaneV2Config, dhcpIpConfig, hostConfig, podAddressCidrBlocks,
         serviceAddressCidrBlocks, staticIpConfig, vcenterNetwork;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"podAddressCidrBlocks" : [NSString class],
    @"serviceAddressCidrBlocks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNodeConfig
//

@implementation GTLRGKEOnPrem_VmwareNodeConfig
@dynamic bootDiskSizeGb, cpus, enableLoadBalancer, image, imageType, labels,
         memoryMb, replicas, taints, vsphereConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"taints" : [GTLRGKEOnPrem_NodeTaint class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNodeConfig_Labels
//

@implementation GTLRGKEOnPrem_VmwareNodeConfig_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNodePool
//

@implementation GTLRGKEOnPrem_VmwareNodePool
@dynamic annotations, config, createTime, deleteTime, displayName, ETag, name,
         nodePoolAutoscaling, onPremVersion, reconciling, state, status, uid,
         updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNodePool_Annotations
//

@implementation GTLRGKEOnPrem_VmwareNodePool_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareNodePoolAutoscalingConfig
//

@implementation GTLRGKEOnPrem_VmwareNodePoolAutoscalingConfig
@dynamic maxReplicas, minReplicas;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwarePlatformConfig
//

@implementation GTLRGKEOnPrem_VmwarePlatformConfig
@dynamic bundles, platformVersion, requiredPlatformVersion, status;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bundles" : [GTLRGKEOnPrem_VmwareBundleConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareStaticIpConfig
//

@implementation GTLRGKEOnPrem_VmwareStaticIpConfig
@dynamic ipBlocks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ipBlocks" : [GTLRGKEOnPrem_VmwareIpBlock class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareStorageConfig
//

@implementation GTLRGKEOnPrem_VmwareStorageConfig
@dynamic vsphereCsiDisabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareVCenterConfig
//

@implementation GTLRGKEOnPrem_VmwareVCenterConfig
@dynamic address, caCertData, cluster, datacenter, datastore, folder,
         resourcePool, storagePolicyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareVersionInfo
//

@implementation GTLRGKEOnPrem_VmwareVersionInfo
@dynamic hasDependencies, isInstalled, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareVipConfig
//

@implementation GTLRGKEOnPrem_VmwareVipConfig
@dynamic controlPlaneVip, ingressVip;
@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareVsphereConfig
//

@implementation GTLRGKEOnPrem_VmwareVsphereConfig
@dynamic datastore, storagePolicyName, tags;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tags" : [GTLRGKEOnPrem_VmwareVsphereTag class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRGKEOnPrem_VmwareVsphereTag
//

@implementation GTLRGKEOnPrem_VmwareVsphereTag
@dynamic category, tag;
@end
