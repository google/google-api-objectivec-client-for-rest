// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   GKE On-Prem API (gkeonprem/v1)
// Documentation:
//   https://cloud.google.com/anthos/clusters/docs/on-prem/

#import <GoogleAPIClientForREST/GTLRGKEOnPremQuery.h>

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRGKEOnPremViewBasic                   = @"BASIC";
NSString * const kGTLRGKEOnPremViewClusterViewUnspecified  = @"CLUSTER_VIEW_UNSPECIFIED";
NSString * const kGTLRGKEOnPremViewFull                    = @"FULL";
NSString * const kGTLRGKEOnPremViewNodePoolViewUnspecified = @"NODE_POOL_VIEW_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRGKEOnPremQuery

@dynamic fields;

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersCreate

@dynamic allowPreflightFailure, bareMetalAdminClusterId, parent, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalAdminCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalAdminClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollBareMetalAdminClusterRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalAdminClusters:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersGet

@dynamic allowMissing, name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_BareMetalAdminCluster class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersList

@dynamic allowMissing, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalAdminClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListBareMetalAdminClustersResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalAdminCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersQueryVersionConfig

@dynamic parent, upgradeConfigClusterName;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"upgradeConfigClusterName" : @"upgradeConfig.clusterName" };
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalAdminClusters:queryVersionConfig";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersQueryVersionConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_QueryBareMetalAdminVersionConfigResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.queryVersionConfig";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersUnenroll

@dynamic allowMissing, ETag, ignoreErrors, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalAdminClustersUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalAdminClusters.unenroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsCreate

@dynamic bareMetalNodePoolId, parent, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalNodePool *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalNodePools";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsDelete

@dynamic allowMissing, ETag, ignoreErrors, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.delete";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollBareMetalNodePoolRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalNodePools:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_BareMetalNodePool class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsList

@dynamic pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalNodePools";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListBareMetalNodePoolsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsPatch

@dynamic allowMissing, name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalNodePool *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsUnenroll

@dynamic allowMissing, ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersBareMetalNodePoolsUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.unenroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersCreate

@dynamic allowPreflightFailure, bareMetalClusterId, parent, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersDelete

@dynamic allowMissing, ETag, force, ignoreErrors, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.delete";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollBareMetalClusterRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalClusters:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersGet

@dynamic allowMissing, name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_BareMetalCluster class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersList

@dynamic allowMissing, filter, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListBareMetalClustersResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersPatch

@dynamic allowMissing, name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_BareMetalCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersQueryVersionConfig

@dynamic createConfigAdminClusterMembership, createConfigAdminClusterName,
         parent, upgradeConfigClusterName;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"createConfigAdminClusterMembership" : @"createConfig.adminClusterMembership",
    @"createConfigAdminClusterName" : @"createConfig.adminClusterName",
    @"upgradeConfigClusterName" : @"upgradeConfig.clusterName"
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bareMetalClusters:queryVersionConfig";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersQueryVersionConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_QueryBareMetalVersionConfigResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.queryVersionConfig";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersUnenroll

@dynamic allowMissing, ETag, force, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsBareMetalClustersUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.bareMetalClusters.unenroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Location class];
  query.loggingName = @"gkeonprem.projects.locations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRGKEOnPremQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListLocationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRGKEOnPremQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Empty class];
  query.loggingName = @"gkeonprem.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Empty class];
  query.loggingName = @"gkeonprem.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersCreate

@dynamic allowPreflightFailure, parent, validateOnly, vmwareAdminClusterId;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareAdminCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareAdminClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollVmwareAdminClusterRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareAdminClusters:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersGet

@dynamic allowMissing, name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_VmwareAdminCluster class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersList

@dynamic allowMissing, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareAdminClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListVmwareAdminClustersResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareAdminCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersUnenroll

@dynamic allowMissing, ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareAdminClustersUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareAdminClusters.unenroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersCreate

@dynamic allowPreflightFailure, parent, validateOnly, vmwareClusterId;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersDelete

@dynamic allowMissing, ETag, force, ignoreErrors, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.delete";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollVmwareClusterRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareClusters:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersGet

@dynamic allowMissing, name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_VmwareCluster class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersList

@dynamic allowMissing, filter, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareClusters";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListVmwareClustersResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersQueryVersionConfig

@dynamic createConfigAdminClusterMembership, createConfigAdminClusterName,
         parent, upgradeConfigClusterName;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"createConfigAdminClusterMembership" : @"createConfig.adminClusterMembership",
    @"createConfigAdminClusterName" : @"createConfig.adminClusterName",
    @"upgradeConfigClusterName" : @"upgradeConfig.clusterName"
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareClusters:queryVersionConfig";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersQueryVersionConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_QueryVmwareVersionConfigResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.queryVersionConfig";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersUnenroll

@dynamic allowMissing, ETag, force, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.unenroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsCreate

@dynamic parent, validateOnly, vmwareNodePoolId;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareNodePool *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareNodePools";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.create";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsDelete

@dynamic allowMissing, ETag, ignoreErrors, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.delete";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsEnroll

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_EnrollVmwareNodePoolRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareNodePools:enroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsEnroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.enroll";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_VmwareNodePool class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.getIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsList

@dynamic pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/vmwareNodePools";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListVmwareNodePoolsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.operations.get";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_ListOperationsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.operations.list";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_VmwareNodePool *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.patch";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_Policy class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.setIamPolicy";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGKEOnPrem_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGKEOnPrem_TestIamPermissionsResponse class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.testIamPermissions";
  return query;
}

@end

@implementation GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsUnenroll

@dynamic allowMissing, ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unenroll";
  GTLRGKEOnPremQuery_ProjectsLocationsVmwareClustersVmwareNodePoolsUnenroll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGKEOnPrem_Operation class];
  query.loggingName = @"gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.unenroll";
  return query;
}

@end
