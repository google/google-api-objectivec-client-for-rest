// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   API Gateway API (apigateway/v1)
// Documentation:
//   https://cloud.google.com/api-gateway/docs

#import <GoogleAPIClientForREST/GTLRAPIGatewayQuery.h>

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRAPIGatewayViewBasic                 = @"BASIC";
NSString * const kGTLRAPIGatewayViewConfigViewUnspecified = @"CONFIG_VIEW_UNSPECIFIED";
NSString * const kGTLRAPIGatewayViewFull                  = @"FULL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAPIGatewayQuery

@dynamic fields;

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsCreate

@dynamic apiConfigId, parent;

+ (instancetype)queryWithObject:(GTLRAPIGateway_ApiConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/configs";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.create";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.delete";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_ApiConfig class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.get";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.getIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/configs";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_ListApiConfigsResponse class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.list";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAPIGateway_ApiConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.patch";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.setIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRAPIGatewayQuery_ProjectsLocationsApisConfigsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_TestIamPermissionsResponse class];
  query.loggingName = @"apigateway.projects.locations.apis.configs.testIamPermissions";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisCreate

@dynamic apiId, parent;

+ (instancetype)queryWithObject:(GTLRAPIGateway_Api *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/apis";
  GTLRAPIGatewayQuery_ProjectsLocationsApisCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.create";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.delete";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Api class];
  query.loggingName = @"apigateway.projects.locations.apis.get";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsApisGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.apis.getIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/apis";
  GTLRAPIGatewayQuery_ProjectsLocationsApisList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_ListApisResponse class];
  query.loggingName = @"apigateway.projects.locations.apis.list";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAPIGateway_Api *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsApisPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.apis.patch";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsApisSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.apis.setIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsApisTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRAPIGatewayQuery_ProjectsLocationsApisTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_TestIamPermissionsResponse class];
  query.loggingName = @"apigateway.projects.locations.apis.testIamPermissions";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysCreate

@dynamic gatewayId, parent;

+ (instancetype)queryWithObject:(GTLRAPIGateway_Gateway *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/gateways";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.gateways.create";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.gateways.delete";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Gateway class];
  query.loggingName = @"apigateway.projects.locations.gateways.get";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.gateways.getIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/gateways";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAPIGateway_ListGatewaysResponse class];
  query.loggingName = @"apigateway.projects.locations.gateways.list";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAPIGateway_Gateway *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.gateways.patch";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_Policy class];
  query.loggingName = @"apigateway.projects.locations.gateways.setIamPolicy";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGatewaysTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRAPIGateway_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRAPIGatewayQuery_ProjectsLocationsGatewaysTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRAPIGateway_TestIamPermissionsResponse class];
  query.loggingName = @"apigateway.projects.locations.gateways.testIamPermissions";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Location class];
  query.loggingName = @"apigateway.projects.locations.get";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRAPIGatewayQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_ListLocationsResponse class];
  query.loggingName = @"apigateway.projects.locations.list";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRAPIGateway_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRAPIGatewayQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Empty class];
  query.loggingName = @"apigateway.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Empty class];
  query.loggingName = @"apigateway.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRAPIGatewayQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_Operation class];
  query.loggingName = @"apigateway.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRAPIGatewayQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRAPIGatewayQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAPIGateway_ListOperationsResponse class];
  query.loggingName = @"apigateway.projects.locations.operations.list";
  return query;
}

@end
