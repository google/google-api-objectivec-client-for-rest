// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Network Services API (networkservices/v1)
// Documentation:
//   https://cloud.google.com/networking

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRNetworkServices_AuditConfig;
@class GTLRNetworkServices_AuditLogConfig;
@class GTLRNetworkServices_Binding;
@class GTLRNetworkServices_EndpointMatcher;
@class GTLRNetworkServices_EndpointMatcherMetadataLabelMatcher;
@class GTLRNetworkServices_EndpointMatcherMetadataLabelMatcherMetadataLabels;
@class GTLRNetworkServices_EndpointPolicy;
@class GTLRNetworkServices_EndpointPolicy_Labels;
@class GTLRNetworkServices_Expr;
@class GTLRNetworkServices_ExtensionChain;
@class GTLRNetworkServices_ExtensionChainExtension;
@class GTLRNetworkServices_ExtensionChainMatchCondition;
@class GTLRNetworkServices_Gateway;
@class GTLRNetworkServices_Gateway_Labels;
@class GTLRNetworkServices_GrpcRoute;
@class GTLRNetworkServices_GrpcRoute_Labels;
@class GTLRNetworkServices_GrpcRouteDestination;
@class GTLRNetworkServices_GrpcRouteFaultInjectionPolicy;
@class GTLRNetworkServices_GrpcRouteFaultInjectionPolicyAbort;
@class GTLRNetworkServices_GrpcRouteFaultInjectionPolicyDelay;
@class GTLRNetworkServices_GrpcRouteHeaderMatch;
@class GTLRNetworkServices_GrpcRouteMethodMatch;
@class GTLRNetworkServices_GrpcRouteRetryPolicy;
@class GTLRNetworkServices_GrpcRouteRouteAction;
@class GTLRNetworkServices_GrpcRouteRouteMatch;
@class GTLRNetworkServices_GrpcRouteRouteRule;
@class GTLRNetworkServices_GrpcRouteStatefulSessionAffinityPolicy;
@class GTLRNetworkServices_HttpRoute;
@class GTLRNetworkServices_HttpRoute_Labels;
@class GTLRNetworkServices_HttpRouteCorsPolicy;
@class GTLRNetworkServices_HttpRouteDestination;
@class GTLRNetworkServices_HttpRouteFaultInjectionPolicy;
@class GTLRNetworkServices_HttpRouteFaultInjectionPolicyAbort;
@class GTLRNetworkServices_HttpRouteFaultInjectionPolicyDelay;
@class GTLRNetworkServices_HttpRouteHeaderMatch;
@class GTLRNetworkServices_HttpRouteHeaderMatchIntegerRange;
@class GTLRNetworkServices_HttpRouteHeaderModifier;
@class GTLRNetworkServices_HttpRouteHeaderModifier_Add;
@class GTLRNetworkServices_HttpRouteHeaderModifier_Set;
@class GTLRNetworkServices_HttpRouteHttpDirectResponse;
@class GTLRNetworkServices_HttpRouteQueryParameterMatch;
@class GTLRNetworkServices_HttpRouteRedirect;
@class GTLRNetworkServices_HttpRouteRequestMirrorPolicy;
@class GTLRNetworkServices_HttpRouteRetryPolicy;
@class GTLRNetworkServices_HttpRouteRouteAction;
@class GTLRNetworkServices_HttpRouteRouteMatch;
@class GTLRNetworkServices_HttpRouteRouteRule;
@class GTLRNetworkServices_HttpRouteStatefulSessionAffinityPolicy;
@class GTLRNetworkServices_HttpRouteURLRewrite;
@class GTLRNetworkServices_LbRouteExtension;
@class GTLRNetworkServices_LbRouteExtension_Labels;
@class GTLRNetworkServices_LbRouteExtension_Metadata;
@class GTLRNetworkServices_LbTrafficExtension;
@class GTLRNetworkServices_LbTrafficExtension_Labels;
@class GTLRNetworkServices_LbTrafficExtension_Metadata;
@class GTLRNetworkServices_Location;
@class GTLRNetworkServices_Location_Labels;
@class GTLRNetworkServices_Location_Metadata;
@class GTLRNetworkServices_Mesh;
@class GTLRNetworkServices_Mesh_Labels;
@class GTLRNetworkServices_Operation;
@class GTLRNetworkServices_Operation_Metadata;
@class GTLRNetworkServices_Operation_Response;
@class GTLRNetworkServices_Policy;
@class GTLRNetworkServices_ServiceBinding;
@class GTLRNetworkServices_ServiceBinding_Labels;
@class GTLRNetworkServices_ServiceLbPolicy;
@class GTLRNetworkServices_ServiceLbPolicy_Labels;
@class GTLRNetworkServices_ServiceLbPolicyAutoCapacityDrain;
@class GTLRNetworkServices_ServiceLbPolicyFailoverConfig;
@class GTLRNetworkServices_Status;
@class GTLRNetworkServices_Status_Details_Item;
@class GTLRNetworkServices_TcpRoute;
@class GTLRNetworkServices_TcpRoute_Labels;
@class GTLRNetworkServices_TcpRouteRouteAction;
@class GTLRNetworkServices_TcpRouteRouteDestination;
@class GTLRNetworkServices_TcpRouteRouteMatch;
@class GTLRNetworkServices_TcpRouteRouteRule;
@class GTLRNetworkServices_TlsRoute;
@class GTLRNetworkServices_TlsRoute_Labels;
@class GTLRNetworkServices_TlsRouteRouteAction;
@class GTLRNetworkServices_TlsRouteRouteDestination;
@class GTLRNetworkServices_TlsRouteRouteMatch;
@class GTLRNetworkServices_TlsRouteRouteRule;
@class GTLRNetworkServices_TrafficPortSelector;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRNetworkServices_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_EndpointMatcherMetadataLabelMatcher.metadataLabelMatchCriteria

/**
 *  The metadata presented by the xDS client should contain all of the labels
 *  specified here.
 *
 *  Value: "MATCH_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MatchAll;
/**
 *  At least one of the Labels specified in the matcher should match the
 *  metadata presented by xDS client.
 *
 *  Value: "MATCH_ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MatchAny;
/**
 *  Default value. Should not be used.
 *
 *  Value: "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MetadataLabelMatchCriteriaUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_EndpointPolicy.type

/**
 *  Default value. Must not be used.
 *
 *  Value: "ENDPOINT_POLICY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointPolicy_Type_EndpointPolicyTypeUnspecified;
/**
 *  Represents a proxyless gRPC backend.
 *
 *  Value: "GRPC_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointPolicy_Type_GrpcServer;
/**
 *  Represents a proxy deployed as a sidecar.
 *
 *  Value: "SIDECAR_PROXY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_EndpointPolicy_Type_SidecarProxy;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_ExtensionChainExtension.supportedEvents

/**
 *  Unspecified value. Do not use.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_EventTypeUnspecified;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  request body arrives.
 *
 *  Value: "REQUEST_BODY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_RequestBody;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  request headers arrive.
 *
 *  Value: "REQUEST_HEADERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_RequestHeaders;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  request trailers arrives.
 *
 *  Value: "REQUEST_TRAILERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_RequestTrailers;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  response body arrives.
 *
 *  Value: "RESPONSE_BODY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_ResponseBody;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  response headers arrive.
 *
 *  Value: "RESPONSE_HEADERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_ResponseHeaders;
/**
 *  If included in `supported_events`, the extension is called when the HTTP
 *  response trailers arrives.
 *
 *  Value: "RESPONSE_TRAILERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ExtensionChainExtension_SupportedEvents_ResponseTrailers;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_Gateway.envoyHeaders

/**
 *  Envoy will insert default internal debug headers into upstream requests:
 *  x-envoy-attempt-count x-envoy-is-timeout-retry
 *  x-envoy-expected-rq-timeout-ms x-envoy-original-path
 *  x-envoy-upstream-stream-duration-ms
 *
 *  Value: "DEBUG_HEADERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_EnvoyHeaders_DebugHeaders;
/**
 *  Defaults to NONE.
 *
 *  Value: "ENVOY_HEADERS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_EnvoyHeaders_EnvoyHeadersUnspecified;
/**
 *  Suppress envoy debug headers.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_EnvoyHeaders_None;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_Gateway.ipVersion

/**
 *  The type for IP version 4.
 *
 *  Value: "IPV4"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_IpVersion_Ipv4;
/**
 *  The type for IP version 6.
 *
 *  Value: "IPV6"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_IpVersion_Ipv6;
/**
 *  The type when IP version is not specified. Defaults to IPV4.
 *
 *  Value: "IP_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_IpVersion_IpVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_Gateway.routingMode

/**
 *  The routing mode is explicit; clients are configured to send traffic through
 *  the gateway. This is the default routing mode.
 *
 *  Value: "EXPLICIT_ROUTING_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_RoutingMode_ExplicitRoutingMode;
/**
 *  The routing mode is next-hop. Clients are unaware of the gateway, and a
 *  route (advanced route or other route type) can be configured to direct
 *  traffic from client to gateway. The gateway then acts as a next-hop to the
 *  destination.
 *
 *  Value: "NEXT_HOP_ROUTING_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_RoutingMode_NextHopRoutingMode;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_Gateway.type

/**
 *  The type of the customer managed gateway is TrafficDirector Open Mesh.
 *
 *  Value: "OPEN_MESH"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_Type_OpenMesh;
/**
 *  The type of the customer managed gateway is SecureWebGateway (SWG).
 *
 *  Value: "SECURE_WEB_GATEWAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_Type_SecureWebGateway;
/**
 *  The type of the customer managed gateway is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Gateway_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_GrpcRouteHeaderMatch.type

/**
 *  Will only match the exact value provided.
 *
 *  Value: "EXACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_Exact;
/**
 *  Will match paths conforming to the prefix specified by value. RE2 syntax is
 *  supported.
 *
 *  Value: "REGULAR_EXPRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_RegularExpression;
/**
 *  Unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_GrpcRouteMethodMatch.type

/**
 *  Will only match the exact name provided.
 *
 *  Value: "EXACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteMethodMatch_Type_Exact;
/**
 *  Will interpret grpc_method and grpc_service as regexes. RE2 syntax is
 *  supported.
 *
 *  Value: "REGULAR_EXPRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteMethodMatch_Type_RegularExpression;
/**
 *  Unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_GrpcRouteMethodMatch_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_HttpRouteRedirect.responseCode

/**
 *  Corresponds to 302.
 *
 *  Value: "FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_Found;
/**
 *  Corresponds to 301.
 *
 *  Value: "MOVED_PERMANENTLY_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_MovedPermanentlyDefault;
/**
 *  Corresponds to 308. In this case, the request method will be retained.
 *
 *  Value: "PERMANENT_REDIRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_PermanentRedirect;
/**
 *  Default value
 *
 *  Value: "RESPONSE_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_ResponseCodeUnspecified;
/**
 *  Corresponds to 303.
 *
 *  Value: "SEE_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_SeeOther;
/**
 *  Corresponds to 307. In this case, the request method will be retained.
 *
 *  Value: "TEMPORARY_REDIRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_TemporaryRedirect;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_LbRouteExtension.loadBalancingScheme

/**
 *  Signifies that this is used for External Managed HTTP(S) Load Balancing.
 *
 *  Value: "EXTERNAL_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_ExternalManaged;
/**
 *  Signifies that this is used for Internal HTTP(S) Load Balancing.
 *
 *  Value: "INTERNAL_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_InternalManaged;
/**
 *  Default value. Do not use.
 *
 *  Value: "LOAD_BALANCING_SCHEME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_LoadBalancingSchemeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_LbTrafficExtension.loadBalancingScheme

/**
 *  Signifies that this is used for External Managed HTTP(S) Load Balancing.
 *
 *  Value: "EXTERNAL_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_ExternalManaged;
/**
 *  Signifies that this is used for Internal HTTP(S) Load Balancing.
 *
 *  Value: "INTERNAL_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_InternalManaged;
/**
 *  Default value. Do not use.
 *
 *  Value: "LOAD_BALANCING_SCHEME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_LoadBalancingSchemeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_LoggingConfig.logSeverity

/**
 *  A person must take action immediately.
 *
 *  Value: "ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Alert;
/**
 *  Critical events cause more severe problems or outages.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Critical;
/**
 *  Debug or trace level logging.
 *
 *  Value: "DEBUG"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Debug;
/**
 *  One or more systems are unusable.
 *
 *  Value: "EMERGENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Emergency;
/**
 *  Error events are likely to cause problems.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Error;
/**
 *  Routine information, such as ongoing status or performance.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Info;
/**
 *  Log severity is not specified. This value is treated the same as NONE, but
 *  is used to distinguish between no update and update to NONE in update_masks.
 *
 *  Value: "LOG_SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_LogSeverityUnspecified;
/**
 *  Default value at resource creation, presence of this value must be treated
 *  as no logging/disable logging.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_None;
/**
 *  Normal but significant events, such as start up, shut down, or a
 *  configuration change.
 *
 *  Value: "NOTICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Notice;
/**
 *  Warning events might cause problems.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_LoggingConfig_LogSeverity_Warning;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_Mesh.envoyHeaders

/**
 *  Envoy will insert default internal debug headers into upstream requests:
 *  x-envoy-attempt-count x-envoy-is-timeout-retry
 *  x-envoy-expected-rq-timeout-ms x-envoy-original-path
 *  x-envoy-upstream-stream-duration-ms
 *
 *  Value: "DEBUG_HEADERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Mesh_EnvoyHeaders_DebugHeaders;
/**
 *  Defaults to NONE.
 *
 *  Value: "ENVOY_HEADERS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Mesh_EnvoyHeaders_EnvoyHeadersUnspecified;
/**
 *  Suppress envoy debug headers.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_Mesh_EnvoyHeaders_None;

// ----------------------------------------------------------------------------
// GTLRNetworkServices_ServiceLbPolicy.loadBalancingAlgorithm

/**
 *  The type of the loadbalancing algorithm is unspecified.
 *
 *  Value: "LOAD_BALANCING_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_LoadBalancingAlgorithmUnspecified;
/**
 *  Direct traffic to the nearest region with endpoints and capacity before
 *  spilling over to other regions and spread the traffic from each client to
 *  all the MIGs/NEGs in a region.
 *
 *  Value: "SPRAY_TO_REGION"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_SprayToRegion;
/**
 *  Balance traffic across all backends across the world proportionally based on
 *  capacity.
 *
 *  Value: "SPRAY_TO_WORLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_SprayToWorld;
/**
 *  Direct traffic to the nearest region with endpoints and capacity before
 *  spilling over to other regions. All MIGs/NEGs within a region are evenly
 *  loaded but each client might not spread the traffic to all the MIGs/NEGs in
 *  the region.
 *
 *  Value: "WATERFALL_BY_REGION"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_WaterfallByRegion;
/**
 *  Attempt to keep traffic in a single zone closest to the client, before
 *  spilling over to other zones.
 *
 *  Value: "WATERFALL_BY_ZONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_WaterfallByZone;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRNetworkServices_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRNetworkServices_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRNetworkServices_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRNetworkServices_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRNetworkServices_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRNetworkServices_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRNetworkServices_CancelOperationRequest : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRNetworkServices_Empty : GTLRObject
@end


/**
 *  A definition of a matcher that selects endpoints to which the policies
 *  should be applied.
 */
@interface GTLRNetworkServices_EndpointMatcher : GTLRObject

/** The matcher is based on node metadata presented by xDS clients. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_EndpointMatcherMetadataLabelMatcher *metadataLabelMatcher;

@end


/**
 *  The matcher that is based on node metadata presented by xDS clients.
 */
@interface GTLRNetworkServices_EndpointMatcherMetadataLabelMatcher : GTLRObject

/**
 *  Specifies how matching should be done. Supported values are: MATCH_ANY: At
 *  least one of the Labels specified in the matcher should match the metadata
 *  presented by xDS client. MATCH_ALL: The metadata presented by the xDS client
 *  should contain all of the labels specified here. The selection is determined
 *  based on the best match. For example, suppose there are three EndpointPolicy
 *  resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has
 *  MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the
 *  config from P1 will be selected. If a client with label connects, the config
 *  from P2 will be selected. If a client with label connects, the config from
 *  P3 will be selected. If there is more than one best match, (for example, if
 *  a config P4 with selector exists and if a client with label connects), pick
 *  up the one with older creation time.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MatchAll
 *        The metadata presented by the xDS client should contain all of the
 *        labels specified here. (Value: "MATCH_ALL")
 *    @arg @c kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MatchAny
 *        At least one of the Labels specified in the matcher should match the
 *        metadata presented by xDS client. (Value: "MATCH_ANY")
 *    @arg @c kGTLRNetworkServices_EndpointMatcherMetadataLabelMatcher_MetadataLabelMatchCriteria_MetadataLabelMatchCriteriaUnspecified
 *        Default value. Should not be used. (Value:
 *        "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *metadataLabelMatchCriteria;

/**
 *  The list of label value pairs that must match labels in the provided
 *  metadata based on filterMatchCriteria This list can have at most 64 entries.
 *  The list can be empty if the match criteria is MATCH_ANY, to specify a
 *  wildcard match (i.e this matches any client).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_EndpointMatcherMetadataLabelMatcherMetadataLabels *> *metadataLabels;

@end


/**
 *  Defines a name-pair value for a single label.
 */
@interface GTLRNetworkServices_EndpointMatcherMetadataLabelMatcherMetadataLabels : GTLRObject

/** Required. Label name presented as key in xDS Node Metadata. */
@property(nonatomic, copy, nullable) NSString *labelName;

/**
 *  Required. Label value presented as value corresponding to the above key, in
 *  xDS Node Metadata.
 */
@property(nonatomic, copy, nullable) NSString *labelValue;

@end


/**
 *  EndpointPolicy is a resource that helps apply desired configuration on the
 *  endpoints that match specific criteria. For example, this resource can be
 *  used to apply "authentication config" an all endpoints that serve on port
 *  8080.
 */
@interface GTLRNetworkServices_EndpointPolicy : GTLRObject

/**
 *  Optional. This field specifies the URL of AuthorizationPolicy resource that
 *  applies authorization policies to the inbound traffic at the matched
 *  endpoints. Refer to Authorization. If this field is not specified,
 *  authorization is disabled(no authz checks) for this endpoint.
 */
@property(nonatomic, copy, nullable) NSString *authorizationPolicy;

/**
 *  Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can
 *  be set to specify the authentication for traffic from the proxy to the
 *  actual endpoints. More specifically, it is applied to the outgoing traffic
 *  from the proxy to the endpoint. This is typically used for sidecar model
 *  where the proxy identifies itself as endpoint to the control plane, with the
 *  connection between sidecar and endpoint requiring authentication. If this
 *  field is not set, authentication is disabled(open). Applicable only when
 *  EndpointPolicyType is SIDECAR_PROXY.
 */
@property(nonatomic, copy, nullable) NSString *clientTlsPolicy;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. A matcher that selects endpoints to which the policies should be
 *  applied.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_EndpointMatcher *endpointMatcher;

/**
 *  Optional. Set of label tags associated with the EndpointPolicy resource.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_EndpointPolicy_Labels *labels;

/**
 *  Identifier. Name of the EndpointPolicy resource. It matches pattern
 *  `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is
 *  used to determine the authentication policy to be applied to terminate the
 *  inbound traffic at the identified backends. If this field is not set,
 *  authentication is disabled(open) for this endpoint.
 */
@property(nonatomic, copy, nullable) NSString *serverTlsPolicy;

/**
 *  Optional. Port selector for the (matched) endpoints. If no port selector is
 *  provided, the matched config is applied to all ports.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_TrafficPortSelector *trafficPortSelector;

/**
 *  Required. The type of endpoint policy. This is primarily used to validate
 *  the configuration.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_EndpointPolicy_Type_EndpointPolicyTypeUnspecified
 *        Default value. Must not be used. (Value:
 *        "ENDPOINT_POLICY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_EndpointPolicy_Type_GrpcServer Represents a
 *        proxyless gRPC backend. (Value: "GRPC_SERVER")
 *    @arg @c kGTLRNetworkServices_EndpointPolicy_Type_SidecarProxy Represents a
 *        proxy deployed as a sidecar. (Value: "SIDECAR_PROXY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the EndpointPolicy resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_EndpointPolicy_Labels : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRNetworkServices_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A single extension chain wrapper that contains the match conditions and
 *  extensions to execute.
 */
@interface GTLRNetworkServices_ExtensionChain : GTLRObject

/**
 *  Required. A set of extensions to execute for the matching request. At least
 *  one extension is required. Up to 3 extensions can be defined for each
 *  extension chain for `LbTrafficExtension` resource. `LbRouteExtension` chains
 *  are limited to 1 extension per extension chain.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_ExtensionChainExtension *> *extensions;

/** Required. Conditions under which this chain is invoked for a request. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_ExtensionChainMatchCondition *matchCondition;

/**
 *  Required. The name for this extension chain. The name is logged as part of
 *  the HTTP request logs. The name must conform with RFC-1034, is restricted to
 *  lower-cased letters, numbers and hyphens, and can have a maximum length of
 *  63 characters. Additionally, the first character must be a letter and the
 *  last a letter or a number.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A single extension in the chain to execute for the matching request.
 */
@interface GTLRNetworkServices_ExtensionChainExtension : GTLRObject

/**
 *  Optional. The `:authority` header in the gRPC request sent from Envoy to the
 *  extension service. Required for Callout extensions.
 */
@property(nonatomic, copy, nullable) NSString *authority;

/**
 *  Optional. Determines how the proxy behaves if the call to the extension
 *  fails or times out. When set to `TRUE`, request or response processing
 *  continues without error. Any subsequent extensions in the extension chain
 *  are also executed. When set to `FALSE` or the default setting of `FALSE` is
 *  used, one of the following happens: * If response headers have not been
 *  delivered to the downstream client, a generic 500 error is returned to the
 *  client. The error response can be tailored by configuring a custom error
 *  response in the load balancer. * If response headers have been delivered,
 *  then the HTTP stream to the downstream client is reset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failOpen;

/**
 *  Optional. List of the HTTP headers to forward to the extension (from the
 *  client or backend). If omitted, all headers are sent. Each element is a
 *  string indicating the header name.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *forwardHeaders;

/**
 *  Required. The name for this extension. The name is logged as part of the
 *  HTTP request logs. The name must conform with RFC-1034, is restricted to
 *  lower-cased letters, numbers and hyphens, and can have a maximum length of
 *  63 characters. Additionally, the first character must be a letter and the
 *  last a letter or a number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The reference to the service that runs the extension. Currently
 *  only callout extensions are supported here. To configure a callout
 *  extension, `service` must be a fully-qualified reference to a [backend
 *  service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices)
 *  in the format:
 *  `https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}`
 *  or
 *  `https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}`.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Optional. A set of events during request or response processing for which
 *  this extension is called. This field is required for the
 *  `LbTrafficExtension` resource. It must not be set for the `LbRouteExtension`
 *  resource.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedEvents;

/**
 *  Optional. Specifies the timeout for each individual message on the stream.
 *  The timeout must be between 10-1000 milliseconds. Required for Callout
 *  extensions.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Conditions under which this chain is invoked for a request.
 */
@interface GTLRNetworkServices_ExtensionChainMatchCondition : GTLRObject

/**
 *  Required. A Common Expression Language (CEL) expression that is used to
 *  match requests for which the extension chain is executed. For more
 *  information, see [CEL matcher language
 *  reference](https://cloud.google.com/service-extensions/docs/cel-matcher-language-reference).
 */
@property(nonatomic, copy, nullable) NSString *celExpression;

@end


/**
 *  Gateway represents the configuration for a proxy, typically a load balancer.
 *  It captures the ip:port over which the services are exposed by the proxy,
 *  along with any policy configurations. Routes have reference to to Gateways
 *  to dictate how requests should be routed by this Gateway. Next id: 33
 */
@interface GTLRNetworkServices_Gateway : GTLRObject

/**
 *  Optional. Zero or one IPv4 or IPv6 address on which the Gateway will receive
 *  the traffic. When no address is provided, an IP from the subnetwork is
 *  allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
 *  Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addresses;

/**
 *  Optional. A fully-qualified Certificates URL reference. The proxy presents a
 *  Certificate (selected based on SNI) when establishing a TLS connection. This
 *  feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certificateUrls;

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Determines if envoy will insert internal debug headers into
 *  upstream requests. Other Envoy headers may still be injected. By default,
 *  envoy will not insert any debug headers.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_Gateway_EnvoyHeaders_DebugHeaders Envoy will
 *        insert default internal debug headers into upstream requests:
 *        x-envoy-attempt-count x-envoy-is-timeout-retry
 *        x-envoy-expected-rq-timeout-ms x-envoy-original-path
 *        x-envoy-upstream-stream-duration-ms (Value: "DEBUG_HEADERS")
 *    @arg @c kGTLRNetworkServices_Gateway_EnvoyHeaders_EnvoyHeadersUnspecified
 *        Defaults to NONE. (Value: "ENVOY_HEADERS_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_Gateway_EnvoyHeaders_None Suppress envoy
 *        debug headers. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *envoyHeaders;

/**
 *  Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how
 *  a server should apply security policy to inbound (VM to Proxy) initiated
 *  connections. For example: `projects/ * /locations/ *
 *  /gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of
 *  type 'SECURE_WEB_GATEWAY'.
 */
@property(nonatomic, copy, nullable) NSString *gatewaySecurityPolicy;

/**
 *  Optional. The IP Version that will be used by this gateway. Valid options
 *  are IPV4 or IPV6. Default is IPV4.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_Gateway_IpVersion_Ipv4 The type for IP
 *        version 4. (Value: "IPV4")
 *    @arg @c kGTLRNetworkServices_Gateway_IpVersion_Ipv6 The type for IP
 *        version 6. (Value: "IPV6")
 *    @arg @c kGTLRNetworkServices_Gateway_IpVersion_IpVersionUnspecified The
 *        type when IP version is not specified. Defaults to IPV4. (Value:
 *        "IP_VERSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *ipVersion;

/** Optional. Set of label tags associated with the Gateway resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Gateway_Labels *labels;

/**
 *  Identifier. Name of the Gateway resource. It matches pattern `projects/ *
 *  /locations/ * /gateways/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The relative resource name identifying the VPC network that is
 *  using this configuration. For example: `projects/ *
 *  /global/networks/network-1`. Currently, this field is specific to gateways
 *  of type 'SECURE_WEB_GATEWAY'.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Required. One or more port numbers (1-65535), on which the Gateway will
 *  receive traffic. The proxy binds to the specified ports. Gateways of type
 *  'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH'
 *  listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ports;

/**
 *  Optional. The routing mode of the Gateway. This field is configurable only
 *  for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways
 *  of type SECURE_WEB_GATEWAY.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_Gateway_RoutingMode_ExplicitRoutingMode The
 *        routing mode is explicit; clients are configured to send traffic
 *        through the gateway. This is the default routing mode. (Value:
 *        "EXPLICIT_ROUTING_MODE")
 *    @arg @c kGTLRNetworkServices_Gateway_RoutingMode_NextHopRoutingMode The
 *        routing mode is next-hop. Clients are unaware of the gateway, and a
 *        route (advanced route or other route type) can be configured to direct
 *        traffic from client to gateway. The gateway then acts as a next-hop to
 *        the destination. (Value: "NEXT_HOP_ROUTING_MODE")
 */
@property(nonatomic, copy, nullable) NSString *routingMode;

/**
 *  Optional. Scope determines how configuration across multiple Gateway
 *  instances are merged. The configuration for multiple Gateway instances with
 *  the same scope will be merged as presented as a single coniguration to the
 *  proxy/load balancer. Max length 64 characters. Scope should start with a
 *  letter and can only have letters, numbers, hyphens.
 */
@property(nonatomic, copy, nullable) NSString *scope;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS
 *  traffic is terminated. If empty, TLS termination is disabled.
 */
@property(nonatomic, copy, nullable) NSString *serverTlsPolicy;

/**
 *  Optional. The relative resource name identifying the subnetwork in which
 *  this SWG is allocated. For example: `projects/ *
 *  /regions/us-central1/subnetworks/network-1` Currently, this field is
 *  specific to gateways of type 'SECURE_WEB_GATEWAY".
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/**
 *  Immutable. The type of the customer managed gateway. This field is required.
 *  If unspecified, an error is returned.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_Gateway_Type_OpenMesh The type of the
 *        customer managed gateway is TrafficDirector Open Mesh. (Value:
 *        "OPEN_MESH")
 *    @arg @c kGTLRNetworkServices_Gateway_Type_SecureWebGateway The type of the
 *        customer managed gateway is SecureWebGateway (SWG). (Value:
 *        "SECURE_WEB_GATEWAY")
 *    @arg @c kGTLRNetworkServices_Gateway_Type_TypeUnspecified The type of the
 *        customer managed gateway is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the Gateway resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_Gateway_Labels : GTLRObject
@end


/**
 *  GrpcRoute is the resource defining how gRPC traffic routed by a Mesh or
 *  Gateway resource is routed.
 */
@interface GTLRNetworkServices_GrpcRoute : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Gateways defines a list of gateways this GrpcRoute is attached to,
 *  as one of the routing rules to route the requests served by the gateway.
 *  Each gateway reference should match the pattern: `projects/ *
 *  /locations/global/gateways/`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gateways;

/**
 *  Required. Service hostnames with an optional port for which this route
 *  describes traffic. Format: [:] Hostname is the fully qualified domain name
 *  of a network host. This matches the RFC 1123 definition of a hostname with 2
 *  notable exceptions: - IPs are not allowed. - A hostname may be prefixed with
 *  a wildcard label (`*.`). The wildcard label must appear by itself as the
 *  first label. Hostname can be "precise" which is a domain name without the
 *  terminating dot of a network host (e.g. `foo.example.com`) or "wildcard",
 *  which is a domain name prefixed with a single wildcard label (e.g.
 *  `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist
 *  of lower case alphanumeric characters or '-', and must start and end with an
 *  alphanumeric character. No other punctuation is allowed. The routes
 *  associated with a Mesh or Gateway must have unique hostnames. If you attempt
 *  to attach multiple routes with conflicting hostnames, the configuration will
 *  be rejected. For example, while it is acceptable for routes for the
 *  hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same
 *  route, it is not possible to associate two routes both with `*.bar.com` or
 *  both with `bar.com`. If a port is specified, then gRPC clients must use the
 *  channel URI with the port to match this rule (i.e. "xds:///service:123"),
 *  otherwise they must supply the URI without a port (i.e. "xds:///service").
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *hostnames;

/** Optional. Set of label tags associated with the GrpcRoute resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRoute_Labels *labels;

/**
 *  Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as
 *  one of the routing rules to route the requests served by the mesh. Each mesh
 *  reference should match the pattern: `projects/ * /locations/global/meshes/`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *meshes;

/**
 *  Identifier. Name of the GrpcRoute resource. It matches pattern `projects/ *
 *  /locations/global/grpcRoutes/`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A list of detailed rules defining how to route traffic. Within a
 *  single GrpcRoute, the GrpcRoute.RouteAction associated with the first
 *  matching GrpcRoute.RouteRule will be executed. At least one rule must be
 *  supplied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_GrpcRouteRouteRule *> *rules;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the GrpcRoute resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_GrpcRoute_Labels : GTLRObject
@end


/**
 *  The destination to which traffic will be routed.
 */
@interface GTLRNetworkServices_GrpcRouteDestination : GTLRObject

/**
 *  Required. The URL of a destination service to which to route traffic. Must
 *  refer to either a BackendService or ServiceDirectoryService.
 */
@property(nonatomic, copy, nullable) NSString *serviceName;

/**
 *  Optional. Specifies the proportion of requests forwarded to the backend
 *  referenced by the serviceName field. This is computed as: -
 *  weight/Sum(weights in this destination list). For non-zero values, there may
 *  be some epsilon from the exact proportion defined here depending on the
 *  precision an implementation supports. If only one serviceName is specified
 *  and it has a weight greater than 0, 100% of the traffic is forwarded to that
 *  backend. If weights are specified for any one service name, they need to be
 *  specified for all of them. If weights are unspecified for all services,
 *  then, traffic is distributed in equal proportions to all of them.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  The specification for fault injection introduced into traffic to test the
 *  resiliency of clients to destination service failure. As part of fault
 *  injection, when clients send requests to a destination, delays can be
 *  introduced on a percentage of requests before sending those requests to the
 *  destination service. Similarly requests from clients can be aborted by for a
 *  percentage of requests.
 */
@interface GTLRNetworkServices_GrpcRouteFaultInjectionPolicy : GTLRObject

/** The specification for aborting to client requests. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteFaultInjectionPolicyAbort *abort;

/** The specification for injecting delay to client requests. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteFaultInjectionPolicyDelay *delay;

@end


/**
 *  Specification of how client requests are aborted as part of fault injection
 *  before being sent to a destination.
 */
@interface GTLRNetworkServices_GrpcRouteFaultInjectionPolicyAbort : GTLRObject

/**
 *  The HTTP status code used to abort the request. The value must be between
 *  200 and 599 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatus;

/**
 *  The percentage of traffic which will be aborted. The value must be between
 *  [0, 100]
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@end


/**
 *  Specification of how client requests are delayed as part of fault injection
 *  before being sent to a destination.
 */
@interface GTLRNetworkServices_GrpcRouteFaultInjectionPolicyDelay : GTLRObject

/** Specify a fixed delay before forwarding the request. */
@property(nonatomic, strong, nullable) GTLRDuration *fixedDelay;

/**
 *  The percentage of traffic on which delay will be injected. The value must be
 *  between [0, 100]
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@end


/**
 *  A match against a collection of headers.
 */
@interface GTLRNetworkServices_GrpcRouteHeaderMatch : GTLRObject

/** Required. The key of the header. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Optional. Specifies how to match against the value of the header. If not
 *  specified, a default value of EXACT is used.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_Exact Will only
 *        match the exact value provided. (Value: "EXACT")
 *    @arg @c kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_RegularExpression
 *        Will match paths conforming to the prefix specified by value. RE2
 *        syntax is supported. (Value: "REGULAR_EXPRESSION")
 *    @arg @c kGTLRNetworkServices_GrpcRouteHeaderMatch_Type_TypeUnspecified
 *        Unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Required. The value of the header. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Specifies a match against a method.
 */
@interface GTLRNetworkServices_GrpcRouteMethodMatch : GTLRObject

/**
 *  Optional. Specifies that matches are case sensitive. The default value is
 *  true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *caseSensitive;

/**
 *  Required. Name of the method to match against. If unspecified, will match
 *  all methods.
 */
@property(nonatomic, copy, nullable) NSString *grpcMethod;

/**
 *  Required. Name of the service to match against. If unspecified, will match
 *  all services.
 */
@property(nonatomic, copy, nullable) NSString *grpcService;

/**
 *  Optional. Specifies how to match against the name. If not specified, a
 *  default value of "EXACT" is used.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_GrpcRouteMethodMatch_Type_Exact Will only
 *        match the exact name provided. (Value: "EXACT")
 *    @arg @c kGTLRNetworkServices_GrpcRouteMethodMatch_Type_RegularExpression
 *        Will interpret grpc_method and grpc_service as regexes. RE2 syntax is
 *        supported. (Value: "REGULAR_EXPRESSION")
 *    @arg @c kGTLRNetworkServices_GrpcRouteMethodMatch_Type_TypeUnspecified
 *        Unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The specifications for retries. Specifies one or more conditions for which
 *  this retry rule applies. Valid values are:
 */
@interface GTLRNetworkServices_GrpcRouteRetryPolicy : GTLRObject

/**
 *  Specifies the allowed number of retries. This number must be > 0. If not
 *  specified, default to 1.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numRetries;

/**
 *  - connect-failure: Router will retry on failures connecting to Backend
 *  Services, for example due to connection timeouts. - refused-stream: Router
 *  will retry if the backend service resets the stream with a REFUSED_STREAM
 *  error code. This reset type indicates that it is safe to retry. - cancelled:
 *  Router will retry if the gRPC status code in the response header is set to
 *  cancelled - deadline-exceeded: Router will retry if the gRPC status code in
 *  the response header is set to deadline-exceeded - resource-exhausted: Router
 *  will retry if the gRPC status code in the response header is set to
 *  resource-exhausted - unavailable: Router will retry if the gRPC status code
 *  in the response header is set to unavailable
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *retryConditions;

@end


/**
 *  Specifies how to route matched traffic.
 */
@interface GTLRNetworkServices_GrpcRouteRouteAction : GTLRObject

/**
 *  Optional. The destination services to which traffic should be forwarded. If
 *  multiple destinations are specified, traffic will be split between Backend
 *  Service(s) according to the weight field of these destinations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_GrpcRouteDestination *> *destinations;

/**
 *  Optional. The specification for fault injection introduced into traffic to
 *  test the resiliency of clients to destination service failure. As part of
 *  fault injection, when clients send requests to a destination, delays can be
 *  introduced on a percentage of requests before sending those requests to the
 *  destination service. Similarly requests from clients can be aborted by for a
 *  percentage of requests. timeout and retry_policy will be ignored by clients
 *  that are configured with a fault_injection_policy
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteFaultInjectionPolicy *faultInjectionPolicy;

/**
 *  Optional. Specifies the idle timeout for the selected route. The idle
 *  timeout is defined as the period in which there are no bytes sent or
 *  received on either the upstream or downstream connection. If not set, the
 *  default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idleTimeout;

/** Optional. Specifies the retry policy associated with this route. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteRetryPolicy *retryPolicy;

/** Optional. Specifies cookie-based stateful session affinity. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteStatefulSessionAffinityPolicy *statefulSessionAffinity;

/**
 *  Optional. Specifies the timeout for selected route. Timeout is computed from
 *  the time the request has been fully processed (i.e. end of stream) up until
 *  the response has been completely processed. Timeout includes all retries.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Criteria for matching traffic. A RouteMatch will be considered to match when
 *  all supplied fields match.
 */
@interface GTLRNetworkServices_GrpcRouteRouteMatch : GTLRObject

/** Optional. Specifies a collection of headers to match. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_GrpcRouteHeaderMatch *> *headers;

/**
 *  Optional. A gRPC method to match against. If this field is empty or omitted,
 *  will match all methods.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteMethodMatch *method;

@end


/**
 *  Describes how to route traffic.
 */
@interface GTLRNetworkServices_GrpcRouteRouteRule : GTLRObject

/**
 *  Required. A detailed rule defining how to route traffic. This field is
 *  required.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_GrpcRouteRouteAction *action;

/**
 *  Optional. Matches define conditions used for matching the rule against
 *  incoming gRPC requests. Each match is independent, i.e. this rule will be
 *  matched if ANY one of the matches is satisfied. If no matches field is
 *  specified, this rule will unconditionally match traffic.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_GrpcRouteRouteMatch *> *matches;

@end


/**
 *  The specification for cookie-based stateful session affinity where the date
 *  plane supplies a “session cookie” with the name "GSSA" which encodes a
 *  specific destination host and each request containing that cookie will be
 *  directed to that host as long as the destination host remains up and
 *  healthy. The gRPC proxyless mesh library or sidecar proxy will manage the
 *  session cookie but the client application code is responsible for copying
 *  the cookie from each RPC in the session to the next.
 */
@interface GTLRNetworkServices_GrpcRouteStatefulSessionAffinityPolicy : GTLRObject

/**
 *  Required. The cookie TTL value for the Set-Cookie header generated by the
 *  data plane. The lifetime of the cookie may be set to a value from 1 to 86400
 *  seconds (24 hours) inclusive.
 */
@property(nonatomic, strong, nullable) GTLRDuration *cookieTtl;

@end


/**
 *  HttpRoute is the resource defining how HTTP traffic should be routed by a
 *  Mesh or Gateway resource.
 */
@interface GTLRNetworkServices_HttpRoute : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Gateways defines a list of gateways this HttpRoute is attached to,
 *  as one of the routing rules to route the requests served by the gateway.
 *  Each gateway reference should match the pattern: `projects/ *
 *  /locations/global/gateways/`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gateways;

/**
 *  Required. Hostnames define a set of hosts that should match against the HTTP
 *  host header to select a HttpRoute to process the request. Hostname is the
 *  fully qualified domain name of a network host, as defined by RFC 1123 with
 *  the exception that: - IPs are not allowed. - A hostname may be prefixed with
 *  a wildcard label (`*.`). The wildcard label must appear by itself as the
 *  first label. Hostname can be "precise" which is a domain name without the
 *  terminating dot of a network host (e.g. `foo.example.com`) or "wildcard",
 *  which is a domain name prefixed with a single wildcard label (e.g.
 *  `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist
 *  of lower case alphanumeric characters or '-', and must start and end with an
 *  alphanumeric character. No other punctuation is allowed. The routes
 *  associated with a Mesh or Gateways must have unique hostnames. If you
 *  attempt to attach multiple routes with conflicting hostnames, the
 *  configuration will be rejected. For example, while it is acceptable for
 *  routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated
 *  with the same Mesh (or Gateways under the same scope), it is not possible to
 *  associate two routes both with `*.bar.com` or both with `bar.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *hostnames;

/** Optional. Set of label tags associated with the HttpRoute resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRoute_Labels *labels;

/**
 *  Optional. Meshes defines a list of meshes this HttpRoute is attached to, as
 *  one of the routing rules to route the requests served by the mesh. Each mesh
 *  reference should match the pattern: `projects/ * /locations/global/meshes/`
 *  The attached Mesh should be of a type SIDECAR
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *meshes;

/**
 *  Identifier. Name of the HttpRoute resource. It matches pattern `projects/ *
 *  /locations/global/httpRoutes/http_route_name>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Rules that define how traffic is routed and handled. Rules will be
 *  matched sequentially based on the RouteMatch specified for the rule.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRouteRouteRule *> *rules;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the HttpRoute resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_HttpRoute_Labels : GTLRObject
@end


/**
 *  The Specification for allowing client side cross-origin requests.
 */
@interface GTLRNetworkServices_HttpRouteCorsPolicy : GTLRObject

/**
 *  In response to a preflight request, setting this to true indicates that the
 *  actual request can include user credentials. This translates to the
 *  Access-Control-Allow-Credentials header. Default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowCredentials;

/** Specifies the content for Access-Control-Allow-Headers header. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowHeaders;

/** Specifies the content for Access-Control-Allow-Methods header. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowMethods;

/**
 *  Specifies the regular expression patterns that match allowed origins. For
 *  regular expression grammar, please see
 *  https://github.com/google/re2/wiki/Syntax.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowOriginRegexes;

/**
 *  Specifies the list of origins that will be allowed to do CORS requests. An
 *  origin is allowed if it matches either an item in allow_origins or an item
 *  in allow_origin_regexes.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowOrigins;

/**
 *  If true, the CORS policy is disabled. The default value is false, which
 *  indicates that the CORS policy is in effect.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** Specifies the content for Access-Control-Expose-Headers header. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exposeHeaders;

/**
 *  Specifies how long result of a preflight request can be cached in seconds.
 *  This translates to the Access-Control-Max-Age header.
 */
@property(nonatomic, copy, nullable) NSString *maxAge;

@end


/**
 *  Specifications of a destination to which the request should be routed to.
 */
@interface GTLRNetworkServices_HttpRouteDestination : GTLRObject

/**
 *  Optional. The specification for modifying the headers of a matching request
 *  prior to delivery of the request to the destination. If HeaderModifiers are
 *  set on both the Destination and the RouteAction, they will be merged.
 *  Conflicts between the two will not be resolved on the configuration.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier *requestHeaderModifier;

/**
 *  Optional. The specification for modifying the headers of a response prior to
 *  sending the response back to the client. If HeaderModifiers are set on both
 *  the Destination and the RouteAction, they will be merged. Conflicts between
 *  the two will not be resolved on the configuration.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier *responseHeaderModifier;

/** The URL of a BackendService to route traffic to. */
@property(nonatomic, copy, nullable) NSString *serviceName;

/**
 *  Specifies the proportion of requests forwarded to the backend referenced by
 *  the serviceName field. This is computed as: - weight/Sum(weights in this
 *  destination list). For non-zero values, there may be some epsilon from the
 *  exact proportion defined here depending on the precision an implementation
 *  supports. If only one serviceName is specified and it has a weight greater
 *  than 0, 100% of the traffic is forwarded to that backend. If weights are
 *  specified for any one service name, they need to be specified for all of
 *  them. If weights are unspecified for all services, then, traffic is
 *  distributed in equal proportions to all of them.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  The specification for fault injection introduced into traffic to test the
 *  resiliency of clients to destination service failure. As part of fault
 *  injection, when clients send requests to a destination, delays can be
 *  introduced by client proxy on a percentage of requests before sending those
 *  requests to the destination service. Similarly requests can be aborted by
 *  client proxy for a percentage of requests.
 */
@interface GTLRNetworkServices_HttpRouteFaultInjectionPolicy : GTLRObject

/** The specification for aborting to client requests. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteFaultInjectionPolicyAbort *abort;

/** The specification for injecting delay to client requests. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteFaultInjectionPolicyDelay *delay;

@end


/**
 *  Specification of how client requests are aborted as part of fault injection
 *  before being sent to a destination.
 */
@interface GTLRNetworkServices_HttpRouteFaultInjectionPolicyAbort : GTLRObject

/**
 *  The HTTP status code used to abort the request. The value must be between
 *  200 and 599 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatus;

/**
 *  The percentage of traffic which will be aborted. The value must be between
 *  [0, 100]
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@end


/**
 *  Specification of how client requests are delayed as part of fault injection
 *  before being sent to a destination.
 */
@interface GTLRNetworkServices_HttpRouteFaultInjectionPolicyDelay : GTLRObject

/** Specify a fixed delay before forwarding the request. */
@property(nonatomic, strong, nullable) GTLRDuration *fixedDelay;

/**
 *  The percentage of traffic on which delay will be injected. The value must be
 *  between [0, 100]
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@end


/**
 *  Specifies how to select a route rule based on HTTP request headers.
 */
@interface GTLRNetworkServices_HttpRouteHeaderMatch : GTLRObject

/**
 *  The value of the header should match exactly the content of exact_match.
 */
@property(nonatomic, copy, nullable) NSString *exactMatch;

/** The name of the HTTP header to match against. */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  If specified, the match result will be inverted before checking. Default
 *  value is set to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertMatch;

/** The value of the header must start with the contents of prefix_match. */
@property(nonatomic, copy, nullable) NSString *prefixMatch;

/**
 *  A header with header_name must exist. The match takes place whether or not
 *  the header has a value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *presentMatch;

/**
 *  If specified, the rule will match if the request header value is within the
 *  range.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderMatchIntegerRange *rangeMatch;

/**
 *  The value of the header must match the regular expression specified in
 *  regex_match. For regular expression grammar, please see:
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *regexMatch;

/** The value of the header must end with the contents of suffix_match. */
@property(nonatomic, copy, nullable) NSString *suffixMatch;

@end


/**
 *  Represents an integer value range.
 */
@interface GTLRNetworkServices_HttpRouteHeaderMatchIntegerRange : GTLRObject

/**
 *  End of the range (exclusive)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Start of the range (inclusive)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  The specification for modifying HTTP header in HTTP request and HTTP
 *  response.
 */
@interface GTLRNetworkServices_HttpRouteHeaderModifier : GTLRObject

/**
 *  Add the headers with given map where key is the name of the header, value is
 *  the value of the header.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier_Add *add;

/** Remove headers (matching by header names) specified in the list. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *remove;

/**
 *  Completely overwrite/replace the headers with given map where key is the
 *  name of the header, value is the value of the header.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier_Set *set;

@end


/**
 *  Add the headers with given map where key is the name of the header, value is
 *  the value of the header.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_HttpRouteHeaderModifier_Add : GTLRObject
@end


/**
 *  Completely overwrite/replace the headers with given map where key is the
 *  name of the header, value is the value of the header.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_HttpRouteHeaderModifier_Set : GTLRObject
@end


/**
 *  Static HTTP response object to be returned.
 */
@interface GTLRNetworkServices_HttpRouteHttpDirectResponse : GTLRObject

/**
 *  Optional. Response body as bytes. Maximum body size is 4096B.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *bytesBody;

/**
 *  Required. Status to return as part of HTTP Response. Must be a positive
 *  integer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  Optional. Response body as a string. Maximum body length is 1024 characters.
 */
@property(nonatomic, copy, nullable) NSString *stringBody;

@end


/**
 *  Specifications to match a query parameter in the request.
 */
@interface GTLRNetworkServices_HttpRouteQueryParameterMatch : GTLRObject

/**
 *  The value of the query parameter must exactly match the contents of
 *  exact_match. Only one of exact_match, regex_match, or present_match must be
 *  set.
 */
@property(nonatomic, copy, nullable) NSString *exactMatch;

/**
 *  Specifies that the QueryParameterMatcher matches if request contains query
 *  parameter, irrespective of whether the parameter has a value or not. Only
 *  one of exact_match, regex_match, or present_match must be set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *presentMatch;

/** The name of the query parameter to match. */
@property(nonatomic, copy, nullable) NSString *queryParameter;

/**
 *  The value of the query parameter must match the regular expression specified
 *  by regex_match. For regular expression grammar, please see
 *  https://github.com/google/re2/wiki/Syntax Only one of exact_match,
 *  regex_match, or present_match must be set.
 */
@property(nonatomic, copy, nullable) NSString *regexMatch;

@end


/**
 *  The specification for redirecting traffic.
 */
@interface GTLRNetworkServices_HttpRouteRedirect : GTLRObject

/**
 *  The host that will be used in the redirect response instead of the one that
 *  was supplied in the request.
 */
@property(nonatomic, copy, nullable) NSString *hostRedirect;

/**
 *  If set to true, the URL scheme in the redirected request is set to https. If
 *  set to false, the URL scheme of the redirected request will remain the same
 *  as that of the request. The default is set to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpsRedirect;

/**
 *  The path that will be used in the redirect response instead of the one that
 *  was supplied in the request. path_redirect can not be supplied together with
 *  prefix_redirect. Supply one alone or neither. If neither is supplied, the
 *  path of the original request will be used for the redirect.
 */
@property(nonatomic, copy, nullable) NSString *pathRedirect;

/**
 *  The port that will be used in the redirected request instead of the one that
 *  was supplied in the request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *portRedirect;

/**
 *  Indicates that during redirection, the matched prefix (or path) should be
 *  swapped with this value. This option allows URLs be dynamically created
 *  based on the request.
 */
@property(nonatomic, copy, nullable) NSString *prefixRewrite;

/**
 *  The HTTP Status code to use for the redirect.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_Found
 *        Corresponds to 302. (Value: "FOUND")
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_MovedPermanentlyDefault
 *        Corresponds to 301. (Value: "MOVED_PERMANENTLY_DEFAULT")
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_PermanentRedirect
 *        Corresponds to 308. In this case, the request method will be retained.
 *        (Value: "PERMANENT_REDIRECT")
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_ResponseCodeUnspecified
 *        Default value (Value: "RESPONSE_CODE_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_SeeOther
 *        Corresponds to 303. (Value: "SEE_OTHER")
 *    @arg @c kGTLRNetworkServices_HttpRouteRedirect_ResponseCode_TemporaryRedirect
 *        Corresponds to 307. In this case, the request method will be retained.
 *        (Value: "TEMPORARY_REDIRECT")
 */
@property(nonatomic, copy, nullable) NSString *responseCode;

/**
 *  if set to true, any accompanying query portion of the original URL is
 *  removed prior to redirecting the request. If set to false, the query portion
 *  of the original URL is retained. The default is set to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stripQuery;

@end


/**
 *  Specifies the policy on how requests are shadowed to a separate mirrored
 *  destination service. The proxy does not wait for responses from the shadow
 *  service. Prior to sending traffic to the shadow service, the host/authority
 *  header is suffixed with -shadow.
 */
@interface GTLRNetworkServices_HttpRouteRequestMirrorPolicy : GTLRObject

/**
 *  The destination the requests will be mirrored to. The weight of the
 *  destination will be ignored.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteDestination *destination;

/**
 *  Optional. The percentage of requests to get mirrored to the desired
 *  destination.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mirrorPercent;

@end


/**
 *  The specifications for retries.
 */
@interface GTLRNetworkServices_HttpRouteRetryPolicy : GTLRObject

/**
 *  Specifies the allowed number of retries. This number must be > 0. If not
 *  specified, default to 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numRetries;

/** Specifies a non-zero timeout per retry attempt. */
@property(nonatomic, strong, nullable) GTLRDuration *perTryTimeout;

/**
 *  Specifies one or more conditions when this retry policy applies. Valid
 *  values are: 5xx: Proxy will attempt a retry if the destination service
 *  responds with any 5xx response code, of if the destination service does not
 *  respond at all, example: disconnect, reset, read timeout, connection failure
 *  and refused streams. gateway-error: Similar to 5xx, but only applies to
 *  response codes 502, 503, 504. reset: Proxy will attempt a retry if the
 *  destination service does not respond at all (disconnect/reset/read timeout)
 *  connect-failure: Proxy will retry on failures connecting to destination for
 *  example due to connection timeouts. retriable-4xx: Proxy will retry fro
 *  retriable 4xx response codes. Currently the only retriable error supported
 *  is 409. refused-stream: Proxy will retry if the destination resets the
 *  stream with a REFUSED_STREAM error code. This reset type indicates that it
 *  is safe to retry.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *retryConditions;

@end


/**
 *  The specifications for routing traffic and applying associated policies.
 */
@interface GTLRNetworkServices_HttpRouteRouteAction : GTLRObject

/** The specification for allowing client side cross-origin requests. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteCorsPolicy *corsPolicy;

/** The destination to which traffic should be forwarded. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRouteDestination *> *destinations;

/**
 *  Optional. Static HTTP Response object to be returned regardless of the
 *  request.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHttpDirectResponse *directResponse;

/**
 *  The specification for fault injection introduced into traffic to test the
 *  resiliency of clients to backend service failure. As part of fault
 *  injection, when clients send requests to a backend service, delays can be
 *  introduced on a percentage of requests before sending those requests to the
 *  backend service. Similarly requests from clients can be aborted for a
 *  percentage of requests. timeout and retry_policy will be ignored by clients
 *  that are configured with a fault_injection_policy
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteFaultInjectionPolicy *faultInjectionPolicy;

/**
 *  Optional. Specifies the idle timeout for the selected route. The idle
 *  timeout is defined as the period in which there are no bytes sent or
 *  received on either the upstream or downstream connection. If not set, the
 *  default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idleTimeout;

/** If set, the request is directed as configured by this field. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteRedirect *redirect;

/**
 *  The specification for modifying the headers of a matching request prior to
 *  delivery of the request to the destination. If HeaderModifiers are set on
 *  both the Destination and the RouteAction, they will be merged. Conflicts
 *  between the two will not be resolved on the configuration.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier *requestHeaderModifier;

/**
 *  Specifies the policy on how requests intended for the routes destination are
 *  shadowed to a separate mirrored destination. Proxy will not wait for the
 *  shadow destination to respond before returning the response. Prior to
 *  sending traffic to the shadow service, the host/authority header is suffixed
 *  with -shadow.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteRequestMirrorPolicy *requestMirrorPolicy;

/**
 *  The specification for modifying the headers of a response prior to sending
 *  the response back to the client. If HeaderModifiers are set on both the
 *  Destination and the RouteAction, they will be merged. Conflicts between the
 *  two will not be resolved on the configuration.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteHeaderModifier *responseHeaderModifier;

/** Specifies the retry policy associated with this route. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteRetryPolicy *retryPolicy;

/** Optional. Specifies cookie-based stateful session affinity. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteStatefulSessionAffinityPolicy *statefulSessionAffinity;

/**
 *  Specifies the timeout for selected route. Timeout is computed from the time
 *  the request has been fully processed (i.e. end of stream) up until the
 *  response has been completely processed. Timeout includes all retries.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  The specification for rewrite URL before forwarding requests to the
 *  destination.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteURLRewrite *urlRewrite;

@end


/**
 *  RouteMatch defines specifications used to match requests. If multiple match
 *  types are set, this RouteMatch will match if ALL type of matches are
 *  matched.
 */
@interface GTLRNetworkServices_HttpRouteRouteMatch : GTLRObject

/**
 *  The HTTP request path value should exactly match this value. Only one of
 *  full_path_match, prefix_match, or regex_match should be used.
 */
@property(nonatomic, copy, nullable) NSString *fullPathMatch;

/**
 *  Specifies a list of HTTP request headers to match against. ALL of the
 *  supplied headers must be matched.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRouteHeaderMatch *> *headers;

/**
 *  Specifies if prefix_match and full_path_match matches are case sensitive.
 *  The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreCase;

/**
 *  The HTTP request path value must begin with specified prefix_match.
 *  prefix_match must begin with a /. Only one of full_path_match, prefix_match,
 *  or regex_match should be used.
 */
@property(nonatomic, copy, nullable) NSString *prefixMatch;

/**
 *  Specifies a list of query parameters to match against. ALL of the query
 *  parameters must be matched.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRouteQueryParameterMatch *> *queryParameters;

/**
 *  The HTTP request path value must satisfy the regular expression specified by
 *  regex_match after removing any query parameters and anchor supplied with the
 *  original URL. For regular expression grammar, please see
 *  https://github.com/google/re2/wiki/Syntax Only one of full_path_match,
 *  prefix_match, or regex_match should be used.
 */
@property(nonatomic, copy, nullable) NSString *regexMatch;

@end


/**
 *  Specifies how to match traffic and how to route traffic when traffic is
 *  matched.
 */
@interface GTLRNetworkServices_HttpRouteRouteRule : GTLRObject

/** The detailed rule defining how to route matched traffic. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_HttpRouteRouteAction *action;

/**
 *  A list of matches define conditions used for matching the rule against
 *  incoming HTTP requests. Each match is independent, i.e. this rule will be
 *  matched if ANY one of the matches is satisfied. If no matches field is
 *  specified, this rule will unconditionally match traffic. If a default rule
 *  is desired to be configured, add a rule with no matches specified to the end
 *  of the rules list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRouteRouteMatch *> *matches;

@end


/**
 *  The specification for cookie-based stateful session affinity where the date
 *  plane supplies a “session cookie” with the name "GSSA" which encodes a
 *  specific destination host and each request containing that cookie will be
 *  directed to that host as long as the destination host remains up and
 *  healthy. The gRPC proxyless mesh library or sidecar proxy will manage the
 *  session cookie but the client application code is responsible for copying
 *  the cookie from each RPC in the session to the next.
 */
@interface GTLRNetworkServices_HttpRouteStatefulSessionAffinityPolicy : GTLRObject

/**
 *  Required. The cookie TTL value for the Set-Cookie header generated by the
 *  data plane. The lifetime of the cookie may be set to a value from 1 to 86400
 *  seconds (24 hours) inclusive.
 */
@property(nonatomic, strong, nullable) GTLRDuration *cookieTtl;

@end


/**
 *  The specification for modifying the URL of the request, prior to forwarding
 *  the request to the destination.
 */
@interface GTLRNetworkServices_HttpRouteURLRewrite : GTLRObject

/**
 *  Prior to forwarding the request to the selected destination, the requests
 *  host header is replaced by this value.
 */
@property(nonatomic, copy, nullable) NSString *hostRewrite;

/**
 *  Prior to forwarding the request to the selected destination, the matching
 *  portion of the requests path is replaced by this value.
 */
@property(nonatomic, copy, nullable) NSString *pathPrefixRewrite;

@end


/**
 *  `LbRouteExtension` is a resource that lets you control where traffic is
 *  routed to for a given request.
 */
@interface GTLRNetworkServices_LbRouteExtension : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A human-readable description of the resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. A set of ordered extension chains that contain the match
 *  conditions and extensions to execute. Match conditions for each extension
 *  chain are evaluated in sequence for a given request. The first extension
 *  chain that has a condition that matches the request is executed. Any
 *  subsequent extension chains do not execute. Limited to 5 extension chains
 *  per resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_ExtensionChain *> *extensionChains;

/**
 *  Required. A list of references to the forwarding rules to which this service
 *  extension is attached to. At least one forwarding rule is required. There
 *  can be only one `LbRouteExtension` resource per forwarding rule.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *forwardingRules;

/**
 *  Optional. Set of labels associated with the `LbRouteExtension` resource. The
 *  format must comply with [the requirements for
 *  labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
 *  for Google Cloud resources.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_LbRouteExtension_Labels *labels;

/**
 *  Required. All backend services and forwarding rules referenced by this
 *  extension must share the same load balancing scheme. Supported values:
 *  `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
 *  [Choosing a load
 *  balancer](https://cloud.google.com/load-balancing/docs/backend-service).
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_ExternalManaged
 *        Signifies that this is used for External Managed HTTP(S) Load
 *        Balancing. (Value: "EXTERNAL_MANAGED")
 *    @arg @c kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_InternalManaged
 *        Signifies that this is used for Internal HTTP(S) Load Balancing.
 *        (Value: "INTERNAL_MANAGED")
 *    @arg @c kGTLRNetworkServices_LbRouteExtension_LoadBalancingScheme_LoadBalancingSchemeUnspecified
 *        Default value. Do not use. (Value:
 *        "LOAD_BALANCING_SCHEME_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *loadBalancingScheme;

/**
 *  Optional. The metadata provided here is included as part of the
 *  `metadata_context` (of type `google.protobuf.Struct`) in the
 *  `ProcessingRequest` message sent to the extension server. The metadata is
 *  available under the namespace `com.google.lb_route_extension.`. The
 *  following variables are supported in the metadata Struct:
 *  `{forwarding_rule_id}` - substituted with the forwarding rule's fully
 *  qualified resource name. Only one of the resource level metadata and
 *  extension level metadata can be set.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_LbRouteExtension_Metadata *metadata;

/**
 *  Required. Identifier. Name of the `LbRouteExtension` resource in the
 *  following format:
 *  `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of labels associated with the `LbRouteExtension` resource. The
 *  format must comply with [the requirements for
 *  labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
 *  for Google Cloud resources.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_LbRouteExtension_Labels : GTLRObject
@end


/**
 *  Optional. The metadata provided here is included as part of the
 *  `metadata_context` (of type `google.protobuf.Struct`) in the
 *  `ProcessingRequest` message sent to the extension server. The metadata is
 *  available under the namespace `com.google.lb_route_extension.`. The
 *  following variables are supported in the metadata Struct:
 *  `{forwarding_rule_id}` - substituted with the forwarding rule's fully
 *  qualified resource name. Only one of the resource level metadata and
 *  extension level metadata can be set.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_LbRouteExtension_Metadata : GTLRObject
@end


/**
 *  `LbTrafficExtension` is a resource that lets the extension service modify
 *  the headers and payloads of both requests and responses without impacting
 *  the choice of backend services or any other security policies associated
 *  with the backend service.
 */
@interface GTLRNetworkServices_LbTrafficExtension : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A human-readable description of the resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. A set of ordered extension chains that contain the match
 *  conditions and extensions to execute. Match conditions for each extension
 *  chain are evaluated in sequence for a given request. The first extension
 *  chain that has a condition that matches the request is executed. Any
 *  subsequent extension chains do not execute. Limited to 5 extension chains
 *  per resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_ExtensionChain *> *extensionChains;

/**
 *  Required. A list of references to the forwarding rules to which this service
 *  extension is attached to. At least one forwarding rule is required. There
 *  can be only one `LBTrafficExtension` resource per forwarding rule.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *forwardingRules;

/**
 *  Optional. Set of labels associated with the `LbTrafficExtension` resource.
 *  The format must comply with [the requirements for
 *  labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
 *  for Google Cloud resources.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_LbTrafficExtension_Labels *labels;

/**
 *  Required. All backend services and forwarding rules referenced by this
 *  extension must share the same load balancing scheme. Supported values:
 *  `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
 *  [Choosing a load
 *  balancer](https://cloud.google.com/load-balancing/docs/backend-service).
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_ExternalManaged
 *        Signifies that this is used for External Managed HTTP(S) Load
 *        Balancing. (Value: "EXTERNAL_MANAGED")
 *    @arg @c kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_InternalManaged
 *        Signifies that this is used for Internal HTTP(S) Load Balancing.
 *        (Value: "INTERNAL_MANAGED")
 *    @arg @c kGTLRNetworkServices_LbTrafficExtension_LoadBalancingScheme_LoadBalancingSchemeUnspecified
 *        Default value. Do not use. (Value:
 *        "LOAD_BALANCING_SCHEME_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *loadBalancingScheme;

/**
 *  Optional. The metadata provided here is included in the
 *  `ProcessingRequest.metadata_context.filter_metadata` map field. The metadata
 *  is available under the key `com.google.lb_traffic_extension.`. The following
 *  variables are supported in the metadata: `{forwarding_rule_id}` -
 *  substituted with the forwarding rule's fully qualified resource name. Only
 *  one of the resource level metadata and extension level metadata can be set.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_LbTrafficExtension_Metadata *metadata;

/**
 *  Required. Identifier. Name of the `LbTrafficExtension` resource in the
 *  following format:
 *  `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of labels associated with the `LbTrafficExtension` resource.
 *  The format must comply with [the requirements for
 *  labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
 *  for Google Cloud resources.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_LbTrafficExtension_Labels : GTLRObject
@end


/**
 *  Optional. The metadata provided here is included in the
 *  `ProcessingRequest.metadata_context.filter_metadata` map field. The metadata
 *  is available under the key `com.google.lb_traffic_extension.`. The following
 *  variables are supported in the metadata: `{forwarding_rule_id}` -
 *  substituted with the forwarding rule's fully qualified resource name. Only
 *  one of the resource level metadata and extension level metadata can be set.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_LbTrafficExtension_Metadata : GTLRObject
@end


/**
 *  Response returned by the ListEndpointPolicies method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "endpointPolicies" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRNetworkServices_ListEndpointPoliciesResponse : GTLRCollectionObject

/**
 *  List of EndpointPolicy resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_EndpointPolicy *> *endpointPolicies;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response returned by the ListGateways method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gateways" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListGatewaysResponse : GTLRCollectionObject

/**
 *  List of Gateway resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Gateway *> *gateways;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response returned by the ListGrpcRoutes method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "grpcRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListGrpcRoutesResponse : GTLRCollectionObject

/**
 *  List of GrpcRoute resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_GrpcRoute *> *grpcRoutes;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response returned by the ListHttpRoutes method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "httpRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListHttpRoutesResponse : GTLRCollectionObject

/**
 *  List of HttpRoute resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_HttpRoute *> *httpRoutes;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Message for response to listing `LbRouteExtension` resources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "lbRouteExtensions" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRNetworkServices_ListLbRouteExtensionsResponse : GTLRCollectionObject

/**
 *  The list of `LbRouteExtension` resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_LbRouteExtension *> *lbRouteExtensions;

/** A token identifying a page of results that the server returns. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for response to listing `LbTrafficExtension` resources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "lbTrafficExtensions" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRNetworkServices_ListLbTrafficExtensionsResponse : GTLRCollectionObject

/**
 *  The list of `LbTrafficExtension` resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_LbTrafficExtension *> *lbTrafficExtensions;

/** A token identifying a page of results that the server returns. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response returned by the ListMeshes method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "meshes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListMeshesResponse : GTLRCollectionObject

/**
 *  List of Mesh resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Mesh *> *meshes;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Operation *> *operations;

@end


/**
 *  Response returned by the ListServiceBindings method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "serviceBindings" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRNetworkServices_ListServiceBindingsResponse : GTLRCollectionObject

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of ServiceBinding resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_ServiceBinding *> *serviceBindings;

@end


/**
 *  Response returned by the ListServiceLbPolicies method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "serviceLbPolicies" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRNetworkServices_ListServiceLbPoliciesResponse : GTLRCollectionObject

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of ServiceLbPolicy resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_ServiceLbPolicy *> *serviceLbPolicies;

@end


/**
 *  Response returned by the ListTcpRoutes method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tcpRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListTcpRoutesResponse : GTLRCollectionObject

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of TcpRoute resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TcpRoute *> *tcpRoutes;

@end


/**
 *  Response returned by the ListTlsRoutes method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tlsRoutes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkServices_ListTlsRoutesResponse : GTLRCollectionObject

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of TlsRoute resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TlsRoute *> *tlsRoutes;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRNetworkServices_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_Location_Metadata : GTLRObject
@end


/**
 *  The configuration for Platform Telemetry logging for Eventarc Avdvanced
 *  resources.
 */
@interface GTLRNetworkServices_LoggingConfig : GTLRObject

/**
 *  Optional. The minimum severity of logs that will be sent to
 *  Stackdriver/Platform Telemetry. Logs at severitiy ≥ this value will be sent,
 *  unless it is NONE.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Alert A person must
 *        take action immediately. (Value: "ALERT")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Critical Critical
 *        events cause more severe problems or outages. (Value: "CRITICAL")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Debug Debug or
 *        trace level logging. (Value: "DEBUG")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Emergency One or
 *        more systems are unusable. (Value: "EMERGENCY")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Error Error events
 *        are likely to cause problems. (Value: "ERROR")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Info Routine
 *        information, such as ongoing status or performance. (Value: "INFO")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_LogSeverityUnspecified
 *        Log severity is not specified. This value is treated the same as NONE,
 *        but is used to distinguish between no update and update to NONE in
 *        update_masks. (Value: "LOG_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_None Default value
 *        at resource creation, presence of this value must be treated as no
 *        logging/disable logging. (Value: "NONE")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Notice Normal but
 *        significant events, such as start up, shut down, or a configuration
 *        change. (Value: "NOTICE")
 *    @arg @c kGTLRNetworkServices_LoggingConfig_LogSeverity_Warning Warning
 *        events might cause problems. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *logSeverity;

@end


/**
 *  Mesh represents a logical configuration grouping for workload to workload
 *  communication within a service mesh. Routes that point to mesh dictate how
 *  requests are routed within this logical mesh boundary.
 */
@interface GTLRNetworkServices_Mesh : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Determines if envoy will insert internal debug headers into
 *  upstream requests. Other Envoy headers may still be injected. By default,
 *  envoy will not insert any debug headers.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_Mesh_EnvoyHeaders_DebugHeaders Envoy will
 *        insert default internal debug headers into upstream requests:
 *        x-envoy-attempt-count x-envoy-is-timeout-retry
 *        x-envoy-expected-rq-timeout-ms x-envoy-original-path
 *        x-envoy-upstream-stream-duration-ms (Value: "DEBUG_HEADERS")
 *    @arg @c kGTLRNetworkServices_Mesh_EnvoyHeaders_EnvoyHeadersUnspecified
 *        Defaults to NONE. (Value: "ENVOY_HEADERS_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_Mesh_EnvoyHeaders_None Suppress envoy debug
 *        headers. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *envoyHeaders;

/**
 *  Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy
 *  to listen on the specified port of localhost (127.0.0.1) address. The
 *  SIDECAR proxy will expect all traffic to be redirected to this port
 *  regardless of its actual ip:port destination. If unset, a port '15001' is
 *  used as the interception port. This is applicable only for sidecar proxy
 *  deployments.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interceptionPort;

/** Optional. Set of label tags associated with the Mesh resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Mesh_Labels *labels;

/**
 *  Identifier. Name of the Mesh resource. It matches pattern `projects/ *
 *  /locations/global/meshes/`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the Mesh resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_Mesh_Labels : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRNetworkServices_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRNetworkServices_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRNetworkServices_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  GTLRNetworkServices_RetryFilterPerRouteConfig
 */
@interface GTLRNetworkServices_RetryFilterPerRouteConfig : GTLRObject

/** The name of the crypto key to use for encrypting event data. */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

@end


/**
 *  ServiceBinding is the resource that defines a Service Directory Service to
 *  be used in a BackendService resource.
 */
@interface GTLRNetworkServices_ServiceBinding : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Set of label tags associated with the ServiceBinding resource.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_ServiceBinding_Labels *labels;

/**
 *  Identifier. Name of the ServiceBinding resource. It matches pattern
 *  `projects/ * /locations/global/serviceBindings/service_binding_name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The full Service Directory Service name of the format projects/ *
 *  /locations/ * /namespaces/ * /services/ *
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Output only. The unique identifier of the Service Directory Service against
 *  which the Service Binding resource is validated. This is populated when the
 *  Service Binding resource is used in another resource (like Backend Service).
 *  This is of the UUID4 format.
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the ServiceBinding resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_ServiceBinding_Labels : GTLRObject
@end


/**
 *  ServiceLbPolicy holds global load balancing and traffic distribution
 *  configuration that can be applied to a BackendService.
 */
@interface GTLRNetworkServices_ServiceLbPolicy : GTLRObject

/**
 *  Optional. Configuration to automatically move traffic away for unhealthy
 *  IG/NEG for the associated Backend Service.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_ServiceLbPolicyAutoCapacityDrain *autoCapacityDrain;

/** Output only. The timestamp when this resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. Configuration related to health based failover. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_ServiceLbPolicyFailoverConfig *failoverConfig;

/**
 *  Optional. Set of label tags associated with the ServiceLbPolicy resource.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_ServiceLbPolicy_Labels *labels;

/**
 *  Optional. The type of load balancing algorithm to be used. The default
 *  behavior is WATERFALL_BY_REGION.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_LoadBalancingAlgorithmUnspecified
 *        The type of the loadbalancing algorithm is unspecified. (Value:
 *        "LOAD_BALANCING_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_SprayToRegion
 *        Direct traffic to the nearest region with endpoints and capacity
 *        before spilling over to other regions and spread the traffic from each
 *        client to all the MIGs/NEGs in a region. (Value: "SPRAY_TO_REGION")
 *    @arg @c kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_SprayToWorld
 *        Balance traffic across all backends across the world proportionally
 *        based on capacity. (Value: "SPRAY_TO_WORLD")
 *    @arg @c kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_WaterfallByRegion
 *        Direct traffic to the nearest region with endpoints and capacity
 *        before spilling over to other regions. All MIGs/NEGs within a region
 *        are evenly loaded but each client might not spread the traffic to all
 *        the MIGs/NEGs in the region. (Value: "WATERFALL_BY_REGION")
 *    @arg @c kGTLRNetworkServices_ServiceLbPolicy_LoadBalancingAlgorithm_WaterfallByZone
 *        Attempt to keep traffic in a single zone closest to the client, before
 *        spilling over to other zones. (Value: "WATERFALL_BY_ZONE")
 */
@property(nonatomic, copy, nullable) NSString *loadBalancingAlgorithm;

/**
 *  Required. Name of the ServiceLbPolicy resource. It matches pattern
 *  `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The timestamp when this resource was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the ServiceLbPolicy resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_ServiceLbPolicy_Labels : GTLRObject
@end


/**
 *  Option to specify if an unhealthy IG/NEG should be considered for global
 *  load balancing and traffic routing.
 */
@interface GTLRNetworkServices_ServiceLbPolicyAutoCapacityDrain : GTLRObject

/**
 *  Optional. If set to 'True', an unhealthy IG/NEG will be set as drained. - An
 *  IG/NEG is considered unhealthy if less than 25% of the instances/endpoints
 *  in the IG/NEG are healthy. - This option will never result in draining more
 *  than 50% of the configured IGs/NEGs for the Backend Service.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enable;

@end


/**
 *  Option to specify health based failover behavior. This is not related to
 *  Network load balancer FailoverPolicy.
 */
@interface GTLRNetworkServices_ServiceLbPolicyFailoverConfig : GTLRObject

/**
 *  Optional. The percentage threshold that a load balancer will begin to send
 *  traffic to failover backends. If the percentage of endpoints in a MIG/NEG is
 *  smaller than this value, traffic would be sent to failover backends if
 *  possible. This field should be set to a value between 1 and 99. The default
 *  value is 50 for Global external HTTP(S) load balancer (classic) and
 *  Proxyless service mesh, and 70 for others.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failoverHealthThreshold;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRNetworkServices_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRNetworkServices_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRNetworkServices_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRNetworkServices_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkServices_Status_Details_Item : GTLRObject
@end


/**
 *  TcpRoute is the resource defining how TCP traffic should be routed by a
 *  Mesh/Gateway resource.
 */
@interface GTLRNetworkServices_TcpRoute : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Gateways defines a list of gateways this TcpRoute is attached to,
 *  as one of the routing rules to route the requests served by the gateway.
 *  Each gateway reference should match the pattern: `projects/ *
 *  /locations/global/gateways/`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gateways;

/** Optional. Set of label tags associated with the TcpRoute resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_TcpRoute_Labels *labels;

/**
 *  Optional. Meshes defines a list of meshes this TcpRoute is attached to, as
 *  one of the routing rules to route the requests served by the mesh. Each mesh
 *  reference should match the pattern: `projects/ * /locations/global/meshes/`
 *  The attached Mesh should be of a type SIDECAR
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *meshes;

/**
 *  Identifier. Name of the TcpRoute resource. It matches pattern `projects/ *
 *  /locations/global/tcpRoutes/tcp_route_name>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Rules that define how traffic is routed and handled. At least one
 *  RouteRule must be supplied. If there are multiple rules then the action
 *  taken will be the first rule to match.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TcpRouteRouteRule *> *rules;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the TcpRoute resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_TcpRoute_Labels : GTLRObject
@end


/**
 *  The specifications for routing traffic and applying associated policies.
 */
@interface GTLRNetworkServices_TcpRouteRouteAction : GTLRObject

/**
 *  Optional. The destination services to which traffic should be forwarded. At
 *  least one destination service is required. Only one of route destination or
 *  original destination can be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TcpRouteRouteDestination *> *destinations;

/**
 *  Optional. Specifies the idle timeout for the selected route. The idle
 *  timeout is defined as the period in which there are no bytes sent or
 *  received on either the upstream or downstream connection. If not set, the
 *  default idle timeout is 30 seconds. If set to 0s, the timeout will be
 *  disabled.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idleTimeout;

/**
 *  Optional. If true, Router will use the destination IP and port of the
 *  original connection as the destination of the request. Default is false.
 *  Only one of route destinations or original destination can be set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *originalDestination;

@end


/**
 *  Describe the destination for traffic to be routed to.
 */
@interface GTLRNetworkServices_TcpRouteRouteDestination : GTLRObject

/** Required. The URL of a BackendService to route traffic to. */
@property(nonatomic, copy, nullable) NSString *serviceName;

/**
 *  Optional. Specifies the proportion of requests forwarded to the backend
 *  referenced by the serviceName field. This is computed as: -
 *  weight/Sum(weights in this destination list). For non-zero values, there may
 *  be some epsilon from the exact proportion defined here depending on the
 *  precision an implementation supports. If only one serviceName is specified
 *  and it has a weight greater than 0, 100% of the traffic is forwarded to that
 *  backend. If weights are specified for any one service name, they need to be
 *  specified for all of them. If weights are unspecified for all services,
 *  then, traffic is distributed in equal proportions to all of them.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  RouteMatch defines the predicate used to match requests to a given action.
 *  Multiple match types are "OR"ed for evaluation. If no routeMatch field is
 *  specified, this rule will unconditionally match traffic.
 */
@interface GTLRNetworkServices_TcpRouteRouteMatch : GTLRObject

/**
 *  Required. Must be specified in the CIDR range format. A CIDR range consists
 *  of an IP Address and a prefix length to construct the subnet mask. By
 *  default, the prefix length is 32 (i.e. matches a single IP address). Only
 *  IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this
 *  exact IP address. "10.0.0.0/8" - matches against any IP address within the
 *  10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP
 *  address'.
 */
@property(nonatomic, copy, nullable) NSString *address;

/** Required. Specifies the destination port to match against. */
@property(nonatomic, copy, nullable) NSString *port;

@end


/**
 *  Specifies how to match traffic and how to route traffic when traffic is
 *  matched.
 */
@interface GTLRNetworkServices_TcpRouteRouteRule : GTLRObject

/** Required. The detailed rule defining how to route matched traffic. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_TcpRouteRouteAction *action;

/**
 *  Optional. RouteMatch defines the predicate used to match requests to a given
 *  action. Multiple match types are "OR"ed for evaluation. If no routeMatch
 *  field is specified, this rule will unconditionally match traffic.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TcpRouteRouteMatch *> *matches;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRNetworkServices_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRNetworkServices_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  TlsRoute defines how traffic should be routed based on SNI and other
 *  matching L3 attributes.
 */
@interface GTLRNetworkServices_TlsRoute : GTLRObject

/** Output only. The timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. A free-text description of the resource. Max length 1024
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Gateways defines a list of gateways this TlsRoute is attached to,
 *  as one of the routing rules to route the requests served by the gateway.
 *  Each gateway reference should match the pattern: `projects/ *
 *  /locations/global/gateways/`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gateways;

/** Optional. Set of label tags associated with the TlsRoute resource. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_TlsRoute_Labels *labels;

/**
 *  Optional. Meshes defines a list of meshes this TlsRoute is attached to, as
 *  one of the routing rules to route the requests served by the mesh. Each mesh
 *  reference should match the pattern: `projects/ * /locations/global/meshes/`
 *  The attached Mesh should be of a type SIDECAR
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *meshes;

/**
 *  Identifier. Name of the TlsRoute resource. It matches pattern `projects/ *
 *  /locations/global/tlsRoutes/tls_route_name>`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Rules that define how traffic is routed and handled. At least one
 *  RouteRule must be supplied. If there are multiple rules then the action
 *  taken will be the first rule to match.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TlsRouteRouteRule *> *rules;

/** Output only. Server-defined URL of this resource */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Output only. The timestamp when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Set of label tags associated with the TlsRoute resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkServices_TlsRoute_Labels : GTLRObject
@end


/**
 *  The specifications for routing traffic and applying associated policies.
 */
@interface GTLRNetworkServices_TlsRouteRouteAction : GTLRObject

/**
 *  Required. The destination services to which traffic should be forwarded. At
 *  least one destination service is required.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TlsRouteRouteDestination *> *destinations;

/**
 *  Optional. Specifies the idle timeout for the selected route. The idle
 *  timeout is defined as the period in which there are no bytes sent or
 *  received on either the upstream or downstream connection. If not set, the
 *  default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
 */
@property(nonatomic, strong, nullable) GTLRDuration *idleTimeout;

@end


/**
 *  Describe the destination for traffic to be routed to.
 */
@interface GTLRNetworkServices_TlsRouteRouteDestination : GTLRObject

/** Required. The URL of a BackendService to route traffic to. */
@property(nonatomic, copy, nullable) NSString *serviceName;

/**
 *  Optional. Specifies the proportion of requests forwareded to the backend
 *  referenced by the service_name field. This is computed as: -
 *  weight/Sum(weights in destinations) Weights in all destinations does not
 *  need to sum up to 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  RouteMatch defines the predicate used to match requests to a given action.
 *  Multiple match types are "AND"ed for evaluation. If no routeMatch field is
 *  specified, this rule will unconditionally match traffic.
 */
@interface GTLRNetworkServices_TlsRouteRouteMatch : GTLRObject

/**
 *  Optional. ALPN (Application-Layer Protocol Negotiation) to match against.
 *  Examples: "http/1.1", "h2". At least one of sni_host and alpn is required.
 *  Up to 5 alpns across all matches can be set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *alpn;

/**
 *  Optional. SNI (server name indicator) to match against. SNI will be matched
 *  against all wildcard domains, i.e. `www.example.com` will be first matched
 *  against `www.example.com`, then `*.example.com`, then `*.com.` Partial
 *  wildcards are not supported, and values like *w.example.com are invalid. At
 *  least one of sni_host and alpn is required. Up to 100 sni hosts across all
 *  matches can be set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sniHost;

@end


/**
 *  Specifies how to match traffic and how to route traffic when traffic is
 *  matched.
 */
@interface GTLRNetworkServices_TlsRouteRouteRule : GTLRObject

/** Required. The detailed rule defining how to route matched traffic. */
@property(nonatomic, strong, nullable) GTLRNetworkServices_TlsRouteRouteAction *action;

/**
 *  Required. RouteMatch defines the predicate used to match requests to a given
 *  action. Multiple match types are "OR"ed for evaluation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkServices_TlsRouteRouteMatch *> *matches;

@end


/**
 *  Specification of a port-based selector.
 */
@interface GTLRNetworkServices_TrafficPortSelector : GTLRObject

/**
 *  Optional. A list of ports. Can be port numbers or port range (example,
 *  [80-90] specifies all ports from 80 to 90, including 80 and 90) or named
 *  ports or * to specify all ports. If the list is empty, all ports are
 *  selected.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ports;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
