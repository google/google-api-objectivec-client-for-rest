// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Access Context Manager API (accesscontextmanager/v1)
// Description:
//   An API for setting attribute based access control to requests to Google
//   Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the
//   same access policy. The v1alpha API supports new Access Context Manager
//   features, which may have different attributes or behaviors that are not
//   supported by v1. The practice of mixed API usage within a policy may result
//   in the inability to update that policy, including any access levels or
//   service perimeters belonging to it. It is not recommended to use both v1
//   and v1alpha for modifying policies with critical service perimeters.
//   Modifications using v1alpha should be limited to policies with
//   non-production/non-critical service perimeters.
// Documentation:
//   https://cloud.google.com/access-context-manager/docs/reference/rest/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAccessContextManager_AccessLevel;
@class GTLRAccessContextManager_AccessPolicy;
@class GTLRAccessContextManager_AccessScope;
@class GTLRAccessContextManager_AccessSettings;
@class GTLRAccessContextManager_ApiOperation;
@class GTLRAccessContextManager_Application;
@class GTLRAccessContextManager_AuditConfig;
@class GTLRAccessContextManager_AuditLogConfig;
@class GTLRAccessContextManager_AuthorizedOrgsDesc;
@class GTLRAccessContextManager_BasicLevel;
@class GTLRAccessContextManager_Binding;
@class GTLRAccessContextManager_ClientScope;
@class GTLRAccessContextManager_Condition;
@class GTLRAccessContextManager_CustomLevel;
@class GTLRAccessContextManager_DevicePolicy;
@class GTLRAccessContextManager_EgressFrom;
@class GTLRAccessContextManager_EgressPolicy;
@class GTLRAccessContextManager_EgressSource;
@class GTLRAccessContextManager_EgressTo;
@class GTLRAccessContextManager_Expr;
@class GTLRAccessContextManager_GcpUserAccessBinding;
@class GTLRAccessContextManager_GetPolicyOptions;
@class GTLRAccessContextManager_IngressFrom;
@class GTLRAccessContextManager_IngressPolicy;
@class GTLRAccessContextManager_IngressSource;
@class GTLRAccessContextManager_IngressTo;
@class GTLRAccessContextManager_MethodSelector;
@class GTLRAccessContextManager_Operation;
@class GTLRAccessContextManager_Operation_Metadata;
@class GTLRAccessContextManager_Operation_Response;
@class GTLRAccessContextManager_OsConstraint;
@class GTLRAccessContextManager_Policy;
@class GTLRAccessContextManager_ReauthSettings;
@class GTLRAccessContextManager_ScopedAccessSettings;
@class GTLRAccessContextManager_ServicePerimeter;
@class GTLRAccessContextManager_ServicePerimeterConfig;
@class GTLRAccessContextManager_Status;
@class GTLRAccessContextManager_Status_Details_Item;
@class GTLRAccessContextManager_SupportedService;
@class GTLRAccessContextManager_VpcAccessibleServices;
@class GTLRAccessContextManager_VpcNetworkSource;
@class GTLRAccessContextManager_VpcSubNetwork;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_AuthorizedOrgsDesc.assetType

/**
 *  Credential strength asset type.
 *
 *  Value: "ASSET_TYPE_CREDENTIAL_STRENGTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeCredentialStrength;
/**
 *  Device asset type.
 *
 *  Value: "ASSET_TYPE_DEVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeDevice;
/**
 *  No asset type specified.
 *
 *  Value: "ASSET_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_AuthorizedOrgsDesc.authorizationDirection

/**
 *  The traffic of the specified organizations can be evaluated by this
 *  organization.
 *
 *  Value: "AUTHORIZATION_DIRECTION_FROM"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionFrom;
/**
 *  The specified organizations are authorized to evaluate traffic in this
 *  organization.
 *
 *  Value: "AUTHORIZATION_DIRECTION_TO"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionTo;
/**
 *  No direction specified.
 *
 *  Value: "AUTHORIZATION_DIRECTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_AuthorizedOrgsDesc.authorizationType

/**
 *  This authorization relationship is "trust".
 *
 *  Value: "AUTHORIZATION_TYPE_TRUST"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationType_AuthorizationTypeTrust;
/**
 *  No authorization type specified.
 *
 *  Value: "AUTHORIZATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationType_AuthorizationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_BasicLevel.combiningFunction

/**
 *  All `Conditions` must be true for the `BasicLevel` to be true.
 *
 *  Value: "AND"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_BasicLevel_CombiningFunction_And;
/**
 *  If at least one `Condition` is true, then the `BasicLevel` is true.
 *
 *  Value: "OR"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_BasicLevel_CombiningFunction_Or;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_DevicePolicy.allowedDeviceManagementLevels

/**
 *  Basic management is enabled, which is generally limited to monitoring and
 *  wiping the corporate account.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedDeviceManagementLevels_Basic;
/**
 *  Complete device management. This includes more thorough monitoring and the
 *  ability to directly manage the device (such as remote wiping). This can be
 *  enabled through the Android Enterprise Platform.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedDeviceManagementLevels_Complete;
/**
 *  The device's management level is not specified or not known.
 *
 *  Value: "MANAGEMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedDeviceManagementLevels_ManagementUnspecified;
/**
 *  The device is not managed.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedDeviceManagementLevels_None;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_DevicePolicy.allowedEncryptionStatuses

/**
 *  The device is encrypted.
 *
 *  Value: "ENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedEncryptionStatuses_Encrypted;
/**
 *  The encryption status of the device is not specified or not known.
 *
 *  Value: "ENCRYPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedEncryptionStatuses_EncryptionUnspecified;
/**
 *  The device does not support encryption.
 *
 *  Value: "ENCRYPTION_UNSUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedEncryptionStatuses_EncryptionUnsupported;
/**
 *  The device supports encryption, but is currently unencrypted.
 *
 *  Value: "UNENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_DevicePolicy_AllowedEncryptionStatuses_Unencrypted;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_EgressFrom.identityType

/**
 *  Authorize access from all identities outside the perimeter.
 *
 *  Value: "ANY_IDENTITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_IdentityType_AnyIdentity;
/**
 *  Authorize access from all service accounts outside the perimeter.
 *
 *  Value: "ANY_SERVICE_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_IdentityType_AnyServiceAccount;
/**
 *  Authorize access from all human users outside the perimeter.
 *
 *  Value: "ANY_USER_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_IdentityType_AnyUserAccount;
/**
 *  No blanket identity group specified.
 *
 *  Value: "IDENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_IdentityType_IdentityTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_EgressFrom.sourceRestriction

/**
 *  Enforcement preference disabled, will not enforce traffic restrictions based
 *  on `sources` in EgressFrom.
 *
 *  Value: "SOURCE_RESTRICTION_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionDisabled;
/**
 *  Enforcement preference enabled, traffic restrictions will be enforced based
 *  on `sources` in EgressFrom.
 *
 *  Value: "SOURCE_RESTRICTION_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionEnabled;
/**
 *  Enforcement preference unspecified, will not enforce traffic restrictions
 *  based on `sources` in EgressFrom.
 *
 *  Value: "SOURCE_RESTRICTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_IngressFrom.identityType

/**
 *  Authorize access from all identities outside the perimeter.
 *
 *  Value: "ANY_IDENTITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_IngressFrom_IdentityType_AnyIdentity;
/**
 *  Authorize access from all service accounts outside the perimeter.
 *
 *  Value: "ANY_SERVICE_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_IngressFrom_IdentityType_AnyServiceAccount;
/**
 *  Authorize access from all human users outside the perimeter.
 *
 *  Value: "ANY_USER_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_IngressFrom_IdentityType_AnyUserAccount;
/**
 *  No blanket identity group specified.
 *
 *  Value: "IDENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_IngressFrom_IdentityType_IdentityTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_OsConstraint.osType

/**
 *  An Android operating system.
 *
 *  Value: "ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_Android;
/**
 *  A desktop ChromeOS operating system.
 *
 *  Value: "DESKTOP_CHROME_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_DesktopChromeOs;
/**
 *  A desktop Linux operating system.
 *
 *  Value: "DESKTOP_LINUX"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_DesktopLinux;
/**
 *  A desktop Mac operating system.
 *
 *  Value: "DESKTOP_MAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_DesktopMac;
/**
 *  A desktop Windows operating system.
 *
 *  Value: "DESKTOP_WINDOWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_DesktopWindows;
/**
 *  An iOS operating system.
 *
 *  Value: "IOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_Ios;
/**
 *  The operating system of the device is not specified or not known.
 *
 *  Value: "OS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_OsConstraint_OsType_OsUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_ReauthSettings.reauthMethod

/**
 *  The user will prompted to perform regular login. Users who are enrolled for
 *  two-step verification and haven't chosen to "Remember this computer" will be
 *  prompted for their second factor.
 *
 *  Value: "LOGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ReauthSettings_ReauthMethod_Login;
/**
 *  The user will be prompted for their password.
 *
 *  Value: "PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ReauthSettings_ReauthMethod_Password;
/**
 *  If method undefined in API, we will use LOGIN by default.
 *
 *  Value: "REAUTH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ReauthSettings_ReauthMethod_ReauthMethodUnspecified;
/**
 *  The user will be prompted to autheticate using their security key. If no
 *  security key has been configured, then we will fallback to LOGIN.
 *
 *  Value: "SECURITY_KEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ReauthSettings_ReauthMethod_SecurityKey;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_ServicePerimeter.perimeterType

/**
 *  Perimeter Bridge.
 *
 *  Value: "PERIMETER_TYPE_BRIDGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ServicePerimeter_PerimeterType_PerimeterTypeBridge;
/**
 *  Regular Perimeter. When no value is specified, the perimeter uses this type.
 *
 *  Value: "PERIMETER_TYPE_REGULAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_ServicePerimeter_PerimeterType_PerimeterTypeRegular;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_SupportedService.serviceSupportStage

/**
 *  Deprecated features are scheduled to be shut down and removed.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Deprecated;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Ga;
/**
 *  PREVIEW indicates a pre-release stage where the product is functionally
 *  complete but undergoing real-world testing.
 *
 *  Value: "PREVIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Preview;
/**
 *  Do not use this default value.
 *
 *  Value: "SERVICE_SUPPORT_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_ServiceSupportStage_ServiceSupportStageUnspecified;

// ----------------------------------------------------------------------------
// GTLRAccessContextManager_SupportedService.supportStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAccessContextManager_SupportedService_SupportStage_Unimplemented;

/**
 *  An `AccessLevel` is a label that can be applied to requests to Google Cloud
 *  services, along with a list of requirements necessary for the label to be
 *  applied.
 */
@interface GTLRAccessContextManager_AccessLevel : GTLRObject

/** A `BasicLevel` composed of `Conditions`. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_BasicLevel *basic;

/** A `CustomLevel` written in the Common Expression Language. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_CustomLevel *custom;

/**
 *  Description of the `AccessLevel` and its use. Does not affect behavior.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Identifier. Resource name for the `AccessLevel`. Format:
 *  `accessPolicies/{access_policy}/accessLevels/{access_level}`. The
 *  `access_level` component must begin with a letter, followed by alphanumeric
 *  characters or `_`. Its maximum length is 50 characters. After you create an
 *  `AccessLevel`, you cannot change its `name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Human readable title. Must be unique within the Policy. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  `AccessPolicy` is a container for `AccessLevels` (which define the necessary
 *  attributes to use Google Cloud services) and `ServicePerimeters` (which
 *  define regions of services able to freely pass data within a perimeter). An
 *  access policy is globally visible within an organization, and the
 *  restrictions it specifies apply to all projects within an organization.
 */
@interface GTLRAccessContextManager_AccessPolicy : GTLRObject

/**
 *  Output only. An opaque identifier for the current version of the
 *  `AccessPolicy`. This will always be a strongly validated etag, meaning that
 *  two Access Policies will be identical if and only if their etags are
 *  identical. Clients should not expect this to be in any specific format.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Identifier. Resource name of the `AccessPolicy`. Format:
 *  `accessPolicies/{access_policy}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy.
 *  Currently immutable once created. Format: `organizations/{organization_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The scopes of the AccessPolicy. Scopes define which resources a policy can
 *  restrict and where its resources can be referenced. For example, policy A
 *  with `scopes=["folders/123"]` has the following behavior: - ServicePerimeter
 *  can only restrict projects within `folders/123`. - ServicePerimeter within
 *  policy A can only reference access levels defined within policy A. - Only
 *  one policy can include a given scope; thus, attempting to create a second
 *  policy which includes `folders/123` will result in an error. If no scopes
 *  are provided, then any resource within the organization can be restricted.
 *  Scopes cannot be modified after a policy is created. Policies can only have
 *  a single scope. Format: list of `folders/{folder_number}` or
 *  `projects/{project_number}`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scopes;

/** Required. Human readable title. Does not affect behavior. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Access scope represents the client scope, etc. to which the settings will be
 *  applied to.
 */
@interface GTLRAccessContextManager_AccessScope : GTLRObject

/** Optional. Client scope for this access scope. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_ClientScope *clientScope;

@end


/**
 *  Access settings represent the set of conditions that must be met for access
 *  to be granted. At least one of the fields must be set.
 */
@interface GTLRAccessContextManager_AccessSettings : GTLRObject

/**
 *  Optional. Access level that a user must have to be granted access. Only one
 *  access level is supported, not multiple. This repeated field must have
 *  exactly one element. Example:
 *  "accessPolicies/9522/accessLevels/device_trusted"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessLevels;

/**
 *  Optional. Reauth settings applied to user access on a given AccessScope.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_ReauthSettings *reauthSettings;

@end


/**
 *  Identification for an API Operation.
 */
@interface GTLRAccessContextManager_ApiOperation : GTLRObject

/**
 *  API methods or permissions to allow. Method or permission must belong to the
 *  service specified by `service_name` field. A single MethodSelector entry
 *  with `*` specified for the `method` field will allow all methods AND
 *  permissions for the service specified in `service_name`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_MethodSelector *> *methodSelectors;

/**
 *  The name of the API whose methods or permissions the IngressPolicy or
 *  EgressPolicy want to allow. A single ApiOperation with `service_name` field
 *  set to `*` will allow all methods AND permissions for all services.
 */
@property(nonatomic, copy, nullable) NSString *serviceName;

@end


/**
 *  An application that accesses Google Cloud APIs.
 */
@interface GTLRAccessContextManager_Application : GTLRObject

/** The OAuth client ID of the application. */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The name of the application. Example: "Cloud Console" */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRAccessContextManager_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRAccessContextManager_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRAccessContextManager_AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRAccessContextManager_AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRAccessContextManager_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  `AuthorizedOrgsDesc` contains data for an organization's authorization
 *  policy.
 */
@interface GTLRAccessContextManager_AuthorizedOrgsDesc : GTLRObject

/**
 *  The asset type of this authorized orgs desc. Valid values are
 *  `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeCredentialStrength
 *        Credential strength asset type. (Value:
 *        "ASSET_TYPE_CREDENTIAL_STRENGTH")
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeDevice
 *        Device asset type. (Value: "ASSET_TYPE_DEVICE")
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AssetType_AssetTypeUnspecified
 *        No asset type specified. (Value: "ASSET_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *assetType;

/**
 *  The direction of the authorization relationship between this organization
 *  and the organizations listed in the `orgs` field. The valid values for this
 *  field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this
 *  organization to evaluate traffic in the organizations listed in the `orgs`
 *  field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the
 *  `orgs` field to evaluate the traffic in this organization. For the
 *  authorization relationship to take effect, all of the organizations must
 *  authorize and specify the appropriate relationship direction. For example,
 *  if organization A authorized organization B and C to evaluate its traffic,
 *  by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction,
 *  organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the
 *  authorization direction in their `AuthorizedOrgsDesc` resource.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionFrom
 *        The traffic of the specified organizations can be evaluated by this
 *        organization. (Value: "AUTHORIZATION_DIRECTION_FROM")
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionTo
 *        The specified organizations are authorized to evaluate traffic in this
 *        organization. (Value: "AUTHORIZATION_DIRECTION_TO")
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationDirection_AuthorizationDirectionUnspecified
 *        No direction specified. (Value: "AUTHORIZATION_DIRECTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authorizationDirection;

/**
 *  A granular control type for authorization levels. Valid value is
 *  `AUTHORIZATION_TYPE_TRUST`.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationType_AuthorizationTypeTrust
 *        This authorization relationship is "trust". (Value:
 *        "AUTHORIZATION_TYPE_TRUST")
 *    @arg @c kGTLRAccessContextManager_AuthorizedOrgsDesc_AuthorizationType_AuthorizationTypeUnspecified
 *        No authorization type specified. (Value:
 *        "AUTHORIZATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authorizationType;

/**
 *  Identifier. Resource name for the `AuthorizedOrgsDesc`. Format:
 *  `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`.
 *  The `authorized_orgs_desc` component must begin with a letter, followed by
 *  alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`,
 *  you cannot change its `name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of organization ids in this AuthorizedOrgsDesc. Format:
 *  `organizations/` Example: `organizations/123456`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *orgs;

@end


/**
 *  `BasicLevel` is an `AccessLevel` using a set of recommended features.
 */
@interface GTLRAccessContextManager_BasicLevel : GTLRObject

/**
 *  How the `conditions` list should be combined to determine if a request is
 *  granted this `AccessLevel`. If AND is used, each `Condition` in `conditions`
 *  must be satisfied for the `AccessLevel` to be applied. If OR is used, at
 *  least one `Condition` in `conditions` must be satisfied for the
 *  `AccessLevel` to be applied. Default behavior is AND.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_BasicLevel_CombiningFunction_And All
 *        `Conditions` must be true for the `BasicLevel` to be true. (Value:
 *        "AND")
 *    @arg @c kGTLRAccessContextManager_BasicLevel_CombiningFunction_Or If at
 *        least one `Condition` is true, then the `BasicLevel` is true. (Value:
 *        "OR")
 */
@property(nonatomic, copy, nullable) NSString *combiningFunction;

/** Required. A list of requirements for the `AccessLevel` to be granted. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_Condition *> *conditions;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRAccessContextManager_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRAccessContextManager_CancelOperationRequest : GTLRObject
@end


/**
 *  Client scope represents the application, etc. subject to this binding's
 *  restrictions.
 */
@interface GTLRAccessContextManager_ClientScope : GTLRObject

/** Optional. The application that is subject to this binding's scope. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Application *restrictedClientApplication;

@end


/**
 *  A request to commit dry-run specs in all Service Perimeters belonging to an
 *  Access Policy.
 */
@interface GTLRAccessContextManager_CommitServicePerimetersRequest : GTLRObject

/**
 *  Optional. The etag for the version of the Access Policy that this commit
 *  operation is to be performed on. If, at the time of commit, the etag for the
 *  Access Policy stored in Access Context Manager is different from the
 *  specified etag, then the commit operation will not be performed and the call
 *  will fail. This field is not required. If etag is not provided, the
 *  operation will be performed as if a valid etag is provided.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

@end


/**
 *  A response to CommitServicePerimetersRequest. This will be put inside of
 *  Operation.response field.
 */
@interface GTLRAccessContextManager_CommitServicePerimetersResponse : GTLRObject

/** List of all the Service Perimeter instances in the Access Policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ServicePerimeter *> *servicePerimeters;

@end


/**
 *  A condition necessary for an `AccessLevel` to be granted. The Condition is
 *  an AND over its fields. So a Condition is true if: 1) the request IP is from
 *  one of the listed subnetworks AND 2) the originating device complies with
 *  the listed device policy AND 3) all listed access levels are granted AND 4)
 *  the request was sent at a time allowed by the DateTimeRestriction.
 */
@interface GTLRAccessContextManager_Condition : GTLRObject

/**
 *  Device specific restrictions, all restrictions must hold for the Condition
 *  to be true. If not specified, all devices are allowed.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_DevicePolicy *devicePolicy;

/**
 *  CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a
 *  CIDR IP address block, the specified IP address portion must be properly
 *  truncated (i.e. all the host bits must be zero) or the input is considered
 *  malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is
 *  not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas
 *  "2001:db8::1/32" is not. The originating IP of a request must be in one of
 *  the listed subnets in order for this Condition to be true. If empty, all IP
 *  addresses are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ipSubnetworks;

/**
 *  The request must be made by one of the provided user or service accounts.
 *  Groups are not supported. Syntax: `user:{emailid}`
 *  `serviceAccount:{emailid}` If not specified, a request may come from any
 *  user.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Whether to negate the Condition. If true, the Condition becomes a NAND over
 *  its non-empty fields. Any non-empty field criteria evaluating to false will
 *  result in the Condition to be satisfied. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *negate;

/**
 *  The request must originate from one of the provided countries/regions. Must
 *  be valid ISO 3166-1 alpha-2 codes.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *regions;

/**
 *  A list of other access levels defined in the same `Policy`, referenced by
 *  resource name. Referencing an `AccessLevel` which does not exist is an
 *  error. All access levels listed must be granted for the Condition to be
 *  true. Example: "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requiredAccessLevels;

/**
 *  The request must originate from one of the provided VPC networks in Google
 *  Cloud. Cannot specify this field together with `ip_subnetworks`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_VpcNetworkSource *> *vpcNetworkSources;

@end


/**
 *  `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language
 *  to represent the necessary conditions for the level to apply to a request.
 *  See CEL spec at: https://github.com/google/cel-spec
 */
@interface GTLRAccessContextManager_CustomLevel : GTLRObject

/** Required. A Cloud CEL expression evaluating to a boolean. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Expr *expr;

@end


/**
 *  `DevicePolicy` specifies device specific restrictions necessary to acquire a
 *  given access level. A `DevicePolicy` specifies requirements for requests
 *  from devices to be granted access levels, it does not do any enforcement on
 *  the device. `DevicePolicy` acts as an AND over all specified fields, and
 *  each repeated field is an OR over its elements. Any unset fields are
 *  ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type :
 *  DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be
 *  true for requests originating from encrypted Linux desktops and encrypted
 *  Windows desktops.
 */
@interface GTLRAccessContextManager_DevicePolicy : GTLRObject

/**
 *  Allowed device management levels, an empty list allows all management
 *  levels.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedDeviceManagementLevels;

/** Allowed encryptions statuses, an empty list allows all statuses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedEncryptionStatuses;

/** Allowed OS versions, an empty list allows all types and all versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_OsConstraint *> *osConstraints;

/**
 *  Whether the device needs to be approved by the customer admin.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireAdminApproval;

/**
 *  Whether the device needs to be corp owned.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireCorpOwned;

/**
 *  Whether or not screenlock is required for the DevicePolicy to be true.
 *  Defaults to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireScreenlock;

@end


/**
 *  Defines the conditions under which an EgressPolicy matches a request.
 *  Conditions based on information about the source of the request. Note that
 *  if the destination of the request is also protected by a ServicePerimeter,
 *  then that ServicePerimeter must have an IngressPolicy which allows access in
 *  order for this request to succeed.
 */
@interface GTLRAccessContextManager_EgressFrom : GTLRObject

/**
 *  A list of identities that are allowed access through [EgressPolicy].
 *  Identities can be an individual user, service account, Google group, or
 *  third-party identity. For third-party identity, only single identities are
 *  supported and other identity types are not supported. The `v1` identities
 *  that have the prefix `user`, `group`, `serviceAccount`, and `principal` in
 *  https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identities;

/**
 *  Specifies the type of identities that are allowed access to outside the
 *  perimeter. If left unspecified, then members of `identities` field will be
 *  allowed access.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_EgressFrom_IdentityType_AnyIdentity
 *        Authorize access from all identities outside the perimeter. (Value:
 *        "ANY_IDENTITY")
 *    @arg @c kGTLRAccessContextManager_EgressFrom_IdentityType_AnyServiceAccount
 *        Authorize access from all service accounts outside the perimeter.
 *        (Value: "ANY_SERVICE_ACCOUNT")
 *    @arg @c kGTLRAccessContextManager_EgressFrom_IdentityType_AnyUserAccount
 *        Authorize access from all human users outside the perimeter. (Value:
 *        "ANY_USER_ACCOUNT")
 *    @arg @c kGTLRAccessContextManager_EgressFrom_IdentityType_IdentityTypeUnspecified
 *        No blanket identity group specified. (Value:
 *        "IDENTITY_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *identityType;

/**
 *  Whether to enforce traffic restrictions based on `sources` field. If the
 *  `sources` fields is non-empty, then this field must be set to
 *  `SOURCE_RESTRICTION_ENABLED`.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionDisabled
 *        Enforcement preference disabled, will not enforce traffic restrictions
 *        based on `sources` in EgressFrom. (Value:
 *        "SOURCE_RESTRICTION_DISABLED")
 *    @arg @c kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionEnabled
 *        Enforcement preference enabled, traffic restrictions will be enforced
 *        based on `sources` in EgressFrom. (Value:
 *        "SOURCE_RESTRICTION_ENABLED")
 *    @arg @c kGTLRAccessContextManager_EgressFrom_SourceRestriction_SourceRestrictionUnspecified
 *        Enforcement preference unspecified, will not enforce traffic
 *        restrictions based on `sources` in EgressFrom. (Value:
 *        "SOURCE_RESTRICTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sourceRestriction;

/**
 *  Sources that this EgressPolicy authorizes access from. If this field is not
 *  empty, then `source_restriction` must be set to
 *  `SOURCE_RESTRICTION_ENABLED`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_EgressSource *> *sources;

@end


/**
 *  Policy for egress from perimeter. EgressPolicies match requests based on
 *  `egress_from` and `egress_to` stanzas. For an EgressPolicy to match, both
 *  `egress_from` and `egress_to` stanzas must be matched. If an EgressPolicy
 *  matches a request, the request is allowed to span the ServicePerimeter
 *  boundary. For example, an EgressPolicy can be used to allow VMs on networks
 *  within the ServicePerimeter to access a defined set of projects outside the
 *  perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket
 *  or query against a BigQuery dataset). EgressPolicies are concerned with the
 *  *resources* that a request relates as well as the API services and API
 *  actions being used. They do not related to the direction of data movement.
 *  More detailed documentation for this concept can be found in the
 *  descriptions of EgressFrom and EgressTo.
 */
@interface GTLRAccessContextManager_EgressPolicy : GTLRObject

/**
 *  Defines conditions on the source of a request causing this EgressPolicy to
 *  apply.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_EgressFrom *egressFrom;

/**
 *  Defines the conditions on the ApiOperation and destination resources that
 *  cause this EgressPolicy to apply.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_EgressTo *egressTo;

@end


/**
 *  The source that EgressPolicy authorizes access from inside the
 *  ServicePerimeter to somewhere outside the ServicePerimeter boundaries.
 */
@interface GTLRAccessContextManager_EgressSource : GTLRObject

/**
 *  An AccessLevel resource name that allows protected resources inside the
 *  ServicePerimeters to access outside the ServicePerimeter boundaries.
 *  AccessLevels listed must be in the same policy as this ServicePerimeter.
 *  Referencing a nonexistent AccessLevel will cause an error. If an AccessLevel
 *  name is not specified, only resources within the perimeter can be accessed
 *  through Google Cloud calls with request origins within the perimeter.
 *  Example: `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*`
 *  is specified for `access_level`, then all EgressSources will be allowed.
 */
@property(nonatomic, copy, nullable) NSString *accessLevel;

@end


/**
 *  Defines the conditions under which an EgressPolicy matches a request.
 *  Conditions are based on information about the ApiOperation intended to be
 *  performed on the `resources` specified. Note that if the destination of the
 *  request is also protected by a ServicePerimeter, then that ServicePerimeter
 *  must have an IngressPolicy which allows access in order for this request to
 *  succeed. The request must match `operations` AND `resources` fields in order
 *  to be allowed egress out of the perimeter.
 */
@interface GTLRAccessContextManager_EgressTo : GTLRObject

/**
 *  A list of external resources that are allowed to be accessed. Only AWS and
 *  Azure resources are supported. For Amazon S3, the supported formats are
 *  s3://BUCKET_NAME, s3a://BUCKET_NAME, and s3n://BUCKET_NAME. For Azure
 *  Storage, the supported format is
 *  azure://myaccount.blob.core.windows.net/CONTAINER_NAME. A request matches if
 *  it contains an external resource in this list (Example: s3://bucket/path).
 *  Currently '*' is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *externalResources;

/**
 *  A list of ApiOperations allowed to be performed by the sources specified in
 *  the corresponding EgressFrom. A request matches if it uses an
 *  operation/service in this list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ApiOperation *> *operations;

/**
 *  A list of resources, currently only projects in the form `projects/`, that
 *  are allowed to be accessed by sources defined in the corresponding
 *  EgressFrom. A request matches if it contains a resource in this list. If `*`
 *  is specified for `resources`, then this EgressTo rule will authorize access
 *  to all resources outside the perimeter.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resources;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRAccessContextManager_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRAccessContextManager_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Restricts access to Cloud Console and Google Cloud APIs for a set of users
 *  using Context-Aware Access.
 */
@interface GTLRAccessContextManager_GcpUserAccessBinding : GTLRObject

/**
 *  Optional. Access level that a user must have to be granted access. Only one
 *  access level is supported, not multiple. This repeated field must have
 *  exactly one element. Example:
 *  "accessPolicies/9522/accessLevels/device_trusted"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessLevels;

/**
 *  Optional. Dry run access level that will be evaluated but will not be
 *  enforced. The access denial based on dry run policy will be logged. Only one
 *  access level is supported, not multiple. This list must have exactly one
 *  element. Example: "accessPolicies/9522/accessLevels/device_trusted"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dryRunAccessLevels;

/**
 *  Required. Immutable. Google Group id whose members are subject to this
 *  binding's restrictions. See "id" in the [G Suite Directory API's Groups
 *  resource]
 *  (https://developers.google.com/admin-sdk/directory/v1/reference/groups#resource).
 *  If a group's email address/alias is changed, this resource will continue to
 *  point at the changed group. This field does not accept group email addresses
 *  or aliases. Example: "01d520gv4vjcrht"
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Immutable. Assigned by the server during creation. The last segment has an
 *  arbitrary length and has only URI unreserved characters (as defined by [RFC
 *  3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)). Should
 *  not be specified by the client during creation. Example:
 *  "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. GCSL policy for the group key. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_ReauthSettings *reauthSettings;

/**
 *  Optional. A list of applications that are subject to this binding's
 *  restrictions. If the list is empty, the binding restrictions will
 *  universally apply to all applications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_Application *> *restrictedClientApplications;

/**
 *  Optional. A list of scoped access settings that set this binding's
 *  restrictions on a subset of applications. This field cannot be set if
 *  restricted_client_applications is set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ScopedAccessSettings *> *scopedAccessSettings;

@end


/**
 *  Metadata of GCP Access Binding Long Running Operations.
 */
@interface GTLRAccessContextManager_GcpUserAccessBindingOperationMetadata : GTLRObject
@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRAccessContextManager_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRAccessContextManager_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  Defines the conditions under which an IngressPolicy matches a request.
 *  Conditions are based on information about the source of the request. The
 *  request must satisfy what is defined in `sources` AND identity related
 *  fields in order to match.
 */
@interface GTLRAccessContextManager_IngressFrom : GTLRObject

/**
 *  A list of identities that are allowed access through [IngressPolicy].
 *  Identities can be an individual user, service account, Google group, or
 *  third-party identity. For third-party identity, only single identities are
 *  supported and other identity types are not supported. The `v1` identities
 *  that have the prefix `user`, `group`, `serviceAccount`, and `principal` in
 *  https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *identities;

/**
 *  Specifies the type of identities that are allowed access from outside the
 *  perimeter. If left unspecified, then members of `identities` field will be
 *  allowed access.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_IngressFrom_IdentityType_AnyIdentity
 *        Authorize access from all identities outside the perimeter. (Value:
 *        "ANY_IDENTITY")
 *    @arg @c kGTLRAccessContextManager_IngressFrom_IdentityType_AnyServiceAccount
 *        Authorize access from all service accounts outside the perimeter.
 *        (Value: "ANY_SERVICE_ACCOUNT")
 *    @arg @c kGTLRAccessContextManager_IngressFrom_IdentityType_AnyUserAccount
 *        Authorize access from all human users outside the perimeter. (Value:
 *        "ANY_USER_ACCOUNT")
 *    @arg @c kGTLRAccessContextManager_IngressFrom_IdentityType_IdentityTypeUnspecified
 *        No blanket identity group specified. (Value:
 *        "IDENTITY_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *identityType;

/** Sources that this IngressPolicy authorizes access from. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_IngressSource *> *sources;

@end


/**
 *  Policy for ingress into ServicePerimeter. IngressPolicies match requests
 *  based on `ingress_from` and `ingress_to` stanzas. For an ingress policy to
 *  match, both the `ingress_from` and `ingress_to` stanzas must be matched. If
 *  an IngressPolicy matches a request, the request is allowed through the
 *  perimeter boundary from outside the perimeter. For example, access from the
 *  internet can be allowed either based on an AccessLevel or, for traffic
 *  hosted on Google Cloud, the project of the source network. For access from
 *  private networks, using the project of the hosting network is required.
 *  Individual ingress policies can be limited by restricting which services
 *  and/or actions they match using the `ingress_to` field.
 */
@interface GTLRAccessContextManager_IngressPolicy : GTLRObject

/**
 *  Defines the conditions on the source of a request causing this IngressPolicy
 *  to apply.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_IngressFrom *ingressFrom;

/**
 *  Defines the conditions on the ApiOperation and request destination that
 *  cause this IngressPolicy to apply.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_IngressTo *ingressTo;

@end


/**
 *  The source that IngressPolicy authorizes access from.
 */
@interface GTLRAccessContextManager_IngressSource : GTLRObject

/**
 *  An AccessLevel resource name that allow resources within the
 *  ServicePerimeters to be accessed from the internet. AccessLevels listed must
 *  be in the same policy as this ServicePerimeter. Referencing a nonexistent
 *  AccessLevel will cause an error. If no AccessLevel names are listed,
 *  resources within the perimeter can only be accessed via Google Cloud calls
 *  with request origins within the perimeter. Example:
 *  `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*` is
 *  specified for `access_level`, then all IngressSources will be allowed.
 */
@property(nonatomic, copy, nullable) NSString *accessLevel;

/**
 *  A Google Cloud resource that is allowed to ingress the perimeter. Requests
 *  from these resources will be allowed to access perimeter data. Currently
 *  only projects and VPCs are allowed. Project format:
 *  `projects/{project_number}` VPC network format:
 *  `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`. The
 *  project may be in any Google Cloud organization, not just the organization
 *  that the perimeter is defined in. `*` is not allowed, the case of allowing
 *  all Google Cloud resources only is not supported.
 */
@property(nonatomic, copy, nullable) NSString *resource;

@end


/**
 *  Defines the conditions under which an IngressPolicy matches a request.
 *  Conditions are based on information about the ApiOperation intended to be
 *  performed on the target resource of the request. The request must satisfy
 *  what is defined in `operations` AND `resources` in order to match.
 */
@interface GTLRAccessContextManager_IngressTo : GTLRObject

/**
 *  A list of ApiOperations allowed to be performed by the sources specified in
 *  corresponding IngressFrom in this ServicePerimeter.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ApiOperation *> *operations;

/**
 *  A list of resources, currently only projects in the form `projects/`,
 *  protected by this ServicePerimeter that are allowed to be accessed by
 *  sources defined in the corresponding IngressFrom. If a single `*` is
 *  specified, then access to all resources inside the perimeter are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resources;

@end


/**
 *  A response to `ListAccessLevelsRequest`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "accessLevels" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAccessContextManager_ListAccessLevelsResponse : GTLRCollectionObject

/**
 *  List of the Access Level instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AccessLevel *> *accessLevels;

/**
 *  The pagination token to retrieve the next page of results. If the value is
 *  empty, no further results remain.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A response to `ListAccessPoliciesRequest`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "accessPolicies" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRAccessContextManager_ListAccessPoliciesResponse : GTLRCollectionObject

/**
 *  List of the AccessPolicy instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AccessPolicy *> *accessPolicies;

/**
 *  The pagination token to retrieve the next page of results. If the value is
 *  empty, no further results remain.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A response to `ListAuthorizedOrgsDescsRequest`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "authorizedOrgsDescs" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAccessContextManager_ListAuthorizedOrgsDescsResponse : GTLRCollectionObject

/**
 *  List of all the Authorized Orgs Desc instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AuthorizedOrgsDesc *> *authorizedOrgsDescs;

/**
 *  The pagination token to retrieve the next page of results. If the value is
 *  empty, no further results remain.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response of ListGcpUserAccessBindings.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gcpUserAccessBindings" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAccessContextManager_ListGcpUserAccessBindingsResponse : GTLRCollectionObject

/**
 *  GcpUserAccessBinding
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_GcpUserAccessBinding *> *gcpUserAccessBindings;

/** Token to get the next page of items. If blank, there are no more items. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAccessContextManager_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_Operation *> *operations;

@end


/**
 *  A response to `ListServicePerimetersRequest`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "servicePerimeters" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAccessContextManager_ListServicePerimetersResponse : GTLRCollectionObject

/**
 *  The pagination token to retrieve the next page of results. If the value is
 *  empty, no further results remain.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of the Service Perimeter instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ServicePerimeter *> *servicePerimeters;

@end


/**
 *  A response to `ListSupportedServicesRequest`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "supportedServices" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAccessContextManager_ListSupportedServicesResponse : GTLRCollectionObject

/**
 *  The pagination token to retrieve the next page of results. If the value is
 *  empty, no further results remain.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of services supported by VPC Service Controls instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_SupportedService *> *supportedServices;

@end


/**
 *  An allowed method or permission of a service specified in ApiOperation.
 */
@interface GTLRAccessContextManager_MethodSelector : GTLRObject

/**
 *  A valid method name for the corresponding `service_name` in ApiOperation. If
 *  `*` is used as the value for the `method`, then ALL methods and permissions
 *  are allowed.
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  A valid Cloud IAM permission for the corresponding `service_name` in
 *  ApiOperation.
 */
@property(nonatomic, copy, nullable) NSString *permission;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRAccessContextManager_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAccessContextManager_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAccessContextManager_Operation_Response : GTLRObject
@end


/**
 *  Metadata of Access Context Manager's Long Running Operations.
 */
@interface GTLRAccessContextManager_OperationMetadata : GTLRObject
@end


/**
 *  A restriction on the OS type and version of devices making requests.
 */
@interface GTLRAccessContextManager_OsConstraint : GTLRObject

/**
 *  The minimum allowed OS version. If not set, any version of this OS satisfies
 *  the constraint. Format: `"major.minor.patch"`. Examples: `"10.5.301"`,
 *  `"9.2.1"`.
 */
@property(nonatomic, copy, nullable) NSString *minimumVersion;

/**
 *  Required. The allowed OS type.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_Android An Android
 *        operating system. (Value: "ANDROID")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_DesktopChromeOs A
 *        desktop ChromeOS operating system. (Value: "DESKTOP_CHROME_OS")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_DesktopLinux A
 *        desktop Linux operating system. (Value: "DESKTOP_LINUX")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_DesktopMac A desktop
 *        Mac operating system. (Value: "DESKTOP_MAC")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_DesktopWindows A
 *        desktop Windows operating system. (Value: "DESKTOP_WINDOWS")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_Ios An iOS operating
 *        system. (Value: "IOS")
 *    @arg @c kGTLRAccessContextManager_OsConstraint_OsType_OsUnspecified The
 *        operating system of the device is not specified or not known. (Value:
 *        "OS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *osType;

/**
 *  Only allows requests from devices with a verified Chrome OS. Verifications
 *  includes requirements that the device is enterprise-managed, conformant to
 *  domain policies, and the caller has permission to call the API targeted by
 *  the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireVerifiedChromeOs;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRAccessContextManager_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Stores settings related to Google Cloud Session Length including session
 *  duration, the type of challenge (i.e. method) they should face when their
 *  session expires, and other related settings.
 */
@interface GTLRAccessContextManager_ReauthSettings : GTLRObject

/**
 *  Optional. How long a user is allowed to take between actions before a new
 *  access token must be issued. Presently only set for Cloud Apps.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxInactivity;

/**
 *  Optional. Reauth method when users GCP session is up.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_ReauthSettings_ReauthMethod_Login The
 *        user will prompted to perform regular login. Users who are enrolled
 *        for two-step verification and haven't chosen to "Remember this
 *        computer" will be prompted for their second factor. (Value: "LOGIN")
 *    @arg @c kGTLRAccessContextManager_ReauthSettings_ReauthMethod_Password The
 *        user will be prompted for their password. (Value: "PASSWORD")
 *    @arg @c kGTLRAccessContextManager_ReauthSettings_ReauthMethod_ReauthMethodUnspecified
 *        If method undefined in API, we will use LOGIN by default. (Value:
 *        "REAUTH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRAccessContextManager_ReauthSettings_ReauthMethod_SecurityKey
 *        The user will be prompted to autheticate using their security key. If
 *        no security key has been configured, then we will fallback to LOGIN.
 *        (Value: "SECURITY_KEY")
 */
@property(nonatomic, copy, nullable) NSString *reauthMethod;

/**
 *  Optional. The session length. Setting this field to zero is equal to
 *  disabling. Reauth. Also can set infinite session by flipping the enabled bit
 *  to false below. If use_oidc_max_age is true, for OIDC apps, the session
 *  length will be the minimum of this field and OIDC max_age param.
 */
@property(nonatomic, strong, nullable) GTLRDuration *sessionLength;

/**
 *  Optional. Big red button to turn off GCSL. When false, all fields set above
 *  will be disregarded and the session length is basically infinite.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sessionLengthEnabled;

/**
 *  Optional. Only useful for OIDC apps. When false, the OIDC max_age param, if
 *  passed in the authentication request will be ignored. When true, the re-auth
 *  period will be the minimum of the session_length field and the max_age OIDC
 *  param.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useOidcMaxAge;

@end


/**
 *  A request to replace all existing Access Levels in an Access Policy with the
 *  Access Levels provided. This is done atomically.
 */
@interface GTLRAccessContextManager_ReplaceAccessLevelsRequest : GTLRObject

/**
 *  Required. The desired Access Levels that should replace all existing Access
 *  Levels in the Access Policy.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AccessLevel *> *accessLevels;

/**
 *  Optional. The etag for the version of the Access Policy that this replace
 *  operation is to be performed on. If, at the time of replace, the etag for
 *  the Access Policy stored in Access Context Manager is different from the
 *  specified etag, then the replace operation will not be performed and the
 *  call will fail. This field is not required. If etag is not provided, the
 *  operation will be performed as if a valid etag is provided.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

@end


/**
 *  A response to ReplaceAccessLevelsRequest. This will be put inside of
 *  Operation.response field.
 */
@interface GTLRAccessContextManager_ReplaceAccessLevelsResponse : GTLRObject

/** List of the Access Level instances. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_AccessLevel *> *accessLevels;

@end


/**
 *  A request to replace all existing Service Perimeters in an Access Policy
 *  with the Service Perimeters provided. This is done atomically.
 */
@interface GTLRAccessContextManager_ReplaceServicePerimetersRequest : GTLRObject

/**
 *  Optional. The etag for the version of the Access Policy that this replace
 *  operation is to be performed on. If, at the time of replace, the etag for
 *  the Access Policy stored in Access Context Manager is different from the
 *  specified etag, then the replace operation will not be performed and the
 *  call will fail. This field is not required. If etag is not provided, the
 *  operation will be performed as if a valid etag is provided.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. The desired Service Perimeters that should replace all existing
 *  Service Perimeters in the Access Policy.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ServicePerimeter *> *servicePerimeters;

@end


/**
 *  A response to ReplaceServicePerimetersRequest. This will be put inside of
 *  Operation.response field.
 */
@interface GTLRAccessContextManager_ReplaceServicePerimetersResponse : GTLRObject

/** List of the Service Perimeter instances. */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_ServicePerimeter *> *servicePerimeters;

@end


/**
 *  A relationship between access settings and its scope.
 */
@interface GTLRAccessContextManager_ScopedAccessSettings : GTLRObject

/**
 *  Optional. Access settings for this scoped access settings. This field may be
 *  empty if dry_run_settings is set.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_AccessSettings *activeSettings;

/**
 *  Optional. Dry-run access settings for this scoped access settings. This
 *  field may be empty if active_settings is set.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_AccessSettings *dryRunSettings;

/**
 *  Optional. Application, etc. to which the access settings will be applied to.
 *  Implicitly, this is the scoped access settings key; as such, it must be
 *  unique and non-empty.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_AccessScope *scope;

@end


/**
 *  `ServicePerimeter` describes a set of Google Cloud resources which can
 *  freely import and export data amongst themselves, but not export outside of
 *  the `ServicePerimeter`. If a request with a source within this
 *  `ServicePerimeter` has a target outside of the `ServicePerimeter`, the
 *  request will be blocked. Otherwise the request is allowed. There are two
 *  types of Service Perimeter - Regular and Bridge. Regular Service Perimeters
 *  cannot overlap, a single Google Cloud project or VPC network can only belong
 *  to a single regular Service Perimeter. Service Perimeter Bridges can contain
 *  only Google Cloud projects as members, a single Google Cloud project may
 *  belong to multiple Service Perimeter Bridges.
 */
@interface GTLRAccessContextManager_ServicePerimeter : GTLRObject

/**
 *  Description of the `ServicePerimeter` and its use. Does not affect behavior.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Identifier. Resource name for the `ServicePerimeter`. Format:
 *  `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The
 *  `service_perimeter` component must begin with a letter, followed by
 *  alphanumeric characters or `_`. After you create a `ServicePerimeter`, you
 *  cannot change its `name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Perimeter type indicator. A single project or VPC network is allowed to be a
 *  member of single regular perimeter, but multiple service perimeter bridges.
 *  A project cannot be a included in a perimeter bridge without being included
 *  in regular perimeter. For perimeter bridges, the restricted service list as
 *  well as access level lists must be empty.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_ServicePerimeter_PerimeterType_PerimeterTypeBridge
 *        Perimeter Bridge. (Value: "PERIMETER_TYPE_BRIDGE")
 *    @arg @c kGTLRAccessContextManager_ServicePerimeter_PerimeterType_PerimeterTypeRegular
 *        Regular Perimeter. When no value is specified, the perimeter uses this
 *        type. (Value: "PERIMETER_TYPE_REGULAR")
 */
@property(nonatomic, copy, nullable) NSString *perimeterType;

/**
 *  Proposed (or dry run) ServicePerimeter configuration. This configuration
 *  allows to specify and test ServicePerimeter configuration without enforcing
 *  actual access restrictions. Only allowed to be set when the
 *  "use_explicit_dry_run_spec" flag is set.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_ServicePerimeterConfig *spec;

/**
 *  Current ServicePerimeter configuration. Specifies sets of resources,
 *  restricted services and access levels that determine perimeter content and
 *  boundaries.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_ServicePerimeterConfig *status;

/** Human readable title. Must be unique within the Policy. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
 *  for all Service Perimeters, and that spec is identical to the status for
 *  those Service Perimeters. When this flag is set, it inhibits the generation
 *  of the implicit spec, thereby allowing the user to explicitly provide a
 *  configuration ("spec") to use in a dry-run version of the Service Perimeter.
 *  This allows the user to test changes to the enforced config ("status")
 *  without actually enforcing them. This testing is done through analyzing the
 *  differences between currently enforced and suggested restrictions.
 *  use_explicit_dry_run_spec must bet set to True if any of the fields in the
 *  spec are set to non-default values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useExplicitDryRunSpec;

@end


/**
 *  `ServicePerimeterConfig` specifies a set of Google Cloud resources that
 *  describe specific Service Perimeter configuration.
 */
@interface GTLRAccessContextManager_ServicePerimeterConfig : GTLRObject

/**
 *  A list of `AccessLevel` resource names that allow resources within the
 *  `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed
 *  must be in the same policy as this `ServicePerimeter`. Referencing a
 *  nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are
 *  listed, resources within the perimeter can only be accessed via Google Cloud
 *  calls with request origins within the perimeter. Example:
 *  `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`. For Service Perimeter
 *  Bridge, must be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessLevels;

/**
 *  List of EgressPolicies to apply to the perimeter. A perimeter may have
 *  multiple EgressPolicies, each of which is evaluated separately. Access is
 *  granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_EgressPolicy *> *egressPolicies;

/**
 *  List of IngressPolicies to apply to the perimeter. A perimeter may have
 *  multiple IngressPolicies, each of which is evaluated separately. Access is
 *  granted if any Ingress Policy grants it. Must be empty for a perimeter
 *  bridge.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_IngressPolicy *> *ingressPolicies;

/**
 *  A list of Google Cloud resources that are inside of the service perimeter.
 *  Currently only projects and VPCs are allowed. Project format:
 *  `projects/{project_number}` VPC network format:
 *  `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resources;

/**
 *  Google Cloud services that are subject to the Service Perimeter
 *  restrictions. For example, if `storage.googleapis.com` is specified, access
 *  to the storage buckets inside the perimeter must meet the perimeter's access
 *  restrictions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *restrictedServices;

/** Configuration for APIs allowed within Perimeter. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_VpcAccessibleServices *vpcAccessibleServices;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRAccessContextManager_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRAccessContextManager_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRAccessContextManager_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAccessContextManager_Status_Details_Item : GTLRObject
@end


/**
 *  `SupportedService` specifies the VPC Service Controls and its properties.
 */
@interface GTLRAccessContextManager_SupportedService : GTLRObject

/**
 *  True if the service is available on the restricted VIP. Services on the
 *  restricted VIP typically either support VPC Service Controls or are core
 *  infrastructure services required for the functioning of Google Cloud.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *availableOnRestrictedVip;

/**
 *  True if the service is supported with some limitations. Check
 *  [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products)
 *  for details.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *knownLimitations;

/**
 *  The service name or address of the supported service, such as
 *  `service.googleapis.com`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The support stage of the service.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. (Value:
 *        "DEPRECATED")
 *    @arg @c kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Ga
 *        GA features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRAccessContextManager_SupportedService_ServiceSupportStage_Preview
 *        PREVIEW indicates a pre-release stage where the product is
 *        functionally complete but undergoing real-world testing. (Value:
 *        "PREVIEW")
 *    @arg @c kGTLRAccessContextManager_SupportedService_ServiceSupportStage_ServiceSupportStageUnspecified
 *        Do not use this default value. (Value:
 *        "SERVICE_SUPPORT_STAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *serviceSupportStage;

/**
 *  The list of the supported methods. This field exists only in response to
 *  GetSupportedService
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAccessContextManager_MethodSelector *> *supportedMethods;

/**
 *  The support stage of the service.
 *
 *  Likely values:
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Alpha
 *        Alpha is a limited availability test for releases before they are
 *        cleared for widespread use. By Alpha, all significant design issues
 *        are resolved and we are in the process of verifying functionality.
 *        Alpha customers need to apply for access, agree to applicable terms,
 *        and have their projects allowlisted. Alpha releases don't have to be
 *        feature complete, no SLAs are provided, and there are no technical
 *        support obligations, but they will be far enough along that customers
 *        can actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Beta Beta
 *        is the point at which we are ready to open a release for any customer
 *        to use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Ga GA
 *        features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRAccessContextManager_SupportedService_SupportStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *supportStage;

/** The name of the supported product, such as 'Cloud Product API'. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRAccessContextManager_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRAccessContextManager_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Specifies how APIs are allowed to communicate within the Service Perimeter.
 */
@interface GTLRAccessContextManager_VpcAccessibleServices : GTLRObject

/**
 *  The list of APIs usable within the Service Perimeter. Must be empty unless
 *  'enable_restriction' is True. You can specify a list of individual services,
 *  as well as include the 'RESTRICTED-SERVICES' value, which automatically
 *  includes all of the services protected by the perimeter.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedServices;

/**
 *  Whether to restrict API calls within the Service Perimeter to the list of
 *  APIs specified in 'allowed_services'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableRestriction;

@end


/**
 *  The originating network source in Google Cloud.
 */
@interface GTLRAccessContextManager_VpcNetworkSource : GTLRObject

/** Sub-segment ranges of a VPC network. */
@property(nonatomic, strong, nullable) GTLRAccessContextManager_VpcSubNetwork *vpcSubnetwork;

@end


/**
 *  Sub-segment ranges inside of a VPC Network.
 */
@interface GTLRAccessContextManager_VpcSubNetwork : GTLRObject

/**
 *  Required. Network name. If the network is not part of the organization, the
 *  `compute.network.get` permission must be granted to the caller. Format:
 *  `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NETWORK_NAME}`
 *  Example:
 *  `//compute.googleapis.com/projects/my-project/global/networks/network-1`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  CIDR block IP subnetwork specification. The IP address must be an IPv4
 *  address and can be a public or private IP address. Note that for a CIDR IP
 *  address block, the specified IP address portion must be properly truncated
 *  (i.e. all the host bits must be zero) or the input is considered malformed.
 *  For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. If empty,
 *  all IP addresses are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *vpcIpSubnetworks;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
