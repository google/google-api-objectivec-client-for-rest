// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Healthcare API (healthcare/v1)
// Description:
//   Manage, store, and access healthcare data in Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/healthcare

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudHealthcareObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Server responses include only the name field.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewBasic;
/**
 *  Server responses include all the message fields.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewFull;
/**
 *  Not specified, equivalent to FULL.
 *
 *  Value: "MESSAGE_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewMessageViewUnspecified;
/**
 *  Server responses include all the message fields except data field, and
 *  schematized_data fields.
 *
 *  Value: "PARSED_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewParsedOnly;
/**
 *  Server responses include all the message fields except parsed_data field,
 *  and schematized_data fields.
 *
 *  Value: "RAW_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewRawOnly;
/**
 *  Server responses include all the message fields except data and parsed_data
 *  fields.
 *
 *  Value: "SCHEMATIZED_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudHealthcareViewSchematizedOnly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Healthcare query classes.
 */
@interface GTLRCloudHealthcareQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new Attribute definition in the parent consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsCreate : GTLRCloudHealthcareQuery

/**
 *  Required. The ID of the Attribute definition to create. The string must
 *  match the following regex: `_a-zA-Z{0,255}` and must not be a reserved
 *  keyword within the Common Expression Language as listed on
 *  https://github.com/google/cel-spec/blob/master/doc/langdef.md.
 */
@property(nonatomic, copy, nullable) NSString *attributeDefinitionId;

/**
 *  Required. The name of the consent store that this Attribute definition
 *  belongs to.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_AttributeDefinition.
 *
 *  Creates a new Attribute definition in the parent consent store.
 *
 *  @param object The @c GTLRCloudHealthcare_AttributeDefinition to include in
 *    the query.
 *  @param parent Required. The name of the consent store that this Attribute
 *    definition belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_AttributeDefinition *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified Attribute definition. Fails if the Attribute
 *  definition is referenced by any User data mapping, or the latest revision of
 *  any Consent.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsDelete : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Attribute definition to delete. To
 *  preserve referential integrity, Attribute definitions referenced by a User
 *  data mapping or the latest revision of a Consent cannot be deleted.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified Attribute definition. Fails if the Attribute
 *  definition is referenced by any User data mapping, or the latest revision of
 *  any Consent.
 *
 *  @param name Required. The resource name of the Attribute definition to
 *    delete. To preserve referential integrity, Attribute definitions
 *    referenced by a User data mapping or the latest revision of a Consent
 *    cannot be deleted.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified Attribute definition.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsGet : GTLRCloudHealthcareQuery

/** Required. The resource name of the Attribute definition to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_AttributeDefinition.
 *
 *  Gets the specified Attribute definition.
 *
 *  @param name Required. The resource name of the Attribute definition to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Attribute definitions in the specified consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsList : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the attributes returned to those matching a filter. The
 *  only field available for filtering is `category`. For example,
 *  `filter=category=\\"REQUEST\\"`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Limit on the number of Attribute definitions to return in a single
 *  response. If not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to retrieve the next page of results or empty to get the
 *  first page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the consent store to retrieve Attribute definitions from.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListAttributeDefinitionsResponse.
 *
 *  Lists the Attribute definitions in the specified consent store.
 *
 *  @param parent Required. Name of the consent store to retrieve Attribute
 *    definitions from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified Attribute definition.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the Attribute definition, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`.
 *  Cannot be changed after creation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask that applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *  Only the `description`, `allowed_values`, `consent_default_values` and
 *  `data_mapping_default_value` fields can be updated. The updated
 *  `allowed_values` must contain all values from the previous `allowed_values`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_AttributeDefinition.
 *
 *  Updates the specified Attribute definition.
 *
 *  @param object The @c GTLRCloudHealthcare_AttributeDefinition to include in
 *    the query.
 *  @param name Resource name of the Attribute definition, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`.
 *    Cannot be changed after creation.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresAttributeDefinitionsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_AttributeDefinition *)object
                           name:(NSString *)name;

@end

/**
 *  Checks if a particular data_id of a User data mapping in the specified
 *  consent store is consented for the specified use.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.checkDataAccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresCheckDataAccess : GTLRCloudHealthcareQuery

/**
 *  Required. Name of the consent store where the requested data_id is stored,
 *  of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *consentStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_CheckDataAccessResponse.
 *
 *  Checks if a particular data_id of a User data mapping in the specified
 *  consent store is consented for the specified use.
 *
 *  @param object The @c GTLRCloudHealthcare_CheckDataAccessRequest to include
 *    in the query.
 *  @param consentStore Required. Name of the consent store where the requested
 *    data_id is stored, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresCheckDataAccess
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CheckDataAccessRequest *)object
                   consentStore:(NSString *)consentStore;

@end

/**
 *  Creates a new Consent artifact in the parent consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consentArtifacts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsCreate : GTLRCloudHealthcareQuery

/**
 *  Required. The name of the consent store this Consent artifact belongs to.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ConsentArtifact.
 *
 *  Creates a new Consent artifact in the parent consent store.
 *
 *  @param object The @c GTLRCloudHealthcare_ConsentArtifact to include in the
 *    query.
 *  @param parent Required. The name of the consent store this Consent artifact
 *    belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ConsentArtifact *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified Consent artifact. Fails if the artifact is referenced
 *  by the latest revision of any Consent.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsDelete : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent artifact to delete. To preserve
 *  referential integrity, Consent artifacts referenced by the latest revision
 *  of a Consent cannot be deleted.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified Consent artifact. Fails if the artifact is referenced
 *  by the latest revision of any Consent.
 *
 *  @param name Required. The resource name of the Consent artifact to delete.
 *    To preserve referential integrity, Consent artifacts referenced by the
 *    latest revision of a Consent cannot be deleted.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified Consent artifact.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consentArtifacts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsGet : GTLRCloudHealthcareQuery

/** Required. The resource name of the Consent artifact to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_ConsentArtifact.
 *
 *  Gets the specified Consent artifact.
 *
 *  @param name Required. The resource name of the Consent artifact to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Consent artifacts in the specified consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consentArtifacts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsList : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the artifacts returned to those matching a filter. The
 *  following syntax is available: * A string field value can be written as text
 *  inside quotation marks, for example `"query text"`. The only valid
 *  relational operation for text fields is equality (`=`), where text is
 *  searched within the field, rather than having the field be equal to the
 *  text. For example, `"Comment = great"` returns messages with `great` in the
 *  comment field. * A number field value can be written as an integer, a
 *  decimal, or an exponential. The valid relational operators for number fields
 *  are the equality operator (`=`), along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * A date field value must be written in `yyyy-mm-dd` form. Fields with date
 *  and time use the RFC3339 time format. Leading zeros are required for
 *  one-digit months and days. The valid relational operators for date fields
 *  are the equality operator (`=`) , along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * Multiple field query expressions can be combined in one query by adding
 *  `AND` or `OR` operators between the expressions. If a boolean operator
 *  appears within a quoted string, it is not treated as special, it's just
 *  another part of the character string to be matched. You can prepend the
 *  `NOT` operator to an expression to negate it. The fields available for
 *  filtering are: - user_id. For example, `filter=user_id=\\"user123\\"`. -
 *  consent_content_version - metadata. For example,
 *  `filter=Metadata(\\"testkey\\")=\\"value\\"` or
 *  `filter=HasMetadata(\\"testkey\\")`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Limit on the number of consent artifacts to return in a single
 *  response. If not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from the previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the consent store to retrieve consent artifacts from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListConsentArtifactsResponse.
 *
 *  Lists the Consent artifacts in the specified consent store.
 *
 *  @param parent Required. Name of the consent store to retrieve consent
 *    artifacts from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentArtifactsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Activates the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `ACTIVE`. If the latest revision of the
 *  specified Consent is in the `ACTIVE` state, no new revision is committed. A
 *  FAILED_PRECONDITION error occurs if the latest revision of the specified
 *  Consent is in the `REJECTED` or `REVOKED` state.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsActivate : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent to activate, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Activates the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `ACTIVE`. If the latest revision of the
 *  specified Consent is in the `ACTIVE` state, no new revision is committed. A
 *  FAILED_PRECONDITION error occurs if the latest revision of the specified
 *  Consent is in the `REJECTED` or `REVOKED` state.
 *
 *  @param object The @c GTLRCloudHealthcare_ActivateConsentRequest to include
 *    in the query.
 *  @param name Required. The resource name of the Consent to activate, of the
 *    form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    An INVALID_ARGUMENT error occurs if `revision_id` is specified in the
 *    name.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsActivate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ActivateConsentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Consent in the parent consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsCreate : GTLRCloudHealthcareQuery

/** Required. Name of the consent store. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Creates a new Consent in the parent consent store.
 *
 *  @param object The @c GTLRCloudHealthcare_Consent to include in the query.
 *  @param parent Required. Name of the consent store.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Consent *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the Consent and its revisions. To keep a record of the Consent but
 *  mark it inactive, see [RevokeConsent]. To delete a revision of a Consent,
 *  see [DeleteConsentRevision]. This operation does not delete the related
 *  Consent artifact.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsDelete : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent to delete, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the Consent and its revisions. To keep a record of the Consent but
 *  mark it inactive, see [RevokeConsent]. To delete a revision of a Consent,
 *  see [DeleteConsentRevision]. This operation does not delete the related
 *  Consent artifact.
 *
 *  @param name Required. The resource name of the Consent to delete, of the
 *    form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    An INVALID_ARGUMENT error occurs if `revision_id` is specified in the
 *    name.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes the specified revision of a Consent. An INVALID_ARGUMENT error
 *  occurs if the specified revision is the latest revision.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.deleteRevision
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsDeleteRevision : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent revision to delete, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\@{revision_id}`.
 *  An INVALID_ARGUMENT error occurs if `revision_id` is not specified in the
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified revision of a Consent. An INVALID_ARGUMENT error
 *  occurs if the specified revision is the latest revision.
 *
 *  @param name Required. The resource name of the Consent revision to delete,
 *    of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\@{revision_id}`.
 *    An INVALID_ARGUMENT error occurs if `revision_id` is not specified in the
 *    name.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsDeleteRevision
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified revision of a Consent, or the latest revision if
 *  `revision_id` is not specified in the resource name.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsGet : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent to retrieve, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  In order to retrieve a previous revision of the Consent, also provide the
 *  revision ID:
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\@{revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Gets the specified revision of a Consent, or the latest revision if
 *  `revision_id` is not specified in the resource name.
 *
 *  @param name Required. The resource name of the Consent to retrieve, of the
 *    form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    In order to retrieve a previous revision of the Consent, also provide the
 *    revision ID:
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\@{revision_id}`
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Consent in the given consent store, returning each Consent's
 *  latest revision.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsList : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the Consents returned to those matching a filter. The
 *  following syntax is available: * A string field value can be written as text
 *  inside quotation marks, for example `"query text"`. The only valid
 *  relational operation for text fields is equality (`=`), where text is
 *  searched within the field, rather than having the field be equal to the
 *  text. For example, `"Comment = great"` returns messages with `great` in the
 *  comment field. * A number field value can be written as an integer, a
 *  decimal, or an exponential. The valid relational operators for number fields
 *  are the equality operator (`=`), along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * A date field value must be written in `yyyy-mm-dd` form. Fields with date
 *  and time use the RFC3339 time format. Leading zeros are required for
 *  one-digit months and days. The valid relational operators for date fields
 *  are the equality operator (`=`) , along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * Multiple field query expressions can be combined in one query by adding
 *  `AND` or `OR` operators between the expressions. If a boolean operator
 *  appears within a quoted string, it is not treated as special, it's just
 *  another part of the character string to be matched. You can prepend the
 *  `NOT` operator to an expression to negate it. The fields available for
 *  filtering are: - user_id. For example, `filter='user_id="user123"'`. -
 *  consent_artifact - state - revision_create_time - metadata. For example,
 *  `filter=Metadata(\\"testkey\\")=\\"value\\"` or
 *  `filter=HasMetadata(\\"testkey\\")`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Limit on the number of Consents to return in a single response. If
 *  not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The next_page_token value returned from the previous List request,
 *  if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the consent store to retrieve Consents from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListConsentsResponse.
 *
 *  Lists the Consent in the given consent store, returning each Consent's
 *  latest revision.
 *
 *  @param parent Required. Name of the consent store to retrieve Consents from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists the revisions of the specified Consent in reverse chronological order.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.listRevisions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsListRevisions : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the revisions returned to those matching a filter. The
 *  following syntax is available: * A string field value can be written as text
 *  inside quotation marks, for example `"query text"`. The only valid
 *  relational operation for text fields is equality (`=`), where text is
 *  searched within the field, rather than having the field be equal to the
 *  text. For example, `"Comment = great"` returns messages with `great` in the
 *  comment field. * A number field value can be written as an integer, a
 *  decimal, or an exponential. The valid relational operators for number fields
 *  are the equality operator (`=`), along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * A date field value must be written in `yyyy-mm-dd` form. Fields with date
 *  and time use the RFC3339 time format. Leading zeros are required for
 *  one-digit months and days. The valid relational operators for date fields
 *  are the equality operator (`=`) , along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * Multiple field query expressions can be combined in one query by adding
 *  `AND` or `OR` operators between the expressions. If a boolean operator
 *  appears within a quoted string, it is not treated as special, it's just
 *  another part of the character string to be matched. You can prepend the
 *  `NOT` operator to an expression to negate it. Fields available for filtering
 *  are: - user_id. For example, `filter='user_id="user123"'`. -
 *  consent_artifact - state - revision_create_time - metadata. For example,
 *  `filter=Metadata(\\"testkey\\")=\\"value\\"` or
 *  `filter=HasMetadata(\\"testkey\\")`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Required. The resource name of the Consent to retrieve revisions for. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Limit on the number of revisions to return in a single response.
 *  If not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to retrieve the next page of results or empty if there are
 *  no more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListConsentRevisionsResponse.
 *
 *  Lists the revisions of the specified Consent in reverse chronological order.
 *
 *  @param name Required. The resource name of the Consent to retrieve revisions
 *    for.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsListRevisions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the latest revision of the specified Consent by committing a new
 *  revision with the changes. A FAILED_PRECONDITION error occurs if the latest
 *  revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the Consent, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  Cannot be changed after creation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask to apply to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *  Only the `user_id`, `policies`, `consent_artifact`, and `metadata` fields
 *  can be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Updates the latest revision of the specified Consent by committing a new
 *  revision with the changes. A FAILED_PRECONDITION error occurs if the latest
 *  revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
 *
 *  @param object The @c GTLRCloudHealthcare_Consent to include in the query.
 *  @param name Resource name of the Consent, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    Cannot be changed after creation.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Consent *)object
                           name:(NSString *)name;

@end

/**
 *  Rejects the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `REJECTED`. If the latest revision of the
 *  specified Consent is in the `REJECTED` state, no new revision is committed.
 *  A FAILED_PRECONDITION error occurs if the latest revision of the specified
 *  Consent is in the `ACTIVE` or `REVOKED` state.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.reject
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsReject : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent to reject, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Rejects the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `REJECTED`. If the latest revision of the
 *  specified Consent is in the `REJECTED` state, no new revision is committed.
 *  A FAILED_PRECONDITION error occurs if the latest revision of the specified
 *  Consent is in the `ACTIVE` or `REVOKED` state.
 *
 *  @param object The @c GTLRCloudHealthcare_RejectConsentRequest to include in
 *    the query.
 *  @param name Required. The resource name of the Consent to reject, of the
 *    form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    An INVALID_ARGUMENT error occurs if `revision_id` is specified in the
 *    name.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsReject
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_RejectConsentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Revokes the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `REVOKED`. If the latest revision of the
 *  specified Consent is in the `REVOKED` state, no new revision is committed. A
 *  FAILED_PRECONDITION error occurs if the latest revision of the given consent
 *  is in `DRAFT` or `REJECTED` state.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.consents.revoke
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsRevoke : GTLRCloudHealthcareQuery

/**
 *  Required. The resource name of the Consent to revoke, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *  An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Consent.
 *
 *  Revokes the latest revision of the specified Consent by committing a new
 *  revision with `state` updated to `REVOKED`. If the latest revision of the
 *  specified Consent is in the `REVOKED` state, no new revision is committed. A
 *  FAILED_PRECONDITION error occurs if the latest revision of the given consent
 *  is in `DRAFT` or `REJECTED` state.
 *
 *  @param object The @c GTLRCloudHealthcare_RevokeConsentRequest to include in
 *    the query.
 *  @param name Required. The resource name of the Consent to revoke, of the
 *    form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
 *    An INVALID_ARGUMENT error occurs if `revision_id` is specified in the
 *    name.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresConsentsRevoke
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_RevokeConsentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new consent store in the parent dataset. Attempting to create a
 *  consent store with the same ID as an existing store fails with an
 *  ALREADY_EXISTS error.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresCreate : GTLRCloudHealthcareQuery

/**
 *  Required. The ID of the consent store to create. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`. Cannot be changed after
 *  creation.
 */
@property(nonatomic, copy, nullable) NSString *consentStoreId;

/** Required. The name of the dataset this consent store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ConsentStore.
 *
 *  Creates a new consent store in the parent dataset. Attempting to create a
 *  consent store with the same ID as an existing store fails with an
 *  ALREADY_EXISTS error.
 *
 *  @param object The @c GTLRCloudHealthcare_ConsentStore to include in the
 *    query.
 *  @param parent Required. The name of the dataset this consent store belongs
 *    to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ConsentStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified consent store and removes all the consent store's
 *  data.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresDelete : GTLRCloudHealthcareQuery

/** Required. The resource name of the consent store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified consent store and removes all the consent store's
 *  data.
 *
 *  @param name Required. The resource name of the consent store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Evaluates the user's Consents for all matching User data mappings. Note:
 *  User data mappings are indexed asynchronously, which can cause a slight
 *  delay between the time mappings are created or updated and when they are
 *  included in EvaluateUserConsents results.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.evaluateUserConsents
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresEvaluateUserConsents : GTLRCloudHealthcareQuery

/**
 *  Required. Name of the consent store to retrieve User data mappings from.
 */
@property(nonatomic, copy, nullable) NSString *consentStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_EvaluateUserConsentsResponse.
 *
 *  Evaluates the user's Consents for all matching User data mappings. Note:
 *  User data mappings are indexed asynchronously, which can cause a slight
 *  delay between the time mappings are created or updated and when they are
 *  included in EvaluateUserConsents results.
 *
 *  @param object The @c GTLRCloudHealthcare_EvaluateUserConsentsRequest to
 *    include in the query.
 *  @param consentStore Required. Name of the consent store to retrieve User
 *    data mappings from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresEvaluateUserConsents
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_EvaluateUserConsentsRequest *)object
                   consentStore:(NSString *)consentStore;

@end

/**
 *  Gets the specified consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresGet : GTLRCloudHealthcareQuery

/** Required. The resource name of the consent store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_ConsentStore.
 *
 *  Gets the specified consent store.
 *
 *  @param name Required. The resource name of the consent store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresGetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists the consent stores in the specified dataset.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresList : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the stores returned to those matching a filter. Only
 *  filtering on labels is supported. For example, `filter=labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Limit on the number of consent stores to return in a single
 *  response. If not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to retrieve the next page of results, or empty to get the
 *  first page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListConsentStoresResponse.
 *
 *  Lists the consent stores in the specified dataset.
 *
 *  @param parent Required. Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the consent store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 *  Cannot be changed after creation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask that applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *  Only the `labels`, `default_consent_ttl`, and
 *  `enable_consent_create_on_update` fields are allowed to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_ConsentStore.
 *
 *  Updates the specified consent store.
 *
 *  @param object The @c GTLRCloudHealthcare_ConsentStore to include in the
 *    query.
 *  @param name Resource name of the consent store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 *    Cannot be changed after creation.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ConsentStore *)object
                           name:(NSString *)name;

@end

/**
 *  Queries all data_ids that are consented for a specified use in the given
 *  consent store and writes them to a specified destination. The returned
 *  Operation includes a progress counter for the number of User data mappings
 *  processed. If the request is successful, a detailed response is returned of
 *  type QueryAccessibleDataResponse, contained in the response field when the
 *  operation finishes. The metadata field type is OperationMetadata. Errors are
 *  logged to Cloud Logging (see [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For
 *  example, the following sample log entry shows a `failed to evaluate consent
 *  policy` error that occurred during a QueryAccessibleData call to consent
 *  store
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 *  ```json jsonPayload: { \@type:
 *  "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry"
 *  error: { code: 9 message: "failed to evaluate consent policy" }
 *  resourceName:
 *  "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}"
 *  } logName:
 *  "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data"
 *  operation: { id:
 *  "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}"
 *  producer: "healthcare.googleapis.com/QueryAccessibleData" }
 *  receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id:
 *  "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}"
 *  project_id: "{project_id}" } type: "healthcare_consent_store" } severity:
 *  "ERROR" timestamp: "TIMESTAMP" ```
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.queryAccessibleData
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresQueryAccessibleData : GTLRCloudHealthcareQuery

/**
 *  Required. Name of the consent store to retrieve User data mappings from.
 */
@property(nonatomic, copy, nullable) NSString *consentStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Queries all data_ids that are consented for a specified use in the given
 *  consent store and writes them to a specified destination. The returned
 *  Operation includes a progress counter for the number of User data mappings
 *  processed. If the request is successful, a detailed response is returned of
 *  type QueryAccessibleDataResponse, contained in the response field when the
 *  operation finishes. The metadata field type is OperationMetadata. Errors are
 *  logged to Cloud Logging (see [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For
 *  example, the following sample log entry shows a `failed to evaluate consent
 *  policy` error that occurred during a QueryAccessibleData call to consent
 *  store
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
 *  ```json jsonPayload: { \@type:
 *  "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry"
 *  error: { code: 9 message: "failed to evaluate consent policy" }
 *  resourceName:
 *  "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}"
 *  } logName:
 *  "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data"
 *  operation: { id:
 *  "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}"
 *  producer: "healthcare.googleapis.com/QueryAccessibleData" }
 *  receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id:
 *  "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}"
 *  project_id: "{project_id}" } type: "healthcare_consent_store" } severity:
 *  "ERROR" timestamp: "TIMESTAMP" ```
 *
 *  @param object The @c GTLRCloudHealthcare_QueryAccessibleDataRequest to
 *    include in the query.
 *  @param consentStore Required. Name of the consent store to retrieve User
 *    data mappings from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresQueryAccessibleData
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_QueryAccessibleDataRequest *)object
                   consentStore:(NSString *)consentStore;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresSetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresTestIamPermissions : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Archives the specified User data mapping.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.archive
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsArchive : GTLRCloudHealthcareQuery

/** Required. The resource name of the User data mapping to archive. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_ArchiveUserDataMappingResponse.
 *
 *  Archives the specified User data mapping.
 *
 *  @param object The @c GTLRCloudHealthcare_ArchiveUserDataMappingRequest to
 *    include in the query.
 *  @param name Required. The resource name of the User data mapping to archive.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsArchive
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ArchiveUserDataMappingRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new User data mapping in the parent consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsCreate : GTLRCloudHealthcareQuery

/** Required. Name of the consent store. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_UserDataMapping.
 *
 *  Creates a new User data mapping in the parent consent store.
 *
 *  @param object The @c GTLRCloudHealthcare_UserDataMapping to include in the
 *    query.
 *  @param parent Required. Name of the consent store.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_UserDataMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified User data mapping.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsDelete : GTLRCloudHealthcareQuery

/** Required. The resource name of the User data mapping to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified User data mapping.
 *
 *  @param name Required. The resource name of the User data mapping to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified User data mapping.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsGet : GTLRCloudHealthcareQuery

/** Required. The resource name of the User data mapping to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_UserDataMapping.
 *
 *  Gets the specified User data mapping.
 *
 *  @param name Required. The resource name of the User data mapping to
 *    retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the User data mappings in the specified consent store.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsList : GTLRCloudHealthcareQuery

/**
 *  Optional. Restricts the User data mappings returned to those matching a
 *  filter. The following syntax is available: * A string field value can be
 *  written as text inside quotation marks, for example `"query text"`. The only
 *  valid relational operation for text fields is equality (`=`), where text is
 *  searched within the field, rather than having the field be equal to the
 *  text. For example, `"Comment = great"` returns messages with `great` in the
 *  comment field. * A number field value can be written as an integer, a
 *  decimal, or an exponential. The valid relational operators for number fields
 *  are the equality operator (`=`), along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * A date field value must be written in `yyyy-mm-dd` form. Fields with date
 *  and time use the RFC3339 time format. Leading zeros are required for
 *  one-digit months and days. The valid relational operators for date fields
 *  are the equality operator (`=`) , along with the less than/greater than
 *  operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`)
 *  operator. You can prepend the `NOT` operator to an expression to negate it.
 *  * Multiple field query expressions can be combined in one query by adding
 *  `AND` or `OR` operators between the expressions. If a boolean operator
 *  appears within a quoted string, it is not treated as special, it's just
 *  another part of the character string to be matched. You can prepend the
 *  `NOT` operator to an expression to negate it. The fields available for
 *  filtering are: - data_id - user_id. For example,
 *  `filter=user_id=\\"user123\\"`. - archived - archive_time
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Limit on the number of User data mappings to return in a single
 *  response. If not specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token to retrieve the next page of results, or empty to get the
 *  first page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the consent store to retrieve User data mappings from.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListUserDataMappingsResponse.
 *
 *  Lists the User data mappings in the specified consent store.
 *
 *  @param parent Required. Name of the consent store to retrieve User data
 *    mappings from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified User data mapping.
 *
 *  Method: healthcare.projects.locations.datasets.consentStores.userDataMappings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the User data mapping, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask that applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *  Only the `data_id`, `user_id` and `resource_attributes` fields can be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_UserDataMapping.
 *
 *  Updates the specified User data mapping.
 *
 *  @param object The @c GTLRCloudHealthcare_UserDataMapping to include in the
 *    query.
 *  @param name Resource name of the User data mapping, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsConsentStoresUserDataMappingsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_UserDataMapping *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new health dataset. Results are returned through the Operation
 *  interface which returns either an `Operation.response` which contains a
 *  Dataset or `Operation.error`. The metadata field type is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate : GTLRCloudHealthcareQuery

/**
 *  The ID of the dataset that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The name of the project where the server creates the dataset. For example,
 *  `projects/{project_id}/locations/{location_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new health dataset. Results are returned through the Operation
 *  interface which returns either an `Operation.response` which contains a
 *  Dataset or `Operation.error`. The metadata field type is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param parent The name of the project where the server creates the dataset.
 *    For example, `projects/{project_id}/locations/{location_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new dataset containing de-identified data from the source dataset.
 *  The metadata field type is OperationMetadata. If the request is successful,
 *  the response field type is DeidentifySummary. If errors occur, error is set.
 *  The LRO result may still be successful if de-identification fails for some
 *  DICOM instances. The new de-identified dataset will not contain these failed
 *  resources. Failed resource totals are tracked in Operation.metadata. Error
 *  details are also logged to Cloud Logging. For more information, see [Viewing
 *  error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
 *
 *  Method: healthcare.projects.locations.datasets.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify : GTLRCloudHealthcareQuery

/**
 *  Source dataset resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceDataset;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Creates a new dataset containing de-identified data from the source dataset.
 *  The metadata field type is OperationMetadata. If the request is successful,
 *  the response field type is DeidentifySummary. If errors occur, error is set.
 *  The LRO result may still be successful if de-identification fails for some
 *  DICOM instances. The new de-identified dataset will not contain these failed
 *  resources. Failed resource totals are tracked in Operation.metadata. Error
 *  details are also logged to Cloud Logging. For more information, see [Viewing
 *  error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyDatasetRequest to include
 *    in the query.
 *  @param sourceDataset Source dataset resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyDatasetRequest *)object
                  sourceDataset:(NSString *)sourceDataset;

@end

/**
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  Method: healthcare.projects.locations.datasets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete : GTLRCloudHealthcareQuery

/**
 *  The name of the dataset to delete. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified health dataset and all data contained in the dataset.
 *  Deleting a dataset does not affect the sources from which the dataset was
 *  imported (if any).
 *
 *  @param name The name of the dataset to delete. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new DICOM store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate : GTLRCloudHealthcareQuery

/**
 *  The ID of the DICOM store that is being created. Any string value up to 256
 *  characters in length.
 */
@property(nonatomic, copy, nullable) NSString *dicomStoreId;

/** The name of the dataset this DICOM store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Creates a new DICOM store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param parent The name of the dataset this DICOM store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyDicomStoreSummary. If
 *  errors occur, error is set. The LRO result may still be successful if
 *  de-identification fails for some DICOM instances. The output DICOM store
 *  will not contain these failed resources. Failed resource totals are tracked
 *  in Operation.metadata. Error details are also logged to Cloud Logging (see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDeidentify : GTLRCloudHealthcareQuery

/**
 *  Source DICOM store resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyDicomStoreSummary. If
 *  errors occur, error is set. The LRO result may still be successful if
 *  de-identification fails for some DICOM instances. The output DICOM store
 *  will not contain these failed resources. Failed resource totals are tracked
 *  in Operation.metadata. Error details are also logged to Cloud Logging (see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyDicomStoreRequest to
 *    include in the query.
 *  @param sourceStore Source DICOM store resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyDicomStoreRequest *)object
                    sourceStore:(NSString *)sourceStore;

@end

/**
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete : GTLRCloudHealthcareQuery

/** The resource name of the DICOM store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified DICOM store and removes all images that are contained
 *  within it.
 *
 *  @param name The resource name of the DICOM store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports data to the specified destination by copying it from the DICOM
 *  store. Errors are also logged to Cloud Logging. For more information, see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
 *  metadata field type is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport : GTLRCloudHealthcareQuery

/**
 *  The DICOM store resource name from which to export the data. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Exports data to the specified destination by copying it from the DICOM
 *  store. Errors are also logged to Cloud Logging. For more information, see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
 *  metadata field type is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportDicomDataRequest to include
 *    in the query.
 *  @param name The DICOM store resource name from which to export the data. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet : GTLRCloudHealthcareQuery

/** The resource name of the DICOM store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Gets the specified DICOM store.
 *
 *  @param name The resource name of the DICOM store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports data into the DICOM store by copying it from the specified source.
 *  Errors are logged to Cloud Logging. For more information, see [Viewing error
 *  logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
 *  metadata field type is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport : GTLRCloudHealthcareQuery

/**
 *  The name of the DICOM store resource into which the data is imported. For
 *  example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Imports data into the DICOM store by copying it from the specified source.
 *  Errors are logged to Cloud Logging. For more information, see [Viewing error
 *  logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
 *  metadata field type is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportDicomDataRequest to include
 *    in the query.
 *  @param name The name of the DICOM store resource into which the data is
 *    imported. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportDicomDataRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the DICOM stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList : GTLRCloudHealthcareQuery

/**
 *  Restricts stores returned to those matching a filter. The following syntax
 *  is available: * A string field value can be written as text inside quotation
 *  marks, for example `"query text"`. The only valid relational operation for
 *  text fields is equality (`=`), where text is searched within the field,
 *  rather than having the field be equal to the text. For example, `"Comment =
 *  great"` returns messages with `great` in the comment field. * A number field
 *  value can be written as an integer, a decimal, or an exponential. The valid
 *  relational operators for number fields are the equality operator (`=`),
 *  along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note
 *  that there is no inequality (`!=`) operator. You can prepend the `NOT`
 *  operator to an expression to negate it. * A date field value must be written
 *  in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format.
 *  Leading zeros are required for one-digit months and days. The valid
 *  relational operators for date fields are the equality operator (`=`) , along
 *  with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that
 *  there is no inequality (`!=`) operator. You can prepend the `NOT` operator
 *  to an expression to negate it. * Multiple field query expressions can be
 *  combined in one query by adding `AND` or `OR` operators between the
 *  expressions. If a boolean operator appears within a quoted string, it is not
 *  treated as special, it's just another part of the character string to be
 *  matched. You can prepend the `NOT` operator to an expression to negate it.
 *  Only filtering on labels is supported. For example, `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of DICOM stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDicomStoresResponse.
 *
 *  Lists the DICOM stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified DICOM store.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the DICOM store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_DicomStore.
 *
 *  Updates the specified DICOM store.
 *
 *  @param object The @c GTLRCloudHealthcare_DicomStore to include in the query.
 *  @param name Resource name of the DICOM store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DicomStore *)object
                           name:(NSString *)name;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForInstances : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForSeries : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForSeries DICOMweb request. For example, `series` or
 *  `studies/{study_uid}/series`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForSeries DICOMweb request. For
 *    example, `series` or `studies/{study_uid}/series`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForStudies returns a list of matching studies. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForStudies, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForStudies, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.searchForStudies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForStudies : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForStudies DICOMweb request. For example, `studies`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForStudies returns a list of matching studies. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForStudies, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForStudies, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForStudies DICOMweb request. For
 *    example, `studies`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSearchForStudies
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.storeInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStoreInstances : GTLRCloudHealthcareQuery

/**
 *  The path of the StoreInstances DICOMweb request. For example,
 *  `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the StoreInstances DICOMweb request. For
 *    example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStoreInstances
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the Retrieve transaction.
 *  The method returns an Operation which will be marked successful when the
 *  deletion is complete. Warning: Instances cannot be inserted into a study
 *  that is being deleted by an operation until the operation completes. For
 *  samples that show how to call DeleteStudy, see [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesDelete : GTLRCloudHealthcareQuery

/**
 *  The path of the DeleteStudy request. For example, `studies/{study_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  DeleteStudy deletes all instances within the given study. Delete requests
 *  are equivalent to the GET requests specified in the Retrieve transaction.
 *  The method returns an Operation which will be marked successful when the
 *  deletion is complete. Warning: Instances cannot be inserted into a study
 *  that is being deleted by an operation until the operation completes. For
 *  samples that show how to call DeleteStudy, see [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent NSString
 *  @param dicomWebPath The path of the DeleteStudy request. For example,
 *    `studies/{study_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudyMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudyMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveMetadata : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveStudyMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudyMetadata returns instance associated with the given study
 *  presented as metadata with the bulk data removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudyMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudyMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveStudyMetadata DICOMweb request.
 *    For example, `studies/{study_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveStudy returns all instances within the given study. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudy, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudy, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveStudy : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveStudy DICOMweb request. For example,
 *  `studies/{study_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveStudy returns all instances within the given study. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveStudy, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveStudy, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveStudy DICOMweb request. For
 *    example, `studies/{study_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesRetrieveStudy
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForInstances : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForSeries : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForSeries DICOMweb request. For example, `series` or
 *  `studies/{study_uid}/series`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForSeries returns a list of matching series. See [Search Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForSeries, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForSeries, see [Searching for studies, series, instances, and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForSeries DICOMweb request. For
 *    example, `series` or `studies/{study_uid}/series`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSearchForSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteSeries deletes all instances within the given study and series. Delete
 *  requests are equivalent to the GET requests specified in the Retrieve
 *  transaction. The method returns an Operation which will be marked successful
 *  when the deletion is complete. Warning: Instances cannot be inserted into a
 *  series that is being deleted by an operation until the operation completes.
 *  For samples that show how to call DeleteSeries, see [Deleting a study,
 *  series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesDelete : GTLRCloudHealthcareQuery

/**
 *  The path of the DeleteSeries request. For example,
 *  `studies/{study_uid}/series/{series_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  DeleteSeries deletes all instances within the given study and series. Delete
 *  requests are equivalent to the GET requests specified in the Retrieve
 *  transaction. The method returns an Operation which will be marked successful
 *  when the deletion is complete. Warning: Instances cannot be inserted into a
 *  series that is being deleted by an operation until the operation completes.
 *  For samples that show how to call DeleteSeries, see [Deleting a study,
 *  series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the DeleteSeries request. For example,
 *    `studies/{study_uid}/series/{series_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the Retrieve transaction. Study and series search results can
 *  take a few seconds to be updated after an instance is deleted using
 *  DeleteInstance. For samples that show how to call DeleteInstance, see
 *  [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesDelete : GTLRCloudHealthcareQuery

/**
 *  The path of the DeleteInstance request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  DeleteInstance deletes an instance associated with the given study, series,
 *  and SOP Instance UID. Delete requests are equivalent to the GET requests
 *  specified in the Retrieve transaction. Study and series search results can
 *  take a few seconds to be updated after an instance is deleted using
 *  DeleteInstance. For samples that show how to call DeleteInstance, see
 *  [Deleting a study, series, or
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the DeleteInstance request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}.
 *  For details on the implementation of RetrieveFrames, see [DICOM
 *  frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the
 *  Cloud Healthcare API conformance statement. For samples that show how to
 *  call RetrieveFrames, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveFrames : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveFrames DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveFrames returns instances associated with the given study, series,
 *  SOP Instance UID and frame numbers. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}.
 *  For details on the implementation of RetrieveFrames, see [DICOM
 *  frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the
 *  Cloud Healthcare API conformance statement. For samples that show how to
 *  call RetrieveFrames, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveFrames DICOMweb request. For
 *    example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveFrames
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedFrames, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedFrames, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveRendered : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveRenderedFrames DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedFrames returns instances associated with the given study,
 *  series, SOP Instance UID and frame numbers in an acceptable Rendered Media
 *  Type. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedFrames, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedFrames, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveRenderedFrames DICOMweb request.
 *    For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesFramesRetrieveRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstance, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  and [DICOM
 *  instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstance, see [Retrieving an
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveInstance : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveInstance DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstance returns instance associated with the given study, series,
 *  and SOP Instance UID. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstance, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  and [DICOM
 *  instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstance, see [Retrieving an
 *  instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveInstance DICOMweb request. For
 *    example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveInstance
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstanceMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstanceMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveMetadata : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveInstanceMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveInstanceMetadata returns instance associated with the given study,
 *  series, and SOP Instance UID presented as metadata with the bulk data
 *  removed. See [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveInstanceMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveInstanceMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveInstanceMetadata DICOMweb
 *    request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedInstance, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedInstance, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveRendered : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveRenderedInstance DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveRenderedInstance returns instance associated with the given study,
 *  series, and SOP Instance UID in an acceptable Rendered Media Type. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveRenderedInstance, see [Rendered
 *  resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveRenderedInstance, see [Retrieving consumer image
 *  formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveRenderedInstance DICOMweb
 *    request. For example,
 *    `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesInstancesRetrieveRendered
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeriesMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeriesMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveMetadata : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveSeriesMetadata DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}/metadata`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeriesMetadata returns instance associated with the given study and
 *  series, presented as metadata with the bulk data removed. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeriesMetadata, see [Metadata
 *  resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeriesMetadata, see [Retrieving
 *  metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveSeriesMetadata DICOMweb request.
 *    For example, `studies/{study_uid}/series/{series_uid}/metadata`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  RetrieveSeries returns all instances within the given study and series. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeries, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeries, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveSeries : GTLRCloudHealthcareQuery

/**
 *  The path of the RetrieveSeries DICOMweb request. For example,
 *  `studies/{study_uid}/series/{series_uid}`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  RetrieveSeries returns all instances within the given study and series. See
 *  [RetrieveTransaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
 *  For details on the implementation of RetrieveSeries, see [DICOM
 *  study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call RetrieveSeries, see [Retrieving DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the RetrieveSeries DICOMweb request. For
 *    example, `studies/{study_uid}/series/{series_uid}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesRetrieveSeries
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesSearchForInstances : GTLRCloudHealthcareQuery

/**
 *  The path of the SearchForInstancesRequest DICOMweb request. For example,
 *  `instances`, `series/{series_uid}/instances`, or
 *  `studies/{study_uid}/instances`.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  SearchForInstances returns a list of matching instances. See [Search
 *  Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
 *  For details on the implementation of SearchForInstances, see [Search
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call SearchForInstances, see [Searching for studies, series, instances,
 *  and
 *  frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
 *
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the SearchForInstancesRequest DICOMweb
 *    request. For example, `instances`, `series/{series_uid}/instances`, or
 *    `studies/{study_uid}/instances`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesSeriesSearchForInstances
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.studies.storeInstances
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesStoreInstances : GTLRCloudHealthcareQuery

/**
 *  The path of the StoreInstances DICOMweb request. For example,
 *  `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 */
@property(nonatomic, copy, nullable) NSString *dicomWebPath;

/**
 *  The name of the DICOM store that is being accessed. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  StoreInstances stores DICOM instances associated with study instance unique
 *  identifiers (SUID). See [Store Transaction]
 *  (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
 *  For details on the implementation of StoreInstances, see [Store
 *  transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
 *  in the Cloud Healthcare API conformance statement. For samples that show how
 *  to call StoreInstances, see [Storing DICOM
 *  data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the DICOM store that is being accessed. For
 *    example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 *  @param dicomWebPath The path of the StoreInstances DICOMweb request. For
 *    example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresStudiesStoreInstances
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                   dicomWebPath:(NSString *)dicomWebPath;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsDicomStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a new FHIR store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate : GTLRCloudHealthcareQuery

/**
 *  The ID of the FHIR store that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *fhirStoreId;

/** The name of the dataset this FHIR store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Creates a new FHIR store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param parent The name of the dataset this FHIR store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyFhirStoreSummary. If errors
 *  occur, error is set. Error details are also logged to Cloud Logging (see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.deidentify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDeidentify : GTLRCloudHealthcareQuery

/**
 *  Source FHIR store resource name. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceStore;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  De-identifies data from the source store and writes it to the destination
 *  store. The metadata field type is OperationMetadata. If the request is
 *  successful, the response field type is DeidentifyFhirStoreSummary. If errors
 *  occur, error is set. Error details are also logged to Cloud Logging (see
 *  [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *
 *  @param object The @c GTLRCloudHealthcare_DeidentifyFhirStoreRequest to
 *    include in the query.
 *  @param sourceStore Source FHIR store resource name. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDeidentify
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_DeidentifyFhirStoreRequest *)object
                    sourceStore:(NSString *)sourceStore;

@end

/**
 *  Deletes the specified FHIR store and removes all resources within it.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete : GTLRCloudHealthcareQuery

/** The resource name of the FHIR store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified FHIR store and removes all resources within it.
 *
 *  @param name The resource name of the FHIR store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Export resources from the FHIR store to the specified destination. This
 *  method returns an Operation that can be used to track the status of the
 *  export by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing error logs in
 *  Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a detailed response of type
 *  ExportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport : GTLRCloudHealthcareQuery

/**
 *  The name of the FHIR store to export resource from, in the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Export resources from the FHIR store to the specified destination. This
 *  method returns an Operation that can be used to track the status of the
 *  export by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing error logs in
 *  Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a detailed response of type
 *  ExportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to export resource from, in the
 *    format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the FHIR capability statement
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
 *  or the [conformance
 *  statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
 *  in the DSTU2 case for the store, which contains a description of
 *  functionality supported by the server. Implements the FHIR standard
 *  capabilities interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or
 *  the [conformance
 *  interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
 *  in the DSTU2 case. On success, the response body contains a JSON-encoded
 *  representation of a `CapabilityStatement` resource.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.capabilities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCapabilities : GTLRCloudHealthcareQuery

/** Name of the FHIR store to retrieve the capabilities for. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the FHIR capability statement
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
 *  or the [conformance
 *  statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
 *  in the DSTU2 case for the store, which contains a description of
 *  functionality supported by the server. Implements the FHIR standard
 *  capabilities interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or
 *  the [conformance
 *  interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
 *  in the DSTU2 case. On success, the response body contains a JSON-encoded
 *  representation of a `CapabilityStatement` resource.
 *
 *  @param name Name of the FHIR store to retrieve the capabilities for.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCapabilities
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a FHIR resource. Implements the FHIR standard create interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which
 *  creates a new resource with a server-assigned resource ID. The request body
 *  must contain a JSON-encoded FHIR resource, and the request headers must
 *  contain `Content-Type: application/fhir+json`. On success, the response body
 *  contains a JSON-encoded representation of the resource as it was created on
 *  the server, including the server-assigned resource ID and version ID. Errors
 *  generated by the FHIR store contain a JSON-encoded `OperationOutcome`
 *  resource describing the reason for the error. If the request cannot be
 *  mapped to a valid API method on a FHIR store, a generic GCP error might be
 *  returned instead. For samples that show how to call `create`, see [Creating
 *  a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreate : GTLRCloudHealthcareQuery

/** The name of the FHIR store this resource belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The FHIR resource type to create, such as Patient or Observation. For a
 *  complete list, see the FHIR Resource Index
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *  match the resource type in the provided content.
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Creates a FHIR resource. Implements the FHIR standard create interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which
 *  creates a new resource with a server-assigned resource ID. The request body
 *  must contain a JSON-encoded FHIR resource, and the request headers must
 *  contain `Content-Type: application/fhir+json`. On success, the response body
 *  contains a JSON-encoded representation of the resource as it was created on
 *  the server, including the server-assigned resource ID and version ID. Errors
 *  generated by the FHIR store contain a JSON-encoded `OperationOutcome`
 *  resource describing the reason for the error. If the request cannot be
 *  mapped to a valid API method on a FHIR store, a generic GCP error might be
 *  returned instead. For samples that show how to call `create`, see [Creating
 *  a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store this resource belongs to.
 *  @param type The FHIR resource type to create, such as Patient or
 *    Observation. For a complete list, see the FHIR Resource Index
 *    ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *    [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *    [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *    match the resource type in the provided content.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Deletes a FHIR resource. Implements the FHIR standard delete interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note:
 *  Unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag on the FHIR store, the deleted resources
 *  will be moved to a history repository that can still be retrieved through
 *  vread and related methods, unless they are removed by the purge method. For
 *  samples that show how to call `delete`, see [Deleting a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete : GTLRCloudHealthcareQuery

/** The name of the resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Deletes a FHIR resource. Implements the FHIR standard delete interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note:
 *  Unless resource versioning is disabled by setting the
 *  disable_resource_versioning flag on the FHIR store, the deleted resources
 *  will be moved to a history repository that can still be retrieved through
 *  vread and related methods, unless they are removed by the purge method. For
 *  samples that show how to call `delete`, see [Deleting a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
 *
 *  @param name The name of the resource to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Executes all the requests in the given Bundle. Implements the FHIR standard
 *  batch/transaction interaction
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
 *  Supports all interactions within a bundle, except search. This method
 *  accepts Bundles of type `batch` and `transaction`, processing them according
 *  to the batch processing rules
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and
 *  transaction processing rules
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The
 *  request body must contain a JSON-encoded FHIR `Bundle` resource, and the
 *  request headers must contain `Content-Type: application/fhir+json`. For a
 *  batch bundle or a successful transaction, the response body contains a
 *  JSON-encoded representation of a `Bundle` resource of type `batch-response`
 *  or `transaction-response` containing one entry for each entry in the
 *  request, with the outcome of processing the entry. In the case of an error
 *  for a transaction bundle, the response body contains a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. This method checks permissions for each
 *  request in the bundle. The `executeBundle` permission is required to call
 *  this method, but you must also grant sufficient permissions to execute the
 *  individual requests in the bundle. For example, if the bundle contains a
 *  request to create a FHIR resource, the caller must also have been granted
 *  the `healthcare.fhirResources.create` permission. You can use audit logs to
 *  view the permissions for `executeBundle` and each request in the bundle. For
 *  more information, see [Viewing Cloud Audit
 *  logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging).
 *  For samples that show how to call `executeBundle`, see [Managing FHIR
 *  resources using FHIR
 *  bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirExecuteBundle : GTLRCloudHealthcareQuery

/** Name of the FHIR store in which this bundle will be executed. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Executes all the requests in the given Bundle. Implements the FHIR standard
 *  batch/transaction interaction
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
 *  Supports all interactions within a bundle, except search. This method
 *  accepts Bundles of type `batch` and `transaction`, processing them according
 *  to the batch processing rules
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and
 *  transaction processing rules
 *  ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
 *  [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
 *  [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The
 *  request body must contain a JSON-encoded FHIR `Bundle` resource, and the
 *  request headers must contain `Content-Type: application/fhir+json`. For a
 *  batch bundle or a successful transaction, the response body contains a
 *  JSON-encoded representation of a `Bundle` resource of type `batch-response`
 *  or `transaction-response` containing one entry for each entry in the
 *  request, with the outcome of processing the entry. In the case of an error
 *  for a transaction bundle, the response body contains a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. This method checks permissions for each
 *  request in the bundle. The `executeBundle` permission is required to call
 *  this method, but you must also grant sufficient permissions to execute the
 *  individual requests in the bundle. For example, if the bundle contains a
 *  request to create a FHIR resource, the caller must also have been granted
 *  the `healthcare.fhirResources.create` permission. You can use audit logs to
 *  view the permissions for `executeBundle` and each request in the bundle. For
 *  more information, see [Viewing Cloud Audit
 *  logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging).
 *  For samples that show how to call `executeBundle`, see [Managing FHIR
 *  resources using FHIR
 *  bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent Name of the FHIR store in which this bundle will be executed.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirExecuteBundle
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store. Implements the per-resource form of
 *  the FHIR standard history interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On
 *  success, the response body contains a JSON-encoded representation of a
 *  `Bundle` resource of type `history`, containing the version history sorted
 *  from most recent to oldest versions. Errors generated by the FHIR store
 *  contain a JSON-encoded `OperationOutcome` resource describing the reason for
 *  the error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `history`, see [Listing FHIR resource
 *  versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.history
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirHistory : GTLRCloudHealthcareQuery

/**
 *  Only include resource versions that were current at some point during the
 *  time period specified in the date time value. The date parameter format is
 *  yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm] Clients may specify any of the following:
 *  * An entire year: `_at=2019` * An entire month: `_at=2019-01` * A specific
 *  day: `_at=2019-01-20` * A specific second: `_at=2018-12-31T23:59:58Z`
 */
@property(nonatomic, copy, nullable) NSString *xAt;

/**
 *  The maximum number of search results on a page. If not specified, 100 is
 *  used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger xCount;

/**
 *  Used to retrieve the first, previous, next, or last page of resource
 *  versions when using pagination. Value should be set to the value of
 *  `_page_token` set in next or previous page links' URLs. Next and previous
 *  page are returned in the response bundle's links field, where
 *  `link.relation` is "previous" or "next". Omit `_page_token` if no previous
 *  request has been made.
 */
@property(nonatomic, copy, nullable) NSString *xPageToken;

/**
 *  Only include resource versions that were created at or after the given
 *  instant in time. The instant in time uses the format
 *  YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or
 *  2017-01-01T00:00:00Z). The time must be specified to the second and include
 *  a time zone.
 */
@property(nonatomic, copy, nullable) NSString *xSince;

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Lists all the versions of a resource (including the current version and
 *  deleted versions) from the FHIR store. Implements the per-resource form of
 *  the FHIR standard history interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On
 *  success, the response body contains a JSON-encoded representation of a
 *  `Bundle` resource of type `history`, containing the version history sorted
 *  from most recent to oldest versions. Errors generated by the FHIR store
 *  contain a JSON-encoded `OperationOutcome` resource describing the reason for
 *  the error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `history`, see [Listing FHIR resource
 *  versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirHistory
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates part of an existing resource by applying the operations specified in
 *  a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard
 *  patch interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2
 *  doesn't define a patch method, but the server supports it in the same way it
 *  supports STU3. The request body must contain a JSON Patch document, and the
 *  request headers must contain `Content-Type: application/json-patch+json`. On
 *  success, the response body contains a JSON-encoded representation of the
 *  updated resource, including the server-assigned version ID. Errors generated
 *  by the FHIR store contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `patch`, see [Patching a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch : GTLRCloudHealthcareQuery

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates part of an existing resource by applying the operations specified in
 *  a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard
 *  patch interaction
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2
 *  doesn't define a patch method, but the server supports it in the same way it
 *  supports STU3. The request body must contain a JSON Patch document, and the
 *  request headers must contain `Content-Type: application/json-patch+json`. On
 *  success, the response body contains a JSON-encoded representation of the
 *  updated resource, including the server-assigned version ID. Errors generated
 *  by the FHIR store contain a JSON-encoded `OperationOutcome` resource
 *  describing the reason for the error. If the request cannot be mapped to a
 *  valid API method on a FHIR store, a generic GCP error might be returned
 *  instead. For samples that show how to call `patch`, see [Patching a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a Patient resource and resources related to that patient.
 *  Implements the FHIR extended operation Patient-everything
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
 *  On success, the response body contains a JSON-encoded representation of a
 *  `Bundle` resource of type `searchset`, containing the results of the
 *  operation. Errors generated by the FHIR store contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. The resources in scope for the response
 *  are: * The patient resource itself. * All the resources directly referenced
 *  by the patient resource. * Resources directly referencing the patient
 *  resource that meet the inclusion criteria. The inclusion criteria are based
 *  on the membership rules in the patient compartment definition
 *  ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
 *  [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
 *  [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which
 *  details the eligible resource types and referencing search parameters. For
 *  samples that show how to call `Patient-everything`, see [Getting all patient
 *  compartment
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientEverything : GTLRCloudHealthcareQuery

/**
 *  Maximum number of resources in a page. If not specified, 100 is used. May
 *  not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger xCount;

/**
 *  Used to retrieve the next or previous page of results when using pagination.
 *  Set `_page_token` to the value of _page_token set in next or previous page
 *  links' url. Next and previous page are returned in the response bundle's
 *  links field, where `link.relation` is "previous" or "next". Omit
 *  `_page_token` if no previous request has been made.
 */
@property(nonatomic, copy, nullable) NSString *xPageToken;

/**
 *  If provided, only resources updated after this time are returned. The time
 *  uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example,
 *  `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be
 *  specified to the second and include a time zone.
 */
@property(nonatomic, copy, nullable) NSString *xSince;

/**
 *  String of comma-delimited FHIR resource types. If provided, only resources
 *  of the specified resource type(s) are returned.
 */
@property(nonatomic, copy, nullable) NSString *xType;

/**
 *  The response includes records prior to the end date. The date uses the
 *  format YYYY-MM-DD. If no end date is provided, all records subsequent to the
 *  start date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *end;

/** Name of the `Patient` resource for which the information is required. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The response includes records subsequent to the start date. The date uses
 *  the format YYYY-MM-DD. If no start date is provided, all records prior to
 *  the end date are in scope.
 */
@property(nonatomic, copy, nullable) NSString *start;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Retrieves a Patient resource and resources related to that patient.
 *  Implements the FHIR extended operation Patient-everything
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
 *  On success, the response body contains a JSON-encoded representation of a
 *  `Bundle` resource of type `searchset`, containing the results of the
 *  operation. Errors generated by the FHIR store contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. The resources in scope for the response
 *  are: * The patient resource itself. * All the resources directly referenced
 *  by the patient resource. * Resources directly referencing the patient
 *  resource that meet the inclusion criteria. The inclusion criteria are based
 *  on the membership rules in the patient compartment definition
 *  ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
 *  [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
 *  [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which
 *  details the eligible resource types and referencing search parameters. For
 *  samples that show how to call `Patient-everything`, see [Getting all patient
 *  compartment
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
 *
 *  @param name Name of the `Patient` resource for which the information is
 *    required.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirPatientEverything
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the contents of a FHIR resource. Implements the FHIR standard read
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also
 *  supports the FHIR standard conditional read interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified
 *  by supplying an `If-Modified-Since` header with a date/time value or an
 *  `If-None-Match` header with an ETag value. On success, the response body
 *  contains a JSON-encoded representation of the resource. Errors generated by
 *  the FHIR store contain a JSON-encoded `OperationOutcome` resource describing
 *  the reason for the error. If the request cannot be mapped to a valid API
 *  method on a FHIR store, a generic GCP error might be returned instead. For
 *  samples that show how to call `read`, see [Getting a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.read
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirRead : GTLRCloudHealthcareQuery

/** The name of the resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the contents of a FHIR resource. Implements the FHIR standard read
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also
 *  supports the FHIR standard conditional read interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified
 *  by supplying an `If-Modified-Since` header with a date/time value or an
 *  `If-None-Match` header with an ETag value. On success, the response body
 *  contains a JSON-encoded representation of the resource. Errors generated by
 *  the FHIR store contain a JSON-encoded `OperationOutcome` resource describing
 *  the reason for the error. If the request cannot be mapped to a valid API
 *  method on a FHIR store, a generic GCP error might be returned instead. For
 *  samples that show how to call `read`, see [Getting a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
 *
 *  @param name The name of the resource to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirRead
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all the historical versions of a resource (excluding the current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and then call this method. This is not a FHIR
 *  standard operation. For samples that show how to call `Resource-purge`, see
 *  [Deleting historical versions of a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourcePurge : GTLRCloudHealthcareQuery

/** The name of the resource to purge. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes all the historical versions of a resource (excluding the current
 *  version) from the FHIR store. To remove all versions of a resource, first
 *  delete the current version and then call this method. This is not a FHIR
 *  standard operation. For samples that show how to call `Resource-purge`, see
 *  [Deleting historical versions of a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
 *
 *  @param name The name of the resource to purge.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourcePurge
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Validates an input FHIR resource's conformance to its profiles and the
 *  profiles configured on the FHIR store. Implements the FHIR extended
 *  operation $validate
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate),
 *  or
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)).
 *  The request body must contain a JSON-encoded FHIR resource, and the request
 *  headers must contain `Content-Type: application/fhir+json`. The `Parameters`
 *  input syntax is not supported. The `profile` query parameter can be used to
 *  request that the resource only be validated against a specific profile. If a
 *  profile with the given URL cannot be found in the FHIR store then an error
 *  is returned. Errors generated by validation contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourceValidate : GTLRCloudHealthcareQuery

/**
 *  The name of the FHIR store that holds the profiles being used for
 *  validation.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The canonical URL of a profile that this resource should be validated
 *  against. For example, to validate a Patient resource against the US Core
 *  Patient profile this parameter would be
 *  `http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient`. A
 *  StructureDefinition with this canonical URL must exist in the FHIR store.
 */
@property(nonatomic, copy, nullable) NSString *profile;

/**
 *  The FHIR resource type of the resource being validated. For a complete list,
 *  see the FHIR Resource Index
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), or
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *  match the resource type in the provided content.
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Validates an input FHIR resource's conformance to its profiles and the
 *  profiles configured on the FHIR store. Implements the FHIR extended
 *  operation $validate
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate),
 *  or
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)).
 *  The request body must contain a JSON-encoded FHIR resource, and the request
 *  headers must contain `Content-Type: application/fhir+json`. The `Parameters`
 *  input syntax is not supported. The `profile` query parameter can be used to
 *  request that the resource only be validated against a specific profile. If a
 *  profile with the given URL cannot be found in the FHIR store then an error
 *  is returned. Errors generated by validation contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead.
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param parent The name of the FHIR store that holds the profiles being used
 *    for validation.
 *  @param type The FHIR resource type of the resource being validated. For a
 *    complete list, see the FHIR Resource Index
 *    ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *    [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), or
 *    [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must
 *    match the resource type in the provided content.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirResourceValidate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four
 *  methods of search defined by the specification: * `GET [base]?[parameters]`
 *  to search across all resources. * `GET [base]/[type]?[parameters]` to search
 *  resources of a specified type. * `POST [base]/_search?[parameters]` as an
 *  alternate form having the same semantics as the `GET` method across all
 *  resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form
 *  having the same semantics as the `GET` method for the specified type. The
 *  `GET` and `POST` methods do not support compartment searches. The `POST`
 *  method does not support `application/x-www-form-urlencoded` search
 *  parameters. On success, the response body contains a JSON-encoded
 *  representation of a `Bundle` resource of type `searchset`, containing the
 *  results of the search. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. The server's
 *  capability statement, retrieved through capabilities, indicates what search
 *  parameters are supported on each FHIR resource. A list of all search
 *  parameters defined by the specification can be found in the FHIR Search
 *  Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` contains a link
 *  of `relation` "next", which has a `_page_token` parameter for an opaque
 *  pagination token that can be used to retrieve the next page. Resources with
 *  a total size larger than 5MB or a field count larger than 50,000 might not
 *  be fully searchable as the server might trim its generated search index in
 *  those cases. Note: FHIR resources are indexed asynchronously, so there might
 *  be a slight delay between the time a resource is created or changes and when
 *  the change is reflected in search results. For samples and detailed
 *  information, see [Searching for FHIR
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and
 *  [Advanced FHIR search
 *  features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearch : GTLRCloudHealthcareQuery

/** Name of the FHIR store to retrieve resources from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four
 *  methods of search defined by the specification: * `GET [base]?[parameters]`
 *  to search across all resources. * `GET [base]/[type]?[parameters]` to search
 *  resources of a specified type. * `POST [base]/_search?[parameters]` as an
 *  alternate form having the same semantics as the `GET` method across all
 *  resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form
 *  having the same semantics as the `GET` method for the specified type. The
 *  `GET` and `POST` methods do not support compartment searches. The `POST`
 *  method does not support `application/x-www-form-urlencoded` search
 *  parameters. On success, the response body contains a JSON-encoded
 *  representation of a `Bundle` resource of type `searchset`, containing the
 *  results of the search. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. The server's
 *  capability statement, retrieved through capabilities, indicates what search
 *  parameters are supported on each FHIR resource. A list of all search
 *  parameters defined by the specification can be found in the FHIR Search
 *  Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` contains a link
 *  of `relation` "next", which has a `_page_token` parameter for an opaque
 *  pagination token that can be used to retrieve the next page. Resources with
 *  a total size larger than 5MB or a field count larger than 50,000 might not
 *  be fully searchable as the server might trim its generated search index in
 *  those cases. Note: FHIR resources are indexed asynchronously, so there might
 *  be a slight delay between the time a resource is created or changes and when
 *  the change is reflected in search results. For samples and detailed
 *  information, see [Searching for FHIR
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and
 *  [Advanced FHIR search
 *  features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  @param object The @c GTLRCloudHealthcare_SearchResourcesRequest to include
 *    in the query.
 *  @param parent Name of the FHIR store to retrieve resources from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SearchResourcesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four
 *  methods of search defined by the specification: * `GET [base]?[parameters]`
 *  to search across all resources. * `GET [base]/[type]?[parameters]` to search
 *  resources of a specified type. * `POST [base]/_search?[parameters]` as an
 *  alternate form having the same semantics as the `GET` method across all
 *  resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form
 *  having the same semantics as the `GET` method for the specified type. The
 *  `GET` and `POST` methods do not support compartment searches. The `POST`
 *  method does not support `application/x-www-form-urlencoded` search
 *  parameters. On success, the response body contains a JSON-encoded
 *  representation of a `Bundle` resource of type `searchset`, containing the
 *  results of the search. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. The server's
 *  capability statement, retrieved through capabilities, indicates what search
 *  parameters are supported on each FHIR resource. A list of all search
 *  parameters defined by the specification can be found in the FHIR Search
 *  Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` contains a link
 *  of `relation` "next", which has a `_page_token` parameter for an opaque
 *  pagination token that can be used to retrieve the next page. Resources with
 *  a total size larger than 5MB or a field count larger than 50,000 might not
 *  be fully searchable as the server might trim its generated search index in
 *  those cases. Note: FHIR resources are indexed asynchronously, so there might
 *  be a slight delay between the time a resource is created or changes and when
 *  the change is reflected in search results. For samples and detailed
 *  information, see [Searching for FHIR
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and
 *  [Advanced FHIR search
 *  features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.search-type
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearchType : GTLRCloudHealthcareQuery

/** Name of the FHIR store to retrieve resources from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The FHIR resource type to search, such as Patient or Observation. For a
 *  complete list, see the FHIR Resource Index
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Searches for resources in the given FHIR store according to criteria
 *  specified as query parameters. Implements the FHIR standard search
 *  interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the
 *  search semantics described in the FHIR Search specification
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four
 *  methods of search defined by the specification: * `GET [base]?[parameters]`
 *  to search across all resources. * `GET [base]/[type]?[parameters]` to search
 *  resources of a specified type. * `POST [base]/_search?[parameters]` as an
 *  alternate form having the same semantics as the `GET` method across all
 *  resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form
 *  having the same semantics as the `GET` method for the specified type. The
 *  `GET` and `POST` methods do not support compartment searches. The `POST`
 *  method does not support `application/x-www-form-urlencoded` search
 *  parameters. On success, the response body contains a JSON-encoded
 *  representation of a `Bundle` resource of type `searchset`, containing the
 *  results of the search. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. The server's
 *  capability statement, retrieved through capabilities, indicates what search
 *  parameters are supported on each FHIR resource. A list of all search
 *  parameters defined by the specification can be found in the FHIR Search
 *  Parameter Registry
 *  ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 *  FHIR search parameters for DSTU2 can be found on each resource's definition
 *  page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
 *  `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
 *  `:recurse`. Supported search result parameters: `_sort`, `_count`,
 *  `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and
 *  `_elements`. The maximum number of search results returned defaults to 100,
 *  which can be overridden by the `_count` parameter up to a maximum limit of
 *  1000. If there are additional results, the returned `Bundle` contains a link
 *  of `relation` "next", which has a `_page_token` parameter for an opaque
 *  pagination token that can be used to retrieve the next page. Resources with
 *  a total size larger than 5MB or a field count larger than 50,000 might not
 *  be fully searchable as the server might trim its generated search index in
 *  those cases. Note: FHIR resources are indexed asynchronously, so there might
 *  be a slight delay between the time a resource is created or changes and when
 *  the change is reflected in search results. For samples and detailed
 *  information, see [Searching for FHIR
 *  resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and
 *  [Advanced FHIR search
 *  features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
 *
 *  @param object The @c GTLRCloudHealthcare_SearchResourcesRequest to include
 *    in the query.
 *  @param parent Name of the FHIR store to retrieve resources from.
 *  @param resourceType The FHIR resource type to search, such as Patient or
 *    Observation. For a complete list, see the FHIR Resource Index
 *    ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
 *    [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
 *    [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirSearchType
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SearchResourcesRequest *)object
                         parent:(NSString *)parent
                   resourceType:(NSString *)resourceType;

@end

/**
 *  Updates the entire contents of a resource. Implements the FHIR standard
 *  update interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the
 *  specified resource does not exist and the FHIR store has
 *  enable_update_create set, creates the resource with the client-specified ID.
 *  It is strongly advised not to include or encode any sensitive data such as
 *  patient identifiers in client-specified resource IDs. Those IDs are part of
 *  the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub
 *  notifications. Those IDs can also be contained in reference fields within
 *  other resources. The request body must contain a JSON-encoded FHIR resource,
 *  and the request headers must contain `Content-Type: application/fhir+json`.
 *  The resource must contain an `id` element having an identical value to the
 *  ID in the REST path of the request. On success, the response body contains a
 *  JSON-encoded representation of the updated resource, including the
 *  server-assigned version ID. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `update`, see [Updating a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate : GTLRCloudHealthcareQuery

/** The name of the resource to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Updates the entire contents of a resource. Implements the FHIR standard
 *  update interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the
 *  specified resource does not exist and the FHIR store has
 *  enable_update_create set, creates the resource with the client-specified ID.
 *  It is strongly advised not to include or encode any sensitive data such as
 *  patient identifiers in client-specified resource IDs. Those IDs are part of
 *  the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub
 *  notifications. Those IDs can also be contained in reference fields within
 *  other resources. The request body must contain a JSON-encoded FHIR resource,
 *  and the request headers must contain `Content-Type: application/fhir+json`.
 *  The resource must contain an `id` element having an identical value to the
 *  ID in the REST path of the request. On success, the response body contains a
 *  JSON-encoded representation of the updated resource, including the
 *  server-assigned version ID. Errors generated by the FHIR store contain a
 *  JSON-encoded `OperationOutcome` resource describing the reason for the
 *  error. If the request cannot be mapped to a valid API method on a FHIR
 *  store, a generic GCP error might be returned instead. For samples that show
 *  how to call `update`, see [Updating a FHIR
 *  resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
 *
 *  @param object The @c GTLRCloudHealthcare_HttpBody to include in the query.
 *  @param name The name of the resource to update.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the contents of a version (current or historical) of a FHIR resource by
 *  version ID. Implements the FHIR standard vread interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On
 *  success, the response body contains a JSON-encoded representation of the
 *  resource. Errors generated by the FHIR store contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `vread`, see [Retrieving a FHIR resource
 *  version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.fhir.vread
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirVread : GTLRCloudHealthcareQuery

/** The name of the resource version to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_HttpBody.
 *
 *  Gets the contents of a version (current or historical) of a FHIR resource by
 *  version ID. Implements the FHIR standard vread interaction
 *  ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
 *  [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
 *  [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On
 *  success, the response body contains a JSON-encoded representation of the
 *  resource. Errors generated by the FHIR store contain a JSON-encoded
 *  `OperationOutcome` resource describing the reason for the error. If the
 *  request cannot be mapped to a valid API method on a FHIR store, a generic
 *  GCP error might be returned instead. For samples that show how to call
 *  `vread`, see [Retrieving a FHIR resource
 *  version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
 *
 *  @param name The name of the resource version to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresFhirVread
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the configuration of the specified FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet : GTLRCloudHealthcareQuery

/** The resource name of the FHIR store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Gets the configuration of the specified FHIR store.
 *
 *  @param name The resource name of the FHIR store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports resources to the FHIR store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some FHIR store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty FHIR store that is not being used by other clients. In cases where
 *  this method is not appropriate, consider using ExecuteBundle to load data.
 *  Every resource in the input must contain a client-supplied ID. Each resource
 *  is stored using the supplied ID regardless of the enable_update_create
 *  setting on the FHIR store. It is strongly advised not to include or encode
 *  any sensitive data such as patient identifiers in client-specified resource
 *  IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit
 *  Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in
 *  reference fields within other resources. The import process does not enforce
 *  referential integrity, regardless of the disable_referential_integrity
 *  setting on the FHIR store. This allows the import of resources with
 *  arbitrary interdependencies without considering grouping or ordering, but if
 *  the input data contains invalid references or if some resources fail to be
 *  imported, the FHIR store might be left in a state that violates referential
 *  integrity. The import process does not trigger Pub/Sub notification or
 *  BigQuery streaming update, regardless of how those are configured on the
 *  FHIR store. If a resource with the specified ID already exists, the most
 *  recent version of the resource is overwritten without creating a new
 *  historical version, regardless of the disable_resource_versioning setting on
 *  the FHIR store. If transient failures occur during the import, it's possible
 *  that successfully imported resources will be overwritten more than once. The
 *  import operation is idempotent unless the input data contains multiple valid
 *  resources with the same ID but different contents. In that case, after the
 *  import completes, the store contains exactly one resource with that ID but
 *  there is no ordering guarantee on which version of the contents it will
 *  have. The operation result counters do not count duplicate IDs as an error
 *  and count one success for each resource in the input, which might result in
 *  a success count larger than the number of resources in the FHIR store. This
 *  often occurs when importing data organized in bundles produced by
 *  Patient-everything where each bundle contains its own copy of a resource
 *  such as Practitioner that might be referred to by many patients. If some
 *  resources fail to import, for example due to parsing errors, successfully
 *  imported resources are not rolled back. The location and format of the input
 *  data is specified by the parameters in ImportResourcesRequest. Note that if
 *  no format is specified, this method assumes the `BUNDLE` format. When using
 *  the `BUNDLE` format this method ignores the `Bundle.type` field, except that
 *  `history` bundles are rejected, and does not apply any of the bundle
 *  processing semantics for batch or transaction bundles. Unlike in
 *  ExecuteBundle, transaction bundles are not executed as a single transaction
 *  and bundle-internal references are not rewritten. The bundle is treated as a
 *  collection of resources to be written as provided in
 *  `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example,
 *  this allows the import of `searchset` bundles produced by a FHIR search or
 *  Patient-everything operation. This method returns an Operation that can be
 *  used to track the status of the import by calling GetOperation. Immediate
 *  fatal errors appear in the error field, errors are also logged to Cloud
 *  Logging (see [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a detailed response of type
 *  ImportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport : GTLRCloudHealthcareQuery

/**
 *  The name of the FHIR store to import FHIR resources to, in the format of
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Imports resources to the FHIR store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some FHIR store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty FHIR store that is not being used by other clients. In cases where
 *  this method is not appropriate, consider using ExecuteBundle to load data.
 *  Every resource in the input must contain a client-supplied ID. Each resource
 *  is stored using the supplied ID regardless of the enable_update_create
 *  setting on the FHIR store. It is strongly advised not to include or encode
 *  any sensitive data such as patient identifiers in client-specified resource
 *  IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit
 *  Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in
 *  reference fields within other resources. The import process does not enforce
 *  referential integrity, regardless of the disable_referential_integrity
 *  setting on the FHIR store. This allows the import of resources with
 *  arbitrary interdependencies without considering grouping or ordering, but if
 *  the input data contains invalid references or if some resources fail to be
 *  imported, the FHIR store might be left in a state that violates referential
 *  integrity. The import process does not trigger Pub/Sub notification or
 *  BigQuery streaming update, regardless of how those are configured on the
 *  FHIR store. If a resource with the specified ID already exists, the most
 *  recent version of the resource is overwritten without creating a new
 *  historical version, regardless of the disable_resource_versioning setting on
 *  the FHIR store. If transient failures occur during the import, it's possible
 *  that successfully imported resources will be overwritten more than once. The
 *  import operation is idempotent unless the input data contains multiple valid
 *  resources with the same ID but different contents. In that case, after the
 *  import completes, the store contains exactly one resource with that ID but
 *  there is no ordering guarantee on which version of the contents it will
 *  have. The operation result counters do not count duplicate IDs as an error
 *  and count one success for each resource in the input, which might result in
 *  a success count larger than the number of resources in the FHIR store. This
 *  often occurs when importing data organized in bundles produced by
 *  Patient-everything where each bundle contains its own copy of a resource
 *  such as Practitioner that might be referred to by many patients. If some
 *  resources fail to import, for example due to parsing errors, successfully
 *  imported resources are not rolled back. The location and format of the input
 *  data is specified by the parameters in ImportResourcesRequest. Note that if
 *  no format is specified, this method assumes the `BUNDLE` format. When using
 *  the `BUNDLE` format this method ignores the `Bundle.type` field, except that
 *  `history` bundles are rejected, and does not apply any of the bundle
 *  processing semantics for batch or transaction bundles. Unlike in
 *  ExecuteBundle, transaction bundles are not executed as a single transaction
 *  and bundle-internal references are not rewritten. The bundle is treated as a
 *  collection of resources to be written as provided in
 *  `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example,
 *  this allows the import of `searchset` bundles produced by a FHIR search or
 *  Patient-everything operation. This method returns an Operation that can be
 *  used to track the status of the import by calling GetOperation. Immediate
 *  fatal errors appear in the error field, errors are also logged to Cloud
 *  Logging (see [Viewing error logs in Cloud
 *  Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a detailed response of type
 *  ImportResourcesResponse is returned in the response field. The metadata
 *  field type for this operation is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportResourcesRequest to include
 *    in the query.
 *  @param name The name of the FHIR store to import FHIR resources to, in the
 *    format of
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportResourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the FHIR stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList : GTLRCloudHealthcareQuery

/**
 *  Restricts stores returned to those matching a filter. The following syntax
 *  is available: * A string field value can be written as text inside quotation
 *  marks, for example `"query text"`. The only valid relational operation for
 *  text fields is equality (`=`), where text is searched within the field,
 *  rather than having the field be equal to the text. For example, `"Comment =
 *  great"` returns messages with `great` in the comment field. * A number field
 *  value can be written as an integer, a decimal, or an exponential. The valid
 *  relational operators for number fields are the equality operator (`=`),
 *  along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note
 *  that there is no inequality (`!=`) operator. You can prepend the `NOT`
 *  operator to an expression to negate it. * A date field value must be written
 *  in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format.
 *  Leading zeros are required for one-digit months and days. The valid
 *  relational operators for date fields are the equality operator (`=`) , along
 *  with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that
 *  there is no inequality (`!=`) operator. You can prepend the `NOT` operator
 *  to an expression to negate it. * Multiple field query expressions can be
 *  combined in one query by adding `AND` or `OR` operators between the
 *  expressions. If a boolean operator appears within a quoted string, it is not
 *  treated as special, it's just another part of the character string to be
 *  matched. You can prepend the `NOT` operator to an expression to negate it.
 *  Only filtering on labels is supported, for example `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of FHIR stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListFhirStoresResponse.
 *
 *  Lists the FHIR stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the configuration of the specified FHIR store.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch : GTLRCloudHealthcareQuery

/**
 *  Output only. Resource name of the FHIR store, of the form
 *  `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_FhirStore.
 *
 *  Updates the configuration of the specified FHIR store.
 *
 *  @param object The @c GTLRCloudHealthcare_FhirStore to include in the query.
 *  @param name Output only. Resource name of the FHIR store, of the form
 *    `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_FhirStore *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsFhirStoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets any metadata associated with a dataset.
 *
 *  Method: healthcare.projects.locations.datasets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet : GTLRCloudHealthcareQuery

/**
 *  The name of the dataset to read. For example,
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Gets any metadata associated with a dataset.
 *
 *  @param name The name of the dataset to read. For example,
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate : GTLRCloudHealthcareQuery

/**
 *  The ID of the HL7v2 store that is being created. The string must match the
 *  following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.
 */
@property(nonatomic, copy, nullable) NSString *hl7V2StoreId;

/** The name of the dataset this HL7v2 store belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Creates a new HL7v2 store within the parent dataset.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param parent The name of the dataset this HL7v2 store belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified HL7v2 store and removes all messages that it contains.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete : GTLRCloudHealthcareQuery

/** The resource name of the HL7v2 store to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes the specified HL7v2 store and removes all messages that it contains.
 *
 *  @param name The resource name of the HL7v2 store to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports the messages to a destination. To filter messages to be exported,
 *  define a filter using the start and end time, relative to the message
 *  generation time (MSH.7). This API returns an Operation that can be used to
 *  track the status of the job by calling GetOperation. Immediate fatal errors
 *  appear in the error field. Otherwise, when the operation finishes, a
 *  detailed response of type ExportMessagesResponse is returned in the response
 *  field. The metadata field type for this operation is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresExport : GTLRCloudHealthcareQuery

/**
 *  The name of the source HL7v2 store, in the format
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Exports the messages to a destination. To filter messages to be exported,
 *  define a filter using the start and end time, relative to the message
 *  generation time (MSH.7). This API returns an Operation that can be used to
 *  track the status of the job by calling GetOperation. Immediate fatal errors
 *  appear in the error field. Otherwise, when the operation finishes, a
 *  detailed response of type ExportMessagesResponse is returned in the response
 *  field. The metadata field type for this operation is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ExportMessagesRequest to include in
 *    the query.
 *  @param name The name of the source HL7v2 store, in the format
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresExport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ExportMessagesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the specified HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet : GTLRCloudHealthcareQuery

/** The resource name of the HL7v2 store to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Gets the specified HL7v2 store.
 *
 *  @param name The resource name of the HL7v2 store to get.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Import messages to the HL7v2 store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some HL7v2 store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty HL7v2 store that is not being used by other clients. An existing
 *  message will be overwritten if a duplicate message is imported. A duplicate
 *  message is a message with the same raw bytes as a message that already
 *  exists in this HL7v2 store. When a message is overwritten, its labels will
 *  also be overwritten. The import operation is idempotent unless the input
 *  data contains multiple valid messages with the same raw bytes but different
 *  labels. In that case, after the import completes, the store contains exactly
 *  one message with those raw bytes but there is no ordering guarantee on which
 *  version of the labels it has. The operation result counters do not count
 *  duplicated raw bytes as an error and count one success for each message in
 *  the input, which might result in a success count larger than the number of
 *  messages in the HL7v2 store. If some messages fail to import, for example
 *  due to parsing errors, successfully imported messages are not rolled back.
 *  This method returns an Operation that can be used to track the status of the
 *  import by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing error logs in
 *  Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a response of type
 *  ImportMessagesResponse is returned in the response field. The metadata field
 *  type for this operation is OperationMetadata.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresImport : GTLRCloudHealthcareQuery

/**
 *  The name of the target HL7v2 store, in the format
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Import messages to the HL7v2 store by loading data from the specified
 *  sources. This method is optimized to load large quantities of data using
 *  import semantics that ignore some HL7v2 store configuration options and are
 *  not suitable for all use cases. It is primarily intended to load data into
 *  an empty HL7v2 store that is not being used by other clients. An existing
 *  message will be overwritten if a duplicate message is imported. A duplicate
 *  message is a message with the same raw bytes as a message that already
 *  exists in this HL7v2 store. When a message is overwritten, its labels will
 *  also be overwritten. The import operation is idempotent unless the input
 *  data contains multiple valid messages with the same raw bytes but different
 *  labels. In that case, after the import completes, the store contains exactly
 *  one message with those raw bytes but there is no ordering guarantee on which
 *  version of the labels it has. The operation result counters do not count
 *  duplicated raw bytes as an error and count one success for each message in
 *  the input, which might result in a success count larger than the number of
 *  messages in the HL7v2 store. If some messages fail to import, for example
 *  due to parsing errors, successfully imported messages are not rolled back.
 *  This method returns an Operation that can be used to track the status of the
 *  import by calling GetOperation. Immediate fatal errors appear in the error
 *  field, errors are also logged to Cloud Logging (see [Viewing error logs in
 *  Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
 *  Otherwise, when the operation finishes, a response of type
 *  ImportMessagesResponse is returned in the response field. The metadata field
 *  type for this operation is OperationMetadata.
 *
 *  @param object The @c GTLRCloudHealthcare_ImportMessagesRequest to include in
 *    the query.
 *  @param name The name of the target HL7v2 store, in the format
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresImport
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_ImportMessagesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList : GTLRCloudHealthcareQuery

/**
 *  Restricts stores returned to those matching a filter. The following syntax
 *  is available: * A string field value can be written as text inside quotation
 *  marks, for example `"query text"`. The only valid relational operation for
 *  text fields is equality (`=`), where text is searched within the field,
 *  rather than having the field be equal to the text. For example, `"Comment =
 *  great"` returns messages with `great` in the comment field. * A number field
 *  value can be written as an integer, a decimal, or an exponential. The valid
 *  relational operators for number fields are the equality operator (`=`),
 *  along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note
 *  that there is no inequality (`!=`) operator. You can prepend the `NOT`
 *  operator to an expression to negate it. * A date field value must be written
 *  in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format.
 *  Leading zeros are required for one-digit months and days. The valid
 *  relational operators for date fields are the equality operator (`=`) , along
 *  with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that
 *  there is no inequality (`!=`) operator. You can prepend the `NOT` operator
 *  to an expression to negate it. * Multiple field query expressions can be
 *  combined in one query by adding `AND` or `OR` operators between the
 *  expressions. If a boolean operator appears within a quoted string, it is not
 *  treated as special, it's just another part of the character string to be
 *  matched. You can prepend the `NOT` operator to an expression to negate it.
 *  Only filtering on labels is supported. For example, `labels.key=value`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Limit on the number of HL7v2 stores to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the dataset. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListHl7V2StoresResponse.
 *
 *  Lists the HL7v2 stores in the given dataset.
 *
 *  @param parent Name of the dataset.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Pub/Sub topic configured in
 *  Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If
 *  an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter
 *  transmits the message when a notification is received.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate : GTLRCloudHealthcareQuery

/** The name of the dataset this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Pub/Sub topic configured in
 *  Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If
 *  an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter
 *  transmits the message when a notification is received.
 *
 *  @param object The @c GTLRCloudHealthcare_CreateMessageRequest to include in
 *    the query.
 *  @param parent The name of the dataset this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CreateMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete : GTLRCloudHealthcareQuery

/** The resource name of the HL7v2 message to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Deletes an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to delete.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an HL7v2 message.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet : GTLRCloudHealthcareQuery

/** The resource name of the HL7v2 message to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies which parts of the Message resource to return in the response.
 *  When unspecified, equivalent to FULL.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudHealthcareViewMessageViewUnspecified Not specified,
 *        equivalent to FULL. (Value: "MESSAGE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudHealthcareViewRawOnly Server responses include all the
 *        message fields except parsed_data field, and schematized_data fields.
 *        (Value: "RAW_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewParsedOnly Server responses include all
 *        the message fields except data field, and schematized_data fields.
 *        (Value: "PARSED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewFull Server responses include all the
 *        message fields. (Value: "FULL")
 *    @arg @c kGTLRCloudHealthcareViewSchematizedOnly Server responses include
 *        all the message fields except data and parsed_data fields. (Value:
 *        "SCHEMATIZED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewBasic Server responses include only the
 *        name field. (Value: "BASIC")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Gets an HL7v2 message.
 *
 *  @param name The resource name of the HL7v2 message to retrieve.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Pub/Sub topic configured in
 *  Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If
 *  an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter
 *  transmits the message when a notification is received. If the method is
 *  successful, it generates a response containing an HL7v2 acknowledgment
 *  (`ACK`) message. If the method encounters an error, it returns a negative
 *  acknowledgment (`NACK`) message. This behavior is suitable for replying to
 *  HL7v2 interface systems that expect these acknowledgments.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest : GTLRCloudHealthcareQuery

/** The name of the HL7v2 store this message belongs to. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_IngestMessageResponse.
 *
 *  Parses and stores an HL7v2 message. This method triggers an asynchronous
 *  notification to any Pub/Sub topic configured in
 *  Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If
 *  an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter
 *  transmits the message when a notification is received. If the method is
 *  successful, it generates a response containing an HL7v2 acknowledgment
 *  (`ACK`) message. If the method encounters an error, it returns a negative
 *  acknowledgment (`NACK`) message. This behavior is suitable for replying to
 *  HL7v2 interface systems that expect these acknowledgments.
 *
 *  @param object The @c GTLRCloudHealthcare_IngestMessageRequest to include in
 *    the query.
 *  @param parent The name of the HL7v2 store this message belongs to.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesIngest
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_IngestMessageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *  Note: HL7v2 messages are indexed asynchronously, so there might be a slight
 *  delay between the time a message is created and when it can be found through
 *  a filter.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList : GTLRCloudHealthcareQuery

/**
 *  Restricts messages returned to those matching a filter. The following syntax
 *  is available: * A string field value can be written as text inside quotation
 *  marks, for example `"query text"`. The only valid relational operation for
 *  text fields is equality (`=`), where text is searched within the field,
 *  rather than having the field be equal to the text. For example, `"Comment =
 *  great"` returns messages with `great` in the comment field. * A number field
 *  value can be written as an integer, a decimal, or an exponential. The valid
 *  relational operators for number fields are the equality operator (`=`),
 *  along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note
 *  that there is no inequality (`!=`) operator. You can prepend the `NOT`
 *  operator to an expression to negate it. * A date field value must be written
 *  in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format.
 *  Leading zeros are required for one-digit months and days. The valid
 *  relational operators for date fields are the equality operator (`=`) , along
 *  with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that
 *  there is no inequality (`!=`) operator. You can prepend the `NOT` operator
 *  to an expression to negate it. * Multiple field query expressions can be
 *  combined in one query by adding `AND` or `OR` operators between the
 *  expressions. If a boolean operator appears within a quoted string, it is not
 *  treated as special, it's just another part of the character string to be
 *  matched. You can prepend the `NOT` operator to an expression to negate it.
 *  Fields/functions available for filtering are: * `message_type`, from the
 *  MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or
 *  `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's
 *  time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`.
 *  * `send_time`, the timestamp when the message was sent, using the RFC3339
 *  time format for comparisons, from the MSH-7 segment. For example, `send_time
 *  < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the
 *  message was created in the HL7v2 store. Use the RFC3339 time format for
 *  comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. *
 *  `send_facility`, the care center that the message came from, from the MSH-4
 *  segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`,
 *  which matches if the message lists a patient having an ID of the given value
 *  and type in the PID-2, PID-3, or PID-4 segments. For example,
 *  `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with
 *  key `x` as set using the Message.labels map. For example,
 *  `labels."priority"="high"`. The operator `:*` can be used to assert the
 *  existence of a label. For example, `labels."priority":*`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Orders messages returned by the specified order_by clause. Syntax:
 *  https://cloud.google.com/apis/design/design_patterns#sorting_order Fields
 *  available for ordering are: * `send_time`
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Limit on the number of messages to return in a single response. If not
 *  specified, 100 is used. May not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from the previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the HL7v2 store to retrieve messages from. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Specifies the parts of the Message to return in the response. When
 *  unspecified, equivalent to BASIC. Setting this to anything other than BASIC
 *  with a `page_size` larger than the default can generate a large response,
 *  which impacts the performance of this method.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudHealthcareViewMessageViewUnspecified Not specified,
 *        equivalent to FULL. (Value: "MESSAGE_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRCloudHealthcareViewRawOnly Server responses include all the
 *        message fields except parsed_data field, and schematized_data fields.
 *        (Value: "RAW_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewParsedOnly Server responses include all
 *        the message fields except data field, and schematized_data fields.
 *        (Value: "PARSED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewFull Server responses include all the
 *        message fields. (Value: "FULL")
 *    @arg @c kGTLRCloudHealthcareViewSchematizedOnly Server responses include
 *        all the message fields except data and parsed_data fields. (Value:
 *        "SCHEMATIZED_ONLY")
 *    @arg @c kGTLRCloudHealthcareViewBasic Server responses include only the
 *        name field. (Value: "BASIC")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListMessagesResponse.
 *
 *  Lists all the messages in the given HL7v2 store with support for filtering.
 *  Note: HL7v2 messages are indexed asynchronously, so there might be a slight
 *  delay between the time a message is created and when it can be found through
 *  a filter.
 *
 *  @param parent Name of the HL7v2 store to retrieve messages from.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update the message. The contents of the message in Message.data and data
 *  extracted from the contents such as Message.create_time cannot be altered.
 *  Only the Message.labels field is allowed to be updated. The labels in the
 *  request are merged with the existing set of labels. Existing labels with the
 *  same keys are updated.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the Message, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *  Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Message.
 *
 *  Update the message. The contents of the message in Message.data and data
 *  extracted from the contents such as Message.create_time cannot be altered.
 *  Only the Message.labels field is allowed to be updated. The labels in the
 *  request are merged with the existing set of labels. Existing labels with the
 *  same keys are updated.
 *
 *  @param object The @c GTLRCloudHealthcare_Message to include in the query.
 *  @param name Resource name of the Message, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
 *    Assigned by the server.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresMessagesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Message *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the HL7v2 store.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the HL7v2 store, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Hl7V2Store.
 *
 *  Updates the HL7v2 store.
 *
 *  @param object The @c GTLRCloudHealthcare_Hl7V2Store to include in the query.
 *  @param name Resource name of the HL7v2 store, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Hl7V2Store *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsHl7V2StoresTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists the health datasets in the current project.
 *
 *  Method: healthcare.projects.locations.datasets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList : GTLRCloudHealthcareQuery

/**
 *  The maximum number of items to return. If not specified, 100 is used. May
 *  not be larger than 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the project whose datasets should be listed. For example,
 *  `projects/{project_id}/locations/{location_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListDatasetsResponse.
 *
 *  Lists the health datasets in the current project.
 *
 *  @param parent The name of the project whose datasets should be listed. For
 *    example, `projects/{project_id}/locations/{location_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: healthcare.projects.locations.datasets.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsCancel : GTLRCloudHealthcareQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudHealthcare_CancelOperationRequest to include
 *    in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: healthcare.projects.locations.datasets.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet : GTLRCloudHealthcareQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: healthcare.projects.locations.datasets.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList : GTLRCloudHealthcareQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates dataset metadata.
 *
 *  Method: healthcare.projects.locations.datasets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch : GTLRCloudHealthcareQuery

/**
 *  Resource name of the dataset, of the form
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The update mask applies to the resource. For the `FieldMask` definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudHealthcare_Dataset.
 *
 *  Updates dataset metadata.
 *
 *  @param object The @c GTLRCloudHealthcare_Dataset to include in the query.
 *  @param name Resource name of the dataset, of the form
 *    `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_Dataset *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: healthcare.projects.locations.datasets.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRCloudHealthcare_SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: healthcare.projects.locations.datasets.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions : GTLRCloudHealthcareQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudHealthcare_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRCloudHealthcare_TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsDatasetsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Gets information about a location.
 *
 *  Method: healthcare.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsGet : GTLRCloudHealthcareQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudHealthcare_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: healthcare.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsList : GTLRCloudHealthcareQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudHealthcare_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Analyze heathcare entity in a document. Its response includes the recognized
 *  entity mentions and the relationships between them. AnalyzeEntities uses
 *  context aware models to detect entities.
 *
 *  Method: healthcare.projects.locations.services.nlp.analyzeEntities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudHealthcareCloudPlatform
 */
@interface GTLRCloudHealthcareQuery_ProjectsLocationsServicesNlpAnalyzeEntities : GTLRCloudHealthcareQuery

/**
 *  The resource name of the service of the form:
 *  "projects/{project_id}/locations/{location_id}/services/nlp".
 */
@property(nonatomic, copy, nullable) NSString *nlpService;

/**
 *  Fetches a @c GTLRCloudHealthcare_AnalyzeEntitiesResponse.
 *
 *  Analyze heathcare entity in a document. Its response includes the recognized
 *  entity mentions and the relationships between them. AnalyzeEntities uses
 *  context aware models to detect entities.
 *
 *  @param object The @c GTLRCloudHealthcare_AnalyzeEntitiesRequest to include
 *    in the query.
 *  @param nlpService The resource name of the service of the form:
 *    "projects/{project_id}/locations/{location_id}/services/nlp".
 *
 *  @return GTLRCloudHealthcareQuery_ProjectsLocationsServicesNlpAnalyzeEntities
 */
+ (instancetype)queryWithObject:(GTLRCloudHealthcare_AnalyzeEntitiesRequest *)object
                     nlpService:(NSString *)nlpService;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
