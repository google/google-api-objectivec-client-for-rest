// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Life Sciences API (lifesciences/v2beta)
// Description:
//   Cloud Life Sciences is a suite of services and tools for managing,
//   processing, and transforming life sciences data.
// Documentation:
//   https://cloud.google.com/life-sciences

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudLifeSciences_Accelerator;
@class GTLRCloudLifeSciences_Action;
@class GTLRCloudLifeSciences_Action_Environment;
@class GTLRCloudLifeSciences_Action_Labels;
@class GTLRCloudLifeSciences_Action_PortMappings;
@class GTLRCloudLifeSciences_ContainerKilledEvent;
@class GTLRCloudLifeSciences_ContainerStartedEvent;
@class GTLRCloudLifeSciences_ContainerStartedEvent_PortMappings;
@class GTLRCloudLifeSciences_ContainerStoppedEvent;
@class GTLRCloudLifeSciences_DelayedEvent;
@class GTLRCloudLifeSciences_Disk;
@class GTLRCloudLifeSciences_Event;
@class GTLRCloudLifeSciences_ExistingDisk;
@class GTLRCloudLifeSciences_FailedEvent;
@class GTLRCloudLifeSciences_Location;
@class GTLRCloudLifeSciences_Location_Labels;
@class GTLRCloudLifeSciences_Location_Metadata;
@class GTLRCloudLifeSciences_Metadata_Labels;
@class GTLRCloudLifeSciences_Mount;
@class GTLRCloudLifeSciences_Network;
@class GTLRCloudLifeSciences_NFSMount;
@class GTLRCloudLifeSciences_Operation;
@class GTLRCloudLifeSciences_Operation_Metadata;
@class GTLRCloudLifeSciences_Operation_Response;
@class GTLRCloudLifeSciences_PersistentDisk;
@class GTLRCloudLifeSciences_Pipeline;
@class GTLRCloudLifeSciences_Pipeline_Environment;
@class GTLRCloudLifeSciences_PullStartedEvent;
@class GTLRCloudLifeSciences_PullStoppedEvent;
@class GTLRCloudLifeSciences_Resources;
@class GTLRCloudLifeSciences_RunPipelineRequest_Labels;
@class GTLRCloudLifeSciences_Secret;
@class GTLRCloudLifeSciences_ServiceAccount;
@class GTLRCloudLifeSciences_Status;
@class GTLRCloudLifeSciences_Status_Details_Item;
@class GTLRCloudLifeSciences_UnexpectedExitStatusEvent;
@class GTLRCloudLifeSciences_VirtualMachine;
@class GTLRCloudLifeSciences_VirtualMachine_Labels;
@class GTLRCloudLifeSciences_Volume;
@class GTLRCloudLifeSciences_WorkerAssignedEvent;
@class GTLRCloudLifeSciences_WorkerReleasedEvent;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudLifeSciences_FailedEvent.code

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudLifeSciences_FailedEvent_Code_Unknown;

/**
 *  Carries information about an accelerator that can be attached to a VM.
 */
@interface GTLRCloudLifeSciences_Accelerator : GTLRObject

/**
 *  How many accelerators of this type to attach.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  The accelerator type string (for example, "nvidia-tesla-k80"). Only NVIDIA
 *  GPU accelerators are currently supported. If an NVIDIA GPU is attached, the
 *  required runtime libraries will be made available to all containers under
 *  `/usr/local/nvidia`. The driver version to install must be specified using
 *  the NVIDIA driver version parameter on the virtual machine specification.
 *  Note that attaching a GPU increases the worker VM startup time by a few
 *  minutes.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies a single action that runs a Docker container.
 */
@interface GTLRCloudLifeSciences_Action : GTLRObject

/**
 *  By default, after an action fails, no further actions are run. This flag
 *  indicates that this action must be run even if the pipeline has already
 *  failed. This is useful for actions that copy output files off of the VM or
 *  for debugging. Note that no actions will be run if image prefetching fails.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alwaysRun;

/**
 *  Prevents the container from accessing the external network.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blockExternalNetwork;

/**
 *  If specified, overrides the `CMD` specified in the container. If the
 *  container also has an `ENTRYPOINT` the values are used as entrypoint
 *  arguments. Otherwise, they are used as a command and arguments to run inside
 *  the container.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *commands;

/**
 *  An optional name for the container. The container hostname will be set to
 *  this name, making it useful for inter-container communication. The name must
 *  contain only upper and lowercase alphanumeric characters and hyphens and
 *  cannot start with a hyphen.
 */
@property(nonatomic, copy, nullable) NSString *containerName;

/**
 *  If the specified image is hosted on a private registry other than Google
 *  Container Registry, the credentials required to pull the image must be
 *  specified here as an encrypted secret. The secret must decrypt to a
 *  JSON-encoded dictionary containing both `username` and `password` keys.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Secret *credentials;

/**
 *  All container images are typically downloaded before any actions are
 *  executed. This helps prevent typos in URIs or issues like lack of disk space
 *  from wasting large amounts of compute resources. If set, this flag prevents
 *  the worker from downloading the image until just before the action is
 *  executed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableImagePrefetch;

/**
 *  A small portion of the container's standard error stream is typically
 *  captured and returned inside the `ContainerStoppedEvent`. Setting this flag
 *  disables this functionality.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableStandardErrorCapture;

/**
 *  Enable access to the FUSE device for this action. Filesystems can then be
 *  mounted into disks shared with other actions. The other actions do not need
 *  the `enable_fuse` flag to access the mounted filesystem. This has the effect
 *  of causing the container to be executed with `CAP_SYS_ADMIN` and exposes
 *  `/dev/fuse` to the container, so use it only for containers you trust.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableFuse;

/**
 *  The encrypted environment to pass into the container. This environment is
 *  merged with values specified in the
 *  google.cloud.lifesciences.v2beta.Pipeline message, overwriting any duplicate
 *  values. The secret must decrypt to a JSON-encoded dictionary where key-value
 *  pairs serve as environment variable names and their values. The decoded
 *  environment variables can overwrite the values specified by the
 *  `environment` field.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Secret *encryptedEnvironment;

/** If specified, overrides the `ENTRYPOINT` specified in the container. */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/**
 *  The environment to pass into the container. This environment is merged with
 *  values specified in the google.cloud.lifesciences.v2beta.Pipeline message,
 *  overwriting any duplicate values. In addition to the values passed here, a
 *  few other values are automatically injected into the environment. These
 *  cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to "1"
 *  if the pipeline failed because an action has exited with a non-zero status
 *  (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to
 *  determine if additional debug or logging actions should execute.
 *  `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last
 *  non-background action that executed. This can be used by workflow engine
 *  authors to determine whether an individual action has succeeded or failed.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Action_Environment *environment;

/**
 *  Normally, a non-zero exit status causes the pipeline to fail. This flag
 *  allows execution of other actions to continue instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreExitStatus;

/**
 *  Required. The URI to pull the container image from. Note that all images
 *  referenced by actions in the pipeline are pulled before the first action
 *  runs. If multiple actions reference the same image, it is only pulled once,
 *  ensuring that the same image is used for all actions in a single pipeline.
 *  The image URI can be either a complete host and image specification (e.g.,
 *  quay.io/biocontainers/samtools), a library and image name (e.g.,
 *  google/cloud-sdk) or a bare image name ('bash') to pull from the default
 *  library. No schema is required in any of these cases. If the specified image
 *  is not public, the service account specified for the Virtual Machine must
 *  have access to pull the images from GCR, or appropriate credentials must be
 *  specified in the google.cloud.lifesciences.v2beta.Action.credentials field.
 */
@property(nonatomic, copy, nullable) NSString *imageUri;

/**
 *  Labels to associate with the action. This field is provided to assist
 *  workflow engine authors in identifying actions (for example, to indicate
 *  what sort of action they perform, such as localization or debugging). They
 *  are returned in the operation metadata, but are otherwise ignored.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Action_Labels *labels;

/**
 *  A list of mounts to make available to the action. In addition to the values
 *  specified here, every action has a special virtual disk mounted under
 *  `/google` that contains log files and other operational components. -
 *  /google/logs All logs written during the pipeline execution. -
 *  /google/logs/output The combined standard output and standard error of all
 *  actions run as part of the pipeline execution. - /google/logs/action/ *
 *  /stdout The complete contents of each individual action's standard output. -
 *  /google/logs/action/ * /stderr The complete contents of each individual
 *  action's standard error output.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Mount *> *mounts;

/**
 *  An optional identifier for a PID namespace to run the action inside.
 *  Multiple actions should use the same string to share a namespace. If
 *  unspecified, a separate isolated namespace is used.
 */
@property(nonatomic, copy, nullable) NSString *pidNamespace;

/**
 *  A map of containers to host port mappings for this container. If the
 *  container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS`
 *  flag instead. The host port number must be less than 65536. If it is zero,
 *  an unused random port is assigned. To determine the resulting port number,
 *  consult the `ContainerStartedEvent` in the operation metadata.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Action_PortMappings *portMappings;

/**
 *  Exposes all ports specified by `EXPOSE` statements in the container. To
 *  discover the host side port numbers, consult the `ACTION_STARTED` event in
 *  the operation metadata.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *publishExposedPorts;

/**
 *  This flag allows an action to continue running in the background while
 *  executing subsequent actions. This is useful to provide services to other
 *  actions (or to provide debugging support tools like SSH servers).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runInBackground;

/**
 *  The maximum amount of time to give the action to complete. If the action
 *  fails to complete before the timeout, it will be terminated and the exit
 *  status will be non-zero. The pipeline will continue or terminate based on
 *  the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  The environment to pass into the container. This environment is merged with
 *  values specified in the google.cloud.lifesciences.v2beta.Pipeline message,
 *  overwriting any duplicate values. In addition to the values passed here, a
 *  few other values are automatically injected into the environment. These
 *  cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to "1"
 *  if the pipeline failed because an action has exited with a non-zero status
 *  (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to
 *  determine if additional debug or logging actions should execute.
 *  `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last
 *  non-background action that executed. This can be used by workflow engine
 *  authors to determine whether an individual action has succeeded or failed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Action_Environment : GTLRObject
@end


/**
 *  Labels to associate with the action. This field is provided to assist
 *  workflow engine authors in identifying actions (for example, to indicate
 *  what sort of action they perform, such as localization or debugging). They
 *  are returned in the operation metadata, but are otherwise ignored.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Action_Labels : GTLRObject
@end


/**
 *  A map of containers to host port mappings for this container. If the
 *  container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS`
 *  flag instead. The host port number must be less than 65536. If it is zero,
 *  an unused random port is assigned. To determine the resulting port number,
 *  consult the `ContainerStartedEvent` in the operation metadata.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Action_PortMappings : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudLifeSciences_CancelOperationRequest : GTLRObject
@end


/**
 *  An event generated when a container is forcibly terminated by the worker.
 *  Currently, this only occurs when the container outlives the timeout
 *  specified by the user.
 */
@interface GTLRCloudLifeSciences_ContainerKilledEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

@end


/**
 *  An event generated when a container starts.
 */
@interface GTLRCloudLifeSciences_ContainerStartedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The public IP address that can be used to connect to the container. This
 *  field is only populated when at least one port mapping is present. If the
 *  instance was created with a private address, this field will be empty even
 *  if port mappings exist.
 */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  The container-to-host port mappings installed for this container. This set
 *  will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as
 *  well as any specified in the `Action` definition.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ContainerStartedEvent_PortMappings *portMappings;

@end


/**
 *  The container-to-host port mappings installed for this container. This set
 *  will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as
 *  well as any specified in the `Action` definition.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_ContainerStartedEvent_PortMappings : GTLRObject
@end


/**
 *  An event generated when a container exits.
 */
@interface GTLRCloudLifeSciences_ContainerStoppedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

/**
 *  The tail end of any content written to standard error by the container. If
 *  the content emits large amounts of debugging noise or contains sensitive
 *  information, you can prevent the content from being printed by setting the
 *  `DISABLE_STANDARD_ERROR_CAPTURE` flag. Note that only a small amount of the
 *  end of the stream is captured here. The entire stream is stored in the
 *  `/google/logs` directory mounted into each action, and can be copied off the
 *  machine as described elsewhere.
 */
@property(nonatomic, copy, nullable) NSString *stderr;

@end


/**
 *  An event generated whenever a resource limitation or transient error delays
 *  execution of a pipeline that was otherwise ready to run.
 */
@interface GTLRCloudLifeSciences_DelayedEvent : GTLRObject

/**
 *  A textual description of the cause of the delay. The string can change
 *  without notice because it is often generated by another service (such as
 *  Compute Engine).
 */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  If the delay was caused by a resource shortage, this field lists the Compute
 *  Engine metrics that are preventing this operation from running (for example,
 *  `CPUS` or `INSTANCES`). If the particular metric is not known, a single
 *  `UNKNOWN` metric will be present.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

@end


/**
 *  Carries information about a disk that can be attached to a VM. See
 *  https://cloud.google.com/compute/docs/disks/performance for more information
 *  about disk type, size, and performance considerations. Specify either
 *  `Volume` or `Disk`, but not both.
 */
@interface GTLRCloudLifeSciences_Disk : GTLRObject

/**
 *  A user-supplied name for the disk. Used when mounting the disk into actions.
 *  The name must contain only upper and lowercase alphanumeric characters and
 *  hyphens and cannot start with a hyphen.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The size, in GB, of the disk to attach. If the size is not specified, a
 *  default is chosen to ensure reasonable I/O performance. If the disk type is
 *  specified as `local-ssd`, multiple local drives are automatically combined
 *  to provide the requested size. Note, however, that each physical SSD is
 *  375GB in size, and no more than 8 drives can be attached to a single
 *  instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeGb;

/** An optional image to put on the disk before attaching it to the VM. */
@property(nonatomic, copy, nullable) NSString *sourceImage;

/** The Compute Engine disk type. If unspecified, `pd-standard` is used. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudLifeSciences_Empty : GTLRObject
@end


/**
 *  Carries information about events that occur during pipeline execution.
 */
@interface GTLRCloudLifeSciences_Event : GTLRObject

/** See google.cloud.lifesciences.v2beta.ContainerKilledEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ContainerKilledEvent *containerKilled;

/** See google.cloud.lifesciences.v2beta.ContainerStartedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ContainerStartedEvent *containerStarted;

/** See google.cloud.lifesciences.v2beta.ContainerStoppedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ContainerStoppedEvent *containerStopped;

/** See google.cloud.lifesciences.v2beta.DelayedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_DelayedEvent *delayed;

/**
 *  A human-readable description of the event. Note that these strings can
 *  change at any time without notice. Any application logic must use the
 *  information in the `details` field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** See google.cloud.lifesciences.v2beta.FailedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_FailedEvent *failed;

/** See google.cloud.lifesciences.v2beta.PullStartedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_PullStartedEvent *pullStarted;

/** See google.cloud.lifesciences.v2beta.PullStoppedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_PullStoppedEvent *pullStopped;

/** The time at which the event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

/** See google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_UnexpectedExitStatusEvent *unexpectedExitStatus;

/** See google.cloud.lifesciences.v2beta.WorkerAssignedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_WorkerAssignedEvent *workerAssigned;

/** See google.cloud.lifesciences.v2beta.WorkerReleasedEvent. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_WorkerReleasedEvent *workerReleased;

@end


/**
 *  Configuration for an existing disk to be attached to the VM.
 */
@interface GTLRCloudLifeSciences_ExistingDisk : GTLRObject

/**
 *  If `disk` contains slashes, the Cloud Life Sciences API assumes that it is a
 *  complete URL for the disk. If `disk` does not contain slashes, the Cloud
 *  Life Sciences API assumes that the disk is a zonal disk and a URL will be
 *  generated of the form `zones//disks/`, where `` is the zone in which the
 *  instance is allocated. The disk must be ext4 formatted. If all `Mount`
 *  references to this disk have the `read_only` flag set to true, the disk will
 *  be attached in `read-only` mode and can be shared with other instances.
 *  Otherwise, the disk will be available for writing but cannot be shared.
 */
@property(nonatomic, copy, nullable) NSString *disk;

@end


/**
 *  An event generated when the execution of a pipeline has failed. Note that
 *  other events can continue to occur after this event.
 */
@interface GTLRCloudLifeSciences_FailedEvent : GTLRObject

/** The human-readable description of the cause of the failure. */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  The Google standard error code that best describes this failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Aborted The operation was
 *        aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_AlreadyExists The entity
 *        that a client attempted to create (e.g., file or directory) already
 *        exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Cancelled The operation
 *        was cancelled, typically by the caller. HTTP Mapping: 499 Client
 *        Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_DataLoss Unrecoverable
 *        data loss or corruption. HTTP Mapping: 500 Internal Server Error
 *        (Value: "DATA_LOSS")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_DeadlineExceeded The
 *        deadline expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned even
 *        if the operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_FailedPrecondition The
 *        operation was rejected because the system is not in a state required
 *        for the operation's execution. For example, the directory to be
 *        deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Internal Internal errors.
 *        This means that some invariants expected by the underlying system have
 *        been broken. This error code is reserved for serious errors. HTTP
 *        Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_InvalidArgument The client
 *        specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_NotFound Some requested
 *        entity (e.g., file or directory) was not found. Note to server
 *        developers: if a request is denied for an entire class of users, such
 *        as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may
 *        be used. If a request is denied for some users within a class of
 *        users, such as user-based access control, `PERMISSION_DENIED` must be
 *        used. HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Ok Not an error; returned
 *        on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_OutOfRange The operation
 *        was attempted past the valid range. E.g., seeking or reading past
 *        end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *        that may be fixed if the system state changes. For example, a 32-bit
 *        file system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_PermissionDenied The
 *        caller does not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_ResourceExhausted Some
 *        resource has been exhausted, perhaps a per-user quota, or perhaps the
 *        entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Unauthenticated The
 *        request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Unavailable The service is
 *        currently unavailable. This is most likely a transient condition,
 *        which can be corrected by retrying with a backoff. Note that it is not
 *        always safe to retry non-idempotent operations. See the guidelines
 *        above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable (Value:
 *        "UNAVAILABLE")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Unimplemented The
 *        operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRCloudLifeSciences_FailedEvent_Code_Unknown Unknown error. For
 *        example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *code;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudLifeSciences_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudLifeSciences_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudLifeSciences_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Location_Metadata : GTLRObject
@end


/**
 *  Carries information about the pipeline execution that is returned in the
 *  long running operation's metadata field.
 */
@interface GTLRCloudLifeSciences_Metadata : GTLRObject

/** The time at which the operation was created by the API. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The time at which execution was completed and resources were cleaned up.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The list of events that have happened so far during the execution of this
 *  operation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Event *> *events;

/** The user-defined labels associated with this operation. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Metadata_Labels *labels;

/** The pipeline this operation represents. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Pipeline *pipeline;

/**
 *  The name of the Cloud Pub/Sub topic where notifications of operation status
 *  changes are sent.
 */
@property(nonatomic, copy, nullable) NSString *pubSubTopic;

/**
 *  The first time at which resources were allocated to execute the pipeline.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The user-defined labels associated with this operation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Metadata_Labels : GTLRObject
@end


/**
 *  Carries information about a particular disk mount inside a container.
 */
@interface GTLRCloudLifeSciences_Mount : GTLRObject

/** The name of the disk to mount, as specified in the resources section. */
@property(nonatomic, copy, nullable) NSString *disk;

/** The path to mount the disk inside the container. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  If true, the disk is mounted read-only inside the container.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readOnly;

@end


/**
 *  VM networking options.
 */
@interface GTLRCloudLifeSciences_Network : GTLRObject

/**
 *  The network name to attach the VM's network interface to. The value will be
 *  prefixed with `global/networks/` unless it contains a `/`, in which case it
 *  is assumed to be a fully specified network resource URL. If unspecified, the
 *  global default network is used.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  If the specified network is configured for custom subnet creation, the name
 *  of the subnetwork to attach the instance to must be specified here. The
 *  value is prefixed with `regions/ * /subnetworks/` unless it contains a `/`,
 *  in which case it is assumed to be a fully specified subnetwork resource URL.
 *  If the `*` character appears in the value, it is replaced with the region
 *  that the virtual machine has been allocated in.
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/**
 *  If set to true, do not attach a public IP address to the VM. Note that
 *  without a public IP address, additional configuration is required to allow
 *  the VM to access Google services. See
 *  https://cloud.google.com/vpc/docs/configure-private-google-access for more
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *usePrivateAddress;

@end


/**
 *  Configuration for an `NFSMount` to be attached to the VM.
 */
@interface GTLRCloudLifeSciences_NFSMount : GTLRObject

/** A target NFS mount. The target must be specified as `address:/mount". */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudLifeSciences_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Status *error;

/** An Metadata object. This will always be returned with the Operation. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Operation_Metadata *metadata;

/**
 *  The server-assigned name for the operation. This may be passed to the other
 *  operation methods to retrieve information about the operation's status.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** An Empty object. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Operation_Response *response;

@end


/**
 *  An Metadata object. This will always be returned with the Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Operation_Metadata : GTLRObject
@end


/**
 *  An Empty object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Operation_Response : GTLRObject
@end


/**
 *  Configuration for a persistent disk to be attached to the VM. See
 *  https://cloud.google.com/compute/docs/disks/performance for more information
 *  about disk type, size, and performance considerations.
 */
@interface GTLRCloudLifeSciences_PersistentDisk : GTLRObject

/**
 *  The size, in GB, of the disk to attach. If the size is not specified, a
 *  default is chosen to ensure reasonable I/O performance. If the disk type is
 *  specified as `local-ssd`, multiple local drives are automatically combined
 *  to provide the requested size. Note, however, that each physical SSD is
 *  375GB in size, and no more than 8 drives can be attached to a single
 *  instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeGb;

/** An image to put on the disk before attaching it to the VM. */
@property(nonatomic, copy, nullable) NSString *sourceImage;

/** The Compute Engine disk type. If unspecified, `pd-standard` is used. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Specifies a series of actions to execute, expressed as Docker containers.
 */
@interface GTLRCloudLifeSciences_Pipeline : GTLRObject

/** The list of actions to execute, in the order they are specified. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Action *> *actions;

/**
 *  The encrypted environment to pass into every action. Each action can also
 *  specify its own encrypted environment. The secret must decrypt to a
 *  JSON-encoded dictionary where key-value pairs serve as environment variable
 *  names and their values. The decoded environment variables can overwrite the
 *  values specified by the `environment` field.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Secret *encryptedEnvironment;

/**
 *  The environment to pass into every action. Each action can also specify
 *  additional environment variables but cannot delete an entry from this map
 *  (though they can overwrite it with a different value).
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Pipeline_Environment *environment;

/** The resources required for execution. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Resources *resources;

/**
 *  The maximum amount of time to give the pipeline to complete. This includes
 *  the time spent waiting for a worker to be allocated. If the pipeline fails
 *  to complete before the timeout, it will be cancelled and the error code will
 *  be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  The environment to pass into every action. Each action can also specify
 *  additional environment variables but cannot delete an entry from this map
 *  (though they can overwrite it with a different value).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Pipeline_Environment : GTLRObject
@end


/**
 *  An event generated when the worker starts pulling an image.
 */
@interface GTLRCloudLifeSciences_PullStartedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  An event generated when the worker stops pulling an image.
 */
@interface GTLRCloudLifeSciences_PullStoppedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  The system resources for the pipeline run. At least one zone or region must
 *  be specified or the pipeline run will fail.
 */
@interface GTLRCloudLifeSciences_Resources : GTLRObject

/**
 *  The list of regions allowed for VM allocation. If set, the `zones` field
 *  must not be set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *regions;

/** The virtual machine specification. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_VirtualMachine *virtualMachine;

/**
 *  The list of zones allowed for VM allocation. If set, the `regions` field
 *  must not be set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *zones;

@end


/**
 *  The arguments to the `RunPipeline` method. The requesting user must have the
 *  `iam.serviceAccounts.actAs` permission for the Cloud Life Sciences service
 *  account or the request will fail.
 */
@interface GTLRCloudLifeSciences_RunPipelineRequest : GTLRObject

/**
 *  User-defined labels to associate with the returned operation. These labels
 *  are not propagated to any Google Cloud Platform resources used by the
 *  operation, and can be modified at any time. To associate labels with
 *  resources created while executing the operation, see the appropriate
 *  resource message (for example, `VirtualMachine`).
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_RunPipelineRequest_Labels *labels;

/** Required. The description of the pipeline to run. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Pipeline *pipeline;

/**
 *  The name of an existing Pub/Sub topic. The server will publish messages to
 *  this topic whenever the status of the operation changes. The Life Sciences
 *  Service Agent account must have publisher permissions to the specified topic
 *  or notifications will not be sent.
 */
@property(nonatomic, copy, nullable) NSString *pubSubTopic;

@end


/**
 *  User-defined labels to associate with the returned operation. These labels
 *  are not propagated to any Google Cloud Platform resources used by the
 *  operation, and can be modified at any time. To associate labels with
 *  resources created while executing the operation, see the appropriate
 *  resource message (for example, `VirtualMachine`).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_RunPipelineRequest_Labels : GTLRObject
@end


/**
 *  The response to the RunPipeline method, returned in the operation's result
 *  field on success.
 */
@interface GTLRCloudLifeSciences_RunPipelineResponse : GTLRObject
@end


/**
 *  Holds encrypted information that is only decrypted and stored in RAM by the
 *  worker VM when running the pipeline.
 */
@interface GTLRCloudLifeSciences_Secret : GTLRObject

/**
 *  The value of the cipherText response from the `encrypt` method. This field
 *  is intentionally unaudited.
 */
@property(nonatomic, copy, nullable) NSString *cipherText;

/**
 *  The name of the Cloud KMS key that will be used to decrypt the secret value.
 *  The VM service account must have the required permissions and authentication
 *  scopes to invoke the `decrypt` method on the specified key.
 */
@property(nonatomic, copy, nullable) NSString *keyName;

@end


/**
 *  Carries information about a Google Cloud service account.
 */
@interface GTLRCloudLifeSciences_ServiceAccount : GTLRObject

/**
 *  Email address of the service account. If not specified, the default Compute
 *  Engine service account for the project will be used.
 */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  List of scopes to be enabled for this service account on the VM, in addition
 *  to the cloud-platform API scope that will be added by default.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scopes;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudLifeSciences_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudLifeSciences_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudLifeSciences_Status_Details_Item : GTLRObject
@end


/**
 *  An event generated when the execution of a container results in a non-zero
 *  exit status that was not otherwise ignored. Execution will continue, but
 *  only actions that are flagged as `ALWAYS_RUN` will be executed. Other
 *  actions will be skipped.
 */
@interface GTLRCloudLifeSciences_UnexpectedExitStatusEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

@end


/**
 *  Carries information about a Compute Engine VM resource.
 */
@interface GTLRCloudLifeSciences_VirtualMachine : GTLRObject

/** The list of accelerators to attach to the VM. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Accelerator *> *accelerators;

/**
 *  The size of the boot disk, in GB. The boot disk must be large enough to
 *  accommodate all of the Docker images from each action in the pipeline at the
 *  same time. If not specified, a small but reasonable default value is used.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bootDiskSizeGb;

/**
 *  The host operating system image to use. Currently, only Container-Optimized
 *  OS images can be used. The default value is
 *  `projects/cos-cloud/global/images/family/cos-stable`, which selects the
 *  latest stable release of Container-Optimized OS. This option is provided to
 *  allow testing against the beta release of the operating system to ensure
 *  that the new version does not interact negatively with production pipelines.
 *  To test a pipeline against the beta release of Container-Optimized OS, use
 *  the value `projects/cos-cloud/global/images/family/cos-beta`.
 */
@property(nonatomic, copy, nullable) NSString *bootImage;

/**
 *  The CPU platform to request. An instance based on a newer platform can be
 *  allocated, but never one with fewer capabilities. The value of this
 *  parameter must be a valid Compute Engine CPU platform name (such as "Intel
 *  Skylake"). This parameter is only useful for carefully optimized work loads
 *  where the CPU platform has a significant impact. For more information about
 *  the effect of this parameter, see
 *  https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
 */
@property(nonatomic, copy, nullable) NSString *cpuPlatform;

/**
 *  The list of disks to create and attach to the VM. Specify either the
 *  `volumes[]` field or the `disks[]` field, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Disk *> *disks;

/**
 *  The Compute Engine Disk Images to use as a Docker cache. The disks will be
 *  mounted into the Docker folder in a way that the images present in the cache
 *  will not need to be pulled. The digests of the cached images must match
 *  those of the tags used or the latest version will still be pulled. The root
 *  directory of the ext4 image must contain `image` and `overlay2` directories
 *  copied from the Docker directory of a VM where the desired Docker images
 *  have already been pulled. Any images pulled that are not cached will be
 *  stored on the first cache disk instead of the boot disk. Only a single image
 *  is supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dockerCacheImages;

/**
 *  Whether Stackdriver monitoring should be enabled on the VM.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableStackdriverMonitoring;

/**
 *  Optional set of labels to apply to the VM and any attached disk resources.
 *  These labels must adhere to the [name and value
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources) on
 *  VM labels imposed by Compute Engine. Labels keys with the prefix 'google-'
 *  are reserved for use by Google. Labels applied at creation time to the VM.
 *  Applied on a best-effort basis to attached disk resources shortly after VM
 *  creation.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_VirtualMachine_Labels *labels;

/**
 *  Required. The machine type of the virtual machine to create. Must be the
 *  short name of a standard machine type (such as "n1-standard-1") or a custom
 *  machine type (such as "custom-1-4096", where "1" indicates the number of
 *  vCPUs and "4096" indicates the memory in MB). See [Creating an instance with
 *  a custom machine
 *  type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create)
 *  for more specifications on creating a custom machine type.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/** The VM network configuration. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_Network *network;

/**
 *  The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator.
 *  The version specified here must be compatible with the GPU libraries
 *  contained in the container being executed, and must be one of the drivers
 *  hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.
 */
@property(nonatomic, copy, nullable) NSString *nvidiaDriverVersion;

/**
 *  If true, allocate a preemptible VM.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preemptible;

/**
 *  If specified, the VM will only be allocated inside the matching reservation.
 *  It will fail if the VM parameters don't match the reservation.
 */
@property(nonatomic, copy, nullable) NSString *reservation;

/**
 *  The service account to install on the VM. This account does not need any
 *  permissions other than those required by the pipeline.
 */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ServiceAccount *serviceAccount;

/**
 *  The list of disks and other storage to create or attach to the VM. Specify
 *  either the `volumes[]` field or the `disks[]` field, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudLifeSciences_Volume *> *volumes;

@end


/**
 *  Optional set of labels to apply to the VM and any attached disk resources.
 *  These labels must adhere to the [name and value
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources) on
 *  VM labels imposed by Compute Engine. Labels keys with the prefix 'google-'
 *  are reserved for use by Google. Labels applied at creation time to the VM.
 *  Applied on a best-effort basis to attached disk resources shortly after VM
 *  creation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudLifeSciences_VirtualMachine_Labels : GTLRObject
@end


/**
 *  Carries information about storage that can be attached to a VM. Specify
 *  either `Volume` or `Disk`, but not both.
 */
@interface GTLRCloudLifeSciences_Volume : GTLRObject

/** Configuration for a existing disk. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_ExistingDisk *existingDisk;

/** Configuration for an NFS mount. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_NFSMount *nfsMount;

/** Configuration for a persistent disk. */
@property(nonatomic, strong, nullable) GTLRCloudLifeSciences_PersistentDisk *persistentDisk;

/**
 *  A user-supplied name for the volume. Used when mounting the volume into
 *  `Actions`. The name must contain only upper and lowercase alphanumeric
 *  characters and hyphens and cannot start with a hyphen.
 */
@property(nonatomic, copy, nullable) NSString *volume;

@end


/**
 *  An event generated after a worker VM has been assigned to run the pipeline.
 */
@interface GTLRCloudLifeSciences_WorkerAssignedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/** The machine type that was assigned for the worker. */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The zone the worker is running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  An event generated when the worker VM that was assigned to the pipeline has
 *  been released (deleted).
 */
@interface GTLRCloudLifeSciences_WorkerReleasedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The zone the worker was running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
