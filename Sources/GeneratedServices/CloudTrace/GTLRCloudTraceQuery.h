// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Trace API (cloudtrace/v2)
// Description:
//   Sends application trace data to Cloud Trace for viewing. Trace data is
//   collected for all App Engine applications by default. Trace data from other
//   applications can be provided using this API. This library is used to
//   interact with the Cloud Trace API directly. If you are looking to
//   instrument your application for Cloud Trace, we recommend using
//   OpenTelemetry.
// Documentation:
//   https://cloud.google.com/trace

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudTraceObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Trace query classes.
 */
@interface GTLRCloudTraceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Batch writes new spans to new or existing traces. You cannot update existing
 *  spans.
 *
 *  Method: cloudtrace.projects.traces.batchWrite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudTraceCloudPlatform
 *    @c kGTLRAuthScopeCloudTraceTraceAppend
 */
@interface GTLRCloudTraceQuery_ProjectsTracesBatchWrite : GTLRCloudTraceQuery

/**
 *  Required. The name of the project where the spans belong. The format is
 *  `projects/[PROJECT_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudTrace_Empty.
 *
 *  Batch writes new spans to new or existing traces. You cannot update existing
 *  spans.
 *
 *  @param object The @c GTLRCloudTrace_BatchWriteSpansRequest to include in the
 *    query.
 *  @param name Required. The name of the project where the spans belong. The
 *    format is `projects/[PROJECT_ID]`.
 *
 *  @return GTLRCloudTraceQuery_ProjectsTracesBatchWrite
 */
+ (instancetype)queryWithObject:(GTLRCloudTrace_BatchWriteSpansRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new span.
 *
 *  Method: cloudtrace.projects.traces.spans.createSpan
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudTraceCloudPlatform
 *    @c kGTLRAuthScopeCloudTraceTraceAppend
 */
@interface GTLRCloudTraceQuery_ProjectsTracesSpansCreateSpan : GTLRCloudTraceQuery

/**
 *  Required. The resource name of the span in the following format: *
 *  `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a
 *  unique identifier for a trace within a project; it is a 32-character
 *  hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]`
 *  is a unique identifier for a span within a trace; it is a 16-character
 *  hexadecimal encoding of an 8-byte array. It should not be zero. .
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudTrace_Span.
 *
 *  Creates a new span.
 *
 *  @param object The @c GTLRCloudTrace_Span to include in the query.
 *  @param name Required. The resource name of the span in the following format:
 *    * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]`
 *    is a unique identifier for a trace within a project; it is a 32-character
 *    hexadecimal encoding of a 16-byte array. It should not be zero.
 *    `[SPAN_ID]` is a unique identifier for a span within a trace; it is a
 *    16-character hexadecimal encoding of an 8-byte array. It should not be
 *    zero. .
 *
 *  @return GTLRCloudTraceQuery_ProjectsTracesSpansCreateSpan
 */
+ (instancetype)queryWithObject:(GTLRCloudTrace_Span *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
