// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Observability API (observability/v1)
// Documentation:
//   https://cloud.google.com/stackdriver/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudObservabilityObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Observability query classes.
 */
@interface GTLRCloudObservabilityQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: observability.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsGet : GTLRCloudObservabilityQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudObservability_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: observability.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsList : GTLRCloudObservabilityQuery

/**
 *  Optional. Do not use this field. It is unsupported and is ignored unless
 *  explicitly documented otherwise. This is primarily for internal usage.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraLocationTypes;

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudObservability_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: observability.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsOperationsCancel : GTLRCloudObservabilityQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudObservability_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudObservability_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudObservability_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: observability.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsOperationsDelete : GTLRCloudObservabilityQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudObservability_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: observability.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsOperationsGet : GTLRCloudObservabilityQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudObservability_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: observability.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsOperationsList : GTLRCloudObservabilityQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudObservability_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Scope.
 *
 *  Method: observability.projects.locations.scopes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsScopesGet : GTLRCloudObservabilityQuery

/**
 *  Required. Name of the resource. The format is:
 *  projects/{project}/locations/{location}/scopes/{scope} The `{location}`
 *  field must be set to `global`. The `{scope}` field must be set to
 *  `_Default`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudObservability_Scope.
 *
 *  Gets details of a single Scope.
 *
 *  @param name Required. Name of the resource. The format is:
 *    projects/{project}/locations/{location}/scopes/{scope} The `{location}`
 *    field must be set to `global`. The `{scope}` field must be set to
 *    `_Default`.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsScopesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the parameters of a single Scope.
 *
 *  Method: observability.projects.locations.scopes.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudObservabilityCloudPlatform
 */
@interface GTLRCloudObservabilityQuery_ProjectsLocationsScopesPatch : GTLRCloudObservabilityQuery

/**
 *  Identifier. Name of the resource. The format is:
 *  projects/{project}/locations/{location}/scopes/{scope} The `{location}`
 *  field must be set to `global`. The `{scope}` field must be set to
 *  `_Default`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Scope resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field is overwritten when
 *  it is in the mask. If the user does not provide a mask, then all fields
 *  present in the request are overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudObservability_Scope.
 *
 *  Updates the parameters of a single Scope.
 *
 *  @param object The @c GTLRCloudObservability_Scope to include in the query.
 *  @param name Identifier. Name of the resource. The format is:
 *    projects/{project}/locations/{location}/scopes/{scope} The `{location}`
 *    field must be set to `global`. The `{scope}` field must be set to
 *    `_Default`.
 *
 *  @return GTLRCloudObservabilityQuery_ProjectsLocationsScopesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudObservability_Scope *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
