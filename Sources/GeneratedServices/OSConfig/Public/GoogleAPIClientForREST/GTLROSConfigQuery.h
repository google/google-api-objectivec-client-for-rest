// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   OS Config API (osconfig/v2)
// Description:
//   OS management tools that can be used for patch management, patch
//   compliance, and configuration management on VM instances.
// Documentation:
//   https://cloud.google.com/compute/docs/osconfig/rest

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLROSConfigObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other OS Config query classes.
 */
@interface GTLROSConfigQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new policy orchestrator under the given folder resource. `name`
 *  field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  Method: osconfig.folders.locations.global.policyOrchestrators.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsCreate : GTLROSConfigQuery

/**
 *  Required. The parent resource name in the form of: *
 *  `organizations/{organization_id}/locations/global` *
 *  `folders/{folder_id}/locations/global` *
 *  `projects/{project_id_or_number}/locations/global`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The logical identifier of the policy orchestrator, with the
 *  following restrictions: * Must contain only lowercase letters, numbers, and
 *  hyphens. * Must start with a letter. * Must be between 1-63 characters. *
 *  Must end with a number or a letter. * Must be unique within the parent.
 */
@property(nonatomic, copy, nullable) NSString *policyOrchestratorId;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Creates a new policy orchestrator under the given folder resource. `name`
 *  field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param parent Required. The parent resource name in the form of: *
 *    `organizations/{organization_id}/locations/global` *
 *    `folders/{folder_id}/locations/global` *
 *    `projects/{project_id_or_number}/locations/global`
 *
 *  @return GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsCreate
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing policy orchestrator resource, parented by a folder.
 *
 *  Method: osconfig.folders.locations.global.policyOrchestrators.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsDelete : GTLROSConfigQuery

/**
 *  Optional. The current etag of the policy orchestrator. If an etag is
 *  provided and does not match the current etag of the policy orchestrator,
 *  deletion will be blocked and an ABORTED error will be returned.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Required. Name of the resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Deletes an existing policy orchestrator resource, parented by a folder.
 *
 *  @param name Required. Name of the resource to be deleted.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves an existing policy orchestrator, parented by a folder.
 *
 *  Method: osconfig.folders.locations.global.policyOrchestrators.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsGet : GTLROSConfigQuery

/** Required. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator.
 *
 *  Retrieves an existing policy orchestrator, parented by a folder.
 *
 *  @param name Required. The resource name.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the policy orchestrators under the given parent folder resource.
 *
 *  Method: osconfig.folders.locations.global.policyOrchestrators.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsList : GTLROSConfigQuery

/** Optional. Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLROSConfig_GoogleCloudOsconfigV2ListPolicyOrchestratorsResponse.
 *
 *  Lists the policy orchestrators under the given parent folder resource.
 *
 *  @param parent Required. The parent resource name.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing policy orchestrator, parented by a folder.
 *
 *  Method: osconfig.folders.locations.global.policyOrchestrators.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsPatch : GTLROSConfigQuery

/**
 *  Immutable. Identifier. In form of *
 *  `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to merge into the existing policy orchestrator.
 *  A special ["*"] field mask can be used to simply replace the entire
 *  resource. Otherwise, for all paths referenced in the mask, following merge
 *  rules are used: * output only fields are ignored, * primitive fields are
 *  replaced, * repeated fields are replaced, * map fields are merged key by
 *  key, * message fields are cleared if not set in the request, otherwise they
 *  are merged recursively (in particular - message fields set to an empty
 *  message has no side effects) If field mask is not specified, it is
 *  automatically inferred from the request using following rules: * primitive
 *  fields are listed, if set to a non-default value (as there is no way to
 *  distinguish between default and unset value), * map and repeated fields are
 *  listed, * `google.protobuf.Any` fields are listed, * other message fields
 *  are traversed recursively. Note: implicit mask does not allow clearing
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Updates an existing policy orchestrator, parented by a folder.
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param name Immutable. Identifier. In form of *
 *    `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 *
 *  @return GTLROSConfigQuery_FoldersLocationsGlobalPolicyOrchestratorsPatch
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: osconfig.folders.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsOperationsCancel : GTLROSConfigQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLROSConfig_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLROSConfig_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: osconfig.folders.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsOperationsDelete : GTLROSConfigQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: osconfig.folders.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsOperationsGet : GTLROSConfigQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: osconfig.folders.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_FoldersLocationsOperationsList : GTLROSConfigQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLROSConfig_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLROSConfigQuery_FoldersLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new policy orchestrator under the given organizations resource.
 *  `name` field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  Method: osconfig.organizations.locations.global.policyOrchestrators.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsCreate : GTLROSConfigQuery

/**
 *  Required. The parent resource name in the form of: *
 *  `organizations/{organization_id}/locations/global` *
 *  `folders/{folder_id}/locations/global` *
 *  `projects/{project_id_or_number}/locations/global`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The logical identifier of the policy orchestrator, with the
 *  following restrictions: * Must contain only lowercase letters, numbers, and
 *  hyphens. * Must start with a letter. * Must be between 1-63 characters. *
 *  Must end with a number or a letter. * Must be unique within the parent.
 */
@property(nonatomic, copy, nullable) NSString *policyOrchestratorId;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Creates a new policy orchestrator under the given organizations resource.
 *  `name` field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param parent Required. The parent resource name in the form of: *
 *    `organizations/{organization_id}/locations/global` *
 *    `folders/{folder_id}/locations/global` *
 *    `projects/{project_id_or_number}/locations/global`
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsCreate
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing policy orchestrator resource, parented by an
 *  organization.
 *
 *  Method: osconfig.organizations.locations.global.policyOrchestrators.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsDelete : GTLROSConfigQuery

/**
 *  Optional. The current etag of the policy orchestrator. If an etag is
 *  provided and does not match the current etag of the policy orchestrator,
 *  deletion will be blocked and an ABORTED error will be returned.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Required. Name of the resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Deletes an existing policy orchestrator resource, parented by an
 *  organization.
 *
 *  @param name Required. Name of the resource to be deleted.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves an existing policy orchestrator, parented by an organization.
 *
 *  Method: osconfig.organizations.locations.global.policyOrchestrators.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsGet : GTLROSConfigQuery

/** Required. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator.
 *
 *  Retrieves an existing policy orchestrator, parented by an organization.
 *
 *  @param name Required. The resource name.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the policy orchestrators under the given parent organization resource.
 *
 *  Method: osconfig.organizations.locations.global.policyOrchestrators.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsList : GTLROSConfigQuery

/** Optional. Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLROSConfig_GoogleCloudOsconfigV2ListPolicyOrchestratorsResponse.
 *
 *  Lists the policy orchestrators under the given parent organization resource.
 *
 *  @param parent Required. The parent resource name.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing policy orchestrator, parented by an organization.
 *
 *  Method: osconfig.organizations.locations.global.policyOrchestrators.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsPatch : GTLROSConfigQuery

/**
 *  Immutable. Identifier. In form of *
 *  `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to merge into the existing policy orchestrator.
 *  A special ["*"] field mask can be used to simply replace the entire
 *  resource. Otherwise, for all paths referenced in the mask, following merge
 *  rules are used: * output only fields are ignored, * primitive fields are
 *  replaced, * repeated fields are replaced, * map fields are merged key by
 *  key, * message fields are cleared if not set in the request, otherwise they
 *  are merged recursively (in particular - message fields set to an empty
 *  message has no side effects) If field mask is not specified, it is
 *  automatically inferred from the request using following rules: * primitive
 *  fields are listed, if set to a non-default value (as there is no way to
 *  distinguish between default and unset value), * map and repeated fields are
 *  listed, * `google.protobuf.Any` fields are listed, * other message fields
 *  are traversed recursively. Note: implicit mask does not allow clearing
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Updates an existing policy orchestrator, parented by an organization.
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param name Immutable. Identifier. In form of *
 *    `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsGlobalPolicyOrchestratorsPatch
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: osconfig.organizations.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsOperationsCancel : GTLROSConfigQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLROSConfig_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLROSConfig_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: osconfig.organizations.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsOperationsDelete : GTLROSConfigQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: osconfig.organizations.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsOperationsGet : GTLROSConfigQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: osconfig.organizations.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_OrganizationsLocationsOperationsList : GTLROSConfigQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLROSConfig_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLROSConfigQuery_OrganizationsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new policy orchestrator under the given project resource. `name`
 *  field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  Method: osconfig.projects.locations.global.policyOrchestrators.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsCreate : GTLROSConfigQuery

/**
 *  Required. The parent resource name in the form of: *
 *  `organizations/{organization_id}/locations/global` *
 *  `folders/{folder_id}/locations/global` *
 *  `projects/{project_id_or_number}/locations/global`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The logical identifier of the policy orchestrator, with the
 *  following restrictions: * Must contain only lowercase letters, numbers, and
 *  hyphens. * Must start with a letter. * Must be between 1-63 characters. *
 *  Must end with a number or a letter. * Must be unique within the parent.
 */
@property(nonatomic, copy, nullable) NSString *policyOrchestratorId;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Creates a new policy orchestrator under the given project resource. `name`
 *  field of the given orchestrator are ignored and instead replaced by a
 *  product of `parent` and `policy_orchestrator_id`. Orchestrator state field
 *  might be only set to `ACTIVE`, `STOPPED` or omitted (in which case, the
 *  created resource will be in `ACTIVE` state anyway).
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param parent Required. The parent resource name in the form of: *
 *    `organizations/{organization_id}/locations/global` *
 *    `folders/{folder_id}/locations/global` *
 *    `projects/{project_id_or_number}/locations/global`
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsCreate
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing policy orchestrator resource, parented by a project.
 *
 *  Method: osconfig.projects.locations.global.policyOrchestrators.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsDelete : GTLROSConfigQuery

/**
 *  Optional. The current etag of the policy orchestrator. If an etag is
 *  provided and does not match the current etag of the policy orchestrator,
 *  deletion will be blocked and an ABORTED error will be returned.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Required. Name of the resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Deletes an existing policy orchestrator resource, parented by a project.
 *
 *  @param name Required. Name of the resource to be deleted.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves an existing policy orchestrator, parented by a project.
 *
 *  Method: osconfig.projects.locations.global.policyOrchestrators.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsGet : GTLROSConfigQuery

/** Required. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator.
 *
 *  Retrieves an existing policy orchestrator, parented by a project.
 *
 *  @param name Required. The resource name.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the policy orchestrators under the given parent project resource.
 *
 *  Method: osconfig.projects.locations.global.policyOrchestrators.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsList : GTLROSConfigQuery

/** Optional. Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLROSConfig_GoogleCloudOsconfigV2ListPolicyOrchestratorsResponse.
 *
 *  Lists the policy orchestrators under the given parent project resource.
 *
 *  @param parent Required. The parent resource name.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing policy orchestrator, parented by a project.
 *
 *  Method: osconfig.projects.locations.global.policyOrchestrators.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsPatch : GTLROSConfigQuery

/**
 *  Immutable. Identifier. In form of *
 *  `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to merge into the existing policy orchestrator.
 *  A special ["*"] field mask can be used to simply replace the entire
 *  resource. Otherwise, for all paths referenced in the mask, following merge
 *  rules are used: * output only fields are ignored, * primitive fields are
 *  replaced, * repeated fields are replaced, * map fields are merged key by
 *  key, * message fields are cleared if not set in the request, otherwise they
 *  are merged recursively (in particular - message fields set to an empty
 *  message has no side effects) If field mask is not specified, it is
 *  automatically inferred from the request using following rules: * primitive
 *  fields are listed, if set to a non-default value (as there is no way to
 *  distinguish between default and unset value), * map and repeated fields are
 *  listed, * `google.protobuf.Any` fields are listed, * other message fields
 *  are traversed recursively. Note: implicit mask does not allow clearing
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Updates an existing policy orchestrator, parented by a project.
 *
 *  @param object The @c GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator to
 *    include in the query.
 *  @param name Immutable. Identifier. In form of *
 *    `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *    *
 *    `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsGlobalPolicyOrchestratorsPatch
 */
+ (instancetype)queryWithObject:(GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: osconfig.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOperationsCancel : GTLROSConfigQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLROSConfig_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLROSConfig_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: osconfig.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOperationsDelete : GTLROSConfigQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: osconfig.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOperationsGet : GTLROSConfigQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: osconfig.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOperationsList : GTLROSConfigQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLROSConfig_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
