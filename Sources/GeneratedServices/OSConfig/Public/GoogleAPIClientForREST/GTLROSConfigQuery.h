// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   OS Config API (osconfig/v1)
// Description:
//   OS management tools that can be used for patch management, patch
//   compliance, and configuration management on VM instances.
// Documentation:
//   https://cloud.google.com/compute/docs/osconfig/rest

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLROSConfigObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Returns the basic inventory information that includes `os_info`.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfigViewBasic;
/**
 *  Returns all fields.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfigViewFull;
/**
 *  The default value. The API defaults to the BASIC view.
 *
 *  Value: "INVENTORY_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfigViewInventoryViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other OS Config query classes.
 */
@interface GTLROSConfigQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Get inventory data for the specified VM instance. If the VM has no
 *  associated inventory, the message `NOT_FOUND` is returned.
 *
 *  Method: osconfig.projects.locations.instances.inventories.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesInventoriesGet : GTLROSConfigQuery

/**
 *  Required. API resource name for inventory resource. Format:
 *  `projects/{project}/locations/{location}/instances/{instance}/inventory` For
 *  `{project}`, either `project-number` or `project-id` can be provided. For
 *  `{instance}`, either Compute Engine `instance-id` or `instance-name` can be
 *  provided.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Inventory view indicating what information should be included in the
 *  inventory resource. If unspecified, the default view is BASIC.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfigViewInventoryViewUnspecified The default value. The
 *        API defaults to the BASIC view. (Value: "INVENTORY_VIEW_UNSPECIFIED")
 *    @arg @c kGTLROSConfigViewBasic Returns the basic inventory information
 *        that includes `os_info`. (Value: "BASIC")
 *    @arg @c kGTLROSConfigViewFull Returns all fields. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLROSConfig_Inventory.
 *
 *  Get inventory data for the specified VM instance. If the VM has no
 *  associated inventory, the message `NOT_FOUND` is returned.
 *
 *  @param name Required. API resource name for inventory resource. Format:
 *    `projects/{project}/locations/{location}/instances/{instance}/inventory`
 *    For `{project}`, either `project-number` or `project-id` can be provided.
 *    For `{instance}`, either Compute Engine `instance-id` or `instance-name`
 *    can be provided.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesInventoriesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List inventory data for all VM instances in the specified zone.
 *
 *  Method: osconfig.projects.locations.instances.inventories.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesInventoriesList : GTLROSConfigQuery

/**
 *  If provided, this field specifies the criteria that must be met by a
 *  `Inventory` API resource to be included in the response.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to `ListInventories` that
 *  indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Format:
 *  `projects/{project}/locations/{location}/instances/-` For `{project}`,
 *  either `project-number` or `project-id` can be provided.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Inventory view indicating what information should be included in the
 *  inventory resource. If unspecified, the default view is BASIC.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfigViewInventoryViewUnspecified The default value. The
 *        API defaults to the BASIC view. (Value: "INVENTORY_VIEW_UNSPECIFIED")
 *    @arg @c kGTLROSConfigViewBasic Returns the basic inventory information
 *        that includes `os_info`. (Value: "BASIC")
 *    @arg @c kGTLROSConfigViewFull Returns all fields. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLROSConfig_ListInventoriesResponse.
 *
 *  List inventory data for all VM instances in the specified zone.
 *
 *  @param parent Required. The parent resource name. Format:
 *    `projects/{project}/locations/{location}/instances/-` For `{project}`,
 *    either `project-number` or `project-id` can be provided.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesInventoriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get the OS policy asssignment report for the specified Compute Engine VM
 *  instance.
 *
 *  Method: osconfig.projects.locations.instances.osPolicyAssignments.reports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesOsPolicyAssignmentsReportsGet : GTLROSConfigQuery

/**
 *  Required. API resource name for OS policy assignment report. Format:
 *  `/projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/report`
 *  For `{project}`, either `project-number` or `project-id` can be provided.
 *  For `{instance_id}`, either Compute Engine `instance-id` or `instance-name`
 *  can be provided. For `{assignment_id}`, the OSPolicyAssignment id must be
 *  provided.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_OSPolicyAssignmentReport.
 *
 *  Get the OS policy asssignment report for the specified Compute Engine VM
 *  instance.
 *
 *  @param name Required. API resource name for OS policy assignment report.
 *    Format:
 *    `/projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/report`
 *    For `{project}`, either `project-number` or `project-id` can be provided.
 *    For `{instance_id}`, either Compute Engine `instance-id` or
 *    `instance-name` can be provided. For `{assignment_id}`, the
 *    OSPolicyAssignment id must be provided.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesOsPolicyAssignmentsReportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List OS policy asssignment reports for all Compute Engine VM instances in
 *  the specified zone.
 *
 *  Method: osconfig.projects.locations.instances.osPolicyAssignments.reports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesOsPolicyAssignmentsReportsList : GTLROSConfigQuery

/**
 *  If provided, this field specifies the criteria that must be met by the
 *  `OSPolicyAssignmentReport` API resource that is included in the response.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to the
 *  `ListOSPolicyAssignmentReports` method that indicates where this listing
 *  should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Format:
 *  `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/reports`
 *  For `{project}`, either `project-number` or `project-id` can be provided.
 *  For `{instance}`, either `instance-name`, `instance-id`, or `-` can be
 *  provided. If '-' is provided, the response will include
 *  OSPolicyAssignmentReports for all instances in the project/location. For
 *  `{assignment}`, either `assignment-id` or `-` can be provided. If '-' is
 *  provided, the response will include OSPolicyAssignmentReports for all
 *  OSPolicyAssignments in the project/location. Either {instance} or
 *  {assignment} must be `-`. For example:
 *  `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/-/reports`
 *  returns all reports for the instance
 *  `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/{assignment-id}/reports`
 *  returns all the reports for the given assignment across all instances.
 *  `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/-/reports`
 *  returns all the reports for all assignments across all instances.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListOSPolicyAssignmentReportsResponse.
 *
 *  List OS policy asssignment reports for all Compute Engine VM instances in
 *  the specified zone.
 *
 *  @param parent Required. The parent resource name. Format:
 *    `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/reports`
 *    For `{project}`, either `project-number` or `project-id` can be provided.
 *    For `{instance}`, either `instance-name`, `instance-id`, or `-` can be
 *    provided. If '-' is provided, the response will include
 *    OSPolicyAssignmentReports for all instances in the project/location. For
 *    `{assignment}`, either `assignment-id` or `-` can be provided. If '-' is
 *    provided, the response will include OSPolicyAssignmentReports for all
 *    OSPolicyAssignments in the project/location. Either {instance} or
 *    {assignment} must be `-`. For example:
 *    `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/-/reports`
 *    returns all reports for the instance
 *    `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/{assignment-id}/reports`
 *    returns all the reports for the given assignment across all instances.
 *    `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/-/reports`
 *    returns all the reports for all assignments across all instances.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesOsPolicyAssignmentsReportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the vulnerability report for the specified VM instance. Only VMs with
 *  inventory data have vulnerability reports associated with them.
 *
 *  Method: osconfig.projects.locations.instances.vulnerabilityReports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesVulnerabilityReportsGet : GTLROSConfigQuery

/**
 *  Required. API resource name for vulnerability resource. Format:
 *  `projects/{project}/locations/{location}/instances/{instance}/vulnerabilityReport`
 *  For `{project}`, either `project-number` or `project-id` can be provided.
 *  For `{instance}`, either Compute Engine `instance-id` or `instance-name` can
 *  be provided.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_VulnerabilityReport.
 *
 *  Gets the vulnerability report for the specified VM instance. Only VMs with
 *  inventory data have vulnerability reports associated with them.
 *
 *  @param name Required. API resource name for vulnerability resource. Format:
 *    `projects/{project}/locations/{location}/instances/{instance}/vulnerabilityReport`
 *    For `{project}`, either `project-number` or `project-id` can be provided.
 *    For `{instance}`, either Compute Engine `instance-id` or `instance-name`
 *    can be provided.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesVulnerabilityReportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List vulnerability reports for all VM instances in the specified zone.
 *
 *  Method: osconfig.projects.locations.instances.vulnerabilityReports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsInstancesVulnerabilityReportsList : GTLROSConfigQuery

/**
 *  This field supports filtering by the severity level for the vulnerability.
 *  For a list of severity levels, see [Severity levels for
 *  vulnerabilities](https://cloud.google.com/container-analysis/docs/container-scanning-overview#severity_levels_for_vulnerabilities).
 *  The filter field follows the rules described in the
 *  [AIP-160](https://google.aip.dev/160) guidelines as follows: + **Filter for
 *  a specific severity type**: you can list reports that contain
 *  vulnerabilities that are classified as medium by specifying
 *  `vulnerabilities.details.severity:MEDIUM`. + **Filter for a range of
 *  severities** : you can list reports that have vulnerabilities that are
 *  classified as critical or high by specifying
 *  `vulnerabilities.details.severity:HIGH OR
 *  vulnerabilities.details.severity:CRITICAL`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to
 *  `ListVulnerabilityReports` that indicates where this listing should continue
 *  from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. Format:
 *  `projects/{project}/locations/{location}/instances/-` For `{project}`,
 *  either `project-number` or `project-id` can be provided.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListVulnerabilityReportsResponse.
 *
 *  List vulnerability reports for all VM instances in the specified zone.
 *
 *  @param parent Required. The parent resource name. Format:
 *    `projects/{project}/locations/{location}/instances/-` For `{project}`,
 *    either `project-number` or `project-id` can be provided.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsInstancesVulnerabilityReportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create an OS policy assignment. This method also creates the first revision
 *  of the OS policy assignment. This method returns a long running operation
 *  (LRO) that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. For more information, see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsCreate : GTLROSConfigQuery

/**
 *  Required. The logical name of the OS policy assignment in the project with
 *  the following restrictions: * Must contain only lowercase letters, numbers,
 *  and hyphens. * Must start with a letter. * Must be between 1-63 characters.
 *  * Must end with a number or a letter. * Must be unique within the project.
 */
@property(nonatomic, copy, nullable) NSString *osPolicyAssignmentId;

/**
 *  Required. The parent resource name in the form:
 *  projects/{project}/locations/{location}. Note: Specify the zone of your VMs
 *  as the location.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Create an OS policy assignment. This method also creates the first revision
 *  of the OS policy assignment. This method returns a long running operation
 *  (LRO) that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. For more information, see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  @param object The @c GTLROSConfig_OSPolicyAssignment to include in the
 *    query.
 *  @param parent Required. The parent resource name in the form:
 *    projects/{project}/locations/{location}. Note: Specify the zone of your
 *    VMs as the location.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsCreate
 */
+ (instancetype)queryWithObject:(GTLROSConfig_OSPolicyAssignment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete the OS policy assignment. This method creates a new revision of the
 *  OS policy assignment. This method returns a long running operation (LRO)
 *  that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. If the LRO completes and is not cancelled, all revisions
 *  associated with the OS policy assignment are deleted. For more information,
 *  see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsDelete : GTLROSConfigQuery

/** Required. The name of the OS policy assignment to be deleted */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Delete the OS policy assignment. This method creates a new revision of the
 *  OS policy assignment. This method returns a long running operation (LRO)
 *  that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. If the LRO completes and is not cancelled, all revisions
 *  associated with the OS policy assignment are deleted. For more information,
 *  see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  @param name Required. The name of the OS policy assignment to be deleted
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve an existing OS policy assignment. This method always returns the
 *  latest revision. In order to retrieve a previous revision of the assignment,
 *  also provide the revision ID in the `name` parameter.
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsGet : GTLROSConfigQuery

/**
 *  Required. The resource name of OS policy assignment. Format:
 *  `projects/{project}/locations/{location}/osPolicyAssignments/{os_policy_assignment}\@{revisionId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_OSPolicyAssignment.
 *
 *  Retrieve an existing OS policy assignment. This method always returns the
 *  latest revision. In order to retrieve a previous revision of the assignment,
 *  also provide the revision ID in the `name` parameter.
 *
 *  @param name Required. The resource name of OS policy assignment. Format:
 *    `projects/{project}/locations/{location}/osPolicyAssignments/{os_policy_assignment}\@{revisionId}`
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List the OS policy assignments under the parent resource. For each OS policy
 *  assignment, the latest revision is returned.
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsList : GTLROSConfigQuery

/** The maximum number of assignments to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to
 *  `ListOSPolicyAssignments` that indicates where this listing should continue
 *  from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListOSPolicyAssignmentsResponse.
 *
 *  List the OS policy assignments under the parent resource. For each OS policy
 *  assignment, the latest revision is returned.
 *
 *  @param parent Required. The parent resource name.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  List the OS policy assignment revisions for a given OS policy assignment.
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.listRevisions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsListRevisions : GTLROSConfigQuery

/** Required. The name of the OS policy assignment to list revisions for. */
@property(nonatomic, copy, nullable) NSString *name;

/** The maximum number of revisions to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call to
 *  `ListOSPolicyAssignmentRevisions` that indicates where this listing should
 *  continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLROSConfig_ListOSPolicyAssignmentRevisionsResponse.
 *
 *  List the OS policy assignment revisions for a given OS policy assignment.
 *
 *  @param name Required. The name of the OS policy assignment to list revisions
 *    for.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsListRevisions
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsOperationsCancel : GTLROSConfigQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLROSConfig_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLROSConfig_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsOperationsGet : GTLROSConfigQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Update an existing OS policy assignment. This method creates a new revision
 *  of the OS policy assignment. This method returns a long running operation
 *  (LRO) that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. For more information, see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  Method: osconfig.projects.locations.osPolicyAssignments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsPatch : GTLROSConfigQuery

/**
 *  Resource name. Format:
 *  `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}`
 *  This field is ignored when you create an OS policy assignment.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that controls which fields of the assignment should be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLROSConfig_Operation.
 *
 *  Update an existing OS policy assignment. This method creates a new revision
 *  of the OS policy assignment. This method returns a long running operation
 *  (LRO) that contains the rollout details. The rollout can be cancelled by
 *  cancelling the LRO. For more information, see [Method:
 *  projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 *
 *  @param object The @c GTLROSConfig_OSPolicyAssignment to include in the
 *    query.
 *  @param name Resource name. Format:
 *    `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}`
 *    This field is ignored when you create an OS policy assignment.
 *
 *  @return GTLROSConfigQuery_ProjectsLocationsOsPolicyAssignmentsPatch
 */
+ (instancetype)queryWithObject:(GTLROSConfig_OSPolicyAssignment *)object
                           name:(NSString *)name;

@end

/**
 *  Create an OS Config patch deployment.
 *
 *  Method: osconfig.projects.patchDeployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsCreate : GTLROSConfigQuery

/**
 *  Required. The project to apply this patch deployment to in the form
 *  `projects/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A name for the patch deployment in the project. When creating a
 *  name the following rules apply: * Must contain only lowercase letters,
 *  numbers, and hyphens. * Must start with a letter. * Must be between 1-63
 *  characters. * Must end with a number or a letter. * Must be unique within
 *  the project.
 */
@property(nonatomic, copy, nullable) NSString *patchDeploymentId;

/**
 *  Fetches a @c GTLROSConfig_PatchDeployment.
 *
 *  Create an OS Config patch deployment.
 *
 *  @param object The @c GTLROSConfig_PatchDeployment to include in the query.
 *  @param parent Required. The project to apply this patch deployment to in the
 *    form `projects/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLROSConfig_PatchDeployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an OS Config patch deployment.
 *
 *  Method: osconfig.projects.patchDeployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsDelete : GTLROSConfigQuery

/**
 *  Required. The resource name of the patch deployment in the form `projects/ *
 *  /patchDeployments/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_Empty.
 *
 *  Delete an OS Config patch deployment.
 *
 *  @param name Required. The resource name of the patch deployment in the form
 *    `projects/ * /patchDeployments/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get an OS Config patch deployment.
 *
 *  Method: osconfig.projects.patchDeployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsGet : GTLROSConfigQuery

/**
 *  Required. The resource name of the patch deployment in the form `projects/ *
 *  /patchDeployments/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_PatchDeployment.
 *
 *  Get an OS Config patch deployment.
 *
 *  @param name Required. The resource name of the patch deployment in the form
 *    `projects/ * /patchDeployments/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a page of OS Config patch deployments.
 *
 *  Method: osconfig.projects.patchDeployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsList : GTLROSConfigQuery

/**
 *  Optional. The maximum number of patch deployments to return. Default is 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A pagination token returned from a previous call to
 *  ListPatchDeployments that indicates where this listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The resource name of the parent in the form `projects/ *`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListPatchDeploymentsResponse.
 *
 *  Get a page of OS Config patch deployments.
 *
 *  @param parent Required. The resource name of the parent in the form
 *    `projects/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an OS Config patch deployment.
 *
 *  Method: osconfig.projects.patchDeployments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsPatch : GTLROSConfigQuery

/**
 *  Unique name for the patch deployment resource in a project. The patch
 *  deployment name is in the form:
 *  `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field
 *  is ignored when you create a new patch deployment.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Field mask that controls which fields of the patch deployment
 *  should be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLROSConfig_PatchDeployment.
 *
 *  Update an OS Config patch deployment.
 *
 *  @param object The @c GTLROSConfig_PatchDeployment to include in the query.
 *  @param name Unique name for the patch deployment resource in a project. The
 *    patch deployment name is in the form:
 *    `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field
 *    is ignored when you create a new patch deployment.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsPatch
 */
+ (instancetype)queryWithObject:(GTLROSConfig_PatchDeployment *)object
                           name:(NSString *)name;

@end

/**
 *  Change state of patch deployment to "PAUSED". Patch deployment in paused
 *  state doesn't generate patch jobs.
 *
 *  Method: osconfig.projects.patchDeployments.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsPause : GTLROSConfigQuery

/**
 *  Required. The resource name of the patch deployment in the form `projects/ *
 *  /patchDeployments/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_PatchDeployment.
 *
 *  Change state of patch deployment to "PAUSED". Patch deployment in paused
 *  state doesn't generate patch jobs.
 *
 *  @param object The @c GTLROSConfig_PausePatchDeploymentRequest to include in
 *    the query.
 *  @param name Required. The resource name of the patch deployment in the form
 *    `projects/ * /patchDeployments/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsPause
 */
+ (instancetype)queryWithObject:(GTLROSConfig_PausePatchDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Change state of patch deployment back to "ACTIVE". Patch deployment in
 *  active state continues to generate patch jobs.
 *
 *  Method: osconfig.projects.patchDeployments.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchDeploymentsResume : GTLROSConfigQuery

/**
 *  Required. The resource name of the patch deployment in the form `projects/ *
 *  /patchDeployments/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_PatchDeployment.
 *
 *  Change state of patch deployment back to "ACTIVE". Patch deployment in
 *  active state continues to generate patch jobs.
 *
 *  @param object The @c GTLROSConfig_ResumePatchDeploymentRequest to include in
 *    the query.
 *  @param name Required. The resource name of the patch deployment in the form
 *    `projects/ * /patchDeployments/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchDeploymentsResume
 */
+ (instancetype)queryWithObject:(GTLROSConfig_ResumePatchDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancel a patch job. The patch job must be active. Canceled patch jobs cannot
 *  be restarted.
 *
 *  Method: osconfig.projects.patchJobs.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchJobsCancel : GTLROSConfigQuery

/** Required. Name of the patch in the form `projects/ * /patchJobs/ *` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_PatchJob.
 *
 *  Cancel a patch job. The patch job must be active. Canceled patch jobs cannot
 *  be restarted.
 *
 *  @param object The @c GTLROSConfig_CancelPatchJobRequest to include in the
 *    query.
 *  @param name Required. Name of the patch in the form `projects/ * /patchJobs/
 *    *`
 *
 *  @return GTLROSConfigQuery_ProjectsPatchJobsCancel
 */
+ (instancetype)queryWithObject:(GTLROSConfig_CancelPatchJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Patch VM instances by creating and running a patch job.
 *
 *  Method: osconfig.projects.patchJobs.execute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchJobsExecute : GTLROSConfigQuery

/**
 *  Required. The project in which to run this patch in the form `projects/ *`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_PatchJob.
 *
 *  Patch VM instances by creating and running a patch job.
 *
 *  @param object The @c GTLROSConfig_ExecutePatchJobRequest to include in the
 *    query.
 *  @param parent Required. The project in which to run this patch in the form
 *    `projects/ *`
 *
 *  @return GTLROSConfigQuery_ProjectsPatchJobsExecute
 */
+ (instancetype)queryWithObject:(GTLROSConfig_ExecutePatchJobRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Get the patch job. This can be used to track the progress of an ongoing
 *  patch job or review the details of completed jobs.
 *
 *  Method: osconfig.projects.patchJobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchJobsGet : GTLROSConfigQuery

/** Required. Name of the patch in the form `projects/ * /patchJobs/ *` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLROSConfig_PatchJob.
 *
 *  Get the patch job. This can be used to track the progress of an ongoing
 *  patch job or review the details of completed jobs.
 *
 *  @param name Required. Name of the patch in the form `projects/ * /patchJobs/
 *    *`
 *
 *  @return GTLROSConfigQuery_ProjectsPatchJobsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a list of instance details for a given patch job.
 *
 *  Method: osconfig.projects.patchJobs.instanceDetails.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchJobsInstanceDetailsList : GTLROSConfigQuery

/**
 *  A filter expression that filters results listed in the response. This field
 *  supports filtering results by instance zone, name, state, or
 *  `failure_reason`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of instance details records to return. Default is 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call that indicates where this
 *  listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent for the instances are in the form of `projects/ *
 *  /patchJobs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListPatchJobInstanceDetailsResponse.
 *
 *  Get a list of instance details for a given patch job.
 *
 *  @param parent Required. The parent for the instances are in the form of
 *    `projects/ * /patchJobs/ *`.
 *
 *  @return GTLROSConfigQuery_ProjectsPatchJobsInstanceDetailsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get a list of patch jobs.
 *
 *  Method: osconfig.projects.patchJobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeOSConfigCloudPlatform
 */
@interface GTLROSConfigQuery_ProjectsPatchJobsList : GTLROSConfigQuery

/**
 *  If provided, this field specifies the criteria that must be met by patch
 *  jobs to be included in the response. Currently, filtering is only available
 *  on the patch_deployment field.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of instance status to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A pagination token returned from a previous call that indicates where this
 *  listing should continue from.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. In the form of `projects/ *` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLROSConfig_ListPatchJobsResponse.
 *
 *  Get a list of patch jobs.
 *
 *  @param parent Required. In the form of `projects/ *`
 *
 *  @return GTLROSConfigQuery_ProjectsPatchJobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
