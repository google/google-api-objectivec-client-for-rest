// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   OS Config API (osconfig/v2)
// Description:
//   OS management tools that can be used for patch management, patch
//   compliance, and configuration management on VM instances.
// Documentation:
//   https://cloud.google.com/compute/docs/osconfig/rest

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLROSConfig_FixedOrPercent;
@class GTLROSConfig_GoogleCloudOsconfigV2OrchestratedResource;
@class GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScope;
@class GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeLocationSelector;
@class GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeResourceHierarchySelector;
@class GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeSelector;
@class GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator;
@class GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator_Labels;
@class GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState;
@class GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorOrchestrationState;
@class GTLROSConfig_Operation;
@class GTLROSConfig_Operation_Metadata;
@class GTLROSConfig_Operation_Response;
@class GTLROSConfig_OSPolicy;
@class GTLROSConfig_OSPolicyAssignment;
@class GTLROSConfig_OSPolicyAssignmentInstanceFilter;
@class GTLROSConfig_OSPolicyAssignmentInstanceFilterInventory;
@class GTLROSConfig_OSPolicyAssignmentLabelSet;
@class GTLROSConfig_OSPolicyAssignmentLabelSet_Labels;
@class GTLROSConfig_OSPolicyAssignmentRollout;
@class GTLROSConfig_OSPolicyInventoryFilter;
@class GTLROSConfig_OSPolicyResource;
@class GTLROSConfig_OSPolicyResourceExecResource;
@class GTLROSConfig_OSPolicyResourceExecResourceExec;
@class GTLROSConfig_OSPolicyResourceFile;
@class GTLROSConfig_OSPolicyResourceFileGcs;
@class GTLROSConfig_OSPolicyResourceFileRemote;
@class GTLROSConfig_OSPolicyResourceFileResource;
@class GTLROSConfig_OSPolicyResourceGroup;
@class GTLROSConfig_OSPolicyResourcePackageResource;
@class GTLROSConfig_OSPolicyResourcePackageResourceAPT;
@class GTLROSConfig_OSPolicyResourcePackageResourceDeb;
@class GTLROSConfig_OSPolicyResourcePackageResourceGooGet;
@class GTLROSConfig_OSPolicyResourcePackageResourceMSI;
@class GTLROSConfig_OSPolicyResourcePackageResourceRPM;
@class GTLROSConfig_OSPolicyResourcePackageResourceYUM;
@class GTLROSConfig_OSPolicyResourcePackageResourceZypper;
@class GTLROSConfig_OSPolicyResourceRepositoryResource;
@class GTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository;
@class GTLROSConfig_OSPolicyResourceRepositoryResourceGooRepository;
@class GTLROSConfig_OSPolicyResourceRepositoryResourceYumRepository;
@class GTLROSConfig_OSPolicyResourceRepositoryResourceZypperRepository;
@class GTLROSConfig_Status;
@class GTLROSConfig_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata.apiMethod

/**
 *  Invalid value
 *
 *  Value: "API_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_ApiMethodUnspecified;
/**
 *  Create OS policy assignment API method
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Create;
/**
 *  Delete OS policy assignment API method
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Delete;
/**
 *  Update OS policy assignment API method
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Update;

// ----------------------------------------------------------------------------
// GTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata.rolloutState

/**
 *  The rollout is cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Cancelled;
/**
 *  The rollout is being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Cancelling;
/**
 *  The rollout is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_InProgress;
/**
 *  Invalid value
 *
 *  Value: "ROLLOUT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_RolloutStateUnspecified;
/**
 *  The rollout has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Succeeded;

// ----------------------------------------------------------------------------
// GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState.state

/**
 *  Iteration was explicitly cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Cancelled;
/**
 *  Iteration completed, with all actions being successful.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Completed;
/**
 *  Iteration completed, with failures.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Failed;
/**
 *  Iteration is in progress.
 *
 *  Value: "PROCESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Processing;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_StateUnspecified;
/**
 *  Impossible to determine current state of the iteration.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Unknown;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicy.mode

/**
 *  This mode checks if the configuration resources in the policy are in their
 *  desired state, and if not, enforces the desired state.
 *
 *  Value: "ENFORCEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicy_Mode_Enforcement;
/**
 *  Invalid mode
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicy_Mode_ModeUnspecified;
/**
 *  This mode checks if the configuration resources in the policy are in their
 *  desired state. No actions are performed if they are not in the desired
 *  state. This mode is used for reporting purposes.
 *
 *  Value: "VALIDATION"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicy_Mode_Validation;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyAssignment.rolloutState

/**
 *  The rollout is cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignment_RolloutState_Cancelled;
/**
 *  The rollout is being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignment_RolloutState_Cancelling;
/**
 *  The rollout is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignment_RolloutState_InProgress;
/**
 *  Invalid value
 *
 *  Value: "ROLLOUT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignment_RolloutState_RolloutStateUnspecified;
/**
 *  The rollout has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignment_RolloutState_Succeeded;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyAssignmentOperationMetadata.apiMethod

/**
 *  Invalid value
 *
 *  Value: "API_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_ApiMethodUnspecified;
/**
 *  Create OS policy assignment API method
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Create;
/**
 *  Delete OS policy assignment API method
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Delete;
/**
 *  Update OS policy assignment API method
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Update;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyAssignmentOperationMetadata.rolloutState

/**
 *  The rollout is cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Cancelled;
/**
 *  The rollout is being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Cancelling;
/**
 *  The rollout is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_InProgress;
/**
 *  Invalid value
 *
 *  Value: "ROLLOUT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_RolloutStateUnspecified;
/**
 *  The rollout has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Succeeded;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyResourceExecResourceExec.interpreter

/**
 *  Invalid value, the request will return validation error.
 *
 *  Value: "INTERPRETER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_InterpreterUnspecified;
/**
 *  If an interpreter is not specified, the source is executed directly. This
 *  execution, without an interpreter, only succeeds for executables and scripts
 *  that have shebang lines.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_None;
/**
 *  Indicates that the script runs with PowerShell.
 *
 *  Value: "POWERSHELL"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_Powershell;
/**
 *  Indicates that the script runs with `/bin/sh` on Linux and `cmd.exe` on
 *  Windows.
 *
 *  Value: "SHELL"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_Shell;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyResourceFileResource.state

/**
 *  Ensure file at path is absent.
 *
 *  Value: "ABSENT"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceFileResource_State_Absent;
/**
 *  Ensure the contents of the file at path matches. If the file does not exist
 *  it will be created.
 *
 *  Value: "CONTENTS_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceFileResource_State_ContentsMatch;
/**
 *  Unspecified is invalid.
 *
 *  Value: "DESIRED_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceFileResource_State_DesiredStateUnspecified;
/**
 *  Ensure file at path is present.
 *
 *  Value: "PRESENT"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceFileResource_State_Present;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyResourcePackageResource.desiredState

/**
 *  Unspecified is invalid.
 *
 *  Value: "DESIRED_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_DesiredStateUnspecified;
/**
 *  Ensure that the package is installed.
 *
 *  Value: "INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_Installed;
/**
 *  The agent ensures that the package is not installed and uninstalls it if
 *  detected.
 *
 *  Value: "REMOVED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_Removed;

// ----------------------------------------------------------------------------
// GTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository.archiveType

/**
 *  Unspecified is invalid.
 *
 *  Value: "ARCHIVE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_ArchiveTypeUnspecified;
/**
 *  Deb indicates that the archive contains binary files.
 *
 *  Value: "DEB"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_Deb;
/**
 *  Deb-src indicates that the archive contains source files.
 *
 *  Value: "DEB_SRC"
 */
FOUNDATION_EXTERN NSString * const kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_DebSrc;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLROSConfig_CancelOperationRequest : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLROSConfig_Empty : GTLRObject
@end


/**
 *  Message encapsulating a value that can be either absolute ("fixed") or
 *  relative ("percent") to a value.
 */
@interface GTLROSConfig_FixedOrPercent : GTLRObject

/**
 *  Specifies a fixed value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fixed;

/**
 *  Specifies the relative value defined as a percentage, which will be
 *  multiplied by a reference value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

@end


/**
 *  OS policy assignment operation metadata provided by OS policy assignment API
 *  methods that return long running operations.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata : GTLRObject

/**
 *  The OS policy assignment API method.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_ApiMethodUnspecified
 *        Invalid value (Value: "API_METHOD_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Create
 *        Create OS policy assignment API method (Value: "CREATE")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Delete
 *        Delete OS policy assignment API method (Value: "DELETE")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_ApiMethod_Update
 *        Update OS policy assignment API method (Value: "UPDATE")
 */
@property(nonatomic, copy, nullable) NSString *apiMethod;

/**
 *  Reference to the `OSPolicyAssignment` API resource. Format:
 *  `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id\@revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *osPolicyAssignment;

/** Rollout start time */
@property(nonatomic, strong, nullable) GTLRDateTime *rolloutStartTime;

/**
 *  State of the rollout
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Cancelled
 *        The rollout is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Cancelling
 *        The rollout is being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_InProgress
 *        The rollout is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_RolloutStateUnspecified
 *        Invalid value (Value: "ROLLOUT_STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata_RolloutState_Succeeded
 *        The rollout has completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *rolloutState;

/** Rollout update time */
@property(nonatomic, strong, nullable) GTLRDateTime *rolloutUpdateTime;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2betaOperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Response for the list policy orchestrator resources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "policyOrchestrators" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2ListPolicyOrchestratorsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The policy orchestrators for the specified parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator *> *policyOrchestrators;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Represents a resource that is being orchestrated by the policy orchestrator.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OrchestratedResource : GTLRObject

/**
 *  Optional. ID of the resource to be used while generating set of affected
 *  resources. For UPSERT action the value is auto-generated during
 *  PolicyOrchestrator creation when not set. When the value is set it should
 *  following next restrictions: * Must contain only lowercase letters, numbers,
 *  and hyphens. * Must start with a letter. * Must be between 1-63 characters.
 *  * Must end with a number or a letter. * Must be unique within the project.
 *  For DELETE action, ID must be specified explicitly during PolicyOrchestrator
 *  creation.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. OSPolicyAssignment resource to be created, updated or deleted.
 *  Name field is ignored and replace with a generated value. With this field
 *  set, orchestrator will perform actions on
 *  `project/{project}/locations/{zone}/osPolicyAssignments/{resource_id}`
 *  resources, where `project` and `zone` pairs come from the expanded scope,
 *  and `resource_id` comes from the `resource_id` field of orchestrator
 *  resource.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyAssignment *osPolicyAssignmentV1Payload;

@end


/**
 *  Defines a set of selectors which drive which resources are in scope of
 *  policy orchestration.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScope : GTLRObject

/**
 *  Optional. Selectors of the orchestration scope. There is a logical AND
 *  between each selector defined. When there is no explicit
 *  `ResourceHierarchySelector` selector specified, the scope is by default
 *  bounded to the parent of the policy orchestrator resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeSelector *> *selectors;

@end


/**
 *  Selector containing locations in scope.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeLocationSelector : GTLRObject

/** Optional. Names of the locations in scope. Format: `us-central1-a` */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedLocations;

@end


/**
 *  Selector containing Cloud Resource Manager resource hierarchy nodes.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeResourceHierarchySelector : GTLRObject

/** Optional. Names of the folders in scope. Format: `folders/{folder_id}` */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedFolders;

/**
 *  Optional. Names of the projects in scope. Format:
 *  `projects/{project_number}`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedProjects;

@end


/**
 *  Selector for the resources in scope of orchestration.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeSelector : GTLRObject

/** Selector for selecting locations. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeLocationSelector *locationSelector;

/** Selector for selecting resource hierarchy. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScopeResourceHierarchySelector *resourceHierarchySelector;

@end


/**
 *  PolicyOrchestrator helps managing project+zone level policy resources (e.g.
 *  OS Policy Assignments), by providing tools to create, update and delete them
 *  across projects and locations, at scale. Policy orchestrator functions as an
 *  endless loop. Each iteration orchestrator computes a set of resources that
 *  should be affected, then progressively applies changes to them. If for some
 *  reason this set of resources changes over time (e.g. new projects are
 *  added), the future loop iterations will address that. Orchestrator can
 *  either upsert or delete policy resources. For more details, see the
 *  description of the `action`, and `orchestrated_resource` fields. Note that
 *  policy orchestrator do not "manage" the resources it creates. Every
 *  iteration is independent and only minimal history of past actions is
 *  retained (apart from Cloud Logging). If orchestrator gets deleted, it does
 *  not affect the resources it created in the past. Those will remain where
 *  they were. Same applies if projects are removed from the orchestrator's
 *  scope.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator : GTLRObject

/**
 *  Required. Action to be done by the orchestrator in
 *  `projects/{project_id}/zones/{zone_id}` locations defined by the
 *  `orchestration_scope`. Allowed values: - `UPSERT` - Orchestrator will create
 *  or update target resources. - `DELETE` - Orchestrator will delete target
 *  resources, if they exist
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Output only. Timestamp when the policy orchestrator resource was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Freeform text describing the purpose of the resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator_Labels *labels;

/**
 *  Immutable. Identifier. In form of *
 *  `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
 *  *
 *  `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Resource to be orchestrated by the policy orchestrator. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2OrchestratedResource *orchestratedResource;

/**
 *  Optional. Defines scope for the orchestration, in context of the enclosing
 *  PolicyOrchestrator resource. Scope is expanded into a list of pairs, in
 *  which the rollout action will take place. Expansion starts with a Folder
 *  resource parenting the PolicyOrchestrator resource: - All the descendant
 *  projects are listed. - List of project is cross joined with a list of all
 *  available zones. - Resulting list of pairs is filtered according to the
 *  selectors.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2OrchestrationScope *orchestrationScope;

/** Output only. State of the orchestration. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorOrchestrationState *orchestrationState;

/**
 *  Output only. Set to true, if the there are ongoing changes being applied by
 *  the orchestrator.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Optional. State of the orchestrator. Can be updated to change orchestrator
 *  behaviour. Allowed values: - `ACTIVE` - orchestrator is actively looking for
 *  actions to be taken. - `STOPPED` - orchestrator won't make any changes.
 *  Note: There might be more states added in the future. We use string here
 *  instead of an enum, to avoid the need of propagating new states to all the
 *  client code.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Timestamp when the policy orchestrator resource was last
 *  modified.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Labels as key value pairs
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestrator_Labels : GTLRObject
@end


/**
 *  Describes the state of a single iteration of the orchestrator.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState : GTLRObject

/** Output only. Error thrown in the wave iteration. */
@property(nonatomic, strong, nullable) GTLROSConfig_Status *error;

/**
 *  Output only. Number of orchestration actions which failed so far. For more
 *  details, query the Cloud Logs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedActions;

/** Output only. Finish time of the wave iteration. */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/** Output only. Unique identifier of the iteration. */
@property(nonatomic, copy, nullable) NSString *iterationId;

/**
 *  Output only. Overall number of actions done by the orchestrator so far.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *performedActions;

/**
 *  Output only. An estimated percentage of the progress. Number between 0 and
 *  100.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progress;

/** Output only. Start time of the wave iteration. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. State of the iteration.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Cancelled
 *        Iteration was explicitly cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Completed
 *        Iteration completed, with all actions being successful. (Value:
 *        "COMPLETED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Failed
 *        Iteration completed, with failures. (Value: "FAILED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Processing
 *        Iteration is in progress. (Value: "PROCESSING")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_StateUnspecified
 *        Default value. This value is unused. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState_State_Unknown
 *        Impossible to determine current state of the iteration. (Value:
 *        "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Describes the state of the orchestration process.
 */
@interface GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorOrchestrationState : GTLRObject

/** Output only. Current Wave iteration state. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState *currentIterationState;

/** Output only. Previous Wave iteration state. */
@property(nonatomic, strong, nullable) GTLROSConfig_GoogleCloudOsconfigV2PolicyOrchestratorIterationState *previousIterationState;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLROSConfig_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_Operation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLROSConfig_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLROSConfig_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLROSConfig_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLROSConfig_Operation_Response : GTLRObject
@end


/**
 *  An OS policy defines the desired state configuration for a VM.
 */
@interface GTLROSConfig_OSPolicy : GTLRObject

/**
 *  This flag determines the OS policy compliance status when none of the
 *  resource groups within the policy are applicable for a VM. Set this value to
 *  `true` if the policy needs to be reported as compliant even if the policy
 *  has nothing to validate or enforce.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowNoResourceGroupMatch;

/**
 *  Policy description. Length of the description is limited to 1024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The id of the OS policy with the following restrictions: * Must
 *  contain only lowercase letters, numbers, and hyphens. * Must start with a
 *  letter. * Must be between 1-63 characters. * Must end with a number or a
 *  letter. * Must be unique within the assignment.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. Policy mode
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicy_Mode_Enforcement This mode checks if the
 *        configuration resources in the policy are in their desired state, and
 *        if not, enforces the desired state. (Value: "ENFORCEMENT")
 *    @arg @c kGTLROSConfig_OSPolicy_Mode_ModeUnspecified Invalid mode (Value:
 *        "MODE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicy_Mode_Validation This mode checks if the
 *        configuration resources in the policy are in their desired state. No
 *        actions are performed if they are not in the desired state. This mode
 *        is used for reporting purposes. (Value: "VALIDATION")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Required. List of resource groups for the policy. For a particular VM,
 *  resource groups are evaluated in the order specified and the first resource
 *  group that is applicable is selected and the rest are ignored. If none of
 *  the resource groups are applicable for a VM, the VM is considered to be
 *  non-compliant w.r.t this policy. This behavior can be toggled by the flag
 *  `allow_no_resource_group_match`
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyResourceGroup *> *resourceGroups;

@end


/**
 *  OS policy assignment is an API resource that is used to apply a set of OS
 *  policies to a dynamically targeted group of Compute Engine VM instances. An
 *  OS policy is used to define the desired state configuration for a Compute
 *  Engine VM instance through a set of configuration resources that provide
 *  capabilities such as installing or removing software packages, or executing
 *  a script. For more information about the OS policy resource definitions and
 *  examples, see [OS policy and OS policy
 *  assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 */
@interface GTLROSConfig_OSPolicyAssignment : GTLRObject

/**
 *  Output only. Indicates that this revision has been successfully rolled out
 *  in this zone and new VMs will be assigned OS policies from this revision.
 *  For a given OS policy assignment, there is only one revision with a value of
 *  `true` for this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseline;

/**
 *  Output only. Indicates that this revision deletes the OS policy assignment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  OS policy assignment description. Length of the description is limited to
 *  1024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The etag for this OS policy assignment. If this is provided on update, it
 *  must match the server's etag.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Required. Filter to select VMs. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyAssignmentInstanceFilter *instanceFilter;

/**
 *  Resource name. Format:
 *  `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}`
 *  This field is ignored when you create an OS policy assignment.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. List of OS policies to be applied to the VMs. */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicy *> *osPolicies;

/**
 *  Output only. Indicates that reconciliation is in progress for the revision.
 *  This value is `true` when the `rollout_state` is one of: * IN_PROGRESS *
 *  CANCELLING
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Output only. The timestamp that the revision was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/**
 *  Output only. The assignment revision ID A new revision is committed whenever
 *  a rollout is triggered for a OS policy assignment
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  Required. Rollout to deploy the OS policy assignment. A rollout is triggered
 *  in the following situations: 1) OSPolicyAssignment is created. 2)
 *  OSPolicyAssignment is updated and the update contains changes to one of the
 *  following fields: - instance_filter - os_policies 3) OSPolicyAssignment is
 *  deleted.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyAssignmentRollout *rollout;

/**
 *  Output only. OS policy assignment rollout state
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyAssignment_RolloutState_Cancelled The
 *        rollout is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLROSConfig_OSPolicyAssignment_RolloutState_Cancelling The
 *        rollout is being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLROSConfig_OSPolicyAssignment_RolloutState_InProgress The
 *        rollout is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLROSConfig_OSPolicyAssignment_RolloutState_RolloutStateUnspecified
 *        Invalid value (Value: "ROLLOUT_STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyAssignment_RolloutState_Succeeded The
 *        rollout has completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *rolloutState;

/**
 *  Output only. Server generated unique id for the OS policy assignment
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  Filters to select target VMs for an assignment. If more than one filter
 *  criteria is specified below, a VM will be selected if and only if it
 *  satisfies all of them.
 */
@interface GTLROSConfig_OSPolicyAssignmentInstanceFilter : GTLRObject

/**
 *  Target all VMs in the project. If true, no other criteria is permitted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *all;

/**
 *  List of label sets used for VM exclusion. If the list has more than one
 *  label set, the VM is excluded if any of the label sets are applicable for
 *  the VM.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyAssignmentLabelSet *> *exclusionLabels;

/**
 *  List of label sets used for VM inclusion. If the list has more than one
 *  `LabelSet`, the VM is included if any of the label sets are applicable for
 *  the VM.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyAssignmentLabelSet *> *inclusionLabels;

/**
 *  List of inventories to select VMs. A VM is selected if its inventory data
 *  matches at least one of the following inventories.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyAssignmentInstanceFilterInventory *> *inventories;

@end


/**
 *  VM inventory details.
 */
@interface GTLROSConfig_OSPolicyAssignmentInstanceFilterInventory : GTLRObject

/** Required. The OS short name */
@property(nonatomic, copy, nullable) NSString *osShortName;

/**
 *  The OS version Prefix matches are supported if asterisk(*) is provided as
 *  the last character. For example, to match all versions with a major version
 *  of `7`, specify the following value for this field `7.*` An empty string
 *  matches all OS versions.
 */
@property(nonatomic, copy, nullable) NSString *osVersion;

@end


/**
 *  Message representing label set. * A label is a key value pair set for a VM.
 *  * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In
 *  other words, a LabelSet is applicable for a VM only if it matches all the
 *  labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and
 *  `type=webserver` will only be applicable for those VMs with both labels
 *  present.
 */
@interface GTLROSConfig_OSPolicyAssignmentLabelSet : GTLRObject

/**
 *  Labels are identified by key/value pairs in this map. A VM should contain
 *  all the key/value pairs specified in this map to be selected.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyAssignmentLabelSet_Labels *labels;

@end


/**
 *  Labels are identified by key/value pairs in this map. A VM should contain
 *  all the key/value pairs specified in this map to be selected.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLROSConfig_OSPolicyAssignmentLabelSet_Labels : GTLRObject
@end


/**
 *  OS policy assignment operation metadata provided by OS policy assignment API
 *  methods that return long running operations.
 */
@interface GTLROSConfig_OSPolicyAssignmentOperationMetadata : GTLRObject

/**
 *  The OS policy assignment API method.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_ApiMethodUnspecified
 *        Invalid value (Value: "API_METHOD_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Create
 *        Create OS policy assignment API method (Value: "CREATE")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Delete
 *        Delete OS policy assignment API method (Value: "DELETE")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_ApiMethod_Update
 *        Update OS policy assignment API method (Value: "UPDATE")
 */
@property(nonatomic, copy, nullable) NSString *apiMethod;

/**
 *  Reference to the `OSPolicyAssignment` API resource. Format:
 *  `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id\@revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *osPolicyAssignment;

/** Rollout start time */
@property(nonatomic, strong, nullable) GTLRDateTime *rolloutStartTime;

/**
 *  State of the rollout
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Cancelled
 *        The rollout is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Cancelling
 *        The rollout is being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_InProgress
 *        The rollout is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_RolloutStateUnspecified
 *        Invalid value (Value: "ROLLOUT_STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyAssignmentOperationMetadata_RolloutState_Succeeded
 *        The rollout has completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *rolloutState;

/** Rollout update time */
@property(nonatomic, strong, nullable) GTLRDateTime *rolloutUpdateTime;

@end


/**
 *  Message to configure the rollout at the zonal level for the OS policy
 *  assignment.
 */
@interface GTLROSConfig_OSPolicyAssignmentRollout : GTLRObject

/**
 *  Required. The maximum number (or percentage) of VMs per zone to disrupt at
 *  any given moment.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_FixedOrPercent *disruptionBudget;

/**
 *  Required. This determines the minimum duration of time to wait after the
 *  configuration changes are applied through the current rollout. A VM
 *  continues to count towards the `disruption_budget` at least until this
 *  duration of time has passed after configuration changes are applied.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minWaitDuration;

@end


/**
 *  Filtering criteria to select VMs based on inventory details.
 */
@interface GTLROSConfig_OSPolicyInventoryFilter : GTLRObject

/** Required. The OS short name */
@property(nonatomic, copy, nullable) NSString *osShortName;

/**
 *  The OS version Prefix matches are supported if asterisk(*) is provided as
 *  the last character. For example, to match all versions with a major version
 *  of `7`, specify the following value for this field `7.*` An empty string
 *  matches all OS versions.
 */
@property(nonatomic, copy, nullable) NSString *osVersion;

@end


/**
 *  An OS policy resource is used to define the desired state configuration and
 *  provides a specific functionality like installing/removing packages,
 *  executing a script etc. The system ensures that resources are always in
 *  their desired state by taking necessary actions if they have drifted from
 *  their desired state.
 */
@interface GTLROSConfig_OSPolicyResource : GTLRObject

/** Exec resource */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceExecResource *exec;

/** File resource */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFileResource *file;

/**
 *  Required. The id of the resource with the following restrictions: * Must
 *  contain only lowercase letters, numbers, and hyphens. * Must start with a
 *  letter. * Must be between 1-63 characters. * Must end with a number or a
 *  letter. * Must be unique within the OS policy.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Package resource */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResource *pkg;

/** Package repository resource */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceRepositoryResource *repository;

@end


/**
 *  A resource that allows executing scripts on the VM. The `ExecResource` has 2
 *  stages: `validate` and `enforce` and both stages accept a script as an
 *  argument to execute. When the `ExecResource` is applied by the agent, it
 *  first executes the script in the `validate` stage. The `validate` stage can
 *  signal that the `ExecResource` is already in the desired state by returning
 *  an exit code of `100`. If the `ExecResource` is not in the desired state, it
 *  should return an exit code of `101`. Any other exit code returned by this
 *  stage is considered an error. If the `ExecResource` is not in the desired
 *  state based on the exit code from the `validate` stage, the agent proceeds
 *  to execute the script from the `enforce` stage. If the `ExecResource` is
 *  already in the desired state, the `enforce` stage will not be run. Similar
 *  to `validate` stage, the `enforce` stage should return an exit code of `100`
 *  to indicate that the resource in now in its desired state. Any other exit
 *  code is considered an error. NOTE: An exit code of `100` was chosen over `0`
 *  (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not
 *  in desired state` and errors. Because, for example, Powershell will always
 *  return an exit code of `0` unless an `exit` statement is provided in the
 *  script. So, for reasons of consistency and being explicit, exit codes `100`
 *  and `101` were chosen.
 */
@interface GTLROSConfig_OSPolicyResourceExecResource : GTLRObject

/**
 *  What to run to bring this resource into the desired state. An exit code of
 *  100 indicates "success", any other exit code indicates a failure running
 *  enforce.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceExecResourceExec *enforce;

/**
 *  Required. What to run to validate this resource is in the desired state. An
 *  exit code of 100 indicates "in desired state", and exit code of 101
 *  indicates "not in desired state". Any other exit code indicates a failure
 *  running validate.
 */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceExecResourceExec *validate;

@end


/**
 *  A file or script to execute.
 */
@interface GTLROSConfig_OSPolicyResourceExecResourceExec : GTLRObject

/** Optional arguments to pass to the source during execution. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/** A remote or local file. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFile *file;

/**
 *  Required. The script interpreter to use.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_InterpreterUnspecified
 *        Invalid value, the request will return validation error. (Value:
 *        "INTERPRETER_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_None If
 *        an interpreter is not specified, the source is executed directly. This
 *        execution, without an interpreter, only succeeds for executables and
 *        scripts that have shebang lines. (Value: "NONE")
 *    @arg @c kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_Powershell
 *        Indicates that the script runs with PowerShell. (Value: "POWERSHELL")
 *    @arg @c kGTLROSConfig_OSPolicyResourceExecResourceExec_Interpreter_Shell
 *        Indicates that the script runs with `/bin/sh` on Linux and `cmd.exe`
 *        on Windows. (Value: "SHELL")
 */
@property(nonatomic, copy, nullable) NSString *interpreter;

/**
 *  Only recorded for enforce Exec. Path to an output file (that is created by
 *  this Exec) whose content will be recorded in OSPolicyResourceCompliance
 *  after a successful run. Absence or failure to read this file will result in
 *  this ExecResource being non-compliant. Output file size is limited to 500K
 *  bytes.
 */
@property(nonatomic, copy, nullable) NSString *outputFilePath;

/** An inline script. The size of the script is limited to 32KiB. */
@property(nonatomic, copy, nullable) NSString *script;

@end


/**
 *  A remote or local file.
 */
@interface GTLROSConfig_OSPolicyResourceFile : GTLRObject

/**
 *  Defaults to false. When false, files are subject to validations based on the
 *  file type: Remote: A checksum must be specified. Cloud Storage: An object
 *  generation number must be specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowInsecure;

/** A Cloud Storage object. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFileGcs *gcs;

/** A local path within the VM to use. */
@property(nonatomic, copy, nullable) NSString *localPath;

/** A generic remote file. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFileRemote *remote;

@end


/**
 *  Specifies a file available as a Cloud Storage Object.
 */
@interface GTLROSConfig_OSPolicyResourceFileGcs : GTLRObject

/** Required. Bucket of the Cloud Storage object. */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Generation number of the Cloud Storage object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/** Required. Name of the Cloud Storage object. */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Specifies a file available via some URI.
 */
@interface GTLROSConfig_OSPolicyResourceFileRemote : GTLRObject

/** SHA256 checksum of the remote file. */
@property(nonatomic, copy, nullable) NSString *sha256Checksum;

/**
 *  Required. URI from which to fetch the object. It should contain both the
 *  protocol and path following the format `{protocol}://{location}`.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  A resource that manages the state of a file.
 */
@interface GTLROSConfig_OSPolicyResourceFileResource : GTLRObject

/**
 *  A a file with this content. The size of the content is limited to 32KiB.
 */
@property(nonatomic, copy, nullable) NSString *content;

/** A remote or local source. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFile *file;

/** Required. The absolute path of the file within the VM. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Consists of three octal digits which represent, in order, the permissions of
 *  the owner, group, and other users for the file (similarly to the numeric
 *  mode used in the linux chmod utility). Each digit represents a three bit
 *  number with the 4 bit corresponding to the read permissions, the 2 bit
 *  corresponds to the write bit, and the one bit corresponds to the execute
 *  permission. Default behavior is 755. Below are some examples of permissions
 *  and their associated values: read, write, and execute: 7 read and execute: 5
 *  read and write: 6 read only: 4
 */
@property(nonatomic, copy, nullable) NSString *permissions;

/**
 *  Required. Desired state of the file.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyResourceFileResource_State_Absent Ensure
 *        file at path is absent. (Value: "ABSENT")
 *    @arg @c kGTLROSConfig_OSPolicyResourceFileResource_State_ContentsMatch
 *        Ensure the contents of the file at path matches. If the file does not
 *        exist it will be created. (Value: "CONTENTS_MATCH")
 *    @arg @c kGTLROSConfig_OSPolicyResourceFileResource_State_DesiredStateUnspecified
 *        Unspecified is invalid. (Value: "DESIRED_STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyResourceFileResource_State_Present Ensure
 *        file at path is present. (Value: "PRESENT")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Resource groups provide a mechanism to group OS policy resources. Resource
 *  groups enable OS policy authors to create a single OS policy to be applied
 *  to VMs running different operating Systems. When the OS policy is applied to
 *  a target VM, the appropriate resource group within the OS policy is selected
 *  based on the `OSFilter` specified within the resource group.
 */
@interface GTLROSConfig_OSPolicyResourceGroup : GTLRObject

/**
 *  List of inventory filters for the resource group. The resources in this
 *  resource group are applied to the target VM if it satisfies at least one of
 *  the following inventory filters. For example, to apply this resource group
 *  to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items
 *  for the list with following values:
 *  inventory_filters[0].os_short_name='rhel' and
 *  inventory_filters[1].os_short_name='centos' If the list is empty, this
 *  resource group will be applied to the target VM unconditionally.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyInventoryFilter *> *inventoryFilters;

/**
 *  Required. List of resources configured for this resource group. The
 *  resources are executed in the exact order specified here.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_OSPolicyResource *> *resources;

@end


/**
 *  A resource that manages a system package.
 */
@interface GTLROSConfig_OSPolicyResourcePackageResource : GTLRObject

/** A package managed by Apt. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceAPT *apt;

/** A deb package file. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceDeb *deb;

/**
 *  Required. The desired state the agent should maintain for this package.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_DesiredStateUnspecified
 *        Unspecified is invalid. (Value: "DESIRED_STATE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_Installed
 *        Ensure that the package is installed. (Value: "INSTALLED")
 *    @arg @c kGTLROSConfig_OSPolicyResourcePackageResource_DesiredState_Removed
 *        The agent ensures that the package is not installed and uninstalls it
 *        if detected. (Value: "REMOVED")
 */
@property(nonatomic, copy, nullable) NSString *desiredState;

/** A package managed by GooGet. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceGooGet *googet;

/** An MSI package. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceMSI *msi;

/** An rpm package file. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceRPM *rpm;

/** A package managed by YUM. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceYUM *yum;

/** A package managed by Zypper. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourcePackageResourceZypper *zypper;

@end


/**
 *  A package managed by APT. - install: `apt-get update && apt-get -y install
 *  [name]` - remove: `apt-get -y remove [name]`
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceAPT : GTLRObject

/** Required. Package name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A deb package file. dpkg packages only support INSTALLED state.
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceDeb : GTLRObject

/**
 *  Whether dependencies should also be installed. - install when false: `dpkg
 *  -i package` - install when true: `apt-get update && apt-get -y install
 *  package.deb`
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pullDeps;

/** Required. A deb package. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFile *source;

@end


/**
 *  A package managed by GooGet. - install: `googet -noconfirm install package`
 *  - remove: `googet -noconfirm remove package`
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceGooGet : GTLRObject

/** Required. Package name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  An MSI package. MSI packages only support INSTALLED state.
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceMSI : GTLRObject

/**
 *  Additional properties to use during installation. This should be in the
 *  format of Property=Setting. Appended to the defaults of `ACTION=INSTALL
 *  REBOOT=ReallySuppress`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *properties;

/** Required. The MSI package. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFile *source;

@end


/**
 *  An RPM package file. RPM packages only support INSTALLED state.
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceRPM : GTLRObject

/**
 *  Whether dependencies should also be installed. - install when false: `rpm
 *  --upgrade --replacepkgs package.rpm` - install when true: `yum -y install
 *  package.rpm` or `zypper -y install package.rpm`
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pullDeps;

/** Required. An rpm package. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceFile *source;

@end


/**
 *  A package managed by YUM. - install: `yum -y install package` - remove: `yum
 *  -y remove package`
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceYUM : GTLRObject

/** Required. Package name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A package managed by Zypper. - install: `zypper -y install package` -
 *  remove: `zypper -y rm package`
 */
@interface GTLROSConfig_OSPolicyResourcePackageResourceZypper : GTLRObject

/** Required. Package name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A resource that manages a package repository.
 */
@interface GTLROSConfig_OSPolicyResourceRepositoryResource : GTLRObject

/** An Apt Repository. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository *apt;

/** A Goo Repository. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceRepositoryResourceGooRepository *goo;

/** A Yum Repository. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceRepositoryResourceYumRepository *yum;

/** A Zypper Repository. */
@property(nonatomic, strong, nullable) GTLROSConfig_OSPolicyResourceRepositoryResourceZypperRepository *zypper;

@end


/**
 *  Represents a single apt package repository. These will be added to a repo
 *  file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
 */
@interface GTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository : GTLRObject

/**
 *  Required. Type of archive files in this repository.
 *
 *  Likely values:
 *    @arg @c kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_ArchiveTypeUnspecified
 *        Unspecified is invalid. (Value: "ARCHIVE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_Deb
 *        Deb indicates that the archive contains binary files. (Value: "DEB")
 *    @arg @c kGTLROSConfig_OSPolicyResourceRepositoryResourceAptRepository_ArchiveType_DebSrc
 *        Deb-src indicates that the archive contains source files. (Value:
 *        "DEB_SRC")
 */
@property(nonatomic, copy, nullable) NSString *archiveType;

/**
 *  Required. List of components for this repository. Must contain at least one
 *  item.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *components;

/** Required. Distribution of this repository. */
@property(nonatomic, copy, nullable) NSString *distribution;

/**
 *  URI of the key file for this repository. The agent maintains a keyring at
 *  `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
 */
@property(nonatomic, copy, nullable) NSString *gpgKey;

/** Required. URI for this repository. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Represents a Goo package repository. These are added to a repo file that is
 *  managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
 */
@interface GTLROSConfig_OSPolicyResourceRepositoryResourceGooRepository : GTLRObject

/** Required. The name of the repository. */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. The url of the repository. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents a single yum package repository. These are added to a repo file
 *  that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
 */
@interface GTLROSConfig_OSPolicyResourceRepositoryResourceYumRepository : GTLRObject

/** Required. The location of the repository directory. */
@property(nonatomic, copy, nullable) NSString *baseUrl;

/** The display name of the repository. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** URIs of GPG keys. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gpgKeys;

/**
 *  Required. A one word, unique name for this repository. This is the `repo id`
 *  in the yum config file and also the `display_name` if `display_name` is
 *  omitted. This id is also used as the unique identifier when checking for
 *  resource conflicts.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Represents a single zypper package repository. These are added to a repo
 *  file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
 */
@interface GTLROSConfig_OSPolicyResourceRepositoryResourceZypperRepository : GTLRObject

/** Required. The location of the repository directory. */
@property(nonatomic, copy, nullable) NSString *baseUrl;

/** The display name of the repository. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** URIs of GPG keys. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *gpgKeys;

/**
 *  Required. A one word, unique name for this repository. This is the `repo id`
 *  in the zypper config file and also the `display_name` if `display_name` is
 *  omitted. This id is also used as the unique identifier when checking for
 *  GuestPolicy conflicts.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLROSConfig_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLROSConfig_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLROSConfig_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLROSConfig_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
