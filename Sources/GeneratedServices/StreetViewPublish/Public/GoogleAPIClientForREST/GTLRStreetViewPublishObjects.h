// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Street View Publish API (streetviewpublish/v1)
// Description:
//   Publishes 360 photos to Google Maps, along with position, orientation, and
//   connectivity metadata. Apps can offer an interface for positioning,
//   connecting, and uploading user-generated Street View images.
// Documentation:
//   https://developers.google.com/streetview/publish/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStreetViewPublish_Connection;
@class GTLRStreetViewPublish_GpsDataGapFailureDetails;
@class GTLRStreetViewPublish_Imu;
@class GTLRStreetViewPublish_ImuDataGapFailureDetails;
@class GTLRStreetViewPublish_InsufficientGpsFailureDetails;
@class GTLRStreetViewPublish_LatLng;
@class GTLRStreetViewPublish_LatLngBounds;
@class GTLRStreetViewPublish_Level;
@class GTLRStreetViewPublish_Measurement3d;
@class GTLRStreetViewPublish_NotOutdoorsFailureDetails;
@class GTLRStreetViewPublish_Operation;
@class GTLRStreetViewPublish_Operation_Metadata;
@class GTLRStreetViewPublish_Operation_Response;
@class GTLRStreetViewPublish_Photo;
@class GTLRStreetViewPublish_PhotoId;
@class GTLRStreetViewPublish_PhotoResponse;
@class GTLRStreetViewPublish_Place;
@class GTLRStreetViewPublish_Pose;
@class GTLRStreetViewPublish_ProcessingFailureDetails;
@class GTLRStreetViewPublish_Status;
@class GTLRStreetViewPublish_Status_Details_Item;
@class GTLRStreetViewPublish_UpdatePhotoRequest;
@class GTLRStreetViewPublish_UploadRef;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRStreetViewPublish_Photo.mapsPublishStatus

/**
 *  The photo is published to the public through Google Maps.
 *
 *  Value: "PUBLISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_Published;
/**
 *  The photo has been rejected for an unknown reason.
 *
 *  Value: "REJECTED_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_RejectedUnknown;
/**
 *  The status of the photo is unknown.
 *
 *  Value: "UNSPECIFIED_MAPS_PUBLISH_STATUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_UnspecifiedMapsPublishStatus;

// ----------------------------------------------------------------------------
// GTLRStreetViewPublish_Photo.transferStatus

/**
 *  The sender cancelled this photo transfer.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Cancelled;
/**
 *  The photo transfer has been completed, and this photo has been transferred
 *  to the recipient.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Completed;
/**
 *  The photo transfer expired before the recipient took any action.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Expired;
/**
 *  This photo has never been in a transfer.
 *
 *  Value: "NEVER_TRANSFERRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_NeverTransferred;
/**
 *  This photo transfer has been initiated, but the receiver has not yet
 *  responded.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Pending;
/**
 *  The recipient owns this photo due to a rights transfer.
 *
 *  Value: "RECEIVED_VIA_TRANSFER"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_ReceivedViaTransfer;
/**
 *  The recipient rejected this photo transfer.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Rejected;
/**
 *  The status of this transfer is unspecified.
 *
 *  Value: "TRANSFER_STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_TransferStatusUnknown;

// ----------------------------------------------------------------------------
// GTLRStreetViewPublish_PhotoSequence.failureReason

/**
 *  The video file was corrupt or could not be decoded.
 *
 *  Value: "CORRUPT_VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_CorruptVideo;
/**
 *  This video has been uploaded before.
 *
 *  Value: "DUPLICATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Duplicate;
/**
 *  The sequence of photos could not be accurately located in the world.
 *
 *  Value: "FAILED_TO_REFINE_POSITIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_FailedToRefinePositions;
/**
 *  GPS data contains a gap greater than 5 seconds in duration.
 *
 *  Value: "GPS_DATA_GAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_GpsDataGap;
/**
 *  IMU (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1
 *  seconds in duration.
 *
 *  Value: "IMU_DATA_GAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_ImuDataGap;
/**
 *  Too few GPS points.
 *
 *  Value: "INSUFFICIENT_GPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientGps;
/**
 *  Too few IMU points.
 *
 *  Value: "INSUFFICIENT_IMU"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientImu;
/**
 *  Not enough moving data.
 *
 *  Value: "INSUFFICIENT_MOVEMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientMovement;
/**
 *  Insufficient overlap in the time frame between GPS, IMU, and other time
 *  series data.
 *
 *  Value: "INSUFFICIENT_OVERLAP_TIME_SERIES"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientOverlapTimeSeries;
/**
 *  Not enough video frames.
 *
 *  Value: "INSUFFICIENT_VIDEO_FRAMES"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientVideoFrames;
/**
 *  A permanent failure in the underlying system occurred.
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Internal;
/**
 *  Invalid capture time. Timestamps were from the future.
 *
 *  Value: "INVALID_CAPTURE_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidCaptureTime;
/**
 *  GPS is invalid (e.x. all GPS points are at (0,0))
 *
 *  Value: "INVALID_GPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidGps;
/**
 *  IMU (Accelerometer, Gyroscope, etc.) data are not valid. They may be missing
 *  required fields (x, y, z or time), may not be formatted correctly, or any
 *  other issue that prevents our systems from parsing it.
 *
 *  Value: "INVALID_IMU"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidImu;
/**
 *  Invalid image aspect ratio found.
 *
 *  Value: "INVALID_VIDEO_DIMENSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoDimensions;
/**
 *  The video format is invalid or unsupported.
 *
 *  Value: "INVALID_VIDEO_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoFormat;
/**
 *  GPS data is too erratic to be processed.
 *
 *  Value: "JUMPY_GPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_JumpyGps;
/**
 *  Video frame's resolution is too small.
 *
 *  Value: "LOW_RESOLUTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_LowResolution;
/**
 *  No overlap between the time frame of GPS track and the time frame of video.
 *
 *  Value: "NO_OVERLAP_GPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_NoOverlapGps;
/**
 *  Some frames were indoors, which is unsupported.
 *
 *  Value: "NOT_OUTDOORS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_NotOutdoors;
/**
 *  The failure reason is unspecified, this is the default value.
 *
 *  Value: "PROCESSING_FAILURE_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_ProcessingFailureReasonUnspecified;
/**
 *  The sequence was taken down for policy reasons.
 *
 *  Value: "TAKEDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Takedown;
/**
 *  The camera is not supported.
 *
 *  Value: "UNSUPPORTED_CAMERA"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_UnsupportedCamera;

// ----------------------------------------------------------------------------
// GTLRStreetViewPublish_PhotoSequence.gpsSource

/**
 *  GPS in Camera Motion Metadata Track (CAMM) takes precedence if it exists.
 *
 *  Value: "CAMERA_MOTION_METADATA_TRACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_GpsSource_CameraMotionMetadataTrack;
/**
 *  GPS in raw_gps_timeline takes precedence if it exists.
 *
 *  Value: "PHOTO_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_GpsSource_PhotoSequence;

// ----------------------------------------------------------------------------
// GTLRStreetViewPublish_PhotoSequence.processingState

/**
 *  The sequence failed processing. See FailureReason for more details.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Failed;
/**
 *  The sequence has not yet started processing.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Pending;
/**
 *  The sequence has finished processing including refining position.
 *
 *  Value: "PROCESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processed;
/**
 *  The sequence is currently in processing.
 *
 *  Value: "PROCESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processing;
/**
 *  The state is unspecified, this is the default value.
 *
 *  Value: "PROCESSING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_ProcessingStateUnspecified;

/**
 *  Request to delete multiple Photos.
 */
@interface GTLRStreetViewPublish_BatchDeletePhotosRequest : GTLRObject

/**
 *  Required. IDs of the Photos. HTTP GET requests require the following syntax
 *  for the URL query parameter: `photoIds=&photoIds=&...`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *photoIds;

@end


/**
 *  Response to batch delete of one or more Photos.
 */
@interface GTLRStreetViewPublish_BatchDeletePhotosResponse : GTLRObject

/**
 *  The status for the operation to delete a single Photo in the batch request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Status *> *status;

@end


/**
 *  Response to batch get of Photos.
 */
@interface GTLRStreetViewPublish_BatchGetPhotosResponse : GTLRObject

/**
 *  List of results for each individual Photo requested, in the same order as
 *  the requests in BatchGetPhotos.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_PhotoResponse *> *results;

@end


/**
 *  Request to update the metadata of photos. Updating the pixels of photos is
 *  not supported.
 */
@interface GTLRStreetViewPublish_BatchUpdatePhotosRequest : GTLRObject

/** Required. List of UpdatePhotoRequests. */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_UpdatePhotoRequest *> *updatePhotoRequests;

@end


/**
 *  Response to batch update of metadata of one or more Photos.
 */
@interface GTLRStreetViewPublish_BatchUpdatePhotosResponse : GTLRObject

/**
 *  List of results for each individual Photo updated, in the same order as the
 *  request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_PhotoResponse *> *results;

@end


/**
 *  A connection is the link from a source photo to a destination photo.
 */
@interface GTLRStreetViewPublish_Connection : GTLRObject

/**
 *  Required. The destination of the connection from the containing photo to
 *  another photo.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_PhotoId *target;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRStreetViewPublish_Empty : GTLRObject
@end


/**
 *  Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are
 *  multiple GPS data gaps, only the one with the largest duration is reported
 *  here.
 */
@interface GTLRStreetViewPublish_GpsDataGapFailureDetails : GTLRObject

/** The duration of the gap in GPS data that was found. */
@property(nonatomic, strong, nullable) GTLRDuration *gapDuration;

/**
 *  Relative time (from the start of the video stream) when the gap started.
 */
@property(nonatomic, strong, nullable) GTLRDuration *gapStartTime;

@end


/**
 *  IMU data from the device sensors.
 */
@interface GTLRStreetViewPublish_Imu : GTLRObject

/**
 *  The accelerometer measurements in meters/sec^2 with increasing timestamps
 *  from devices.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Measurement3d *> *accelMpsps;

/**
 *  The gyroscope measurements in radians/sec with increasing timestamps from
 *  devices.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Measurement3d *> *gyroRps;

/**
 *  The magnetometer measurements of the magnetic field in microtesla (uT) with
 *  increasing timestamps from devices.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Measurement3d *> *magUt;

@end


/**
 *  Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are
 *  multiple IMU data gaps, only the one with the largest duration is reported
 *  here.
 */
@interface GTLRStreetViewPublish_ImuDataGapFailureDetails : GTLRObject

/** The duration of the gap in IMU data that was found. */
@property(nonatomic, strong, nullable) GTLRDuration *gapDuration;

/**
 *  Relative time (from the start of the video stream) when the gap started.
 */
@property(nonatomic, strong, nullable) GTLRDuration *gapStartTime;

@end


/**
 *  Details related to ProcessingFailureReason#INSUFFICIENT_GPS.
 */
@interface GTLRStreetViewPublish_InsufficientGpsFailureDetails : GTLRObject

/**
 *  The number of GPS points that were found in the video.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gpsPointsFound;

@end


/**
 *  An object that represents a latitude/longitude pair. This is expressed as a
 *  pair of doubles to represent degrees latitude and degrees longitude. Unless
 *  specified otherwise, this object must conform to the WGS84 standard. Values
 *  must be within normalized ranges.
 */
@interface GTLRStreetViewPublish_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  A rectangle in geographical coordinates.
 */
@interface GTLRStreetViewPublish_LatLngBounds : GTLRObject

/** The northeast corner of these bounds. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_LatLng *northeast;

/** The southwest corner of these bounds. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_LatLng *southwest;

@end


/**
 *  Level information containing level number and its corresponding name.
 */
@interface GTLRStreetViewPublish_Level : GTLRObject

/**
 *  Required. A name assigned to this Level, restricted to 3 characters.
 *  Consider how the elevator buttons would be labeled for this level if there
 *  was an elevator.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Floor number, used for ordering. 0 indicates the ground level, 1
 *  indicates the first level above ground level, -1 indicates the first level
 *  under ground level. Non-integer values are OK.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

@end


/**
 *  Response to list all photo sequences that belong to a user.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "photoSequences" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRStreetViewPublish_ListPhotoSequencesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of photo sequences via Operation interface. The maximum number of items
 *  returned is based on the pageSize field in the request. Each item in the
 *  list can have three possible states, * `Operation.done` = false, if the
 *  processing of PhotoSequence is not finished yet. * `Operation.done` = true
 *  and `Operation.error` is populated, if there was an error in processing. *
 *  `Operation.done` = true and `Operation.response` contains a PhotoSequence
 *  message, In each sequence, only Id is populated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Operation *> *photoSequences;

@end


/**
 *  Response to list all photos that belong to a user.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "photos" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStreetViewPublish_ListPhotosResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of photos. The pageSize field in the request determines the number of
 *  items returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Photo *> *photos;

@end


/**
 *  A Generic 3d measurement sample.
 */
@interface GTLRStreetViewPublish_Measurement3d : GTLRObject

/** The timestamp of the IMU measurement. */
@property(nonatomic, strong, nullable) GTLRDateTime *captureTime;

/**
 *  The sensor measurement in the x axis.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *x;

/**
 *  The sensor measurement in the y axis.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *y;

/**
 *  The sensor measurement in the z axis.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *z;

@end


/**
 *  Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are
 *  multiple indoor frames found, the first frame is recorded here.
 */
@interface GTLRStreetViewPublish_NotOutdoorsFailureDetails : GTLRObject

/**
 *  Relative time (from the start of the video stream) when an indoor frame was
 *  found.
 */
@property(nonatomic, strong, nullable) GTLRDuration *startTime;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRStreetViewPublish_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStreetViewPublish_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStreetViewPublish_Operation_Response : GTLRObject
@end


/**
 *  Photo is used to store 360 photos along with photo metadata.
 */
@interface GTLRStreetViewPublish_Photo : GTLRObject

/**
 *  Optional. Absolute time when the photo was captured. When the photo has no
 *  exif timestamp, this is used to set a timestamp in the photo metadata.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *captureTime;

/**
 *  Optional. Connections to other photos. A connection represents the link from
 *  this photo to another photo.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Connection *> *connections;

/**
 *  Output only. The download URL for the photo bytes. This field is set only
 *  when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.
 */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

/**
 *  Output only. Status in Google Maps, whether this photo was published or
 *  rejected.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublish_Photo_MapsPublishStatus_Published The photo
 *        is published to the public through Google Maps. (Value: "PUBLISHED")
 *    @arg @c kGTLRStreetViewPublish_Photo_MapsPublishStatus_RejectedUnknown The
 *        photo has been rejected for an unknown reason. (Value:
 *        "REJECTED_UNKNOWN")
 *    @arg @c kGTLRStreetViewPublish_Photo_MapsPublishStatus_UnspecifiedMapsPublishStatus
 *        The status of the photo is unknown. (Value:
 *        "UNSPECIFIED_MAPS_PUBLISH_STATUS")
 */
@property(nonatomic, copy, nullable) NSString *mapsPublishStatus;

/**
 *  Required. Output only. Required when updating a photo. Output only when
 *  creating a photo. Identifier for the photo, which is unique among all photos
 *  in Google.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_PhotoId *photoId;

/** Optional. Places where this photo belongs. */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Place *> *places;

/** Optional. Pose of the photo. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Pose *pose;

/** Output only. The share link for the photo. */
@property(nonatomic, copy, nullable) NSString *shareLink;

/**
 *  Output only. The thumbnail URL for showing a preview of the given photo.
 */
@property(nonatomic, copy, nullable) NSString *thumbnailUrl;

/**
 *  Output only. Status of rights transfer on this photo.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_Cancelled The sender
 *        cancelled this photo transfer. (Value: "CANCELLED")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_Completed The photo
 *        transfer has been completed, and this photo has been transferred to
 *        the recipient. (Value: "COMPLETED")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_Expired The photo
 *        transfer expired before the recipient took any action. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_NeverTransferred This
 *        photo has never been in a transfer. (Value: "NEVER_TRANSFERRED")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_Pending This photo
 *        transfer has been initiated, but the receiver has not yet responded.
 *        (Value: "PENDING")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_ReceivedViaTransfer
 *        The recipient owns this photo due to a rights transfer. (Value:
 *        "RECEIVED_VIA_TRANSFER")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_Rejected The recipient
 *        rejected this photo transfer. (Value: "REJECTED")
 *    @arg @c kGTLRStreetViewPublish_Photo_TransferStatus_TransferStatusUnknown
 *        The status of this transfer is unspecified. (Value:
 *        "TRANSFER_STATUS_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *transferStatus;

/**
 *  Input only. Required when creating a photo. Input only. The resource URL
 *  where the photo bytes are uploaded to.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_UploadRef *uploadReference;

/** Output only. Time when the image was uploaded. */
@property(nonatomic, strong, nullable) GTLRDateTime *uploadTime;

/**
 *  Output only. View count of the photo.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *viewCount;

@end


/**
 *  Identifier for a Photo.
 */
@interface GTLRStreetViewPublish_PhotoId : GTLRObject

/**
 *  A unique identifier for a photo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Response payload for a single Photo in batch operations including
 *  BatchGetPhotos and BatchUpdatePhotos.
 */
@interface GTLRStreetViewPublish_PhotoResponse : GTLRObject

/** The Photo resource, if the request was successful. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Photo *photo;

/**
 *  The status for the operation to get or update a single photo in the batch
 *  request.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Status *status;

@end


/**
 *  A sequence of 360 photos along with metadata.
 */
@interface GTLRStreetViewPublish_PhotoSequence : GTLRObject

/**
 *  Optional. Absolute time when the photo sequence starts to be captured. If
 *  the photo sequence is a video, this is the start time of the video. If this
 *  field is populated in input, it overrides the capture time in the video or
 *  XDM file.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *captureTimeOverride;

/**
 *  Output only. The computed distance of the photo sequence in meters.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distanceMeters;

/**
 *  Output only. If this sequence has `failure_reason` set, this may contain
 *  additional details about the failure.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_ProcessingFailureDetails *failureDetails;

/**
 *  Output only. If this sequence has processing_state = FAILED, this will
 *  contain the reason why it failed. If the processing_state is any other
 *  value, this field will be unset.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_CorruptVideo
 *        The video file was corrupt or could not be decoded. (Value:
 *        "CORRUPT_VIDEO")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_Duplicate This
 *        video has been uploaded before. (Value: "DUPLICATE")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_FailedToRefinePositions
 *        The sequence of photos could not be accurately located in the world.
 *        (Value: "FAILED_TO_REFINE_POSITIONS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_GpsDataGap GPS
 *        data contains a gap greater than 5 seconds in duration. (Value:
 *        "GPS_DATA_GAP")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_ImuDataGap IMU
 *        (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1
 *        seconds in duration. (Value: "IMU_DATA_GAP")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientGps
 *        Too few GPS points. (Value: "INSUFFICIENT_GPS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientImu
 *        Too few IMU points. (Value: "INSUFFICIENT_IMU")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientMovement
 *        Not enough moving data. (Value: "INSUFFICIENT_MOVEMENT")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientOverlapTimeSeries
 *        Insufficient overlap in the time frame between GPS, IMU, and other
 *        time series data. (Value: "INSUFFICIENT_OVERLAP_TIME_SERIES")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientVideoFrames
 *        Not enough video frames. (Value: "INSUFFICIENT_VIDEO_FRAMES")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_Internal A
 *        permanent failure in the underlying system occurred. (Value:
 *        "INTERNAL")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidCaptureTime
 *        Invalid capture time. Timestamps were from the future. (Value:
 *        "INVALID_CAPTURE_TIME")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidGps GPS
 *        is invalid (e.x. all GPS points are at (0,0)) (Value: "INVALID_GPS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidImu IMU
 *        (Accelerometer, Gyroscope, etc.) data are not valid. They may be
 *        missing required fields (x, y, z or time), may not be formatted
 *        correctly, or any other issue that prevents our systems from parsing
 *        it. (Value: "INVALID_IMU")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoDimensions
 *        Invalid image aspect ratio found. (Value: "INVALID_VIDEO_DIMENSIONS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoFormat
 *        The video format is invalid or unsupported. (Value:
 *        "INVALID_VIDEO_FORMAT")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_JumpyGps GPS
 *        data is too erratic to be processed. (Value: "JUMPY_GPS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_LowResolution
 *        Video frame's resolution is too small. (Value: "LOW_RESOLUTION")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_NoOverlapGps No
 *        overlap between the time frame of GPS track and the time frame of
 *        video. (Value: "NO_OVERLAP_GPS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_NotOutdoors
 *        Some frames were indoors, which is unsupported. (Value:
 *        "NOT_OUTDOORS")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_ProcessingFailureReasonUnspecified
 *        The failure reason is unspecified, this is the default value. (Value:
 *        "PROCESSING_FAILURE_REASON_UNSPECIFIED")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_Takedown The
 *        sequence was taken down for policy reasons. (Value: "TAKEDOWN")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_FailureReason_UnsupportedCamera
 *        The camera is not supported. (Value: "UNSUPPORTED_CAMERA")
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  Output only. The filename of the upload. Does not include the directory
 *  path. Only available if the sequence was uploaded on a platform that
 *  provides the filename.
 */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  Input only. If both raw_gps_timeline and the Camera Motion Metadata Track
 *  (CAMM) contain GPS measurements, indicate which takes precedence.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_GpsSource_CameraMotionMetadataTrack
 *        GPS in Camera Motion Metadata Track (CAMM) takes precedence if it
 *        exists. (Value: "CAMERA_MOTION_METADATA_TRACK")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_GpsSource_PhotoSequence GPS
 *        in raw_gps_timeline takes precedence if it exists. (Value:
 *        "PHOTO_SEQUENCE")
 */
@property(nonatomic, copy, nullable) NSString *gpsSource;

/**
 *  Output only. Unique identifier for the photo sequence. This also acts as a
 *  long running operation ID if uploading is performed asynchronously.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Input only. Three axis IMU data for the collection. If this data is too
 *  large to put in the request, then it should be put in the CAMM track for the
 *  video. This data always takes precedence over the equivalent CAMM data, if
 *  it exists.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Imu *imu;

/** Output only. Photos with increasing timestamps. */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Photo *> *photos;

/**
 *  Output only. The processing state of this sequence.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Failed The
 *        sequence failed processing. See FailureReason for more details.
 *        (Value: "FAILED")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Pending The
 *        sequence has not yet started processing. (Value: "PENDING")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processed The
 *        sequence has finished processing including refining position. (Value:
 *        "PROCESSED")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processing
 *        The sequence is currently in processing. (Value: "PROCESSING")
 *    @arg @c kGTLRStreetViewPublish_PhotoSequence_ProcessingState_ProcessingStateUnspecified
 *        The state is unspecified, this is the default value. (Value:
 *        "PROCESSING_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *processingState;

/**
 *  Input only. Raw GPS measurements with increasing timestamps from the device
 *  that aren't time synced with each photo. These raw measurements will be used
 *  to infer the pose of each frame. Required in input when InputType is VIDEO
 *  and raw GPS measurements are not in Camera Motion Metadata Track (CAMM).
 *  User can indicate which takes precedence using gps_source if raw GPS
 *  measurements are provided in both raw_gps_timeline and Camera Motion
 *  Metadata Track (CAMM).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Pose *> *rawGpsTimeline;

/**
 *  Output only. A rectangular box that encapsulates every image in this photo
 *  sequence.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_LatLngBounds *sequenceBounds;

/**
 *  Input only. Required when creating photo sequence. The resource name where
 *  the bytes of the photo sequence (in the form of video) are uploaded.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_UploadRef *uploadReference;

/**
 *  Output only. The time this photo sequence was created in uSV Store service.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *uploadTime;

/**
 *  Output only. The total number of views that all the published images in this
 *  PhotoSequence have received.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *viewCount;

@end


/**
 *  Place metadata for an entity.
 */
@interface GTLRStreetViewPublish_Place : GTLRObject

/**
 *  Output only. The language_code that the name is localized with. This should
 *  be the language_code specified in the request, but may be a fallback.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Output only. The name of the place, localized to the language_code. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Place identifier, as described in
 *  https://developers.google.com/places/place-id.
 */
@property(nonatomic, copy, nullable) NSString *placeId;

@end


/**
 *  Raw pose measurement for an entity.
 */
@interface GTLRStreetViewPublish_Pose : GTLRObject

/**
 *  The estimated horizontal accuracy of this pose in meters with 68% confidence
 *  (one standard deviation). For example, on Android, this value is available
 *  from this method:
 *  https://developer.android.com/reference/android/location/Location#getAccuracy().
 *  Other platforms have different methods of obtaining similar accuracy
 *  estimations.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accuracyMeters;

/**
 *  Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an
 *  unmeasured quantity.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *altitude;

/** Time of the GPS record since UTC epoch. */
@property(nonatomic, strong, nullable) GTLRDateTime *gpsRecordTimestampUnixEpoch;

/**
 *  The following pose parameters pertain to the center of the photo. They match
 *  https://developers.google.com/streetview/spherical-metadata. Compass
 *  heading, measured at the center of the photo in degrees clockwise from
 *  North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heading;

/**
 *  Latitude and longitude pair of the pose, as explained here:
 *  https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
 *  When creating a Photo, if the latitude and longitude pair are not provided,
 *  the geolocation from the exif header is used. A latitude and longitude pair
 *  not provided in the photo or exif header causes the photo process to fail.
 */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_LatLng *latLngPair;

/** Level (the floor in a building) used to configure vertical navigation. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Level *level;

/**
 *  Pitch, measured at the center of the photo in degrees. Value must be >=-90
 *  and <= 90. A value of -90 means looking directly down, and a value of 90
 *  means looking directly up. NaN indicates an unmeasured quantity.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pitch;

/**
 *  Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means
 *  level with the horizon. NaN indicates an unmeasured quantity.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roll;

@end


/**
 *  Additional details to accompany the ProcessingFailureReason enum. This
 *  message is always expected to be used in conjunction with
 *  ProcessingFailureReason, and the oneof value set in this message should
 *  match the FailureReason.
 */
@interface GTLRStreetViewPublish_ProcessingFailureDetails : GTLRObject

/** See GpsDataGapFailureDetails. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_GpsDataGapFailureDetails *gpsDataGapDetails;

/** See ImuDataGapFailureDetails. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_ImuDataGapFailureDetails *imuDataGapDetails;

/** See InsufficientGpsFailureDetails. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_InsufficientGpsFailureDetails *insufficientGpsDetails;

/** See NotOutdoorsFailureDetails. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_NotOutdoorsFailureDetails *notOutdoorsDetails;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRStreetViewPublish_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStreetViewPublish_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRStreetViewPublish_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStreetViewPublish_Status_Details_Item : GTLRObject
@end


/**
 *  Request to update the metadata of a Photo. Updating the pixels of a photo is
 *  not supported.
 */
@interface GTLRStreetViewPublish_UpdatePhotoRequest : GTLRObject

/** Required. Photo object containing the new metadata. */
@property(nonatomic, strong, nullable) GTLRStreetViewPublish_Photo *photo;

/**
 *  Required. Mask that identifies fields on the photo metadata to update. If
 *  not present, the old Photo metadata is entirely replaced with the new Photo
 *  metadata in this request. The update fails if invalid fields are specified.
 *  Multiple fields can be specified in a comma-delimited list. The following
 *  fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` *
 *  `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` >
 *  Note: When updateMask contains repeated fields, the entire set of repeated
 *  values get replaced with the new contents. For example, if updateMask
 *  contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
 *  all connections are removed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Upload reference for media files.
 */
@interface GTLRStreetViewPublish_UploadRef : GTLRObject

/**
 *  An upload reference should be unique for each user. It follows the form:
 *  "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
 */
@property(nonatomic, copy, nullable) NSString *uploadUrl;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
