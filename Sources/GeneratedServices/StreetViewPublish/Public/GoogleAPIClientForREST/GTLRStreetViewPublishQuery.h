// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Street View Publish API (streetviewpublish/v1)
// Description:
//   Publishes 360 photos to Google Maps, along with position, orientation, and
//   connectivity metadata. Apps can offer an interface for positioning,
//   connecting, and uploading user-generated Street View images.
// Documentation:
//   https://developers.google.com/streetview/publish/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRStreetViewPublishObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// inputType

/**
 *  Not specified. Server will return google.rpc.Code.INVALID_ARGUMENT.
 *
 *  Value: "INPUT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublishInputTypeInputTypeUnspecified;
/**
 *  360 Video.
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublishInputTypeVideo;
/**
 *  Extensible Device Metadata, http://www.xdm.org
 *
 *  Value: "XDM"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublishInputTypeXdm;

// ----------------------------------------------------------------------------
// view

/**
 *  Server responses do not include the download URL for the photo bytes. The
 *  default value.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublishViewBasic;
/**
 *  Server responses include the download URL for the photo bytes.
 *
 *  Value: "INCLUDE_DOWNLOAD_URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRStreetViewPublishViewIncludeDownloadUrl;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Street View Publish query classes.
 */
@interface GTLRStreetViewPublishQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  After the client finishes uploading the photo with the returned UploadRef,
 *  CreatePhoto publishes the uploaded Photo to Street View on Google Maps.
 *  Currently, the only way to set heading, pitch, and roll in CreatePhoto is
 *  through the [Photo Sphere XMP
 *  metadata](https://developers.google.com/streetview/spherical-metadata) in
 *  the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
 *  `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method
 *  returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the
 *  request is malformed or if the uploaded photo is not a 360 photo. *
 *  google.rpc.Code.NOT_FOUND if the upload reference does not exist. *
 *  google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage
 *  limit.
 *
 *  Method: streetviewpublish.photo.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoCreate : GTLRStreetViewPublishQuery

/**
 *  Fetches a @c GTLRStreetViewPublish_Photo.
 *
 *  After the client finishes uploading the photo with the returned UploadRef,
 *  CreatePhoto publishes the uploaded Photo to Street View on Google Maps.
 *  Currently, the only way to set heading, pitch, and roll in CreatePhoto is
 *  through the [Photo Sphere XMP
 *  metadata](https://developers.google.com/streetview/spherical-metadata) in
 *  the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`,
 *  `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method
 *  returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the
 *  request is malformed or if the uploaded photo is not a 360 photo. *
 *  google.rpc.Code.NOT_FOUND if the upload reference does not exist. *
 *  google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage
 *  limit.
 *
 *  @param object The @c GTLRStreetViewPublish_Photo to include in the query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoCreate
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Photo *)object;

@end

/**
 *  Deletes a Photo and its metadata. This method returns the following error
 *  codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
 *  create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does
 *  not exist.
 *
 *  Method: streetviewpublish.photo.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoDelete : GTLRStreetViewPublishQuery

/** Required. ID of the Photo. */
@property(nonatomic, copy, nullable) NSString *photoId;

/**
 *  Fetches a @c GTLRStreetViewPublish_Empty.
 *
 *  Deletes a Photo and its metadata. This method returns the following error
 *  codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not
 *  create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does
 *  not exist.
 *
 *  @param photoId Required. ID of the Photo.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoDelete
 */
+ (instancetype)queryWithPhotoId:(NSString *)photoId;

@end

/**
 *  Gets the metadata of the specified Photo. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested
 *  Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo
 *  is still being indexed.
 *
 *  Method: streetviewpublish.photo.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoGet : GTLRStreetViewPublishQuery

/**
 *  The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If
 *  language_code is unspecified, the user's language preference for Google
 *  services is used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** Required. ID of the Photo. */
@property(nonatomic, copy, nullable) NSString *photoId;

/**
 *  Required. Specifies if a download URL for the photo bytes should be returned
 *  in the Photo response.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublishViewBasic Server responses do not include
 *        the download URL for the photo bytes. The default value. (Value:
 *        "BASIC")
 *    @arg @c kGTLRStreetViewPublishViewIncludeDownloadUrl Server responses
 *        include the download URL for the photo bytes. (Value:
 *        "INCLUDE_DOWNLOAD_URL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRStreetViewPublish_Photo.
 *
 *  Gets the metadata of the specified Photo. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested
 *  Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo
 *  is still being indexed.
 *
 *  @param photoId Required. ID of the Photo.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoGet
 */
+ (instancetype)queryWithPhotoId:(NSString *)photoId;

@end

/**
 *  Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos
 *  fails, either critical fields are missing or there is an authentication
 *  error. Even if BatchDeletePhotos succeeds, individual photos in the batch
 *  may have failures. These failures are specified in each PhotoResponse.status
 *  in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures
 *  that can occur per photo.
 *
 *  Method: streetviewpublish.photos.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotosBatchDelete : GTLRStreetViewPublishQuery

/**
 *  Fetches a @c GTLRStreetViewPublish_BatchDeletePhotosResponse.
 *
 *  Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos
 *  fails, either critical fields are missing or there is an authentication
 *  error. Even if BatchDeletePhotos succeeds, individual photos in the batch
 *  may have failures. These failures are specified in each PhotoResponse.status
 *  in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures
 *  that can occur per photo.
 *
 *  @param object The @c GTLRStreetViewPublish_BatchDeletePhotosRequest to
 *    include in the query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotosBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_BatchDeletePhotosRequest *)object;

@end

/**
 *  Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos
 *  fails, either critical fields are missing or there is an authentication
 *  error. Even if BatchGetPhotos succeeds, individual photos in the batch may
 *  have failures. These failures are specified in each PhotoResponse.status in
 *  BatchGetPhotosResponse.results. See GetPhoto for specific failures that can
 *  occur per photo.
 *
 *  Method: streetviewpublish.photos.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotosBatchGet : GTLRStreetViewPublishQuery

/**
 *  Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If
 *  language_code is unspecified, the user's language preference for Google
 *  services is used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. IDs of the Photos. For HTTP GET requests, the URL query parameter
 *  should be `photoIds=&photoIds=&...`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *photoIds;

/**
 *  Required. Specifies if a download URL for the photo bytes should be returned
 *  in the Photo response.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublishViewBasic Server responses do not include
 *        the download URL for the photo bytes. The default value. (Value:
 *        "BASIC")
 *    @arg @c kGTLRStreetViewPublishViewIncludeDownloadUrl Server responses
 *        include the download URL for the photo bytes. (Value:
 *        "INCLUDE_DOWNLOAD_URL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRStreetViewPublish_BatchGetPhotosResponse.
 *
 *  Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos
 *  fails, either critical fields are missing or there is an authentication
 *  error. Even if BatchGetPhotos succeeds, individual photos in the batch may
 *  have failures. These failures are specified in each PhotoResponse.status in
 *  BatchGetPhotosResponse.results. See GetPhoto for specific failures that can
 *  occur per photo.
 *
 *  @return GTLRStreetViewPublishQuery_PhotosBatchGet
 */
+ (instancetype)query;

@end

/**
 *  Updates the metadata of Photos, such as pose, place association,
 *  connections, etc. Changing the pixels of photos is not supported. Note that
 *  if BatchUpdatePhotos fails, either critical fields are missing or there is
 *  an authentication error. Even if BatchUpdatePhotos succeeds, individual
 *  photos in the batch may have failures. These failures are specified in each
 *  PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto
 *  for specific failures that can occur per photo. Only the fields specified in
 *  updateMask field are used. If `updateMask` is not present, the update
 *  applies to all fields. The number of UpdatePhotoRequest messages in a
 *  BatchUpdatePhotosRequest must not exceed 20. > Note: To update
 *  Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the
 *  request will fail.
 *
 *  Method: streetviewpublish.photos.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotosBatchUpdate : GTLRStreetViewPublishQuery

/**
 *  Fetches a @c GTLRStreetViewPublish_BatchUpdatePhotosResponse.
 *
 *  Updates the metadata of Photos, such as pose, place association,
 *  connections, etc. Changing the pixels of photos is not supported. Note that
 *  if BatchUpdatePhotos fails, either critical fields are missing or there is
 *  an authentication error. Even if BatchUpdatePhotos succeeds, individual
 *  photos in the batch may have failures. These failures are specified in each
 *  PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto
 *  for specific failures that can occur per photo. Only the fields specified in
 *  updateMask field are used. If `updateMask` is not present, the update
 *  applies to all fields. The number of UpdatePhotoRequest messages in a
 *  BatchUpdatePhotosRequest must not exceed 20. > Note: To update
 *  Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the
 *  request will fail.
 *
 *  @param object The @c GTLRStreetViewPublish_BatchUpdatePhotosRequest to
 *    include in the query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotosBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_BatchUpdatePhotosRequest *)object;

@end

/**
 *  After the client finishes uploading the PhotoSequence with the returned
 *  UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a
 *  video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be
 *  published to Street View on Google Maps. `CreatePhotoSequence` returns an
 *  Operation, with the PhotoSequence Id set in the `Operation.name` field. This
 *  method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT
 *  if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload
 *  reference does not exist.
 *
 *  Method: streetviewpublish.photoSequence.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoSequenceCreate : GTLRStreetViewPublishQuery

/**
 *  Required. The input form of PhotoSequence.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublishInputTypeInputTypeUnspecified Not specified.
 *        Server will return google.rpc.Code.INVALID_ARGUMENT. (Value:
 *        "INPUT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRStreetViewPublishInputTypeVideo 360 Video. (Value: "VIDEO")
 *    @arg @c kGTLRStreetViewPublishInputTypeXdm Extensible Device Metadata,
 *        http://www.xdm.org (Value: "XDM")
 */
@property(nonatomic, copy, nullable) NSString *inputType;

/**
 *  Fetches a @c GTLRStreetViewPublish_Operation.
 *
 *  After the client finishes uploading the PhotoSequence with the returned
 *  UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a
 *  video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be
 *  published to Street View on Google Maps. `CreatePhotoSequence` returns an
 *  Operation, with the PhotoSequence Id set in the `Operation.name` field. This
 *  method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT
 *  if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload
 *  reference does not exist.
 *
 *  @param object The @c GTLRStreetViewPublish_PhotoSequence to include in the
 *    query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoSequenceCreate
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_PhotoSequence *)object;

@end

/**
 *  Deletes a PhotoSequence and its metadata. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the
 *  photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if
 *  the photo sequence ID is not yet finished processing.
 *
 *  Method: streetviewpublish.photoSequence.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoSequenceDelete : GTLRStreetViewPublishQuery

/** Required. ID of the PhotoSequence. */
@property(nonatomic, copy, nullable) NSString *sequenceId;

/**
 *  Fetches a @c GTLRStreetViewPublish_Empty.
 *
 *  Deletes a PhotoSequence and its metadata. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the
 *  photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if
 *  the photo sequence ID is not yet finished processing.
 *
 *  @param sequenceId Required. ID of the PhotoSequence.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoSequenceDelete
 */
+ (instancetype)queryWithSequenceId:(NSString *)sequenceId;

@end

/**
 *  Gets the metadata of the specified PhotoSequence via the Operation
 *  interface. This method returns the following three types of responses: *
 *  `Operation.done` = false, if the processing of PhotoSequence is not finished
 *  yet. * `Operation.done` = true and `Operation.error` is populated, if there
 *  was an error in processing. * `Operation.done` = true and
 *  `Operation.response` is poulated, which contains a PhotoSequence message.
 *  This method returns the following error codes: *
 *  google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the
 *  requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested
 *  PhotoSequence does not exist.
 *
 *  Method: streetviewpublish.photoSequence.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoSequenceGet : GTLRStreetViewPublishQuery

/**
 *  Optional. The filter expression. For example: `published_status=PUBLISHED`.
 *  The filters supported are: `published_status`. See
 *  https://google.aip.dev/160 for more information.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Required. ID of the photo sequence. */
@property(nonatomic, copy, nullable) NSString *sequenceId;

/**
 *  Specifies if a download URL for the photo sequence should be returned in
 *  `download_url` of individual photos in the PhotoSequence response. > Note:
 *  Currently not implemented.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublishViewBasic Server responses do not include
 *        the download URL for the photo bytes. The default value. (Value:
 *        "BASIC")
 *    @arg @c kGTLRStreetViewPublishViewIncludeDownloadUrl Server responses
 *        include the download URL for the photo bytes. (Value:
 *        "INCLUDE_DOWNLOAD_URL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRStreetViewPublish_Operation.
 *
 *  Gets the metadata of the specified PhotoSequence via the Operation
 *  interface. This method returns the following three types of responses: *
 *  `Operation.done` = false, if the processing of PhotoSequence is not finished
 *  yet. * `Operation.done` = true and `Operation.error` is populated, if there
 *  was an error in processing. * `Operation.done` = true and
 *  `Operation.response` is poulated, which contains a PhotoSequence message.
 *  This method returns the following error codes: *
 *  google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the
 *  requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested
 *  PhotoSequence does not exist.
 *
 *  @param sequenceId Required. ID of the photo sequence.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoSequenceGet
 */
+ (instancetype)queryWithSequenceId:(NSString *)sequenceId;

@end

/**
 *  Lists all the PhotoSequences that belong to the user, in descending
 *  CreatePhotoSequence timestamp order.
 *
 *  Method: streetviewpublish.photoSequences.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoSequencesList : GTLRStreetViewPublishQuery

/**
 *  Optional. The filter expression. For example: `imagery_type=SPHERICAL`. The
 *  filters supported are: `imagery_type`, `processing_state`, `min_latitude`,
 *  `max_latitude`, `min_longitude`, `max_longitude`, and `filename_query`. See
 *  https://google.aip.dev/160 for more information. Filename queries should
 *  sent as a Phrase in order to support multple words and special characters by
 *  adding escaped quotes. Ex: filename_query="example of a phrase.mp4"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of photo sequences to return. `pageSize` must
 *  be non-negative. If `pageSize` is zero or is not provided, the default page
 *  size of 100 is used. The number of photo sequences returned in the response
 *  may be less than `pageSize` if the number of matches is less than
 *  `pageSize`. This is currently unimplemented but is in process.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The nextPageToken value returned from a previous
 *  ListPhotoSequences request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRStreetViewPublish_ListPhotoSequencesResponse.
 *
 *  Lists all the PhotoSequences that belong to the user, in descending
 *  CreatePhotoSequence timestamp order.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoSequencesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates an upload session to start uploading photo sequence data. The upload
 *  URL of the returned UploadRef is used to upload the data for the
 *  `photoSequence`. After the upload is complete, the UploadRef is used with
 *  CreatePhotoSequence to create the PhotoSequence object entry.
 *
 *  Method: streetviewpublish.photoSequence.startUpload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoSequenceStartUpload : GTLRStreetViewPublishQuery

/**
 *  Fetches a @c GTLRStreetViewPublish_UploadRef.
 *
 *  Creates an upload session to start uploading photo sequence data. The upload
 *  URL of the returned UploadRef is used to upload the data for the
 *  `photoSequence`. After the upload is complete, the UploadRef is used with
 *  CreatePhotoSequence to create the PhotoSequence object entry.
 *
 *  @param object The @c GTLRStreetViewPublish_Empty to include in the query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoSequenceStartUpload
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Empty *)object;

@end

/**
 *  Lists all the Photos that belong to the user. > Note: Recently created
 *  photos that are still being indexed are not returned in the response.
 *
 *  Method: streetviewpublish.photos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotosList : GTLRStreetViewPublishQuery

/**
 *  Optional. The filter expression. For example:
 *  `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`. The filters supported are: `placeId`,
 *  `min_latitude`, `max_latitude`, `min_longitude`, and `max_longitude`. See
 *  https://google.aip.dev/160 for more information.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If
 *  language_code is unspecified, the user's language preference for Google
 *  services is used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. The maximum number of photos to return. `pageSize` must be
 *  non-negative. If `pageSize` is zero or is not provided, the default page
 *  size of 100 is used. The number of photos returned in the response may be
 *  less than `pageSize` if the number of photos that belong to the user is less
 *  than `pageSize`.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. The nextPageToken value returned from a previous ListPhotos
 *  request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Specifies if a download URL for the photos bytes should be
 *  returned in the Photos response.
 *
 *  Likely values:
 *    @arg @c kGTLRStreetViewPublishViewBasic Server responses do not include
 *        the download URL for the photo bytes. The default value. (Value:
 *        "BASIC")
 *    @arg @c kGTLRStreetViewPublishViewIncludeDownloadUrl Server responses
 *        include the download URL for the photo bytes. (Value:
 *        "INCLUDE_DOWNLOAD_URL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRStreetViewPublish_ListPhotosResponse.
 *
 *  Lists all the Photos that belong to the user. > Note: Recently created
 *  photos that are still being indexed are not returned in the response.
 *
 *  @return GTLRStreetViewPublishQuery_PhotosList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates an upload session to start uploading photo bytes. The method uses
 *  the upload URL of the returned UploadRef to upload the bytes for the Photo.
 *  In addition to the photo requirements shown in
 *  https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo
 *  must meet the following requirements: * Photo Sphere XMP metadata must be
 *  included in the photo metadata. See
 *  https://developers.google.com/streetview/spherical-metadata for the required
 *  fields. * The pixel size of the photo must meet the size requirements listed
 *  in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the
 *  photo must be a full 360 horizontally. After the upload completes, the
 *  method uses UploadRef with CreatePhoto to create the Photo object entry.
 *
 *  Method: streetviewpublish.photo.startUpload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoStartUpload : GTLRStreetViewPublishQuery

/**
 *  Fetches a @c GTLRStreetViewPublish_UploadRef.
 *
 *  Creates an upload session to start uploading photo bytes. The method uses
 *  the upload URL of the returned UploadRef to upload the bytes for the Photo.
 *  In addition to the photo requirements shown in
 *  https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo
 *  must meet the following requirements: * Photo Sphere XMP metadata must be
 *  included in the photo metadata. See
 *  https://developers.google.com/streetview/spherical-metadata for the required
 *  fields. * The pixel size of the photo must meet the size requirements listed
 *  in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the
 *  photo must be a full 360 horizontally. After the upload completes, the
 *  method uses UploadRef with CreatePhoto to create the Photo object entry.
 *
 *  @param object The @c GTLRStreetViewPublish_Empty to include in the query.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoStartUpload
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Empty *)object;

@end

/**
 *  Updates the metadata of a Photo, such as pose, place association,
 *  connections, etc. Changing the pixels of a photo is not supported. Only the
 *  fields specified in the updateMask field are used. If `updateMask` is not
 *  present, the update applies to all fields. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the
 *  request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo
 *  does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is
 *  still being indexed.
 *
 *  Method: streetviewpublish.photo.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStreetViewPublish
 */
@interface GTLRStreetViewPublishQuery_PhotoUpdate : GTLRStreetViewPublishQuery

/**
 *  A unique identifier for a photo.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. Mask that identifies fields on the photo metadata to update. If
 *  not present, the old Photo metadata is entirely replaced with the new Photo
 *  metadata in this request. The update fails if invalid fields are specified.
 *  Multiple fields can be specified in a comma-delimited list. The following
 *  fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` *
 *  `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` >
 *  Note: When updateMask contains repeated fields, the entire set of repeated
 *  values get replaced with the new contents. For example, if updateMask
 *  contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
 *  all connections are removed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRStreetViewPublish_Photo.
 *
 *  Updates the metadata of a Photo, such as pose, place association,
 *  connections, etc. Changing the pixels of a photo is not supported. Only the
 *  fields specified in the updateMask field are used. If `updateMask` is not
 *  present, the update applies to all fields. This method returns the following
 *  error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did
 *  not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the
 *  request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo
 *  does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is
 *  still being indexed.
 *
 *  @param object The @c GTLRStreetViewPublish_Photo to include in the query.
 *  @param identifier A unique identifier for a photo.
 *
 *  @return GTLRStreetViewPublishQuery_PhotoUpdate
 */
+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Photo *)object
                     identifier:(NSString *)identifier;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
