// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Street View Publish API (streetviewpublish/v1)
// Description:
//   Publishes 360 photos to Google Maps, along with position, orientation, and
//   connectivity metadata. Apps can offer an interface for positioning,
//   connecting, and uploading user-generated Street View images.
// Documentation:
//   https://developers.google.com/streetview/publish/

#import <GoogleAPIClientForREST/GTLRStreetViewPublishObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRStreetViewPublish_Photo.mapsPublishStatus
NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_Published = @"PUBLISHED";
NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_RejectedUnknown = @"REJECTED_UNKNOWN";
NSString * const kGTLRStreetViewPublish_Photo_MapsPublishStatus_UnspecifiedMapsPublishStatus = @"UNSPECIFIED_MAPS_PUBLISH_STATUS";

// GTLRStreetViewPublish_Photo.transferStatus
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Cancelled = @"CANCELLED";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Completed = @"COMPLETED";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Expired = @"EXPIRED";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_NeverTransferred = @"NEVER_TRANSFERRED";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Pending = @"PENDING";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_ReceivedViaTransfer = @"RECEIVED_VIA_TRANSFER";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_Rejected = @"REJECTED";
NSString * const kGTLRStreetViewPublish_Photo_TransferStatus_TransferStatusUnknown = @"TRANSFER_STATUS_UNKNOWN";

// GTLRStreetViewPublish_PhotoSequence.failureReason
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_CorruptVideo = @"CORRUPT_VIDEO";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Duplicate = @"DUPLICATE";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_FailedToRefinePositions = @"FAILED_TO_REFINE_POSITIONS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_GpsDataGap = @"GPS_DATA_GAP";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_ImuDataGap = @"IMU_DATA_GAP";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientGps = @"INSUFFICIENT_GPS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientImu = @"INSUFFICIENT_IMU";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientMovement = @"INSUFFICIENT_MOVEMENT";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientOverlapTimeSeries = @"INSUFFICIENT_OVERLAP_TIME_SERIES";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InsufficientVideoFrames = @"INSUFFICIENT_VIDEO_FRAMES";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Internal = @"INTERNAL";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidCaptureTime = @"INVALID_CAPTURE_TIME";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidGps = @"INVALID_GPS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidImu = @"INVALID_IMU";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoDimensions = @"INVALID_VIDEO_DIMENSIONS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_InvalidVideoFormat = @"INVALID_VIDEO_FORMAT";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_JumpyGps = @"JUMPY_GPS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_LowResolution = @"LOW_RESOLUTION";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_NoOverlapGps = @"NO_OVERLAP_GPS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_NotOutdoors = @"NOT_OUTDOORS";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_ProcessingFailureReasonUnspecified = @"PROCESSING_FAILURE_REASON_UNSPECIFIED";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_Takedown = @"TAKEDOWN";
NSString * const kGTLRStreetViewPublish_PhotoSequence_FailureReason_UnsupportedCamera = @"UNSUPPORTED_CAMERA";

// GTLRStreetViewPublish_PhotoSequence.gpsSource
NSString * const kGTLRStreetViewPublish_PhotoSequence_GpsSource_CameraMotionMetadataTrack = @"CAMERA_MOTION_METADATA_TRACK";
NSString * const kGTLRStreetViewPublish_PhotoSequence_GpsSource_PhotoSequence = @"PHOTO_SEQUENCE";

// GTLRStreetViewPublish_PhotoSequence.processingState
NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Failed = @"FAILED";
NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Pending = @"PENDING";
NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processed = @"PROCESSED";
NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_Processing = @"PROCESSING";
NSString * const kGTLRStreetViewPublish_PhotoSequence_ProcessingState_ProcessingStateUnspecified = @"PROCESSING_STATE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_BatchDeletePhotosRequest
//

@implementation GTLRStreetViewPublish_BatchDeletePhotosRequest
@dynamic photoIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"photoIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_BatchDeletePhotosResponse
//

@implementation GTLRStreetViewPublish_BatchDeletePhotosResponse
@dynamic status;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"status" : [GTLRStreetViewPublish_Status class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_BatchGetPhotosResponse
//

@implementation GTLRStreetViewPublish_BatchGetPhotosResponse
@dynamic results;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"results" : [GTLRStreetViewPublish_PhotoResponse class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_BatchUpdatePhotosRequest
//

@implementation GTLRStreetViewPublish_BatchUpdatePhotosRequest
@dynamic updatePhotoRequests;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"updatePhotoRequests" : [GTLRStreetViewPublish_UpdatePhotoRequest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_BatchUpdatePhotosResponse
//

@implementation GTLRStreetViewPublish_BatchUpdatePhotosResponse
@dynamic results;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"results" : [GTLRStreetViewPublish_PhotoResponse class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Connection
//

@implementation GTLRStreetViewPublish_Connection
@dynamic target;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Empty
//

@implementation GTLRStreetViewPublish_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_GpsDataGapFailureDetails
//

@implementation GTLRStreetViewPublish_GpsDataGapFailureDetails
@dynamic gapDuration, gapStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Imu
//

@implementation GTLRStreetViewPublish_Imu
@dynamic accelMpsps, gyroRps, magUt;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelMpsps" : [GTLRStreetViewPublish_Measurement3d class],
    @"gyroRps" : [GTLRStreetViewPublish_Measurement3d class],
    @"magUt" : [GTLRStreetViewPublish_Measurement3d class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_ImuDataGapFailureDetails
//

@implementation GTLRStreetViewPublish_ImuDataGapFailureDetails
@dynamic gapDuration, gapStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_InsufficientGpsFailureDetails
//

@implementation GTLRStreetViewPublish_InsufficientGpsFailureDetails
@dynamic gpsPointsFound;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_LatLng
//

@implementation GTLRStreetViewPublish_LatLng
@dynamic latitude, longitude;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_LatLngBounds
//

@implementation GTLRStreetViewPublish_LatLngBounds
@dynamic northeast, southwest;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Level
//

@implementation GTLRStreetViewPublish_Level
@dynamic name, number;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_ListPhotoSequencesResponse
//

@implementation GTLRStreetViewPublish_ListPhotoSequencesResponse
@dynamic nextPageToken, photoSequences;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"photoSequences" : [GTLRStreetViewPublish_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"photoSequences";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_ListPhotosResponse
//

@implementation GTLRStreetViewPublish_ListPhotosResponse
@dynamic nextPageToken, photos;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"photos" : [GTLRStreetViewPublish_Photo class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"photos";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Measurement3d
//

@implementation GTLRStreetViewPublish_Measurement3d
@dynamic captureTime, x, y, z;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_NotOutdoorsFailureDetails
//

@implementation GTLRStreetViewPublish_NotOutdoorsFailureDetails
@dynamic startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Operation
//

@implementation GTLRStreetViewPublish_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Operation_Metadata
//

@implementation GTLRStreetViewPublish_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Operation_Response
//

@implementation GTLRStreetViewPublish_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Photo
//

@implementation GTLRStreetViewPublish_Photo
@dynamic captureTime, connections, downloadUrl, mapsPublishStatus, photoId,
         places, pose, shareLink, thumbnailUrl, transferStatus, uploadReference,
         uploadTime, viewCount;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connections" : [GTLRStreetViewPublish_Connection class],
    @"places" : [GTLRStreetViewPublish_Place class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_PhotoId
//

@implementation GTLRStreetViewPublish_PhotoId
@dynamic identifier;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_PhotoResponse
//

@implementation GTLRStreetViewPublish_PhotoResponse
@dynamic photo, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_PhotoSequence
//

@implementation GTLRStreetViewPublish_PhotoSequence
@dynamic captureTimeOverride, distanceMeters, failureDetails, failureReason,
         filename, gpsSource, identifier, imu, photos, processingState,
         rawGpsTimeline, sequenceBounds, uploadReference, uploadTime, viewCount;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"photos" : [GTLRStreetViewPublish_Photo class],
    @"rawGpsTimeline" : [GTLRStreetViewPublish_Pose class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Place
//

@implementation GTLRStreetViewPublish_Place
@dynamic languageCode, name, placeId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Pose
//

@implementation GTLRStreetViewPublish_Pose
@dynamic accuracyMeters, altitude, gpsRecordTimestampUnixEpoch, heading,
         latLngPair, level, pitch, roll;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_ProcessingFailureDetails
//

@implementation GTLRStreetViewPublish_ProcessingFailureDetails
@dynamic gpsDataGapDetails, imuDataGapDetails, insufficientGpsDetails,
         notOutdoorsDetails;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Status
//

@implementation GTLRStreetViewPublish_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRStreetViewPublish_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_Status_Details_Item
//

@implementation GTLRStreetViewPublish_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_UpdatePhotoRequest
//

@implementation GTLRStreetViewPublish_UpdatePhotoRequest
@dynamic photo, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRStreetViewPublish_UploadRef
//

@implementation GTLRStreetViewPublish_UploadRef
@dynamic uploadUrl;
@end
