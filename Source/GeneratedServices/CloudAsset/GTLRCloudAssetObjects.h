// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Asset API (cloudasset/v1)
// Description:
//   The cloud asset API manages the history and inventory of cloud resources.
// Documentation:
//   https://cloud.google.com/asset-inventory/docs/quickstart

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudAsset_Asset;
@class GTLRCloudAsset_AuditConfig;
@class GTLRCloudAsset_AuditLogConfig;
@class GTLRCloudAsset_BigQueryDestination;
@class GTLRCloudAsset_Binding;
@class GTLRCloudAsset_Expr;
@class GTLRCloudAsset_Feed;
@class GTLRCloudAsset_FeedOutputConfig;
@class GTLRCloudAsset_GcsDestination;
@class GTLRCloudAsset_GoogleCloudOrgpolicyV1BooleanPolicy;
@class GTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy;
@class GTLRCloudAsset_GoogleCloudOrgpolicyV1Policy;
@class GTLRCloudAsset_GoogleCloudOrgpolicyV1RestoreDefault;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessLevel;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessPolicy;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1Condition;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1CustomLevel;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig;
@class GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices;
@class GTLRCloudAsset_Operation_Metadata;
@class GTLRCloudAsset_Operation_Response;
@class GTLRCloudAsset_OutputConfig;
@class GTLRCloudAsset_Policy;
@class GTLRCloudAsset_PubsubDestination;
@class GTLRCloudAsset_Resource;
@class GTLRCloudAsset_Resource_Data;
@class GTLRCloudAsset_Status;
@class GTLRCloudAsset_Status_Details_Item;
@class GTLRCloudAsset_TemporalAsset;
@class GTLRCloudAsset_TimeWindow;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudAsset_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_ExportAssetsRequest.contentType

/**
 *  The Cloud Access context mananger Policy set on an asset.
 *
 *  Value: "ACCESS_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_ExportAssetsRequest_ContentType_AccessPolicy;
/**
 *  Unspecified content type.
 *
 *  Value: "CONTENT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_ExportAssetsRequest_ContentType_ContentTypeUnspecified;
/**
 *  The actual IAM policy set on a resource.
 *
 *  Value: "IAM_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_ExportAssetsRequest_ContentType_IamPolicy;
/**
 *  The Cloud Organization Policy set on an asset.
 *
 *  Value: "ORG_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_ExportAssetsRequest_ContentType_OrgPolicy;
/**
 *  Resource metadata.
 *
 *  Value: "RESOURCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_ExportAssetsRequest_ContentType_Resource;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_Feed.contentType

/**
 *  The Cloud Access context mananger Policy set on an asset.
 *
 *  Value: "ACCESS_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_Feed_ContentType_AccessPolicy;
/**
 *  Unspecified content type.
 *
 *  Value: "CONTENT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_Feed_ContentType_ContentTypeUnspecified;
/**
 *  The actual IAM policy set on a resource.
 *
 *  Value: "IAM_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_Feed_ContentType_IamPolicy;
/**
 *  The Cloud Organization Policy set on an asset.
 *
 *  Value: "ORG_POLICY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_Feed_ContentType_OrgPolicy;
/**
 *  Resource metadata.
 *
 *  Value: "RESOURCE"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_Feed_ContentType_Resource;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy.allValues

/**
 *  A policy with this set allows all values.
 *
 *  Value: "ALLOW"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_Allow;
/**
 *  Indicates that allowed_values or denied_values must be set.
 *
 *  Value: "ALL_VALUES_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_AllValuesUnspecified;
/**
 *  A policy with this set denies all values.
 *
 *  Value: "DENY"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_Deny;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel.combiningFunction

/**
 *  All `Conditions` must be true for the `BasicLevel` to be true.
 *
 *  Value: "AND"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel_CombiningFunction_And;
/**
 *  If at least one `Condition` is true, then the `BasicLevel` is true.
 *
 *  Value: "OR"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel_CombiningFunction_Or;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy.allowedDeviceManagementLevels

/** Value: "BASIC" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedDeviceManagementLevels_Basic;
/** Value: "COMPLETE" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedDeviceManagementLevels_Complete;
/** Value: "MANAGEMENT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedDeviceManagementLevels_ManagementUnspecified;
/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedDeviceManagementLevels_None;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy.allowedEncryptionStatuses

/** Value: "ENCRYPTED" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedEncryptionStatuses_Encrypted;
/** Value: "ENCRYPTION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedEncryptionStatuses_EncryptionUnspecified;
/** Value: "ENCRYPTION_UNSUPPORTED" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedEncryptionStatuses_EncryptionUnsupported;
/** Value: "UNENCRYPTED" */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy_AllowedEncryptionStatuses_Unencrypted;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint.osType

/**
 *  An Android operating system.
 *
 *  Value: "ANDROID"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_Android;
/**
 *  A desktop ChromeOS operating system.
 *
 *  Value: "DESKTOP_CHROME_OS"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopChromeOs;
/**
 *  A desktop Linux operating system.
 *
 *  Value: "DESKTOP_LINUX"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopLinux;
/**
 *  A desktop Mac operating system.
 *
 *  Value: "DESKTOP_MAC"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopMac;
/**
 *  A desktop Windows operating system.
 *
 *  Value: "DESKTOP_WINDOWS"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopWindows;
/**
 *  An iOS operating system.
 *
 *  Value: "IOS"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_Ios;
/**
 *  The operating system of the device is not specified or not known.
 *
 *  Value: "OS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_OsUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter.perimeterType

/**
 *  Perimeter Bridge.
 *
 *  Value: "PERIMETER_TYPE_BRIDGE"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter_PerimeterType_PerimeterTypeBridge;
/**
 *  Regular Perimeter.
 *
 *  Value: "PERIMETER_TYPE_REGULAR"
 */
GTLR_EXTERN NSString * const kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter_PerimeterType_PerimeterTypeRegular;

/**
 *  An asset in Google Cloud. An asset can be any resource in the Google Cloud
 *  [resource
 *  hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
 *  a resource outside the Google Cloud resource hierarchy (such as Google
 *  Kubernetes Engine clusters and objects), or a Cloud IAM policy.
 */
@interface GTLRCloudAsset_Asset : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessLevel *accessLevel;
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessPolicy *accessPolicy;

/**
 *  The ancestry path of an asset in Google Cloud [resource
 *  hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
 *  represented as a list of relative resource names. An ancestry path starts
 *  with the closest ancestor in the hierarchy and ends at root. If the asset
 *  is a project, folder, or organization, the ancestry path starts from the
 *  asset itself.
 *  For example: `["projects/123456789", "folders/5432", "organizations/1234"]`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ancestors;

/**
 *  The type of the asset. For example: "compute.googleapis.com/Disk"
 *  See [Supported asset
 *  types](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
 *  for more information.
 */
@property(nonatomic, copy, nullable) NSString *assetType;

/**
 *  A representation of the Cloud IAM policy set on a Google Cloud resource.
 *  There can be a maximum of one Cloud IAM policy set on any given resource.
 *  In addition, Cloud IAM policies inherit their granted access scope from any
 *  policies set on parent resources in the resource hierarchy. Therefore, the
 *  effectively policy is the union of both the policy set on this resource
 *  and each policy set on all of the resource's ancestry resource levels in
 *  the hierarchy. See
 *  [this topic](https://cloud.google.com/iam/docs/policies#inheritance) for
 *  more information.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Policy *iamPolicy;

/**
 *  The full name of the asset. For example:
 *  "//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1"
 *  See [Resource
 *  names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
 *  for more information.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A representation of an [organization
 *  policy](https://cloud.google.com/resource-manager/docs/organization-policy/overview#organization_policy).
 *  There can be more than one organization policy with different constraints
 *  set on a given resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_GoogleCloudOrgpolicyV1Policy *> *orgPolicy;

/** A representation of the resource. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Resource *resource;

@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter *servicePerimeter;

@end


/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "sampleservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:aliya\@example.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRCloudAsset_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  jose\@example.com from DATA_READ logging.
 */
@interface GTLRCloudAsset_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudAsset_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudAsset_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudAsset_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Batch get assets history response.
 */
@interface GTLRCloudAsset_BatchGetAssetsHistoryResponse : GTLRObject

/** A list of assets with valid time windows. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_TemporalAsset *> *assets;

@end


/**
 *  A BigQuery destination.
 */
@interface GTLRCloudAsset_BigQueryDestination : GTLRObject

/**
 *  Required. The BigQuery dataset in format
 *  "projects/projectId/datasets/datasetId", to which the snapshot result
 *  should be exported. If this dataset does not exist, the export call returns
 *  an INVALID_ARGUMENT error.
 */
@property(nonatomic, copy, nullable) NSString *dataset;

/**
 *  If the destination table already exists and this flag is `TRUE`, the
 *  table will be overwritten by the contents of assets snapshot. If the flag
 *  is `FALSE` or unset and the destination table already exists, the export
 *  call returns an INVALID_ARGUMEMT error.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *force;

/**
 *  Required. The BigQuery table to which the snapshot result should be
 *  written. If this table does not exist, a new table with the given name
 *  will be created.
 */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCloudAsset_Binding : GTLRObject

/**
 *  The condition that is associated with this binding.
 *  NOTE: An unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For
 *  example, `alice\@example.com?uid=123456789012345678901`. If the user is
 *  recovered, this value reverts to `user:{emailid}` and the recovered user
 *  retains the role in the binding.
 *  * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
 *  unique identifier) representing a service account that has been recently
 *  deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`.
 *  If the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding.
 *  * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a Google group that has been recently
 *  deleted. For example, `admins\@example.com?uid=123456789012345678901`. If
 *  the group is recovered, this value reverts to `group:{emailid}` and the
 *  recovered group retains the role in the binding.
 *  * `domain:{domain}`: The G Suite domain (primary) that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Create asset feed request.
 */
@interface GTLRCloudAsset_CreateFeedRequest : GTLRObject

/**
 *  Required. The feed details. The field `name` must be empty and it will be
 *  generated
 *  in the format of:
 *  projects/project_number/feeds/feed_id
 *  folders/folder_number/feeds/feed_id
 *  organizations/organization_number/feeds/feed_id
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Feed *feed;

/**
 *  Required. This is the client-assigned asset feed identifier and it needs to
 *  be unique under a specific parent project/folder/organization.
 */
@property(nonatomic, copy, nullable) NSString *feedId;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudAsset_Empty : GTLRObject
@end


/**
 *  Export asset request.
 */
@interface GTLRCloudAsset_ExportAssetsRequest : GTLRObject

/**
 *  A list of asset types of which to take a snapshot for. For example:
 *  "compute.googleapis.com/Disk". If specified, only matching assets will be
 *  returned. See [Introduction to Cloud Asset
 *  Inventory](https://cloud.google.com/asset-inventory/docs/overview)
 *  for all supported asset types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *assetTypes;

/**
 *  Asset content type. If not specified, no content but the asset name will be
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_ExportAssetsRequest_ContentType_AccessPolicy The
 *        Cloud Access context mananger Policy set on an asset. (Value:
 *        "ACCESS_POLICY")
 *    @arg @c kGTLRCloudAsset_ExportAssetsRequest_ContentType_ContentTypeUnspecified
 *        Unspecified content type. (Value: "CONTENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudAsset_ExportAssetsRequest_ContentType_IamPolicy The
 *        actual IAM policy set on a resource. (Value: "IAM_POLICY")
 *    @arg @c kGTLRCloudAsset_ExportAssetsRequest_ContentType_OrgPolicy The
 *        Cloud Organization Policy set on an asset. (Value: "ORG_POLICY")
 *    @arg @c kGTLRCloudAsset_ExportAssetsRequest_ContentType_Resource Resource
 *        metadata. (Value: "RESOURCE")
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Required. Output configuration indicating where the results will be output
 *  to. All results will be in newline delimited JSON format.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_OutputConfig *outputConfig;

/**
 *  Timestamp to take an asset snapshot. This can only be set to a timestamp
 *  between the current time and the current time minus 35 days (inclusive).
 *  If not specified, the current time will be used. Due to delays in resource
 *  data collection and indexing, there is a volatile window during which
 *  running the same query may get different results.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec.
 *  Example (Comparison):
 *  title: "Summary size limit"
 *  description: "Determines if a summary is less than 100 chars"
 *  expression: "document.summary.size() < 100"
 *  Example (Equality):
 *  title: "Requestor is owner"
 *  description: "Determines if requestor is the document owner"
 *  expression: "document.owner == request.auth.claims.email"
 *  Example (Logic):
 *  title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation):
 *  title: "Notification string"
 *  description: "Create a notification string with a timestamp."
 *  expression: "'New message received at ' + string(document.create_time)"
 *  The exact variables and functions that may be referenced within an
 *  expression
 *  are determined by the service that evaluates it. See the service
 *  documentation for additional information.
 */
@interface GTLRCloudAsset_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  An asset feed used to export asset updates to a destinations.
 *  An asset feed filter controls what updates are exported.
 *  The asset feed must be created within a project, organization, or
 *  folder. Supported destinations are:
 *  Pub/Sub topics.
 */
@interface GTLRCloudAsset_Feed : GTLRObject

/**
 *  A list of the full names of the assets to receive updates. You must specify
 *  either or both of asset_names and asset_types. Only asset updates matching
 *  specified asset_names and asset_types are exported to the feed. For
 *  example:
 *  `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
 *  See [Resource
 *  Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
 *  for more info.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *assetNames;

/**
 *  A list of types of the assets to receive updates. You must specify either
 *  or both of asset_names and asset_types. Only asset updates matching
 *  specified asset_names and asset_types are exported to the feed.
 *  For example: `"compute.googleapis.com/Disk"`
 *  See [this
 *  topic](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
 *  for a list of all supported asset types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *assetTypes;

/**
 *  Asset content type. If not specified, no content but the asset name and
 *  type will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_Feed_ContentType_AccessPolicy The Cloud Access
 *        context mananger Policy set on an asset. (Value: "ACCESS_POLICY")
 *    @arg @c kGTLRCloudAsset_Feed_ContentType_ContentTypeUnspecified
 *        Unspecified content type. (Value: "CONTENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudAsset_Feed_ContentType_IamPolicy The actual IAM policy
 *        set on a resource. (Value: "IAM_POLICY")
 *    @arg @c kGTLRCloudAsset_Feed_ContentType_OrgPolicy The Cloud Organization
 *        Policy set on an asset. (Value: "ORG_POLICY")
 *    @arg @c kGTLRCloudAsset_Feed_ContentType_Resource Resource metadata.
 *        (Value: "RESOURCE")
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Required. Feed output configuration defining where the asset updates are
 *  published to.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_FeedOutputConfig *feedOutputConfig;

/**
 *  Required. The format will be
 *  projects/{project_number}/feeds/{client-assigned_feed_identifier} or
 *  folders/{folder_number}/feeds/{client-assigned_feed_identifier} or
 *  organizations/{organization_number}/feeds/{client-assigned_feed_identifier}
 *  The client-assigned feed identifier must be unique within the parent
 *  project/folder/organization.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Output configuration for asset feed destination.
 */
@interface GTLRCloudAsset_FeedOutputConfig : GTLRObject

/** Destination on Pub/Sub. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_PubsubDestination *pubsubDestination;

@end


/**
 *  A Cloud Storage location.
 */
@interface GTLRCloudAsset_GcsDestination : GTLRObject

/**
 *  The uri of the Cloud Storage object. It's the same uri that is used by
 *  gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
 *  Editing Object
 *  Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
 *  for more information.
 */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  The uri prefix of all generated Cloud Storage objects. For example:
 *  "gs://bucket_name/object_name_prefix". Each object uri is in format:
 *  "gs://bucket_name/object_name_prefix/<asset type>/<shard number> and only
 *  contains assets for that type. <shard number> starts from 0. For example:
 *  "gs://bucket_name/object_name_prefix/compute.googleapis.com/Disk/0" is
 *  the first shard of output objects containing all
 *  compute.googleapis.com/Disk assets. An INVALID_ARGUMENT error will be
 *  returned if file with the same name "gs://bucket_name/object_name_prefix"
 *  already exists.
 */
@property(nonatomic, copy, nullable) NSString *uriPrefix;

@end


/**
 *  Used in `policy_type` to specify how `boolean_policy` will behave at this
 *  resource.
 */
@interface GTLRCloudAsset_GoogleCloudOrgpolicyV1BooleanPolicy : GTLRObject

/**
 *  If `true`, then the `Policy` is enforced. If `false`, then any
 *  configuration is acceptable.
 *  Suppose you have a `Constraint`
 *  `constraints/compute.disableSerialPortAccess` with `constraint_default`
 *  set to `ALLOW`. A `Policy` for that `Constraint` exhibits the following
 *  behavior:
 *  - If the `Policy` at this resource has enforced set to `false`, serial
 *  port connection attempts will be allowed.
 *  - If the `Policy` at this resource has enforced set to `true`, serial
 *  port connection attempts will be refused.
 *  - If the `Policy` at this resource is `RestoreDefault`, serial port
 *  connection attempts will be allowed.
 *  - If no `Policy` is set at this resource or anywhere higher in the
 *  resource hierarchy, serial port connection attempts will be allowed.
 *  - If no `Policy` is set at this resource, but one exists higher in the
 *  resource hierarchy, the behavior is as if the`Policy` were set at
 *  this resource.
 *  The following examples demonstrate the different possible layerings:
 *  Example 1 (nearest `Constraint` wins):
 *  `organizations/foo` has a `Policy` with:
 *  {enforced: false}
 *  `projects/bar` has no `Policy` set.
 *  The constraint at `projects/bar` and `organizations/foo` will not be
 *  enforced.
 *  Example 2 (enforcement gets replaced):
 *  `organizations/foo` has a `Policy` with:
 *  {enforced: false}
 *  `projects/bar` has a `Policy` with:
 *  {enforced: true}
 *  The constraint at `organizations/foo` is not enforced.
 *  The constraint at `projects/bar` is enforced.
 *  Example 3 (RestoreDefault):
 *  `organizations/foo` has a `Policy` with:
 *  {enforced: true}
 *  `projects/bar` has a `Policy` with:
 *  {RestoreDefault: {}}
 *  The constraint at `organizations/foo` is enforced.
 *  The constraint at `projects/bar` is not enforced, because
 *  `constraint_default` for the `Constraint` is `ALLOW`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enforced;

@end


/**
 *  Used in `policy_type` to specify how `list_policy` behaves at this
 *  resource.
 *  `ListPolicy` can define specific values and subtrees of Cloud Resource
 *  Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that
 *  are allowed or denied by setting the `allowed_values` and `denied_values`
 *  fields. This is achieved by using the `under:` and optional `is:` prefixes.
 *  The `under:` prefix is used to denote resource subtree values.
 *  The `is:` prefix is used to denote specific values, and is required only
 *  if the value contains a ":". Values prefixed with "is:" are treated the
 *  same as values with no prefix.
 *  Ancestry subtrees must be in one of the following formats:
 *  - "projects/<project-id>", e.g. "projects/tokyo-rain-123"
 *  - "folders/<folder-id>", e.g. "folders/1234"
 *  - "organizations/<organization-id>", e.g. "organizations/1234"
 *  The `supports_under` field of the associated `Constraint` defines whether
 *  ancestry prefixes can be used. You can set `allowed_values` and
 *  `denied_values` in the same `Policy` if `all_values` is
 *  `ALL_VALUES_UNSPECIFIED`. `ALLOW` or `DENY` are used to allow or deny all
 *  values. If `all_values` is set to either `ALLOW` or `DENY`,
 *  `allowed_values` and `denied_values` must be unset.
 */
@interface GTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy : GTLRObject

/**
 *  List of values allowed at this resource. Can only be set if `all_values`
 *  is set to `ALL_VALUES_UNSPECIFIED`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedValues;

/**
 *  The policy all_values state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_Allow A
 *        policy with this set allows all values. (Value: "ALLOW")
 *    @arg @c kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_AllValuesUnspecified
 *        Indicates that allowed_values or denied_values must be set. (Value:
 *        "ALL_VALUES_UNSPECIFIED")
 *    @arg @c kGTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy_AllValues_Deny A
 *        policy with this set denies all values. (Value: "DENY")
 */
@property(nonatomic, copy, nullable) NSString *allValues;

/**
 *  List of values denied at this resource. Can only be set if `all_values`
 *  is set to `ALL_VALUES_UNSPECIFIED`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deniedValues;

/**
 *  Determines the inheritance behavior for this `Policy`.
 *  By default, a `ListPolicy` set at a resource supercedes any `Policy` set
 *  anywhere up the resource hierarchy. However, if `inherit_from_parent` is
 *  set to `true`, then the values from the effective `Policy` of the parent
 *  resource are inherited, meaning the values set in this `Policy` are
 *  added to the values inherited up the hierarchy.
 *  Setting `Policy` hierarchies that inherit both allowed values and denied
 *  values isn't recommended in most circumstances to keep the configuration
 *  simple and understandable. However, it is possible to set a `Policy` with
 *  `allowed_values` set that inherits a `Policy` with `denied_values` set.
 *  In this case, the values that are allowed must be in `allowed_values` and
 *  not present in `denied_values`.
 *  For example, suppose you have a `Constraint`
 *  `constraints/serviceuser.services`, which has a `constraint_type` of
 *  `list_constraint`, and with `constraint_default` set to `ALLOW`.
 *  Suppose that at the Organization level, a `Policy` is applied that
 *  restricts the allowed API activations to {`E1`, `E2`}. Then, if a
 *  `Policy` is applied to a project below the Organization that has
 *  `inherit_from_parent` set to `false` and field all_values set to DENY,
 *  then an attempt to activate any API will be denied.
 *  The following examples demonstrate different possible layerings for
 *  `projects/bar` parented by `organizations/foo`:
 *  Example 1 (no inherited values):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values:"E2"}
 *  `projects/bar` has `inherit_from_parent` `false` and values:
 *  {allowed_values: "E3" allowed_values: "E4"}
 *  The accepted values at `organizations/foo` are `E1`, `E2`.
 *  The accepted values at `projects/bar` are `E3`, and `E4`.
 *  Example 2 (inherited values):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values:"E2"}
 *  `projects/bar` has a `Policy` with values:
 *  {value: "E3" value: "E4" inherit_from_parent: true}
 *  The accepted values at `organizations/foo` are `E1`, `E2`.
 *  The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`.
 *  Example 3 (inheriting both allowed and denied values):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values: "E2"}
 *  `projects/bar` has a `Policy` with:
 *  {denied_values: "E1"}
 *  The accepted values at `organizations/foo` are `E1`, `E2`.
 *  The value accepted at `projects/bar` is `E2`.
 *  Example 4 (RestoreDefault):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values:"E2"}
 *  `projects/bar` has a `Policy` with values:
 *  {RestoreDefault: {}}
 *  The accepted values at `organizations/foo` are `E1`, `E2`.
 *  The accepted values at `projects/bar` are either all or none depending on
 *  the value of `constraint_default` (if `ALLOW`, all; if
 *  `DENY`, none).
 *  Example 5 (no policy inherits parent policy):
 *  `organizations/foo` has no `Policy` set.
 *  `projects/bar` has no `Policy` set.
 *  The accepted values at both levels are either all or none depending on
 *  the value of `constraint_default` (if `ALLOW`, all; if
 *  `DENY`, none).
 *  Example 6 (ListConstraint allowing all):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values: "E2"}
 *  `projects/bar` has a `Policy` with:
 *  {all: ALLOW}
 *  The accepted values at `organizations/foo` are `E1`, E2`.
 *  Any value is accepted at `projects/bar`.
 *  Example 7 (ListConstraint allowing none):
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "E1" allowed_values: "E2"}
 *  `projects/bar` has a `Policy` with:
 *  {all: DENY}
 *  The accepted values at `organizations/foo` are `E1`, E2`.
 *  No value is accepted at `projects/bar`.
 *  Example 10 (allowed and denied subtrees of Resource Manager hierarchy):
 *  Given the following resource hierarchy
 *  O1->{F1, F2}; F1->{P1}; F2->{P2, P3},
 *  `organizations/foo` has a `Policy` with values:
 *  {allowed_values: "under:organizations/O1"}
 *  `projects/bar` has a `Policy` with:
 *  {allowed_values: "under:projects/P3"}
 *  {denied_values: "under:folders/F2"}
 *  The accepted values at `organizations/foo` are `organizations/O1`,
 *  `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`,
 *  `projects/P3`.
 *  The accepted values at `projects/bar` are `organizations/O1`,
 *  `folders/F1`, `projects/P1`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inheritFromParent;

/**
 *  Optional. The Google Cloud Console will try to default to a configuration
 *  that matches the value specified in this `Policy`. If `suggested_value`
 *  is not set, it will inherit the value specified higher in the hierarchy,
 *  unless `inherit_from_parent` is `false`.
 */
@property(nonatomic, copy, nullable) NSString *suggestedValue;

@end


/**
 *  Defines a Cloud Organization `Policy` which is used to specify `Constraints`
 *  for configurations of Cloud Platform resources.
 */
@interface GTLRCloudAsset_GoogleCloudOrgpolicyV1Policy : GTLRObject

/** For boolean `Constraints`, whether to enforce the `Constraint` or not. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleCloudOrgpolicyV1BooleanPolicy *booleanPolicy;

/**
 *  The name of the `Constraint` the `Policy` is configuring, for example,
 *  `constraints/serviceuser.services`.
 *  Immutable after creation.
 */
@property(nonatomic, copy, nullable) NSString *constraint;

/**
 *  An opaque tag indicating the current version of the `Policy`, used for
 *  concurrency control.
 *  When the `Policy` is returned from either a `GetPolicy` or a
 *  `ListOrgPolicy` request, this `etag` indicates the version of the current
 *  `Policy` to use when executing a read-modify-write loop.
 *  When the `Policy` is returned from a `GetEffectivePolicy` request, the
 *  `etag` will be unset.
 *  When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value
 *  that was returned from a `GetOrgPolicy` request as part of a
 *  read-modify-write loop for concurrency control. Not setting the `etag`in a
 *  `SetOrgPolicy` request will result in an unconditional write of the
 *  `Policy`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** List of values either allowed or disallowed. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleCloudOrgpolicyV1ListPolicy *listPolicy;

/**
 *  Restores the default behavior of the constraint; independent of
 *  `Constraint` type.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleCloudOrgpolicyV1RestoreDefault *restoreDefault;

/**
 *  The time stamp the `Policy` was previously updated. This is set by the
 *  server, not specified by the caller, and represents the last time a call to
 *  `SetOrgPolicy` was made for that `Policy`. Any value set by the client will
 *  be ignored.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Version of the `Policy`. Default version is 0;
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Ignores policies set above this resource and restores the
 *  `constraint_default` enforcement behavior of the specific `Constraint` at
 *  this resource.
 *  Suppose that `constraint_default` is set to `ALLOW` for the
 *  `Constraint` `constraints/serviceuser.services`. Suppose that organization
 *  foo.com sets a `Policy` at their Organization resource node that restricts
 *  the allowed service activations to deny all service activations. They
 *  could then set a `Policy` with the `policy_type` `restore_default` on
 *  several experimental projects, restoring the `constraint_default`
 *  enforcement of the `Constraint` for only those projects, allowing those
 *  projects to have all services activated.
 */
@interface GTLRCloudAsset_GoogleCloudOrgpolicyV1RestoreDefault : GTLRObject
@end


/**
 *  An `AccessLevel` is a label that can be applied to requests to Google Cloud
 *  services, along with a list of requirements necessary for the label to be
 *  applied.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessLevel : GTLRObject

/** A `BasicLevel` composed of `Conditions`. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel *basic;

/** A `CustomLevel` written in the Common Expression Language. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1CustomLevel *custom;

/**
 *  Description of the `AccessLevel` and its use. Does not affect behavior.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. Resource name for the Access Level. The `short_name` component
 *  must begin with a letter and only include alphanumeric and '_'. Format:
 *  `accessPolicies/{policy_id}/accessLevels/{short_name}`. The maximum length
 *  of the `short_name` component is 50 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Human readable title. Must be unique within the Policy. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  `AccessPolicy` is a container for `AccessLevels` (which define the necessary
 *  attributes to use Google Cloud services) and `ServicePerimeters` (which
 *  define regions of services able to freely pass data within a perimeter). An
 *  access policy is globally visible within an organization, and the
 *  restrictions it specifies apply to all projects within an organization.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1AccessPolicy : GTLRObject

/**
 *  Output only. An opaque identifier for the current version of the
 *  `AccessPolicy`. This will always be a strongly validated etag, meaning that
 *  two Access Polices will be identical if and only if their etags are
 *  identical. Clients should not expect this to be in any specific format.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Resource name of the `AccessPolicy`. Format:
 *  `accessPolicies/{policy_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The parent of this `AccessPolicy` in the Cloud Resource
 *  Hierarchy. Currently immutable once created. Format:
 *  `organizations/{organization_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. Human readable title. Does not affect behavior. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  `BasicLevel` is an `AccessLevel` using a set of recommended features.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel : GTLRObject

/**
 *  How the `conditions` list should be combined to determine if a request is
 *  granted this `AccessLevel`. If AND is used, each `Condition` in
 *  `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
 *  is used, at least one `Condition` in `conditions` must be satisfied for the
 *  `AccessLevel` to be applied. Default behavior is AND.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel_CombiningFunction_And
 *        All `Conditions` must be true for the `BasicLevel` to be true. (Value:
 *        "AND")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1BasicLevel_CombiningFunction_Or
 *        If at least one `Condition` is true, then the `BasicLevel` is true.
 *        (Value: "OR")
 */
@property(nonatomic, copy, nullable) NSString *combiningFunction;

/** Required. A list of requirements for the `AccessLevel` to be granted. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1Condition *> *conditions;

@end


/**
 *  A condition necessary for an `AccessLevel` to be granted. The Condition is
 *  an
 *  AND over its fields. So a Condition is true if: 1) the request IP is from
 *  one
 *  of the listed subnetworks AND 2) the originating device complies with the
 *  listed device policy AND 3) all listed access levels are granted AND 4) the
 *  request was sent at a time allowed by the DateTimeRestriction.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1Condition : GTLRObject

/**
 *  Device specific restrictions, all restrictions must hold for the
 *  Condition to be true. If not specified, all devices are allowed.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy *devicePolicy;

/**
 *  CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for
 *  a CIDR IP address block, the specified IP address portion must be properly
 *  truncated (i.e. all the host bits must be zero) or the input is considered
 *  malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is
 *  not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas
 *  "2001:db8::1/32" is not. The originating IP of a request must be in one of
 *  the listed subnets in order for this Condition to be true. If empty, all IP
 *  addresses are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ipSubnetworks;

/**
 *  The request must be made by one of the provided user or service
 *  accounts. Groups are not supported.
 *  Syntax:
 *  `user:{emailid}`
 *  `serviceAccount:{emailid}`
 *  If not specified, a request may come from any user.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Whether to negate the Condition. If true, the Condition becomes a NAND over
 *  its non-empty fields, each field must be false for the Condition overall to
 *  be satisfied. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *negate;

/**
 *  The request must originate from one of the provided countries/regions.
 *  Must be valid ISO 3166-1 alpha-2 codes.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *regions;

/**
 *  A list of other access levels defined in the same `Policy`, referenced by
 *  resource name. Referencing an `AccessLevel` which does not exist is an
 *  error. All access levels listed must be granted for the Condition
 *  to be true. Example:
 *  "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requiredAccessLevels;

@end


/**
 *  `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language
 *  to represent the necessary conditions for the level to apply to a request.
 *  See CEL spec at: https://github.com/google/cel-spec
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1CustomLevel : GTLRObject

/** Required. A Cloud CEL expression evaluating to a boolean. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Expr *expr;

@end


/**
 *  `DevicePolicy` specifies device specific restrictions necessary to acquire a
 *  given access level. A `DevicePolicy` specifies requirements for requests
 *  from
 *  devices to be granted access levels, it does not do any enforcement on the
 *  device. `DevicePolicy` acts as an AND over all specified fields, and each
 *  repeated field is an OR over its elements. Any unset fields are ignored. For
 *  example, if the proto is { os_type : DESKTOP_WINDOWS, os_type :
 *  DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be
 *  true for requests originating from encrypted Linux desktops and encrypted
 *  Windows desktops.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1DevicePolicy : GTLRObject

/**
 *  Allowed device management levels, an empty list allows all management
 *  levels.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedDeviceManagementLevels;

/** Allowed encryptions statuses, an empty list allows all statuses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedEncryptionStatuses;

/** Allowed OS versions, an empty list allows all types and all versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint *> *osConstraints;

/**
 *  Whether the device needs to be approved by the customer admin.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireAdminApproval;

/**
 *  Whether the device needs to be corp owned.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireCorpOwned;

/**
 *  Whether or not screenlock is required for the DevicePolicy to be true.
 *  Defaults to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireScreenlock;

@end


/**
 *  A restriction on the OS type and version of devices making requests.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint : GTLRObject

/**
 *  The minimum allowed OS version. If not set, any version of this OS
 *  satisfies the constraint. Format: `"major.minor.patch"`.
 *  Examples: `"10.5.301"`, `"9.2.1"`.
 */
@property(nonatomic, copy, nullable) NSString *minimumVersion;

/**
 *  Required. The allowed OS type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_Android
 *        An Android operating system. (Value: "ANDROID")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopChromeOs
 *        A desktop ChromeOS operating system. (Value: "DESKTOP_CHROME_OS")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopLinux
 *        A desktop Linux operating system. (Value: "DESKTOP_LINUX")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopMac
 *        A desktop Mac operating system. (Value: "DESKTOP_MAC")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_DesktopWindows
 *        A desktop Windows operating system. (Value: "DESKTOP_WINDOWS")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_Ios
 *        An iOS operating system. (Value: "IOS")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1OsConstraint_OsType_OsUnspecified
 *        The operating system of the device is not specified or not known.
 *        (Value: "OS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *osType;

/**
 *  Only allows requests from devices with a verified Chrome OS.
 *  Verifications includes requirements that the device is enterprise-managed,
 *  conformant to domain policies, and the caller has permission to call
 *  the API targeted by the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireVerifiedChromeOs;

@end


/**
 *  `ServicePerimeter` describes a set of Google Cloud resources which can
 *  freely
 *  import and export data amongst themselves, but not export outside of the
 *  `ServicePerimeter`. If a request with a source within this
 *  `ServicePerimeter`
 *  has a target outside of the `ServicePerimeter`, the request will be blocked.
 *  Otherwise the request is allowed. There are two types of Service Perimeter -
 *  Regular and Bridge. Regular Service Perimeters cannot overlap, a single
 *  Google Cloud project can only belong to a single regular Service Perimeter.
 *  Service Perimeter Bridges can contain only Google Cloud projects as members,
 *  a single Google Cloud project may belong to multiple Service Perimeter
 *  Bridges.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter : GTLRObject

/**
 *  Description of the `ServicePerimeter` and its use. Does not affect
 *  behavior.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. Resource name for the ServicePerimeter. The `short_name`
 *  component must begin with a letter and only include alphanumeric and '_'.
 *  Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Perimeter type indicator. A single project is
 *  allowed to be a member of single regular perimeter, but multiple service
 *  perimeter bridges. A project cannot be a included in a perimeter bridge
 *  without being included in regular perimeter. For perimeter bridges,
 *  the restricted service list as well as access level lists must be
 *  empty.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter_PerimeterType_PerimeterTypeBridge
 *        Perimeter Bridge. (Value: "PERIMETER_TYPE_BRIDGE")
 *    @arg @c kGTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeter_PerimeterType_PerimeterTypeRegular
 *        Regular Perimeter. (Value: "PERIMETER_TYPE_REGULAR")
 */
@property(nonatomic, copy, nullable) NSString *perimeterType;

/**
 *  Proposed (or dry run) ServicePerimeter configuration. This configuration
 *  allows to specify and test ServicePerimeter configuration without enforcing
 *  actual access restrictions. Only allowed to be set when the
 *  "use_explicit_dry_run_spec" flag is set.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig *spec;

/**
 *  Current ServicePerimeter configuration. Specifies sets of resources,
 *  restricted services and access levels that determine perimeter
 *  content and boundaries.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig *status;

/** Human readable title. Must be unique within the Policy. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
 *  exists for all Service Perimeters, and that spec is identical to the
 *  status for those Service Perimeters. When this flag is set, it inhibits the
 *  generation of the implicit spec, thereby allowing the user to explicitly
 *  provide a configuration ("spec") to use in a dry-run version of the Service
 *  Perimeter. This allows the user to test changes to the enforced config
 *  ("status") without actually enforcing them. This testing is done through
 *  analyzing the differences between currently enforced and suggested
 *  restrictions. use_explicit_dry_run_spec must bet set to True if any of the
 *  fields in the spec are set to non-default values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useExplicitDryRunSpec;

@end


/**
 *  `ServicePerimeterConfig` specifies a set of Google Cloud resources that
 *  describe specific Service Perimeter configuration.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig : GTLRObject

/**
 *  A list of `AccessLevel` resource names that allow resources within the
 *  `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed
 *  must be in the same policy as this `ServicePerimeter`. Referencing a
 *  nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are
 *  listed, resources within the perimeter can only be accessed via Google
 *  Cloud calls with request origins within the perimeter. Example:
 *  `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`.
 *  For Service Perimeter Bridge, must be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessLevels;

/**
 *  A list of Google Cloud resources that are inside of the service perimeter.
 *  Currently only projects are allowed. Format: `projects/{project_number}`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resources;

/**
 *  Google Cloud services that are subject to the Service Perimeter
 *  restrictions. For example, if `storage.googleapis.com` is specified, access
 *  to the storage buckets inside the perimeter must meet the perimeter's
 *  access restrictions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *restrictedServices;

/** Configuration for APIs allowed within Perimeter. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices *vpcAccessibleServices;

@end


/**
 *  Specifies how APIs are allowed to communicate within the Service
 *  Perimeter.
 */
@interface GTLRCloudAsset_GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices : GTLRObject

/**
 *  The list of APIs usable within the Service Perimeter. Must be empty
 *  unless 'enable_restriction' is True.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedServices;

/**
 *  Whether to restrict API calls within the Service Perimeter to the list of
 *  APIs specified in 'allowed_services'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableRestriction;

@end


/**
 *  GTLRCloudAsset_ListFeedsResponse
 */
@interface GTLRCloudAsset_ListFeedsResponse : GTLRObject

/** A list of feeds. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_Feed *> *feeds;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudAsset_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudAsset_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudAsset_Operation_Response : GTLRObject
@end


/**
 *  Output configuration for export assets destination.
 */
@interface GTLRCloudAsset_OutputConfig : GTLRObject

/**
 *  Destination on BigQuery. The output table stores the fields in asset
 *  proto as columns in BigQuery. The resource/iam_policy field is converted
 *  to a record with each field to a column, except metadata to a single JSON
 *  string.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_BigQueryDestination *bigqueryDestination;

/** Destination on Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_GcsDestination *gcsDestination;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources.
 *  A `Policy` is a collection of `bindings`. A `binding` binds one or more
 *  `members` to a single `role`. Members can be user accounts, service
 *  accounts,
 *  Google groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role.
 *  Optionally, a `binding` can specify a `condition`, which is a logical
 *  expression that allows access to a resource only if the expression evaluates
 *  to `true`. A condition can add constraints based on attributes of the
 *  request, the resource, or both.
 *  **JSON example:**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/resourcemanager.organizationAdmin",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/resourcemanager.organizationViewer",
 *  "members": ["user:eve\@example.com"],
 *  "condition": {
 *  "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020",
 *  "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
 *  }
 *  }
 *  ],
 *  "etag": "BwWWja0YfJA=",
 *  "version": 3
 *  }
 *  **YAML example:**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-project-id\@appspot.gserviceaccount.com
 *  role: roles/resourcemanager.organizationAdmin
 *  - members:
 *  - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer
 *  condition:
 *  title: expirable access
 *  description: Does not grant access after Sep 2020
 *  expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
 *  - etag: BwWWja0YfJA=
 *  - version: 3
 *  For a description of IAM and its features, see the
 *  [IAM documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudAsset_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`. Optionally, may specify a
 *  `condition` that determines how and when the `bindings` are applied. Each
 *  of the `bindings` must contain at least one member.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy.
 *  Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
 *  are rejected.
 *  Any operation that affects conditional role bindings must specify version
 *  `3`. This requirement applies to the following operations:
 *  * Getting a policy that includes a conditional role binding
 *  * Adding a conditional role binding to a policy
 *  * Changing a conditional role binding in a policy
 *  * Removing any role binding, with or without a condition, from a policy
 *  that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost.
 *  If a policy does not include any conditions, operations on that policy may
 *  specify any valid version or leave the field unset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A Pub/Sub destination.
 */
@interface GTLRCloudAsset_PubsubDestination : GTLRObject

/**
 *  The name of the Pub/Sub topic to publish to.
 *  For example: `projects/PROJECT_ID/topics/TOPIC_ID`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  A representation of a Google Cloud resource.
 */
@interface GTLRCloudAsset_Resource : GTLRObject

/**
 *  The content of the resource, in which some sensitive fields are removed
 *  and may not be present.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Resource_Data *data;

/**
 *  The URL of the discovery document containing the resource's JSON schema.
 *  For example:
 *  "https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"
 *  This value is unspecified for resources that do not have an API based on a
 *  discovery document, such as Cloud Bigtable.
 */
@property(nonatomic, copy, nullable) NSString *discoveryDocumentUri;

/**
 *  The JSON schema name listed in the discovery document. For example:
 *  "Project"
 *  This value is unspecified for resources that do not have an API based on a
 *  discovery document, such as Cloud Bigtable.
 */
@property(nonatomic, copy, nullable) NSString *discoveryName;

/**
 *  The full name of the immediate parent of this resource. See
 *  [Resource
 *  Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
 *  for more information.
 *  For Google Cloud assets, this value is the parent resource defined in the
 *  [Cloud IAM policy
 *  hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
 *  For example:
 *  "//cloudresourcemanager.googleapis.com/projects/my_project_123"
 *  For third-party assets, this field may be set differently.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The REST URL for accessing the resource. An HTTP `GET` request using this
 *  URL returns the resource itself. For example:
 *  "https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123"
 *  This value is unspecified for resources without a REST API.
 */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

/** The API version. For example: "v1" */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  The content of the resource, in which some sensitive fields are removed
 *  and may not be present.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudAsset_Resource_Data : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details.
 *  You can find out more about this error model and how to work with it in the
 *  [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudAsset_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudAsset_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudAsset_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudAsset_Status_Details_Item : GTLRObject
@end


/**
 *  An asset in Google Cloud and its temporal metadata, including the time
 *  window
 *  when it was observed and its status during that window.
 */
@interface GTLRCloudAsset_TemporalAsset : GTLRObject

/** An asset in Google Cloud. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Asset *asset;

/**
 *  Whether the asset has been deleted or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** The time window when the asset data and state was observed. */
@property(nonatomic, strong, nullable) GTLRCloudAsset_TimeWindow *window;

@end


/**
 *  A time window specified by its "start_time" and "end_time".
 */
@interface GTLRCloudAsset_TimeWindow : GTLRObject

/**
 *  End time of the time window (inclusive). If not specified, the current
 *  timestamp is used instead.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Start time of the time window (exclusive). */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Update asset feed request.
 */
@interface GTLRCloudAsset_UpdateFeedRequest : GTLRObject

/**
 *  Required. The new values of feed details. It must match an existing feed and
 *  the
 *  field `name` must be in the format of:
 *  projects/project_number/feeds/feed_id or
 *  folders/folder_number/feeds/feed_id or
 *  organizations/organization_number/feeds/feed_id.
 */
@property(nonatomic, strong, nullable) GTLRCloudAsset_Feed *feed;

/**
 *  Required. Only updates the `feed` fields indicated by this mask.
 *  The field mask must not be empty, and it must not contain fields that
 *  are immutable or only set by the server.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
