// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Hosting API (firebasehosting/v1beta1)
// Description:
//   The Firebase Hosting REST API enables programmatic and customizable
//   deployments to your Firebase-hosted sites. Use this REST API to deploy new
//   or updated hosting configurations and content files.
// Documentation:
//   https://firebase.google.com/docs/hosting/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseHosting_Domain;
@class GTLRFirebaseHosting_PopulateVersionFilesRequest;
@class GTLRFirebaseHosting_Release;
@class GTLRFirebaseHosting_SiteConfig;
@class GTLRFirebaseHosting_Version;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// status

/** Value: "ACTIVE" */
GTLR_EXTERN NSString * const kGTLRFirebaseHostingStatusActive;
/** Value: "EXPECTED" */
GTLR_EXTERN NSString * const kGTLRFirebaseHostingStatusExpected;
/** Value: "STATUS_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRFirebaseHostingStatusStatusUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Firebase Hosting query classes.
 */
@interface GTLRFirebaseHostingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a domain mapping on the specified site.
 *
 *  Method: firebasehosting.sites.domains.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesDomainsCreate : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesDomainsCreateWithObject:parent:]

/**
 *  Required. The parent to create the domain association for, in the format:
 *  <code>sites/<var>site-name</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseHosting_Domain.
 *
 *  Creates a domain mapping on the specified site.
 *
 *  @param object The @c GTLRFirebaseHosting_Domain to include in the query.
 *  @param parent Required. The parent to create the domain association for, in
 *    the format:
 *    <code>sites/<var>site-name</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesDomainsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_Domain *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the existing domain mapping on the specified site.
 *
 *  Method: firebasehosting.sites.domains.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesDomainsDelete : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesDomainsDeleteWithname:]

/** Required. The name of the domain association to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseHosting_Empty.
 *
 *  Deletes the existing domain mapping on the specified site.
 *
 *  @param name Required. The name of the domain association to delete.
 *
 *  @return GTLRFirebaseHostingQuery_SitesDomainsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a domain mapping on the specified site.
 *
 *  Method: firebasehosting.sites.domains.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 *    @c kGTLRAuthScopeFirebaseHostingFirebaseReadonly
 */
@interface GTLRFirebaseHostingQuery_SitesDomainsGet : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesDomainsGetWithname:]

/** Required. The name of the domain configuration to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseHosting_Domain.
 *
 *  Gets a domain mapping on the specified site.
 *
 *  @param name Required. The name of the domain configuration to get.
 *
 *  @return GTLRFirebaseHostingQuery_SitesDomainsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the domains for the specified site.
 *
 *  Method: firebasehosting.sites.domains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 *    @c kGTLRAuthScopeFirebaseHostingFirebaseReadonly
 */
@interface GTLRFirebaseHostingQuery_SitesDomainsList : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesDomainsListWithparent:]

/** The page size to return. Defaults to 50. */
@property(nonatomic, assign) NSInteger pageSize;

/** The next_page_token from a previous request, if provided. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent for which to list domains, in the format:
 *  <code>sites/<var>site-name</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseHosting_ListDomainsResponse.
 *
 *  Lists the domains for the specified site.
 *
 *  @param parent Required. The parent for which to list domains, in the format:
 *    <code>sites/<var>site-name</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesDomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified domain mapping, creating the mapping as if it does
 *  not exist.
 *
 *  Method: firebasehosting.sites.domains.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesDomainsUpdate : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesDomainsUpdateWithObject:name:]

/**
 *  Required. The name of the domain association to update or create, if an
 *  association doesn't already exist.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseHosting_Domain.
 *
 *  Updates the specified domain mapping, creating the mapping as if it does
 *  not exist.
 *
 *  @param object The @c GTLRFirebaseHosting_Domain to include in the query.
 *  @param name Required. The name of the domain association to update or
 *    create, if an
 *    association doesn't already exist.
 *
 *  @return GTLRFirebaseHostingQuery_SitesDomainsUpdate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_Domain *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the Hosting metadata for a specific site.
 *
 *  Method: firebasehosting.sites.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 *    @c kGTLRAuthScopeFirebaseHostingFirebaseReadonly
 */
@interface GTLRFirebaseHostingQuery_SitesGetConfig : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesGetConfigWithname:]

/**
 *  Required. The site for which to get the SiteConfig, in the format:
 *  <code>sites/<var>site-name</var>/config</code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseHosting_SiteConfig.
 *
 *  Gets the Hosting metadata for a specific site.
 *
 *  @param name Required. The site for which to get the SiteConfig, in the
 *    format:
 *    <code>sites/<var>site-name</var>/config</code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesGetConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new release which makes the content of the specified version
 *  actively display on the site.
 *
 *  Method: firebasehosting.sites.releases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesReleasesCreate : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesReleasesCreateWithObject:parent:]

/**
 *  The site that the release belongs to, in the format:
 *  <code>sites/<var>site-name</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The unique identifier for a version, in the format:
 *  <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *  The <var>site-name</var> in this version identifier must match the
 *  <var>site-name</var> in the `parent` parameter.
 *  <br>
 *  <br>This query parameter must be empty if the `type` field in the
 *  request body is `SITE_DISABLE`.
 */
@property(nonatomic, copy, nullable) NSString *versionName;

/**
 *  Fetches a @c GTLRFirebaseHosting_Release.
 *
 *  Creates a new release which makes the content of the specified version
 *  actively display on the site.
 *
 *  @param object The @c GTLRFirebaseHosting_Release to include in the query.
 *  @param parent The site that the release belongs to, in the format:
 *    <code>sites/<var>site-name</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesReleasesCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_Release *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists the releases that have been created on the specified site.
 *
 *  Method: firebasehosting.sites.releases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 *    @c kGTLRAuthScopeFirebaseHostingFirebaseReadonly
 */
@interface GTLRFirebaseHostingQuery_SitesReleasesList : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesReleasesListWithparent:]

/** The page size to return. Defaults to 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** The next_page_token from a previous request, if provided. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent for which to list files, in the format:
 *  <code>sites/<var>site-name</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseHosting_ListReleasesResponse.
 *
 *  Lists the releases that have been created on the specified site.
 *
 *  @param parent Required. The parent for which to list files, in the format:
 *    <code>sites/<var>site-name</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesReleasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the Hosting metadata for a specific site.
 *
 *  Method: firebasehosting.sites.updateConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesUpdateConfig : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesUpdateConfigWithObject:name:]

/**
 *  Required. The site for which to update the SiteConfig, in the format:
 *  <code>sites/<var>site-name</var>/config</code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A set of field names from your [site configuration](../sites.SiteConfig)
 *  that you want to update.
 *  <br>A field will be overwritten if, and only if, it's in the mask.
 *  <br>If a mask is not provided then a default mask of only
 *  [`max_versions`](../sites.SiteConfig.max_versions) will be used.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseHosting_SiteConfig.
 *
 *  Sets the Hosting metadata for a specific site.
 *
 *  @param object The @c GTLRFirebaseHosting_SiteConfig to include in the query.
 *  @param name Required. The site for which to update the SiteConfig, in the
 *    format:
 *    <code>sites/<var>site-name</var>/config</code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesUpdateConfig
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_SiteConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new version for a site.
 *
 *  Method: firebasehosting.sites.versions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesVersionsCreate : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesVersionsCreateWithObject:parent:]

/**
 *  Required. The parent to create the version for, in the format:
 *  <code>sites/<var>site-name</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The self-reported size of the version. This value is used for a pre-emptive
 *  quota check for legacy version uploads.
 */
@property(nonatomic, assign) long long sizeBytes;

/**
 *  A unique id for the new version. This is only specified for legacy version
 *  creations.
 */
@property(nonatomic, copy, nullable) NSString *versionId;

/**
 *  Fetches a @c GTLRFirebaseHosting_Version.
 *
 *  Creates a new version for a site.
 *
 *  @param object The @c GTLRFirebaseHosting_Version to include in the query.
 *  @param parent Required. The parent to create the version for, in the format:
 *    <code>sites/<var>site-name</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesVersionsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_Version *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified version.
 *
 *  Method: firebasehosting.sites.versions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesVersionsDelete : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesVersionsDeleteWithname:]

/**
 *  Required. The name of the version to be deleted, in the format:
 *  <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseHosting_Empty.
 *
 *  Deletes the specified version.
 *
 *  @param name Required. The name of the version to be deleted, in the format:
 *    <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesVersionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the remaining files to be uploaded for the specified version.
 *
 *  Method: firebasehosting.sites.versions.files.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 *    @c kGTLRAuthScopeFirebaseHostingFirebaseReadonly
 */
@interface GTLRFirebaseHostingQuery_SitesVersionsFilesList : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesVersionsFilesListWithparent:]

/** The page size to return. Defaults to 1000. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token from a previous request, if provided. This will be the
 *  encoded version of a firebase.hosting.proto.metadata.ListFilesPageToken.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent to list files for, in the format:
 *  <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The type of files in the version that should be listed.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHostingStatusStatusUnspecified Value
 *        "STATUS_UNSPECIFIED"
 *    @arg @c kGTLRFirebaseHostingStatusExpected Value "EXPECTED"
 *    @arg @c kGTLRFirebaseHostingStatusActive Value "ACTIVE"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Fetches a @c GTLRFirebaseHosting_ListVersionFilesResponse.
 *
 *  Lists the remaining files to be uploaded for the specified version.
 *
 *  @param parent Required. The parent to list files for, in the format:
 *    <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesVersionsFilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified metadata for a version. Note that this method will
 *  fail with `FAILED_PRECONDITION` in the event of an invalid state
 *  transition. The only valid transition for a version is currently from a
 *  `CREATED` status to a `FINALIZED` status.
 *  Use [`DeleteVersion`](../sites.versions/delete) to set the status of a
 *  version to `DELETED`.
 *
 *  Method: firebasehosting.sites.versions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesVersionsPatch : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesVersionsPatchWithObject:name:]

/**
 *  The unique identifier for a version, in the format:
 *  <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *  This name is provided in the response body when you call the
 *  [`CreateVersion`](../sites.versions/create) endpoint.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A set of field names from your [version](../sites.versions) that you want
 *  to update.
 *  <br>A field will be overwritten if, and only if, it's in the mask.
 *  <br>If a mask is not provided then a default mask of only
 *  [`status`](../sites.versions#Version.FIELDS.status) will be used.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseHosting_Version.
 *
 *  Updates the specified metadata for a version. Note that this method will
 *  fail with `FAILED_PRECONDITION` in the event of an invalid state
 *  transition. The only valid transition for a version is currently from a
 *  `CREATED` status to a `FINALIZED` status.
 *  Use [`DeleteVersion`](../sites.versions/delete) to set the status of a
 *  version to `DELETED`.
 *
 *  @param object The @c GTLRFirebaseHosting_Version to include in the query.
 *  @param name The unique identifier for a version, in the format:
 *    <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *    This name is provided in the response body when you call the
 *    [`CreateVersion`](../sites.versions/create) endpoint.
 *
 *  @return GTLRFirebaseHostingQuery_SitesVersionsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_Version *)object
                           name:(NSString *)name;

@end

/**
 *  Adds content files to a version.
 *
 *  Method: firebasehosting.sites.versions.populateFiles
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseHostingCloudPlatform
 *    @c kGTLRAuthScopeFirebaseHostingFirebase
 */
@interface GTLRFirebaseHostingQuery_SitesVersionsPopulateFiles : GTLRFirebaseHostingQuery
// Previous library name was
//   +[GTLQueryFirebaseHosting queryForSitesVersionsPopulateFilesWithObject:parent:]

/**
 *  Required. The version to add files to, in the format:
 *  <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseHosting_PopulateVersionFilesResponse.
 *
 *  Adds content files to a version.
 *
 *  @param object The @c GTLRFirebaseHosting_PopulateVersionFilesRequest to
 *    include in the query.
 *  @param parent Required. The version to add files to, in the format:
 *    <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *
 *  @return GTLRFirebaseHostingQuery_SitesVersionsPopulateFiles
 */
+ (instancetype)queryWithObject:(GTLRFirebaseHosting_PopulateVersionFilesRequest *)object
                         parent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
