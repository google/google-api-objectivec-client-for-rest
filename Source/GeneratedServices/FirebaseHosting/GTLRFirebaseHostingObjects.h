// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Hosting API (firebasehosting/v1beta1)
// Description:
//   The Firebase Hosting REST API enables programmatic and customizable
//   deployments to your Firebase-hosted sites. Use this REST API to deploy new
//   or updated hosting configurations and content files.
// Documentation:
//   https://firebase.google.com/docs/hosting/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseHosting_ActingUser;
@class GTLRFirebaseHosting_CertDnsChallenge;
@class GTLRFirebaseHosting_CertHttpChallenge;
@class GTLRFirebaseHosting_Domain;
@class GTLRFirebaseHosting_DomainProvisioning;
@class GTLRFirebaseHosting_DomainRedirect;
@class GTLRFirebaseHosting_Header;
@class GTLRFirebaseHosting_Header_Headers;
@class GTLRFirebaseHosting_PopulateVersionFilesRequest_Files;
@class GTLRFirebaseHosting_Redirect;
@class GTLRFirebaseHosting_Release;
@class GTLRFirebaseHosting_Rewrite;
@class GTLRFirebaseHosting_ServingConfig;
@class GTLRFirebaseHosting_Version;
@class GTLRFirebaseHosting_Version_Labels;
@class GTLRFirebaseHosting_VersionFile;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_Domain.status

/**
 *  The domain association is active and no additional action is required.
 *
 *  Value: "DOMAIN_ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Domain_Status_DomainActive;
/**
 *  An operation is in progress on the domain association and no further
 *  operations can be performed until it is complete.
 *
 *  Value: "DOMAIN_CHANGE_PENDING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Domain_Status_DomainChangePending;
/**
 *  Unspecified domain association status.
 *
 *  Value: "DOMAIN_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Domain_Status_DomainStatusUnspecified;
/**
 *  The domain verification has been lost and the domain is in the grace period
 *  before being removed from the Firebase Hosting site.
 *
 *  Value: "DOMAIN_VERIFICATION_LOST"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Domain_Status_DomainVerificationLost;
/**
 *  The domain was previously verified in the legacy system. User must
 *  reverify the domain through the ownership service.
 *
 *  Value: "DOMAIN_VERIFICATION_REQUIRED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Domain_Status_DomainVerificationRequired;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_DomainProvisioning.certStatus

/**
 *  Certificate provisioned and deployed across the CDN.
 *
 *  Value: "CERT_ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertActive;
/**
 *  Certificate provisioning failed in a non-recoverable manner.
 *
 *  Value: "CERT_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertError;
/**
 *  Waiting for certificate challenge to be met.
 *
 *  Value: "CERT_MISSING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertMissing;
/**
 *  Waiting for certificate challenge to be created.
 *
 *  Value: "CERT_PENDING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertPending;
/**
 *  Certificate challenge met; attempting to acquire/propagate certificate.
 *
 *  Value: "CERT_PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertProcessing;
/**
 *  Certificate obtained; propagating to the CDN.
 *
 *  Value: "CERT_PROPAGATING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertPropagating;
/**
 *  Unspecified certificate provisioning status.
 *
 *  Value: "CERT_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_DomainProvisioning.dnsStatus

/**
 *  The domain has at least one of the required DNS records, and it has at
 *  least one extra (non-required) DNS record.
 *
 *  Value: "DNS_EXTRANEOUS_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsExtraneousMatch;
/**
 *  All required DNS records were detected. No extra (non-required) DNS records
 *  were detected.
 *
 *  Value: "DNS_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsMatch;
/**
 *  None of the required DNS records have been detected on the domain.
 *
 *  Value: "DNS_MISSING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsMissing;
/**
 *  Some of the required DNS records were detected, but not all of them. No
 *  extra (non-required) DNS records were detected.
 *
 *  Value: "DNS_PARTIAL_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsPartialMatch;
/**
 *  No DNS records have been specified for this domain yet.
 *
 *  Value: "DNS_PENDING"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsPending;
/**
 *  Unspecified DNS status.
 *
 *  Value: "DNS_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_DomainRedirect.type

/**
 *  The redirect will respond with an HTTP status code of
 *  `301 Moved Permanently`.
 *
 *  Value: "MOVED_PERMANENTLY"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainRedirect_Type_MovedPermanently;
/**
 *  The default redirect type; should not be intentionlly used.
 *
 *  Value: "REDIRECT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_DomainRedirect_Type_RedirectTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_Release.type

/**
 *  A version was uploaded to Firebase Hosting and released.
 *
 *  Value: "DEPLOY"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Release_Type_Deploy;
/**
 *  The release points back to a previously deployed version.
 *
 *  Value: "ROLLBACK"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Release_Type_Rollback;
/**
 *  The release prevents the site from serving content. Firebase Hosting acts
 *  as if the site never existed.
 *
 *  Value: "SITE_DISABLE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Release_Type_SiteDisable;
/**
 *  An unspecified type. Indicates that a version was released.
 *  <br>This is the default value when no other `type` is explicitly
 *  specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Release_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_ServingConfig.appAssociation

/**
 *  The app association files will be automattically created from the apps
 *  that exist in the Firebase project.
 *
 *  Value: "AUTO"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_ServingConfig_AppAssociation_Auto;
/**
 *  No special handling of the app association files will occur, these paths
 *  will result in a 404 unless caught with a Rewrite.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_ServingConfig_AppAssociation_None;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_ServingConfig.trailingSlashBehavior

/**
 *  Trailing slashes are _added_ to directory indexes as well as to any URL
 *  path not ending in a file extension.
 *
 *  Value: "ADD"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_Add;
/**
 *  Trailing slashes are _removed_ from directory indexes as well as from any
 *  URL path not ending in a file extension.
 *
 *  Value: "REMOVE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_Remove;
/**
 *  No behavior is specified.
 *  <br>Files are served at their exact location only, and trailing slashes
 *  are only added to directory indexes.
 *
 *  Value: "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_TrailingSlashBehaviorUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_Version.status

/**
 *  The version was not updated to `FINALIZED` within 12&nbsp;hours and was
 *  automatically deleted.
 *
 *  Value: "ABANDONED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_Abandoned;
/**
 *  The version has been created, and content is currently being added to the
 *  version.
 *
 *  Value: "CREATED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_Created;
/**
 *  The version has been deleted.
 *
 *  Value: "DELETED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_Deleted;
/**
 *  The version has fallen out of the site-configured retention window and its
 *  associated files in GCS have been/been scheduled for deletion.
 *
 *  Value: "EXPIRED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_Expired;
/**
 *  All content has been added to the version, and the version can no longer be
 *  changed.
 *
 *  Value: "FINALIZED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_Finalized;
/**
 *  The default status; should not be intentionally used.
 *
 *  Value: "VERSION_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_Version_Status_VersionStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseHosting_VersionFile.status

/**
 *  The file has already been uploaded to Firebase Hosting.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_VersionFile_Status_Active;
/**
 *  The file has been included in the version and is expected to be uploaded
 *  in the near future.
 *
 *  Value: "EXPECTED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_VersionFile_Status_Expected;
/**
 *  The default status; should not be intentionally used.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRFirebaseHosting_VersionFile_Status_StatusUnspecified;

/**
 *  Contains metadata about the user who performed an action, such as creating
 *  a release or finalizing a version.
 */
@interface GTLRFirebaseHosting_ActingUser : GTLRObject

/** The email address of the user when the user performed the action. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  A profile image URL for the user. May not be present if the user has
 *  changed their email address or deleted their account.
 */
@property(nonatomic, copy, nullable) NSString *imageUrl;

@end


/**
 *  Represents a DNS certificate challenge.
 */
@interface GTLRFirebaseHosting_CertDnsChallenge : GTLRObject

/** The domain name upon which the DNS challenge must be satisfied. */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  The value that must be present as a TXT record on the domain name to
 *  satisfy the challenge.
 */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Represents an HTTP certificate challenge.
 */
@interface GTLRFirebaseHosting_CertHttpChallenge : GTLRObject

/**
 *  The URL path on which to serve the specified token to satisfy the
 *  certificate challenge.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The token to serve at the specified URL path to satisfy the certificate
 *  challenge.
 */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  The intended behavior and status information of a domain.
 */
@interface GTLRFirebaseHosting_Domain : GTLRObject

/** Required. The domain name of the association. */
@property(nonatomic, copy, nullable) NSString *domainName;

/** If set, the domain should redirect with the provided parameters. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_DomainRedirect *domainRedirect;

/**
 *  Output only. Information about the provisioning of certificates and the
 *  health of the DNS resolution for the domain.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_DomainProvisioning *provisioning;

/** Required. The site name of the association. */
@property(nonatomic, copy, nullable) NSString *site;

/**
 *  Output only. Additional status of the domain association.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_Domain_Status_DomainActive The domain
 *        association is active and no additional action is required. (Value:
 *        "DOMAIN_ACTIVE")
 *    @arg @c kGTLRFirebaseHosting_Domain_Status_DomainChangePending An
 *        operation is in progress on the domain association and no further
 *        operations can be performed until it is complete. (Value:
 *        "DOMAIN_CHANGE_PENDING")
 *    @arg @c kGTLRFirebaseHosting_Domain_Status_DomainStatusUnspecified
 *        Unspecified domain association status. (Value:
 *        "DOMAIN_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseHosting_Domain_Status_DomainVerificationLost The
 *        domain verification has been lost and the domain is in the grace
 *        period
 *        before being removed from the Firebase Hosting site. (Value:
 *        "DOMAIN_VERIFICATION_LOST")
 *    @arg @c kGTLRFirebaseHosting_Domain_Status_DomainVerificationRequired The
 *        domain was previously verified in the legacy system. User must
 *        reverify the domain through the ownership service. (Value:
 *        "DOMAIN_VERIFICATION_REQUIRED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Output only. The time at which the domain was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The current certificate provisioning status information for a domain.
 */
@interface GTLRFirebaseHosting_DomainProvisioning : GTLRObject

/**
 *  The TXT records (for the certificate challenge) that were found at the last
 *  DNS fetch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certChallengeDiscoveredTxt;

/** The DNS challenge for generating a certificate. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_CertDnsChallenge *certChallengeDns;

/** The HTTP challenge for generating a certificate. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_CertHttpChallenge *certChallengeHttp;

/**
 *  The certificate provisioning status; updated when Firebase Hosting
 *  provisions an SSL certificate for the domain.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertActive
 *        Certificate provisioned and deployed across the CDN. (Value:
 *        "CERT_ACTIVE")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertError
 *        Certificate provisioning failed in a non-recoverable manner. (Value:
 *        "CERT_ERROR")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertMissing
 *        Waiting for certificate challenge to be met. (Value: "CERT_MISSING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertPending
 *        Waiting for certificate challenge to be created. (Value:
 *        "CERT_PENDING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertProcessing
 *        Certificate challenge met; attempting to acquire/propagate
 *        certificate. (Value: "CERT_PROCESSING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertPropagating
 *        Certificate obtained; propagating to the CDN. (Value:
 *        "CERT_PROPAGATING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_CertStatus_CertStatusUnspecified
 *        Unspecified certificate provisioning status. (Value:
 *        "CERT_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *certStatus;

/** The IPs found at the last DNS fetch. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *discoveredIps;

/** The time at which the last DNS fetch occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *dnsFetchTime;

/**
 *  The DNS record match status as of the last DNS fetch.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsExtraneousMatch
 *        The domain has at least one of the required DNS records, and it has at
 *        least one extra (non-required) DNS record. (Value:
 *        "DNS_EXTRANEOUS_MATCH")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsMatch All
 *        required DNS records were detected. No extra (non-required) DNS
 *        records
 *        were detected. (Value: "DNS_MATCH")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsMissing None
 *        of the required DNS records have been detected on the domain. (Value:
 *        "DNS_MISSING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsPartialMatch
 *        Some of the required DNS records were detected, but not all of them.
 *        No
 *        extra (non-required) DNS records were detected. (Value:
 *        "DNS_PARTIAL_MATCH")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsPending No
 *        DNS records have been specified for this domain yet. (Value:
 *        "DNS_PENDING")
 *    @arg @c kGTLRFirebaseHosting_DomainProvisioning_DnsStatus_DnsStatusUnspecified
 *        Unspecified DNS status. (Value: "DNS_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dnsStatus;

/** The list of IPs to which the domain is expected to resolve. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *expectedIps;

@end


/**
 *  Defines the behavior of a domain-level redirect. Domain redirects preserve
 *  the path of the redirect but replace the requested domain with the one
 *  specified in the redirect configuration.
 */
@interface GTLRFirebaseHosting_DomainRedirect : GTLRObject

/** Required. The domain name to redirect to. */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  Required. The redirect status code.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_DomainRedirect_Type_MovedPermanently The
 *        redirect will respond with an HTTP status code of
 *        `301 Moved Permanently`. (Value: "MOVED_PERMANENTLY")
 *    @arg @c kGTLRFirebaseHosting_DomainRedirect_Type_RedirectTypeUnspecified
 *        The default redirect type; should not be intentionlly used. (Value:
 *        "REDIRECT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRFirebaseHosting_Empty : GTLRObject
@end


/**
 *  A [`header`](/docs/hosting/full-config#headers) defines custom headers to
 *  add to a response should the request URL path match the pattern.
 */
@interface GTLRFirebaseHosting_Header : GTLRObject

/**
 *  Required. The user-supplied
 *  [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match
 *  against the request URL path.
 */
@property(nonatomic, copy, nullable) NSString *glob;

/** Required. The additional headers to add to the response. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_Header_Headers *headers;

@end


/**
 *  Required. The additional headers to add to the response.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseHosting_Header_Headers : GTLRObject
@end


/**
 *  GTLRFirebaseHosting_ListDomainsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "domains" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseHosting_ListDomainsResponse : GTLRCollectionObject

/**
 *  The list of domains, if any exist.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_Domain *> *domains;

/** The pagination token, if more results exist. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRFirebaseHosting_ListReleasesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseHosting_ListReleasesResponse : GTLRCollectionObject

/**
 *  If there are additional releases remaining beyond the ones in this
 *  response, then supply this token in the next
 *  [`list`](../sites.versions.files/list) call to continue with the next set
 *  of releases.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of hashes of files that still need to be uploaded, if any exist.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_Release *> *releases;

@end


/**
 *  GTLRFirebaseHosting_ListVersionFilesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "files" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseHosting_ListVersionFilesResponse : GTLRCollectionObject

/**
 *  The list path/hashes in the specified version.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_VersionFile *> *files;

/** The pagination token, if more results exist. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRFirebaseHosting_PopulateVersionFilesRequest
 */
@interface GTLRFirebaseHosting_PopulateVersionFilesRequest : GTLRObject

/**
 *  A set of file paths to the hashes corresponding to assets that should be
 *  added to the version. Note that a file path to an empty hash will remove
 *  the path from the version. Calculate a hash by Gzipping the file then
 *  taking the SHA256 hash of the newly compressed file.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_PopulateVersionFilesRequest_Files *files;

@end


/**
 *  A set of file paths to the hashes corresponding to assets that should be
 *  added to the version. Note that a file path to an empty hash will remove
 *  the path from the version. Calculate a hash by Gzipping the file then
 *  taking the SHA256 hash of the newly compressed file.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseHosting_PopulateVersionFilesRequest_Files : GTLRObject
@end


/**
 *  GTLRFirebaseHosting_PopulateVersionFilesResponse
 */
@interface GTLRFirebaseHosting_PopulateVersionFilesResponse : GTLRObject

/**
 *  The content hashes of the specified files that need to be uploaded to the
 *  specified endpoint.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *uploadRequiredHashes;

/**
 *  The URL to which the files should be uploaded, in the format:
 *  <br>"https://upload-firebasehosting.googleapis.com/upload/sites/<var>site-name</var>/versions/<var>versionID</var>/files".
 *  <br>Perform a multipart `POST` of the Gzipped file contents to the URL
 *  using a forward slash and the hash of the file appended to the end.
 */
@property(nonatomic, copy, nullable) NSString *uploadUrl;

@end


/**
 *  A [`redirect`](/docs/hosting/full-config#redirects) represents the
 *  configuration for returning an HTTP redirect response given a matching
 *  request URL path.
 */
@interface GTLRFirebaseHosting_Redirect : GTLRObject

/**
 *  Required. The user-supplied
 *  [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match
 *  against the request URL path.
 */
@property(nonatomic, copy, nullable) NSString *glob;

/**
 *  Required. The value to put in the HTTP location header of the response.
 *  <br>The location can contain capture group values from the pattern using
 *  a `:` prefix to identify the segment and an optional `*` to capture the
 *  rest of the URL.
 *  For example:
 *  <code>"glob": "/:capture*",
 *  <br>"statusCode": 301,
 *  <br>"location": "https://example.com/foo/:capture"</code>
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Required. The status HTTP code to return in the response. It must be a
 *  valid 3xx status code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statusCode;

@end


/**
 *  A `Release` is a particular
 *  [collection of configurations and files](sites.versions)
 *  that is set to be public at a particular time.
 */
@interface GTLRFirebaseHosting_Release : GTLRObject

/**
 *  The deploy description when the release was created. The value can be up to
 *  512&nbsp;characters.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Output only. The unique identifier for the release, in the format:
 *  <code>sites/<var>site-name</var>/releases/<var>releaseID</var></code>
 *  This name is provided in the response body when you call the
 *  [`CreateRelease`](sites.releases/create) endpoint.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The time at which the version is set to be public. */
@property(nonatomic, strong, nullable) GTLRDateTime *releaseTime;

/** Output only. Identifies the user who created the release. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_ActingUser *releaseUser;

/**
 *  Explains the reason for the release.
 *  <br>Specify a value for this field only when creating a `SITE_DISABLE`
 *  type release.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_Release_Type_Deploy A version was uploaded to
 *        Firebase Hosting and released. (Value: "DEPLOY")
 *    @arg @c kGTLRFirebaseHosting_Release_Type_Rollback The release points back
 *        to a previously deployed version. (Value: "ROLLBACK")
 *    @arg @c kGTLRFirebaseHosting_Release_Type_SiteDisable The release prevents
 *        the site from serving content. Firebase Hosting acts
 *        as if the site never existed. (Value: "SITE_DISABLE")
 *    @arg @c kGTLRFirebaseHosting_Release_Type_TypeUnspecified An unspecified
 *        type. Indicates that a version was released.
 *        <br>This is the default value when no other `type` is explicitly
 *        specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The configuration and content that was released. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_Version *version;

@end


/**
 *  A [`rewrite`](/docs/hosting/full-config#rewrites) represents an internal
 *  content rewrite on the version. If the pattern matches, the request will be
 *  handled as if it were to the destination path specified in the
 *  configuration.
 */
@interface GTLRFirebaseHosting_Rewrite : GTLRObject

/**
 *  The request will be forwarded to Firebase Dynamic Links.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dynamicLinks;

/**
 *  The function to proxy requests to. Must match the exported function
 *  name exactly.
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  Required. The user-supplied
 *  [glob pattern](/docs/hosting/full-config#glob_pattern_matching) to match
 *  against the request URL path.
 */
@property(nonatomic, copy, nullable) NSString *glob;

/** The URL path to rewrite the request to. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  The configuration for how incoming requests to a site should be routed and
 *  processed before serving content. The patterns are matched and applied
 *  according to a specific
 *  [priority order](/docs/hosting/full-config#hosting_priority_order).
 */
@interface GTLRFirebaseHosting_ServingConfig : GTLRObject

/**
 *  How to handle well known App Association files.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_ServingConfig_AppAssociation_Auto The app
 *        association files will be automattically created from the apps
 *        that exist in the Firebase project. (Value: "AUTO")
 *    @arg @c kGTLRFirebaseHosting_ServingConfig_AppAssociation_None No special
 *        handling of the app association files will occur, these paths
 *        will result in a 404 unless caught with a Rewrite. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *appAssociation;

/**
 *  Defines whether to drop the file extension from uploaded files.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cleanUrls;

/**
 *  A list of custom response headers that are added to the content if the
 *  request URL path matches the glob.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_Header *> *headers;

/**
 *  A list of globs that will cause the response to redirect to another
 *  location.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_Redirect *> *redirects;

/**
 *  A list of rewrites that will act as if the service were given the
 *  destination URL.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseHosting_Rewrite *> *rewrites;

/**
 *  Defines how to handle a trailing slash in the URL path.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_Add
 *        Trailing slashes are _added_ to directory indexes as well as to any
 *        URL
 *        path not ending in a file extension. (Value: "ADD")
 *    @arg @c kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_Remove
 *        Trailing slashes are _removed_ from directory indexes as well as from
 *        any
 *        URL path not ending in a file extension. (Value: "REMOVE")
 *    @arg @c kGTLRFirebaseHosting_ServingConfig_TrailingSlashBehavior_TrailingSlashBehaviorUnspecified
 *        No behavior is specified.
 *        <br>Files are served at their exact location only, and trailing
 *        slashes
 *        are only added to directory indexes. (Value:
 *        "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *trailingSlashBehavior;

@end


/**
 *  A `SiteConfig` contains metadata associated with a specific site that
 *  controls Firebase Hosting serving behavior
 */
@interface GTLRFirebaseHosting_SiteConfig : GTLRObject

/**
 *  The number of FINALIZED versions that will be held for a site before
 *  automatic deletion. When a new version is deployed, content for versions
 *  in storage in excess of this number will be deleted, and will no longer be
 *  billed for storage usage. Oldest versions will be deleted first; sites are
 *  created with an unlimited number of max_versions by default.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxVersions;

@end


/**
 *  A `Version` is the collection of configuration and
 *  [static files](sites.versions.files) that determine how a site is displayed.
 */
@interface GTLRFirebaseHosting_Version : GTLRObject

/**
 *  The configuration for the behavior of the site. This configuration exists
 *  in the [`firebase.json`](/docs/cli/#the_firebasejson_file) file.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_ServingConfig *config;

/** Output only. The time at which the version was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Identifies the user who created the version. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_ActingUser *createUser;

/** Output only. The time at which the version was `DELETED`. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** Output only. Identifies the user who `DELETED` the version. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_ActingUser *deleteUser;

/**
 *  Output only. The total number of files associated with the version.
 *  <br>This value is calculated after a version is `FINALIZED`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileCount;

/** Output only. The time at which the version was `FINALIZED`. */
@property(nonatomic, strong, nullable) GTLRDateTime *finalizeTime;

/** Output only. Identifies the user who `FINALIZED` the version. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_ActingUser *finalizeUser;

/** The labels used for extra metadata and/or filtering. */
@property(nonatomic, strong, nullable) GTLRFirebaseHosting_Version_Labels *labels;

/**
 *  The unique identifier for a version, in the format:
 *  <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
 *  This name is provided in the response body when you call the
 *  [`CreateVersion`](../sites.versions/create) endpoint.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The deploy status of a version.
 *  <br>
 *  <br>For a successful deploy, call the
 *  [`CreateVersion`](sites.versions/create) endpoint to make a new version
 *  (`CREATED` status),
 *  [upload all desired files](sites.versions/populateFiles) to the version,
 *  then [update](sites.versions/patch) the version to the `FINALIZED` status.
 *  <br>
 *  <br>Note that if you leave the version in the `CREATED` state for more
 *  than 12&nbsp;hours, the system will automatically mark the version as
 *  `ABANDONED`.
 *  <br>
 *  <br>You can also change the status of a version to `DELETED` by calling the
 *  [`DeleteVersion`](sites.versions/delete) endpoint.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_Version_Status_Abandoned The version was not
 *        updated to `FINALIZED` within 12&nbsp;hours and was
 *        automatically deleted. (Value: "ABANDONED")
 *    @arg @c kGTLRFirebaseHosting_Version_Status_Created The version has been
 *        created, and content is currently being added to the
 *        version. (Value: "CREATED")
 *    @arg @c kGTLRFirebaseHosting_Version_Status_Deleted The version has been
 *        deleted. (Value: "DELETED")
 *    @arg @c kGTLRFirebaseHosting_Version_Status_Expired The version has fallen
 *        out of the site-configured retention window and its
 *        associated files in GCS have been/been scheduled for deletion. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRFirebaseHosting_Version_Status_Finalized All content has been
 *        added to the version, and the version can no longer be
 *        changed. (Value: "FINALIZED")
 *    @arg @c kGTLRFirebaseHosting_Version_Status_VersionStatusUnspecified The
 *        default status; should not be intentionally used. (Value:
 *        "VERSION_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Output only. The total stored bytesize of the version.
 *  <br>This value is calculated after a version is `FINALIZED`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionBytes;

@end


/**
 *  The labels used for extra metadata and/or filtering.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseHosting_Version_Labels : GTLRObject
@end


/**
 *  A static content file that is part of a version.
 */
@interface GTLRFirebaseHosting_VersionFile : GTLRObject

/**
 *  The SHA256 content hash of the file.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/** The URI at which the file's content should display. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Output only. The current status of a particular file in the specified
 *  version.
 *  <br>The value will be either `pending upload` or `uploaded`.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseHosting_VersionFile_Status_Active The file has
 *        already been uploaded to Firebase Hosting. (Value: "ACTIVE")
 *    @arg @c kGTLRFirebaseHosting_VersionFile_Status_Expected The file has been
 *        included in the version and is expected to be uploaded
 *        in the near future. (Value: "EXPECTED")
 *    @arg @c kGTLRFirebaseHosting_VersionFile_Status_StatusUnspecified The
 *        default status; should not be intentionally used. (Value:
 *        "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
