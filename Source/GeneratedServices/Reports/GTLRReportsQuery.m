// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin Reports API (admin/reports_v1)
// Description:
//   Fetches reports for the administrators of G Suite customers about the
//   usage, collaboration, security, and risk for their users.
// Documentation:
//   https://developers.google.com/admin-sdk/reports/

#import "GTLRReportsQuery.h"

#import "GTLRReportsObjects.h"

@implementation GTLRReportsQuery

@dynamic fields;

@end

@implementation GTLRReportsQuery_ActivitiesList

@dynamic actorIpAddress, applicationName, customerId, endTime, eventName,
         filters, maxResults, orgUnitID, pageToken, startTime, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                 applicationName:(NSString *)applicationName {
  NSArray *pathParams = @[
    @"applicationName", @"userKey"
  ];
  NSString *pathURITemplate = @"activity/users/{userKey}/applications/{applicationName}";
  GTLRReportsQuery_ActivitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.applicationName = applicationName;
  query.expectedObjectClass = [GTLRReports_Activities class];
  query.loggingName = @"reports.activities.list";
  return query;
}

@end

@implementation GTLRReportsQuery_ActivitiesWatch

@dynamic actorIpAddress, applicationName, customerId, endTime, eventName,
         filters, maxResults, orgUnitID, pageToken, startTime, userKey;

+ (instancetype)queryWithObject:(GTLRReports_Channel *)object
                        userKey:(NSString *)userKey
                applicationName:(NSString *)applicationName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"applicationName", @"userKey"
  ];
  NSString *pathURITemplate = @"activity/users/{userKey}/applications/{applicationName}/watch";
  GTLRReportsQuery_ActivitiesWatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.applicationName = applicationName;
  query.expectedObjectClass = [GTLRReports_Channel class];
  query.loggingName = @"reports.activities.watch";
  return query;
}

@end

@implementation GTLRReportsQuery_ChannelsStop

+ (instancetype)queryWithObject:(GTLRReports_Channel *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"admin/reports_v1/channels/stop";
  GTLRReportsQuery_ChannelsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"admin.channels.stop";
  return query;
}

@end

@implementation GTLRReportsQuery_CustomerUsageReportsGet

@dynamic customerId, date, pageToken, parameters;

+ (instancetype)queryWithDate:(NSString *)date {
  NSArray *pathParams = @[ @"date" ];
  NSString *pathURITemplate = @"usage/dates/{date}";
  GTLRReportsQuery_CustomerUsageReportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.date = date;
  query.expectedObjectClass = [GTLRReports_UsageReports class];
  query.loggingName = @"reports.customerUsageReports.get";
  return query;
}

@end

@implementation GTLRReportsQuery_EntityUsageReportsGet

@dynamic customerId, date, entityKey, entityType, filters, maxResults,
         pageToken, parameters;

+ (instancetype)queryWithEntityType:(NSString *)entityType
                          entityKey:(NSString *)entityKey
                               date:(NSString *)date {
  NSArray *pathParams = @[
    @"date", @"entityKey", @"entityType"
  ];
  NSString *pathURITemplate = @"usage/{entityType}/{entityKey}/dates/{date}";
  GTLRReportsQuery_EntityUsageReportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.entityType = entityType;
  query.entityKey = entityKey;
  query.date = date;
  query.expectedObjectClass = [GTLRReports_UsageReports class];
  query.loggingName = @"reports.entityUsageReports.get";
  return query;
}

@end

@implementation GTLRReportsQuery_UserUsageReportGet

@dynamic customerId, date, filters, maxResults, orgUnitID, pageToken,
         parameters, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                            date:(NSString *)date {
  NSArray *pathParams = @[
    @"date", @"userKey"
  ];
  NSString *pathURITemplate = @"usage/users/{userKey}/dates/{date}";
  GTLRReportsQuery_UserUsageReportGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.date = date;
  query.expectedObjectClass = [GTLRReports_UsageReports class];
  query.loggingName = @"reports.userUsageReport.get";
  return query;
}

@end
