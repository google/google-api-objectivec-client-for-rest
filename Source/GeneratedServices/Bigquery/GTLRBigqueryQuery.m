// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Documentation:
//   https://cloud.google.com/bigquery/

#import "GTLRBigqueryQuery.h"

#import "GTLRBigqueryObjects.h"

// ----------------------------------------------------------------------------
// Constants

// projection
NSString * const kGTLRBigqueryProjectionFull    = @"full";
NSString * const kGTLRBigqueryProjectionMinimal = @"minimal";

// stateFilter
NSString * const kGTLRBigqueryStateFilterDone    = @"done";
NSString * const kGTLRBigqueryStateFilterPending = @"pending";
NSString * const kGTLRBigqueryStateFilterRunning = @"running";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRBigqueryQuery

@dynamic fields;

@end

@implementation GTLRBigqueryQuery_DatasetsDelete

@dynamic datasetId, deleteContents, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}";
  GTLRBigqueryQuery_DatasetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.loggingName = @"bigquery.datasets.delete";
  return query;
}

@end

@implementation GTLRBigqueryQuery_DatasetsGet

@dynamic datasetId, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}";
  GTLRBigqueryQuery_DatasetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRBigquery_Dataset class];
  query.loggingName = @"bigquery.datasets.get";
  return query;
}

@end

@implementation GTLRBigqueryQuery_DatasetsInsert

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_Dataset *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets";
  GTLRBigqueryQuery_DatasetsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRBigquery_Dataset class];
  query.loggingName = @"bigquery.datasets.insert";
  return query;
}

@end

@implementation GTLRBigqueryQuery_DatasetsList

@dynamic all, filter, maxResults, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets";
  GTLRBigqueryQuery_DatasetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRBigquery_DatasetList class];
  query.loggingName = @"bigquery.datasets.list";
  return query;
}

@end

@implementation GTLRBigqueryQuery_DatasetsPatch

@dynamic datasetId, projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_Dataset *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}";
  GTLRBigqueryQuery_DatasetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRBigquery_Dataset class];
  query.loggingName = @"bigquery.datasets.patch";
  return query;
}

@end

@implementation GTLRBigqueryQuery_DatasetsUpdate

@dynamic datasetId, projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_Dataset *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}";
  GTLRBigqueryQuery_DatasetsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRBigquery_Dataset class];
  query.loggingName = @"bigquery.datasets.update";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsCancel

@dynamic jobId, location, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/jobs/{jobId}/cancel";
  GTLRBigqueryQuery_JobsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRBigquery_JobCancelResponse class];
  query.loggingName = @"bigquery.jobs.cancel";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsGet

@dynamic jobId, location, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/jobs/{jobId}";
  GTLRBigqueryQuery_JobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRBigquery_Job class];
  query.loggingName = @"bigquery.jobs.get";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsGetQueryResults

@dynamic jobId, location, maxResults, pageToken, projectId, startIndex,
         timeoutMs;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/queries/{jobId}";
  GTLRBigqueryQuery_JobsGetQueryResults *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRBigquery_GetQueryResultsResponse class];
  query.loggingName = @"bigquery.jobs.getQueryResults";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsInsert

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_Job *)object
                      projectId:(NSString *)projectId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/jobs";
  GTLRBigqueryQuery_JobsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRBigquery_Job class];
  query.loggingName = @"bigquery.jobs.insert";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsList

@dynamic allUsers, maxCreationTime, maxResults, minCreationTime, pageToken,
         projectId, projection, stateFilter;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stateFilter" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/jobs";
  GTLRBigqueryQuery_JobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRBigquery_JobList class];
  query.loggingName = @"bigquery.jobs.list";
  return query;
}

@end

@implementation GTLRBigqueryQuery_JobsQuery

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_QueryRequest *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/queries";
  GTLRBigqueryQuery_JobsQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRBigquery_QueryResponse class];
  query.loggingName = @"bigquery.jobs.query";
  return query;
}

@end

@implementation GTLRBigqueryQuery_ProjectsGetServiceAccount

@dynamic projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"projects/{projectId}/serviceAccount";
  GTLRBigqueryQuery_ProjectsGetServiceAccount *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRBigquery_GetServiceAccountResponse class];
  query.loggingName = @"bigquery.projects.getServiceAccount";
  return query;
}

@end

@implementation GTLRBigqueryQuery_ProjectsList

@dynamic maxResults, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"projects";
  GTLRBigqueryQuery_ProjectsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRBigquery_ProjectList class];
  query.loggingName = @"bigquery.projects.list";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TabledataInsertAll

@dynamic datasetId, projectId, tableId;

+ (instancetype)queryWithObject:(GTLRBigquery_TableDataInsertAllRequest *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll";
  GTLRBigqueryQuery_TabledataInsertAll *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRBigquery_TableDataInsertAllResponse class];
  query.loggingName = @"bigquery.tabledata.insertAll";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TabledataList

@dynamic datasetId, maxResults, pageToken, projectId, selectedFields,
         startIndex, tableId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId
                           tableId:(NSString *)tableId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data";
  GTLRBigqueryQuery_TabledataList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRBigquery_TableDataList class];
  query.loggingName = @"bigquery.tabledata.list";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesDelete

@dynamic datasetId, projectId, tableId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId
                           tableId:(NSString *)tableId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}";
  GTLRBigqueryQuery_TablesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.loggingName = @"bigquery.tables.delete";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesGet

@dynamic datasetId, projectId, selectedFields, tableId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId
                           tableId:(NSString *)tableId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}";
  GTLRBigqueryQuery_TablesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRBigquery_Table class];
  query.loggingName = @"bigquery.tables.get";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesInsert

@dynamic datasetId, projectId;

+ (instancetype)queryWithObject:(GTLRBigquery_Table *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables";
  GTLRBigqueryQuery_TablesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRBigquery_Table class];
  query.loggingName = @"bigquery.tables.insert";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesList

@dynamic datasetId, maxResults, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         datasetId:(NSString *)datasetId {
  NSArray *pathParams = @[
    @"datasetId", @"projectId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables";
  GTLRBigqueryQuery_TablesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRBigquery_TableList class];
  query.loggingName = @"bigquery.tables.list";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesPatch

@dynamic datasetId, projectId, tableId;

+ (instancetype)queryWithObject:(GTLRBigquery_Table *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}";
  GTLRBigqueryQuery_TablesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRBigquery_Table class];
  query.loggingName = @"bigquery.tables.patch";
  return query;
}

@end

@implementation GTLRBigqueryQuery_TablesUpdate

@dynamic datasetId, projectId, tableId;

+ (instancetype)queryWithObject:(GTLRBigquery_Table *)object
                      projectId:(NSString *)projectId
                      datasetId:(NSString *)datasetId
                        tableId:(NSString *)tableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"datasetId", @"projectId", @"tableId"
  ];
  NSString *pathURITemplate = @"projects/{projectId}/datasets/{datasetId}/tables/{tableId}";
  GTLRBigqueryQuery_TablesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.datasetId = datasetId;
  query.tableId = tableId;
  query.expectedObjectClass = [GTLRBigquery_Table class];
  query.loggingName = @"bigquery.tables.update";
  return query;
}

@end
