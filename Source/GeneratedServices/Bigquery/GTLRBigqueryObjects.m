// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Documentation:
//   https://cloud.google.com/bigquery/

#import "GTLRBigqueryObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRBigquery_Argument.argumentKind
NSString * const kGTLRBigquery_Argument_ArgumentKind_AnyType   = @"ANY_TYPE";
NSString * const kGTLRBigquery_Argument_ArgumentKind_ArgumentKindUnspecified = @"ARGUMENT_KIND_UNSPECIFIED";
NSString * const kGTLRBigquery_Argument_ArgumentKind_FixedType = @"FIXED_TYPE";

// GTLRBigquery_Argument.mode
NSString * const kGTLRBigquery_Argument_Mode_In              = @"IN";
NSString * const kGTLRBigquery_Argument_Mode_Inout           = @"INOUT";
NSString * const kGTLRBigquery_Argument_Mode_ModeUnspecified = @"MODE_UNSPECIFIED";
NSString * const kGTLRBigquery_Argument_Mode_Out             = @"OUT";

// GTLRBigquery_ArimaModelInfo.seasonalPeriods
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Daily = @"DAILY";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Monthly = @"MONTHLY";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_NoSeasonality = @"NO_SEASONALITY";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Quarterly = @"QUARTERLY";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_SeasonalPeriodTypeUnspecified = @"SEASONAL_PERIOD_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Weekly = @"WEEKLY";
NSString * const kGTLRBigquery_ArimaModelInfo_SeasonalPeriods_Yearly = @"YEARLY";

// GTLRBigquery_ArimaResult.seasonalPeriods
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Daily = @"DAILY";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Monthly = @"MONTHLY";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_NoSeasonality = @"NO_SEASONALITY";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Quarterly = @"QUARTERLY";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_SeasonalPeriodTypeUnspecified = @"SEASONAL_PERIOD_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Weekly = @"WEEKLY";
NSString * const kGTLRBigquery_ArimaResult_SeasonalPeriods_Yearly = @"YEARLY";

// GTLRBigquery_AuditLogConfig.logType
NSString * const kGTLRBigquery_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRBigquery_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRBigquery_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRBigquery_Model.modelType
NSString * const kGTLRBigquery_Model_ModelType_AutomlClassifier = @"AUTOML_CLASSIFIER";
NSString * const kGTLRBigquery_Model_ModelType_AutomlRegressor = @"AUTOML_REGRESSOR";
NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeClassifier = @"BOOSTED_TREE_CLASSIFIER";
NSString * const kGTLRBigquery_Model_ModelType_BoostedTreeRegressor = @"BOOSTED_TREE_REGRESSOR";
NSString * const kGTLRBigquery_Model_ModelType_DnnClassifier   = @"DNN_CLASSIFIER";
NSString * const kGTLRBigquery_Model_ModelType_DnnRegressor    = @"DNN_REGRESSOR";
NSString * const kGTLRBigquery_Model_ModelType_Kmeans          = @"KMEANS";
NSString * const kGTLRBigquery_Model_ModelType_LinearRegression = @"LINEAR_REGRESSION";
NSString * const kGTLRBigquery_Model_ModelType_LogisticRegression = @"LOGISTIC_REGRESSION";
NSString * const kGTLRBigquery_Model_ModelType_MatrixFactorization = @"MATRIX_FACTORIZATION";
NSString * const kGTLRBigquery_Model_ModelType_ModelTypeUnspecified = @"MODEL_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_Model_ModelType_Tensorflow      = @"TENSORFLOW";

// GTLRBigquery_Routine.determinismLevel
NSString * const kGTLRBigquery_Routine_DeterminismLevel_DeterminismLevelUnspecified = @"DETERMINISM_LEVEL_UNSPECIFIED";
NSString * const kGTLRBigquery_Routine_DeterminismLevel_Deterministic = @"DETERMINISTIC";
NSString * const kGTLRBigquery_Routine_DeterminismLevel_NotDeterministic = @"NOT_DETERMINISTIC";

// GTLRBigquery_Routine.language
NSString * const kGTLRBigquery_Routine_Language_Javascript     = @"JAVASCRIPT";
NSString * const kGTLRBigquery_Routine_Language_LanguageUnspecified = @"LANGUAGE_UNSPECIFIED";
NSString * const kGTLRBigquery_Routine_Language_Sql            = @"SQL";

// GTLRBigquery_Routine.routineType
NSString * const kGTLRBigquery_Routine_RoutineType_Procedure   = @"PROCEDURE";
NSString * const kGTLRBigquery_Routine_RoutineType_RoutineTypeUnspecified = @"ROUTINE_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_Routine_RoutineType_ScalarFunction = @"SCALAR_FUNCTION";

// GTLRBigquery_StandardSqlDataType.typeKind
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Array = @"ARRAY";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bignumeric = @"BIGNUMERIC";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bool = @"BOOL";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Bytes = @"BYTES";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Date = @"DATE";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Datetime = @"DATETIME";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Float64 = @"FLOAT64";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Geography = @"GEOGRAPHY";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Int64 = @"INT64";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Numeric = @"NUMERIC";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_String = @"STRING";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Struct = @"STRUCT";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Time = @"TIME";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_Timestamp = @"TIMESTAMP";
NSString * const kGTLRBigquery_StandardSqlDataType_TypeKind_TypeKindUnspecified = @"TYPE_KIND_UNSPECIFIED";

// GTLRBigquery_TrainingOptions.dataSplitMethod
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_AutoSplit = @"AUTO_SPLIT";
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Custom = @"CUSTOM";
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_DataSplitMethodUnspecified = @"DATA_SPLIT_METHOD_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_NoSplit = @"NO_SPLIT";
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Random = @"RANDOM";
NSString * const kGTLRBigquery_TrainingOptions_DataSplitMethod_Sequential = @"SEQUENTIAL";

// GTLRBigquery_TrainingOptions.distanceType
NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Cosine = @"COSINE";
NSString * const kGTLRBigquery_TrainingOptions_DistanceType_DistanceTypeUnspecified = @"DISTANCE_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_DistanceType_Euclidean = @"EUCLIDEAN";

// GTLRBigquery_TrainingOptions.feedbackType
NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Explicit = @"EXPLICIT";
NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_FeedbackTypeUnspecified = @"FEEDBACK_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_FeedbackType_Implicit = @"IMPLICIT";

// GTLRBigquery_TrainingOptions.kmeansInitializationMethod
NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Custom = @"CUSTOM";
NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansInitializationMethodUnspecified = @"KMEANS_INITIALIZATION_METHOD_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_KmeansPlusPlus = @"KMEANS_PLUS_PLUS";
NSString * const kGTLRBigquery_TrainingOptions_KmeansInitializationMethod_Random = @"RANDOM";

// GTLRBigquery_TrainingOptions.learnRateStrategy
NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_Constant = @"CONSTANT";
NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LearnRateStrategyUnspecified = @"LEARN_RATE_STRATEGY_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_LearnRateStrategy_LineSearch = @"LINE_SEARCH";

// GTLRBigquery_TrainingOptions.lossType
NSString * const kGTLRBigquery_TrainingOptions_LossType_LossTypeUnspecified = @"LOSS_TYPE_UNSPECIFIED";
NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanLogLoss = @"MEAN_LOG_LOSS";
NSString * const kGTLRBigquery_TrainingOptions_LossType_MeanSquaredLoss = @"MEAN_SQUARED_LOSS";

// GTLRBigquery_TrainingOptions.optimizationStrategy
NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_BatchGradientDescent = @"BATCH_GRADIENT_DESCENT";
NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_NormalEquation = @"NORMAL_EQUATION";
NSString * const kGTLRBigquery_TrainingOptions_OptimizationStrategy_OptimizationStrategyUnspecified = @"OPTIMIZATION_STRATEGY_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRBigquery_AggregateClassificationMetrics
//

@implementation GTLRBigquery_AggregateClassificationMetrics
@dynamic accuracy, f1Score, logLoss, precision, recall, rocAuc, threshold;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Argument
//

@implementation GTLRBigquery_Argument
@dynamic argumentKind, dataType, mode, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ArimaCoefficients
//

@implementation GTLRBigquery_ArimaCoefficients
@dynamic autoRegressiveCoefficients, interceptCoefficient,
         movingAverageCoefficients;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"autoRegressiveCoefficients" : [NSNumber class],
    @"movingAverageCoefficients" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ArimaFittingMetrics
//

@implementation GTLRBigquery_ArimaFittingMetrics
@dynamic aic, logLikelihood, variance;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ArimaModelInfo
//

@implementation GTLRBigquery_ArimaModelInfo
@dynamic arimaCoefficients, arimaFittingMetrics, hasDrift, nonSeasonalOrder,
         seasonalPeriods, timeSeriesId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"seasonalPeriods" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ArimaOrder
//

@implementation GTLRBigquery_ArimaOrder
@dynamic d, p, q;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ArimaResult
//

@implementation GTLRBigquery_ArimaResult
@dynamic arimaModelInfo, seasonalPeriods;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"arimaModelInfo" : [GTLRBigquery_ArimaModelInfo class],
    @"seasonalPeriods" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_AuditConfig
//

@implementation GTLRBigquery_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRBigquery_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_AuditLogConfig
//

@implementation GTLRBigquery_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BigtableColumn
//

@implementation GTLRBigquery_BigtableColumn
@dynamic encoding, fieldName, onlyReadLatest, qualifierEncoded, qualifierString,
         type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BigtableColumnFamily
//

@implementation GTLRBigquery_BigtableColumnFamily
@dynamic columns, encoding, familyId, onlyReadLatest, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [GTLRBigquery_BigtableColumn class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BigtableOptions
//

@implementation GTLRBigquery_BigtableOptions
@dynamic columnFamilies, ignoreUnspecifiedColumnFamilies, readRowkeyAsString;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columnFamilies" : [GTLRBigquery_BigtableColumnFamily class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BinaryClassificationMetrics
//

@implementation GTLRBigquery_BinaryClassificationMetrics
@dynamic aggregateClassificationMetrics, binaryConfusionMatrixList,
         negativeLabel, positiveLabel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"binaryConfusionMatrixList" : [GTLRBigquery_BinaryConfusionMatrix class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BinaryConfusionMatrix
//

@implementation GTLRBigquery_BinaryConfusionMatrix
@dynamic accuracy, f1Score, falseNegatives, falsePositives,
         positiveClassThreshold, precision, recall, trueNegatives,
         truePositives;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Binding
//

@implementation GTLRBigquery_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BqmlIterationResult
//

@implementation GTLRBigquery_BqmlIterationResult
@dynamic durationMs, evalLoss, index, learnRate, trainingLoss;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BqmlTrainingRun
//

@implementation GTLRBigquery_BqmlTrainingRun
@dynamic iterationResults, startTime, state, trainingOptions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"iterationResults" : [GTLRBigquery_BqmlIterationResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_BqmlTrainingRun_TrainingOptions
//

@implementation GTLRBigquery_BqmlTrainingRun_TrainingOptions
@dynamic earlyStop, l1Reg, l2Reg, learnRate, learnRateStrategy,
         lineSearchInitLearnRate, maxIteration, minRelProgress, warmStart;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_CategoricalValue
//

@implementation GTLRBigquery_CategoricalValue
@dynamic categoryCounts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"categoryCounts" : [GTLRBigquery_CategoryCount class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_CategoryCount
//

@implementation GTLRBigquery_CategoryCount
@dynamic category, count;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Cluster
//

@implementation GTLRBigquery_Cluster
@dynamic centroidId, count, featureValues;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"featureValues" : [GTLRBigquery_FeatureValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ClusterInfo
//

@implementation GTLRBigquery_ClusterInfo
@dynamic centroidId, clusterRadius, clusterSize;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Clustering
//

@implementation GTLRBigquery_Clustering
@dynamic fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ClusteringMetrics
//

@implementation GTLRBigquery_ClusteringMetrics
@dynamic clusters, daviesBouldinIndex, meanSquaredDistance;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusters" : [GTLRBigquery_Cluster class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ConfusionMatrix
//

@implementation GTLRBigquery_ConfusionMatrix
@dynamic confidenceThreshold, rows;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRBigquery_Row class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ConnectionProperty
//

@implementation GTLRBigquery_ConnectionProperty
@dynamic key, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_CsvOptions
//

@implementation GTLRBigquery_CsvOptions
@dynamic allowJaggedRows, allowQuotedNewlines, encoding, fieldDelimiter, quote,
         skipLeadingRows;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Dataset
//

@implementation GTLRBigquery_Dataset
@dynamic access, creationTime, datasetReference, defaultEncryptionConfiguration,
         defaultPartitionExpirationMs, defaultTableExpirationMs,
         descriptionProperty, ETag, friendlyName, identifier, kind, labels,
         lastModifiedTime, location, selfLink;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"access" : [GTLRBigquery_Dataset_Access_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Dataset_Access_Item
//

@implementation GTLRBigquery_Dataset_Access_Item
@dynamic domain, groupByEmail, iamMember, role, specialGroup, userByEmail, view;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Dataset_Labels
//

@implementation GTLRBigquery_Dataset_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DatasetList
//

@implementation GTLRBigquery_DatasetList
@dynamic datasets, ETag, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"datasets" : [GTLRBigquery_DatasetList_Datasets_Item class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"datasets";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DatasetList_Datasets_Item
//

@implementation GTLRBigquery_DatasetList_Datasets_Item
@dynamic datasetReference, friendlyName, identifier, kind, labels, location;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DatasetList_Datasets_Item_Labels
//

@implementation GTLRBigquery_DatasetList_Datasets_Item_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DatasetReference
//

@implementation GTLRBigquery_DatasetReference
@dynamic datasetId, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DataSplitResult
//

@implementation GTLRBigquery_DataSplitResult
@dynamic evaluationTable, trainingTable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DestinationTableProperties
//

@implementation GTLRBigquery_DestinationTableProperties
@dynamic descriptionProperty, friendlyName, labels;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_DestinationTableProperties_Labels
//

@implementation GTLRBigquery_DestinationTableProperties_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_EncryptionConfiguration
//

@implementation GTLRBigquery_EncryptionConfiguration
@dynamic kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Entry
//

@implementation GTLRBigquery_Entry
@dynamic itemCount, predictedLabel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ErrorProto
//

@implementation GTLRBigquery_ErrorProto
@dynamic debugInfo, location, message, reason;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_EvaluationMetrics
//

@implementation GTLRBigquery_EvaluationMetrics
@dynamic binaryClassificationMetrics, clusteringMetrics,
         multiClassClassificationMetrics, rankingMetrics, regressionMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ExplainQueryStage
//

@implementation GTLRBigquery_ExplainQueryStage
@dynamic completedParallelInputs, computeMsAvg, computeMsMax, computeRatioAvg,
         computeRatioMax, endMs, identifier, inputStages, name, parallelInputs,
         readMsAvg, readMsMax, readRatioAvg, readRatioMax, recordsRead,
         recordsWritten, shuffleOutputBytes, shuffleOutputBytesSpilled, slotMs,
         startMs, status, steps, waitMsAvg, waitMsMax, waitRatioAvg,
         waitRatioMax, writeMsAvg, writeMsMax, writeRatioAvg, writeRatioMax;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputStages" : [NSNumber class],
    @"steps" : [GTLRBigquery_ExplainQueryStep class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ExplainQueryStep
//

@implementation GTLRBigquery_ExplainQueryStep
@dynamic kind, substeps;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"substeps" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Expr
//

@implementation GTLRBigquery_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ExternalDataConfiguration
//

@implementation GTLRBigquery_ExternalDataConfiguration
@dynamic autodetect, bigtableOptions, compression, connectionId, csvOptions,
         googleSheetsOptions, hivePartitioningOptions, ignoreUnknownValues,
         maxBadRecords, schema, sourceFormat, sourceUris;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_FeatureValue
//

@implementation GTLRBigquery_FeatureValue
@dynamic categoricalValue, featureColumn, numericalValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_GetIamPolicyRequest
//

@implementation GTLRBigquery_GetIamPolicyRequest
@dynamic options;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_GetPolicyOptions
//

@implementation GTLRBigquery_GetPolicyOptions
@dynamic requestedPolicyVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_GetQueryResultsResponse
//

@implementation GTLRBigquery_GetQueryResultsResponse
@dynamic cacheHit, errors, ETag, jobComplete, jobReference, kind,
         numDmlAffectedRows, pageToken, rows, schema, totalBytesProcessed,
         totalRows;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRBigquery_ErrorProto class],
    @"rows" : [GTLRBigquery_TableRow class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_GetServiceAccountResponse
//

@implementation GTLRBigquery_GetServiceAccountResponse
@dynamic email, kind;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_GoogleSheetsOptions
//

@implementation GTLRBigquery_GoogleSheetsOptions
@dynamic range, skipLeadingRows;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_HivePartitioningOptions
//

@implementation GTLRBigquery_HivePartitioningOptions
@dynamic mode, sourceUriPrefix;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_IterationResult
//

@implementation GTLRBigquery_IterationResult
@dynamic arimaResult, clusterInfos, durationMs, evalLoss, index, learnRate,
         trainingLoss;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusterInfos" : [GTLRBigquery_ClusterInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Job
//

@implementation GTLRBigquery_Job
@dynamic configuration, ETag, identifier, jobReference, kind, selfLink,
         statistics, status, userEmail;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id",
    @"userEmail" : @"user_email"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobCancelResponse
//

@implementation GTLRBigquery_JobCancelResponse
@dynamic job, kind;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfiguration
//

@implementation GTLRBigquery_JobConfiguration
@dynamic copyProperty, dryRun, extract, jobTimeoutMs, jobType, labels, load,
         query;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"copyProperty" : @"copy" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfiguration_Labels
//

@implementation GTLRBigquery_JobConfiguration_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfigurationExtract
//

@implementation GTLRBigquery_JobConfigurationExtract
@dynamic compression, destinationFormat, destinationUri, destinationUris,
         fieldDelimiter, printHeader, sourceModel, sourceTable,
         useAvroLogicalTypes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinationUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfigurationLoad
//

@implementation GTLRBigquery_JobConfigurationLoad
@dynamic allowJaggedRows, allowQuotedNewlines, autodetect, clustering,
         createDisposition, destinationEncryptionConfiguration,
         destinationTable, destinationTableProperties, encoding, fieldDelimiter,
         hivePartitioningOptions, ignoreUnknownValues, maxBadRecords,
         nullMarker, projectionFields, quote, rangePartitioning, schema,
         schemaInline, schemaInlineFormat, schemaUpdateOptions, skipLeadingRows,
         sourceFormat, sourceUris, timePartitioning, useAvroLogicalTypes,
         writeDisposition;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"projectionFields" : [NSString class],
    @"schemaUpdateOptions" : [NSString class],
    @"sourceUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfigurationQuery
//

@implementation GTLRBigquery_JobConfigurationQuery
@dynamic allowLargeResults, clustering, connectionProperties, createDisposition,
         defaultDataset, destinationEncryptionConfiguration, destinationTable,
         flattenResults, maximumBillingTier, maximumBytesBilled, parameterMode,
         preserveNulls, priority, query, queryParameters, rangePartitioning,
         schemaUpdateOptions, tableDefinitions, timePartitioning, useLegacySql,
         useQueryCache, userDefinedFunctionResources, writeDisposition;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectionProperties" : [GTLRBigquery_ConnectionProperty class],
    @"queryParameters" : [GTLRBigquery_QueryParameter class],
    @"schemaUpdateOptions" : [NSString class],
    @"userDefinedFunctionResources" : [GTLRBigquery_UserDefinedFunctionResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfigurationQuery_TableDefinitions
//

@implementation GTLRBigquery_JobConfigurationQuery_TableDefinitions

+ (Class)classForAdditionalProperties {
  return [GTLRBigquery_ExternalDataConfiguration class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobConfigurationTableCopy
//

@implementation GTLRBigquery_JobConfigurationTableCopy
@dynamic createDisposition, destinationEncryptionConfiguration,
         destinationExpirationTime, destinationTable, operationType,
         sourceTable, sourceTables, writeDisposition;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceTables" : [GTLRBigquery_TableReference class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobList
//

@implementation GTLRBigquery_JobList
@dynamic ETag, jobs, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRBigquery_JobList_Jobs_Item class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobList_Jobs_Item
//

@implementation GTLRBigquery_JobList_Jobs_Item
@dynamic configuration, errorResult, identifier, jobReference, kind, state,
         statistics, status, userEmail;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"identifier" : @"id",
    @"userEmail" : @"user_email"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobReference
//

@implementation GTLRBigquery_JobReference
@dynamic jobId, location, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics
//

@implementation GTLRBigquery_JobStatistics
@dynamic completionRatio, creationTime, endTime, extract, load, numChildJobs,
         parentJobId, query, quotaDeferments, reservationId, reservationUsage,
         rowLevelSecurityStatistics, scriptStatistics, startTime,
         totalBytesProcessed, totalSlotMs;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"reservationId" : @"reservation_id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"quotaDeferments" : [NSString class],
    @"reservationUsage" : [GTLRBigquery_JobStatistics_ReservationUsage_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics_ReservationUsage_Item
//

@implementation GTLRBigquery_JobStatistics_ReservationUsage_Item
@dynamic name, slotMs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics2
//

@implementation GTLRBigquery_JobStatistics2
@dynamic billingTier, cacheHit, ddlAffectedRowAccessPolicyCount,
         ddlOperationPerformed, ddlTargetRoutine, ddlTargetRowAccessPolicy,
         ddlTargetTable, estimatedBytesProcessed, modelTraining,
         modelTrainingCurrentIteration, modelTrainingExpectedTotalIteration,
         numDmlAffectedRows, queryPlan, referencedRoutines, referencedTables,
         reservationUsage, schema, statementType, timeline, totalBytesBilled,
         totalBytesProcessed, totalBytesProcessedAccuracy,
         totalPartitionsProcessed, totalSlotMs, undeclaredQueryParameters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"queryPlan" : [GTLRBigquery_ExplainQueryStage class],
    @"referencedRoutines" : [GTLRBigquery_RoutineReference class],
    @"referencedTables" : [GTLRBigquery_TableReference class],
    @"reservationUsage" : [GTLRBigquery_JobStatistics2_ReservationUsage_Item class],
    @"timeline" : [GTLRBigquery_QueryTimelineSample class],
    @"undeclaredQueryParameters" : [GTLRBigquery_QueryParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics2_ReservationUsage_Item
//

@implementation GTLRBigquery_JobStatistics2_ReservationUsage_Item
@dynamic name, slotMs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics3
//

@implementation GTLRBigquery_JobStatistics3
@dynamic badRecords, inputFileBytes, inputFiles, outputBytes, outputRows;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatistics4
//

@implementation GTLRBigquery_JobStatistics4
@dynamic destinationUriFileCounts, inputBytes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destinationUriFileCounts" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JobStatus
//

@implementation GTLRBigquery_JobStatus
@dynamic errorResult, errors, state;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRBigquery_ErrorProto class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_JsonObject
//

@implementation GTLRBigquery_JsonObject

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ListModelsResponse
//

@implementation GTLRBigquery_ListModelsResponse
@dynamic models, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"models" : [GTLRBigquery_Model class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"models";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ListRoutinesResponse
//

@implementation GTLRBigquery_ListRoutinesResponse
@dynamic nextPageToken, routines;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"routines" : [GTLRBigquery_Routine class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"routines";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_LocationMetadata
//

@implementation GTLRBigquery_LocationMetadata
@dynamic legacyLocationId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_MaterializedViewDefinition
//

@implementation GTLRBigquery_MaterializedViewDefinition
@dynamic enableRefresh, lastRefreshTime, query, refreshIntervalMs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Model
//

@implementation GTLRBigquery_Model
@dynamic creationTime, descriptionProperty, encryptionConfiguration, ETag,
         expirationTime, featureColumns, friendlyName, labelColumns, labels,
         lastModifiedTime, location, modelReference, modelType, trainingRuns;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"featureColumns" : [GTLRBigquery_StandardSqlField class],
    @"labelColumns" : [GTLRBigquery_StandardSqlField class],
    @"trainingRuns" : [GTLRBigquery_TrainingRun class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Model_Labels
//

@implementation GTLRBigquery_Model_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ModelDefinition
//

@implementation GTLRBigquery_ModelDefinition
@dynamic modelOptions, trainingRuns;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"trainingRuns" : [GTLRBigquery_BqmlTrainingRun class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ModelDefinition_ModelOptions
//

@implementation GTLRBigquery_ModelDefinition_ModelOptions
@dynamic labels, lossType, modelType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ModelReference
//

@implementation GTLRBigquery_ModelReference
@dynamic datasetId, modelId, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ModelTraining
//

@implementation GTLRBigquery_ModelTraining
@dynamic currentIteration, expectedTotalIterations;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_MultiClassClassificationMetrics
//

@implementation GTLRBigquery_MultiClassClassificationMetrics
@dynamic aggregateClassificationMetrics, confusionMatrixList;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"confusionMatrixList" : [GTLRBigquery_ConfusionMatrix class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Policy
//

@implementation GTLRBigquery_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRBigquery_AuditConfig class],
    @"bindings" : [GTLRBigquery_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ProjectList
//

@implementation GTLRBigquery_ProjectList
@dynamic ETag, kind, nextPageToken, projects, totalItems;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"projects" : [GTLRBigquery_ProjectList_Projects_Item class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"projects";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ProjectList_Projects_Item
//

@implementation GTLRBigquery_ProjectList_Projects_Item
@dynamic friendlyName, identifier, kind, numericId, projectReference;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ProjectReference
//

@implementation GTLRBigquery_ProjectReference
@dynamic projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryParameter
//

@implementation GTLRBigquery_QueryParameter
@dynamic name, parameterType, parameterValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryParameterType
//

@implementation GTLRBigquery_QueryParameterType
@dynamic arrayType, structTypes, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"structTypes" : [GTLRBigquery_QueryParameterType_StructTypes_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryParameterType_StructTypes_Item
//

@implementation GTLRBigquery_QueryParameterType_StructTypes_Item
@dynamic descriptionProperty, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryParameterValue
//

@implementation GTLRBigquery_QueryParameterValue
@dynamic arrayValues, structValues, value;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"arrayValues" : [GTLRBigquery_QueryParameterValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryParameterValue_StructValues
//

@implementation GTLRBigquery_QueryParameterValue_StructValues

+ (Class)classForAdditionalProperties {
  return [GTLRBigquery_QueryParameterValue class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryRequest
//

@implementation GTLRBigquery_QueryRequest
@dynamic connectionProperties, defaultDataset, dryRun, kind, labels, location,
         maximumBytesBilled, maxResults, parameterMode, preserveNulls, query,
         queryParameters, requestId, timeoutMs, useLegacySql, useQueryCache;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectionProperties" : [GTLRBigquery_ConnectionProperty class],
    @"queryParameters" : [GTLRBigquery_QueryParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryRequest_Labels
//

@implementation GTLRBigquery_QueryRequest_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryResponse
//

@implementation GTLRBigquery_QueryResponse
@dynamic cacheHit, errors, jobComplete, jobReference, kind, numDmlAffectedRows,
         pageToken, rows, schema, totalBytesProcessed, totalRows;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRBigquery_ErrorProto class],
    @"rows" : [GTLRBigquery_TableRow class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_QueryTimelineSample
//

@implementation GTLRBigquery_QueryTimelineSample
@dynamic activeUnits, completedUnits, elapsedMs, pendingUnits, totalSlotMs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RangePartitioning
//

@implementation GTLRBigquery_RangePartitioning
@dynamic field, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RangePartitioning_Range
//

@implementation GTLRBigquery_RangePartitioning_Range
@dynamic end, interval, start;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RankingMetrics
//

@implementation GTLRBigquery_RankingMetrics
@dynamic averageRank, meanAveragePrecision, meanSquaredError,
         normalizedDiscountedCumulativeGain;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RegressionMetrics
//

@implementation GTLRBigquery_RegressionMetrics
@dynamic meanAbsoluteError, meanSquaredError, meanSquaredLogError,
         medianAbsoluteError, rSquared;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Routine
//

@implementation GTLRBigquery_Routine
@dynamic arguments, creationTime, definitionBody, descriptionProperty,
         determinismLevel, ETag, importedLibraries, language, lastModifiedTime,
         returnType, routineReference, routineType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"arguments" : [GTLRBigquery_Argument class],
    @"importedLibraries" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RoutineReference
//

@implementation GTLRBigquery_RoutineReference
@dynamic datasetId, projectId, routineId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Row
//

@implementation GTLRBigquery_Row
@dynamic actualLabel, entries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"entries" : [GTLRBigquery_Entry class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RowAccessPolicyReference
//

@implementation GTLRBigquery_RowAccessPolicyReference
@dynamic datasetId, policyId, projectId, tableId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_RowLevelSecurityStatistics
//

@implementation GTLRBigquery_RowLevelSecurityStatistics
@dynamic rowLevelSecurityApplied;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ScriptStackFrame
//

@implementation GTLRBigquery_ScriptStackFrame
@dynamic endColumn, endLine, procedureId, startColumn, startLine, text;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ScriptStatistics
//

@implementation GTLRBigquery_ScriptStatistics
@dynamic evaluationKind, stackFrames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stackFrames" : [GTLRBigquery_ScriptStackFrame class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_SetIamPolicyRequest
//

@implementation GTLRBigquery_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_StandardSqlDataType
//

@implementation GTLRBigquery_StandardSqlDataType
@dynamic arrayElementType, structType, typeKind;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_StandardSqlField
//

@implementation GTLRBigquery_StandardSqlField
@dynamic name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_StandardSqlStructType
//

@implementation GTLRBigquery_StandardSqlStructType
@dynamic fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRBigquery_StandardSqlField class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Streamingbuffer
//

@implementation GTLRBigquery_Streamingbuffer
@dynamic estimatedBytes, estimatedRows, oldestEntryTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Table
//

@implementation GTLRBigquery_Table
@dynamic clustering, creationTime, descriptionProperty, encryptionConfiguration,
         ETag, expirationTime, externalDataConfiguration, friendlyName,
         identifier, kind, labels, lastModifiedTime, location, materializedView,
         model, numBytes, numLongTermBytes, numPhysicalBytes, numRows,
         rangePartitioning, requirePartitionFilter, schema, selfLink,
         streamingBuffer, tableReference, timePartitioning, type, view;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_Table_Labels
//

@implementation GTLRBigquery_Table_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableCell
//

@implementation GTLRBigquery_TableCell
@dynamic v;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableDataInsertAllRequest
//

@implementation GTLRBigquery_TableDataInsertAllRequest
@dynamic ignoreUnknownValues, kind, rows, skipInvalidRows, templateSuffix;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRBigquery_TableDataInsertAllRequest_Rows_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableDataInsertAllRequest_Rows_Item
//

@implementation GTLRBigquery_TableDataInsertAllRequest_Rows_Item
@dynamic insertId, json;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableDataInsertAllResponse
//

@implementation GTLRBigquery_TableDataInsertAllResponse
@dynamic insertErrors, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"insertErrors" : [GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item
//

@implementation GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item
@dynamic errors, index;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRBigquery_ErrorProto class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableDataList
//

@implementation GTLRBigquery_TableDataList
@dynamic ETag, kind, pageToken, rows, totalRows;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rows" : [GTLRBigquery_TableRow class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableFieldSchema
//

@implementation GTLRBigquery_TableFieldSchema
@dynamic categories, descriptionProperty, fields, mode, name, policyTags, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRBigquery_TableFieldSchema class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableFieldSchema_Categories
//

@implementation GTLRBigquery_TableFieldSchema_Categories
@dynamic names;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"names" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableFieldSchema_PolicyTags
//

@implementation GTLRBigquery_TableFieldSchema_PolicyTags
@dynamic names;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"names" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableList
//

@implementation GTLRBigquery_TableList
@dynamic ETag, kind, nextPageToken, tables, totalItems;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tables" : [GTLRBigquery_TableList_Tables_Item class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"tables";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableList_Tables_Item
//

@implementation GTLRBigquery_TableList_Tables_Item
@dynamic clustering, creationTime, expirationTime, friendlyName, identifier,
         kind, labels, rangePartitioning, tableReference, timePartitioning,
         type, view;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableList_Tables_Item_Labels
//

@implementation GTLRBigquery_TableList_Tables_Item_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableList_Tables_Item_View
//

@implementation GTLRBigquery_TableList_Tables_Item_View
@dynamic useLegacySql;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableReference
//

@implementation GTLRBigquery_TableReference
@dynamic datasetId, projectId, tableId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableRow
//

@implementation GTLRBigquery_TableRow
@dynamic f;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"f" : [GTLRBigquery_TableCell class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TableSchema
//

@implementation GTLRBigquery_TableSchema
@dynamic fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRBigquery_TableFieldSchema class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TestIamPermissionsRequest
//

@implementation GTLRBigquery_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TestIamPermissionsResponse
//

@implementation GTLRBigquery_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TimePartitioning
//

@implementation GTLRBigquery_TimePartitioning
@dynamic expirationMs, field, requirePartitionFilter, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TrainingOptions
//

@implementation GTLRBigquery_TrainingOptions
@dynamic batchSize, dataSplitColumn, dataSplitEvalFraction, dataSplitMethod,
         distanceType, dropout, earlyStop, feedbackType, hiddenUnits,
         initialLearnRate, inputLabelColumns, itemColumn,
         kmeansInitializationColumn, kmeansInitializationMethod,
         l1Regularization, l2Regularization, labelClassWeights, learnRate,
         learnRateStrategy, lossType, maxIterations, maxTreeDepth,
         minRelativeProgress, minSplitLoss, modelUri, numClusters, numFactors,
         optimizationStrategy, preserveInputStructs, subsample, userColumn,
         walsAlpha, warmStart;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"hiddenUnits" : [NSNumber class],
    @"inputLabelColumns" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TrainingOptions_LabelClassWeights
//

@implementation GTLRBigquery_TrainingOptions_LabelClassWeights

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_TrainingRun
//

@implementation GTLRBigquery_TrainingRun
@dynamic dataSplitResult, evaluationMetrics, results, startTime,
         trainingOptions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"results" : [GTLRBigquery_IterationResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_UserDefinedFunctionResource
//

@implementation GTLRBigquery_UserDefinedFunctionResource
@dynamic inlineCode, resourceUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRBigquery_ViewDefinition
//

@implementation GTLRBigquery_ViewDefinition
@dynamic query, useLegacySql, userDefinedFunctionResources;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"userDefinedFunctionResources" : [GTLRBigquery_UserDefinedFunctionResource class]
  };
  return map;
}

@end
