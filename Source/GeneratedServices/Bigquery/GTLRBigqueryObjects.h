// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Documentation:
//   https://cloud.google.com/bigquery/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigquery_BigtableColumn;
@class GTLRBigquery_BigtableColumnFamily;
@class GTLRBigquery_BigtableOptions;
@class GTLRBigquery_Clustering;
@class GTLRBigquery_CsvOptions;
@class GTLRBigquery_Dataset_Access_Item;
@class GTLRBigquery_Dataset_Labels;
@class GTLRBigquery_DatasetList_Datasets_Item;
@class GTLRBigquery_DatasetList_Datasets_Item_Labels;
@class GTLRBigquery_DatasetReference;
@class GTLRBigquery_DestinationTableProperties;
@class GTLRBigquery_EncryptionConfiguration;
@class GTLRBigquery_ErrorProto;
@class GTLRBigquery_ExplainQueryStage;
@class GTLRBigquery_ExplainQueryStep;
@class GTLRBigquery_ExternalDataConfiguration;
@class GTLRBigquery_GoogleSheetsOptions;
@class GTLRBigquery_IterationResult;
@class GTLRBigquery_Job;
@class GTLRBigquery_JobConfiguration;
@class GTLRBigquery_JobConfiguration_Labels;
@class GTLRBigquery_JobConfigurationExtract;
@class GTLRBigquery_JobConfigurationLoad;
@class GTLRBigquery_JobConfigurationQuery;
@class GTLRBigquery_JobConfigurationQuery_TableDefinitions;
@class GTLRBigquery_JobConfigurationTableCopy;
@class GTLRBigquery_JobList_Jobs_Item;
@class GTLRBigquery_JobReference;
@class GTLRBigquery_JobStatistics;
@class GTLRBigquery_JobStatistics2;
@class GTLRBigquery_JobStatistics2_ReservationUsage_Item;
@class GTLRBigquery_JobStatistics3;
@class GTLRBigquery_JobStatistics4;
@class GTLRBigquery_JobStatistics_ReservationUsage_Item;
@class GTLRBigquery_JobStatus;
@class GTLRBigquery_JsonObject;
@class GTLRBigquery_MaterializedViewDefinition;
@class GTLRBigquery_ModelDefinition;
@class GTLRBigquery_ModelDefinition_ModelOptions;
@class GTLRBigquery_ModelTraining;
@class GTLRBigquery_ProjectList_Projects_Item;
@class GTLRBigquery_ProjectReference;
@class GTLRBigquery_QueryParameter;
@class GTLRBigquery_QueryParameterType;
@class GTLRBigquery_QueryParameterType_StructTypes_Item;
@class GTLRBigquery_QueryParameterValue;
@class GTLRBigquery_QueryParameterValue_StructValues;
@class GTLRBigquery_QueryTimelineSample;
@class GTLRBigquery_RangePartitioning;
@class GTLRBigquery_RangePartitioning_Range;
@class GTLRBigquery_Streamingbuffer;
@class GTLRBigquery_Table_Labels;
@class GTLRBigquery_TableCell;
@class GTLRBigquery_TableDataInsertAllRequest_Rows_Item;
@class GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item;
@class GTLRBigquery_TableFieldSchema;
@class GTLRBigquery_TableList_Tables_Item;
@class GTLRBigquery_TableList_Tables_Item_Labels;
@class GTLRBigquery_TableList_Tables_Item_View;
@class GTLRBigquery_TableReference;
@class GTLRBigquery_TableRow;
@class GTLRBigquery_TableSchema;
@class GTLRBigquery_TimePartitioning;
@class GTLRBigquery_TrainingRun;
@class GTLRBigquery_TrainingRun_TrainingOptions;
@class GTLRBigquery_UserDefinedFunctionResource;
@class GTLRBigquery_ViewDefinition;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  GTLRBigquery_BigtableColumn
 */
@interface GTLRBigquery_BigtableColumn : GTLRObject

/**
 *  [Optional] The encoding of the values when the type is not STRING.
 *  Acceptable encoding values are: TEXT - indicates values are alphanumeric
 *  text strings. BINARY - indicates values are encoded using HBase
 *  Bytes.toBytes family of functions. 'encoding' can also be set at the column
 *  family level. However, the setting at this level takes precedence if
 *  'encoding' is set at both levels.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] If the qualifier is not a valid BigQuery field identifier i.e.
 *  does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as
 *  the column field name and is used as field name in queries.
 */
@property(nonatomic, copy, nullable) NSString *fieldName;

/**
 *  [Optional] If this is set, only the latest version of value in this column
 *  are exposed. 'onlyReadLatest' can also be set at the column family level.
 *  However, the setting at this level takes precedence if 'onlyReadLatest' is
 *  set at both levels.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  [Required] Qualifier of the column. Columns in the parent column family that
 *  has this exact qualifier are exposed as . field. If the qualifier is valid
 *  UTF-8 string, it can be specified in the qualifier_string field. Otherwise,
 *  a base-64 encoded value must be set to qualifier_encoded. The column field
 *  name is the same as the column qualifier. However, if the qualifier is not a
 *  valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a
 *  valid identifier must be provided as field_name.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *qualifierEncoded;

@property(nonatomic, copy, nullable) NSString *qualifierString;

/**
 *  [Optional] The type to convert the value in cells of this column. The values
 *  are expected to be encoded using HBase Bytes.toBytes function when using the
 *  BINARY encoding value. Following BigQuery types are allowed (case-sensitive)
 *  - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also
 *  be set at the column family level. However, the setting at this level takes
 *  precedence if 'type' is set at both levels.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_BigtableColumnFamily
 */
@interface GTLRBigquery_BigtableColumnFamily : GTLRObject

/**
 *  [Optional] Lists of columns that should be exposed as individual fields as
 *  opposed to a list of (column name, value) pairs. All columns whose qualifier
 *  matches a qualifier in this list can be accessed as .. Other columns can be
 *  accessed as a list through .Column field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumn *> *columns;

/**
 *  [Optional] The encoding of the values when the type is not STRING.
 *  Acceptable encoding values are: TEXT - indicates values are alphanumeric
 *  text strings. BINARY - indicates values are encoded using HBase
 *  Bytes.toBytes family of functions. This can be overridden for a specific
 *  column by listing that column in 'columns' and specifying an encoding for
 *  it.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/** Identifier of the column family. */
@property(nonatomic, copy, nullable) NSString *familyId;

/**
 *  [Optional] If this is set only the latest version of value are exposed for
 *  all columns in this column family. This can be overridden for a specific
 *  column by listing that column in 'columns' and specifying a different
 *  setting for that column.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyReadLatest;

/**
 *  [Optional] The type to convert the value in cells of this column family. The
 *  values are expected to be encoded using HBase Bytes.toBytes function when
 *  using the BINARY encoding value. Following BigQuery types are allowed
 *  (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES.
 *  This can be overridden for a specific column by listing that column in
 *  'columns' and specifying a type for it.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_BigtableOptions
 */
@interface GTLRBigquery_BigtableOptions : GTLRObject

/**
 *  [Optional] List of column families to expose in the table schema along with
 *  their types. This list restricts the column families that can be referenced
 *  in queries and specifies their value types. You can use this list to do type
 *  conversions - see the 'type' field for more details. If you leave this list
 *  empty, all column families are present in the table schema and their values
 *  are read as BYTES. During a query only the column families referenced in
 *  that query are read from Bigtable.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_BigtableColumnFamily *> *columnFamilies;

/**
 *  [Optional] If field is true, then the column families that are not specified
 *  in columnFamilies list are not exposed in the table schema. Otherwise, they
 *  are read with BYTES type values. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnspecifiedColumnFamilies;

/**
 *  [Optional] If field is true, then the rowkey column families will be read
 *  and converted to string. Otherwise they are read with BYTES type values and
 *  users need to manually cast them with CAST if necessary. The default value
 *  is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRowkeyAsString;

@end


/**
 *  GTLRBigquery_Clustering
 */
@interface GTLRBigquery_Clustering : GTLRObject

/**
 *  [Repeated] One or more fields on which data should be clustered. Only
 *  top-level, non-repeated, simple-type fields are supported. When you cluster
 *  a table using multiple columns, the order of columns you specify is
 *  important. The order of the specified columns determines the sort order of
 *  the data.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fields;

@end


/**
 *  GTLRBigquery_CsvOptions
 */
@interface GTLRBigquery_CsvOptions : GTLRObject

/**
 *  [Optional] Indicates if BigQuery should accept rows that are missing
 *  trailing optional columns. If true, BigQuery treats missing trailing columns
 *  as null values. If false, records with missing trailing columns are treated
 *  as bad records, and if there are too many bad records, an invalid error is
 *  returned in the job result. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  [Optional] Indicates if BigQuery should allow quoted data sections that
 *  contain newline characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  [Optional] The character encoding of the data. The supported values are
 *  UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data
 *  after the raw, binary data has been split using the values of the quote and
 *  fieldDelimiter properties.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] The separator for fields in a CSV file. BigQuery converts the
 *  string to ISO-8859-1 encoding, and then uses the first byte of the encoded
 *  string to split the data in its raw, binary state. BigQuery also supports
 *  the escape sequence "\\t" to specify a tab separator. The default value is a
 *  comma (',').
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  [Optional] The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ('"'). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  [Optional] The number of rows at the top of a CSV file that BigQuery will
 *  skip when reading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  GTLRBigquery_Dataset
 */
@interface GTLRBigquery_Dataset : GTLRObject

/**
 *  [Optional] An array of objects that define dataset access for one or more
 *  entities. You can set this property when inserting or updating a dataset in
 *  order to control who is allowed to access the data. If unspecified at
 *  dataset creation time, BigQuery adds default dataset access for the
 *  following entities: access.specialGroup: projectReaders; access.role:
 *  READER; access.specialGroup: projectWriters; access.role: WRITER;
 *  access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail:
 *  [dataset creator email]; access.role: OWNER;
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_Dataset_Access_Item *> *access;

/**
 *  [Output-only] The time when this dataset was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** [Required] A reference that identifies the dataset. */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/**
 *  [Optional] The default partition expiration for all partitioned tables in
 *  the dataset, in milliseconds. Once this property is set, all newly-created
 *  partitioned tables in the dataset will have an expirationMs property in the
 *  timePartitioning settings set to this value, and changing the value will
 *  only affect new tables, not existing ones. The storage in a partition will
 *  have an expiration time of its partition time plus this value. Setting this
 *  property overrides the use of defaultTableExpirationMs for partitioned
 *  tables: only one of defaultTableExpirationMs and
 *  defaultPartitionExpirationMs will be used for any new partitioned table. If
 *  you provide an explicit timePartitioning.expirationMs when creating or
 *  updating a partitioned table, that value takes precedence over the default
 *  partition expiration time indicated by this property.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultPartitionExpirationMs;

/**
 *  [Optional] The default lifetime of all tables in the dataset, in
 *  milliseconds. The minimum value is 3600000 milliseconds (one hour). Once
 *  this property is set, all newly-created tables in the dataset will have an
 *  expirationTime property set to the creation time plus the value in this
 *  property, and changing the value will only affect new tables, not existing
 *  ones. When the expirationTime for a given table is reached, that table will
 *  be deleted automatically. If a table's expirationTime is modified or removed
 *  before the table expires, or if you provide an explicit expirationTime when
 *  creating a table, that value takes precedence over the default expiration
 *  time indicated by this property.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultTableExpirationMs;

/**
 *  [Optional] A user-friendly description of the dataset.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** [Output-only] A hash of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** [Optional] A descriptive name for the dataset. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  [Output-only] The fully-qualified unique name of the dataset in the format
 *  projectId:datasetId. The dataset name without the project name is given in
 *  the datasetId field. When creating a new dataset, leave this field blank,
 *  and instead specify the datasetId field.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** [Output-only] The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See Creating and Updating Dataset Labels for more information.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Dataset_Labels *labels;

/**
 *  [Output-only] The date when this dataset or any of its tables was last
 *  modified, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  The geographic location where the dataset should reside. The default value
 *  is US. See details at https://cloud.google.com/bigquery/docs/locations.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  [Output-only] A URL that can be used to access the resource again. You can
 *  use this URL in Get or Update requests to the resource.
 */
@property(nonatomic, copy, nullable) NSString *selfLink;

@end


/**
 *  GTLRBigquery_Dataset_Access_Item
 */
@interface GTLRBigquery_Dataset_Access_Item : GTLRObject

/**
 *  [Pick one] A domain to grant access to. Any users signed in with the domain
 *  specified will be granted the specified access. Example: "example.com". Maps
 *  to IAM policy member "domain:DOMAIN".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  [Pick one] An email address of a Google Group to grant access to. Maps to
 *  IAM policy member "group:GROUP".
 */
@property(nonatomic, copy, nullable) NSString *groupByEmail;

/**
 *  [Pick one] Some other type of member that appears in the IAM Policy but
 *  isn't a user, group, domain, or special group.
 */
@property(nonatomic, copy, nullable) NSString *iamMember;

/**
 *  [Required] Describes the rights granted to the user specified by the other
 *  member of the access object. The following string values are supported:
 *  READER, WRITER, OWNER.
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  [Pick one] A special group to grant access to. Possible values include:
 *  projectOwners: Owners of the enclosing project. projectReaders: Readers of
 *  the enclosing project. projectWriters: Writers of the enclosing project.
 *  allAuthenticatedUsers: All authenticated BigQuery users. Maps to
 *  similarly-named IAM members.
 */
@property(nonatomic, copy, nullable) NSString *specialGroup;

/**
 *  [Pick one] An email address of a user to grant access to. For example:
 *  fred\@example.com. Maps to IAM policy member "user:EMAIL" or
 *  "serviceAccount:EMAIL".
 */
@property(nonatomic, copy, nullable) NSString *userByEmail;

/**
 *  [Pick one] A view from a different dataset to grant access to. Queries
 *  executed against that view will have read access to tables in this dataset.
 *  The role field is not required when this field is set. If that view is
 *  updated by any user, access to the view needs to be granted again via an
 *  update operation.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *view;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets. You can set this property when inserting or updating a
 *  dataset. See Creating and Updating Dataset Labels for more information.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Dataset_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_DatasetList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "datasets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_DatasetList : GTLRCollectionObject

/**
 *  An array of the dataset resources in the project. Each resource contains
 *  basic information. For full information about a particular dataset resource,
 *  use the Datasets: get method. This property is omitted when there are no
 *  datasets in the project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_DatasetList_Datasets_Item *> *datasets;

/**
 *  A hash value of the results page. You can use this property to determine if
 *  the page has changed since the last request.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The list type. This property always returns the value
 *  "bigquery#datasetList".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token that can be used to request the next results page. This property is
 *  omitted on the final results page.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRBigquery_DatasetList_Datasets_Item
 */
@interface GTLRBigquery_DatasetList_Datasets_Item : GTLRObject

/**
 *  The dataset reference. Use this property to access specific parts of the
 *  dataset's ID, such as project ID or dataset ID.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *datasetReference;

/** A descriptive name for the dataset, if one exists. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  The fully-qualified, unique, opaque ID of the dataset.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The resource type. This property always returns the value
 *  "bigquery#dataset".
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetList_Datasets_Item_Labels *labels;

/** The geographic location where the data resides. */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  The labels associated with this dataset. You can use these to organize and
 *  group your datasets.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_DatasetList_Datasets_Item_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_DatasetReference
 */
@interface GTLRBigquery_DatasetReference : GTLRObject

/**
 *  [Required] A unique ID for this dataset, without the project name. The ID
 *  must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The
 *  maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** [Optional] The ID of the project containing this dataset. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_DestinationTableProperties
 */
@interface GTLRBigquery_DestinationTableProperties : GTLRObject

/**
 *  [Optional] The description for the destination table. This will only be used
 *  if the destination table is newly created. If the table already exists and a
 *  value different than the current description is provided, the job will fail.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  [Optional] The friendly name for the destination table. This will only be
 *  used if the destination table is newly created. If the table already exists
 *  and a value different than the current friendly name is provided, the job
 *  will fail.
 */
@property(nonatomic, copy, nullable) NSString *friendlyName;

@end


/**
 *  GTLRBigquery_EncryptionConfiguration
 */
@interface GTLRBigquery_EncryptionConfiguration : GTLRObject

/**
 *  [Optional] Describes the Cloud KMS encryption key that will be used to
 *  protect destination BigQuery table. The BigQuery Service Account associated
 *  with your project requires access to this encryption key.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  GTLRBigquery_ErrorProto
 */
@interface GTLRBigquery_ErrorProto : GTLRObject

/**
 *  Debugging information. This property is internal to Google and should not be
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *debugInfo;

/** Specifies where the error occurred, if present. */
@property(nonatomic, copy, nullable) NSString *location;

/** A human-readable description of the error. */
@property(nonatomic, copy, nullable) NSString *message;

/** A short error code that summarizes the error. */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  GTLRBigquery_ExplainQueryStage
 */
@interface GTLRBigquery_ExplainQueryStage : GTLRObject

/**
 *  Number of parallel input segments completed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedParallelInputs;

/**
 *  Milliseconds the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsAvg;

/**
 *  Milliseconds the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeMsMax;

/**
 *  Relative amount of time the average shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on CPU-bound tasks.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *computeRatioMax;

/**
 *  Stage end time represented as milliseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endMs;

/**
 *  Unique ID for stage within plan.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  IDs for stages that are inputs to this stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *inputStages;

/** Human-readable name for stage. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Number of parallel input segments to be processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelInputs;

/**
 *  Milliseconds the average shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsAvg;

/**
 *  Milliseconds the slowest shard spent reading input.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readMsMax;

/**
 *  Relative amount of time the average shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioAvg;

/**
 *  Relative amount of time the slowest shard spent reading input.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readRatioMax;

/**
 *  Number of records read into the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsRead;

/**
 *  Number of records written by the stage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordsWritten;

/**
 *  Total number of bytes written to shuffle.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytes;

/**
 *  Total number of bytes written to shuffle and spilled to disk.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shuffleOutputBytesSpilled;

/**
 *  Stage start time represented as milliseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startMs;

/** Current status for the stage. */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  List of operations within the stage in dependency order (approximately
 *  chronological).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStep *> *steps;

/**
 *  Milliseconds the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsAvg;

/**
 *  Milliseconds the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitMsMax;

/**
 *  Relative amount of time the average shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioAvg;

/**
 *  Relative amount of time the slowest shard spent waiting to be scheduled.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waitRatioMax;

/**
 *  Milliseconds the average shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsAvg;

/**
 *  Milliseconds the slowest shard spent on writing output.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeMsMax;

/**
 *  Relative amount of time the average shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioAvg;

/**
 *  Relative amount of time the slowest shard spent on writing output.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeRatioMax;

@end


/**
 *  GTLRBigquery_ExplainQueryStep
 */
@interface GTLRBigquery_ExplainQueryStep : GTLRObject

/** Machine-readable operation type. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Human-readable stage descriptions. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *substeps;

@end


/**
 *  GTLRBigquery_ExternalDataConfiguration
 */
@interface GTLRBigquery_ExternalDataConfiguration : GTLRObject

/**
 *  Try to detect schema and format options automatically. Any option specified
 *  explicitly will be honored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/** [Optional] Additional options if sourceFormat is set to BIGTABLE. */
@property(nonatomic, strong, nullable) GTLRBigquery_BigtableOptions *bigtableOptions;

/**
 *  [Optional] The compression type of the data source. Possible values include
 *  GZIP and NONE. The default value is NONE. This setting is ignored for Google
 *  Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/** Additional properties to set if sourceFormat is set to CSV. */
@property(nonatomic, strong, nullable) GTLRBigquery_CsvOptions *csvOptions;

/** [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS. */
@property(nonatomic, strong, nullable) GTLRBigquery_GoogleSheetsOptions *googleSheetsOptions;

/**
 *  [Optional, Experimental] If hive partitioning is enabled, which mode to use.
 *  Two modes are supported: - AUTO: automatically infer partition key name(s)
 *  and type(s). - STRINGS: automatic infer partition key name(s). All types are
 *  strings. Not all storage formats support hive partitioning -- requesting
 *  hive partitioning on an unsupported format will lead to an error.
 */
@property(nonatomic, copy, nullable) NSString *hivePartitioningMode;

/**
 *  [Optional] Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names Google Cloud Bigtable: This setting is
 *  ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This
 *  setting is ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  [Optional] The maximum number of bad records that BigQuery can ignore when
 *  reading data. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. This is only valid for CSV, JSON, and
 *  Google Sheets. The default value is 0, which requires that all records are
 *  valid. This setting is ignored for Google Cloud Bigtable, Google Cloud
 *  Datastore backups and Avro formats.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  [Optional] The schema for the data. Schema is required for CSV and JSON
 *  formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore
 *  backups, and Avro formats.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Required] The data format. For CSV files, specify "CSV". For Google sheets,
 *  specify "GOOGLE_SHEETS". For newline-delimited JSON, specify
 *  "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud
 *  Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud
 *  Bigtable, specify "BIGTABLE".
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups, exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

@end


/**
 *  GTLRBigquery_GetQueryResultsResponse
 */
@interface GTLRBigquery_GetQueryResultsResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  [Output-only] The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/** A hash of this response. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Reference to the BigQuery Job that was created to run the query. This field
 *  will be present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  [Output-only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** A token used for paging results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above. Present only
 *  when the query completes successfully.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  The total number of bytes processed for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results. Present only when
 *  the query completes successfully.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_GetServiceAccountResponse
 */
@interface GTLRBigquery_GetServiceAccountResponse : GTLRObject

/** The service account email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_GoogleSheetsOptions
 */
@interface GTLRBigquery_GoogleSheetsOptions : GTLRObject

/**
 *  [Beta] [Optional] Range of a sheet to query from. Only used when non-empty.
 *  Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For
 *  example: sheet1!A1:B20
 */
@property(nonatomic, copy, nullable) NSString *range;

/**
 *  [Optional] The number of rows at the top of a sheet that BigQuery will skip
 *  when reading the data. The default value is 0. This property is useful if
 *  you have header rows that should be skipped. When autodetect is on, behavior
 *  is the following: * skipLeadingRows unspecified - Autodetect tries to detect
 *  headers in the first row. If they are not detected, the row is read as data.
 *  Otherwise data is read starting from the second row. * skipLeadingRows is 0
 *  - Instructs autodetect that there are no headers and data should be read
 *  starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips
 *  N-1 rows and tries to detect headers in row N. If headers are not detected,
 *  row N is just skipped. Otherwise row N is used to extract column names for
 *  the detected schema.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

@end


/**
 *  GTLRBigquery_IterationResult
 */
@interface GTLRBigquery_IterationResult : GTLRObject

/**
 *  [Output-only, Beta] Time taken to run the training iteration in
 *  milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  [Output-only, Beta] Eval loss computed on the eval data at the end of the
 *  iteration. The eval loss is used for early stopping to avoid overfitting. No
 *  eval loss if eval_split_method option is specified as no_split or auto_split
 *  with input data size less than 500 rows.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evalLoss;

/**
 *  [Output-only, Beta] Index of the ML training iteration, starting from zero
 *  for each training run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  [Output-only, Beta] Learning rate used for this iteration, it varies for
 *  different training iterations if learn_rate_strategy option is not constant.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

/**
 *  [Output-only, Beta] Training loss computed on the training data at the end
 *  of the iteration. The training loss function is defined by model type.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingLoss;

@end


/**
 *  GTLRBigquery_Job
 */
@interface GTLRBigquery_Job : GTLRObject

/** [Required] Describes the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** [Output-only] A hash of this resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  [Output-only] Opaque ID field of the job
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** [Optional] Reference describing the unique-per-user name of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** [Output-only] The type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/** [Output-only] A URL that can be used to access this resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output-only] Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/**
 *  [Output-only] The status of this job. Examine this value when polling an
 *  asynchronous job to see if the job is complete.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** [Output-only] Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  GTLRBigquery_JobCancelResponse
 */
@interface GTLRBigquery_JobCancelResponse : GTLRObject

/** The final state of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_Job *job;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_JobConfiguration
 */
@interface GTLRBigquery_JobConfiguration : GTLRObject

/**
 *  [Pick one] Copies a table.
 *
 *  Remapped to 'copyProperty' to avoid NSObject's 'copy'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationTableCopy *copyProperty NS_RETURNS_NOT_RETAINED;

/**
 *  [Optional] If set, don't actually run this job. A valid query will return a
 *  mostly empty response with some processing statistics, while an invalid
 *  query will return the same error it would if it wasn't a dry run. Behavior
 *  of non-query jobs is undefined.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** [Pick one] Configures an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationExtract *extract;

/**
 *  [Optional] Job timeout in milliseconds. If this time limit is exceeded,
 *  BigQuery may attempt to terminate the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobTimeoutMs;

/**
 *  [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or
 *  UNKNOWN.
 */
@property(nonatomic, copy, nullable) NSString *jobType;

/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration_Labels *labels;

/** [Pick one] Configures a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationLoad *load;

/** [Pick one] Configures a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery *query;

@end


/**
 *  The labels associated with this job. You can use these to organize and group
 *  your jobs. Label keys and values can be no longer than 63 characters, can
 *  only contain lowercase letters, numeric characters, underscores and dashes.
 *  International characters are allowed. Label values are optional. Label keys
 *  must start with a letter and each label in the list must have a different
 *  key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_JobConfiguration_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_JobConfigurationExtract
 */
@interface GTLRBigquery_JobConfigurationExtract : GTLRObject

/**
 *  [Optional] The compression type to use for exported files. Possible values
 *  include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE
 *  and SNAPPY are only supported for Avro.
 */
@property(nonatomic, copy, nullable) NSString *compression;

/**
 *  [Optional] The exported file format. Possible values include CSV,
 *  NEWLINE_DELIMITED_JSON and AVRO. The default value is CSV. Tables with
 *  nested or repeated fields cannot be exported as CSV.
 */
@property(nonatomic, copy, nullable) NSString *destinationFormat;

/**
 *  [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as
 *  necessary. The fully-qualified Google Cloud Storage URI where the extracted
 *  table should be written.
 */
@property(nonatomic, copy, nullable) NSString *destinationUri;

/**
 *  [Pick one] A list of fully-qualified Google Cloud Storage URIs where the
 *  extracted table should be written.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *destinationUris;

/**
 *  [Optional] Delimiter to use between fields in the exported data. Default is
 *  ','
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  [Optional] Whether to print out a header row in the results. Default is
 *  true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *printHeader;

/** [Required] A reference to the table being exported. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

@end


/**
 *  GTLRBigquery_JobConfigurationLoad
 */
@interface GTLRBigquery_JobConfigurationLoad : GTLRObject

/**
 *  [Optional] Accept rows that are missing trailing optional columns. The
 *  missing values are treated as nulls. If false, records with missing trailing
 *  columns are treated as bad records, and if there are too many bad records,
 *  an invalid error is returned in the job result. The default value is false.
 *  Only applicable to CSV, ignored for other formats.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJaggedRows;

/**
 *  Indicates if BigQuery should allow quoted data sections that contain newline
 *  characters in a CSV file. The default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowQuotedNewlines;

/**
 *  [Optional] Indicates if we should automatically infer the options and schema
 *  for CSV and JSON sources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/**
 *  [Beta] Clustering specification for the destination table. Must be specified
 *  with time-based partitioning, data in the table will be first partitioned
 *  and subsequently clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/** [Required] The destination table to load the data into. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  [Beta] [Optional] Properties with which to create the destination table if
 *  it is new.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DestinationTableProperties *destinationTableProperties;

/**
 *  [Optional] The character encoding of the data. The supported values are
 *  UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data
 *  after the raw, binary data has been split using the values of the quote and
 *  fieldDelimiter properties.
 */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  [Optional] The separator for fields in a CSV file. The separator can be any
 *  ISO-8859-1 single-byte character. To use a character in the range 128-255,
 *  you must encode the character as UTF8. BigQuery converts the string to
 *  ISO-8859-1 encoding, and then uses the first byte of the encoded string to
 *  split the data in its raw, binary state. BigQuery also supports the escape
 *  sequence "\\t" to specify a tab separator. The default value is a comma
 *  (',').
 */
@property(nonatomic, copy, nullable) NSString *fieldDelimiter;

/**
 *  [Optional, Experimental] If hive partitioning is enabled, which mode to use.
 *  Two modes are supported: - AUTO: automatically infer partition key name(s)
 *  and type(s). - STRINGS: automatic infer partition key name(s). All types are
 *  strings. Not all storage formats support hive partitioning -- requesting
 *  hive partitioning on an unsupported format will lead to an error.
 */
@property(nonatomic, copy, nullable) NSString *hivePartitioningMode;

/**
 *  [Optional] Indicates if BigQuery should allow extra values that are not
 *  represented in the table schema. If true, the extra values are ignored. If
 *  false, records with extra columns are treated as bad records, and if there
 *  are too many bad records, an invalid error is returned in the job result.
 *  The default value is false. The sourceFormat property determines what
 *  BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values
 *  that don't match any column names
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/**
 *  [Optional] The maximum number of bad records that BigQuery can ignore when
 *  running the job. If the number of bad records exceeds this value, an invalid
 *  error is returned in the job result. This is only valid for CSV and JSON.
 *  The default value is 0, which requires that all records are valid.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBadRecords;

/**
 *  [Optional] Specifies a string that represents a null value in a CSV file.
 *  For example, if you specify "\\N", BigQuery interprets "\\N" as a null value
 *  when loading a CSV file. The default value is the empty string. If you set
 *  this property to a custom value, BigQuery throws an error if an empty string
 *  is present for all data types except for STRING and BYTE. For STRING and
 *  BYTE columns, BigQuery interprets the empty string as an empty value.
 */
@property(nonatomic, copy, nullable) NSString *nullMarker;

/**
 *  If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity
 *  properties to load into BigQuery from a Cloud Datastore backup. Property
 *  names are case sensitive and must be top-level properties. If no properties
 *  are specified, BigQuery loads all properties. If any named property isn't
 *  found in the Cloud Datastore backup, an invalid error is returned in the job
 *  result.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectionFields;

/**
 *  [Optional] The value that is used to quote data sections in a CSV file.
 *  BigQuery converts the string to ISO-8859-1 encoding, and then uses the first
 *  byte of the encoded string to split the data in its raw, binary state. The
 *  default value is a double-quote ('"'). If your data does not contain quoted
 *  sections, set the property value to an empty string. If your data contains
 *  quoted newline characters, you must also set the allowQuotedNewlines
 *  property to true.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  [Optional] The schema for the destination table. The schema can be omitted
 *  if the destination table already exists, or if you're loading data from
 *  Google Cloud Datastore.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  [Deprecated] The inline schema. For CSV schemas, specify as
 *  "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER,
 *  baz:FLOAT".
 */
@property(nonatomic, copy, nullable) NSString *schemaInline;

/** [Deprecated] The format of the schemaInline property. */
@property(nonatomic, copy, nullable) NSString *schemaInlineFormat;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the load job if a schema is autodetected or supplied in the job
 *  configuration. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified:
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/**
 *  [Optional] The number of rows at the top of a CSV file that BigQuery will
 *  skip when loading the data. The default value is 0. This property is useful
 *  if you have header rows in the file that should be skipped.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipLeadingRows;

/**
 *  [Optional] The format of the data files. For CSV files, specify "CSV". For
 *  datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON,
 *  specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet,
 *  specify "PARQUET". For orc, specify "ORC". The default value is CSV.
 */
@property(nonatomic, copy, nullable) NSString *sourceFormat;

/**
 *  [Required] The fully-qualified URIs that point to your data in Google Cloud.
 *  For Google Cloud Storage URIs: Each URI can contain one '*' wildcard
 *  character and it must come after the 'bucket' name. Size limits related to
 *  load jobs apply to external data sources. For Google Cloud Bigtable URIs:
 *  Exactly one URI can be specified and it has be a fully specified and valid
 *  HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore
 *  backups: Exactly one URI can be specified. Also, the '*' wildcard character
 *  is not allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  [Optional] If sourceFormat is set to "AVRO", indicates whether to enable
 *  interpreting logical types into their corresponding types (ie. TIMESTAMP),
 *  instead of only using their raw types (ie. INTEGER).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useAvroLogicalTypes;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data. WRITE_APPEND: If the
 *  table already exists, BigQuery appends the data to the table. WRITE_EMPTY:
 *  If the table already exists and contains data, a 'duplicate' error is
 *  returned in the job result. The default value is WRITE_APPEND. Each action
 *  is atomic and only occurs if BigQuery is able to complete the job
 *  successfully. Creation, truncation and append actions occur as one atomic
 *  update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  GTLRBigquery_JobConfigurationQuery
 */
@interface GTLRBigquery_JobConfigurationQuery : GTLRObject

/**
 *  [Optional] If true and query uses legacy SQL dialect, allows the query to
 *  produce arbitrarily large result tables at a slight cost in performance.
 *  Requires destinationTable to be set. For standard SQL queries, this flag is
 *  ignored and large results are always allowed. However, you must still set
 *  destinationTable when result size exceeds the allowed maximum response size.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowLargeResults;

/**
 *  [Beta] Clustering specification for the destination table. Must be specified
 *  with time-based partitioning, data in the table will be first partitioned
 *  and subsequently clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/**
 *  [Optional] Specifies the default dataset to use for unqualified table names
 *  in the query. Note that this does not alter behavior of unqualified dataset
 *  names.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/**
 *  [Optional] Describes the table where the query results should be stored. If
 *  not present, a new table will be created to store the results. This property
 *  must be set for large results that exceed the maximum response size.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/**
 *  [Optional] If true and query uses legacy SQL dialect, flattens all nested
 *  and repeated fields in the query results. allowLargeResults must be true if
 *  this is set to false. For standard SQL queries, this flag is ignored and
 *  results are never flattened.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flattenResults;

/**
 *  [Optional] Limits the billing tier for this job. Queries that have resource
 *  usage beyond this tier will fail (without incurring a charge). If
 *  unspecified, this will be set to your project default.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBillingTier;

/**
 *  [Optional] Limits the bytes billed for this job. Queries that will have
 *  bytes billed beyond this limit will fail (without incurring a charge). If
 *  unspecified, this will be set to your project default.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBytesBilled;

/**
 *  Standard SQL only. Set to POSITIONAL to use positional (?) query parameters
 *  or to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  [Deprecated] This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls;

/**
 *  [Optional] Specifies a priority for the query. Possible values include
 *  INTERACTIVE and BATCH. The default value is INTERACTIVE.
 */
@property(nonatomic, copy, nullable) NSString *priority;

/**
 *  [Required] SQL query text to execute. The useLegacySql field can be used to
 *  indicate whether the query uses legacy SQL or standard SQL.
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for standard SQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  Allows the schema of the destination table to be updated as a side effect of
 *  the query job. Schema update options are supported in two cases: when
 *  writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE
 *  and the destination table is a partition of a table, specified by partition
 *  decorators. For normal tables, WRITE_TRUNCATE will always overwrite the
 *  schema. One or more of the following values are specified:
 *  ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
 *  ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
 *  schema to nullable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *schemaUpdateOptions;

/**
 *  [Optional] If querying an external data source outside of BigQuery,
 *  describes the data format, location and other properties of the data source.
 *  By defining these properties, the data source can then be queried as if it
 *  were a standard BigQuery table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfigurationQuery_TableDefinitions *tableDefinitions;

/**
 *  Time-based partitioning specification for the destination table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  Specifies whether to use BigQuery's legacy SQL dialect for this query. The
 *  default value is true. If set to false, the query will use BigQuery's
 *  standard SQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  [Optional] Whether to look for the result in the query cache. The query
 *  cache is a best-effort cache that will be flushed whenever tables in the
 *  query are modified. Moreover, the query cache is only available when a query
 *  does not have a destination table specified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data and uses the schema from
 *  the query result. WRITE_APPEND: If the table already exists, BigQuery
 *  appends the data to the table. WRITE_EMPTY: If the table already exists and
 *  contains data, a 'duplicate' error is returned in the job result. The
 *  default value is WRITE_EMPTY. Each action is atomic and only occurs if
 *  BigQuery is able to complete the job successfully. Creation, truncation and
 *  append actions occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  [Optional] If querying an external data source outside of BigQuery,
 *  describes the data format, location and other properties of the data source.
 *  By defining these properties, the data source can then be queried as if it
 *  were a standard BigQuery table.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_ExternalDataConfiguration. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JobConfigurationQuery_TableDefinitions : GTLRObject
@end


/**
 *  GTLRBigquery_JobConfigurationTableCopy
 */
@interface GTLRBigquery_JobConfigurationTableCopy : GTLRObject

/**
 *  [Optional] Specifies whether the job is allowed to create new tables. The
 *  following values are supported: CREATE_IF_NEEDED: If the table does not
 *  exist, BigQuery creates the table. CREATE_NEVER: The table must already
 *  exist. If it does not, a 'notFound' error is returned in the job result. The
 *  default value is CREATE_IF_NEEDED. Creation, truncation and append actions
 *  occur as one atomic update upon job completion.
 */
@property(nonatomic, copy, nullable) NSString *createDisposition;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *destinationEncryptionConfiguration;

/** [Required] The destination table */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *destinationTable;

/** [Pick one] Source table to copy. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *sourceTable;

/** [Pick one] Source tables to copy. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *sourceTables;

/**
 *  [Optional] Specifies the action that occurs if the destination table already
 *  exists. The following values are supported: WRITE_TRUNCATE: If the table
 *  already exists, BigQuery overwrites the table data. WRITE_APPEND: If the
 *  table already exists, BigQuery appends the data to the table. WRITE_EMPTY:
 *  If the table already exists and contains data, a 'duplicate' error is
 *  returned in the job result. The default value is WRITE_EMPTY. Each action is
 *  atomic and only occurs if BigQuery is able to complete the job successfully.
 *  Creation, truncation and append actions occur as one atomic update upon job
 *  completion.
 */
@property(nonatomic, copy, nullable) NSString *writeDisposition;

@end


/**
 *  GTLRBigquery_JobList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_JobList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  List of jobs that were requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobList_Jobs_Item *> *jobs;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRBigquery_JobList_Jobs_Item
 */
@interface GTLRBigquery_JobList_Jobs_Item : GTLRObject

/** [Full-projection-only] Specifies the job configuration. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobConfiguration *configuration;

/** A result object that will be present only if the job has failed. */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  Unique opaque ID of the job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Job reference uniquely identifying the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Running state of the job. When the state is DONE, errorResult can be checked
 *  to determine whether the job succeeded or failed.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  [Output-only] Information about the job, including starting time and ending
 *  time of the job.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics *statistics;

/** [Full-projection-only] Describes the state of the job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatus *status;

/** [Full-projection-only] Email address of the user who ran the job. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  GTLRBigquery_JobReference
 */
@interface GTLRBigquery_JobReference : GTLRObject

/**
 *  [Required] The ID of the job. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  The geographic location of the job. See details at
 *  https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** [Required] The ID of the project containing this job. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_JobStatistics
 */
@interface GTLRBigquery_JobStatistics : GTLRObject

/**
 *  [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT
 *  jobs.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completionRatio;

/**
 *  [Output-only] Creation time of this job, in milliseconds since the epoch.
 *  This field will be present on all jobs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  [Output-only] End time of this job, in milliseconds since the epoch. This
 *  field will be present whenever a job is in the DONE state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endTime;

/** [Output-only] Statistics for an extract job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics4 *extract;

/** [Output-only] Statistics for a load job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics3 *load;

/** [Output-only] Statistics for a query job. */
@property(nonatomic, strong, nullable) GTLRBigquery_JobStatistics2 *query;

/** [Output-only] Quotas which delayed this job's start time. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *quotaDeferments;

/** [Output-only] Job resource usage breakdown by reservation. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics_ReservationUsage_Item *> *reservationUsage;

/**
 *  [Output-only] Start time of this job, in milliseconds since the epoch. This
 *  field will be present when the job transitions from the PENDING state to
 *  either RUNNING or DONE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTime;

/**
 *  [Output-only] [Deprecated] Use the bytes processed in the query statistics
 *  instead.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  [Output-only] Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

@end


/**
 *  GTLRBigquery_JobStatistics_ReservationUsage_Item
 */
@interface GTLRBigquery_JobStatistics_ReservationUsage_Item : GTLRObject

/**
 *  [Output-only] Reservation name or "unreserved" for on-demand resources
 *  usage.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output-only] Slot-milliseconds the job spent in the given reservation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  GTLRBigquery_JobStatistics2
 */
@interface GTLRBigquery_JobStatistics2 : GTLRObject

/**
 *  [Output-only] Billing tier for the job.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *billingTier;

/**
 *  [Output-only] Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  The DDL operation performed, possibly dependent on the pre-existence of the
 *  DDL target. Possible values (new values might be added in the future):
 *  "CREATE": The query created the DDL target. "SKIP": No-op. Example cases:
 *  the query is CREATE TABLE IF NOT EXISTS while the table already exists, or
 *  the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE":
 *  The query replaced the DDL target. Example case: the query is CREATE OR
 *  REPLACE TABLE, and the table already exists. "DROP": The query deleted the
 *  DDL target.
 */
@property(nonatomic, copy, nullable) NSString *ddlOperationPerformed;

/** The DDL target table. Present only for CREATE/DROP TABLE/VIEW queries. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *ddlTargetTable;

/**
 *  [Output-only] The original estimate of bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytesProcessed;

/** [Output-only, Beta] Information about create model query job progress. */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelTraining *modelTraining;

/**
 *  [Output-only, Beta] Deprecated; do not use.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingCurrentIteration;

/**
 *  [Output-only, Beta] Deprecated; do not use.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *modelTrainingExpectedTotalIteration;

/**
 *  [Output-only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** [Output-only] Describes execution plan for the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ExplainQueryStage *> *queryPlan;

/**
 *  [Output-only] Referenced tables for the job. Queries that reference more
 *  than 50 tables will not have a complete list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableReference *> *referencedTables;

/** [Output-only] Job resource usage breakdown by reservation. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_JobStatistics2_ReservationUsage_Item *> *reservationUsage;

/**
 *  [Output-only] The schema of the results. Present only for successful dry run
 *  of non-legacy SQL queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  The type of query statement, if valid. Possible values (new values might be
 *  added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "UPDATE": UPDATE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "DELETE": DELETE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "MERGE": MERGE query; see
 *  https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
 *  "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT.
 *  "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... .
 *  "DROP_TABLE": DROP TABLE query. "CREATE_VIEW": CREATE [OR REPLACE] VIEW ...
 *  AS SELECT ... . "DROP_VIEW": DROP VIEW query. "ALTER_TABLE": ALTER TABLE
 *  query. "ALTER_VIEW": ALTER VIEW query.
 */
@property(nonatomic, copy, nullable) NSString *statementType;

/** [Output-only] [Beta] Describes a timeline of job execution. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryTimelineSample *> *timeline;

/**
 *  [Output-only] Total bytes billed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesBilled;

/**
 *  [Output-only] Total bytes processed for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this
 *  field specifies the accuracy of the estimate. Possible values can be:
 *  UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise.
 *  LOWER_BOUND: estimate is lower bound of what the query would cost.
 *  UPPER_BOUND: estiamte is upper bound of what the query would cost.
 */
@property(nonatomic, copy, nullable) NSString *totalBytesProcessedAccuracy;

/**
 *  [Output-only] Total number of partitions processed from all partitioned
 *  tables referenced in the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalPartitionsProcessed;

/**
 *  [Output-only] Slot-milliseconds for the job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

/**
 *  Standard SQL only: list of undeclared query parameters detected during a dry
 *  run validation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *undeclaredQueryParameters;

@end


/**
 *  GTLRBigquery_JobStatistics2_ReservationUsage_Item
 */
@interface GTLRBigquery_JobStatistics2_ReservationUsage_Item : GTLRObject

/**
 *  [Output-only] Reservation name or "unreserved" for on-demand resources
 *  usage.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Output-only] Slot-milliseconds the job spent in the given reservation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slotMs;

@end


/**
 *  GTLRBigquery_JobStatistics3
 */
@interface GTLRBigquery_JobStatistics3 : GTLRObject

/**
 *  [Output-only] The number of bad records encountered. Note that if the job
 *  has failed because of more bad records encountered than the maximum allowed
 *  in the load job configuration, then this number can be less than the total
 *  number of bad records present in the input data.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *badRecords;

/**
 *  [Output-only] Number of bytes of source data in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFileBytes;

/**
 *  [Output-only] Number of source files in a load job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inputFiles;

/**
 *  [Output-only] Size of the loaded data in bytes. Note that while a load job
 *  is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputBytes;

/**
 *  [Output-only] Number of rows imported in a load job. Note that while an
 *  import job is in the running state, this value may change.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outputRows;

@end


/**
 *  GTLRBigquery_JobStatistics4
 */
@interface GTLRBigquery_JobStatistics4 : GTLRObject

/**
 *  [Output-only] Number of files per destination URI or URI pattern specified
 *  in the extract configuration. These values will be in the same order as the
 *  URIs specified in the 'destinationUris' field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *destinationUriFileCounts;

@end


/**
 *  GTLRBigquery_JobStatus
 */
@interface GTLRBigquery_JobStatus : GTLRObject

/**
 *  [Output-only] Final error result of the job. If present, indicates that the
 *  job has completed and was unsuccessful.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ErrorProto *errorResult;

/**
 *  [Output-only] The first errors encountered during the running of the job.
 *  The final message includes the number of errors that caused the process to
 *  stop. Errors here do not necessarily mean that the job has completed or was
 *  unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/** [Output-only] Running state of the job. */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Represents a single JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_JsonObject : GTLRObject
@end


/**
 *  GTLRBigquery_MaterializedViewDefinition
 */
@interface GTLRBigquery_MaterializedViewDefinition : GTLRObject

/**
 *  [Output-only] [TrustedTester] The time when this materialized view was last
 *  modified, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastRefreshTime;

/** [Required] A query whose result is persisted. */
@property(nonatomic, copy, nullable) NSString *query;

@end


/**
 *  GTLRBigquery_ModelDefinition
 */
@interface GTLRBigquery_ModelDefinition : GTLRObject

/**
 *  [Output-only, Beta] Model options used for the first training run. These
 *  options are immutable for subsequent training runs. Default values are used
 *  for any options not specified in the input query.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition_ModelOptions *modelOptions;

/**
 *  [Output-only, Beta] Information about ml training runs, each training run
 *  comprises of multiple iterations and there may be multiple training runs for
 *  the model if warm start is used or if a user decides to continue a
 *  previously cancelled query.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TrainingRun *> *trainingRuns;

@end


/**
 *  [Output-only, Beta] Model options used for the first training run. These
 *  options are immutable for subsequent training runs. Default values are used
 *  for any options not specified in the input query.
 */
@interface GTLRBigquery_ModelDefinition_ModelOptions : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *labels;
@property(nonatomic, copy, nullable) NSString *lossType;
@property(nonatomic, copy, nullable) NSString *modelType;

@end


/**
 *  GTLRBigquery_ModelTraining
 */
@interface GTLRBigquery_ModelTraining : GTLRObject

/**
 *  [Output-only, Beta] Index of current ML training iteration. Updated during
 *  create model query job to show job progress.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentIteration;

/**
 *  [Output-only, Beta] Expected number of iterations for the create model query
 *  job specified as num_iterations in the input query. The actual total number
 *  of iterations may be less than this number due to early stop.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedTotalIterations;

@end


/**
 *  GTLRBigquery_ProjectList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "projects" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_ProjectList : GTLRCollectionObject

/** A hash of the page of results */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of list. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Projects to which you have at least READ access.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ProjectList_Projects_Item *> *projects;

/**
 *  The total number of projects in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  GTLRBigquery_ProjectList_Projects_Item
 */
@interface GTLRBigquery_ProjectList_Projects_Item : GTLRObject

/** A descriptive name for this project. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of this project.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The numeric ID of this project.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numericId;

/** A unique reference to this project. */
@property(nonatomic, strong, nullable) GTLRBigquery_ProjectReference *projectReference;

@end


/**
 *  GTLRBigquery_ProjectReference
 */
@interface GTLRBigquery_ProjectReference : GTLRObject

/**
 *  [Required] ID of the project. Can be either the numeric ID or the assigned
 *  ID of the project.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  GTLRBigquery_QueryParameter
 */
@interface GTLRBigquery_QueryParameter : GTLRObject

/**
 *  [Optional] If unset, this is a positional parameter. Otherwise, should be
 *  unique within a query.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** [Required] The type of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *parameterType;

/** [Required] The value of this parameter. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue *parameterValue;

@end


/**
 *  GTLRBigquery_QueryParameterType
 */
@interface GTLRBigquery_QueryParameterType : GTLRObject

/** [Optional] The type of the array's elements, if this is an array. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *arrayType;

/**
 *  [Optional] The types of the fields of this struct, in order, if this is a
 *  struct.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterType_StructTypes_Item *> *structTypes;

/** [Required] The top level type of this field. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_QueryParameterType_StructTypes_Item
 */
@interface GTLRBigquery_QueryParameterType_StructTypes_Item : GTLRObject

/**
 *  [Optional] Human-oriented description of the field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** [Optional] The name of this field. */
@property(nonatomic, copy, nullable) NSString *name;

/** [Required] The type of this field. */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterType *type;

@end


/**
 *  GTLRBigquery_QueryParameterValue
 */
@interface GTLRBigquery_QueryParameterValue : GTLRObject

/** [Optional] The array values, if this is an array type. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameterValue *> *arrayValues;

/**
 *  [Optional] The struct field values, in order of the struct type's
 *  declaration.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_QueryParameterValue_StructValues *structValues;

/** [Optional] The value of this value, if a simple scalar type. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  [Optional] The struct field values, in order of the struct type's
 *  declaration.
 *
 *  @note This class is documented as having more properties of
 *        GTLRBigquery_QueryParameterValue. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRBigquery_QueryParameterValue_StructValues : GTLRObject
@end


/**
 *  GTLRBigquery_QueryRequest
 */
@interface GTLRBigquery_QueryRequest : GTLRObject

/**
 *  [Optional] Specifies the default datasetId and projectId to assume for any
 *  unqualified table names in the query. If not set, all table names in the
 *  query string must be qualified in the format 'datasetId.tableId'.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_DatasetReference *defaultDataset;

/**
 *  [Optional] If set to true, BigQuery doesn't run the job. Instead, if the
 *  query is valid, BigQuery returns statistics about the job such as how many
 *  bytes would be processed. If the query is invalid, an error returns. The
 *  default value is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/** The resource type of the request. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The geographic location where the job should run. See details at
 *  https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  [Optional] The maximum number of rows of data to return per page of results.
 *  Setting this flag to a small value such as 1000 and then paging through
 *  results might improve reliability when the query result set is large. In
 *  addition to this limit, responses are also limited to 10 MB. By default,
 *  there is no maximum row count, and only the byte limit applies.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxResults;

/**
 *  Standard SQL only. Set to POSITIONAL to use positional (?) query parameters
 *  or to NAMED to use named (\@myparam) query parameters in this query.
 */
@property(nonatomic, copy, nullable) NSString *parameterMode;

/**
 *  [Deprecated] This property is deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preserveNulls;

/**
 *  [Required] A query string, following the BigQuery query syntax, of the query
 *  to execute. Example: "SELECT count(f1) FROM
 *  [myProjectId:myDatasetId.myTableId]".
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Query parameters for Standard SQL queries. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_QueryParameter *> *queryParameters;

/**
 *  [Optional] How long to wait for the query to complete, in milliseconds,
 *  before the request times out and returns. Note that this is only a timeout
 *  for the request, not the query. If the query takes longer to run than the
 *  timeout value, the call returns without any results and with the
 *  'jobComplete' flag set to false. You can call GetQueryResults() to wait for
 *  the query to complete and read the results. The default value is 10000
 *  milliseconds (10 seconds).
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeoutMs;

/**
 *  Specifies whether to use BigQuery's legacy SQL dialect for this query. The
 *  default value is true. If set to false, the query will use BigQuery's
 *  standard SQL: https://cloud.google.com/bigquery/sql-reference/ When
 *  useLegacySql is set to false, the value of flattenResults is ignored; query
 *  will be run as if flattenResults is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/**
 *  [Optional] Whether to look for the result in the query cache. The query
 *  cache is a best-effort cache that will be flushed whenever tables in the
 *  query are modified. The default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useQueryCache;

@end


/**
 *  GTLRBigquery_QueryResponse
 */
@interface GTLRBigquery_QueryResponse : GTLRObject

/**
 *  Whether the query result was fetched from the query cache.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  [Output-only] The first errors or warnings encountered during the running of
 *  the job. The final message includes the number of errors that caused the
 *  process to stop. Errors here do not necessarily mean that the job has
 *  completed or was unsuccessful.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  Whether the query has completed or not. If rows or totalRows are present,
 *  this will always be true. If this is false, totalRows will not be available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *jobComplete;

/**
 *  Reference to the Job that was created to run the query. This field will be
 *  present even if the original request timed out, in which case
 *  GetQueryResults can be used to read the results once the query has
 *  completed. Since this API only returns the first page of results, subsequent
 *  pages can be fetched via the same mechanism (GetQueryResults).
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JobReference *jobReference;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  [Output-only] The number of rows affected by a DML statement. Present only
 *  for DML statements INSERT, UPDATE or DELETE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDmlAffectedRows;

/** A token used for paging results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  An object with as many results as can be contained within the maximum
 *  permitted reply size. To get any additional rows, you can call
 *  GetQueryResults and specify the jobReference returned above.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The schema of the results. Present only when the query completes
 *  successfully.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/**
 *  The total number of bytes processed for this query. If this query was a dry
 *  run, this is the number of bytes that would be processed if the query were
 *  run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesProcessed;

/**
 *  The total number of rows in the complete query result set, which can be more
 *  than the number of rows in this single page of results.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_QueryTimelineSample
 */
@interface GTLRBigquery_QueryTimelineSample : GTLRObject

/**
 *  Total number of units currently being processed by workers. This does not
 *  correspond directly to slot usage. This is the largest value observed since
 *  the last sample.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeUnits;

/**
 *  Total parallel units of work completed by this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completedUnits;

/**
 *  Milliseconds elapsed since the start of query execution.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *elapsedMs;

/**
 *  Total parallel units of work remaining for the active stages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingUnits;

/**
 *  Cumulative slot-ms consumed by the query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSlotMs;

@end


/**
 *  GTLRBigquery_RangePartitioning
 */
@interface GTLRBigquery_RangePartitioning : GTLRObject

/**
 *  [TrustedTester] [Required] The table is partitioned by this field. The field
 *  must be a top-level NULLABLE/REQUIRED field. The only supported type is
 *  INTEGER/INT64.
 */
@property(nonatomic, copy, nullable) NSString *field;

/** [TrustedTester] [Required] Defines the ranges for range partitioning. */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning_Range *range;

@end


/**
 *  [TrustedTester] [Required] Defines the ranges for range partitioning.
 */
@interface GTLRBigquery_RangePartitioning_Range : GTLRObject

/**
 *  [TrustedTester] [Required] The end of range partitioning, exclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  [TrustedTester] [Required] The width of each interval.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *interval;

/**
 *  [TrustedTester] [Required] The start of range partitioning, inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  GTLRBigquery_Streamingbuffer
 */
@interface GTLRBigquery_Streamingbuffer : GTLRObject

/**
 *  [Output-only] A lower-bound estimate of the number of bytes currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedBytes;

/**
 *  [Output-only] A lower-bound estimate of the number of rows currently in the
 *  streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedRows;

/**
 *  [Output-only] Contains the timestamp of the oldest entry in the streaming
 *  buffer, in milliseconds since the epoch, if the streaming buffer is
 *  available.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oldestEntryTime;

@end


/**
 *  GTLRBigquery_Table
 */
@interface GTLRBigquery_Table : GTLRObject

/**
 *  [Beta] Clustering specification for the table. Must be specified with
 *  partitioning, data in the table will be first partitioned and subsequently
 *  clustered.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  [Output-only] The time when this table was created, in milliseconds since
 *  the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  [Optional] A user-friendly description of this table.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Custom encryption configuration (e.g., Cloud KMS keys). */
@property(nonatomic, strong, nullable) GTLRBigquery_EncryptionConfiguration *encryptionConfiguration;

/**
 *  [Output-only] A hash of the table metadata. Used to ensure there were no
 *  concurrent modifications to the resource when attempting an update. Not
 *  guaranteed to change when the table contents or the fields numRows,
 *  numBytes, numLongTermBytes or lastModifiedTime change.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  [Optional] The time when this table expires, in milliseconds since the
 *  epoch. If not present, the table will persist indefinitely. Expired tables
 *  will be deleted and their storage reclaimed. The defaultTableExpirationMs
 *  property of the encapsulating dataset can be used to set a default
 *  expirationTime on newly created tables.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/**
 *  [Optional] Describes the data format, location, and other properties of a
 *  table stored outside of BigQuery. By defining these properties, the data
 *  source can then be queried as if it were a standard BigQuery table.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ExternalDataConfiguration *externalDataConfiguration;

/** [Optional] A descriptive name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  [Output-only] An opaque ID uniquely identifying the table.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** [Output-only] The type of the resource. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Table_Labels *labels;

/**
 *  [Output-only] The time when this table was last modified, in milliseconds
 *  since the epoch.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedTime;

/**
 *  [Output-only] The geographic location where the table resides. This value is
 *  inherited from the dataset.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** [Optional] Materialized view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_MaterializedViewDefinition *materializedView;

/**
 *  [Output-only, Beta] Present iff this table represents a ML model. Describes
 *  the training information for the model, and it is required to run 'PREDICT'
 *  queries.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_ModelDefinition *model;

/**
 *  [Output-only] The size of this table in bytes, excluding any data in the
 *  streaming buffer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numBytes;

/**
 *  [Output-only] The number of bytes in the table that are considered
 *  "long-term storage".
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLongTermBytes;

/**
 *  [Output-only] [TrustedTester] The physical size of this table in bytes,
 *  excluding any data in the streaming buffer. This includes compression and
 *  storage used for time travel.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPhysicalBytes;

/**
 *  [Output-only] The number of rows of data in this table, excluding any data
 *  in the streaming buffer.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numRows;

/**
 *  [TrustedTester] Range partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_RangePartitioning *rangePartitioning;

/**
 *  [Beta] [Optional] If set to true, queries over this table require a
 *  partition filter that can be used for partition elimination to be specified.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/** [Optional] Describes the schema of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableSchema *schema;

/** [Output-only] A URL that can be used to access this resource again. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  [Output-only] Contains information regarding this table's streaming buffer,
 *  if one is present. This field will be absent if the table is not being
 *  streamed to or if there is no data in the streaming buffer.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_Streamingbuffer *streamingBuffer;

/** [Required] Reference describing the ID of this table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  Time-based partitioning specification for this table. Only one of
 *  timePartitioning and rangePartitioning should be specified.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/**
 *  [Output-only] Describes the table type. The following values are supported:
 *  TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL
 *  query. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is
 *  persisted. EXTERNAL: A table that references data stored in an external
 *  storage system, such as Google Cloud Storage. The default value is TABLE.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** [Optional] The view definition. */
@property(nonatomic, strong, nullable) GTLRBigquery_ViewDefinition *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables. Label keys and values can be no longer than 63
 *  characters, can only contain lowercase letters, numeric characters,
 *  underscores and dashes. International characters are allowed. Label values
 *  are optional. Label keys must start with a letter and each label in the list
 *  must have a different key.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_Table_Labels : GTLRObject
@end


/**
 *  GTLRBigquery_TableCell
 */
@interface GTLRBigquery_TableCell : GTLRObject

/**
 *  v
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id v;

@end


/**
 *  GTLRBigquery_TableDataInsertAllRequest
 */
@interface GTLRBigquery_TableDataInsertAllRequest : GTLRObject

/**
 *  [Optional] Accept rows that contain values that do not match the schema. The
 *  unknown values are ignored. Default is false, which treats unknown values as
 *  errors.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreUnknownValues;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The rows to insert. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllRequest_Rows_Item *> *rows;

/**
 *  [Optional] Insert all valid rows of a request, even if invalid rows exist.
 *  The default value is false, which causes the entire request to fail if any
 *  invalid rows exist.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipInvalidRows;

/**
 *  If specified, treats the destination table as a base template, and inserts
 *  the rows into an instance table named "{destination}{templateSuffix}".
 *  BigQuery will manage creation of the instance table, using the schema of the
 *  base template table. See
 *  https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables
 *  for considerations when working with templates tables.
 */
@property(nonatomic, copy, nullable) NSString *templateSuffix;

@end


/**
 *  GTLRBigquery_TableDataInsertAllRequest_Rows_Item
 */
@interface GTLRBigquery_TableDataInsertAllRequest_Rows_Item : GTLRObject

/**
 *  [Optional] A unique ID for each row. BigQuery uses this property to detect
 *  duplicate insertion requests on a best-effort basis.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/**
 *  [Required] A JSON object that contains a row of data. The object's
 *  properties and values must match the destination table's schema.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_JsonObject *json;

@end


/**
 *  GTLRBigquery_TableDataInsertAllResponse
 */
@interface GTLRBigquery_TableDataInsertAllResponse : GTLRObject

/** An array of errors for rows that were not inserted. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item *> *insertErrors;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item
 */
@interface GTLRBigquery_TableDataInsertAllResponse_InsertErrors_Item : GTLRObject

/** Error information for the row indicated by the index property. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_ErrorProto *> *errors;

/**
 *  The index of the row that error applies to.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

@end


/**
 *  GTLRBigquery_TableDataList
 */
@interface GTLRBigquery_TableDataList : GTLRObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The resource type of the response. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A token used for paging results. Providing this token instead of the
 *  startIndex parameter can help you retrieve stable results when an underlying
 *  table is changing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Rows of results. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableRow *> *rows;

/**
 *  The total number of rows in the complete table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalRows;

@end


/**
 *  GTLRBigquery_TableFieldSchema
 */
@interface GTLRBigquery_TableFieldSchema : GTLRObject

/**
 *  [Optional] The field description. The maximum length is 1,024 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  [Optional] Describes the nested schema fields if the type property is set to
 *  RECORD.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

/**
 *  [Optional] The field mode. Possible values include NULLABLE, REQUIRED and
 *  REPEATED. The default value is NULLABLE.
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  [Required] The field name. The name must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_), and must start with a letter or
 *  underscore. The maximum length is 128 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  [Required] The field data type. Possible values include STRING, BYTES,
 *  INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), BOOLEAN,
 *  BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, RECORD (where
 *  RECORD indicates that the field contains a nested schema) or STRUCT (same as
 *  RECORD).
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_TableList
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tables" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigquery_TableList : GTLRCollectionObject

/** A hash of this page of results. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of list. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A token to request the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Tables in the requested dataset.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableList_Tables_Item *> *tables;

/**
 *  The total number of tables in the dataset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalItems;

@end


/**
 *  GTLRBigquery_TableList_Tables_Item
 */
@interface GTLRBigquery_TableList_Tables_Item : GTLRObject

/** [Beta] Clustering specification for this table, if configured. */
@property(nonatomic, strong, nullable) GTLRBigquery_Clustering *clustering;

/**
 *  The time when this table was created, in milliseconds since the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/**
 *  [Optional] The time when this table expires, in milliseconds since the
 *  epoch. If not present, the table will persist indefinitely. Expired tables
 *  will be deleted and their storage reclaimed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTime;

/** The user-friendly name for this table. */
@property(nonatomic, copy, nullable) NSString *friendlyName;

/**
 *  An opaque ID of the table
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The resource type. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_Labels *labels;

/** A reference uniquely identifying the table. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableReference *tableReference;

/**
 *  The time-based partitioning specification for this table, if configured.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TimePartitioning *timePartitioning;

/** The type of table. Possible values are: TABLE, VIEW. */
@property(nonatomic, copy, nullable) NSString *type;

/** Additional details for a view. */
@property(nonatomic, strong, nullable) GTLRBigquery_TableList_Tables_Item_View *view;

@end


/**
 *  The labels associated with this table. You can use these to organize and
 *  group your tables.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRBigquery_TableList_Tables_Item_Labels : GTLRObject
@end


/**
 *  Additional details for a view.
 */
@interface GTLRBigquery_TableList_Tables_Item_View : GTLRObject

/**
 *  True if view is defined in legacy SQL dialect, false if in standard SQL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

@end


/**
 *  GTLRBigquery_TableReference
 */
@interface GTLRBigquery_TableReference : GTLRObject

/** [Required] The ID of the dataset containing this table. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/** [Required] The ID of the project containing this table. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  [Required] The ID of the table. The ID must contain only letters (a-z, A-Z),
 *  numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
 */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  GTLRBigquery_TableRow
 */
@interface GTLRBigquery_TableRow : GTLRObject

/**
 *  Represents a single row in the result set, consisting of one or more fields.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableCell *> *f;

@end


/**
 *  GTLRBigquery_TableSchema
 */
@interface GTLRBigquery_TableSchema : GTLRObject

/** Describes the fields in a table. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_TableFieldSchema *> *fields;

@end


/**
 *  GTLRBigquery_TimePartitioning
 */
@interface GTLRBigquery_TimePartitioning : GTLRObject

/**
 *  [Optional] Number of milliseconds for which to keep the storage for
 *  partitions in the table. The storage in a partition will have an expiration
 *  time of its partition time plus this value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationMs;

/**
 *  [Beta] [Optional] If not set, the table is partitioned by pseudo column,
 *  referenced via either '_PARTITIONTIME' as TIMESTAMP type, or
 *  '_PARTITIONDATE' as DATE type. If field is specified, the table is instead
 *  partitioned by this field. The field must be a top-level TIMESTAMP or DATE
 *  field. Its mode must be NULLABLE or REQUIRED.
 */
@property(nonatomic, copy, nullable) NSString *field;

/**
 *  requirePartitionFilter
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requirePartitionFilter;

/**
 *  [Required] The only type supported is DAY, which will generate one partition
 *  per day.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRBigquery_TrainingRun
 */
@interface GTLRBigquery_TrainingRun : GTLRObject

/** [Output-only, Beta] List of each iteration results. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_IterationResult *> *iterationResults;

/**
 *  [Output-only, Beta] Training run start time in milliseconds since the epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  [Output-only, Beta] Different state applicable for a training run. IN
 *  PROGRESS: Training run is in progress. FAILED: Training run ended due to a
 *  non-retryable failure. SUCCEEDED: Training run successfully completed.
 *  CANCELLED: Training run cancelled by the user.
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  [Output-only, Beta] Training options used by this training run. These
 *  options are mutable for subsequent training runs. Default values are
 *  explicitly stored for options not specified in the input query of the first
 *  training run. For subsequent training runs, any option not explicitly
 *  specified in the input query will be copied from the previous training run.
 */
@property(nonatomic, strong, nullable) GTLRBigquery_TrainingRun_TrainingOptions *trainingOptions;

@end


/**
 *  [Output-only, Beta] Training options used by this training run. These
 *  options are mutable for subsequent training runs. Default values are
 *  explicitly stored for options not specified in the input query of the first
 *  training run. For subsequent training runs, any option not explicitly
 *  specified in the input query will be copied from the previous training run.
 */
@interface GTLRBigquery_TrainingRun_TrainingOptions : GTLRObject

/**
 *  earlyStop
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *earlyStop;

/**
 *  l1Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l1Reg;

/**
 *  l2Reg
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *l2Reg;

/**
 *  learnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *learnRate;

@property(nonatomic, copy, nullable) NSString *learnRateStrategy;

/**
 *  lineSearchInitLearnRate
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSearchInitLearnRate;

/**
 *  maxIteration
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxIteration;

/**
 *  minRelProgress
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRelProgress;

/**
 *  warmStart
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warmStart;

@end


/**
 *  GTLRBigquery_UserDefinedFunctionResource
 */
@interface GTLRBigquery_UserDefinedFunctionResource : GTLRObject

/**
 *  [Pick one] An inline resource that contains code for a user-defined function
 *  (UDF). Providing a inline code resource is equivalent to providing a URI for
 *  a file containing the same code.
 */
@property(nonatomic, copy, nullable) NSString *inlineCode;

/**
 *  [Pick one] A code resource to load from a Google Cloud Storage URI
 *  (gs://bucket/path).
 */
@property(nonatomic, copy, nullable) NSString *resourceUri;

@end


/**
 *  GTLRBigquery_ViewDefinition
 */
@interface GTLRBigquery_ViewDefinition : GTLRObject

/** [Required] A query that BigQuery executes when the view is referenced. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Specifies whether to use BigQuery's legacy SQL for this view. The default
 *  value is true. If set to false, the view will use BigQuery's standard SQL:
 *  https://cloud.google.com/bigquery/sql-reference/ Queries and views that
 *  reference this view must use the same flag value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useLegacySql;

/** Describes user-defined function resources used in the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigquery_UserDefinedFunctionResource *> *userDefinedFunctionResources;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
