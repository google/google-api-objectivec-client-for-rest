// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Proximity Beacon API (proximitybeacon/v1beta1)
// Description:
//   Registers, manages, indexes, and searches beacons.
// Documentation:
//   https://developers.google.com/beacons/proximity/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRProximityBeacon_Beacon;
@class GTLRProximityBeacon_BeaconAttachment;
@class GTLRProximityBeacon_GetInfoForObservedBeaconsRequest;
@class GTLRProximityBeacon_Namespace;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// alertFilter

/** Value: "ALERT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRProximityBeaconAlertFilterAlertUnspecified;
/** Value: "LOW_ACTIVITY" */
GTLR_EXTERN NSString * const kGTLRProximityBeaconAlertFilterLowActivity;
/** Value: "LOW_BATTERY" */
GTLR_EXTERN NSString * const kGTLRProximityBeaconAlertFilterLowBattery;
/** Value: "WRONG_LOCATION" */
GTLR_EXTERN NSString * const kGTLRProximityBeaconAlertFilterWrongLocation;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other ProximityBeacon query classes.
 */
@interface GTLRProximityBeaconQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Given one or more beacon observations, returns any beacon information
 *  and attachments accessible to your application. Authorize by using the
 *  [API
 *  key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key)
 *  for the application.
 *
 *  Method: proximitybeacon.beaconinfo.getforobserved
 */
@interface GTLRProximityBeaconQuery_BeaconinfoGetforobserved : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconinfoGetforobservedWithObject:]

/**
 *  Fetches a @c GTLRProximityBeacon_GetInfoForObservedBeaconsResponse.
 *
 *  Given one or more beacon observations, returns any beacon information
 *  and attachments accessible to your application. Authorize by using the
 *  [API
 *  key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key)
 *  for the application.
 *
 *  @param object The @c GTLRProximityBeacon_GetInfoForObservedBeaconsRequest to
 *    include in the query.
 *
 *  @return GTLRProximityBeaconQuery_BeaconinfoGetforobserved
 */
+ (instancetype)queryWithObject:(GTLRProximityBeacon_GetInfoForObservedBeaconsRequest *)object;

@end

/**
 *  Activates a beacon. A beacon that is active will return information
 *  and attachment data when queried via `beaconinfo.getforobserved`.
 *  Calling this method on an already active beacon will do nothing (but
 *  will return a successful response code).
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsActivate : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsActivateWithbeaconName:]

/**
 *  Beacon that should be activated. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to activate. If the project id is not
 *  specified then the project making the request is used. The project id
 *  must match the project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Empty.
 *
 *  Activates a beacon. A beacon that is active will return information
 *  and attachment data when queried via `beaconinfo.getforobserved`.
 *  Calling this method on an already active beacon will do nothing (but
 *  will return a successful response code).
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param beaconName Beacon that should be activated. A beacon name has the
 *    format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsActivate
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Deletes multiple attachments on a given beacon. This operation is
 *  permanent and cannot be undone.
 *  You can optionally specify `namespacedType` to choose which attachments
 *  should be deleted. If you do not specify `namespacedType`, all your
 *  attachments on the given beacon will be deleted. You also may explicitly
 *  specify `* / *` to delete all.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.attachments.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsAttachmentsBatchDelete : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsAttachmentsBatchDeleteWithbeaconName:]

/**
 *  The beacon whose attachments should be deleted. A beacon name has the
 *  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *  by the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  Specifies the namespace and type of attachments to delete in
 *  `namespace/type` format. Accepts `* / *` to specify
 *  "all types in all namespaces".
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *namespacedType;

/**
 *  The project id to delete beacon attachments under. This field can be
 *  used when "*" is specified to mean all attachment namespaces. Projects
 *  may have multiple attachments with multiple namespaces. If "*" is
 *  specified and the projectId string is empty, then the project
 *  making the request is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_DeleteAttachmentsResponse.
 *
 *  Deletes multiple attachments on a given beacon. This operation is
 *  permanent and cannot be undone.
 *  You can optionally specify `namespacedType` to choose which attachments
 *  should be deleted. If you do not specify `namespacedType`, all your
 *  attachments on the given beacon will be deleted. You also may explicitly
 *  specify `* / *` to delete all.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param beaconName The beacon whose attachments should be deleted. A beacon
 *    name has the
 *    format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *    by the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsAttachmentsBatchDelete
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Associates the given data with the specified beacon. Attachment data must
 *  contain two parts:
 *  <ul>
 *  <li>A namespaced type.</li>
 *  <li>The actual attachment data itself.</li>
 *  </ul>
 *  The namespaced type consists of two parts, the namespace and the type.
 *  The namespace must be one of the values returned by the `namespaces`
 *  endpoint, while the type can be a string of any characters except for the
 *  forward slash (`/`) up to 100 characters in length.
 *  Attachment data can be up to 1024 bytes long.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.attachments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsAttachmentsCreate : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsAttachmentsCreateWithObject:beaconName:]

/**
 *  Beacon on which the attachment should be created. A beacon name has the
 *  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *  by the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the project the attachment will belong to. If
 *  the project id is not specified then the project making the request
 *  is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_BeaconAttachment.
 *
 *  Associates the given data with the specified beacon. Attachment data must
 *  contain two parts:
 *  <ul>
 *  <li>A namespaced type.</li>
 *  <li>The actual attachment data itself.</li>
 *  </ul>
 *  The namespaced type consists of two parts, the namespace and the type.
 *  The namespace must be one of the values returned by the `namespaces`
 *  endpoint, while the type can be a string of any characters except for the
 *  forward slash (`/`) up to 100 characters in length.
 *  Attachment data can be up to 1024 bytes long.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param object The @c GTLRProximityBeacon_BeaconAttachment to include in the
 *    query.
 *  @param beaconName Beacon on which the attachment should be created. A beacon
 *    name has the
 *    format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *    by the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsAttachmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRProximityBeacon_BeaconAttachment *)object
                     beaconName:(NSString *)beaconName;

@end

/**
 *  Deletes the specified attachment for the given beacon. Each attachment has
 *  a unique attachment name (`attachmentName`) which is returned when you
 *  fetch the attachment data via this API. You specify this with the delete
 *  request to control which attachment is removed. This operation cannot be
 *  undone.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.attachments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsAttachmentsDelete : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsAttachmentsDeleteWithattachmentName:]

/**
 *  The attachment name (`attachmentName`) of
 *  the attachment to remove. For example:
 *  `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
 *  Eddystone-EID beacons, the beacon ID portion (`3!893737abc9`) may be the
 *  beacon's current EID, or its "stable" Eddystone-UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *attachmentName;

/**
 *  The project id of the attachment to delete. If not provided, the project
 *  that is making the request is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Empty.
 *
 *  Deletes the specified attachment for the given beacon. Each attachment has
 *  a unique attachment name (`attachmentName`) which is returned when you
 *  fetch the attachment data via this API. You specify this with the delete
 *  request to control which attachment is removed. This operation cannot be
 *  undone.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param attachmentName The attachment name (`attachmentName`) of
 *    the attachment to remove. For example:
 *    `beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738`. For
 *    Eddystone-EID beacons, the beacon ID portion (`3!893737abc9`) may be the
 *    beacon's current EID, or its "stable" Eddystone-UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsAttachmentsDelete
 */
+ (instancetype)queryWithAttachmentName:(NSString *)attachmentName;

@end

/**
 *  Returns the attachments for the specified beacon that match the specified
 *  namespaced-type pattern.
 *  To control which namespaced types are returned, you add the
 *  `namespacedType` query parameter to the request. You must either use
 *  `* / *`, to return all attachments, or the namespace must be one of
 *  the ones returned from the `namespaces` endpoint.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.attachments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsAttachmentsList : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsAttachmentsListWithbeaconName:]

/**
 *  Beacon whose attachments should be fetched. A beacon name has the
 *  format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *  by the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  Specifies the namespace and type of attachment to include in response in
 *  <var>namespace/type</var> format. Accepts `* / *` to specify
 *  "all types in all namespaces".
 */
@property(nonatomic, copy, nullable) NSString *namespacedType;

/**
 *  The project id to list beacon attachments under. This field can be
 *  used when "*" is specified to mean all attachment namespaces. Projects
 *  may have multiple attachments with multiple namespaces. If "*" is
 *  specified and the projectId string is empty, then the project
 *  making the request is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_ListBeaconAttachmentsResponse.
 *
 *  Returns the attachments for the specified beacon that match the specified
 *  namespaced-type pattern.
 *  To control which namespaced types are returned, you add the
 *  `namespacedType` query parameter to the request. You must either use
 *  `* / *`, to return all attachments, or the namespace must be one of
 *  the ones returned from the `namespaces` endpoint.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  @param beaconName Beacon whose attachments should be fetched. A beacon name
 *    has the
 *    format "beacons/N!beaconId" where the beaconId is the base16 ID broadcast
 *    by the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsAttachmentsList
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Deactivates a beacon. Once deactivated, the API will not return
 *  information nor attachment data for the beacon when queried via
 *  `beaconinfo.getforobserved`. Calling this method on an already inactive
 *  beacon will do nothing (but will return a successful response code).
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.deactivate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsDeactivate : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsDeactivateWithbeaconName:]

/**
 *  Beacon that should be deactivated. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to deactivate. If the project id is not
 *  specified then the project making the request is used. The project id must
 *  match the project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Empty.
 *
 *  Deactivates a beacon. Once deactivated, the API will not return
 *  information nor attachment data for the beacon when queried via
 *  `beaconinfo.getforobserved`. Calling this method on an already inactive
 *  beacon will do nothing (but will return a successful response code).
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param beaconName Beacon that should be deactivated. A beacon name has the
 *    format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsDeactivate
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Decommissions the specified beacon in the service. This beacon will no
 *  longer be returned from `beaconinfo.getforobserved`. This operation is
 *  permanent -- you will not be able to re-register a beacon with this ID
 *  again.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.decommission
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsDecommission : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsDecommissionWithbeaconName:]

/**
 *  Beacon that should be decommissioned. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID of the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to decommission. If the project id is not
 *  specified then the project making the request is used. The project id
 *  must match the project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Empty.
 *
 *  Decommissions the specified beacon in the service. This beacon will no
 *  longer be returned from `beaconinfo.getforobserved`. This operation is
 *  permanent -- you will not be able to re-register a beacon with this ID
 *  again.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param beaconName Beacon that should be decommissioned. A beacon name has
 *    the format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID of the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsDecommission
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Deletes the specified beacon including all diagnostics data for the beacon
 *  as well as any attachments on the beacon (including those belonging to
 *  other projects). This operation cannot be undone.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsDelete : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsDeleteWithbeaconName:]

/**
 *  Beacon that should be deleted. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to delete. If not provided, the project
 *  that is making the request is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Empty.
 *
 *  Deletes the specified beacon including all diagnostics data for the beacon
 *  as well as any attachments on the beacon (including those belonging to
 *  other projects). This operation cannot be undone.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param beaconName Beacon that should be deleted. A beacon name has the
 *    format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsDelete
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  List the diagnostics for a single beacon. You can also list diagnostics for
 *  all the beacons owned by your Google Developers Console project by using
 *  the beacon name `beacons/-`.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.diagnostics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsDiagnosticsList : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsDiagnosticsListWithbeaconName:]

/**
 *  Requests only beacons that have the given alert. For example, to find
 *  beacons that have low batteries use `alert_filter=LOW_BATTERY`.
 *
 *  Likely values:
 *    @arg @c kGTLRProximityBeaconAlertFilterAlertUnspecified Value
 *        "ALERT_UNSPECIFIED"
 *    @arg @c kGTLRProximityBeaconAlertFilterWrongLocation Value
 *        "WRONG_LOCATION"
 *    @arg @c kGTLRProximityBeaconAlertFilterLowBattery Value "LOW_BATTERY"
 *    @arg @c kGTLRProximityBeaconAlertFilterLowActivity Value "LOW_ACTIVITY"
 */
@property(nonatomic, copy, nullable) NSString *alertFilter;

/** Beacon that the diagnostics are for. */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  Specifies the maximum number of results to return. Defaults to
 *  10. Maximum 1000. Optional.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Requests results that occur after the `page_token`, obtained from the
 *  response to a previous request. Optional.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Requests only diagnostic records for the given project id. If not set,
 *  then the project making the request will be used for looking up
 *  diagnostic records. Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_ListDiagnosticsResponse.
 *
 *  List the diagnostics for a single beacon. You can also list diagnostics for
 *  all the beacons owned by your Google Developers Console project by using
 *  the beacon name `beacons/-`.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  @param beaconName Beacon that the diagnostics are for.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsDiagnosticsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Returns detailed information about the specified beacon.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *  Requests may supply an Eddystone-EID beacon name in the form:
 *  `beacons/4!beaconId` where the `beaconId` is the base16 ephemeral ID
 *  broadcast by the beacon. The returned `Beacon` object will contain the
 *  beacon's stable Eddystone-UID. Clients not authorized to resolve the
 *  beacon's ephemeral Eddystone-EID broadcast will receive an error.
 *
 *  Method: proximitybeacon.beacons.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsGet : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsGetWithbeaconName:]

/**
 *  Resource name of this beacon. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *  for AltBeacon. For Eddystone-EID beacons, you may use either the
 *  current EID or the beacon's "stable" UID.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to request. If the project id is not specified
 *  then the project making the request is used. The project id must match the
 *  project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Beacon.
 *
 *  Returns detailed information about the specified beacon.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *  Requests may supply an Eddystone-EID beacon name in the form:
 *  `beacons/4!beaconId` where the `beaconId` is the base16 ephemeral ID
 *  broadcast by the beacon. The returned `Beacon` object will contain the
 *  beacon's stable Eddystone-UID. Clients not authorized to resolve the
 *  beacon's ephemeral Eddystone-EID broadcast will receive an error.
 *
 *  @param beaconName Resource name of this beacon. A beacon name has the format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone-UID, `4` for Eddystone-EID, `1` for iBeacon, or `5`
 *    for AltBeacon. For Eddystone-EID beacons, you may use either the
 *    current EID or the beacon's "stable" UID.
 *    Required.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsGet
 */
+ (instancetype)queryWithBeaconName:(NSString *)beaconName;

@end

/**
 *  Searches the beacon registry for beacons that match the given search
 *  criteria. Only those beacons that the client has permission to list
 *  will be returned.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsList : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsList]

/**
 *  The maximum number of records to return for this request, up to a
 *  server-defined upper limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A pagination token obtained from a previous request to list beacons. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The project id to list beacons under. If not present then the project
 *  credential that made the request is used as the project.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Filter query string that supports the following field filters:
 *  * **description:`"<string>"`**
 *  For example: **description:"Room 3"**
 *  Returns beacons whose description matches tokens in the string "Room 3"
 *  (not necessarily that exact string).
 *  The string must be double-quoted.
 *  * **status:`<enum>`**
 *  For example: **status:active**
 *  Returns beacons whose status matches the given value. Values must be
 *  one of the Beacon.Status enum values (case insensitive). Accepts
 *  multiple filters which will be combined with OR logic.
 *  * **stability:`<enum>`**
 *  For example: **stability:mobile**
 *  Returns beacons whose expected stability matches the given value.
 *  Values must be one of the Beacon.Stability enum values (case
 *  insensitive). Accepts multiple filters which will be combined with
 *  OR logic.
 *  * **place\\_id:`"<string>"`**
 *  For example: **place\\_id:"ChIJVSZzVR8FdkgRXGmmm6SslKw="**
 *  Returns beacons explicitly registered at the given place, expressed as
 *  a Place ID obtained from [Google Places API](/places/place-id). Does not
 *  match places inside the given place. Does not consider the beacon's
 *  actual location (which may be different from its registered place).
 *  Accepts multiple filters that will be combined with OR logic. The place
 *  ID must be double-quoted.
 *  * **registration\\_time`[<|>|<=|>=]<integer>`**
 *  For example: **registration\\_time>=1433116800**
 *  Returns beacons whose registration time matches the given filter.
 *  Supports the operators: <, >, <=, and >=. Timestamp must be expressed as
 *  an integer number of seconds since midnight January 1, 1970 UTC. Accepts
 *  at most two filters that will be combined with AND logic, to support
 *  "between" semantics. If more than two are supplied, the latter ones are
 *  ignored.
 *  * **lat:`<double> lng:<double> radius:<integer>`**
 *  For example: **lat:51.1232343 lng:-1.093852 radius:1000**
 *  Returns beacons whose registered location is within the given circle.
 *  When any of these fields are given, all are required. Latitude and
 *  longitude must be decimal degrees between -90.0 and 90.0 and between
 *  -180.0 and 180.0 respectively. Radius must be an integer number of
 *  meters between 10 and 1,000,000 (1000 km).
 *  * **property:`"<string>=<string>"`**
 *  For example: **property:"battery-type=CR2032"**
 *  Returns beacons which have a property of the given name and value.
 *  Supports multiple filters which will be combined with OR logic.
 *  The entire name=value string must be double-quoted as one string.
 *  * **attachment\\_type:`"<string>"`**
 *  For example: **attachment_type:"my-namespace/my-type"**
 *  Returns beacons having at least one attachment of the given namespaced
 *  type. Supports "any within this namespace" via the partial wildcard
 *  syntax: "my-namespace/ *". Supports multiple filters which will be
 *  combined with OR logic. The string must be double-quoted.
 *  * **indoor\\_level:`"<string>"`**
 *  For example: **indoor\\_level:"1"**
 *  Returns beacons which are located on the given indoor level. Accepts
 *  multiple filters that will be combined with OR logic.
 *  Multiple filters on the same field are combined with OR logic (except
 *  registration_time which is combined with AND logic).
 *  Multiple filters on different fields are combined with AND logic.
 *  Filters should be separated by spaces.
 *  As with any HTTP query string parameter, the whole filter expression must
 *  be URL-encoded.
 *  Example REST request:
 *  `GET
 *  /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000`
 */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  Fetches a @c GTLRProximityBeacon_ListBeaconsResponse.
 *
 *  Searches the beacon registry for beacons that match the given search
 *  criteria. Only those beacons that the client has permission to list
 *  will be returned.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Registers a previously unregistered beacon given its `advertisedId`.
 *  These IDs are unique within the system. An ID can be registered only once.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsRegister : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsRegisterWithObject:]

/**
 *  The project id of the project the beacon will be registered to. If
 *  the project id is not specified then the project making the request
 *  is used.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Beacon.
 *
 *  Registers a previously unregistered beacon given its `advertisedId`.
 *  These IDs are unique within the system. An ID can be registered only once.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param object The @c GTLRProximityBeacon_Beacon to include in the query.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsRegister
 */
+ (instancetype)queryWithObject:(GTLRProximityBeacon_Beacon *)object;

@end

/**
 *  Updates the information about the specified beacon. **Any field that you do
 *  not populate in the submitted beacon will be permanently erased**, so you
 *  should follow the "read, modify, write" pattern to avoid inadvertently
 *  destroying data.
 *  Changes to the beacon status via this method will be silently ignored.
 *  To update beacon status, use the separate methods on this API for
 *  activation, deactivation, and decommissioning.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  Method: proximitybeacon.beacons.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_BeaconsUpdate : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForBeaconsUpdateWithObject:beaconName:]

/**
 *  Resource name of this beacon. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
 *  This field must be left empty when registering. After reading a beacon,
 *  clients can use the name for future operations.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The project id of the beacon to update. If the project id is not
 *  specified then the project making the request is used. The project id
 *  must match the project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Beacon.
 *
 *  Updates the information about the specified beacon. **Any field that you do
 *  not populate in the submitted beacon will be permanently erased**, so you
 *  should follow the "read, modify, write" pattern to avoid inadvertently
 *  destroying data.
 *  Changes to the beacon status via this method will be silently ignored.
 *  To update beacon status, use the separate methods on this API for
 *  activation, deactivation, and decommissioning.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **Is owner** or **Can edit** permissions in the
 *  Google Developers Console project.
 *
 *  @param object The @c GTLRProximityBeacon_Beacon to include in the query.
 *  @param beaconName Resource name of this beacon. A beacon name has the format
 *    "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *    the beacon and N is a code for the beacon's type. Possible values are
 *    `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
 *    This field must be left empty when registering. After reading a beacon,
 *    clients can use the name for future operations.
 *
 *  @return GTLRProximityBeaconQuery_BeaconsUpdate
 */
+ (instancetype)queryWithObject:(GTLRProximityBeacon_Beacon *)object
                     beaconName:(NSString *)beaconName;

@end

/**
 *  Lists all attachment namespaces owned by your Google Developers Console
 *  project. Attachment data associated with a beacon must include a
 *  namespaced type, and the namespace must be owned by your project.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  Method: proximitybeacon.namespaces.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_NamespacesList : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForNamespacesList]

/**
 *  The project id to list namespaces under.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_ListNamespacesResponse.
 *
 *  Lists all attachment namespaces owned by your Google Developers Console
 *  project. Attachment data associated with a beacon must include a
 *  namespaced type, and the namespace must be owned by your project.
 *  Authenticate using an [OAuth access
 *  token](https://developers.google.com/identity/protocols/OAuth2)
 *  from a signed-in user with **viewer**, **Is owner** or **Can edit**
 *  permissions in the Google Developers Console project.
 *
 *  @return GTLRProximityBeaconQuery_NamespacesList
 */
+ (instancetype)query;

@end

/**
 *  Updates the information about the specified namespace. Only the namespace
 *  visibility can be updated.
 *
 *  Method: proximitybeacon.namespaces.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_NamespacesUpdate : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForNamespacesUpdateWithObject:namespaceName:]

/**
 *  Resource name of this namespace. Namespaces names have the format:
 *  <code>namespaces/<var>namespace</var></code>.
 */
@property(nonatomic, copy, nullable) NSString *namespaceName;

/**
 *  The project id of the namespace to update. If the project id is not
 *  specified then the project making the request is used. The project id
 *  must match the project that owns the beacon.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRProximityBeacon_Namespace.
 *
 *  Updates the information about the specified namespace. Only the namespace
 *  visibility can be updated.
 *
 *  @param object The @c GTLRProximityBeacon_Namespace to include in the query.
 *  @param namespaceName Resource name of this namespace. Namespaces names have
 *    the format:
 *    <code>namespaces/<var>namespace</var></code>.
 *
 *  @return GTLRProximityBeaconQuery_NamespacesUpdate
 */
+ (instancetype)queryWithObject:(GTLRProximityBeacon_Namespace *)object
                  namespaceName:(NSString *)namespaceName;

@end

/**
 *  Gets the Proximity Beacon API's current public key and associated
 *  parameters used to initiate the Diffie-Hellman key exchange required to
 *  register a beacon that broadcasts the Eddystone-EID format. This key
 *  changes periodically; clients may cache it and re-use the same public key
 *  to provision and register multiple beacons. However, clients should be
 *  prepared to refresh this key when they encounter an error registering an
 *  Eddystone-EID beacon.
 *
 *  Method: proximitybeacon.getEidparams
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeProximityBeaconUserlocationBeaconRegistry
 */
@interface GTLRProximityBeaconQuery_V1beta1GetEidparams : GTLRProximityBeaconQuery
// Previous library name was
//   +[GTLQueryProximityBeacon queryForGetEidparams]

/**
 *  Fetches a @c GTLRProximityBeacon_EphemeralIdRegistrationParams.
 *
 *  Gets the Proximity Beacon API's current public key and associated
 *  parameters used to initiate the Diffie-Hellman key exchange required to
 *  register a beacon that broadcasts the Eddystone-EID format. This key
 *  changes periodically; clients may cache it and re-use the same public key
 *  to provision and register multiple beacons. However, clients should be
 *  prepared to refresh this key when they encounter an error registering an
 *  Eddystone-EID beacon.
 *
 *  @return GTLRProximityBeaconQuery_V1beta1GetEidparams
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
