// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Proximity Beacon API (proximitybeacon/v1beta1)
// Description:
//   Registers, manages, indexes, and searches beacons.
// Documentation:
//   https://developers.google.com/beacons/proximity/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRProximityBeacon_AdvertisedId;
@class GTLRProximityBeacon_AttachmentInfo;
@class GTLRProximityBeacon_Beacon;
@class GTLRProximityBeacon_Beacon_Properties;
@class GTLRProximityBeacon_BeaconAttachment;
@class GTLRProximityBeacon_BeaconInfo;
@class GTLRProximityBeacon_Date;
@class GTLRProximityBeacon_Diagnostics;
@class GTLRProximityBeacon_EphemeralIdRegistration;
@class GTLRProximityBeacon_IndoorLevel;
@class GTLRProximityBeacon_LatLng;
@class GTLRProximityBeacon_Namespace;
@class GTLRProximityBeacon_Observation;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRProximityBeacon_AdvertisedId.type

/**
 *  See http://altbeacon.org and/or https://github.com/AltBeacon/spec.
 *
 *  Value: "ALTBEACON"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_AdvertisedId_Type_Altbeacon;
/**
 *  Eddystone, an open beacon format that supports Android and iOS devices
 *  https://github.com/google/eddystone/wiki/Beacon-Specification
 *
 *  Value: "EDDYSTONE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_AdvertisedId_Type_Eddystone;
/**
 *  Eddystone Ephemeral ID
 *
 *  Value: "EDDYSTONE_EID"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_AdvertisedId_Type_EddystoneEid;
/**
 *  Apple iBeacon compatible beacon
 *
 *  Value: "IBEACON"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_AdvertisedId_Type_Ibeacon;
/**
 *  Do not use this value.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_AdvertisedId_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRProximityBeacon_Beacon.expectedStability

/**
 *  Moves frequently, for example a personal item or food truck.
 *
 *  Value: "MOBILE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_ExpectedStability_Mobile;
/**
 *  Usually stable but may move rarely, usually within a single place,
 *  for example a store display.
 *
 *  Value: "PORTABLE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_ExpectedStability_Portable;
/**
 *  Moves continuously in service, for example a bus or train.
 *
 *  Value: "ROVING"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_ExpectedStability_Roving;
/**
 *  Do not use this value.
 *
 *  Value: "STABILITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_ExpectedStability_StabilityUnspecified;
/**
 *  Not expected to move, for example a store's front door.
 *
 *  Value: "STABLE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_ExpectedStability_Stable;

// ----------------------------------------------------------------------------
// GTLRProximityBeacon_Beacon.status

/**
 *  The "normal" in-use state of a beacon.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_Status_Active;
/**
 *  Beacon should no longer be used for any purpose. This is irreversible.
 *
 *  Value: "DECOMMISSIONED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_Status_Decommissioned;
/**
 *  The beacon should not be visible to mobile devices. This is reversible.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_Status_Inactive;
/**
 *  Do not use this value.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Beacon_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRProximityBeacon_Diagnostics.alerts

/** Value: "ALERT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Diagnostics_Alerts_AlertUnspecified;
/** Value: "LOW_ACTIVITY" */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Diagnostics_Alerts_LowActivity;
/** Value: "LOW_BATTERY" */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Diagnostics_Alerts_LowBattery;
/** Value: "WRONG_LOCATION" */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Diagnostics_Alerts_WrongLocation;

// ----------------------------------------------------------------------------
// GTLRProximityBeacon_Namespace.servingVisibility

/**
 *  Any project can subscribe to attachments under the namespace.
 *
 *  Value: "PUBLIC"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Namespace_ServingVisibility_Public;
/**
 *  Served only to the project that owns the namespace.
 *
 *  Value: "UNLISTED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Namespace_ServingVisibility_Unlisted;
/**
 *  Do not use this value.
 *
 *  Value: "VISIBILITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRProximityBeacon_Namespace_ServingVisibility_VisibilityUnspecified;

/**
 *  Defines a unique identifier of a beacon as broadcast by the device.
 */
@interface GTLRProximityBeacon_AdvertisedId : GTLRObject

/**
 *  The actual beacon identifier, as broadcast by the beacon hardware. Must be
 *  [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
 *  requests, and will be so encoded (with padding) in responses. The base64
 *  encoding should be of the binary byte-stream and not any textual (such as
 *  hex) representation thereof.
 *  Required.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Specifies the identifier type.
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRProximityBeacon_AdvertisedId_Type_Altbeacon See
 *        http://altbeacon.org and/or https://github.com/AltBeacon/spec. (Value:
 *        "ALTBEACON")
 *    @arg @c kGTLRProximityBeacon_AdvertisedId_Type_Eddystone Eddystone, an
 *        open beacon format that supports Android and iOS devices
 *        https://github.com/google/eddystone/wiki/Beacon-Specification (Value:
 *        "EDDYSTONE")
 *    @arg @c kGTLRProximityBeacon_AdvertisedId_Type_EddystoneEid Eddystone
 *        Ephemeral ID (Value: "EDDYSTONE_EID")
 *    @arg @c kGTLRProximityBeacon_AdvertisedId_Type_Ibeacon Apple iBeacon
 *        compatible beacon (Value: "IBEACON")
 *    @arg @c kGTLRProximityBeacon_AdvertisedId_Type_TypeUnspecified Do not use
 *        this value. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A subset of attachment information served via the
 *  `beaconinfo.getforobserved` method, used when your users encounter your
 *  beacons.
 */
@interface GTLRProximityBeacon_AttachmentInfo : GTLRObject

/**
 *  An opaque data container for client-provided data.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The distance away from the beacon at which this attachment should be
 *  delivered to a mobile app.
 *  Setting this to a value greater than zero indicates that the app should
 *  behave as if the beacon is "seen" when the mobile device is less than this
 *  distance away from the beacon.
 *  Different attachments on the same beacon can have different max distances.
 *  Note that even though this value is expressed with fractional meter
 *  precision, real-world behavior is likley to be much less precise than one
 *  meter, due to the nature of current Bluetooth radio technology.
 *  Optional. When not set or zero, the attachment should be delivered at the
 *  beacon's outer limit of detection.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDistanceMeters;

/**
 *  Specifies what kind of attachment this is. Tells a client how to
 *  interpret the `data` field. Format is <var>namespace/type</var>, for
 *  example <code>scrupulous-wombat-12345/welcome-message</code>
 */
@property(nonatomic, copy, nullable) NSString *namespacedType;

@end


/**
 *  Details of a beacon device.
 */
@interface GTLRProximityBeacon_Beacon : GTLRObject

/**
 *  The identifier of a beacon as advertised by it. This field must be
 *  populated when registering. It may be empty when updating a beacon
 *  record because it is ignored in updates.
 *  When registering a beacon that broadcasts Eddystone-EID, this field
 *  should contain a "stable" Eddystone-UID that identifies the beacon and
 *  links it to its attachments. The stable Eddystone-UID is only used for
 *  administering the beacon.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_AdvertisedId *advertisedId;

/**
 *  Resource name of this beacon. A beacon name has the format
 *  "beacons/N!beaconId" where the beaconId is the base16 ID broadcast by
 *  the beacon and N is a code for the beacon's type. Possible values are
 *  `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.
 *  This field must be left empty when registering. After reading a beacon,
 *  clients can use the name for future operations.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  Free text used to identify and describe the beacon. Maximum length 140
 *  characters.
 *  Optional.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Write-only registration parameters for beacons using Eddystone-EID
 *  (remotely resolved ephemeral ID) format. This information will not be
 *  populated in API responses. When submitting this data, the `advertised_id`
 *  field must contain an ID of type Eddystone-UID. Any other ID type will
 *  result in an error.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_EphemeralIdRegistration *ephemeralIdRegistration;

/**
 *  Expected location stability. This is set when the beacon is registered or
 *  updated, not automatically detected in any way.
 *  Optional.
 *
 *  Likely values:
 *    @arg @c kGTLRProximityBeacon_Beacon_ExpectedStability_Mobile Moves
 *        frequently, for example a personal item or food truck. (Value:
 *        "MOBILE")
 *    @arg @c kGTLRProximityBeacon_Beacon_ExpectedStability_Portable Usually
 *        stable but may move rarely, usually within a single place,
 *        for example a store display. (Value: "PORTABLE")
 *    @arg @c kGTLRProximityBeacon_Beacon_ExpectedStability_Roving Moves
 *        continuously in service, for example a bus or train. (Value: "ROVING")
 *    @arg @c kGTLRProximityBeacon_Beacon_ExpectedStability_StabilityUnspecified
 *        Do not use this value. (Value: "STABILITY_UNSPECIFIED")
 *    @arg @c kGTLRProximityBeacon_Beacon_ExpectedStability_Stable Not expected
 *        to move, for example a store's front door. (Value: "STABLE")
 */
@property(nonatomic, copy, nullable) NSString *expectedStability;

/**
 *  The indoor level information for this beacon, if known. As returned by the
 *  Google Maps API.
 *  Optional.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_IndoorLevel *indoorLevel;

/**
 *  The location of the beacon, expressed as a latitude and longitude pair.
 *  This location is given when the beacon is registered or updated. It does
 *  not necessarily indicate the actual current location of the beacon.
 *  Optional.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_LatLng *latLng;

/**
 *  The [Google Places API](/places/place-id) Place ID of the place where
 *  the beacon is deployed. This is given when the beacon is registered or
 *  updated, not automatically detected in any way.
 *  Optional.
 */
@property(nonatomic, copy, nullable) NSString *placeId;

/**
 *  Properties of the beacon device, for example battery type or firmware
 *  version.
 *  Optional.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_Beacon_Properties *properties;

/**
 *  Some beacons may require a user to provide an authorization key before
 *  changing any of its configuration (e.g. broadcast frames, transmit power).
 *  This field provides a place to store and control access to that key.
 *  This field is populated in responses to `GET /v1beta1/beacons/3!beaconId`
 *  from users with write access to the given beacon. That is to say: If the
 *  user is authorized to write the beacon's confidential data in the service,
 *  the service considers them authorized to configure the beacon. Note
 *  that this key grants nothing on the service, only on the beacon itself.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *provisioningKey;

/**
 *  Current status of the beacon.
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRProximityBeacon_Beacon_Status_Active The "normal" in-use
 *        state of a beacon. (Value: "ACTIVE")
 *    @arg @c kGTLRProximityBeacon_Beacon_Status_Decommissioned Beacon should no
 *        longer be used for any purpose. This is irreversible. (Value:
 *        "DECOMMISSIONED")
 *    @arg @c kGTLRProximityBeacon_Beacon_Status_Inactive The beacon should not
 *        be visible to mobile devices. This is reversible. (Value: "INACTIVE")
 *    @arg @c kGTLRProximityBeacon_Beacon_Status_StatusUnspecified Do not use
 *        this value. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Properties of the beacon device, for example battery type or firmware
 *  version.
 *  Optional.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRProximityBeacon_Beacon_Properties : GTLRObject
@end


/**
 *  Project-specific data associated with a beacon.
 */
@interface GTLRProximityBeacon_BeaconAttachment : GTLRObject

/**
 *  Resource name of this attachment. Attachment names have the format:
 *  <code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>.
 *  Leave this empty on creation.
 */
@property(nonatomic, copy, nullable) NSString *attachmentName;

/**
 *  The UTC time when this attachment was created, in milliseconds since the
 *  UNIX epoch.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTimeMs;

/**
 *  An opaque data container for client-provided data. Must be
 *  [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP
 *  requests, and will be so encoded (with padding) in responses.
 *  Required.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The distance away from the beacon at which this attachment should be
 *  delivered to a mobile app.
 *  Setting this to a value greater than zero indicates that the app should
 *  behave as if the beacon is "seen" when the mobile device is less than this
 *  distance away from the beacon.
 *  Different attachments on the same beacon can have different max distances.
 *  Note that even though this value is expressed with fractional meter
 *  precision, real-world behavior is likley to be much less precise than one
 *  meter, due to the nature of current Bluetooth radio technology.
 *  Optional. When not set or zero, the attachment should be delivered at the
 *  beacon's outer limit of detection.
 *  Negative values are invalid and return an error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDistanceMeters;

/**
 *  Specifies what kind of attachment this is. Tells a client how to
 *  interpret the `data` field. Format is <var>namespace/type</var>. Namespace
 *  provides type separation between clients. Type describes the type of
 *  `data`, for use by the client when parsing the `data` field.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *namespacedType;

@end


/**
 *  A subset of beacon information served via the `beaconinfo.getforobserved`
 *  method, which you call when users of your app encounter your beacons.
 */
@interface GTLRProximityBeacon_BeaconInfo : GTLRObject

/** The ID advertised by the beacon. */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_AdvertisedId *advertisedId;

/**
 *  Attachments matching the type(s) requested.
 *  May be empty if no attachment types were requested.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_AttachmentInfo *> *attachments;

/** The name under which the beacon is registered. */
@property(nonatomic, copy, nullable) NSString *beaconName;

@end


/**
 *  Represents a whole or partial calendar date, e.g. a birthday. The time of
 *  day
 *  and time zone are either specified elsewhere or are not significant. The
 *  date
 *  is relative to the Proleptic Gregorian Calendar. This can represent:
 *  * A full date, with non-zero year, month and day values
 *  * A month and day value, with a zero year, e.g. an anniversary
 *  * A year on its own, with zero month and day values
 *  * A year and month value, with a zero day, e.g. a credit card expiration
 *  date
 *  Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
 */
@interface GTLRProximityBeacon_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
 *  if specifying a year by itself or a year and month where the day is not
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Response for a request to delete attachments.
 */
@interface GTLRProximityBeacon_DeleteAttachmentsResponse : GTLRObject

/**
 *  The number of attachments that were deleted.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDeleted;

@end


/**
 *  Diagnostics for a single beacon.
 */
@interface GTLRProximityBeacon_Diagnostics : GTLRObject

/** An unordered list of Alerts that the beacon has. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *alerts;

/**
 *  Resource name of the beacon. For Eddystone-EID beacons, this may
 *  be the beacon's current EID, or the beacon's "stable" Eddystone-UID.
 */
@property(nonatomic, copy, nullable) NSString *beaconName;

/**
 *  The date when the battery is expected to be low. If the value is missing
 *  then there is no estimate for when the battery will be low.
 *  This value is only an estimate, not an exact date.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_Date *estimatedLowBatteryDate;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRProximityBeacon_Empty : GTLRObject
@end


/**
 *  Write-only registration parameters for beacons using Eddystone-EID format.
 *  Two ways of securely registering an Eddystone-EID beacon with the service
 *  are supported:
 *  1. Perform an ECDH key exchange via this API, including a previous call
 *  to `GET /v1beta1/eidparams`. In this case the fields
 *  `beacon_ecdh_public_key` and `service_ecdh_public_key` should be
 *  populated and `beacon_identity_key` should not be populated. This
 *  method ensures that only the two parties in the ECDH key exchange can
 *  compute the identity key, which becomes a secret between them.
 *  2. Derive or obtain the beacon's identity key via other secure means
 *  (perhaps an ECDH key exchange between the beacon and a mobile device
 *  or any other secure method), and then submit the resulting identity key
 *  to the service. In this case `beacon_identity_key` field should be
 *  populated, and neither of `beacon_ecdh_public_key` nor
 *  `service_ecdh_public_key` fields should be. The security of this method
 *  depends on how securely the parties involved (in particular the
 *  bluetooth client) handle the identity key, and obviously on how
 *  securely the identity key was generated.
 *  See [the Eddystone
 *  specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
 *  at GitHub.
 */
@interface GTLRProximityBeacon_EphemeralIdRegistration : GTLRObject

/**
 *  The beacon's public key used for the Elliptic curve Diffie-Hellman
 *  key exchange. When this field is populated, `service_ecdh_public_key`
 *  must also be populated, and `beacon_identity_key` must not be.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *beaconEcdhPublicKey;

/**
 *  The private key of the beacon. If this field is populated,
 *  `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be
 *  populated.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *beaconIdentityKey;

/**
 *  The initial clock value of the beacon. The beacon's clock must have
 *  begun counting at this value immediately prior to transmitting this
 *  value to the resolving service. Significant delay in transmitting this
 *  value to the service risks registration or resolution failures. If a
 *  value is not provided, the default is zero.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *initialClockValue;

/**
 *  An initial ephemeral ID calculated using the clock value submitted as
 *  `initial_clock_value`, and the secret key generated by the
 *  Diffie-Hellman key exchange using `service_ecdh_public_key` and
 *  `service_ecdh_public_key`. This initial EID value will be used by the
 *  service to confirm that the key exchange process was successful.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *initialEid;

/**
 *  Indicates the nominal period between each rotation of the beacon's
 *  ephemeral ID. "Nominal" because the beacon should randomize the
 *  actual interval. See [the spec at
 *  github](https://github.com/google/eddystone/tree/master/eddystone-eid)
 *  for details. This value corresponds to a power-of-two scaler on the
 *  beacon's clock: when the scaler value is K, the beacon will begin
 *  broadcasting a new ephemeral ID on average every 2^K seconds.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rotationPeriodExponent;

/**
 *  The service's public key used for the Elliptic curve Diffie-Hellman
 *  key exchange. When this field is populated, `beacon_ecdh_public_key`
 *  must also be populated, and `beacon_identity_key` must not be.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *serviceEcdhPublicKey;

@end


/**
 *  Information a client needs to provision and register beacons that
 *  broadcast Eddystone-EID format beacon IDs, using Elliptic curve
 *  Diffie-Hellman key exchange. See
 *  [the Eddystone
 *  specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
 *  at GitHub.
 */
@interface GTLRProximityBeacon_EphemeralIdRegistrationParams : GTLRObject

/**
 *  Indicates the maximum rotation period supported by the service.
 *  See EddystoneEidRegistration.rotation_period_exponent
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxRotationPeriodExponent;

/**
 *  Indicates the minimum rotation period supported by the service.
 *  See EddystoneEidRegistration.rotation_period_exponent
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRotationPeriodExponent;

/**
 *  The beacon service's public key for use by a beacon to derive its
 *  Identity Key using Elliptic Curve Diffie-Hellman key exchange.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *serviceEcdhPublicKey;

@end


/**
 *  Request for beacon and attachment information about beacons that
 *  a mobile client has encountered "in the wild".
 */
@interface GTLRProximityBeacon_GetInfoForObservedBeaconsRequest : GTLRObject

/**
 *  Specifies what kind of attachments to include in the response.
 *  When given, the response will include only attachments of the given types.
 *  When empty, no attachments will be returned. Must be in the format
 *  <var>namespace/type</var>. Accepts `*` to specify all types in
 *  all namespaces owned by the client.
 *  Optional.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *namespacedTypes;

/**
 *  The beacons that the client has encountered.
 *  At least one must be given.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_Observation *> *observations;

@end


/**
 *  Information about the requested beacons, optionally including attachment
 *  data.
 */
@interface GTLRProximityBeacon_GetInfoForObservedBeaconsResponse : GTLRObject

/**
 *  Public information about beacons.
 *  May be empty if the request matched no beacons.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_BeaconInfo *> *beacons;

@end


/**
 *  Indoor level, a human-readable string as returned by Google Maps APIs,
 *  useful to indicate which floor of a building a beacon is located on.
 */
@interface GTLRProximityBeacon_IndoorLevel : GTLRObject

/** The name of this level. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  An object representing a latitude/longitude pair. This is expressed as a
 *  pair
 *  of doubles representing degrees latitude and degrees longitude. Unless
 *  specified otherwise, this must conform to the
 *  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 *  standard</a>. Values must be within normalized ranges.
 */
@interface GTLRProximityBeacon_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Response to `ListBeaconAttachments` that contains the requested attachments.
 */
@interface GTLRProximityBeacon_ListBeaconAttachmentsResponse : GTLRObject

/** The attachments that corresponded to the request params. */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_BeaconAttachment *> *attachments;

@end


/**
 *  Response that contains list beacon results and pagination help.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "beacons" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRProximityBeacon_ListBeaconsResponse : GTLRCollectionObject

/**
 *  The beacons that matched the search criteria.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_Beacon *> *beacons;

/**
 *  An opaque pagination token that the client may provide in their next
 *  request to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Estimate of the total number of beacons matched by the query. Higher
 *  values may be less accurate.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

@end


/**
 *  Response that contains the requested diagnostics.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "diagnostics" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRProximityBeacon_ListDiagnosticsResponse : GTLRCollectionObject

/**
 *  The diagnostics matching the given request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_Diagnostics *> *diagnostics;

/**
 *  Token that can be used for pagination. Returned only if the
 *  request matches more beacons than can be returned in this response.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response to ListNamespacesRequest that contains all the project's
 *  namespaces.
 */
@interface GTLRProximityBeacon_ListNamespacesResponse : GTLRObject

/** The attachments that corresponded to the request params. */
@property(nonatomic, strong, nullable) NSArray<GTLRProximityBeacon_Namespace *> *namespaces;

@end


/**
 *  An attachment namespace defines read and write access for all the
 *  attachments
 *  created under it. Each namespace is globally unique, and owned by one
 *  project which is the only project that can create attachments under it.
 */
@interface GTLRProximityBeacon_Namespace : GTLRObject

/**
 *  Resource name of this namespace. Namespaces names have the format:
 *  <code>namespaces/<var>namespace</var></code>.
 */
@property(nonatomic, copy, nullable) NSString *namespaceName;

/**
 *  Specifies what clients may receive attachments under this namespace
 *  via `beaconinfo.getforobserved`.
 *
 *  Likely values:
 *    @arg @c kGTLRProximityBeacon_Namespace_ServingVisibility_Public Any
 *        project can subscribe to attachments under the namespace. (Value:
 *        "PUBLIC")
 *    @arg @c kGTLRProximityBeacon_Namespace_ServingVisibility_Unlisted Served
 *        only to the project that owns the namespace. (Value: "UNLISTED")
 *    @arg @c kGTLRProximityBeacon_Namespace_ServingVisibility_VisibilityUnspecified
 *        Do not use this value. (Value: "VISIBILITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *servingVisibility;

@end


/**
 *  Represents one beacon observed once.
 */
@interface GTLRProximityBeacon_Observation : GTLRObject

/**
 *  The ID advertised by the beacon the client has encountered.
 *  If the submitted `advertised_id` type is Eddystone-EID, then the client
 *  must be authorized to resolve the given beacon. Otherwise no data will be
 *  returned for that beacon.
 *  Required.
 */
@property(nonatomic, strong, nullable) GTLRProximityBeacon_AdvertisedId *advertisedId;

/**
 *  The array of telemetry bytes received from the beacon. The server is
 *  responsible for parsing it. This field may frequently be empty, as
 *  with a beacon that transmits telemetry only occasionally.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *telemetry;

/** Time when the beacon was observed. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestampMs;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
