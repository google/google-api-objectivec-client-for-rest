// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Networking API (servicenetworking/v1beta)
// Description:
//   Provides automatic management of network configurations necessary for
//   certain services.
// Documentation:
//   https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started

#import "GTLRServiceNetworkingObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRServiceNetworking_Api.syntax
NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_BackendRule.pathTranslation
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_AppendPathToAddress = @"APPEND_PATH_TO_ADDRESS";
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_ConstantAddress = @"CONSTANT_ADDRESS";
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_PathTranslationUnspecified = @"PATH_TRANSLATION_UNSPECIFIED";

// GTLRServiceNetworking_Enum.syntax
NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_Field.cardinality
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityOptional = @"CARDINALITY_OPTIONAL";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRepeated = @"CARDINALITY_REPEATED";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRequired = @"CARDINALITY_REQUIRED";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityUnknown = @"CARDINALITY_UNKNOWN";

// GTLRServiceNetworking_Field.kind
NSString * const kGTLRServiceNetworking_Field_Kind_TypeBool    = @"TYPE_BOOL";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeBytes   = @"TYPE_BYTES";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeDouble  = @"TYPE_DOUBLE";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeEnum    = @"TYPE_ENUM";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed32 = @"TYPE_FIXED32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed64 = @"TYPE_FIXED64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFloat   = @"TYPE_FLOAT";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeGroup   = @"TYPE_GROUP";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt32   = @"TYPE_INT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt64   = @"TYPE_INT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeMessage = @"TYPE_MESSAGE";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed32 = @"TYPE_SFIXED32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed64 = @"TYPE_SFIXED64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint32  = @"TYPE_SINT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint64  = @"TYPE_SINT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeString  = @"TYPE_STRING";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint32  = @"TYPE_UINT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint64  = @"TYPE_UINT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUnknown = @"TYPE_UNKNOWN";

// GTLRServiceNetworking_LabelDescriptor.valueType
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_String = @"STRING";

// GTLRServiceNetworking_Method.syntax
NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_MetricDescriptor.metricKind
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRServiceNetworking_MetricDescriptor.valueType
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRServiceNetworking_MetricDescriptorMetadata.launchStage
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Beta = @"BETA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Ga = @"GA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";

// GTLRServiceNetworking_Type.syntax
NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddSubnetworkRequest
//

@implementation GTLRServiceNetworking_AddSubnetworkRequest
@dynamic consumer, consumerNetwork, descriptionProperty, ipPrefixLength, region,
         requestedAddress, subnetwork, subnetworkUsers;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subnetworkUsers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Api
//

@implementation GTLRServiceNetworking_Api
@dynamic methods, mixins, name, options, sourceContext, syntax, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"methods" : [GTLRServiceNetworking_Method class],
    @"mixins" : [GTLRServiceNetworking_Mixin class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Authentication
//

@implementation GTLRServiceNetworking_Authentication
@dynamic providers, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"providers" : [GTLRServiceNetworking_AuthProvider class],
    @"rules" : [GTLRServiceNetworking_AuthenticationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthenticationRule
//

@implementation GTLRServiceNetworking_AuthenticationRule
@dynamic allowWithoutCredential, oauth, requirements, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [GTLRServiceNetworking_AuthRequirement class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthorizationConfig
//

@implementation GTLRServiceNetworking_AuthorizationConfig
@dynamic provider;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthProvider
//

@implementation GTLRServiceNetworking_AuthProvider
@dynamic audiences, authorizationUrl, identifier, issuer, jwksUri;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthRequirement
//

@implementation GTLRServiceNetworking_AuthRequirement
@dynamic audiences, providerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Backend
//

@implementation GTLRServiceNetworking_Backend
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_BackendRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_BackendRule
//

@implementation GTLRServiceNetworking_BackendRule
@dynamic address, deadline, jwtAudience, minDeadline, operationDeadline,
         pathTranslation, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Billing
//

@implementation GTLRServiceNetworking_Billing
@dynamic consumerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_BillingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_BillingDestination
//

@implementation GTLRServiceNetworking_BillingDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Connection
//

@implementation GTLRServiceNetworking_Connection
@dynamic network, peering, reservedPeeringRanges, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"reservedPeeringRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Context
//

@implementation GTLRServiceNetworking_Context
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_ContextRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ContextRule
//

@implementation GTLRServiceNetworking_ContextRule
@dynamic allowedRequestExtensions, allowedResponseExtensions, provided,
         requested, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedRequestExtensions" : [NSString class],
    @"allowedResponseExtensions" : [NSString class],
    @"provided" : [NSString class],
    @"requested" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Control
//

@implementation GTLRServiceNetworking_Control
@dynamic environment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomError
//

@implementation GTLRServiceNetworking_CustomError
@dynamic rules, types;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_CustomErrorRule class],
    @"types" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomErrorRule
//

@implementation GTLRServiceNetworking_CustomErrorRule
@dynamic isErrorType, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomHttpPattern
//

@implementation GTLRServiceNetworking_CustomHttpPattern
@dynamic kind, path;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Documentation
//

@implementation GTLRServiceNetworking_Documentation
@dynamic documentationRootUrl, overview, pages, rules, summary;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pages" : [GTLRServiceNetworking_Page class],
    @"rules" : [GTLRServiceNetworking_DocumentationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DocumentationRule
//

@implementation GTLRServiceNetworking_DocumentationRule
@dynamic deprecationDescription, descriptionProperty, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Endpoint
//

@implementation GTLRServiceNetworking_Endpoint
@dynamic aliases, allowCors, features, name, target;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class],
    @"features" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Enum
//

@implementation GTLRServiceNetworking_Enum
@dynamic enumvalue, name, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enumvalue" : [GTLRServiceNetworking_EnumValue class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_EnumValue
//

@implementation GTLRServiceNetworking_EnumValue
@dynamic name, number, options;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Experimental
//

@implementation GTLRServiceNetworking_Experimental
@dynamic authorization;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Field
//

@implementation GTLRServiceNetworking_Field
@dynamic cardinality, defaultValue, jsonName, kind, name, number, oneofIndex,
         options, packed, typeUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaSubnetwork
//

@implementation GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaSubnetwork
@dynamic ipCidrRange, name, network, outsideAllocation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Http
//

@implementation GTLRServiceNetworking_Http
@dynamic fullyDecodeReservedExpansion, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_HttpRule
//

@implementation GTLRServiceNetworking_HttpRule
@dynamic additionalBindings, body, custom, deleteProperty, get, patch, post,
         put, responseBody, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalBindings" : [GTLRServiceNetworking_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LabelDescriptor
//

@implementation GTLRServiceNetworking_LabelDescriptor
@dynamic descriptionProperty, key, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ListConnectionsResponse
//

@implementation GTLRServiceNetworking_ListConnectionsResponse
@dynamic connections;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connections" : [GTLRServiceNetworking_Connection class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LogDescriptor
//

@implementation GTLRServiceNetworking_LogDescriptor
@dynamic descriptionProperty, displayName, labels, name;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Logging
//

@implementation GTLRServiceNetworking_Logging
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_LoggingDestination class],
    @"producerDestinations" : [GTLRServiceNetworking_LoggingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LoggingDestination
//

@implementation GTLRServiceNetworking_LoggingDestination
@dynamic logs, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"logs" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Method
//

@implementation GTLRServiceNetworking_Method
@dynamic name, options, requestStreaming, requestTypeUrl, responseStreaming,
         responseTypeUrl, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricDescriptor
//

@implementation GTLRServiceNetworking_MetricDescriptor
@dynamic descriptionProperty, displayName, labels, metadata, metricKind, name,
         type, unit, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricDescriptorMetadata
//

@implementation GTLRServiceNetworking_MetricDescriptorMetadata
@dynamic ingestDelay, launchStage, samplePeriod;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricRule
//

@implementation GTLRServiceNetworking_MetricRule
@dynamic metricCosts, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricRule_MetricCosts
//

@implementation GTLRServiceNetworking_MetricRule_MetricCosts

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Mixin
//

@implementation GTLRServiceNetworking_Mixin
@dynamic name, root;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MonitoredResourceDescriptor
//

@implementation GTLRServiceNetworking_MonitoredResourceDescriptor
@dynamic descriptionProperty, displayName, labels, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Monitoring
//

@implementation GTLRServiceNetworking_Monitoring
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_MonitoringDestination class],
    @"producerDestinations" : [GTLRServiceNetworking_MonitoringDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MonitoringDestination
//

@implementation GTLRServiceNetworking_MonitoringDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_OAuthRequirements
//

@implementation GTLRServiceNetworking_OAuthRequirements
@dynamic canonicalScopes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation
//

@implementation GTLRServiceNetworking_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation_Metadata
//

@implementation GTLRServiceNetworking_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation_Response
//

@implementation GTLRServiceNetworking_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Option
//

@implementation GTLRServiceNetworking_Option
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Option_Value
//

@implementation GTLRServiceNetworking_Option_Value

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Page
//

@implementation GTLRServiceNetworking_Page
@dynamic content, name, subpages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subpages" : [GTLRServiceNetworking_Page class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Quota
//

@implementation GTLRServiceNetworking_Quota
@dynamic limits, metricRules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"limits" : [GTLRServiceNetworking_QuotaLimit class],
    @"metricRules" : [GTLRServiceNetworking_MetricRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_QuotaLimit
//

@implementation GTLRServiceNetworking_QuotaLimit
@dynamic defaultLimit, descriptionProperty, displayName, duration, freeTier,
         maxLimit, metric, name, unit, values;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_QuotaLimit_Values
//

@implementation GTLRServiceNetworking_QuotaLimit_Values

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Range
//

@implementation GTLRServiceNetworking_Range
@dynamic ipCidrRange, network;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SearchRangeRequest
//

@implementation GTLRServiceNetworking_SearchRangeRequest
@dynamic ipPrefixLength, network;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Service
//

@implementation GTLRServiceNetworking_Service
@dynamic apis, authentication, backend, billing, configVersion, context,
         control, customError, documentation, endpoints, enums, experimental,
         http, identifier, logging, logs, metrics, monitoredResources,
         monitoring, name, producerProjectId, quota, sourceInfo,
         systemParameters, systemTypes, title, types, usage;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apis" : [GTLRServiceNetworking_Api class],
    @"endpoints" : [GTLRServiceNetworking_Endpoint class],
    @"enums" : [GTLRServiceNetworking_Enum class],
    @"logs" : [GTLRServiceNetworking_LogDescriptor class],
    @"metrics" : [GTLRServiceNetworking_MetricDescriptor class],
    @"monitoredResources" : [GTLRServiceNetworking_MonitoredResourceDescriptor class],
    @"systemTypes" : [GTLRServiceNetworking_Type class],
    @"types" : [GTLRServiceNetworking_Type class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceContext
//

@implementation GTLRServiceNetworking_SourceContext
@dynamic fileName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceInfo
//

@implementation GTLRServiceNetworking_SourceInfo
@dynamic sourceFiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceFiles" : [GTLRServiceNetworking_SourceInfo_SourceFiles_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceInfo_SourceFiles_Item
//

@implementation GTLRServiceNetworking_SourceInfo_SourceFiles_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Status
//

@implementation GTLRServiceNetworking_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRServiceNetworking_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Status_Details_Item
//

@implementation GTLRServiceNetworking_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Subnetwork
//

@implementation GTLRServiceNetworking_Subnetwork
@dynamic ipCidrRange, name, network, outsideAllocation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameter
//

@implementation GTLRServiceNetworking_SystemParameter
@dynamic httpHeader, name, urlQueryParameter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameterRule
//

@implementation GTLRServiceNetworking_SystemParameterRule
@dynamic parameters, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRServiceNetworking_SystemParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameters
//

@implementation GTLRServiceNetworking_SystemParameters
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_SystemParameterRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Type
//

@implementation GTLRServiceNetworking_Type
@dynamic fields, name, oneofs, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRServiceNetworking_Field class],
    @"oneofs" : [NSString class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Usage
//

@implementation GTLRServiceNetworking_Usage
@dynamic producerNotificationChannel, requirements, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [NSString class],
    @"rules" : [GTLRServiceNetworking_UsageRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_UsageRule
//

@implementation GTLRServiceNetworking_UsageRule
@dynamic allowUnregisteredCalls, selector, skipServiceControl;
@end
