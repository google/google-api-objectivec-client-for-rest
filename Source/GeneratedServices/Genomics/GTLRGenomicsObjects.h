// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Genomics API (genomics/v1)
// Description:
//   Uploads, processes, queries, and searches Genomics data in the cloud.
// Documentation:
//   https://cloud.google.com/genomics

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGenomics_ComputeEngine;
@class GTLRGenomics_ContainerStartedEvent_PortMappings;
@class GTLRGenomics_Event_Details;
@class GTLRGenomics_Operation;
@class GTLRGenomics_Operation_Metadata;
@class GTLRGenomics_Operation_Response;
@class GTLRGenomics_OperationEvent;
@class GTLRGenomics_OperationMetadata_Labels;
@class GTLRGenomics_OperationMetadata_Request;
@class GTLRGenomics_OperationMetadata_RuntimeMetadata;
@class GTLRGenomics_Status;
@class GTLRGenomics_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGenomics_FailedEvent.code

/**
 *  The operation was aborted, typically due to a concurrency issue such as
 *  a sequencer check failure or transaction abort.
 *  See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *  `ABORTED`, and `UNAVAILABLE`.
 *  HTTP Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists.
 *  HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller.
 *  HTTP Mapping: 499 Client Closed Request
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Cancelled;
/**
 *  Unrecoverable data loss or corruption.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "DATA_LOSS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned
 *  even if the operation has completed successfully. For example, a
 *  successful response from a server could have been delayed long
 *  enough for the deadline to expire.
 *  HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state
 *  required for the operation's execution. For example, the directory
 *  to be deleted is non-empty, an rmdir operation is applied to
 *  a non-directory, etc.
 *  Service implementors can use the following guidelines to decide
 *  between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
 *  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
 *  (b) Use `ABORTED` if the client should retry at a higher level
 *  (e.g., when a client-specified test-and-set fails, indicating the
 *  client should restart a read-modify-write sequence).
 *  (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. E.g., if an "rmdir"
 *  fails because the directory is non-empty, `FAILED_PRECONDITION`
 *  should be returned since the client should not retry unless
 *  the files are deleted from the directory.
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the
 *  underlying system have been broken. This error code is reserved
 *  for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Internal;
/**
 *  The client specified an invalid argument. Note that this differs
 *  from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
 *  that are problematic regardless of the state of the system
 *  (e.g., a malformed file name).
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found.
 *  Note to server developers: if a request is denied for an entire class
 *  of users, such as gradual feature rollout or undocumented whitelist,
 *  `NOT_FOUND` may be used. If a request is denied for some users within
 *  a class of users, such as user-based access control, `PERMISSION_DENIED`
 *  must be used.
 *  HTTP Mapping: 404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_NotFound;
/**
 *  Not an error; returned on success
 *  HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or
 *  reading past end-of-file.
 *  Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
 *  be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an
 *  offset that is not in the range [0,2^32-1], but it will generate
 *  `OUT_OF_RANGE` if asked to read from an offset past the current
 *  file size.
 *  There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *  `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *  error) when it applies so that callers who are iterating through
 *  a space can easily look for an `OUT_OF_RANGE` error to detect when
 *  they are done.
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_OutOfRange;
/**
 *  The caller does not have permission to execute the specified
 *  operation. `PERMISSION_DENIED` must not be used for rejections
 *  caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
 *  instead for those errors). `PERMISSION_DENIED` must not be
 *  used if the caller can not be identified (use `UNAUTHENTICATED`
 *  instead for those errors). This error code does not imply the
 *  request is valid or the requested entity exists or satisfies
 *  other pre-conditions.
 *  HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or
 *  perhaps the entire file system is out of space.
 *  HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation.
 *  HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a
 *  transient condition, which can be corrected by retrying with
 *  a backoff. Note that it is not always safe to retry
 *  non-idempotent operations.
 *  See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *  `ABORTED`, and `UNAVAILABLE`.
 *  HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service.
 *  HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when
 *  a `Status` value received from another address space belongs to
 *  an error space that is not known in this address space. Also
 *  errors raised by APIs that do not return enough error information
 *  may be converted to this error.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unknown;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRGenomics_CancelOperationRequest : GTLRObject
@end


/**
 *  Describes a Compute Engine resource that is being managed by a running
 *  pipeline.
 */
@interface GTLRGenomics_ComputeEngine : GTLRObject

/** The names of the disks that were created for this pipeline. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *diskNames;

/** The instance on which the operation is running. */
@property(nonatomic, copy, nullable) NSString *instanceName;

/** The machine type of the instance. */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The availability zone in which the instance resides.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  An event generated when a container is forcibly terminated by the
 *  worker. Currently, this only occurs when the container outlives the
 *  timeout specified by the user.
 */
@interface GTLRGenomics_ContainerKilledEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

@end


/**
 *  An event generated when a container starts.
 */
@interface GTLRGenomics_ContainerStartedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The public IP address that can be used to connect to the container. This
 *  field is only populated when at least one port mapping is present. If the
 *  instance was created with a private address, this field will be empty even
 *  if port mappings exist.
 */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  The container-to-host port mappings installed for this container. This
 *  set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
 *  as well as any specified in the `Action` definition.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_ContainerStartedEvent_PortMappings *portMappings;

@end


/**
 *  The container-to-host port mappings installed for this container. This
 *  set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
 *  as well as any specified in the `Action` definition.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_ContainerStartedEvent_PortMappings : GTLRObject
@end


/**
 *  An event generated when a container exits.
 */
@interface GTLRGenomics_ContainerStoppedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

/**
 *  The tail end of any content written to standard error by the container.
 *  If the content emits large amounts of debugging noise or contains
 *  sensitive information, you can prevent the content from being printed by
 *  setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.
 *  Note that only a small amount of the end of the stream is captured here.
 *  The entire stream is stored in the `/google/logs` directory mounted into
 *  each action, and can be copied off the machine as described elsewhere.
 */
@property(nonatomic, copy, nullable) NSString *stderr;

@end


/**
 *  An event generated whenever a resource limitation or transient error
 *  delays execution of a pipeline that was otherwise ready to run.
 */
@interface GTLRGenomics_DelayedEvent : GTLRObject

/**
 *  A textual description of the cause of the delay. The string can change
 *  without notice because it is often generated by another service (such as
 *  Compute Engine).
 */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  If the delay was caused by a resource shortage, this field lists the
 *  Compute Engine metrics that are preventing this operation from running
 *  (for example, `CPUS` or `INSTANCES`). If the particular metric is not
 *  known, a single `UNKNOWN` metric will be present.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRGenomics_Empty : GTLRObject
@end


/**
 *  Carries information about events that occur during pipeline execution.
 */
@interface GTLRGenomics_Event : GTLRObject

/**
 *  A human-readable description of the event. Note that these strings can
 *  change at any time without notice. Any application logic must use the
 *  information in the `details` field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Machine-readable details about the event. */
@property(nonatomic, strong, nullable) GTLRGenomics_Event_Details *details;

/** The time at which the event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  Machine-readable details about the event.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Event_Details : GTLRObject
@end


/**
 *  An event generated when the execution of a pipeline has failed. Note
 *  that other events can continue to occur after this event.
 */
@interface GTLRGenomics_FailedEvent : GTLRObject

/** The human-readable description of the cause of the failure. */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  The Google standard error code that best describes this failure.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Aborted The operation was aborted,
 *        typically due to a concurrency issue such as
 *        a sequencer check failure or transaction abort.
 *        See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_AlreadyExists The entity that a
 *        client attempted to create (e.g., file or directory)
 *        already exists.
 *        HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Cancelled The operation was
 *        cancelled, typically by the caller.
 *        HTTP Mapping: 499 Client Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_DataLoss Unrecoverable data loss or
 *        corruption.
 *        HTTP Mapping: 500 Internal Server Error (Value: "DATA_LOSS")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_DeadlineExceeded The deadline
 *        expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned
 *        even if the operation has completed successfully. For example, a
 *        successful response from a server could have been delayed long
 *        enough for the deadline to expire.
 *        HTTP Mapping: 504 Gateway Timeout (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_FailedPrecondition The operation
 *        was rejected because the system is not in a state
 *        required for the operation's execution. For example, the directory
 *        to be deleted is non-empty, an rmdir operation is applied to
 *        a non-directory, etc.
 *        Service implementors can use the following guidelines to decide
 *        between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
 *        (a) Use `UNAVAILABLE` if the client can retry just the failing call.
 *        (b) Use `ABORTED` if the client should retry at a higher level
 *        (e.g., when a client-specified test-and-set fails, indicating the
 *        client should restart a read-modify-write sequence).
 *        (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *        the system state has been explicitly fixed. E.g., if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION`
 *        should be returned since the client should not retry unless
 *        the files are deleted from the directory.
 *        HTTP Mapping: 400 Bad Request (Value: "FAILED_PRECONDITION")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Internal Internal errors. This
 *        means that some invariants expected by the
 *        underlying system have been broken. This error code is reserved
 *        for serious errors.
 *        HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_InvalidArgument The client
 *        specified an invalid argument. Note that this differs
 *        from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
 *        that are problematic regardless of the state of the system
 *        (e.g., a malformed file name).
 *        HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_NotFound Some requested entity
 *        (e.g., file or directory) was not found.
 *        Note to server developers: if a request is denied for an entire class
 *        of users, such as gradual feature rollout or undocumented whitelist,
 *        `NOT_FOUND` may be used. If a request is denied for some users within
 *        a class of users, such as user-based access control,
 *        `PERMISSION_DENIED`
 *        must be used.
 *        HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Ok Not an error; returned on
 *        success
 *        HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_OutOfRange The operation was
 *        attempted past the valid range. E.g., seeking or
 *        reading past end-of-file.
 *        Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
 *        be fixed if the system state changes. For example, a 32-bit file
 *        system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current
 *        file size.
 *        There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through
 *        a space can easily look for an `OUT_OF_RANGE` error to detect when
 *        they are done.
 *        HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_PermissionDenied The caller does
 *        not have permission to execute the specified
 *        operation. `PERMISSION_DENIED` must not be used for rejections
 *        caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
 *        instead for those errors). `PERMISSION_DENIED` must not be
 *        used if the caller can not be identified (use `UNAUTHENTICATED`
 *        instead for those errors). This error code does not imply the
 *        request is valid or the requested entity exists or satisfies
 *        other pre-conditions.
 *        HTTP Mapping: 403 Forbidden (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_ResourceExhausted Some resource has
 *        been exhausted, perhaps a per-user quota, or
 *        perhaps the entire file system is out of space.
 *        HTTP Mapping: 429 Too Many Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unauthenticated The request does
 *        not have valid authentication credentials for the
 *        operation.
 *        HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unavailable The service is
 *        currently unavailable. This is most likely a
 *        transient condition, which can be corrected by retrying with
 *        a backoff. Note that it is not always safe to retry
 *        non-idempotent operations.
 *        See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 503 Service Unavailable (Value: "UNAVAILABLE")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unimplemented The operation is not
 *        implemented or is not supported/enabled in this
 *        service.
 *        HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unknown Unknown error. For example,
 *        this error may be returned when
 *        a `Status` value received from another address space belongs to
 *        an error space that is not known in this address space. Also
 *        errors raised by APIs that do not return enough error information
 *        may be converted to this error.
 *        HTTP Mapping: 500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *code;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Operation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRGenomics_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRGenomics_Status *error;

/**
 *  An OperationMetadata or Metadata object. This will always be returned with
 *  the Operation.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. For example&#58;
 *  `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** An Empty object. */
@property(nonatomic, strong, nullable) GTLRGenomics_Operation_Response *response;

@end


/**
 *  An OperationMetadata or Metadata object. This will always be returned with
 *  the Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Operation_Metadata : GTLRObject
@end


/**
 *  An Empty object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Operation_Response : GTLRObject
@end


/**
 *  An event that occurred during an Operation.
 */
@interface GTLRGenomics_OperationEvent : GTLRObject

/**
 *  Required description of event.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional time of when event finished. An event can have a start time and no
 *  finish time. If an event has a finish time, there must be a start time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Optional time of when event started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Metadata describing an Operation.
 */
@interface GTLRGenomics_OperationMetadata : GTLRObject

/**
 *  This field is deprecated. Use `labels` instead. Optionally provided by the
 *  caller when submitting the request that creates the operation.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The time at which the job was submitted to the Genomics service. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time at which the job stopped running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Optional event messages that were generated during the job's execution.
 *  This also contains any warnings that were generated during import
 *  or export.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_OperationEvent *> *events;

/**
 *  Optionally provided by the caller when submitting the request that creates
 *  the operation.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_Labels *labels;

/** The Google Cloud Project in which the job is scoped. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The original request that started the operation. Note that this will be in
 *  current version of the API. If the operation was started with v1beta2 API
 *  and a GetOperation is performed on v1 API, a v1 request will be returned.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_Request *request;

/** Runtime metadata on this Operation. */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_RuntimeMetadata *runtimeMetadata;

/** The time at which the job began to run. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Optionally provided by the caller when submitting the request that creates
 *  the operation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_Labels : GTLRObject
@end


/**
 *  The original request that started the operation. Note that this will be in
 *  current version of the API. If the operation was started with v1beta2 API
 *  and a GetOperation is performed on v1 API, a v1 request will be returned.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_Request : GTLRObject
@end


/**
 *  Runtime metadata on this Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_RuntimeMetadata : GTLRObject
@end


/**
 *  An event generated when the worker starts pulling an image.
 */
@interface GTLRGenomics_PullStartedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  An event generated when the worker stops pulling an image.
 */
@interface GTLRGenomics_PullStoppedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  The response to the RunPipeline method, returned in the operation's result
 *  field on success.
 */
@interface GTLRGenomics_RunPipelineResponse : GTLRObject
@end


/**
 *  Runtime metadata that will be populated in the
 *  runtimeMetadata
 *  field of the Operation associated with a RunPipeline execution.
 */
@interface GTLRGenomics_RuntimeMetadata : GTLRObject

/** Execution information specific to Google Compute Engine. */
@property(nonatomic, strong, nullable) GTLRGenomics_ComputeEngine *computeEngine;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message, and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRGenomics_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRGenomics_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Status_Details_Item : GTLRObject
@end


/**
 *  An event generated when the execution of a container results in a
 *  non-zero exit status that was not otherwise ignored. Execution will
 *  continue, but only actions that are flagged as `ALWAYS_RUN` will be
 *  executed. Other actions will be skipped.
 */
@interface GTLRGenomics_UnexpectedExitStatusEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

@end


/**
 *  An event generated after a worker VM has been assigned to run the
 *  pipeline.
 */
@interface GTLRGenomics_WorkerAssignedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The zone the worker is running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  An event generated when the worker VM that was assigned to the pipeline
 *  has been released (deleted).
 */
@interface GTLRGenomics_WorkerReleasedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The zone the worker was running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
