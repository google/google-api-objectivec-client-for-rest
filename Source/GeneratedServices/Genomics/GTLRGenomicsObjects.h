// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Genomics API (genomics/v1)
// Description:
//   Uploads, processes, queries, and searches Genomics data in the cloud.
// Documentation:
//   https://cloud.google.com/genomics

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGenomics_Annotation;
@class GTLRGenomics_Annotation_Info;
@class GTLRGenomics_AnnotationSet;
@class GTLRGenomics_AnnotationSet_Info;
@class GTLRGenomics_Binding;
@class GTLRGenomics_CallSet;
@class GTLRGenomics_CallSet_Info;
@class GTLRGenomics_CigarUnit;
@class GTLRGenomics_ClinicalCondition;
@class GTLRGenomics_CodingSequence;
@class GTLRGenomics_ComputeEngine;
@class GTLRGenomics_ContainerStartedEvent_PortMappings;
@class GTLRGenomics_CoverageBucket;
@class GTLRGenomics_Dataset;
@class GTLRGenomics_Entry;
@class GTLRGenomics_Event_Details;
@class GTLRGenomics_Exon;
@class GTLRGenomics_Experiment;
@class GTLRGenomics_Expr;
@class GTLRGenomics_ExternalId;
@class GTLRGenomics_ImportVariantsRequest_InfoMergeConfig;
@class GTLRGenomics_LinearAlignment;
@class GTLRGenomics_MergeVariantsRequest_InfoMergeConfig;
@class GTLRGenomics_Operation;
@class GTLRGenomics_Operation_Metadata;
@class GTLRGenomics_Operation_Response;
@class GTLRGenomics_OperationEvent;
@class GTLRGenomics_OperationMetadata_Labels;
@class GTLRGenomics_OperationMetadata_Request;
@class GTLRGenomics_OperationMetadata_RuntimeMetadata;
@class GTLRGenomics_Policy;
@class GTLRGenomics_Position;
@class GTLRGenomics_Program;
@class GTLRGenomics_Range;
@class GTLRGenomics_Read;
@class GTLRGenomics_Read_Info;
@class GTLRGenomics_ReadGroup;
@class GTLRGenomics_ReadGroup_Info;
@class GTLRGenomics_ReadGroupSet;
@class GTLRGenomics_ReadGroupSet_Info;
@class GTLRGenomics_Reference;
@class GTLRGenomics_ReferenceBound;
@class GTLRGenomics_ReferenceSet;
@class GTLRGenomics_Status;
@class GTLRGenomics_Status_Details_Item;
@class GTLRGenomics_Transcript;
@class GTLRGenomics_Variant;
@class GTLRGenomics_Variant_Info;
@class GTLRGenomics_VariantAnnotation;
@class GTLRGenomics_VariantCall;
@class GTLRGenomics_VariantCall_Info;
@class GTLRGenomics_VariantSet;
@class GTLRGenomics_VariantSetMetadata;
@class GTLRGenomics_VariantSetMetadata_Info;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGenomics_Annotation.type

/** Value: "ANNOTATION_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_Annotation_Type_AnnotationTypeUnspecified;
/**
 *  A `GENE` annotation type represents the existence of a gene at the
 *  associated reference coordinates. The start coordinate is typically the
 *  gene's transcription start site and the end is typically the end of the
 *  gene's last exon.
 *
 *  Value: "GENE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_Annotation_Type_Gene;
/**
 *  A `GENERIC` annotation type should be used when no other annotation
 *  type will suffice. This represents an untyped annotation of the reference
 *  genome.
 *
 *  Value: "GENERIC"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_Annotation_Type_Generic;
/**
 *  A `TRANSCRIPT` annotation type represents the assertion that a
 *  particular region of the reference genome may be transcribed as RNA.
 *
 *  Value: "TRANSCRIPT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_Annotation_Type_Transcript;
/**
 *  A `VARIANT` annotation type.
 *
 *  Value: "VARIANT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_Annotation_Type_Variant;

// ----------------------------------------------------------------------------
// GTLRGenomics_AnnotationSet.type

/** Value: "ANNOTATION_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_AnnotationSet_Type_AnnotationTypeUnspecified;
/**
 *  A `GENE` annotation type represents the existence of a gene at the
 *  associated reference coordinates. The start coordinate is typically the
 *  gene's transcription start site and the end is typically the end of the
 *  gene's last exon.
 *
 *  Value: "GENE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_AnnotationSet_Type_Gene;
/**
 *  A `GENERIC` annotation type should be used when no other annotation
 *  type will suffice. This represents an untyped annotation of the reference
 *  genome.
 *
 *  Value: "GENERIC"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_AnnotationSet_Type_Generic;
/**
 *  A `TRANSCRIPT` annotation type represents the assertion that a
 *  particular region of the reference genome may be transcribed as RNA.
 *
 *  Value: "TRANSCRIPT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_AnnotationSet_Type_Transcript;
/**
 *  A `VARIANT` annotation type.
 *
 *  Value: "VARIANT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_AnnotationSet_Type_Variant;

// ----------------------------------------------------------------------------
// GTLRGenomics_CigarUnit.operation

/**
 *  An alignment match indicates that a sequence can be aligned to the
 *  reference without evidence of an INDEL. Unlike the
 *  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
 *  the `ALIGNMENT_MATCH` operator does not indicate whether the
 *  reference and read sequences are an exact match. This operator is
 *  equivalent to SAM's `M`.
 *
 *  Value: "ALIGNMENT_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_AlignmentMatch;
/**
 *  The hard clip operator indicates that bases at the start/end of a read
 *  have been omitted from this alignment. This may occur if this linear
 *  alignment is part of a chimeric alignment, or if the read has been
 *  trimmed (for example, during error correction or to trim poly-A tails for
 *  RNA-seq). This operator is equivalent to SAM's `H`.
 *
 *  Value: "CLIP_HARD"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_ClipHard;
/**
 *  The soft clip operator indicates that bases at the start/end of a read
 *  have not been considered during alignment. This may occur if the majority
 *  of a read maps, except for low quality bases at the start/end of a read.
 *  This operator is equivalent to SAM's `S`. Bases that are soft
 *  clipped will still be stored in the read.
 *
 *  Value: "CLIP_SOFT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_ClipSoft;
/**
 *  The delete operator indicates that the read contains evidence of bases
 *  being deleted from the reference. This operator is equivalent to SAM's
 *  `D`.
 *
 *  Value: "DELETE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_Delete;
/**
 *  The insert operator indicates that the read contains evidence of bases
 *  being inserted into the reference. This operator is equivalent to SAM's
 *  `I`.
 *
 *  Value: "INSERT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_Insert;
/** Value: "OPERATION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_OperationUnspecified;
/**
 *  The pad operator indicates that there is padding in an alignment. This
 *  operator is equivalent to SAM's `P`.
 *
 *  Value: "PAD"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_Pad;
/**
 *  This operator indicates that this portion of the aligned sequence exactly
 *  matches the reference. This operator is equivalent to SAM's `=`.
 *
 *  Value: "SEQUENCE_MATCH"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_SequenceMatch;
/**
 *  This operator indicates that this portion of the aligned sequence is an
 *  alignment match to the reference, but a sequence mismatch. This can
 *  indicate a SNP or a read error. This operator is equivalent to SAM's
 *  `X`.
 *
 *  Value: "SEQUENCE_MISMATCH"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_SequenceMismatch;
/**
 *  The skip operator indicates that this read skips a long segment of the
 *  reference, but the bases have not been deleted. This operator is commonly
 *  used when working with RNA-seq data, where reads may skip long segments
 *  of the reference between exons. This operator is equivalent to SAM's
 *  `N`.
 *
 *  Value: "SKIP"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_CigarUnit_Operation_Skip;

// ----------------------------------------------------------------------------
// GTLRGenomics_ExportVariantSetRequest.format

/**
 *  Export the data to Google BigQuery.
 *
 *  Value: "FORMAT_BIGQUERY"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_ExportVariantSetRequest_Format_FormatBigquery;
/** Value: "FORMAT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_ExportVariantSetRequest_Format_FormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRGenomics_FailedEvent.code

/**
 *  The operation was aborted, typically due to a concurrency issue such as
 *  a sequencer check failure or transaction abort.
 *  See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *  `ABORTED`, and `UNAVAILABLE`.
 *  HTTP Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists.
 *  HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller.
 *  HTTP Mapping: 499 Client Closed Request
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Cancelled;
/**
 *  Unrecoverable data loss or corruption.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "DATA_LOSS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned
 *  even if the operation has completed successfully. For example, a
 *  successful response from a server could have been delayed long
 *  enough for the deadline to expire.
 *  HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state
 *  required for the operation's execution. For example, the directory
 *  to be deleted is non-empty, an rmdir operation is applied to
 *  a non-directory, etc.
 *  Service implementors can use the following guidelines to decide
 *  between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
 *  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
 *  (b) Use `ABORTED` if the client should retry at a higher level
 *  (e.g., when a client-specified test-and-set fails, indicating the
 *  client should restart a read-modify-write sequence).
 *  (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. E.g., if an "rmdir"
 *  fails because the directory is non-empty, `FAILED_PRECONDITION`
 *  should be returned since the client should not retry unless
 *  the files are deleted from the directory.
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the
 *  underlying system have been broken. This error code is reserved
 *  for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Internal;
/**
 *  The client specified an invalid argument. Note that this differs
 *  from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
 *  that are problematic regardless of the state of the system
 *  (e.g., a malformed file name).
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found.
 *  Note to server developers: if a request is denied for an entire class
 *  of users, such as gradual feature rollout or undocumented whitelist,
 *  `NOT_FOUND` may be used. If a request is denied for some users within
 *  a class of users, such as user-based access control, `PERMISSION_DENIED`
 *  must be used.
 *  HTTP Mapping: 404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_NotFound;
/**
 *  Not an error; returned on success
 *  HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or
 *  reading past end-of-file.
 *  Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
 *  be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an
 *  offset that is not in the range [0,2^32-1], but it will generate
 *  `OUT_OF_RANGE` if asked to read from an offset past the current
 *  file size.
 *  There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *  `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *  error) when it applies so that callers who are iterating through
 *  a space can easily look for an `OUT_OF_RANGE` error to detect when
 *  they are done.
 *  HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_OutOfRange;
/**
 *  The caller does not have permission to execute the specified
 *  operation. `PERMISSION_DENIED` must not be used for rejections
 *  caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
 *  instead for those errors). `PERMISSION_DENIED` must not be
 *  used if the caller can not be identified (use `UNAUTHENTICATED`
 *  instead for those errors). This error code does not imply the
 *  request is valid or the requested entity exists or satisfies
 *  other pre-conditions.
 *  HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or
 *  perhaps the entire file system is out of space.
 *  HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation.
 *  HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a
 *  transient condition, which can be corrected by retrying with
 *  a backoff.
 *  See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *  `ABORTED`, and `UNAVAILABLE`.
 *  HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service.
 *  HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when
 *  a `Status` value received from another address space belongs to
 *  an error space that is not known in this address space. Also
 *  errors raised by APIs that do not return enough error information
 *  may be converted to this error.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_FailedEvent_Code_Unknown;

// ----------------------------------------------------------------------------
// GTLRGenomics_ImportReadGroupSetsRequest.partitionStrategy

/**
 *  Includes all read groups in all imported files into a single read group
 *  set. Requires that the headers for all imported files are equivalent. All
 *  reads which do not belong to a read group, if any, will be grouped into a
 *  separate read group set.
 *
 *  Value: "MERGE_ALL"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_MergeAll;
/** Value: "PARTITION_STRATEGY_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_PartitionStrategyUnspecified;
/**
 *  In most cases, this strategy yields one read group set per file. This is
 *  the default behavior.
 *  Allocate one read group set per file per sample. For BAM files, read
 *  groups are considered to share a sample if they have identical sample
 *  names. Furthermore, all reads for each file which do not belong to a read
 *  group, if any, will be grouped into a single read group set per-file.
 *
 *  Value: "PER_FILE_PER_SAMPLE"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_PerFilePerSample;

// ----------------------------------------------------------------------------
// GTLRGenomics_ImportVariantsRequest.format

/**
 *  Complete Genomics masterVarBeta format. The masterVarBeta files may
 *  be bzip2 compressed.
 *
 *  Value: "FORMAT_COMPLETE_GENOMICS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_Format_FormatCompleteGenomics;
/** Value: "FORMAT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_Format_FormatUnspecified;
/**
 *  VCF (Variant Call Format). The VCF files may be gzip compressed. gVCF is
 *  also supported. Disclaimer: gzip VCF imports are currently much slower
 *  than equivalent uncompressed VCF imports. For this reason, uncompressed
 *  VCF is currently recommended for imports with more than 1GB combined
 *  uncompressed size, or for time sensitive imports.
 *
 *  Value: "FORMAT_VCF"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_Format_FormatVcf;

// ----------------------------------------------------------------------------
// GTLRGenomics_ImportVariantsRequest_InfoMergeConfig.infoMergeConfig

/** Value: "IGNORE_NEW" */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_InfoMergeConfig_InfoMergeConfig_IgnoreNew;
/** Value: "INFO_MERGE_OPERATION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_InfoMergeConfig_InfoMergeConfig_InfoMergeOperationUnspecified;
/** Value: "MOVE_TO_CALLS" */
GTLR_EXTERN NSString * const kGTLRGenomics_ImportVariantsRequest_InfoMergeConfig_InfoMergeConfig_MoveToCalls;

// ----------------------------------------------------------------------------
// GTLRGenomics_MergeVariantsRequest_InfoMergeConfig.infoMergeConfig

/** Value: "IGNORE_NEW" */
GTLR_EXTERN NSString * const kGTLRGenomics_MergeVariantsRequest_InfoMergeConfig_InfoMergeConfig_IgnoreNew;
/** Value: "INFO_MERGE_OPERATION_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_MergeVariantsRequest_InfoMergeConfig_InfoMergeConfig_InfoMergeOperationUnspecified;
/** Value: "MOVE_TO_CALLS" */
GTLR_EXTERN NSString * const kGTLRGenomics_MergeVariantsRequest_InfoMergeConfig_InfoMergeConfig_MoveToCalls;

// ----------------------------------------------------------------------------
// GTLRGenomics_SearchAnnotationSetsRequest.types

/** Value: "ANNOTATION_TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_SearchAnnotationSetsRequest_Types_AnnotationTypeUnspecified;
/** Value: "GENE" */
GTLR_EXTERN NSString * const kGTLRGenomics_SearchAnnotationSetsRequest_Types_Gene;
/** Value: "GENERIC" */
GTLR_EXTERN NSString * const kGTLRGenomics_SearchAnnotationSetsRequest_Types_Generic;
/** Value: "TRANSCRIPT" */
GTLR_EXTERN NSString * const kGTLRGenomics_SearchAnnotationSetsRequest_Types_Transcript;
/** Value: "VARIANT" */
GTLR_EXTERN NSString * const kGTLRGenomics_SearchAnnotationSetsRequest_Types_Variant;

// ----------------------------------------------------------------------------
// GTLRGenomics_VariantAnnotation.clinicalSignificance

/** Value: "ASSOCIATION" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Association;
/** Value: "BENIGN" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Benign;
/**
 *  `OTHER` should be used when no other clinical significance
 *  value will suffice.
 *
 *  Value: "CLINICAL_SIGNIFICANCE_OTHER"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ClinicalSignificanceOther;
/** Value: "CLINICAL_SIGNIFICANCE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ClinicalSignificanceUnspecified;
/** Value: "CONFERS_SENSITIVITY" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ConfersSensitivity;
/** Value: "DRUG_RESPONSE" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_DrugResponse;
/** Value: "HISTOCOMPATIBILITY" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Histocompatibility;
/** Value: "LIKELY_BENIGN" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_LikelyBenign;
/** Value: "LIKELY_PATHOGENIC" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_LikelyPathogenic;
/**
 *  `MULTIPLE_REPORTED` should be used when multiple clinical
 *  signficances are reported for a variant. The original clinical
 *  significance values may be provided in the `info` field.
 *
 *  Value: "MULTIPLE_REPORTED"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_MultipleReported;
/** Value: "PATHOGENIC" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Pathogenic;
/** Value: "PROTECTIVE" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Protective;
/** Value: "RISK_FACTOR" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_RiskFactor;
/** Value: "UNCERTAIN" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Uncertain;

// ----------------------------------------------------------------------------
// GTLRGenomics_VariantAnnotation.effect

/**
 *  `EFFECT_OTHER` should be used when no other Effect
 *  will suffice.
 *
 *  Value: "EFFECT_OTHER"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_EffectOther;
/** Value: "EFFECT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_EffectUnspecified;
/**
 *  `FRAME_PRESERVING_INDEL` indicates a mutation in which a
 *  multiple of three nucleotides has been inserted or deleted, resulting
 *  in no change to the reading frame of the coding sequence.
 *
 *  Value: "FRAME_PRESERVING_INDEL"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_FramePreservingIndel;
/**
 *  `FRAMESHIFT` indicates a mutation in which the insertion or
 *  deletion of nucleotides resulted in a frameshift change.
 *
 *  Value: "FRAMESHIFT"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_Frameshift;
/**
 *  `NONSYNONYMOUS_SNP` indicates a single nucleotide
 *  polymorphism mutation that results in an amino acid change.
 *
 *  Value: "NONSYNONYMOUS_SNP"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_NonsynonymousSnp;
/**
 *  `SPLICE_SITE_DISRUPTION` indicates that this variant is
 *  found in a splice site for the associated transcript, and alters the
 *  normal splicing pattern.
 *
 *  Value: "SPLICE_SITE_DISRUPTION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_SpliceSiteDisruption;
/**
 *  `STOP_GAIN` indicates a mutation that leads to the creation
 *  of a stop codon at the variant site. Frameshift mutations creating
 *  downstream stop codons do not count as `STOP_GAIN`.
 *
 *  Value: "STOP_GAIN"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_StopGain;
/**
 *  `STOP_LOSS` indicates a mutation that eliminates a
 *  stop codon at the variant site.
 *
 *  Value: "STOP_LOSS"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_StopLoss;
/**
 *  `SYNONYMOUS_SNP` indicates a single nucleotide polymorphism
 *  mutation that results in no amino acid change.
 *
 *  Value: "SYNONYMOUS_SNP"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Effect_SynonymousSnp;

// ----------------------------------------------------------------------------
// GTLRGenomics_VariantAnnotation.type

/**
 *  `CNV` indicates a variation in copy number.
 *
 *  Value: "CNV"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Cnv;
/**
 *  `DELETION` indicates a deletion.
 *
 *  Value: "DELETION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Deletion;
/**
 *  `INSERTION` indicates an insertion.
 *
 *  Value: "INSERTION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Insertion;
/**
 *  `SNP` indicates a single nucleotide polymorphism.
 *
 *  Value: "SNP"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Snp;
/**
 *  `STRUCTURAL` indicates a large structural variant,
 *  including chromosomal fusions, inversions, etc.
 *
 *  Value: "STRUCTURAL"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Structural;
/**
 *  `SUBSTITUTION` indicates a block substitution of
 *  two or more nucleotides.
 *
 *  Value: "SUBSTITUTION"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_Substitution;
/**
 *  `TYPE_OTHER` should be used when no other Type will suffice.
 *  Further explanation of the variant type may be included in the
 *  info field.
 *
 *  Value: "TYPE_OTHER"
 */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_TypeOther;
/** Value: "TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantAnnotation_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRGenomics_VariantSetMetadata.type

/** Value: "CHARACTER" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_Character;
/** Value: "FLAG" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_Flag;
/** Value: "FLOAT" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_Float;
/** Value: "INTEGER" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_Integer;
/** Value: "STRING" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_String;
/** Value: "TYPE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRGenomics_VariantSetMetadata_Type_TypeUnspecified;

/**
 *  An annotation describes a region of reference genome. The value of an
 *  annotation may be one of several canonical types, supplemented by arbitrary
 *  info tags. An annotation is not inherently associated with a specific
 *  sample or individual (though a client could choose to use annotations in
 *  this way). Example canonical annotation types are `GENE` and
 *  `VARIANT`.
 */
@interface GTLRGenomics_Annotation : GTLRObject

/** The annotation set to which this annotation belongs. */
@property(nonatomic, copy, nullable) NSString *annotationSetId;

/**
 *  The end position of the range on the reference, 0-based exclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The server-generated annotation ID, unique across all annotations.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Annotation_Info *info;

/** The display name of this annotation. */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID of the Google Genomics reference associated with this range. */
@property(nonatomic, copy, nullable) NSString *referenceId;

/**
 *  The display name corresponding to the reference specified by
 *  `referenceId`, for example `chr1`, `1`, or `chrX`.
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  Whether this range refers to the reverse strand, as opposed to the forward
 *  strand. Note that regardless of this field, the start/end position of the
 *  range always refer to the forward strand.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reverseStrand;

/**
 *  The start position of the range on the reference, 0-based inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

/**
 *  A transcript value represents the assertion that a particular region of
 *  the reference genome may be transcribed as RNA. An alternative splicing
 *  pattern would be represented as a separate transcript object. This field
 *  is only set for annotations of type `TRANSCRIPT`.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Transcript *transcript;

/**
 *  The data type for this annotation. Must match the containing annotation
 *  set's type.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_Annotation_Type_AnnotationTypeUnspecified Value
 *        "ANNOTATION_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_Annotation_Type_Gene A `GENE` annotation type
 *        represents the existence of a gene at the
 *        associated reference coordinates. The start coordinate is typically
 *        the
 *        gene's transcription start site and the end is typically the end of
 *        the
 *        gene's last exon. (Value: "GENE")
 *    @arg @c kGTLRGenomics_Annotation_Type_Generic A `GENERIC` annotation type
 *        should be used when no other annotation
 *        type will suffice. This represents an untyped annotation of the
 *        reference
 *        genome. (Value: "GENERIC")
 *    @arg @c kGTLRGenomics_Annotation_Type_Transcript A `TRANSCRIPT` annotation
 *        type represents the assertion that a
 *        particular region of the reference genome may be transcribed as RNA.
 *        (Value: "TRANSCRIPT")
 *    @arg @c kGTLRGenomics_Annotation_Type_Variant A `VARIANT` annotation type.
 *        (Value: "VARIANT")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  A variant annotation, which describes the effect of a variant on the
 *  genome, the coding sequence, and/or higher level consequences at the
 *  organism level e.g. pathogenicity. This field is only set for annotations
 *  of type `VARIANT`.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_VariantAnnotation *variant;

@end


/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Annotation_Info : GTLRObject
@end


/**
 *  An annotation set is a logical grouping of annotations that share consistent
 *  type information and provenance. Examples of annotation sets include 'all
 *  genes from refseq', and 'all variant annotations from ClinVar'.
 */
@interface GTLRGenomics_AnnotationSet : GTLRObject

/** The dataset to which this annotation set belongs. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The server-generated annotation set ID, unique across all annotation sets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_AnnotationSet_Info *info;

/** The display name for this annotation set. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The ID of the reference set that defines the coordinate space for this
 *  set's annotations.
 */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

/**
 *  The source URI describing the file from which this annotation set was
 *  generated, if any.
 */
@property(nonatomic, copy, nullable) NSString *sourceUri;

/**
 *  The type of annotations contained within this set.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_AnnotationSet_Type_AnnotationTypeUnspecified Value
 *        "ANNOTATION_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_AnnotationSet_Type_Gene A `GENE` annotation type
 *        represents the existence of a gene at the
 *        associated reference coordinates. The start coordinate is typically
 *        the
 *        gene's transcription start site and the end is typically the end of
 *        the
 *        gene's last exon. (Value: "GENE")
 *    @arg @c kGTLRGenomics_AnnotationSet_Type_Generic A `GENERIC` annotation
 *        type should be used when no other annotation
 *        type will suffice. This represents an untyped annotation of the
 *        reference
 *        genome. (Value: "GENERIC")
 *    @arg @c kGTLRGenomics_AnnotationSet_Type_Transcript A `TRANSCRIPT`
 *        annotation type represents the assertion that a
 *        particular region of the reference genome may be transcribed as RNA.
 *        (Value: "TRANSCRIPT")
 *    @arg @c kGTLRGenomics_AnnotationSet_Type_Variant A `VARIANT` annotation
 *        type. (Value: "VARIANT")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_AnnotationSet_Info : GTLRObject
@end


/**
 *  GTLRGenomics_BatchCreateAnnotationsRequest
 */
@interface GTLRGenomics_BatchCreateAnnotationsRequest : GTLRObject

/**
 *  The annotations to be created. At most 4096 can be specified in a single
 *  request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Annotation *> *annotations;

/**
 *  A unique request ID which enables the server to detect duplicated requests.
 *  If provided, duplicated requests will result in the same response; if not
 *  provided, duplicated requests may result in duplicated data. For a given
 *  annotation set, callers should not reuse `request_id`s when writing
 *  different batches of annotations - behavior in this case is undefined.
 *  A common approach is to use a UUID. For batch jobs where worker crashes are
 *  a possibility, consider using some unique variant of a worker or run ID.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  GTLRGenomics_BatchCreateAnnotationsResponse
 */
@interface GTLRGenomics_BatchCreateAnnotationsResponse : GTLRObject

/**
 *  The resulting per-annotation entries, ordered consistently with the
 *  original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Entry *> *entries;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRGenomics_Binding : GTLRObject

/**
 *  Unimplemented. The condition that is associated with this binding.
 *  NOTE: an unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A call set is a collection of variant calls, typically for one sample. It
 *  belongs to a variant set.
 */
@interface GTLRGenomics_CallSet : GTLRObject

/**
 *  The date this call set was created in milliseconds from the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *created;

/**
 *  The server-generated call set ID, unique across all call sets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional call set information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_CallSet_Info *info;

/** The call set name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The sample ID this call set corresponds to. */
@property(nonatomic, copy, nullable) NSString *sampleId;

/**
 *  The IDs of the variant sets this call set belongs to. This field must
 *  have exactly length one, as a call set belongs to a single variant set.
 *  This field is repeated for compatibility with the
 *  [GA4GH 0.5.1
 *  API](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variants.avdl#L76).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *variantSetIds;

@end


/**
 *  A map of additional call set information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_CallSet_Info : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRGenomics_CancelOperationRequest : GTLRObject
@end


/**
 *  A single CIGAR operation.
 */
@interface GTLRGenomics_CigarUnit : GTLRObject

/**
 *  operation
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_AlignmentMatch An alignment
 *        match indicates that a sequence can be aligned to the
 *        reference without evidence of an INDEL. Unlike the
 *        `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
 *        the `ALIGNMENT_MATCH` operator does not indicate whether the
 *        reference and read sequences are an exact match. This operator is
 *        equivalent to SAM's `M`. (Value: "ALIGNMENT_MATCH")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_ClipHard The hard clip operator
 *        indicates that bases at the start/end of a read
 *        have been omitted from this alignment. This may occur if this linear
 *        alignment is part of a chimeric alignment, or if the read has been
 *        trimmed (for example, during error correction or to trim poly-A tails
 *        for
 *        RNA-seq). This operator is equivalent to SAM's `H`. (Value:
 *        "CLIP_HARD")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_ClipSoft The soft clip operator
 *        indicates that bases at the start/end of a read
 *        have not been considered during alignment. This may occur if the
 *        majority
 *        of a read maps, except for low quality bases at the start/end of a
 *        read.
 *        This operator is equivalent to SAM's `S`. Bases that are soft
 *        clipped will still be stored in the read. (Value: "CLIP_SOFT")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_Delete The delete operator
 *        indicates that the read contains evidence of bases
 *        being deleted from the reference. This operator is equivalent to SAM's
 *        `D`. (Value: "DELETE")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_Insert The insert operator
 *        indicates that the read contains evidence of bases
 *        being inserted into the reference. This operator is equivalent to
 *        SAM's
 *        `I`. (Value: "INSERT")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_OperationUnspecified Value
 *        "OPERATION_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_Pad The pad operator indicates
 *        that there is padding in an alignment. This
 *        operator is equivalent to SAM's `P`. (Value: "PAD")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_SequenceMatch This operator
 *        indicates that this portion of the aligned sequence exactly
 *        matches the reference. This operator is equivalent to SAM's `=`.
 *        (Value: "SEQUENCE_MATCH")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_SequenceMismatch This operator
 *        indicates that this portion of the aligned sequence is an
 *        alignment match to the reference, but a sequence mismatch. This can
 *        indicate a SNP or a read error. This operator is equivalent to SAM's
 *        `X`. (Value: "SEQUENCE_MISMATCH")
 *    @arg @c kGTLRGenomics_CigarUnit_Operation_Skip The skip operator indicates
 *        that this read skips a long segment of the
 *        reference, but the bases have not been deleted. This operator is
 *        commonly
 *        used when working with RNA-seq data, where reads may skip long
 *        segments
 *        of the reference between exons. This operator is equivalent to SAM's
 *        `N`. (Value: "SKIP")
 */
@property(nonatomic, copy, nullable) NSString *operation;

/**
 *  The number of genomic bases that the operation runs for. Required.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *operationLength;

/**
 *  `referenceSequence` is only used at mismatches
 *  (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
 *  Filling this field replaces SAM's MD tag. If the relevant information is
 *  not available, this field is unset.
 */
@property(nonatomic, copy, nullable) NSString *referenceSequence;

@end


/**
 *  GTLRGenomics_ClinicalCondition
 */
@interface GTLRGenomics_ClinicalCondition : GTLRObject

/**
 *  The MedGen concept id associated with this gene.
 *  Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/
 */
@property(nonatomic, copy, nullable) NSString *conceptId;

/** The set of external IDs for this condition. */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ExternalId *> *externalIds;

/** A set of names for the condition. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  The OMIM id for this condition.
 *  Search for these IDs at http://omim.org/
 */
@property(nonatomic, copy, nullable) NSString *omimId;

@end


/**
 *  GTLRGenomics_CodingSequence
 */
@interface GTLRGenomics_CodingSequence : GTLRObject

/**
 *  The end of the coding sequence on this annotation's reference sequence,
 *  0-based exclusive. Note that this position is relative to the reference
 *  start, and *not* the containing annotation start.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The start of the coding sequence on this annotation's reference sequence,
 *  0-based inclusive. Note that this position is relative to the reference
 *  start, and *not* the containing annotation start.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  Describes a Compute Engine resource that is being managed by a running
 *  pipeline.
 */
@interface GTLRGenomics_ComputeEngine : GTLRObject

/** The names of the disks that were created for this pipeline. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *diskNames;

/** The instance on which the operation is running. */
@property(nonatomic, copy, nullable) NSString *instanceName;

/** The machine type of the instance. */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The availability zone in which the instance resides.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  An event generated when a container is forcibly terminated by the
 *  worker. Currently, this only occurs when the container outlives the
 *  timeout specified by the user.
 */
@interface GTLRGenomics_ContainerKilledEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

@end


/**
 *  An event generated when a container starts.
 */
@interface GTLRGenomics_ContainerStartedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The public IP address that can be used to connect to the container. This
 *  field is only populated when at least one port mapping is present. If the
 *  instance was created with a private address, this field will be empty even
 *  if port mappings exist.
 */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  The container-to-host port mappings installed for this container. This
 *  set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
 *  as well as any specified in the `Action` definition.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_ContainerStartedEvent_PortMappings *portMappings;

@end


/**
 *  The container-to-host port mappings installed for this container. This
 *  set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
 *  as well as any specified in the `Action` definition.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of intValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_ContainerStartedEvent_PortMappings : GTLRObject
@end


/**
 *  An event generated when a container exits.
 */
@interface GTLRGenomics_ContainerStoppedEvent : GTLRObject

/**
 *  The numeric ID of the action that started this container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

/**
 *  The tail end of any content written to standard error by the container.
 *  If the content emits large amounts of debugging noise or contains
 *  sensitive information, you can prevent the content from being printed by
 *  setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.
 *  Note that only a small amount of the end of the stream is captured here.
 *  The entire stream is stored in the `/google/logs` directory mounted into
 *  each action, and can be copied off the machine as described elsewhere.
 */
@property(nonatomic, copy, nullable) NSString *stderr;

@end


/**
 *  A bucket over which read coverage has been precomputed. A bucket corresponds
 *  to a specific range of the reference sequence.
 */
@interface GTLRGenomics_CoverageBucket : GTLRObject

/**
 *  The average number of reads which are aligned to each individual
 *  reference base in this bucket.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanCoverage;

/** The genomic coordinate range spanned by this bucket. */
@property(nonatomic, strong, nullable) GTLRGenomics_Range *range;

@end


/**
 *  A Dataset is a collection of genomic data.
 */
@interface GTLRGenomics_Dataset : GTLRObject

/** The time this dataset was created, in seconds from the epoch. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The server-generated dataset ID, unique across all datasets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The dataset name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The Google Cloud project ID that this dataset belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  An event generated whenever a resource limitation or transient error
 *  delays execution of a pipeline that was otherwise ready to run.
 */
@interface GTLRGenomics_DelayedEvent : GTLRObject

/**
 *  A textual description of the cause of the delay. The string can change
 *  without notice because it is often generated by another service (such as
 *  Compute Engine).
 */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  If the delay was caused by a resource shortage, this field lists the
 *  Compute Engine metrics that are preventing this operation from running
 *  (for example, `CPUS` or `INSTANCES`). If the particular metric is not
 *  known, a single `UNKNOWN` metric will be present.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRGenomics_Empty : GTLRObject
@end


/**
 *  GTLRGenomics_Entry
 */
@interface GTLRGenomics_Entry : GTLRObject

/** The created annotation, if creation was successful. */
@property(nonatomic, strong, nullable) GTLRGenomics_Annotation *annotation;

/** The creation status. */
@property(nonatomic, strong, nullable) GTLRGenomics_Status *status;

@end


/**
 *  Carries information about events that occur during pipeline execution.
 */
@interface GTLRGenomics_Event : GTLRObject

/**
 *  A human-readable description of the event. Note that these strings can
 *  change at any time without notice. Any application logic must use the
 *  information in the `details` field.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Machine-readable details about the event. */
@property(nonatomic, strong, nullable) GTLRGenomics_Event_Details *details;

/** The time at which the event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  Machine-readable details about the event.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Event_Details : GTLRObject
@end


/**
 *  GTLRGenomics_Exon
 */
@interface GTLRGenomics_Exon : GTLRObject

/**
 *  The end position of the exon on this annotation's reference sequence,
 *  0-based exclusive. Note that this is relative to the reference start, and
 *  *not* the containing annotation start.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The frame of this exon. Contains a value of 0, 1, or 2, which indicates
 *  the offset of the first coding base of the exon within the reading frame
 *  of the coding DNA sequence, if any. This field is dependent on the
 *  strandedness of this annotation (see
 *  Annotation.reverse_strand).
 *  For forward stranded annotations, this offset is relative to the
 *  exon.start. For reverse
 *  strand annotations, this offset is relative to the
 *  exon.end `- 1`.
 *  Unset if this exon does not intersect the coding sequence. Upon creation
 *  of a transcript, the frame must be populated for all or none of the
 *  coding exons.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *frame;

/**
 *  The start position of the exon on this annotation's reference sequence,
 *  0-based inclusive. Note that this is relative to the reference start, and
 *  **not** the containing annotation start.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  GTLRGenomics_Experiment
 */
@interface GTLRGenomics_Experiment : GTLRObject

/**
 *  The instrument model used as part of this experiment. This maps to
 *  sequencing technology in the SAM spec.
 */
@property(nonatomic, copy, nullable) NSString *instrumentModel;

/**
 *  A client-supplied library identifier; a library is a collection of DNA
 *  fragments which have been prepared for sequencing from a sample. This
 *  field is important for quality control as error or bias can be introduced
 *  during sample preparation.
 */
@property(nonatomic, copy, nullable) NSString *libraryId;

/**
 *  The platform unit used as part of this experiment, for example
 *  flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to the
 *  \@RG PU field in the SAM spec.
 */
@property(nonatomic, copy, nullable) NSString *platformUnit;

/** The sequencing center used as part of this experiment. */
@property(nonatomic, copy, nullable) NSString *sequencingCenter;

@end


/**
 *  The read group set export request.
 */
@interface GTLRGenomics_ExportReadGroupSetRequest : GTLRObject

/**
 *  Required. A Google Cloud Storage URI for the exported BAM file.
 *  The currently authenticated user must have write access to the new file.
 *  An error will be returned if the URI already contains data.
 */
@property(nonatomic, copy, nullable) NSString *exportUri;

/**
 *  Required. The Google Cloud project ID that owns this
 *  export. The caller must have WRITE access to this project.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The reference names to export. If this is not specified, all reference
 *  sequences, including unmapped reads, are exported.
 *  Use `*` to export only unmapped reads.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *referenceNames;

@end


/**
 *  The variant data export request.
 */
@interface GTLRGenomics_ExportVariantSetRequest : GTLRObject

/**
 *  Required. The BigQuery dataset to export data to. This dataset must already
 *  exist. Note that this is distinct from the Genomics concept of "dataset".
 */
@property(nonatomic, copy, nullable) NSString *bigqueryDataset;

/**
 *  Required. The BigQuery table to export data to.
 *  If the table doesn't exist, it will be created. If it already exists, it
 *  will be overwritten.
 */
@property(nonatomic, copy, nullable) NSString *bigqueryTable;

/**
 *  If provided, only variant call information from the specified call sets
 *  will be exported. By default all variant calls are exported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *callSetIds;

/**
 *  The format for the exported data.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_ExportVariantSetRequest_Format_FormatBigquery Export
 *        the data to Google BigQuery. (Value: "FORMAT_BIGQUERY")
 *    @arg @c kGTLRGenomics_ExportVariantSetRequest_Format_FormatUnspecified
 *        Value "FORMAT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  Required. The Google Cloud project ID that owns the destination
 *  BigQuery dataset. The caller must have WRITE access to this project. This
 *  project will also own the resulting export job.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRGenomics_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRGenomics_ExternalId
 */
@interface GTLRGenomics_ExternalId : GTLRObject

/**
 *  The id used by the source of this data.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The name of the source of this data. */
@property(nonatomic, copy, nullable) NSString *sourceName;

@end


/**
 *  An event generated when the execution of a pipeline has failed. Note
 *  that other events can continue to occur after this event.
 */
@interface GTLRGenomics_FailedEvent : GTLRObject

/** The human-readable description of the cause of the failure. */
@property(nonatomic, copy, nullable) NSString *cause;

/**
 *  The Google standard error code that best describes this failure.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Aborted The operation was aborted,
 *        typically due to a concurrency issue such as
 *        a sequencer check failure or transaction abort.
 *        See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_AlreadyExists The entity that a
 *        client attempted to create (e.g., file or directory)
 *        already exists.
 *        HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Cancelled The operation was
 *        cancelled, typically by the caller.
 *        HTTP Mapping: 499 Client Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_DataLoss Unrecoverable data loss or
 *        corruption.
 *        HTTP Mapping: 500 Internal Server Error (Value: "DATA_LOSS")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_DeadlineExceeded The deadline
 *        expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned
 *        even if the operation has completed successfully. For example, a
 *        successful response from a server could have been delayed long
 *        enough for the deadline to expire.
 *        HTTP Mapping: 504 Gateway Timeout (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_FailedPrecondition The operation
 *        was rejected because the system is not in a state
 *        required for the operation's execution. For example, the directory
 *        to be deleted is non-empty, an rmdir operation is applied to
 *        a non-directory, etc.
 *        Service implementors can use the following guidelines to decide
 *        between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
 *        (a) Use `UNAVAILABLE` if the client can retry just the failing call.
 *        (b) Use `ABORTED` if the client should retry at a higher level
 *        (e.g., when a client-specified test-and-set fails, indicating the
 *        client should restart a read-modify-write sequence).
 *        (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *        the system state has been explicitly fixed. E.g., if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION`
 *        should be returned since the client should not retry unless
 *        the files are deleted from the directory.
 *        HTTP Mapping: 400 Bad Request (Value: "FAILED_PRECONDITION")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Internal Internal errors. This
 *        means that some invariants expected by the
 *        underlying system have been broken. This error code is reserved
 *        for serious errors.
 *        HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_InvalidArgument The client
 *        specified an invalid argument. Note that this differs
 *        from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
 *        that are problematic regardless of the state of the system
 *        (e.g., a malformed file name).
 *        HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_NotFound Some requested entity
 *        (e.g., file or directory) was not found.
 *        Note to server developers: if a request is denied for an entire class
 *        of users, such as gradual feature rollout or undocumented whitelist,
 *        `NOT_FOUND` may be used. If a request is denied for some users within
 *        a class of users, such as user-based access control,
 *        `PERMISSION_DENIED`
 *        must be used.
 *        HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Ok Not an error; returned on
 *        success
 *        HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_OutOfRange The operation was
 *        attempted past the valid range. E.g., seeking or
 *        reading past end-of-file.
 *        Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
 *        be fixed if the system state changes. For example, a 32-bit file
 *        system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current
 *        file size.
 *        There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through
 *        a space can easily look for an `OUT_OF_RANGE` error to detect when
 *        they are done.
 *        HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_PermissionDenied The caller does
 *        not have permission to execute the specified
 *        operation. `PERMISSION_DENIED` must not be used for rejections
 *        caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
 *        instead for those errors). `PERMISSION_DENIED` must not be
 *        used if the caller can not be identified (use `UNAUTHENTICATED`
 *        instead for those errors). This error code does not imply the
 *        request is valid or the requested entity exists or satisfies
 *        other pre-conditions.
 *        HTTP Mapping: 403 Forbidden (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_ResourceExhausted Some resource has
 *        been exhausted, perhaps a per-user quota, or
 *        perhaps the entire file system is out of space.
 *        HTTP Mapping: 429 Too Many Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unauthenticated The request does
 *        not have valid authentication credentials for the
 *        operation.
 *        HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unavailable The service is
 *        currently unavailable. This is most likely a
 *        transient condition, which can be corrected by retrying with
 *        a backoff.
 *        See the guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 503 Service Unavailable (Value: "UNAVAILABLE")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unimplemented The operation is not
 *        implemented or is not supported/enabled in this
 *        service.
 *        HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRGenomics_FailedEvent_Code_Unknown Unknown error. For example,
 *        this error may be returned when
 *        a `Status` value received from another address space belongs to
 *        an error space that is not known in this address space. Also
 *        errors raised by APIs that do not return enough error information
 *        may be converted to this error.
 *        HTTP Mapping: 500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *code;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRGenomics_GetIamPolicyRequest : GTLRObject
@end


/**
 *  The read group set import request.
 */
@interface GTLRGenomics_ImportReadGroupSetsRequest : GTLRObject

/**
 *  Required. The ID of the dataset these read group sets will belong to. The
 *  caller must have WRITE permissions to this dataset.
 */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The partition strategy describes how read groups are partitioned into read
 *  group sets.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_MergeAll
 *        Includes all read groups in all imported files into a single read
 *        group
 *        set. Requires that the headers for all imported files are equivalent.
 *        All
 *        reads which do not belong to a read group, if any, will be grouped
 *        into a
 *        separate read group set. (Value: "MERGE_ALL")
 *    @arg @c kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_PartitionStrategyUnspecified
 *        Value "PARTITION_STRATEGY_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_ImportReadGroupSetsRequest_PartitionStrategy_PerFilePerSample
 *        In most cases, this strategy yields one read group set per file. This
 *        is
 *        the default behavior.
 *        Allocate one read group set per file per sample. For BAM files, read
 *        groups are considered to share a sample if they have identical sample
 *        names. Furthermore, all reads for each file which do not belong to a
 *        read
 *        group, if any, will be grouped into a single read group set per-file.
 *        (Value: "PER_FILE_PER_SAMPLE")
 */
@property(nonatomic, copy, nullable) NSString *partitionStrategy;

/**
 *  The reference set to which the imported read group sets are aligned to, if
 *  any. The reference names of this reference set must be a superset of those
 *  found in the imported file headers. If no reference set id is provided, a
 *  best effort is made to associate with a matching reference set.
 */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

/**
 *  A list of URIs pointing at [BAM
 *  files](https://samtools.github.io/hts-specs/SAMv1.pdf)
 *  in Google Cloud Storage.
 *  Those URIs can include wildcards (*), but do not add or remove
 *  matching files before import has completed.
 *  Note that Google Cloud Storage object listing is only eventually
 *  consistent: files added may be not be immediately visible to
 *  everyone. Thus, if using a wildcard it is preferable not to start
 *  the import immediately after the files are created.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

@end


/**
 *  The read group set import response.
 */
@interface GTLRGenomics_ImportReadGroupSetsResponse : GTLRObject

/** IDs of the read group sets that were created. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *readGroupSetIds;

@end


/**
 *  The variant data import request.
 */
@interface GTLRGenomics_ImportVariantsRequest : GTLRObject

/**
 *  The format of the variant data being imported. If unspecified, defaults to
 *  to `VCF`.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_ImportVariantsRequest_Format_FormatCompleteGenomics
 *        Complete Genomics masterVarBeta format. The masterVarBeta files may
 *        be bzip2 compressed. (Value: "FORMAT_COMPLETE_GENOMICS")
 *    @arg @c kGTLRGenomics_ImportVariantsRequest_Format_FormatUnspecified Value
 *        "FORMAT_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_ImportVariantsRequest_Format_FormatVcf VCF (Variant
 *        Call Format). The VCF files may be gzip compressed. gVCF is
 *        also supported. Disclaimer: gzip VCF imports are currently much slower
 *        than equivalent uncompressed VCF imports. For this reason,
 *        uncompressed
 *        VCF is currently recommended for imports with more than 1GB combined
 *        uncompressed size, or for time sensitive imports. (Value:
 *        "FORMAT_VCF")
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  A mapping between info field keys and the InfoMergeOperations to
 *  be performed on them. This is plumbed down to the MergeVariantRequests
 *  generated by the resulting import job.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_ImportVariantsRequest_InfoMergeConfig *infoMergeConfig;

/**
 *  Convert reference names to the canonical representation.
 *  hg19 haploytypes (those reference names containing "_hap")
 *  are not modified in any way.
 *  All other reference names are modified according to the following rules:
 *  The reference name is capitalized.
 *  The "chr" prefix is dropped for all autosomes and sex chromsomes.
 *  For example "chr17" becomes "17" and "chrX" becomes "X".
 *  All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *normalizeReferenceNames;

/**
 *  A list of URIs referencing variant files in Google Cloud Storage. URIs can
 *  include wildcards [as described
 *  here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
 *  Note that recursive wildcards ('**') are not supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceUris;

/** Required. The variant set to which variant data should be imported. */
@property(nonatomic, copy, nullable) NSString *variantSetId;

@end


/**
 *  A mapping between info field keys and the InfoMergeOperations to
 *  be performed on them. This is plumbed down to the MergeVariantRequests
 *  generated by the resulting import job.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRGenomics_ImportVariantsRequest_InfoMergeConfig : GTLRObject
@end


/**
 *  The variant data import response.
 */
@interface GTLRGenomics_ImportVariantsResponse : GTLRObject

/** IDs of the call sets created during the import. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *callSetIds;

@end


/**
 *  A linear alignment can be represented by one CIGAR string. Describes the
 *  mapped position and local alignment of the read to the reference.
 */
@interface GTLRGenomics_LinearAlignment : GTLRObject

/**
 *  Represents the local alignment of this sequence (alignment matches, indels,
 *  etc) against the reference.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_CigarUnit *> *cigar;

/**
 *  The mapping quality of this alignment. Represents how likely
 *  the read maps to this position as opposed to other locations.
 *  Specifically, this is -10 log10 Pr(mapping position is wrong), rounded to
 *  the nearest integer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mappingQuality;

/** The position of this alignment. */
@property(nonatomic, strong, nullable) GTLRGenomics_Position *position;

@end


/**
 *  GTLRGenomics_ListBasesResponse
 */
@interface GTLRGenomics_ListBasesResponse : GTLRObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The offset position (0-based) of the given `sequence` from the
 *  start of this `Reference`. This value will differ for each page
 *  in a paginated request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/** A substring of the bases that make up this reference. */
@property(nonatomic, copy, nullable) NSString *sequence;

@end


/**
 *  GTLRGenomics_ListCoverageBucketsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "coverageBuckets" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRGenomics_ListCoverageBucketsResponse : GTLRCollectionObject

/**
 *  The length of each coverage bucket in base pairs. Note that buckets at the
 *  end of a reference sequence may be shorter. This value is omitted if the
 *  bucket width is infinity (the default behaviour, with no range or
 *  `targetBucketWidth`).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketWidth;

/**
 *  The coverage buckets. The list of buckets is sparse; a bucket with 0
 *  overlapping reads is not returned. A bucket never crosses more than one
 *  reference sequence. Each bucket has width `bucketWidth`, unless
 *  its end is the end of the reference sequence.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_CoverageBucket *> *coverageBuckets;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The dataset list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "datasets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_ListDatasetsResponse : GTLRCollectionObject

/**
 *  The list of matching Datasets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Dataset *> *datasets;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Operation *> *operations;

@end


/**
 *  GTLRGenomics_MergeVariantsRequest
 */
@interface GTLRGenomics_MergeVariantsRequest : GTLRObject

/**
 *  A mapping between info field keys and the InfoMergeOperations to
 *  be performed on them.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_MergeVariantsRequest_InfoMergeConfig *infoMergeConfig;

/** The variants to be merged with existing variants. */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Variant *> *variants;

/** The destination variant set. */
@property(nonatomic, copy, nullable) NSString *variantSetId;

@end


/**
 *  A mapping between info field keys and the InfoMergeOperations to
 *  be performed on them.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRGenomics_MergeVariantsRequest_InfoMergeConfig : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRGenomics_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRGenomics_Status *error;

/**
 *  An OperationMetadata or Metadata object. This will always be returned with
 *  the Operation.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. For example&#58;
 *  `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If
 *  importing Variants, an ImportVariantsResponse is returned. For pipelines and
 *  exports, an Empty response is returned.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Operation_Response *response;

@end


/**
 *  An OperationMetadata or Metadata object. This will always be returned with
 *  the Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Operation_Metadata : GTLRObject
@end


/**
 *  If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If
 *  importing Variants, an ImportVariantsResponse is returned. For pipelines and
 *  exports, an Empty response is returned.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Operation_Response : GTLRObject
@end


/**
 *  An event that occurred during an Operation.
 */
@interface GTLRGenomics_OperationEvent : GTLRObject

/**
 *  Required description of event.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional time of when event finished. An event can have a start time and no
 *  finish time. If an event has a finish time, there must be a start time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Optional time of when event started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Metadata describing an Operation.
 */
@interface GTLRGenomics_OperationMetadata : GTLRObject

/**
 *  This field is deprecated. Use `labels` instead. Optionally provided by the
 *  caller when submitting the request that creates the operation.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The time at which the job was submitted to the Genomics service. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time at which the job stopped running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Optional event messages that were generated during the job's execution.
 *  This also contains any warnings that were generated during import
 *  or export.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_OperationEvent *> *events;

/**
 *  Optionally provided by the caller when submitting the request that creates
 *  the operation.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_Labels *labels;

/** The Google Cloud Project in which the job is scoped. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The original request that started the operation. Note that this will be in
 *  current version of the API. If the operation was started with v1beta2 API
 *  and a GetOperation is performed on v1 API, a v1 request will be returned.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_Request *request;

/** Runtime metadata on this Operation. */
@property(nonatomic, strong, nullable) GTLRGenomics_OperationMetadata_RuntimeMetadata *runtimeMetadata;

/** The time at which the job began to run. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Optionally provided by the caller when submitting the request that creates
 *  the operation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_Labels : GTLRObject
@end


/**
 *  The original request that started the operation. Note that this will be in
 *  current version of the API. If the operation was started with v1beta2 API
 *  and a GetOperation is performed on v1 API, a v1 request will be returned.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_Request : GTLRObject
@end


/**
 *  Runtime metadata on this Operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_OperationMetadata_RuntimeMetadata : GTLRObject
@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-other-app\@appspot.gserviceaccount.com
 *  role: roles/owner
 *  - members:
 *  - user:sean\@example.com
 *  role: roles/viewer
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRGenomics_Policy : GTLRObject

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  An abstraction for referring to a genomic position, in relation to some
 *  already known reference. For now, represents a genomic position as a
 *  reference name, a base number on that reference (0-based), and a
 *  determination of forward or reverse strand.
 */
@interface GTLRGenomics_Position : GTLRObject

/**
 *  The 0-based offset from the start of the forward strand for that reference.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *position;

/** The name of the reference in whatever reference set is being used. */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  Whether this position is on the reverse strand, as opposed to the forward
 *  strand.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reverseStrand;

@end


/**
 *  GTLRGenomics_Program
 */
@interface GTLRGenomics_Program : GTLRObject

/** The command line used to run this program. */
@property(nonatomic, copy, nullable) NSString *commandLine;

/**
 *  The user specified locally unique ID of the program. Used along with
 *  `prevProgramId` to define an ordering between programs.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The display name of the program. This is typically the colloquial name of
 *  the tool used, for example 'bwa' or 'picard'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID of the program run before this one. */
@property(nonatomic, copy, nullable) NSString *prevProgramId;

/** The version of the program run. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  An event generated when the worker starts pulling an image.
 */
@interface GTLRGenomics_PullStartedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  An event generated when the worker stops pulling an image.
 */
@interface GTLRGenomics_PullStoppedEvent : GTLRObject

/** The URI of the image that was pulled. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  A 0-based half-open genomic coordinate range for search requests.
 */
@interface GTLRGenomics_Range : GTLRObject

/**
 *  The end position of the range on the reference, 0-based exclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The reference sequence name, for example `chr1`,
 *  `1`, or `chrX`.
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The start position of the range on the reference, 0-based inclusive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  A read alignment describes a linear alignment of a string of DNA to a
 *  reference sequence, in addition to metadata
 *  about the fragment (the molecule of DNA sequenced) and the read (the bases
 *  which were read by the sequencer). A read is equivalent to a line in a SAM
 *  file. A read belongs to exactly one read group and exactly one
 *  read group set.
 *  ### Reverse-stranded reads
 *  Mapped reads (reads having a non-null `alignment`) can be aligned to either
 *  the forward or the reverse strand of their associated reference.
 *  Strandedness
 *  of a mapped read is encoded by `alignment.position.reverseStrand`.
 *  If we consider the reference to be a forward-stranded coordinate space of
 *  `[0, reference.length)` with `0` as the left-most position and
 *  `reference.length` as the right-most position, reads are always aligned left
 *  to right. That is, `alignment.position.position` always refers to the
 *  left-most reference coordinate and `alignment.cigar` describes the alignment
 *  of this read to the reference from left to right. All per-base fields such
 *  as
 *  `alignedSequence` and `alignedQuality` share this same left-to-right
 *  orientation; this is true of reads which are aligned to either strand. For
 *  reverse-stranded reads, this means that `alignedSequence` is the reverse
 *  complement of the bases that were originally reported by the sequencing
 *  machine.
 *  ### Generating a reference-aligned sequence string
 *  When interacting with mapped reads, it's often useful to produce a string
 *  representing the local alignment of the read to reference. The following
 *  pseudocode demonstrates one way of doing this:
 *  out = ""
 *  offset = 0
 *  for c in read.alignment.cigar {
 *  switch c.operation {
 *  case "ALIGNMENT_MATCH", "SEQUENCE_MATCH", "SEQUENCE_MISMATCH":
 *  out += read.alignedSequence[offset:offset+c.operationLength]
 *  offset += c.operationLength
 *  break
 *  case "CLIP_SOFT", "INSERT":
 *  offset += c.operationLength
 *  break
 *  case "PAD":
 *  out += repeat("*", c.operationLength)
 *  break
 *  case "DELETE":
 *  out += repeat("-", c.operationLength)
 *  break
 *  case "SKIP":
 *  out += repeat(" ", c.operationLength)
 *  break
 *  case "CLIP_HARD":
 *  break
 *  }
 *  }
 *  return out
 *  ### Converting to SAM's CIGAR string
 *  The following pseudocode generates a SAM CIGAR string from the
 *  `cigar` field. Note that this is a lossy conversion
 *  (`cigar.referenceSequence` is lost).
 *  cigarMap = {
 *  "ALIGNMENT_MATCH": "M",
 *  "INSERT": "I",
 *  "DELETE": "D",
 *  "SKIP": "N",
 *  "CLIP_SOFT": "S",
 *  "CLIP_HARD": "H",
 *  "PAD": "P",
 *  "SEQUENCE_MATCH": "=",
 *  "SEQUENCE_MISMATCH": "X",
 *  }
 *  cigarStr = ""
 *  for c in read.alignment.cigar {
 *  cigarStr += c.operationLength + cigarMap[c.operation]
 *  }
 *  return cigarStr
 */
@interface GTLRGenomics_Read : GTLRObject

/**
 *  The quality of the read sequence contained in this alignment record
 *  (equivalent to QUAL in SAM).
 *  `alignedSequence` and `alignedQuality` may be shorter than the full read
 *  sequence and quality. This will occur if the alignment is part of a
 *  chimeric alignment, or if the read was trimmed. When this occurs, the CIGAR
 *  for this read will begin/end with a hard clip operator that will indicate
 *  the length of the excised sequence.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *alignedQuality;

/**
 *  The bases of the read sequence contained in this alignment record,
 *  **without CIGAR operations applied** (equivalent to SEQ in SAM).
 *  `alignedSequence` and `alignedQuality` may be
 *  shorter than the full read sequence and quality. This will occur if the
 *  alignment is part of a chimeric alignment, or if the read was trimmed. When
 *  this occurs, the CIGAR for this read will begin/end with a hard clip
 *  operator that will indicate the length of the excised sequence.
 */
@property(nonatomic, copy, nullable) NSString *alignedSequence;

/**
 *  The linear alignment for this alignment record. This field is null for
 *  unmapped reads.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_LinearAlignment *alignment;

/**
 *  The fragment is a PCR or optical duplicate (SAM flag 0x400).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *duplicateFragment;

/**
 *  Whether this read did not pass filters, such as platform or vendor quality
 *  controls (SAM flag 0x200).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedVendorQualityChecks;

/**
 *  The observed length of the fragment, equivalent to TLEN in SAM.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fragmentLength;

/** The fragment name. Equivalent to QNAME (query template name) in SAM. */
@property(nonatomic, copy, nullable) NSString *fragmentName;

/**
 *  The server-generated read ID, unique across all reads. This is different
 *  from the `fragmentName`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Read_Info *info;

/**
 *  The mapping of the primary alignment of the
 *  `(readNumber+1)%numberReads` read in the fragment. It replaces
 *  mate position and mate strand in SAM.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Position *nextMatePosition;

/**
 *  The number of reads in the fragment (extension to SAM flag 0x1).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberReads;

/**
 *  The orientation and the distance between reads from the fragment are
 *  consistent with the sequencing protocol (SAM flag 0x2).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *properPlacement;

/**
 *  The ID of the read group this read belongs to. A read belongs to exactly
 *  one read group. This is a server-generated ID which is distinct from SAM's
 *  RG tag (for that value, see
 *  ReadGroup.name).
 */
@property(nonatomic, copy, nullable) NSString *readGroupId;

/**
 *  The ID of the read group set this read belongs to. A read belongs to
 *  exactly one read group set.
 */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  The read number in sequencing. 0-based and less than numberReads. This
 *  field replaces SAM flag 0x40 and 0x80.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readNumber;

/**
 *  Whether this alignment is secondary. Equivalent to SAM flag 0x100.
 *  A secondary alignment represents an alternative to the primary alignment
 *  for this read. Aligners may return secondary alignments if a read can map
 *  ambiguously to multiple coordinates in the genome. By convention, each read
 *  has one and only one alignment where both `secondaryAlignment`
 *  and `supplementaryAlignment` are false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *secondaryAlignment;

/**
 *  Whether this alignment is supplementary. Equivalent to SAM flag 0x800.
 *  Supplementary alignments are used in the representation of a chimeric
 *  alignment. In a chimeric alignment, a read is split into multiple
 *  linear alignments that map to different reference contigs. The first
 *  linear alignment in the read will be designated as the representative
 *  alignment; the remaining linear alignments will be designated as
 *  supplementary alignments. These alignments may have different mapping
 *  quality scores. In each linear alignment in a chimeric alignment, the read
 *  will be hard clipped. The `alignedSequence` and
 *  `alignedQuality` fields in the alignment record will only
 *  represent the bases for its respective linear alignment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supplementaryAlignment;

@end


/**
 *  A map of additional read alignment information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Read_Info : GTLRObject
@end


/**
 *  A read group is all the data that's processed the same way by the sequencer.
 */
@interface GTLRGenomics_ReadGroup : GTLRObject

/** The dataset to which this read group belongs. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  A free-form text description of this read group.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The experiment used to generate this read group. */
@property(nonatomic, strong, nullable) GTLRGenomics_Experiment *experiment;

/**
 *  The server-generated read group ID, unique for all read groups.
 *  Note: This is different than the \@RG ID field in the SAM spec. For that
 *  value, see name.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional read group information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_ReadGroup_Info *info;

/**
 *  The read group name. This corresponds to the \@RG ID field in the SAM spec.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The predicted insert size of this read group. The insert size is the length
 *  the sequenced DNA fragment from end-to-end, not including the adapters.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *predictedInsertSize;

/**
 *  The programs used to generate this read group. Programs are always
 *  identical for all read groups within a read group set. For this reason,
 *  only the first read group in a returned set will have this field
 *  populated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Program *> *programs;

/** The reference set the reads in this read group are aligned to. */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

/** A client-supplied sample identifier for the reads in this read group. */
@property(nonatomic, copy, nullable) NSString *sampleId;

@end


/**
 *  A map of additional read group information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_ReadGroup_Info : GTLRObject
@end


/**
 *  A read group set is a logical collection of read groups, which are
 *  collections of reads produced by a sequencer. A read group set typically
 *  models reads corresponding to one sample, sequenced one way, and aligned one
 *  way.
 *  * A read group set belongs to one dataset.
 *  * A read group belongs to one read group set.
 *  * A read belongs to one read group.
 */
@interface GTLRGenomics_ReadGroupSet : GTLRObject

/** The dataset to which this read group set belongs. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The filename of the original source file for this read group set, if any.
 */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  The server-generated read group set ID, unique for all read group sets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A map of additional read group set information. */
@property(nonatomic, strong, nullable) GTLRGenomics_ReadGroupSet_Info *info;

/**
 *  The read group set name. By default this will be initialized to the sample
 *  name of the sequenced data contained in this set.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The read groups in this set. There are typically 1-10 read groups in a read
 *  group set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ReadGroup *> *readGroups;

/**
 *  The reference set to which the reads in this read group set are aligned.
 */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

@end


/**
 *  A map of additional read group set information.
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_ReadGroupSet_Info : GTLRObject
@end


/**
 *  A reference is a canonical assembled DNA sequence, intended to act as a
 *  reference coordinate space for other genomic annotations. A single reference
 *  might represent the human chromosome 1 or mitochandrial DNA, for instance. A
 *  reference belongs to one or more reference sets.
 */
@interface GTLRGenomics_Reference : GTLRObject

/**
 *  The server-generated reference ID, unique across all references.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The length of this reference's sequence.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  MD5 of the upper-case sequence excluding all whitespace characters (this
 *  is equivalent to SQ:M5 in SAM). This value is represented in lower case
 *  hexadecimal format.
 */
@property(nonatomic, copy, nullable) NSString *md5checksum;

/** The name of this reference, for example `22`. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  ID from http://www.ncbi.nlm.nih.gov/taxonomy. For example, 9606 for human.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ncbiTaxonId;

/**
 *  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
 *  with a version number, for example `GCF_000001405.26`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceAccessions;

/**
 *  The URI from which the sequence was obtained. Typically specifies a FASTA
 *  format file.
 */
@property(nonatomic, copy, nullable) NSString *sourceUri;

@end


/**
 *  ReferenceBound records an upper bound for the starting coordinate of
 *  variants in a particular reference.
 */
@interface GTLRGenomics_ReferenceBound : GTLRObject

/** The name of the reference associated with this reference bound. */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  An upper bound (inclusive) on the starting coordinate of any
 *  variant in the reference sequence.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *upperBound;

@end


/**
 *  A reference set is a set of references which typically comprise a reference
 *  assembly for a species, such as `GRCh38` which is representative
 *  of the human genome. A reference set defines a common coordinate space for
 *  comparing reference-aligned experimental data. A reference set contains 1 or
 *  more references.
 */
@interface GTLRGenomics_ReferenceSet : GTLRObject

/** Public id of this reference set, such as `GRCh37`. */
@property(nonatomic, copy, nullable) NSString *assemblyId;

/**
 *  Free text description of this reference set.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The server-generated reference set ID, unique across all reference sets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Order-independent MD5 checksum which identifies this reference set. The
 *  checksum is computed by sorting all lower case hexidecimal string
 *  `reference.md5checksum` (for all reference in this set) in
 *  ascending lexicographic order, concatenating, and taking the MD5 of that
 *  value. The resulting value is represented in lower case hexadecimal format.
 */
@property(nonatomic, copy, nullable) NSString *md5checksum;

/**
 *  ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human)
 *  indicating the species which this reference set is intended to model. Note
 *  that contained references may specify a different `ncbiTaxonId`, as
 *  assemblies may contain reference sequences which do not belong to the
 *  modeled species, for example EBV in a human reference genome.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ncbiTaxonId;

/**
 *  The IDs of the reference objects that are part of this set.
 *  `Reference.md5checksum` must be unique within this set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *referenceIds;

/**
 *  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
 *  with a version number, for example `NC_000001.11`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceAccessions;

/** The URI from which the references were obtained. */
@property(nonatomic, copy, nullable) NSString *sourceUri;

@end


/**
 *  The response to the RunPipeline method, returned in the operation's result
 *  field on success.
 */
@interface GTLRGenomics_RunPipelineResponse : GTLRObject
@end


/**
 *  Runtime metadata that will be populated in the
 *  runtimeMetadata
 *  field of the Operation associated with a RunPipeline execution.
 */
@interface GTLRGenomics_RuntimeMetadata : GTLRObject

/** Execution information specific to Google Compute Engine. */
@property(nonatomic, strong, nullable) GTLRGenomics_ComputeEngine *computeEngine;

@end


/**
 *  GTLRGenomics_SearchAnnotationSetsRequest
 */
@interface GTLRGenomics_SearchAnnotationSetsRequest : GTLRObject

/**
 *  Required. The dataset IDs to search within. Caller must have `READ` access
 *  to these datasets.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *datasetIds;

/**
 *  Only return annotations sets for which a substring of the name matches this
 *  string (case insensitive).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 128. The maximum value is 1024.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  If specified, only annotation sets associated with the given reference set
 *  are returned.
 */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

/**
 *  If specified, only annotation sets that have any of these types are
 *  returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  GTLRGenomics_SearchAnnotationSetsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "annotationSets" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRGenomics_SearchAnnotationSetsResponse : GTLRCollectionObject

/**
 *  The matching annotation sets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_AnnotationSet *> *annotationSets;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRGenomics_SearchAnnotationsRequest
 */
@interface GTLRGenomics_SearchAnnotationsRequest : GTLRObject

/**
 *  Required. The annotation sets to search within. The caller must have
 *  `READ` access to these annotation sets.
 *  All queried annotation sets must have the same type.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *annotationSetIds;

/**
 *  The end position of the range on the reference, 0-based exclusive. If
 *  referenceId or
 *  referenceName
 *  must be specified, Defaults to the length of the reference.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 256. The maximum value is 2048.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The ID of the reference to query. */
@property(nonatomic, copy, nullable) NSString *referenceId;

/**
 *  The name of the reference to query, within the reference set associated
 *  with this query.
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The start position of the range on the reference, 0-based inclusive. If
 *  specified,
 *  referenceId or
 *  referenceName
 *  must be specified. Defaults to 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  GTLRGenomics_SearchAnnotationsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "annotations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchAnnotationsResponse : GTLRCollectionObject

/**
 *  The matching annotations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Annotation *> *annotations;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The call set search request.
 */
@interface GTLRGenomics_SearchCallSetsRequest : GTLRObject

/**
 *  Only return call sets for which a substring of the name matches this
 *  string.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 1024.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Restrict the query to call sets within the given variant sets. At least one
 *  ID must be provided.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *variantSetIds;

@end


/**
 *  The call set search response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "callSets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchCallSetsResponse : GTLRCollectionObject

/**
 *  The list of matching call sets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_CallSet *> *callSets;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The read group set search request.
 */
@interface GTLRGenomics_SearchReadGroupSetsRequest : GTLRObject

/**
 *  Restricts this query to read group sets within the given datasets. At least
 *  one ID must be provided.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *datasetIds;

/**
 *  Only return read group sets for which a substring of the name matches this
 *  string.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 256. The maximum value is 1024.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  The read group set search response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "readGroupSets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchReadGroupSetsResponse : GTLRCollectionObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of matching read group sets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ReadGroupSet *> *readGroupSets;

@end


/**
 *  The read search request.
 */
@interface GTLRGenomics_SearchReadsRequest : GTLRObject

/**
 *  The end position of the range on the reference, 0-based exclusive. If
 *  specified, `referenceName` must also be specified.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 256. The maximum value is 2048.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The IDs of the read groups within which to search for reads. All specified
 *  read groups must belong to the same read group sets. Must specify one of
 *  `readGroupSetIds` or `readGroupIds`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *readGroupIds;

/**
 *  The IDs of the read groups sets within which to search for reads. All
 *  specified read group sets must be aligned against a common set of reference
 *  sequences; this defines the genomic coordinates for the query. Must specify
 *  one of `readGroupSetIds` or `readGroupIds`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *readGroupSetIds;

/**
 *  The reference sequence name, for example `chr1`, `1`, or `chrX`. If set to
 *  `*`, only unmapped reads are returned. If unspecified, all reads (mapped
 *  and unmapped) are returned.
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The start position of the range on the reference, 0-based inclusive. If
 *  specified, `referenceName` must also be specified.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  The read search response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "alignments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchReadsResponse : GTLRCollectionObject

/**
 *  The list of matching alignments sorted by mapped genomic coordinate,
 *  if any, ascending in position within the same reference. Unmapped reads,
 *  which have no position, are returned contiguously and are sorted in
 *  ascending lexicographic order by fragment name.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Read *> *alignments;

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRGenomics_SearchReferenceSetsRequest
 */
@interface GTLRGenomics_SearchReferenceSetsRequest : GTLRObject

/**
 *  If present, return reference sets for which a prefix of any of
 *  sourceAccessions
 *  match any of these strings. Accession numbers typically have a main number
 *  and a version, for example `NC_000001.11`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessions;

/**
 *  If present, return reference sets for which a substring of their
 *  `assemblyId` matches this string (case insensitive).
 */
@property(nonatomic, copy, nullable) NSString *assemblyId;

/**
 *  If present, return reference sets for which the
 *  md5checksum matches exactly.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *md5checksums;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 1024. The maximum value is 4096.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  GTLRGenomics_SearchReferenceSetsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "referenceSets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchReferenceSetsResponse : GTLRCollectionObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The matching references sets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ReferenceSet *> *referenceSets;

@end


/**
 *  GTLRGenomics_SearchReferencesRequest
 */
@interface GTLRGenomics_SearchReferencesRequest : GTLRObject

/**
 *  If present, return references for which a prefix of any of
 *  sourceAccessions match
 *  any of these strings. Accession numbers typically have a main number and a
 *  version, for example `GCF_000001405.26`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accessions;

/**
 *  If present, return references for which the
 *  md5checksum matches exactly.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *md5checksums;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 1024. The maximum value is 4096.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** If present, return only references which belong to this reference set. */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

@end


/**
 *  GTLRGenomics_SearchReferencesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "references" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchReferencesResponse : GTLRCollectionObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The matching references.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Reference *> *references;

@end


/**
 *  The search variant sets request.
 */
@interface GTLRGenomics_SearchVariantSetsRequest : GTLRObject

/**
 *  Exactly one dataset ID must be provided here. Only variant sets which
 *  belong to this dataset will be returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *datasetIds;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 1024.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  The search variant sets response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "variantSets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchVariantSetsResponse : GTLRCollectionObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The variant sets belonging to the requested dataset.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_VariantSet *> *variantSets;

@end


/**
 *  The variant search request.
 */
@interface GTLRGenomics_SearchVariantsRequest : GTLRObject

/**
 *  Only return variant calls which belong to call sets with these ids.
 *  Leaving this blank returns all variant calls. If a variant has no
 *  calls belonging to any of these call sets, it won't be returned at all.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *callSetIds;

/**
 *  The end of the window, 0-based exclusive. If unspecified or 0, defaults to
 *  the length of the reference.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  The maximum number of calls to return in a single page. Note that this
 *  limit may be exceeded in the event that a matching variant contains more
 *  calls than the requested maximum. If unspecified, defaults to 5000. The
 *  maximum value is 10000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxCalls;

/**
 *  The maximum number of variants to return in a single page. If unspecified,
 *  defaults to 5000. The maximum value is 10000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Only return variants in this reference sequence. */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The beginning of the window (0-based, inclusive) for which
 *  overlapping variants should be returned. If unspecified, defaults to 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

/** Only return variants which have exactly this name. */
@property(nonatomic, copy, nullable) NSString *variantName;

/**
 *  At most one variant set ID must be provided. Only variants from this
 *  variant set will be returned. If omitted, a call set id must be included in
 *  the request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *variantSetIds;

@end


/**
 *  The variant search response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "variants" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGenomics_SearchVariantsResponse : GTLRCollectionObject

/**
 *  The continuation token, which is used to page through large result sets.
 *  Provide this value in a subsequent request to return the next page of
 *  results. This field will be empty if there aren't any additional results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of matching Variants.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Variant *> *variants;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRGenomics_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Policy *policy;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRGenomics_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRGenomics_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRGenomics_TestIamPermissionsRequest : GTLRObject

/**
 *  REQUIRED: The set of permissions to check for the 'resource'.
 *  Permissions with wildcards (such as '*' or 'storage.*') are not allowed.
 *  Allowed permissions are&#58;
 *  * `genomics.datasets.create`
 *  * `genomics.datasets.delete`
 *  * `genomics.datasets.get`
 *  * `genomics.datasets.list`
 *  * `genomics.datasets.update`
 *  * `genomics.datasets.getIamPolicy`
 *  * `genomics.datasets.setIamPolicy`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRGenomics_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  A transcript represents the assertion that a particular region of the
 *  reference genome may be transcribed as RNA.
 */
@interface GTLRGenomics_Transcript : GTLRObject

/**
 *  The range of the coding sequence for this transcript, if any. To determine
 *  the exact ranges of coding sequence, intersect this range with those of the
 *  exons, if any. If there are any
 *  exons, the
 *  codingSequence must start
 *  and end within them.
 *  Note that in some cases, the reference genome will not exactly match the
 *  observed mRNA transcript e.g. due to variance in the source genome from
 *  reference. In these cases,
 *  exon.frame will not necessarily
 *  match the expected reference reading frame and coding exon reference bases
 *  cannot necessarily be concatenated to produce the original transcript mRNA.
 */
@property(nonatomic, strong, nullable) GTLRGenomics_CodingSequence *codingSequence;

/**
 *  The <a href="http://en.wikipedia.org/wiki/Exon">exons</a> that compose
 *  this transcript. This field should be unset for genomes where transcript
 *  splicing does not occur, for example prokaryotes.
 *  Introns are regions of the transcript that are not included in the
 *  spliced RNA product. Though not explicitly modeled here, intron ranges can
 *  be deduced; all regions of this transcript that are not exons are introns.
 *  Exonic sequences do not necessarily code for a translational product
 *  (amino acids). Only the regions of exons bounded by the
 *  codingSequence correspond
 *  to coding DNA sequence.
 *  Exons are ordered by start position and may not overlap.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_Exon *> *exons;

/**
 *  The annotation ID of the gene from which this transcript is transcribed.
 */
@property(nonatomic, copy, nullable) NSString *geneId;

@end


/**
 *  GTLRGenomics_UndeleteDatasetRequest
 */
@interface GTLRGenomics_UndeleteDatasetRequest : GTLRObject
@end


/**
 *  An event generated when the execution of a container results in a
 *  non-zero exit status that was not otherwise ignored. Execution will
 *  continue, but only actions that are flagged as `ALWAYS_RUN` will be
 *  executed. Other actions will be skipped.
 */
@interface GTLRGenomics_UnexpectedExitStatusEvent : GTLRObject

/**
 *  The numeric ID of the action that started the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *actionId;

/**
 *  The exit status of the container.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitStatus;

@end


/**
 *  A variant represents a change in DNA sequence relative to a reference
 *  sequence. For example, a variant could represent a SNP or an insertion.
 *  Variants belong to a variant set.
 *  Each of the calls on a variant represent a determination of genotype with
 *  respect to that variant. For example, a call might assign probability of
 *  0.32
 *  to the occurrence of a SNP named rs1234 in a sample named NA12345. A call
 *  belongs to a call set, which contains related calls typically from one
 *  sample.
 */
@interface GTLRGenomics_Variant : GTLRObject

/** The bases that appear instead of the reference bases. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *alternateBases;

/**
 *  The variant calls for this particular variant. Each one represents the
 *  determination of genotype with respect to this variant.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_VariantCall *> *calls;

/**
 *  The date this variant was created, in milliseconds from the epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *created;

/**
 *  The end position (0-based) of this variant. This corresponds to the first
 *  base after the last base in the reference allele. So, the length of
 *  the reference allele is (end - start). This is useful for variants
 *  that don't explicitly give alternate bases, for example large deletions.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  A list of filters (normally quality filters) this variant has failed.
 *  `PASS` indicates this variant has passed all filters.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *filter;

/**
 *  The server-generated variant ID, unique across all variants.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A map of additional variant information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_Variant_Info *info;

/** Names for the variant, for example a RefSNP ID. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  A measure of how likely this variant is to be real.
 *  A higher value is better.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quality;

/**
 *  The reference bases for this variant. They start at the given
 *  position.
 */
@property(nonatomic, copy, nullable) NSString *referenceBases;

/**
 *  The reference on which this variant occurs.
 *  (such as `chr20` or `X`)
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The position at which this variant occurs (0-based).
 *  This corresponds to the first base of the string of reference bases.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

/** The ID of the variant set this variant belongs to. */
@property(nonatomic, copy, nullable) NSString *variantSetId;

@end


/**
 *  A map of additional variant information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_Variant_Info : GTLRObject
@end


/**
 *  GTLRGenomics_VariantAnnotation
 */
@interface GTLRGenomics_VariantAnnotation : GTLRObject

/**
 *  The alternate allele for this variant. If multiple alternate alleles
 *  exist at this location, create a separate variant for each one, as they
 *  may represent distinct conditions.
 */
@property(nonatomic, copy, nullable) NSString *alternateBases;

/**
 *  Describes the clinical significance of a variant.
 *  It is adapted from the ClinVar controlled vocabulary for clinical
 *  significance described at:
 *  http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Association
 *        Value "ASSOCIATION"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Benign Value
 *        "BENIGN"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ClinicalSignificanceOther
 *        `OTHER` should be used when no other clinical significance
 *        value will suffice. (Value: "CLINICAL_SIGNIFICANCE_OTHER")
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ClinicalSignificanceUnspecified
 *        Value "CLINICAL_SIGNIFICANCE_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_ConfersSensitivity
 *        Value "CONFERS_SENSITIVITY"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_DrugResponse
 *        Value "DRUG_RESPONSE"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Histocompatibility
 *        Value "HISTOCOMPATIBILITY"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_LikelyBenign
 *        Value "LIKELY_BENIGN"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_LikelyPathogenic
 *        Value "LIKELY_PATHOGENIC"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_MultipleReported
 *        `MULTIPLE_REPORTED` should be used when multiple clinical
 *        signficances are reported for a variant. The original clinical
 *        significance values may be provided in the `info` field. (Value:
 *        "MULTIPLE_REPORTED")
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Pathogenic
 *        Value "PATHOGENIC"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Protective
 *        Value "PROTECTIVE"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_RiskFactor
 *        Value "RISK_FACTOR"
 *    @arg @c kGTLRGenomics_VariantAnnotation_ClinicalSignificance_Uncertain
 *        Value "UNCERTAIN"
 */
@property(nonatomic, copy, nullable) NSString *clinicalSignificance;

/**
 *  The set of conditions associated with this variant.
 *  A condition describes the way a variant influences human health.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ClinicalCondition *> *conditions;

/**
 *  Effect of the variant on the coding sequence.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_EffectOther `EFFECT_OTHER`
 *        should be used when no other Effect
 *        will suffice. (Value: "EFFECT_OTHER")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_EffectUnspecified Value
 *        "EFFECT_UNSPECIFIED"
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_FramePreservingIndel
 *        `FRAME_PRESERVING_INDEL` indicates a mutation in which a
 *        multiple of three nucleotides has been inserted or deleted, resulting
 *        in no change to the reading frame of the coding sequence. (Value:
 *        "FRAME_PRESERVING_INDEL")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_Frameshift `FRAMESHIFT`
 *        indicates a mutation in which the insertion or
 *        deletion of nucleotides resulted in a frameshift change. (Value:
 *        "FRAMESHIFT")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_NonsynonymousSnp
 *        `NONSYNONYMOUS_SNP` indicates a single nucleotide
 *        polymorphism mutation that results in an amino acid change. (Value:
 *        "NONSYNONYMOUS_SNP")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_SpliceSiteDisruption
 *        `SPLICE_SITE_DISRUPTION` indicates that this variant is
 *        found in a splice site for the associated transcript, and alters the
 *        normal splicing pattern. (Value: "SPLICE_SITE_DISRUPTION")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_StopGain `STOP_GAIN`
 *        indicates a mutation that leads to the creation
 *        of a stop codon at the variant site. Frameshift mutations creating
 *        downstream stop codons do not count as `STOP_GAIN`. (Value:
 *        "STOP_GAIN")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_StopLoss `STOP_LOSS`
 *        indicates a mutation that eliminates a
 *        stop codon at the variant site. (Value: "STOP_LOSS")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Effect_SynonymousSnp
 *        `SYNONYMOUS_SNP` indicates a single nucleotide polymorphism
 *        mutation that results in no amino acid change. (Value:
 *        "SYNONYMOUS_SNP")
 */
@property(nonatomic, copy, nullable) NSString *effect;

/**
 *  Google annotation ID of the gene affected by this variant. This should
 *  be provided when the variant is created.
 */
@property(nonatomic, copy, nullable) NSString *geneId;

/**
 *  Google annotation IDs of the transcripts affected by this variant. These
 *  should be provided when the variant is created.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *transcriptIds;

/**
 *  Type has been adapted from ClinVar's list of variant types.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Cnv `CNV` indicates a
 *        variation in copy number. (Value: "CNV")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Deletion `DELETION` indicates
 *        a deletion. (Value: "DELETION")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Insertion `INSERTION`
 *        indicates an insertion. (Value: "INSERTION")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Snp `SNP` indicates a single
 *        nucleotide polymorphism. (Value: "SNP")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Structural `STRUCTURAL`
 *        indicates a large structural variant,
 *        including chromosomal fusions, inversions, etc. (Value: "STRUCTURAL")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_Substitution `SUBSTITUTION`
 *        indicates a block substitution of
 *        two or more nucleotides. (Value: "SUBSTITUTION")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_TypeOther `TYPE_OTHER` should
 *        be used when no other Type will suffice.
 *        Further explanation of the variant type may be included in the
 *        info field. (Value: "TYPE_OTHER")
 *    @arg @c kGTLRGenomics_VariantAnnotation_Type_TypeUnspecified Value
 *        "TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A call represents the determination of genotype with respect to a particular
 *  variant. It may include associated information such as quality and phasing.
 *  For example, a call might assign a probability of 0.32 to the occurrence of
 *  a SNP named rs1234 in a call set with the name NA12345.
 */
@interface GTLRGenomics_VariantCall : GTLRObject

/** The ID of the call set this variant call belongs to. */
@property(nonatomic, copy, nullable) NSString *callSetId;

/** The name of the call set this variant call belongs to. */
@property(nonatomic, copy, nullable) NSString *callSetName;

/**
 *  The genotype of this variant call. Each value represents either the value
 *  of the `referenceBases` field or a 1-based index into
 *  `alternateBases`. If a variant had a `referenceBases`
 *  value of `T` and an `alternateBases`
 *  value of `["A", "C"]`, and the `genotype` was
 *  `[2, 1]`, that would mean the call
 *  represented the heterozygous value `CA` for this variant.
 *  If the `genotype` was instead `[0, 1]`, the
 *  represented value would be `TA`. Ordering of the
 *  genotype values is important if the `phaseset` is present.
 *  If a genotype is not called (that is, a `.` is present in the
 *  GT string) -1 is returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *genotype;

/**
 *  The genotype likelihoods for this variant call. Each array entry
 *  represents how likely a specific genotype is for this call. The value
 *  ordering is defined by the GL tag in the VCF spec.
 *  If Phred-scaled genotype likelihood scores (PL) are available and
 *  log10(P) genotype likelihood scores (GL) are not, PL scores are converted
 *  to GL scores. If both are available, PL scores are stored in `info`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *genotypeLikelihood;

/**
 *  A map of additional variant call information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_VariantCall_Info *info;

/**
 *  If this field is present, this variant call's genotype ordering implies
 *  the phase of the bases and is consistent with any other variant calls in
 *  the same reference sequence which have the same phaseset value.
 *  When importing data from VCF, if the genotype data was phased but no
 *  phase set was specified this field will be set to `*`.
 */
@property(nonatomic, copy, nullable) NSString *phaseset;

@end


/**
 *  A map of additional variant call information. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_VariantCall_Info : GTLRObject
@end


/**
 *  A variant set is a collection of call sets and variants. It contains summary
 *  statistics of those contents. A variant set belongs to a dataset.
 */
@interface GTLRGenomics_VariantSet : GTLRObject

/** The dataset to which this variant set belongs. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  A textual description of this variant set.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The server-generated variant set ID, unique across all variant sets.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The metadata associated with this variant set. */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_VariantSetMetadata *> *metadata;

/** User-specified, mutable name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A list of all references used by the variants in a variant set
 *  with associated coordinate upper bounds for each one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGenomics_ReferenceBound *> *referenceBounds;

/**
 *  The reference set to which the variant set is mapped. The reference set
 *  describes the alignment provenance of the variant set, while the
 *  `referenceBounds` describe the shape of the actual variant data. The
 *  reference set's reference names are a superset of those found in the
 *  `referenceBounds`.
 *  For example, given a variant set that is mapped to the GRCh38 reference set
 *  and contains a single variant on reference 'X', `referenceBounds` would
 *  contain only an entry for 'X', while the associated reference set
 *  enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
 */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

@end


/**
 *  Metadata describes a single piece of variant call metadata.
 *  These data include a top level key and either a single value string (value)
 *  or a list of key-value pairs (info.)
 *  Value and info are mutually exclusive.
 */
@interface GTLRGenomics_VariantSetMetadata : GTLRObject

/**
 *  A textual description of this metadata.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  User-provided ID field, not enforced by this API.
 *  Two or more pieces of structured metadata with identical
 *  id and key fields are considered equivalent.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Remaining structured metadata key-value pairs. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 */
@property(nonatomic, strong, nullable) GTLRGenomics_VariantSetMetadata_Info *info;

/** The top-level key. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The number of values that can be included in a field described by this
 *  metadata.
 */
@property(nonatomic, copy, nullable) NSString *number;

/**
 *  The type of data. Possible types include: Integer, Float,
 *  Flag, Character, and String.
 *
 *  Likely values:
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_Character Value "CHARACTER"
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_Flag Value "FLAG"
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_Float Value "FLOAT"
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_Integer Value "INTEGER"
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_String Value "STRING"
 *    @arg @c kGTLRGenomics_VariantSetMetadata_Type_TypeUnspecified Value
 *        "TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The value field for simple metadata */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Remaining structured metadata key-value pairs. This must be of the form
 *  map<string, string[]> (string key mapping to a list of string values).
 *
 *  @note This class is documented as having more properties of NSArrays of any
 *        valid JSON type. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRGenomics_VariantSetMetadata_Info : GTLRObject
@end


/**
 *  An event generated after a worker VM has been assigned to run the
 *  pipeline.
 */
@interface GTLRGenomics_WorkerAssignedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The zone the worker is running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  An event generated when the worker VM that was assigned to the pipeline
 *  has been released (deleted).
 */
@interface GTLRGenomics_WorkerReleasedEvent : GTLRObject

/** The worker's instance name. */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  The zone the worker was running in.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
