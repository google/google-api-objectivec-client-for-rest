// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Genomics API (genomics/v1)
// Description:
//   Uploads, processes, queries, and searches Genomics data in the cloud.
// Documentation:
//   https://cloud.google.com/genomics

#import "GTLRGenomicsQuery.h"

#import "GTLRGenomicsObjects.h"

@implementation GTLRGenomicsQuery

@dynamic fields;

@end

@implementation GTLRGenomicsQuery_AnnotationsBatchCreate

+ (instancetype)queryWithObject:(GTLRGenomics_BatchCreateAnnotationsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/annotations:batchCreate";
  GTLRGenomicsQuery_AnnotationsBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_BatchCreateAnnotationsResponse class];
  query.loggingName = @"genomics.annotations.batchCreate";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_Annotation *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/annotations";
  GTLRGenomicsQuery_AnnotationsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Annotation class];
  query.loggingName = @"genomics.annotations.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsDelete

@dynamic annotationId;

+ (instancetype)queryWithAnnotationId:(NSString *)annotationId {
  NSArray *pathParams = @[ @"annotationId" ];
  NSString *pathURITemplate = @"v1/annotations/{annotationId}";
  GTLRGenomicsQuery_AnnotationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.annotationId = annotationId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.annotations.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsetsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_AnnotationSet *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/annotationsets";
  GTLRGenomicsQuery_AnnotationsetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_AnnotationSet class];
  query.loggingName = @"genomics.annotationsets.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsetsDelete

@dynamic annotationSetId;

+ (instancetype)queryWithAnnotationSetId:(NSString *)annotationSetId {
  NSArray *pathParams = @[ @"annotationSetId" ];
  NSString *pathURITemplate = @"v1/annotationsets/{annotationSetId}";
  GTLRGenomicsQuery_AnnotationsetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.annotationSetId = annotationSetId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.annotationsets.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsetsGet

@dynamic annotationSetId;

+ (instancetype)queryWithAnnotationSetId:(NSString *)annotationSetId {
  NSArray *pathParams = @[ @"annotationSetId" ];
  NSString *pathURITemplate = @"v1/annotationsets/{annotationSetId}";
  GTLRGenomicsQuery_AnnotationsetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.annotationSetId = annotationSetId;
  query.expectedObjectClass = [GTLRGenomics_AnnotationSet class];
  query.loggingName = @"genomics.annotationsets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsetsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchAnnotationSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/annotationsets/search";
  GTLRGenomicsQuery_AnnotationsetsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchAnnotationSetsResponse class];
  query.loggingName = @"genomics.annotationsets.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsetsUpdate

@dynamic annotationSetId, updateMask;

+ (instancetype)queryWithObject:(GTLRGenomics_AnnotationSet *)object
                annotationSetId:(NSString *)annotationSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"annotationSetId" ];
  NSString *pathURITemplate = @"v1/annotationsets/{annotationSetId}";
  GTLRGenomicsQuery_AnnotationsetsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.annotationSetId = annotationSetId;
  query.expectedObjectClass = [GTLRGenomics_AnnotationSet class];
  query.loggingName = @"genomics.annotationsets.update";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsGet

@dynamic annotationId;

+ (instancetype)queryWithAnnotationId:(NSString *)annotationId {
  NSArray *pathParams = @[ @"annotationId" ];
  NSString *pathURITemplate = @"v1/annotations/{annotationId}";
  GTLRGenomicsQuery_AnnotationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.annotationId = annotationId;
  query.expectedObjectClass = [GTLRGenomics_Annotation class];
  query.loggingName = @"genomics.annotations.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchAnnotationsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/annotations/search";
  GTLRGenomicsQuery_AnnotationsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchAnnotationsResponse class];
  query.loggingName = @"genomics.annotations.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_AnnotationsUpdate

@dynamic annotationId, updateMask;

+ (instancetype)queryWithObject:(GTLRGenomics_Annotation *)object
                   annotationId:(NSString *)annotationId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"annotationId" ];
  NSString *pathURITemplate = @"v1/annotations/{annotationId}";
  GTLRGenomicsQuery_AnnotationsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.annotationId = annotationId;
  query.expectedObjectClass = [GTLRGenomics_Annotation class];
  query.loggingName = @"genomics.annotations.update";
  return query;
}

@end

@implementation GTLRGenomicsQuery_CallsetsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_CallSet *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/callsets";
  GTLRGenomicsQuery_CallsetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_CallSet class];
  query.loggingName = @"genomics.callsets.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_CallsetsDelete

@dynamic callSetId;

+ (instancetype)queryWithCallSetId:(NSString *)callSetId {
  NSArray *pathParams = @[ @"callSetId" ];
  NSString *pathURITemplate = @"v1/callsets/{callSetId}";
  GTLRGenomicsQuery_CallsetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.callSetId = callSetId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.callsets.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_CallsetsGet

@dynamic callSetId;

+ (instancetype)queryWithCallSetId:(NSString *)callSetId {
  NSArray *pathParams = @[ @"callSetId" ];
  NSString *pathURITemplate = @"v1/callsets/{callSetId}";
  GTLRGenomicsQuery_CallsetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.callSetId = callSetId;
  query.expectedObjectClass = [GTLRGenomics_CallSet class];
  query.loggingName = @"genomics.callsets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_CallsetsPatch

@dynamic callSetId, updateMask;

+ (instancetype)queryWithObject:(GTLRGenomics_CallSet *)object
                      callSetId:(NSString *)callSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"callSetId" ];
  NSString *pathURITemplate = @"v1/callsets/{callSetId}";
  GTLRGenomicsQuery_CallsetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.callSetId = callSetId;
  query.expectedObjectClass = [GTLRGenomics_CallSet class];
  query.loggingName = @"genomics.callsets.patch";
  return query;
}

@end

@implementation GTLRGenomicsQuery_CallsetsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchCallSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/callsets/search";
  GTLRGenomicsQuery_CallsetsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchCallSetsResponse class];
  query.loggingName = @"genomics.callsets.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_Dataset *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/datasets";
  GTLRGenomicsQuery_DatasetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Dataset class];
  query.loggingName = @"genomics.datasets.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsDelete

@dynamic datasetId;

+ (instancetype)queryWithDatasetId:(NSString *)datasetId {
  NSArray *pathParams = @[ @"datasetId" ];
  NSString *pathURITemplate = @"v1/datasets/{datasetId}";
  GTLRGenomicsQuery_DatasetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.datasets.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsGet

@dynamic datasetId;

+ (instancetype)queryWithDatasetId:(NSString *)datasetId {
  NSArray *pathParams = @[ @"datasetId" ];
  NSString *pathURITemplate = @"v1/datasets/{datasetId}";
  GTLRGenomicsQuery_DatasetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRGenomics_Dataset class];
  query.loggingName = @"genomics.datasets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGenomics_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRGenomicsQuery_DatasetsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGenomics_Policy class];
  query.loggingName = @"genomics.datasets.getIamPolicy";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsList

@dynamic pageSize, pageToken, projectId;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/datasets";
  GTLRGenomicsQuery_DatasetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRGenomics_ListDatasetsResponse class];
  query.loggingName = @"genomics.datasets.list";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsPatch

@dynamic datasetId, updateMask;

+ (instancetype)queryWithObject:(GTLRGenomics_Dataset *)object
                      datasetId:(NSString *)datasetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"datasetId" ];
  NSString *pathURITemplate = @"v1/datasets/{datasetId}";
  GTLRGenomicsQuery_DatasetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRGenomics_Dataset class];
  query.loggingName = @"genomics.datasets.patch";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGenomics_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRGenomicsQuery_DatasetsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGenomics_Policy class];
  query.loggingName = @"genomics.datasets.setIamPolicy";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRGenomics_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRGenomicsQuery_DatasetsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRGenomics_TestIamPermissionsResponse class];
  query.loggingName = @"genomics.datasets.testIamPermissions";
  return query;
}

@end

@implementation GTLRGenomicsQuery_DatasetsUndelete

@dynamic datasetId;

+ (instancetype)queryWithObject:(GTLRGenomics_UndeleteDatasetRequest *)object
                      datasetId:(NSString *)datasetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"datasetId" ];
  NSString *pathURITemplate = @"v1/datasets/{datasetId}:undelete";
  GTLRGenomicsQuery_DatasetsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.datasetId = datasetId;
  query.expectedObjectClass = [GTLRGenomics_Dataset class];
  query.loggingName = @"genomics.datasets.undelete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_OperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRGenomics_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRGenomicsQuery_OperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.operations.cancel";
  return query;
}

@end

@implementation GTLRGenomicsQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGenomicsQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGenomics_Operation class];
  query.loggingName = @"genomics.operations.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_OperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRGenomicsQuery_OperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRGenomics_ListOperationsResponse class];
  query.loggingName = @"genomics.operations.list";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsCoveragebucketsList

@dynamic end, pageSize, pageToken, readGroupSetId, referenceName, start,
         targetBucketWidth;

+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId {
  NSArray *pathParams = @[ @"readGroupSetId" ];
  NSString *pathURITemplate = @"v1/readgroupsets/{readGroupSetId}/coveragebuckets";
  GTLRGenomicsQuery_ReadgroupsetsCoveragebucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.readGroupSetId = readGroupSetId;
  query.expectedObjectClass = [GTLRGenomics_ListCoverageBucketsResponse class];
  query.loggingName = @"genomics.readgroupsets.coveragebuckets.list";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsDelete

@dynamic readGroupSetId;

+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId {
  NSArray *pathParams = @[ @"readGroupSetId" ];
  NSString *pathURITemplate = @"v1/readgroupsets/{readGroupSetId}";
  GTLRGenomicsQuery_ReadgroupsetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.readGroupSetId = readGroupSetId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.readgroupsets.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsExport

@dynamic readGroupSetId;

+ (instancetype)queryWithObject:(GTLRGenomics_ExportReadGroupSetRequest *)object
                 readGroupSetId:(NSString *)readGroupSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"readGroupSetId" ];
  NSString *pathURITemplate = @"v1/readgroupsets/{readGroupSetId}:export";
  GTLRGenomicsQuery_ReadgroupsetsExport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.readGroupSetId = readGroupSetId;
  query.expectedObjectClass = [GTLRGenomics_Operation class];
  query.loggingName = @"genomics.readgroupsets.export";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsGet

@dynamic readGroupSetId;

+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId {
  NSArray *pathParams = @[ @"readGroupSetId" ];
  NSString *pathURITemplate = @"v1/readgroupsets/{readGroupSetId}";
  GTLRGenomicsQuery_ReadgroupsetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.readGroupSetId = readGroupSetId;
  query.expectedObjectClass = [GTLRGenomics_ReadGroupSet class];
  query.loggingName = @"genomics.readgroupsets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsImport

+ (instancetype)queryWithObject:(GTLRGenomics_ImportReadGroupSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/readgroupsets:import";
  GTLRGenomicsQuery_ReadgroupsetsImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Operation class];
  query.loggingName = @"genomics.readgroupsets.import";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsPatch

@dynamic readGroupSetId, updateMask;

+ (instancetype)queryWithObject:(GTLRGenomics_ReadGroupSet *)object
                 readGroupSetId:(NSString *)readGroupSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"readGroupSetId" ];
  NSString *pathURITemplate = @"v1/readgroupsets/{readGroupSetId}";
  GTLRGenomicsQuery_ReadgroupsetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.readGroupSetId = readGroupSetId;
  query.expectedObjectClass = [GTLRGenomics_ReadGroupSet class];
  query.loggingName = @"genomics.readgroupsets.patch";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadgroupsetsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchReadGroupSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/readgroupsets/search";
  GTLRGenomicsQuery_ReadgroupsetsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchReadGroupSetsResponse class];
  query.loggingName = @"genomics.readgroupsets.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReadsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchReadsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/reads/search";
  GTLRGenomicsQuery_ReadsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchReadsResponse class];
  query.loggingName = @"genomics.reads.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReferencesBasesList

@dynamic end, pageSize, pageToken, referenceId, start;

+ (instancetype)queryWithReferenceId:(NSString *)referenceId {
  NSArray *pathParams = @[ @"referenceId" ];
  NSString *pathURITemplate = @"v1/references/{referenceId}/bases";
  GTLRGenomicsQuery_ReferencesBasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.referenceId = referenceId;
  query.expectedObjectClass = [GTLRGenomics_ListBasesResponse class];
  query.loggingName = @"genomics.references.bases.list";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReferencesetsGet

@dynamic referenceSetId;

+ (instancetype)queryWithReferenceSetId:(NSString *)referenceSetId {
  NSArray *pathParams = @[ @"referenceSetId" ];
  NSString *pathURITemplate = @"v1/referencesets/{referenceSetId}";
  GTLRGenomicsQuery_ReferencesetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.referenceSetId = referenceSetId;
  query.expectedObjectClass = [GTLRGenomics_ReferenceSet class];
  query.loggingName = @"genomics.referencesets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReferencesetsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchReferenceSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/referencesets/search";
  GTLRGenomicsQuery_ReferencesetsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchReferenceSetsResponse class];
  query.loggingName = @"genomics.referencesets.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReferencesGet

@dynamic referenceId;

+ (instancetype)queryWithReferenceId:(NSString *)referenceId {
  NSArray *pathParams = @[ @"referenceId" ];
  NSString *pathURITemplate = @"v1/references/{referenceId}";
  GTLRGenomicsQuery_ReferencesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.referenceId = referenceId;
  query.expectedObjectClass = [GTLRGenomics_Reference class];
  query.loggingName = @"genomics.references.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_ReferencesSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchReferencesRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/references/search";
  GTLRGenomicsQuery_ReferencesSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchReferencesResponse class];
  query.loggingName = @"genomics.references.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_Variant *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variants";
  GTLRGenomicsQuery_VariantsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Variant class];
  query.loggingName = @"genomics.variants.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsDelete

@dynamic variantId;

+ (instancetype)queryWithVariantId:(NSString *)variantId {
  NSArray *pathParams = @[ @"variantId" ];
  NSString *pathURITemplate = @"v1/variants/{variantId}";
  GTLRGenomicsQuery_VariantsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.variantId = variantId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.variants.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsCreate

+ (instancetype)queryWithObject:(GTLRGenomics_VariantSet *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variantsets";
  GTLRGenomicsQuery_VariantsetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_VariantSet class];
  query.loggingName = @"genomics.variantsets.create";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsDelete

@dynamic variantSetId;

+ (instancetype)queryWithVariantSetId:(NSString *)variantSetId {
  NSArray *pathParams = @[ @"variantSetId" ];
  NSString *pathURITemplate = @"v1/variantsets/{variantSetId}";
  GTLRGenomicsQuery_VariantsetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.variantSetId = variantSetId;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.variantsets.delete";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsExport

@dynamic variantSetId;

+ (instancetype)queryWithObject:(GTLRGenomics_ExportVariantSetRequest *)object
                   variantSetId:(NSString *)variantSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"variantSetId" ];
  NSString *pathURITemplate = @"v1/variantsets/{variantSetId}:export";
  GTLRGenomicsQuery_VariantsetsExport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.variantSetId = variantSetId;
  query.expectedObjectClass = [GTLRGenomics_Operation class];
  query.loggingName = @"genomics.variantsets.export";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsGet

@dynamic variantSetId;

+ (instancetype)queryWithVariantSetId:(NSString *)variantSetId {
  NSArray *pathParams = @[ @"variantSetId" ];
  NSString *pathURITemplate = @"v1/variantsets/{variantSetId}";
  GTLRGenomicsQuery_VariantsetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.variantSetId = variantSetId;
  query.expectedObjectClass = [GTLRGenomics_VariantSet class];
  query.loggingName = @"genomics.variantsets.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsPatch

@dynamic updateMask, variantSetId;

+ (instancetype)queryWithObject:(GTLRGenomics_VariantSet *)object
                   variantSetId:(NSString *)variantSetId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"variantSetId" ];
  NSString *pathURITemplate = @"v1/variantsets/{variantSetId}";
  GTLRGenomicsQuery_VariantsetsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.variantSetId = variantSetId;
  query.expectedObjectClass = [GTLRGenomics_VariantSet class];
  query.loggingName = @"genomics.variantsets.patch";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsetsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchVariantSetsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variantsets/search";
  GTLRGenomicsQuery_VariantsetsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchVariantSetsResponse class];
  query.loggingName = @"genomics.variantsets.search";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsGet

@dynamic variantId;

+ (instancetype)queryWithVariantId:(NSString *)variantId {
  NSArray *pathParams = @[ @"variantId" ];
  NSString *pathURITemplate = @"v1/variants/{variantId}";
  GTLRGenomicsQuery_VariantsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.variantId = variantId;
  query.expectedObjectClass = [GTLRGenomics_Variant class];
  query.loggingName = @"genomics.variants.get";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsImport

+ (instancetype)queryWithObject:(GTLRGenomics_ImportVariantsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variants:import";
  GTLRGenomicsQuery_VariantsImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Operation class];
  query.loggingName = @"genomics.variants.import";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsMerge

+ (instancetype)queryWithObject:(GTLRGenomics_MergeVariantsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variants:merge";
  GTLRGenomicsQuery_VariantsMerge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_Empty class];
  query.loggingName = @"genomics.variants.merge";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsPatch

@dynamic updateMask, variantId;

+ (instancetype)queryWithObject:(GTLRGenomics_Variant *)object
                      variantId:(NSString *)variantId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"variantId" ];
  NSString *pathURITemplate = @"v1/variants/{variantId}";
  GTLRGenomicsQuery_VariantsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.variantId = variantId;
  query.expectedObjectClass = [GTLRGenomics_Variant class];
  query.loggingName = @"genomics.variants.patch";
  return query;
}

@end

@implementation GTLRGenomicsQuery_VariantsSearch

+ (instancetype)queryWithObject:(GTLRGenomics_SearchVariantsRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/variants/search";
  GTLRGenomicsQuery_VariantsSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRGenomics_SearchVariantsResponse class];
  query.loggingName = @"genomics.variants.search";
  return query;
}

@end
