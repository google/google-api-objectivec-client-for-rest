// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Genomics API (genomics/v1)
// Description:
//   Uploads, processes, queries, and searches Genomics data in the cloud.
// Documentation:
//   https://cloud.google.com/genomics

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGenomics_Annotation;
@class GTLRGenomics_AnnotationSet;
@class GTLRGenomics_BatchCreateAnnotationsRequest;
@class GTLRGenomics_CallSet;
@class GTLRGenomics_CancelOperationRequest;
@class GTLRGenomics_Dataset;
@class GTLRGenomics_ExportReadGroupSetRequest;
@class GTLRGenomics_ExportVariantSetRequest;
@class GTLRGenomics_GetIamPolicyRequest;
@class GTLRGenomics_ImportReadGroupSetsRequest;
@class GTLRGenomics_ImportVariantsRequest;
@class GTLRGenomics_MergeVariantsRequest;
@class GTLRGenomics_ReadGroupSet;
@class GTLRGenomics_SearchAnnotationSetsRequest;
@class GTLRGenomics_SearchAnnotationsRequest;
@class GTLRGenomics_SearchCallSetsRequest;
@class GTLRGenomics_SearchReadGroupSetsRequest;
@class GTLRGenomics_SearchReadsRequest;
@class GTLRGenomics_SearchReferenceSetsRequest;
@class GTLRGenomics_SearchReferencesRequest;
@class GTLRGenomics_SearchVariantSetsRequest;
@class GTLRGenomics_SearchVariantsRequest;
@class GTLRGenomics_SetIamPolicyRequest;
@class GTLRGenomics_TestIamPermissionsRequest;
@class GTLRGenomics_UndeleteDatasetRequest;
@class GTLRGenomics_Variant;
@class GTLRGenomics_VariantSet;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Genomics query classes.
 */
@interface GTLRGenomicsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates one or more new annotations atomically. All annotations must
 *  belong to the same annotation set. Caller must have WRITE
 *  permission for this annotation set. For optimal performance, batch
 *  positionally adjacent annotations together.
 *  If the request has a systemic issue, such as an attempt to write to
 *  an inaccessible annotation set, the entire RPC will fail accordingly. For
 *  lesser data issues, when possible an error will be isolated to the
 *  corresponding batch entry in the response; the remaining well formed
 *  annotations will be created normally.
 *  For details on the requirements for each individual annotation resource,
 *  see
 *  CreateAnnotation.
 *
 *  Method: genomics.annotations.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsBatchCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsBatchCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_BatchCreateAnnotationsResponse.
 *
 *  Creates one or more new annotations atomically. All annotations must
 *  belong to the same annotation set. Caller must have WRITE
 *  permission for this annotation set. For optimal performance, batch
 *  positionally adjacent annotations together.
 *  If the request has a systemic issue, such as an attempt to write to
 *  an inaccessible annotation set, the entire RPC will fail accordingly. For
 *  lesser data issues, when possible an error will be isolated to the
 *  corresponding batch entry in the response; the remaining well formed
 *  annotations will be created normally.
 *  For details on the requirements for each individual annotation resource,
 *  see
 *  CreateAnnotation.
 *
 *  @param object The @c GTLRGenomics_BatchCreateAnnotationsRequest to include
 *    in the query.
 *
 *  @return GTLRGenomicsQuery_AnnotationsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_BatchCreateAnnotationsRequest *)object;

@end

/**
 *  Creates a new annotation. Caller must have WRITE permission
 *  for the associated annotation set.
 *  The following fields are required:
 *  * annotationSetId
 *  * referenceName or
 *  referenceId
 *  ### Transcripts
 *  For annotations of type TRANSCRIPT, the following fields of
 *  transcript must be provided:
 *  * exons.start
 *  * exons.end
 *  All other fields may be optionally specified, unless documented as being
 *  server-generated (for example, the `id` field). The annotated
 *  range must be no longer than 100Mbp (mega base pairs). See the
 *  Annotation resource
 *  for additional restrictions on each field.
 *
 *  Method: genomics.annotations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Annotation.
 *
 *  Creates a new annotation. Caller must have WRITE permission
 *  for the associated annotation set.
 *  The following fields are required:
 *  * annotationSetId
 *  * referenceName or
 *  referenceId
 *  ### Transcripts
 *  For annotations of type TRANSCRIPT, the following fields of
 *  transcript must be provided:
 *  * exons.start
 *  * exons.end
 *  All other fields may be optionally specified, unless documented as being
 *  server-generated (for example, the `id` field). The annotated
 *  range must be no longer than 100Mbp (mega base pairs). See the
 *  Annotation resource
 *  for additional restrictions on each field.
 *
 *  @param object The @c GTLRGenomics_Annotation to include in the query.
 *
 *  @return GTLRGenomicsQuery_AnnotationsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Annotation *)object;

@end

/**
 *  Deletes an annotation. Caller must have WRITE permission for
 *  the associated annotation set.
 *
 *  Method: genomics.annotations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsDeleteWithannotationId:]

/** The ID of the annotation to be deleted. */
@property(nonatomic, copy, nullable) NSString *annotationId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes an annotation. Caller must have WRITE permission for
 *  the associated annotation set.
 *
 *  @param annotationId The ID of the annotation to be deleted.
 *
 *  @return GTLRGenomicsQuery_AnnotationsDelete
 */
+ (instancetype)queryWithAnnotationId:(NSString *)annotationId;

@end

/**
 *  Creates a new annotation set. Caller must have WRITE permission for the
 *  associated dataset.
 *  The following fields are required:
 *  * datasetId
 *  * referenceSetId
 *  All other fields may be optionally specified, unless documented as being
 *  server-generated (for example, the `id` field).
 *
 *  Method: genomics.annotationsets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsetsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsetsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_AnnotationSet.
 *
 *  Creates a new annotation set. Caller must have WRITE permission for the
 *  associated dataset.
 *  The following fields are required:
 *  * datasetId
 *  * referenceSetId
 *  All other fields may be optionally specified, unless documented as being
 *  server-generated (for example, the `id` field).
 *
 *  @param object The @c GTLRGenomics_AnnotationSet to include in the query.
 *
 *  @return GTLRGenomicsQuery_AnnotationsetsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_AnnotationSet *)object;

@end

/**
 *  Deletes an annotation set. Caller must have WRITE permission
 *  for the associated annotation set.
 *
 *  Method: genomics.annotationsets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsetsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsetsDeleteWithannotationSetId:]

/** The ID of the annotation set to be deleted. */
@property(nonatomic, copy, nullable) NSString *annotationSetId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes an annotation set. Caller must have WRITE permission
 *  for the associated annotation set.
 *
 *  @param annotationSetId The ID of the annotation set to be deleted.
 *
 *  @return GTLRGenomicsQuery_AnnotationsetsDelete
 */
+ (instancetype)queryWithAnnotationSetId:(NSString *)annotationSetId;

@end

/**
 *  Gets an annotation set. Caller must have READ permission for
 *  the associated dataset.
 *
 *  Method: genomics.annotationsets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_AnnotationsetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsetsGetWithannotationSetId:]

/** The ID of the annotation set to be retrieved. */
@property(nonatomic, copy, nullable) NSString *annotationSetId;

/**
 *  Fetches a @c GTLRGenomics_AnnotationSet.
 *
 *  Gets an annotation set. Caller must have READ permission for
 *  the associated dataset.
 *
 *  @param annotationSetId The ID of the annotation set to be retrieved.
 *
 *  @return GTLRGenomicsQuery_AnnotationsetsGet
 */
+ (instancetype)queryWithAnnotationSetId:(NSString *)annotationSetId;

@end

/**
 *  Searches for annotation sets that match the given criteria. Annotation sets
 *  are returned in an unspecified order. This order is consistent, such that
 *  two queries for the same content (regardless of page size) yield annotation
 *  sets in the same order across their respective streams of paginated
 *  responses. Caller must have READ permission for the queried datasets.
 *
 *  Method: genomics.annotationsets.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_AnnotationsetsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsetsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchAnnotationSetsResponse.
 *
 *  Searches for annotation sets that match the given criteria. Annotation sets
 *  are returned in an unspecified order. This order is consistent, such that
 *  two queries for the same content (regardless of page size) yield annotation
 *  sets in the same order across their respective streams of paginated
 *  responses. Caller must have READ permission for the queried datasets.
 *
 *  @param object The @c GTLRGenomics_SearchAnnotationSetsRequest to include in
 *    the query.
 *
 *  @return GTLRGenomicsQuery_AnnotationsetsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchAnnotationSetsRequest *)object;

@end

/**
 *  Updates an annotation set. The update must respect all mutability
 *  restrictions and other invariants described on the annotation set resource.
 *  Caller must have WRITE permission for the associated dataset.
 *
 *  Method: genomics.annotationsets.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsetsUpdate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsetsUpdateWithObject:annotationSetId:]

/** The ID of the annotation set to be updated. */
@property(nonatomic, copy, nullable) NSString *annotationSetId;

/**
 *  An optional mask specifying which fields to update. Mutable fields are
 *  name,
 *  source_uri, and
 *  info. If unspecified, all
 *  mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGenomics_AnnotationSet.
 *
 *  Updates an annotation set. The update must respect all mutability
 *  restrictions and other invariants described on the annotation set resource.
 *  Caller must have WRITE permission for the associated dataset.
 *
 *  @param object The @c GTLRGenomics_AnnotationSet to include in the query.
 *  @param annotationSetId The ID of the annotation set to be updated.
 *
 *  @return GTLRGenomicsQuery_AnnotationsetsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_AnnotationSet *)object
                annotationSetId:(NSString *)annotationSetId;

@end

/**
 *  Gets an annotation. Caller must have READ permission
 *  for the associated annotation set.
 *
 *  Method: genomics.annotations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_AnnotationsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsGetWithannotationId:]

/** The ID of the annotation to be retrieved. */
@property(nonatomic, copy, nullable) NSString *annotationId;

/**
 *  Fetches a @c GTLRGenomics_Annotation.
 *
 *  Gets an annotation. Caller must have READ permission
 *  for the associated annotation set.
 *
 *  @param annotationId The ID of the annotation to be retrieved.
 *
 *  @return GTLRGenomicsQuery_AnnotationsGet
 */
+ (instancetype)queryWithAnnotationId:(NSString *)annotationId;

@end

/**
 *  Searches for annotations that match the given criteria. Results are
 *  ordered by genomic coordinate (by reference sequence, then position).
 *  Annotations with equivalent genomic coordinates are returned in an
 *  unspecified order. This order is consistent, such that two queries for the
 *  same content (regardless of page size) yield annotations in the same order
 *  across their respective streams of paginated responses. Caller must have
 *  READ permission for the queried annotation sets.
 *
 *  Method: genomics.annotations.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_AnnotationsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchAnnotationsResponse.
 *
 *  Searches for annotations that match the given criteria. Results are
 *  ordered by genomic coordinate (by reference sequence, then position).
 *  Annotations with equivalent genomic coordinates are returned in an
 *  unspecified order. This order is consistent, such that two queries for the
 *  same content (regardless of page size) yield annotations in the same order
 *  across their respective streams of paginated responses. Caller must have
 *  READ permission for the queried annotation sets.
 *
 *  @param object The @c GTLRGenomics_SearchAnnotationsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_AnnotationsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchAnnotationsRequest *)object;

@end

/**
 *  Updates an annotation. Caller must have
 *  WRITE permission for the associated dataset.
 *
 *  Method: genomics.annotations.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_AnnotationsUpdate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForAnnotationsUpdateWithObject:annotationId:]

/** The ID of the annotation to be updated. */
@property(nonatomic, copy, nullable) NSString *annotationId;

/**
 *  An optional mask specifying which fields to update. Mutable fields are
 *  name,
 *  variant,
 *  transcript, and
 *  info. If unspecified, all mutable
 *  fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGenomics_Annotation.
 *
 *  Updates an annotation. Caller must have
 *  WRITE permission for the associated dataset.
 *
 *  @param object The @c GTLRGenomics_Annotation to include in the query.
 *  @param annotationId The ID of the annotation to be updated.
 *
 *  @return GTLRGenomicsQuery_AnnotationsUpdate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Annotation *)object
                   annotationId:(NSString *)annotationId;

@end

/**
 *  Creates a new call set.
 *
 *  Method: genomics.callsets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_CallsetsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForCallsetsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_CallSet.
 *
 *  Creates a new call set.
 *
 *  @param object The @c GTLRGenomics_CallSet to include in the query.
 *
 *  @return GTLRGenomicsQuery_CallsetsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_CallSet *)object;

@end

/**
 *  Deletes a call set.
 *
 *  Method: genomics.callsets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_CallsetsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForCallsetsDeleteWithcallSetId:]

/** The ID of the call set to be deleted. */
@property(nonatomic, copy, nullable) NSString *callSetId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes a call set.
 *
 *  @param callSetId The ID of the call set to be deleted.
 *
 *  @return GTLRGenomicsQuery_CallsetsDelete
 */
+ (instancetype)queryWithCallSetId:(NSString *)callSetId;

@end

/**
 *  Gets a call set by ID.
 *
 *  Method: genomics.callsets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_CallsetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForCallsetsGetWithcallSetId:]

/** The ID of the call set. */
@property(nonatomic, copy, nullable) NSString *callSetId;

/**
 *  Fetches a @c GTLRGenomics_CallSet.
 *
 *  Gets a call set by ID.
 *
 *  @param callSetId The ID of the call set.
 *
 *  @return GTLRGenomicsQuery_CallsetsGet
 */
+ (instancetype)queryWithCallSetId:(NSString *)callSetId;

@end

/**
 *  Updates a call set.
 *  This method supports patch semantics.
 *
 *  Method: genomics.callsets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_CallsetsPatch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForCallsetsPatchWithObject:callSetId:]

/** The ID of the call set to be updated. */
@property(nonatomic, copy, nullable) NSString *callSetId;

/**
 *  An optional mask specifying which fields to update. At this time, the only
 *  mutable field is name. The only
 *  acceptable value is "name". If unspecified, all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGenomics_CallSet.
 *
 *  Updates a call set.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRGenomics_CallSet to include in the query.
 *  @param callSetId The ID of the call set to be updated.
 *
 *  @return GTLRGenomicsQuery_CallsetsPatch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_CallSet *)object
                      callSetId:(NSString *)callSetId;

@end

/**
 *  Gets a list of call sets matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchCallSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L178).
 *
 *  Method: genomics.callsets.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_CallsetsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForCallsetsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchCallSetsResponse.
 *
 *  Gets a list of call sets matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchCallSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L178).
 *
 *  @param object The @c GTLRGenomics_SearchCallSetsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_CallsetsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchCallSetsRequest *)object;

@end

/**
 *  Creates a new dataset.
 *
 *  Method: genomics.datasets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Dataset.
 *
 *  Creates a new dataset.
 *
 *  @param object The @c GTLRGenomics_Dataset to include in the query.
 *
 *  @return GTLRGenomicsQuery_DatasetsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Dataset *)object;

@end

/**
 *  Deletes a dataset and all of its contents (all read group sets,
 *  reference sets, variant sets, call sets, annotation sets, etc.)
 *  This is reversible (up to one week after the deletion) via
 *  the
 *  datasets.undelete
 *  operation.
 *
 *  Method: genomics.datasets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsDeleteWithdatasetId:]

/** The ID of the dataset to be deleted. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes a dataset and all of its contents (all read group sets,
 *  reference sets, variant sets, call sets, annotation sets, etc.)
 *  This is reversible (up to one week after the deletion) via
 *  the
 *  datasets.undelete
 *  operation.
 *
 *  @param datasetId The ID of the dataset to be deleted.
 *
 *  @return GTLRGenomicsQuery_DatasetsDelete
 */
+ (instancetype)queryWithDatasetId:(NSString *)datasetId;

@end

/**
 *  Gets a dataset by ID.
 *
 *  Method: genomics.datasets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_DatasetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsGetWithdatasetId:]

/** The ID of the dataset. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  Fetches a @c GTLRGenomics_Dataset.
 *
 *  Gets a dataset by ID.
 *
 *  @param datasetId The ID of the dataset.
 *
 *  @return GTLRGenomicsQuery_DatasetsGet
 */
+ (instancetype)queryWithDatasetId:(NSString *)datasetId;

@end

/**
 *  Gets the access control policy for the dataset. This is empty if the
 *  policy or resource does not exist.
 *  See <a href="/iam/docs/managing-policies#getting_a_policy">Getting a
 *  Policy</a> for more information.
 *
 *  Method: genomics.datasets.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsGetIamPolicy : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsGetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which policy is being specified. Format is
 *  `datasets/<dataset ID>`.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGenomics_Policy.
 *
 *  Gets the access control policy for the dataset. This is empty if the
 *  policy or resource does not exist.
 *  See <a href="/iam/docs/managing-policies#getting_a_policy">Getting a
 *  Policy</a> for more information.
 *
 *  @param object The @c GTLRGenomics_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which policy is being specified.
 *    Format is
 *    `datasets/<dataset ID>`.
 *
 *  @return GTLRGenomicsQuery_DatasetsGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRGenomics_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists datasets within a project.
 *
 *  Method: genomics.datasets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_DatasetsList : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsList]

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 50. The maximum value is 1024.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The Google Cloud project ID to list datasets for. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRGenomics_ListDatasetsResponse.
 *
 *  Lists datasets within a project.
 *
 *  @return GTLRGenomicsQuery_DatasetsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates a dataset.
 *  This method supports patch semantics.
 *
 *  Method: genomics.datasets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsPatch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsPatchWithObject:datasetId:]

/** The ID of the dataset to be updated. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  An optional mask specifying which fields to update. At this time, the only
 *  mutable field is name. The only
 *  acceptable value is "name". If unspecified, all mutable fields will be
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGenomics_Dataset.
 *
 *  Updates a dataset.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRGenomics_Dataset to include in the query.
 *  @param datasetId The ID of the dataset to be updated.
 *
 *  @return GTLRGenomicsQuery_DatasetsPatch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Dataset *)object
                      datasetId:(NSString *)datasetId;

@end

/**
 *  Sets the access control policy on the specified dataset. Replaces any
 *  existing policy.
 *  See <a href="/iam/docs/managing-policies#setting_a_policy">Setting a
 *  Policy</a> for more information.
 *
 *  Method: genomics.datasets.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsSetIamPolicy : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which policy is being specified. Format is
 *  `datasets/<dataset ID>`.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGenomics_Policy.
 *
 *  Sets the access control policy on the specified dataset. Replaces any
 *  existing policy.
 *  See <a href="/iam/docs/managing-policies#setting_a_policy">Setting a
 *  Policy</a> for more information.
 *
 *  @param object The @c GTLRGenomics_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which policy is being specified.
 *    Format is
 *    `datasets/<dataset ID>`.
 *
 *  @return GTLRGenomicsQuery_DatasetsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource.
 *  See <a href="/iam/docs/managing-policies#testing_permissions">Testing
 *  Permissions</a> for more information.
 *
 *  Method: genomics.datasets.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsTestIamPermissions : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which policy is being specified. Format is
 *  `datasets/<dataset ID>`.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRGenomics_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource.
 *  See <a href="/iam/docs/managing-policies#testing_permissions">Testing
 *  Permissions</a> for more information.
 *
 *  @param object The @c GTLRGenomics_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which policy is being specified.
 *    Format is
 *    `datasets/<dataset ID>`.
 *
 *  @return GTLRGenomicsQuery_DatasetsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRGenomics_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Undeletes a dataset by restoring a dataset which was deleted via this API.
 *  This operation is only possible for a week after the deletion occurred.
 *
 *  Method: genomics.datasets.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_DatasetsUndelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForDatasetsUndeleteWithObject:datasetId:]

/** The ID of the dataset to be undeleted. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  Fetches a @c GTLRGenomics_Dataset.
 *
 *  Undeletes a dataset by restoring a dataset which was deleted via this API.
 *  This operation is only possible for a week after the deletion occurred.
 *
 *  @param object The @c GTLRGenomics_UndeleteDatasetRequest to include in the
 *    query.
 *  @param datasetId The ID of the dataset to be undeleted.
 *
 *  @return GTLRGenomicsQuery_DatasetsUndelete
 */
+ (instancetype)queryWithObject:(GTLRGenomics_UndeleteDatasetRequest *)object
                      datasetId:(NSString *)datasetId;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation.
 *  The server makes a best effort to cancel the operation, but success is not
 *  guaranteed. Clients may use Operations.GetOperation
 *  or Operations.ListOperations
 *  to check whether the cancellation succeeded or the operation completed
 *  despite cancellation.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.cancel`
 *
 *  Method: genomics.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_OperationsCancel : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation.
 *  The server makes a best effort to cancel the operation, but success is not
 *  guaranteed. Clients may use Operations.GetOperation
 *  or Operations.ListOperations
 *  to check whether the cancellation succeeded or the operation completed
 *  despite cancellation.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.cancel`
 *
 *  @param object The @c GTLRGenomics_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRGenomicsQuery_OperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRGenomics_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation.
 *  Clients can use this method to poll the operation result at intervals as
 *  recommended by the API service.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.get`
 *
 *  Method: genomics.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_OperationsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRGenomics_Operation.
 *
 *  Gets the latest state of a long-running operation.
 *  Clients can use this method to poll the operation result at intervals as
 *  recommended by the API service.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.get`
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRGenomicsQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.list`
 *
 *  Method: genomics.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_OperationsList : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForOperationsListWithname:]

/**
 *  A string for filtering Operations.
 *  In v2alpha1, the following filter fields are supported&#58;
 *  * createTime&#58; The time this job was created
 *  * events&#58; The set of event (names) that have occurred while running
 *  the pipeline. The &#58; operator can be used to determine if a
 *  particular event has occurred.
 *  * error&#58; If the pipeline is running, this value is NULL. Once the
 *  pipeline finishes, the value is the standard Google error code.
 *  * labels.key or labels."key with space" where key is a label key.
 *  * done&#58; If the pipeline is running, this value is false. Once the
 *  pipeline finishes, the value is true.
 *  In v1 and v1alpha2, the following filter fields are supported&#58;
 *  * projectId&#58; Required. Corresponds to
 *  OperationMetadata.projectId.
 *  * createTime&#58; The time this job was created, in seconds from the
 *  [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or `<=`
 *  operators.
 *  * status&#58; Can be `RUNNING`, `SUCCESS`, `FAILURE`, or `CANCELED`. Only
 *  one status may be specified.
 *  * labels.key where key is a label key.
 *  Examples&#58;
 *  * `projectId = my-project AND createTime >= 1432140000`
 *  * `projectId = my-project AND createTime >= 1432140000 AND createTime <=
 *  1432150000 AND status = RUNNING`
 *  * `projectId = my-project AND labels.color = *`
 *  * `projectId = my-project AND labels.color = red`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If unspecified, defaults to
 *  256. The maximum value is 2048.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRGenomics_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request.
 *  Authorization requires the following [Google
 *  IAM](https://cloud.google.com/iam) permission&#58;
 *  * `genomics.operations.list`
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRGenomicsQuery_OperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists fixed width coverage buckets for a read group set, each of which
 *  correspond to a range of a reference sequence. Each bucket summarizes
 *  coverage information across its corresponding genomic range.
 *  Coverage is defined as the number of reads which are aligned to a given
 *  base in the reference sequence. Coverage buckets are available at several
 *  precomputed bucket widths, enabling retrieval of various coverage 'zoom
 *  levels'. The caller must have READ permissions for the target read group
 *  set.
 *
 *  Method: genomics.readgroupsets.coveragebuckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReadgroupsetsCoveragebucketsList : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsCoveragebucketsListWithreadGroupSetId:]

/**
 *  The end position of the range on the reference, 0-based exclusive. If
 *  specified, `referenceName` must also be specified. If unset or 0, defaults
 *  to the length of the reference.
 */
@property(nonatomic, assign) long long end;

/**
 *  The maximum number of results to return in a single page. If unspecified,
 *  defaults to 1024. The maximum value is 2048.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The ID of the read group set over which coverage is requested.
 */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  The name of the reference to query, within the reference set associated
 *  with this query. Optional.
 */
@property(nonatomic, copy, nullable) NSString *referenceName;

/**
 *  The start position of the range on the reference, 0-based inclusive. If
 *  specified, `referenceName` must also be specified. Defaults to 0.
 */
@property(nonatomic, assign) long long start;

/**
 *  The desired width of each reported coverage bucket in base pairs. This
 *  will be rounded down to the nearest precomputed bucket width; the value
 *  of which is returned as `bucketWidth` in the response. Defaults
 *  to infinity (each bucket spans an entire reference sequence) or the length
 *  of the target range, if specified. The smallest precomputed
 *  `bucketWidth` is currently 2048 base pairs; this is subject to
 *  change.
 */
@property(nonatomic, assign) long long targetBucketWidth;

/**
 *  Fetches a @c GTLRGenomics_ListCoverageBucketsResponse.
 *
 *  Lists fixed width coverage buckets for a read group set, each of which
 *  correspond to a range of a reference sequence. Each bucket summarizes
 *  coverage information across its corresponding genomic range.
 *  Coverage is defined as the number of reads which are aligned to a given
 *  base in the reference sequence. Coverage buckets are available at several
 *  precomputed bucket widths, enabling retrieval of various coverage 'zoom
 *  levels'. The caller must have READ permissions for the target read group
 *  set.
 *
 *  @param readGroupSetId Required. The ID of the read group set over which
 *    coverage is requested.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsCoveragebucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId;

@end

/**
 *  Deletes a read group set.
 *
 *  Method: genomics.readgroupsets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_ReadgroupsetsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsDeleteWithreadGroupSetId:]

/**
 *  The ID of the read group set to be deleted. The caller must have WRITE
 *  permissions to the dataset associated with this read group set.
 */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes a read group set.
 *
 *  @param readGroupSetId The ID of the read group set to be deleted. The caller
 *    must have WRITE
 *    permissions to the dataset associated with this read group set.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsDelete
 */
+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId;

@end

/**
 *  Exports a read group set to a BAM file in Google Cloud Storage.
 *  Note that currently there may be some differences between exported BAM
 *  files and the original BAM file at the time of import. See
 *  ImportReadGroupSets
 *  for caveats.
 *
 *  Method: genomics.readgroupsets.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsDevstorageReadWrite
 */
@interface GTLRGenomicsQuery_ReadgroupsetsExport : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsExportWithObject:readGroupSetId:]

/**
 *  Required. The ID of the read group set to export. The caller must have
 *  READ access to this read group set.
 */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  Fetches a @c GTLRGenomics_Operation.
 *
 *  Exports a read group set to a BAM file in Google Cloud Storage.
 *  Note that currently there may be some differences between exported BAM
 *  files and the original BAM file at the time of import. See
 *  ImportReadGroupSets
 *  for caveats.
 *
 *  @param object The @c GTLRGenomics_ExportReadGroupSetRequest to include in
 *    the query.
 *  @param readGroupSetId Required. The ID of the read group set to export. The
 *    caller must have
 *    READ access to this read group set.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsExport
 */
+ (instancetype)queryWithObject:(GTLRGenomics_ExportReadGroupSetRequest *)object
                 readGroupSetId:(NSString *)readGroupSetId;

@end

/**
 *  Gets a read group set by ID.
 *
 *  Method: genomics.readgroupsets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReadgroupsetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsGetWithreadGroupSetId:]

/** The ID of the read group set. */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  Fetches a @c GTLRGenomics_ReadGroupSet.
 *
 *  Gets a read group set by ID.
 *
 *  @param readGroupSetId The ID of the read group set.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsGet
 */
+ (instancetype)queryWithReadGroupSetId:(NSString *)readGroupSetId;

@end

/**
 *  Creates read group sets by asynchronously importing the provided
 *  information.
 *  The caller must have WRITE permissions to the dataset.
 *  ## Notes on [BAM](https://samtools.github.io/hts-specs/SAMv1.pdf) import
 *  - Tags will be converted to strings - tag types are not preserved
 *  - Comments (`\@CO`) in the input file header will not be preserved
 *  - Original header order of references (`\@SQ`) will not be preserved
 *  - Any reverse stranded unmapped reads will be reverse complemented, and
 *  their qualities (also the "BQ" and "OQ" tags, if any) will be reversed
 *  - Unmapped reads will be stripped of positional information (reference name
 *  and position)
 *
 *  Method: genomics.readgroupsets.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsDevstorageReadWrite
 */
@interface GTLRGenomicsQuery_ReadgroupsetsImport : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsImportWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Operation.
 *
 *  Creates read group sets by asynchronously importing the provided
 *  information.
 *  The caller must have WRITE permissions to the dataset.
 *  ## Notes on [BAM](https://samtools.github.io/hts-specs/SAMv1.pdf) import
 *  - Tags will be converted to strings - tag types are not preserved
 *  - Comments (`\@CO`) in the input file header will not be preserved
 *  - Original header order of references (`\@SQ`) will not be preserved
 *  - Any reverse stranded unmapped reads will be reverse complemented, and
 *  their qualities (also the "BQ" and "OQ" tags, if any) will be reversed
 *  - Unmapped reads will be stripped of positional information (reference name
 *  and position)
 *
 *  @param object The @c GTLRGenomics_ImportReadGroupSetsRequest to include in
 *    the query.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsImport
 */
+ (instancetype)queryWithObject:(GTLRGenomics_ImportReadGroupSetsRequest *)object;

@end

/**
 *  Updates a read group set.
 *  This method supports patch semantics.
 *
 *  Method: genomics.readgroupsets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_ReadgroupsetsPatch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsPatchWithObject:readGroupSetId:]

/**
 *  The ID of the read group set to be updated. The caller must have WRITE
 *  permissions to the dataset associated with this read group set.
 */
@property(nonatomic, copy, nullable) NSString *readGroupSetId;

/**
 *  An optional mask specifying which fields to update. Supported fields:
 *  * name.
 *  * referenceSetId.
 *  Leaving `updateMask` unset is equivalent to specifying all mutable
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRGenomics_ReadGroupSet.
 *
 *  Updates a read group set.
 *  This method supports patch semantics.
 *
 *  @param object The @c GTLRGenomics_ReadGroupSet to include in the query.
 *  @param readGroupSetId The ID of the read group set to be updated. The caller
 *    must have WRITE
 *    permissions to the dataset associated with this read group set.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsPatch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_ReadGroupSet *)object
                 readGroupSetId:(NSString *)readGroupSetId;

@end

/**
 *  Searches for read group sets matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReadGroupSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L135).
 *
 *  Method: genomics.readgroupsets.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReadgroupsetsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadgroupsetsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchReadGroupSetsResponse.
 *
 *  Searches for read group sets matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReadGroupSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L135).
 *
 *  @param object The @c GTLRGenomics_SearchReadGroupSetsRequest to include in
 *    the query.
 *
 *  @return GTLRGenomicsQuery_ReadgroupsetsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchReadGroupSetsRequest *)object;

@end

/**
 *  Gets a list of reads for one or more read group sets.
 *  Reads search operates over a genomic coordinate space of reference sequence
 *  & position defined over the reference sequences to which the requested
 *  read group sets are aligned.
 *  If a target positional range is specified, search returns all reads whose
 *  alignment to the reference genome overlap the range. A query which
 *  specifies only read group set IDs yields all reads in those read group
 *  sets, including unmapped reads.
 *  All reads returned (including reads on subsequent pages) are ordered by
 *  genomic coordinate (by reference sequence, then position). Reads with
 *  equivalent genomic coordinates are returned in an unspecified order. This
 *  order is consistent, such that two queries for the same content (regardless
 *  of page size) yield reads in the same order across their respective streams
 *  of paginated responses.
 *  Implements
 *  [GlobalAllianceApi.searchReads](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L85).
 *
 *  Method: genomics.reads.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReadsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReadsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchReadsResponse.
 *
 *  Gets a list of reads for one or more read group sets.
 *  Reads search operates over a genomic coordinate space of reference sequence
 *  & position defined over the reference sequences to which the requested
 *  read group sets are aligned.
 *  If a target positional range is specified, search returns all reads whose
 *  alignment to the reference genome overlap the range. A query which
 *  specifies only read group set IDs yields all reads in those read group
 *  sets, including unmapped reads.
 *  All reads returned (including reads on subsequent pages) are ordered by
 *  genomic coordinate (by reference sequence, then position). Reads with
 *  equivalent genomic coordinates are returned in an unspecified order. This
 *  order is consistent, such that two queries for the same content (regardless
 *  of page size) yield reads in the same order across their respective streams
 *  of paginated responses.
 *  Implements
 *  [GlobalAllianceApi.searchReads](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/readmethods.avdl#L85).
 *
 *  @param object The @c GTLRGenomics_SearchReadsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_ReadsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchReadsRequest *)object;

@end

/**
 *  Lists the bases in a reference, optionally restricted to a range.
 *  Implements
 *  [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).
 *
 *  Method: genomics.references.bases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReferencesBasesList : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReferencesBasesListWithreferenceId:]

/**
 *  The end position (0-based, exclusive) of this query. Defaults to the length
 *  of this reference.
 */
@property(nonatomic, assign) long long end;

/**
 *  The maximum number of bases to return in a single page. If unspecified,
 *  defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
 *  pairs).
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The continuation token, which is used to page through large result sets.
 *  To get the next page of results, set this parameter to the value of
 *  `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The ID of the reference. */
@property(nonatomic, copy, nullable) NSString *referenceId;

/** The start position (0-based) of this query. Defaults to 0. */
@property(nonatomic, assign) long long start;

/**
 *  Fetches a @c GTLRGenomics_ListBasesResponse.
 *
 *  Lists the bases in a reference, optionally restricted to a range.
 *  Implements
 *  [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).
 *
 *  @param referenceId The ID of the reference.
 *
 *  @return GTLRGenomicsQuery_ReferencesBasesList
 */
+ (instancetype)queryWithReferenceId:(NSString *)referenceId;

@end

/**
 *  Gets a reference set.
 *  Implements
 *  [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).
 *
 *  Method: genomics.referencesets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReferencesetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReferencesetsGetWithreferenceSetId:]

/** The ID of the reference set. */
@property(nonatomic, copy, nullable) NSString *referenceSetId;

/**
 *  Fetches a @c GTLRGenomics_ReferenceSet.
 *
 *  Gets a reference set.
 *  Implements
 *  [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).
 *
 *  @param referenceSetId The ID of the reference set.
 *
 *  @return GTLRGenomicsQuery_ReferencesetsGet
 */
+ (instancetype)queryWithReferenceSetId:(NSString *)referenceSetId;

@end

/**
 *  Searches for reference sets which match the given criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReferenceSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L71)
 *
 *  Method: genomics.referencesets.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReferencesetsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReferencesetsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchReferenceSetsResponse.
 *
 *  Searches for reference sets which match the given criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReferenceSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L71)
 *
 *  @param object The @c GTLRGenomics_SearchReferenceSetsRequest to include in
 *    the query.
 *
 *  @return GTLRGenomicsQuery_ReferencesetsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchReferenceSetsRequest *)object;

@end

/**
 *  Gets a reference.
 *  Implements
 *  [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).
 *
 *  Method: genomics.references.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReferencesGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReferencesGetWithreferenceId:]

/** The ID of the reference. */
@property(nonatomic, copy, nullable) NSString *referenceId;

/**
 *  Fetches a @c GTLRGenomics_Reference.
 *
 *  Gets a reference.
 *  Implements
 *  [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).
 *
 *  @param referenceId The ID of the reference.
 *
 *  @return GTLRGenomicsQuery_ReferencesGet
 */
+ (instancetype)queryWithReferenceId:(NSString *)referenceId;

@end

/**
 *  Searches for references which match the given criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).
 *
 *  Method: genomics.references.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_ReferencesSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForReferencesSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchReferencesResponse.
 *
 *  Searches for references which match the given criteria.
 *  Implements
 *  [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).
 *
 *  @param object The @c GTLRGenomics_SearchReferencesRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_ReferencesSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchReferencesRequest *)object;

@end

/**
 *  Creates a new variant.
 *
 *  Method: genomics.variants.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Variant.
 *
 *  Creates a new variant.
 *
 *  @param object The @c GTLRGenomics_Variant to include in the query.
 *
 *  @return GTLRGenomicsQuery_VariantsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Variant *)object;

@end

/**
 *  Deletes a variant.
 *
 *  Method: genomics.variants.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsDeleteWithvariantId:]

/** The ID of the variant to be deleted. */
@property(nonatomic, copy, nullable) NSString *variantId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes a variant.
 *
 *  @param variantId The ID of the variant to be deleted.
 *
 *  @return GTLRGenomicsQuery_VariantsDelete
 */
+ (instancetype)queryWithVariantId:(NSString *)variantId;

@end

/**
 *  Creates a new variant set.
 *  The provided variant set must have a valid `datasetId` set - all other
 *  fields are optional. Note that the `id` field will be ignored, as this is
 *  assigned by the server.
 *
 *  Method: genomics.variantsets.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsetsCreate : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsCreateWithObject:]

/**
 *  Fetches a @c GTLRGenomics_VariantSet.
 *
 *  Creates a new variant set.
 *  The provided variant set must have a valid `datasetId` set - all other
 *  fields are optional. Note that the `id` field will be ignored, as this is
 *  assigned by the server.
 *
 *  @param object The @c GTLRGenomics_VariantSet to include in the query.
 *
 *  @return GTLRGenomicsQuery_VariantsetsCreate
 */
+ (instancetype)queryWithObject:(GTLRGenomics_VariantSet *)object;

@end

/**
 *  Deletes a variant set including all variants, call sets, and calls within.
 *  This is not reversible.
 *
 *  Method: genomics.variantsets.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsetsDelete : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsDeleteWithvariantSetId:]

/** The ID of the variant set to be deleted. */
@property(nonatomic, copy, nullable) NSString *variantSetId;

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Deletes a variant set including all variants, call sets, and calls within.
 *  This is not reversible.
 *
 *  @param variantSetId The ID of the variant set to be deleted.
 *
 *  @return GTLRGenomicsQuery_VariantsetsDelete
 */
+ (instancetype)queryWithVariantSetId:(NSString *)variantSetId;

@end

/**
 *  Exports variant set data to an external destination.
 *
 *  Method: genomics.variantsets.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsBigquery
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsetsExport : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsExportWithObject:variantSetId:]

/**
 *  Required. The ID of the variant set that contains variant data which
 *  should be exported. The caller must have READ access to this variant set.
 */
@property(nonatomic, copy, nullable) NSString *variantSetId;

/**
 *  Fetches a @c GTLRGenomics_Operation.
 *
 *  Exports variant set data to an external destination.
 *
 *  @param object The @c GTLRGenomics_ExportVariantSetRequest to include in the
 *    query.
 *  @param variantSetId Required. The ID of the variant set that contains
 *    variant data which
 *    should be exported. The caller must have READ access to this variant set.
 *
 *  @return GTLRGenomicsQuery_VariantsetsExport
 */
+ (instancetype)queryWithObject:(GTLRGenomics_ExportVariantSetRequest *)object
                   variantSetId:(NSString *)variantSetId;

@end

/**
 *  Gets a variant set by ID.
 *
 *  Method: genomics.variantsets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_VariantsetsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsGetWithvariantSetId:]

/** Required. The ID of the variant set. */
@property(nonatomic, copy, nullable) NSString *variantSetId;

/**
 *  Fetches a @c GTLRGenomics_VariantSet.
 *
 *  Gets a variant set by ID.
 *
 *  @param variantSetId Required. The ID of the variant set.
 *
 *  @return GTLRGenomicsQuery_VariantsetsGet
 */
+ (instancetype)queryWithVariantSetId:(NSString *)variantSetId;

@end

/**
 *  Updates a variant set using patch semantics.
 *
 *  Method: genomics.variantsets.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsetsPatch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsPatchWithObject:variantSetId:]

/**
 *  An optional mask specifying which fields to update. Supported fields:
 *  * metadata.
 *  * name.
 *  * description.
 *  Leaving `updateMask` unset is equivalent to specifying all mutable
 *  fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** The ID of the variant to be updated (must already exist). */
@property(nonatomic, copy, nullable) NSString *variantSetId;

/**
 *  Fetches a @c GTLRGenomics_VariantSet.
 *
 *  Updates a variant set using patch semantics.
 *
 *  @param object The @c GTLRGenomics_VariantSet to include in the query.
 *  @param variantSetId The ID of the variant to be updated (must already
 *    exist).
 *
 *  @return GTLRGenomicsQuery_VariantsetsPatch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_VariantSet *)object
                   variantSetId:(NSString *)variantSetId;

@end

/**
 *  Returns a list of all variant sets matching search criteria.
 *  Implements
 *  [GlobalAllianceApi.searchVariantSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L49).
 *
 *  Method: genomics.variantsets.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_VariantsetsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsetsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchVariantSetsResponse.
 *
 *  Returns a list of all variant sets matching search criteria.
 *  Implements
 *  [GlobalAllianceApi.searchVariantSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L49).
 *
 *  @param object The @c GTLRGenomics_SearchVariantSetsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_VariantsetsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchVariantSetsRequest *)object;

@end

/**
 *  Gets a variant by ID.
 *
 *  Method: genomics.variants.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_VariantsGet : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsGetWithvariantId:]

/** The ID of the variant. */
@property(nonatomic, copy, nullable) NSString *variantId;

/**
 *  Fetches a @c GTLRGenomics_Variant.
 *
 *  Gets a variant by ID.
 *
 *  @param variantId The ID of the variant.
 *
 *  @return GTLRGenomicsQuery_VariantsGet
 */
+ (instancetype)queryWithVariantId:(NSString *)variantId;

@end

/**
 *  Creates variant data by asynchronously importing the provided information.
 *  The variants for import will be merged with any existing variant that
 *  matches its reference sequence, start, end, reference bases, and
 *  alternative bases. If no such variant exists, a new one will be created.
 *  When variants are merged, the call information from the new variant
 *  is added to the existing variant, and Variant info fields are merged
 *  as specified in
 *  infoMergeConfig.
 *  As a special case, for single-sample VCF files, QUAL and FILTER fields will
 *  be moved to the call level; these are sometimes interpreted in a
 *  call-specific context.
 *  Imported VCF headers are appended to the metadata already in a variant set.
 *
 *  Method: genomics.variants.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsDevstorageReadWrite
 */
@interface GTLRGenomicsQuery_VariantsImport : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsImportWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Operation.
 *
 *  Creates variant data by asynchronously importing the provided information.
 *  The variants for import will be merged with any existing variant that
 *  matches its reference sequence, start, end, reference bases, and
 *  alternative bases. If no such variant exists, a new one will be created.
 *  When variants are merged, the call information from the new variant
 *  is added to the existing variant, and Variant info fields are merged
 *  as specified in
 *  infoMergeConfig.
 *  As a special case, for single-sample VCF files, QUAL and FILTER fields will
 *  be moved to the call level; these are sometimes interpreted in a
 *  call-specific context.
 *  Imported VCF headers are appended to the metadata already in a variant set.
 *
 *  @param object The @c GTLRGenomics_ImportVariantsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_VariantsImport
 */
+ (instancetype)queryWithObject:(GTLRGenomics_ImportVariantsRequest *)object;

@end

/**
 *  Merges the given variants with existing variants.
 *  Each variant will be
 *  merged with an existing variant that matches its reference sequence,
 *  start, end, reference bases, and alternative bases. If no such variant
 *  exists, a new one will be created.
 *  When variants are merged, the call information from the new variant
 *  is added to the existing variant. Variant info fields are merged as
 *  specified in the
 *  infoMergeConfig
 *  field of the MergeVariantsRequest.
 *  Please exercise caution when using this method! It is easy to introduce
 *  mistakes in existing variants and difficult to back out of them. For
 *  example,
 *  suppose you were trying to merge a new variant with an existing one and
 *  both
 *  variants contain calls that belong to callsets with the same callset ID.
 *  // Existing variant - irrelevant fields trimmed for clarity
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  0,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  // New variant with conflicting call information
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  1,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  The resulting merged variant would overwrite the existing calls with those
 *  from the new variant:
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  1,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  This may be the desired outcome, but it is up to the user to determine if
 *  if that is indeed the case.
 *
 *  Method: genomics.variants.merge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsMerge : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsMergeWithObject:]

/**
 *  Fetches a @c GTLRGenomics_Empty.
 *
 *  Merges the given variants with existing variants.
 *  Each variant will be
 *  merged with an existing variant that matches its reference sequence,
 *  start, end, reference bases, and alternative bases. If no such variant
 *  exists, a new one will be created.
 *  When variants are merged, the call information from the new variant
 *  is added to the existing variant. Variant info fields are merged as
 *  specified in the
 *  infoMergeConfig
 *  field of the MergeVariantsRequest.
 *  Please exercise caution when using this method! It is easy to introduce
 *  mistakes in existing variants and difficult to back out of them. For
 *  example,
 *  suppose you were trying to merge a new variant with an existing one and
 *  both
 *  variants contain calls that belong to callsets with the same callset ID.
 *  // Existing variant - irrelevant fields trimmed for clarity
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  0,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  // New variant with conflicting call information
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  1,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  The resulting merged variant would overwrite the existing calls with those
 *  from the new variant:
 *  {
 *  "variantSetId": "10473108253681171589",
 *  "referenceName": "1",
 *  "start": "10582",
 *  "referenceBases": "G",
 *  "alternateBases": [
 *  "A"
 *  ],
 *  "calls": [
 *  {
 *  "callSetId": "10473108253681171589-0",
 *  "callSetName": "CALLSET0",
 *  "genotype": [
 *  1,
 *  1
 *  ],
 *  }
 *  ]
 *  }
 *  This may be the desired outcome, but it is up to the user to determine if
 *  if that is indeed the case.
 *
 *  @param object The @c GTLRGenomics_MergeVariantsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_VariantsMerge
 */
+ (instancetype)queryWithObject:(GTLRGenomics_MergeVariantsRequest *)object;

@end

/**
 *  Updates a variant.
 *  This method supports patch semantics. Returns the modified variant without
 *  its calls.
 *
 *  Method: genomics.variants.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 */
@interface GTLRGenomicsQuery_VariantsPatch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsPatchWithObject:variantId:]

/**
 *  An optional mask specifying which fields to update. At this time, mutable
 *  fields are names and
 *  info. Acceptable values are "names" and
 *  "info". If unspecified, all mutable fields will be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/** The ID of the variant to be updated. */
@property(nonatomic, copy, nullable) NSString *variantId;

/**
 *  Fetches a @c GTLRGenomics_Variant.
 *
 *  Updates a variant.
 *  This method supports patch semantics. Returns the modified variant without
 *  its calls.
 *
 *  @param object The @c GTLRGenomics_Variant to include in the query.
 *  @param variantId The ID of the variant to be updated.
 *
 *  @return GTLRGenomicsQuery_VariantsPatch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_Variant *)object
                      variantId:(NSString *)variantId;

@end

/**
 *  Gets a list of variants matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126).
 *
 *  Method: genomics.variants.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeGenomics
 *    @c kGTLRAuthScopeGenomicsCloudPlatform
 *    @c kGTLRAuthScopeGenomicsReadonly
 */
@interface GTLRGenomicsQuery_VariantsSearch : GTLRGenomicsQuery
// Previous library name was
//   +[GTLQueryGenomics queryForVariantsSearchWithObject:]

/**
 *  Fetches a @c GTLRGenomics_SearchVariantsResponse.
 *
 *  Gets a list of variants matching the criteria.
 *  Implements
 *  [GlobalAllianceApi.searchVariants](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L126).
 *
 *  @param object The @c GTLRGenomics_SearchVariantsRequest to include in the
 *    query.
 *
 *  @return GTLRGenomicsQuery_VariantsSearch
 */
+ (instancetype)queryWithObject:(GTLRGenomics_SearchVariantsRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
