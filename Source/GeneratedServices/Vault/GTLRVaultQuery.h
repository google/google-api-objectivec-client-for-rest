// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   G Suite Vault API (vault/v1)
// Description:
//   Archiving and eDiscovery for G Suite.
// Documentation:
//   https://developers.google.com/vault

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVault_AddHeldAccountsRequest;
@class GTLRVault_AddMatterPermissionsRequest;
@class GTLRVault_CloseMatterRequest;
@class GTLRVault_Export;
@class GTLRVault_HeldAccount;
@class GTLRVault_Hold;
@class GTLRVault_Matter;
@class GTLRVault_RemoveHeldAccountsRequest;
@class GTLRVault_RemoveMatterPermissionsRequest;
@class GTLRVault_ReopenMatterRequest;
@class GTLRVault_SavedQuery;
@class GTLRVault_UndeleteMatterRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// state

/** Value: "CLOSED" */
GTLR_EXTERN NSString * const kGTLRVaultStateClosed;
/** Value: "DELETED" */
GTLR_EXTERN NSString * const kGTLRVaultStateDeleted;
/** Value: "OPEN" */
GTLR_EXTERN NSString * const kGTLRVaultStateOpen;
/** Value: "STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRVaultStateStateUnspecified;

// ----------------------------------------------------------------------------
// view

/** Value: "BASIC" */
GTLR_EXTERN NSString * const kGTLRVaultViewBasic;
/** Value: "BASIC_HOLD" */
GTLR_EXTERN NSString * const kGTLRVaultViewBasicHold;
/** Value: "FULL" */
GTLR_EXTERN NSString * const kGTLRVaultViewFull;
/** Value: "FULL_HOLD" */
GTLR_EXTERN NSString * const kGTLRVaultViewFullHold;
/** Value: "HOLD_VIEW_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRVaultViewHoldViewUnspecified;
/** Value: "VIEW_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRVaultViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Vault query classes.
 */
@interface GTLRVaultQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Adds an account as a matter collaborator.
 *
 *  Method: vault.matters.addPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersAddPermissions : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersAddPermissionsWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_MatterPermission.
 *
 *  Adds an account as a matter collaborator.
 *
 *  @param object The @c GTLRVault_AddMatterPermissionsRequest to include in the
 *    query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersAddPermissions
 */
+ (instancetype)queryWithObject:(GTLRVault_AddMatterPermissionsRequest *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Closes the specified matter. Returns matter with updated state.
 *
 *  Method: vault.matters.close
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersClose : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersCloseWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_CloseMatterResponse.
 *
 *  Closes the specified matter. Returns matter with updated state.
 *
 *  @param object The @c GTLRVault_CloseMatterRequest to include in the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersClose
 */
+ (instancetype)queryWithObject:(GTLRVault_CloseMatterRequest *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Creates a new matter with the given name and description. The initial state
 *  is open, and the owner is the method caller. Returns the created matter
 *  with default view.
 *
 *  Method: vault.matters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersCreate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersCreateWithObject:]

/**
 *  Fetches a @c GTLRVault_Matter.
 *
 *  Creates a new matter with the given name and description. The initial state
 *  is open, and the owner is the method caller. Returns the created matter
 *  with default view.
 *
 *  @param object The @c GTLRVault_Matter to include in the query.
 *
 *  @return GTLRVaultQuery_MattersCreate
 */
+ (instancetype)queryWithObject:(GTLRVault_Matter *)object;

@end

/**
 *  Deletes the specified matter. Returns matter with updated state.
 *
 *  Method: vault.matters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersDelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersDeleteWithmatterId:]

/** The matter ID */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Matter.
 *
 *  Deletes the specified matter. Returns matter with updated state.
 *
 *  @param matterId The matter ID
 *
 *  @return GTLRVaultQuery_MattersDelete
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId;

@end

/**
 *  Creates an Export.
 *
 *  Method: vault.matters.exports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersExportsCreate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersExportsCreateWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Export.
 *
 *  Creates an Export.
 *
 *  @param object The @c GTLRVault_Export to include in the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersExportsCreate
 */
+ (instancetype)queryWithObject:(GTLRVault_Export *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Deletes an Export.
 *
 *  Method: vault.matters.exports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersExportsDelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersExportsDeleteWithmatterId:exportId:]

/** The export ID. */
@property(nonatomic, copy, nullable) NSString *exportId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Empty.
 *
 *  Deletes an Export.
 *
 *  @param matterId The matter ID.
 *  @param exportId The export ID.
 *
 *  @return GTLRVaultQuery_MattersExportsDelete
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                         exportId:(NSString *)exportId;

@end

/**
 *  Gets an Export.
 *
 *  Method: vault.matters.exports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersExportsGet : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersExportsGetWithmatterId:exportId:]

/** The export ID. */
@property(nonatomic, copy, nullable) NSString *exportId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Export.
 *
 *  Gets an Export.
 *
 *  @param matterId The matter ID.
 *  @param exportId The export ID.
 *
 *  @return GTLRVaultQuery_MattersExportsGet
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                         exportId:(NSString *)exportId;

@end

/**
 *  Lists Exports.
 *
 *  Method: vault.matters.exports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersExportsList : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersExportsListWithmatterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The number of exports to return in the response. */
@property(nonatomic, assign) NSInteger pageSize;

/** The pagination token as returned in the response. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRVault_ListExportsResponse.
 *
 *  Lists Exports.
 *
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersExportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId;

@end

/**
 *  Gets the specified matter.
 *
 *  Method: vault.matters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersGet : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersGetWithmatterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Specifies which parts of the Matter to return in the response.
 *
 *  Likely values:
 *    @arg @c kGTLRVaultViewViewUnspecified Value "VIEW_UNSPECIFIED"
 *    @arg @c kGTLRVaultViewBasic Value "BASIC"
 *    @arg @c kGTLRVaultViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRVault_Matter.
 *
 *  Gets the specified matter.
 *
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersGet
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId;

@end

/**
 *  Adds a HeldAccount to a hold. Accounts can only be added to a hold that
 *  has no held_org_unit set. Attempting to add an account to an OU-based
 *  hold will result in an error.
 *
 *  Method: vault.matters.holds.accounts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsAccountsCreate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsAccountsCreateWithObject:matterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_HeldAccount.
 *
 *  Adds a HeldAccount to a hold. Accounts can only be added to a hold that
 *  has no held_org_unit set. Attempting to add an account to an OU-based
 *  hold will result in an error.
 *
 *  @param object The @c GTLRVault_HeldAccount to include in the query.
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsAccountsCreate
 */
+ (instancetype)queryWithObject:(GTLRVault_HeldAccount *)object
                       matterId:(NSString *)matterId
                         holdId:(NSString *)holdId;

@end

/**
 *  Removes a HeldAccount from a hold. If this request leaves the hold with
 *  no held accounts, the hold will not apply to any accounts.
 *
 *  Method: vault.matters.holds.accounts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsAccountsDelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsAccountsDeleteWithmatterId:holdId:accountId:]

/** The ID of the account to remove from the hold. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Empty.
 *
 *  Removes a HeldAccount from a hold. If this request leaves the hold with
 *  no held accounts, the hold will not apply to any accounts.
 *
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *  @param accountId The ID of the account to remove from the hold.
 *
 *  @return GTLRVaultQuery_MattersHoldsAccountsDelete
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                           holdId:(NSString *)holdId
                        accountId:(NSString *)accountId;

@end

/**
 *  Lists HeldAccounts for a hold. This will only list individually specified
 *  held accounts. If the hold is on an OU, then use
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>
 *  to enumerate its members.
 *
 *  Method: vault.matters.holds.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersHoldsAccountsList : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsAccountsListWithmatterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_ListHeldAccountsResponse.
 *
 *  Lists HeldAccounts for a hold. This will only list individually specified
 *  held accounts. If the hold is on an OU, then use
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>
 *  to enumerate its members.
 *
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsAccountsList
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                           holdId:(NSString *)holdId;

@end

/**
 *  Adds HeldAccounts to a hold. Returns a list of accounts that have been
 *  successfully added. Accounts can only be added to an existing account-based
 *  hold.
 *
 *  Method: vault.matters.holds.addHeldAccounts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsAddHeldAccounts : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsAddHeldAccountsWithObject:matterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_AddHeldAccountsResponse.
 *
 *  Adds HeldAccounts to a hold. Returns a list of accounts that have been
 *  successfully added. Accounts can only be added to an existing account-based
 *  hold.
 *
 *  @param object The @c GTLRVault_AddHeldAccountsRequest to include in the
 *    query.
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsAddHeldAccounts
 */
+ (instancetype)queryWithObject:(GTLRVault_AddHeldAccountsRequest *)object
                       matterId:(NSString *)matterId
                         holdId:(NSString *)holdId;

@end

/**
 *  Creates a hold in the given matter.
 *
 *  Method: vault.matters.holds.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsCreate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsCreateWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Hold.
 *
 *  Creates a hold in the given matter.
 *
 *  @param object The @c GTLRVault_Hold to include in the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsCreate
 */
+ (instancetype)queryWithObject:(GTLRVault_Hold *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Removes a hold by ID. This will release any HeldAccounts on this Hold.
 *
 *  Method: vault.matters.holds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsDelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsDeleteWithmatterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Empty.
 *
 *  Removes a hold by ID. This will release any HeldAccounts on this Hold.
 *
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsDelete
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                           holdId:(NSString *)holdId;

@end

/**
 *  Gets a hold by ID.
 *
 *  Method: vault.matters.holds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersHoldsGet : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsGetWithmatterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Specifies which parts of the Hold to return.
 *
 *  Likely values:
 *    @arg @c kGTLRVaultViewHoldViewUnspecified Value "HOLD_VIEW_UNSPECIFIED"
 *    @arg @c kGTLRVaultViewBasicHold Value "BASIC_HOLD"
 *    @arg @c kGTLRVaultViewFullHold Value "FULL_HOLD"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRVault_Hold.
 *
 *  Gets a hold by ID.
 *
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsGet
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                           holdId:(NSString *)holdId;

@end

/**
 *  Lists holds within a matter. An empty page token in ListHoldsResponse
 *  denotes no more holds to list.
 *
 *  Method: vault.matters.holds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersHoldsList : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsListWithmatterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  The number of holds to return in the response, between 0 and 100 inclusive.
 *  Leaving this empty, or as 0, is the same as page_size = 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The pagination token as returned in the response.
 *  An empty token means start from the beginning.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specifies which parts of the Hold to return.
 *
 *  Likely values:
 *    @arg @c kGTLRVaultViewHoldViewUnspecified Value "HOLD_VIEW_UNSPECIFIED"
 *    @arg @c kGTLRVaultViewBasicHold Value "BASIC_HOLD"
 *    @arg @c kGTLRVaultViewFullHold Value "FULL_HOLD"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRVault_ListHoldsResponse.
 *
 *  Lists holds within a matter. An empty page token in ListHoldsResponse
 *  denotes no more holds to list.
 *
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId;

@end

/**
 *  Removes HeldAccounts from a hold. Returns a list of statuses in the same
 *  order as the request. If this request leaves the hold with no held
 *  accounts, the hold will not apply to any accounts.
 *
 *  Method: vault.matters.holds.removeHeldAccounts
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsRemoveHeldAccounts : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsRemoveHeldAccountsWithObject:matterId:holdId:]

/** The hold ID. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_RemoveHeldAccountsResponse.
 *
 *  Removes HeldAccounts from a hold. Returns a list of statuses in the same
 *  order as the request. If this request leaves the hold with no held
 *  accounts, the hold will not apply to any accounts.
 *
 *  @param object The @c GTLRVault_RemoveHeldAccountsRequest to include in the
 *    query.
 *  @param matterId The matter ID.
 *  @param holdId The hold ID.
 *
 *  @return GTLRVaultQuery_MattersHoldsRemoveHeldAccounts
 */
+ (instancetype)queryWithObject:(GTLRVault_RemoveHeldAccountsRequest *)object
                       matterId:(NSString *)matterId
                         holdId:(NSString *)holdId;

@end

/**
 *  Updates the OU and/or query parameters of a hold. You cannot add accounts
 *  to a hold that covers an OU, nor can you add OUs to a hold that covers
 *  individual accounts. Accounts listed in the hold will be ignored.
 *
 *  Method: vault.matters.holds.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersHoldsUpdate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersHoldsUpdateWithObject:matterId:holdId:]

/** The ID of the hold. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Hold.
 *
 *  Updates the OU and/or query parameters of a hold. You cannot add accounts
 *  to a hold that covers an OU, nor can you add OUs to a hold that covers
 *  individual accounts. Accounts listed in the hold will be ignored.
 *
 *  @param object The @c GTLRVault_Hold to include in the query.
 *  @param matterId The matter ID.
 *  @param holdId The ID of the hold.
 *
 *  @return GTLRVaultQuery_MattersHoldsUpdate
 */
+ (instancetype)queryWithObject:(GTLRVault_Hold *)object
                       matterId:(NSString *)matterId
                         holdId:(NSString *)holdId;

@end

/**
 *  Lists matters the user has access to.
 *
 *  Method: vault.matters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersList : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersList]

/**
 *  The number of matters to return in the response.
 *  Default and maximum are 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The pagination token as returned in the response. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  If set, list only matters with that specific state. The default is listing
 *  matters of all states.
 *
 *  Likely values:
 *    @arg @c kGTLRVaultStateStateUnspecified Value "STATE_UNSPECIFIED"
 *    @arg @c kGTLRVaultStateOpen Value "OPEN"
 *    @arg @c kGTLRVaultStateClosed Value "CLOSED"
 *    @arg @c kGTLRVaultStateDeleted Value "DELETED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Specifies which parts of the matter to return in response.
 *
 *  Likely values:
 *    @arg @c kGTLRVaultViewViewUnspecified Value "VIEW_UNSPECIFIED"
 *    @arg @c kGTLRVaultViewBasic Value "BASIC"
 *    @arg @c kGTLRVaultViewFull Value "FULL"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRVault_ListMattersResponse.
 *
 *  Lists matters the user has access to.
 *
 *  @return GTLRVaultQuery_MattersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Removes an account as a matter collaborator.
 *
 *  Method: vault.matters.removePermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersRemovePermissions : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersRemovePermissionsWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Empty.
 *
 *  Removes an account as a matter collaborator.
 *
 *  @param object The @c GTLRVault_RemoveMatterPermissionsRequest to include in
 *    the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersRemovePermissions
 */
+ (instancetype)queryWithObject:(GTLRVault_RemoveMatterPermissionsRequest *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Reopens the specified matter. Returns matter with updated state.
 *
 *  Method: vault.matters.reopen
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersReopen : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersReopenWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_ReopenMatterResponse.
 *
 *  Reopens the specified matter. Returns matter with updated state.
 *
 *  @param object The @c GTLRVault_ReopenMatterRequest to include in the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersReopen
 */
+ (instancetype)queryWithObject:(GTLRVault_ReopenMatterRequest *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Creates a saved query.
 *
 *  Method: vault.matters.savedQueries.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersSavedQueriesCreate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersSavedQueriesCreateWithObject:matterId:]

/**
 *  The matter id of the parent matter for which the saved query is to be
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_SavedQuery.
 *
 *  Creates a saved query.
 *
 *  @param object The @c GTLRVault_SavedQuery to include in the query.
 *  @param matterId The matter id of the parent matter for which the saved query
 *    is to be
 *    created.
 *
 *  @return GTLRVaultQuery_MattersSavedQueriesCreate
 */
+ (instancetype)queryWithObject:(GTLRVault_SavedQuery *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Deletes a saved query by Id.
 *
 *  Method: vault.matters.savedQueries.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersSavedQueriesDelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersSavedQueriesDeleteWithmatterId:savedQueryId:]

/**
 *  The matter id of the parent matter for which the saved query is to be
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/** Id of the saved query to be deleted. */
@property(nonatomic, copy, nullable) NSString *savedQueryId;

/**
 *  Fetches a @c GTLRVault_Empty.
 *
 *  Deletes a saved query by Id.
 *
 *  @param matterId The matter id of the parent matter for which the saved query
 *    is to be
 *    deleted.
 *  @param savedQueryId Id of the saved query to be deleted.
 *
 *  @return GTLRVaultQuery_MattersSavedQueriesDelete
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                     savedQueryId:(NSString *)savedQueryId;

@end

/**
 *  Retrieves a saved query by Id.
 *
 *  Method: vault.matters.savedQueries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersSavedQueriesGet : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersSavedQueriesGetWithmatterId:savedQueryId:]

/**
 *  The matter id of the parent matter for which the saved query is to be
 *  retrieved.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/** Id of the saved query to be retrieved. */
@property(nonatomic, copy, nullable) NSString *savedQueryId;

/**
 *  Fetches a @c GTLRVault_SavedQuery.
 *
 *  Retrieves a saved query by Id.
 *
 *  @param matterId The matter id of the parent matter for which the saved query
 *    is to be
 *    retrieved.
 *  @param savedQueryId Id of the saved query to be retrieved.
 *
 *  @return GTLRVaultQuery_MattersSavedQueriesGet
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId
                     savedQueryId:(NSString *)savedQueryId;

@end

/**
 *  Lists saved queries within a matter. An empty page token in
 *  ListSavedQueriesResponse denotes no more saved queries to list.
 *
 *  Method: vault.matters.savedQueries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 *    @c kGTLRAuthScopeVaultEdiscoveryReadonly
 */
@interface GTLRVaultQuery_MattersSavedQueriesList : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersSavedQueriesListWithmatterId:]

/**
 *  The matter id of the parent matter for which the saved queries are to be
 *  retrieved.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The maximum number of saved queries to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The pagination token as returned in the previous response.
 *  An empty token means start from the beginning.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRVault_ListSavedQueriesResponse.
 *
 *  Lists saved queries within a matter. An empty page token in
 *  ListSavedQueriesResponse denotes no more saved queries to list.
 *
 *  @param matterId The matter id of the parent matter for which the saved
 *    queries are to be
 *    retrieved.
 *
 *  @return GTLRVaultQuery_MattersSavedQueriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithMatterId:(NSString *)matterId;

@end

/**
 *  Undeletes the specified matter. Returns matter with updated state.
 *
 *  Method: vault.matters.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersUndelete : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersUndeleteWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Matter.
 *
 *  Undeletes the specified matter. Returns matter with updated state.
 *
 *  @param object The @c GTLRVault_UndeleteMatterRequest to include in the
 *    query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersUndelete
 */
+ (instancetype)queryWithObject:(GTLRVault_UndeleteMatterRequest *)object
                       matterId:(NSString *)matterId;

@end

/**
 *  Updates the specified matter.
 *  This updates only the name and description of the matter, identified by
 *  matter id. Changes to any other fields are ignored.
 *  Returns the default view of the matter.
 *
 *  Method: vault.matters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeVaultEdiscovery
 */
@interface GTLRVaultQuery_MattersUpdate : GTLRVaultQuery
// Previous library name was
//   +[GTLQueryVault queryForMattersUpdateWithObject:matterId:]

/** The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  Fetches a @c GTLRVault_Matter.
 *
 *  Updates the specified matter.
 *  This updates only the name and description of the matter, identified by
 *  matter id. Changes to any other fields are ignored.
 *  Returns the default view of the matter.
 *
 *  @param object The @c GTLRVault_Matter to include in the query.
 *  @param matterId The matter ID.
 *
 *  @return GTLRVaultQuery_MattersUpdate
 */
+ (instancetype)queryWithObject:(GTLRVault_Matter *)object
                       matterId:(NSString *)matterId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
