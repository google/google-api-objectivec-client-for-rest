// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   G Suite Vault API (vault/v1)
// Description:
//   Archiving and eDiscovery for G Suite.
// Documentation:
//   https://developers.google.com/vault

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVault_AccountInfo;
@class GTLRVault_AddHeldAccountResult;
@class GTLRVault_CloudStorageFile;
@class GTLRVault_CloudStorageSink;
@class GTLRVault_CorpusQuery;
@class GTLRVault_DriveExportOptions;
@class GTLRVault_DriveOptions;
@class GTLRVault_Export;
@class GTLRVault_ExportOptions;
@class GTLRVault_ExportStats;
@class GTLRVault_GroupsExportOptions;
@class GTLRVault_HangoutsChatExportOptions;
@class GTLRVault_HangoutsChatInfo;
@class GTLRVault_HangoutsChatOptions;
@class GTLRVault_HeldAccount;
@class GTLRVault_HeldDriveQuery;
@class GTLRVault_HeldGroupsQuery;
@class GTLRVault_HeldHangoutsChatQuery;
@class GTLRVault_HeldMailQuery;
@class GTLRVault_HeldOrgUnit;
@class GTLRVault_Hold;
@class GTLRVault_MailExportOptions;
@class GTLRVault_MailOptions;
@class GTLRVault_Matter;
@class GTLRVault_MatterPermission;
@class GTLRVault_OrgUnitInfo;
@class GTLRVault_Query;
@class GTLRVault_SavedQuery;
@class GTLRVault_Status;
@class GTLRVault_Status_Details_Item;
@class GTLRVault_TeamDriveInfo;
@class GTLRVault_UserInfo;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVault_Export.status

/**
 *  The export completed.
 *
 *  Value: "COMPLETED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Export_Status_Completed;
/**
 *  The status is unspecified.
 *
 *  Value: "EXPORT_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Export_Status_ExportStatusUnspecified;
/**
 *  The export failed.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Export_Status_Failed;
/**
 *  The export is still being executed.
 *
 *  Value: "IN_PROGRESS"
 */
GTLR_EXTERN NSString * const kGTLRVault_Export_Status_InProgress;

// ----------------------------------------------------------------------------
// GTLRVault_ExportOptions.region

/**
 *  Any region.
 *
 *  Value: "ANY"
 */
GTLR_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Any;
/**
 *  Europe region.
 *
 *  Value: "EUROPE"
 */
GTLR_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Europe;
/**
 *  The region is unspecified. Will be treated the same as ANY.
 *
 *  Value: "EXPORT_REGION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_ExportOptions_Region_ExportRegionUnspecified;
/**
 *  US region.
 *
 *  Value: "US"
 */
GTLR_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Us;

// ----------------------------------------------------------------------------
// GTLRVault_GroupsExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
GTLR_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
GTLR_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_HangoutsChatExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
GTLR_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
GTLR_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_Hold.corpus

/**
 *  No corpus specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_CorpusTypeUnspecified;
/**
 *  Drive.
 *
 *  Value: "DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Groups;
/**
 *  Hangouts Chat.
 *
 *  Value: "HANGOUTS_CHAT"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_HangoutsChat;
/**
 *  Mail.
 *
 *  Value: "MAIL"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Mail;

// ----------------------------------------------------------------------------
// GTLRVault_MailExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
GTLR_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
GTLR_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_Matter.state

/**
 *  This matter is closed.
 *
 *  Value: "CLOSED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Closed;
/**
 *  This matter is deleted.
 *
 *  Value: "DELETED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Deleted;
/**
 *  This matter is open.
 *
 *  Value: "OPEN"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Open;
/**
 *  The matter has no specified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_MatterPermission.role

/**
 *  A collaborator to the matter.
 *
 *  Value: "COLLABORATOR"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Collaborator;
/**
 *  The owner of the matter.
 *
 *  Value: "OWNER"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Owner;
/**
 *  No role assigned.
 *
 *  Value: "ROLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_RoleUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_Query.corpus

/**
 *  No corpus specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_Corpus_CorpusTypeUnspecified;
/**
 *  Drive.
 *
 *  Value: "DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_Corpus_Groups;
/**
 *  Hangouts Chat.
 *
 *  Value: "HANGOUTS_CHAT"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_Corpus_HangoutsChat;
/**
 *  Mail.
 *
 *  Value: "MAIL"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_Corpus_Mail;

// ----------------------------------------------------------------------------
// GTLRVault_Query.dataScope

/**
 *  All available data.
 *
 *  Value: "ALL_DATA"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_DataScope_AllData;
/**
 *  No data scope specified.
 *
 *  Value: "DATA_SCOPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_DataScope_DataScopeUnspecified;
/**
 *  Data on hold.
 *
 *  Value: "HELD_DATA"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_DataScope_HeldData;
/**
 *  Data not processed.
 *
 *  Value: "UNPROCESSED_DATA"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_DataScope_UnprocessedData;

// ----------------------------------------------------------------------------
// GTLRVault_Query.searchMethod

/**
 *  Will search all accounts provided in account_info.
 *
 *  Value: "ACCOUNT"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Account;
/**
 *  Will search for all accounts in the organization.
 *  No need to set account_info or org_unit_info.
 *
 *  Value: "ENTIRE_ORG"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_EntireOrg;
/**
 *  Will search all accounts in the OU specified in org_unit_info.
 *
 *  Value: "ORG_UNIT"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_OrgUnit;
/**
 *  Will search in the Room specified in
 *  hangout_chats_info. (read-only)
 *
 *  Value: "ROOM"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Room;
/**
 *  A search method must be specified. If a request does not specify a
 *  search method, it will be rejected.
 *
 *  Value: "SEARCH_METHOD_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SearchMethodUnspecified;
/**
 *  Will search for all accounts in the Team Drive specified in
 *  team_drive_info.
 *
 *  Value: "TEAM_DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRVault_Query_SearchMethod_TeamDrive;

/**
 *  Accounts to search
 */
@interface GTLRVault_AccountInfo : GTLRObject

/** A set of accounts to search. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  A status detailing the status of each account creation, and the
 *  HeldAccount, if successful.
 */
@interface GTLRVault_AddHeldAccountResult : GTLRObject

/** If present, this account was successfully created. */
@property(nonatomic, strong, nullable) GTLRVault_HeldAccount *account;

/** This represents the success status. If failed, check message. */
@property(nonatomic, strong, nullable) GTLRVault_Status *status;

@end


/**
 *  Add a list of accounts to a hold.
 */
@interface GTLRVault_AddHeldAccountsRequest : GTLRObject

/**
 *  Account ids to identify which accounts to add. Only account_ids or only
 *  emails should be specified, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

/**
 *  Emails to identify which accounts to add. Only emails or only account_ids
 *  should be specified, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  Response for batch create held accounts.
 */
@interface GTLRVault_AddHeldAccountsResponse : GTLRObject

/** The list of responses, in the same order as the batch request. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AddHeldAccountResult *> *responses;

@end


/**
 *  Add an account with the permission specified. The role cannot be owner.
 *  If an account already has a role in the matter, it will be
 *  overwritten.
 */
@interface GTLRVault_AddMatterPermissionsRequest : GTLRObject

/**
 *  Only relevant if send_emails is true.
 *  True to CC requestor in the email message.
 *  False to not CC requestor.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ccMe;

/** The MatterPermission to add. */
@property(nonatomic, strong, nullable) GTLRVault_MatterPermission *matterPermission;

/**
 *  True to send notification email to the added account.
 *  False to not send notification email.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sendEmails;

@end


/**
 *  Close a matter by ID.
 */
@interface GTLRVault_CloseMatterRequest : GTLRObject
@end


/**
 *  Response to a CloseMatterRequest.
 */
@interface GTLRVault_CloseMatterResponse : GTLRObject

/** The updated matter, with state CLOSED. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  An export file on cloud storage
 */
@interface GTLRVault_CloudStorageFile : GTLRObject

/**
 *  The cloud storage bucket name of this export file.
 *  Can be used in cloud storage JSON/XML API.
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

/** The md5 hash of the file. */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/**
 *  The cloud storage object name of this export file.
 *  Can be used in cloud storage JSON/XML API.
 */
@property(nonatomic, copy, nullable) NSString *objectName;

/**
 *  The size of the export file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

@end


/**
 *  Export sink for cloud storage files.
 */
@interface GTLRVault_CloudStorageSink : GTLRObject

/** Output only. The exported files on cloud storage. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_CloudStorageFile *> *files;

@end


/**
 *  Corpus specific queries.
 */
@interface GTLRVault_CorpusQuery : GTLRObject

/** Details pertaining to Drive holds. If set, corpus must be Drive. */
@property(nonatomic, strong, nullable) GTLRVault_HeldDriveQuery *driveQuery;

/** Details pertaining to Groups holds. If set, corpus must be Groups. */
@property(nonatomic, strong, nullable) GTLRVault_HeldGroupsQuery *groupsQuery;

/**
 *  Details pertaining to Hangouts Chat holds. If set, corpus must be
 *  Hangouts Chat.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldHangoutsChatQuery *hangoutsChatQuery;

/** Details pertaining to mail holds. If set, corpus must be mail. */
@property(nonatomic, strong, nullable) GTLRVault_HeldMailQuery *mailQuery;

@end


/**
 *  The options for Drive export.
 */
@interface GTLRVault_DriveExportOptions : GTLRObject

/**
 *  Set to true to include access level information for users
 *  with
 *  <a href="https://support.google.com/vault/answer/6099459#metadata">indirect
 *  access</a>
 *  to files.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeAccessInfo;

@end


/**
 *  Drive search advanced options
 */
@interface GTLRVault_DriveOptions : GTLRObject

/**
 *  Set to true to include Team Drive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDrives;

/**
 *  Search the versions of the Drive file
 *  as of the reference date. These timestamps are in GMT and
 *  rounded down to the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *versionDate;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRVault_Empty : GTLRObject
@end


/**
 *  An export
 */
@interface GTLRVault_Export : GTLRObject

/** Output only. Export sink for cloud storage files. */
@property(nonatomic, strong, nullable) GTLRVault_CloudStorageSink *cloudStorageSink;

/** Output only. The time when the export was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Advanced options of the export. */
@property(nonatomic, strong, nullable) GTLRVault_ExportOptions *exportOptions;

/**
 *  Output only. The generated export ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The export name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The search query being exported. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** Output only. The requester of the export. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *requester;

/** Output only. Export statistics. */
@property(nonatomic, strong, nullable) GTLRVault_ExportStats *stats;

/**
 *  Output only. The export status.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Export_Status_Completed The export completed. (Value:
 *        "COMPLETED")
 *    @arg @c kGTLRVault_Export_Status_ExportStatusUnspecified The status is
 *        unspecified. (Value: "EXPORT_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRVault_Export_Status_Failed The export failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRVault_Export_Status_InProgress The export is still being
 *        executed. (Value: "IN_PROGRESS")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Export advanced options
 */
@interface GTLRVault_ExportOptions : GTLRObject

/** Option available for Drive export. */
@property(nonatomic, strong, nullable) GTLRVault_DriveExportOptions *driveOptions;

/** Option available for groups export. */
@property(nonatomic, strong, nullable) GTLRVault_GroupsExportOptions *groupsOptions;

/** Option available for hangouts chat export. */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatExportOptions *hangoutsChatOptions;

/** Option available for mail export. */
@property(nonatomic, strong, nullable) GTLRVault_MailExportOptions *mailOptions;

/**
 *  The requested export location.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_ExportOptions_Region_Any Any region. (Value: "ANY")
 *    @arg @c kGTLRVault_ExportOptions_Region_Europe Europe region. (Value:
 *        "EUROPE")
 *    @arg @c kGTLRVault_ExportOptions_Region_ExportRegionUnspecified The region
 *        is unspecified. Will be treated the same as ANY. (Value:
 *        "EXPORT_REGION_UNSPECIFIED")
 *    @arg @c kGTLRVault_ExportOptions_Region_Us US region. (Value: "US")
 */
@property(nonatomic, copy, nullable) NSString *region;

@end


/**
 *  Stats of an export.
 */
@interface GTLRVault_ExportStats : GTLRObject

/**
 *  The number of documents already processed by the export.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportedArtifactCount;

/**
 *  The size of export in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeInBytes;

/**
 *  The number of documents to be exported.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalArtifactCount;

@end


/**
 *  The options for groups export.
 */
@interface GTLRVault_GroupsExportOptions : GTLRObject

/**
 *  The export format for groups export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Mbox MBOX as export
 *        format. (Value: "MBOX")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Pst PST as export
 *        format (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  The options for hangouts chat export.
 */
@interface GTLRVault_HangoutsChatExportOptions : GTLRObject

/**
 *  The export format for hangouts chat export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox MBOX as
 *        export format. (Value: "MBOX")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst PST as
 *        export format (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Accounts to search
 */
@interface GTLRVault_HangoutsChatInfo : GTLRObject

/** A set of rooms to search. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *roomId;

@end


/**
 *  Hangouts chat search advanced options
 */
@interface GTLRVault_HangoutsChatOptions : GTLRObject

/**
 *  Set to true to include rooms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  An account being held in a particular hold. This structure is immutable.
 *  This can be either a single user or a google group, depending on the corpus.
 */
@interface GTLRVault_HeldAccount : GTLRObject

/**
 *  The account's ID as provided by the
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** When the account was put on hold. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

@end


/**
 *  Query options for Drive holds.
 */
@interface GTLRVault_HeldDriveQuery : GTLRObject

/**
 *  If true, include files in Team Drives in the hold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDriveFiles;

@end


/**
 *  Query options for group holds.
 */
@interface GTLRVault_HeldGroupsQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  Query options for hangouts chat holds.
 */
@interface GTLRVault_HeldHangoutsChatQuery : GTLRObject

/**
 *  If true, include rooms the user has participated in.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  Query options for mail holds.
 */
@interface GTLRVault_HeldMailQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  A organizational unit being held in a particular hold.
 *  This structure is immutable.
 */
@interface GTLRVault_HeldOrgUnit : GTLRObject

/** When the org unit was put on hold. This property is immutable. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/** The org unit's immutable ID as provided by the Admin SDK. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Represents a hold within Vault. A hold restricts purging of
 *  artifacts based on the combination of the query and accounts restrictions.
 *  A hold can be configured to either apply to an explicitly configured set
 *  of accounts, or can be applied to all members of an organizational unit.
 */
@interface GTLRVault_Hold : GTLRObject

/**
 *  If set, the hold applies to the enumerated accounts and org_unit must be
 *  empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

/**
 *  The corpus to be searched.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Hold_Corpus_CorpusTypeUnspecified No corpus specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Hold_Corpus_Drive Drive. (Value: "DRIVE")
 *    @arg @c kGTLRVault_Hold_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Hold_Corpus_HangoutsChat Hangouts Chat. (Value:
 *        "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Hold_Corpus_Mail Mail. (Value: "MAIL")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/** The unique immutable ID of the hold. Assigned during creation. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The name of the hold. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, the hold applies to all members of the organizational unit and
 *  accounts must be empty. This property is mutable. For groups holds,
 *  set the accounts field.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldOrgUnit *orgUnit;

/**
 *  The corpus-specific query. If set, the corpusQuery must match corpus
 *  type.
 */
@property(nonatomic, strong, nullable) GTLRVault_CorpusQuery *query;

/** The last time this hold was modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "exports" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListExportsResponse : GTLRCollectionObject

/**
 *  The list of exports.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Export *> *exports;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Returns a list of held accounts for a hold.
 */
@interface GTLRVault_ListHeldAccountsResponse : GTLRObject

/** The held accounts on a hold. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "holds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListHoldsResponse : GTLRCollectionObject

/**
 *  The list of holds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Hold *> *holds;

/**
 *  Page token to retrieve the next page of results in the list.
 *  If this is empty, then there are no more holds to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Provides the list of matters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "matters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListMattersResponse : GTLRCollectionObject

/**
 *  List of matters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Matter *> *matters;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Definition of the response for method ListSaveQuery.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "savedQueries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListSavedQueriesResponse : GTLRCollectionObject

/**
 *  Page token to retrieve the next page of results in the list.
 *  If this is empty, then there are no more saved queries to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of output saved queries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_SavedQuery *> *savedQueries;

@end


/**
 *  The options for mail export.
 */
@interface GTLRVault_MailExportOptions : GTLRObject

/**
 *  The export file format.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Mbox MBOX as export
 *        format. (Value: "MBOX")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Pst PST as export format
 *        (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Mail search advanced options
 */
@interface GTLRVault_MailOptions : GTLRObject

/**
 *  Set to true to exclude drafts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeDrafts;

@end


/**
 *  Represents a matter.
 */
@interface GTLRVault_Matter : GTLRObject

/**
 *  The description of the matter.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The matter ID which is generated by the server.
 *  Should be blank when creating a new matter.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  List of users and access to the matter. Currently there is no programmer
 *  defined limit on the number of permissions a matter can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_MatterPermission *> *matterPermissions;

/** The name of the matter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The state of the matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Matter_State_Closed This matter is closed. (Value:
 *        "CLOSED")
 *    @arg @c kGTLRVault_Matter_State_Deleted This matter is deleted. (Value:
 *        "DELETED")
 *    @arg @c kGTLRVault_Matter_State_Open This matter is open. (Value: "OPEN")
 *    @arg @c kGTLRVault_Matter_State_StateUnspecified The matter has no
 *        specified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Currently each matter only has one owner, and all others are collaborators.
 *  When an account is purged, its corresponding MatterPermission resources
 *  cease to exist.
 */
@interface GTLRVault_MatterPermission : GTLRObject

/**
 *  The account id, as provided by
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The user's role in this matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MatterPermission_Role_Collaborator A collaborator to
 *        the matter. (Value: "COLLABORATOR")
 *    @arg @c kGTLRVault_MatterPermission_Role_Owner The owner of the matter.
 *        (Value: "OWNER")
 *    @arg @c kGTLRVault_MatterPermission_Role_RoleUnspecified No role assigned.
 *        (Value: "ROLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Org Unit to search
 */
@interface GTLRVault_OrgUnitInfo : GTLRObject

/**
 *  Org unit to search, as provided by the
 *  <a href="https://developers.google.com/admin-sdk/directory/">Admin SDK
 *  Directory API</a>.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  A query definition relevant for search & export.
 */
@interface GTLRVault_Query : GTLRObject

/**
 *  When 'ACCOUNT' is chosen as search method,
 *  account_info needs to be specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_AccountInfo *accountInfo;

/**
 *  The corpus to search.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_Corpus_CorpusTypeUnspecified No corpus specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_Corpus_Drive Drive. (Value: "DRIVE")
 *    @arg @c kGTLRVault_Query_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Query_Corpus_HangoutsChat Hangouts Chat. (Value:
 *        "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Query_Corpus_Mail Mail. (Value: "MAIL")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/**
 *  The data source to search from.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_DataScope_AllData All available data. (Value:
 *        "ALL_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_DataScopeUnspecified No data scope
 *        specified. (Value: "DATA_SCOPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_DataScope_HeldData Data on hold. (Value:
 *        "HELD_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_UnprocessedData Data not processed.
 *        (Value: "UNPROCESSED_DATA")
 */
@property(nonatomic, copy, nullable) NSString *dataScope;

/** For Drive search, specify more options in this field. */
@property(nonatomic, strong, nullable) GTLRVault_DriveOptions *driveOptions;

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  When 'ROOM' is chosen as search method, hangout_chats_info needs to be
 *  specified. (read-only)
 */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatInfo *hangoutsChatInfo;

/**
 *  For hangouts chat search, specify more options in this field. (read-only)
 */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatOptions *hangoutsChatOptions;

/** For mail search, specify more options in this field. */
@property(nonatomic, strong, nullable) GTLRVault_MailOptions *mailOptions;

/**
 *  When 'ORG_UNIT' is chosen as as search method, org_unit_info needs
 *  to be specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_OrgUnitInfo *orgUnitInfo;

/**
 *  The search method to use.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_SearchMethod_Account Will search all accounts
 *        provided in account_info. (Value: "ACCOUNT")
 *    @arg @c kGTLRVault_Query_SearchMethod_EntireOrg Will search for all
 *        accounts in the organization.
 *        No need to set account_info or org_unit_info. (Value: "ENTIRE_ORG")
 *    @arg @c kGTLRVault_Query_SearchMethod_OrgUnit Will search all accounts in
 *        the OU specified in org_unit_info. (Value: "ORG_UNIT")
 *    @arg @c kGTLRVault_Query_SearchMethod_Room Will search in the Room
 *        specified in
 *        hangout_chats_info. (read-only) (Value: "ROOM")
 *    @arg @c kGTLRVault_Query_SearchMethod_SearchMethodUnspecified A search
 *        method must be specified. If a request does not specify a
 *        search method, it will be rejected. (Value:
 *        "SEARCH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_SearchMethod_TeamDrive Will search for all
 *        accounts in the Team Drive specified in
 *        team_drive_info. (Value: "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *searchMethod;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  When 'TEAM_DRIVE' is chosen as search method, team_drive_info needs to be
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_TeamDriveInfo *teamDriveInfo;

/**
 *  The corpus-specific
 *  <a href="https://support.google.com/vault/answer/2474474">search
 *  operators</a>
 *  used to generate search results.
 */
@property(nonatomic, copy, nullable) NSString *terms;

/**
 *  The time zone name.
 *  It should be an IANA TZ name, such as "America/Los_Angeles".
 *  For more information, see
 *  <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Time
 *  Zone</a>.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

@end


/**
 *  Remove a list of accounts from a hold.
 */
@interface GTLRVault_RemoveHeldAccountsRequest : GTLRObject

/** Account ids to identify HeldAccounts to remove. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

@end


/**
 *  Response for batch delete held accounts.
 */
@interface GTLRVault_RemoveHeldAccountsResponse : GTLRObject

/**
 *  A list of statuses for deleted accounts. Results have the
 *  same order as the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status *> *statuses;

@end


/**
 *  Remove an account as a matter collaborator.
 */
@interface GTLRVault_RemoveMatterPermissionsRequest : GTLRObject

/** The account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

@end


/**
 *  Reopen a matter by ID.
 */
@interface GTLRVault_ReopenMatterRequest : GTLRObject
@end


/**
 *  Response to a ReopenMatterRequest.
 */
@interface GTLRVault_ReopenMatterResponse : GTLRObject

/** The updated matter, with state OPEN. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  Definition of the saved query.
 */
@interface GTLRVault_SavedQuery : GTLRObject

/**
 *  Output only. The server generated timestamp at which saved query was
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Name of the saved query. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The matter id of the associated matter.
 *  The server does not look at this field during create and always uses matter
 *  id in the URL.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  The underlying Query object which contains all the information of the saved
 *  query.
 */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** A unique identifier for the saved query. */
@property(nonatomic, copy, nullable) NSString *savedQueryId;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRVault_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRVault_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Status_Details_Item : GTLRObject
@end


/**
 *  Team Drives to search
 */
@interface GTLRVault_TeamDriveInfo : GTLRObject

/**
 *  List of Team Drive ids, as provided by
 *  <a 
 href="https://developers.google.com/drive">Drive API</a>.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *teamDriveIds;

@end


/**
 *  Undelete a matter by ID.
 */
@interface GTLRVault_UndeleteMatterRequest : GTLRObject
@end


/**
 *  User's information.
 */
@interface GTLRVault_UserInfo : GTLRObject

/** The displayed name of the user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The email address of the user. */
@property(nonatomic, copy, nullable) NSString *email;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
