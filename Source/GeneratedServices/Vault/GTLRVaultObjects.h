// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   G Suite Vault API (vault/v1)
// Description:
//   Archiving and eDiscovery for G Suite.
// Documentation:
//   https://developers.google.com/vault

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVault_AccountCount;
@class GTLRVault_AccountCountError;
@class GTLRVault_AccountInfo;
@class GTLRVault_AddHeldAccountResult;
@class GTLRVault_CloudStorageFile;
@class GTLRVault_CloudStorageSink;
@class GTLRVault_CorpusQuery;
@class GTLRVault_DriveExportOptions;
@class GTLRVault_DriveOptions;
@class GTLRVault_Export;
@class GTLRVault_ExportOptions;
@class GTLRVault_ExportStats;
@class GTLRVault_GroupsCountResult;
@class GTLRVault_GroupsExportOptions;
@class GTLRVault_HangoutsChatExportOptions;
@class GTLRVault_HangoutsChatInfo;
@class GTLRVault_HangoutsChatOptions;
@class GTLRVault_HeldAccount;
@class GTLRVault_HeldDriveQuery;
@class GTLRVault_HeldGroupsQuery;
@class GTLRVault_HeldHangoutsChatQuery;
@class GTLRVault_HeldMailQuery;
@class GTLRVault_HeldOrgUnit;
@class GTLRVault_HeldVoiceQuery;
@class GTLRVault_Hold;
@class GTLRVault_MailCountResult;
@class GTLRVault_MailExportOptions;
@class GTLRVault_MailOptions;
@class GTLRVault_Matter;
@class GTLRVault_MatterPermission;
@class GTLRVault_Operation;
@class GTLRVault_Operation_Metadata;
@class GTLRVault_Operation_Response;
@class GTLRVault_OrgUnitInfo;
@class GTLRVault_Query;
@class GTLRVault_SavedQuery;
@class GTLRVault_SharedDriveInfo;
@class GTLRVault_Status;
@class GTLRVault_Status_Details_Item;
@class GTLRVault_TeamDriveInfo;
@class GTLRVault_UserInfo;
@class GTLRVault_VoiceExportOptions;
@class GTLRVault_VoiceOptions;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVault_AccountCountError.errorType

/**
 *  Deadline exceeded when querying the account.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_DeadlineExceeded;
/**
 *  Default.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_ErrorTypeUnspecified;
/**
 *  Transient - data in transit between storage replicas, temporarily
 *  unavailable.
 *
 *  Value: "LOCATION_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_LocationUnavailable;
/**
 *  Permanent - query contains too many terms.
 *
 *  Value: "TOO_MANY_TERMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_TooManyTerms;
/**
 *  Unrecognized error.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_Unknown;
/**
 *  Permanent - prefix terms expanded to too many query terms.
 *
 *  Value: "WILDCARD_TOO_BROAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_AccountCountError_ErrorType_WildcardTooBroad;

// ----------------------------------------------------------------------------
// GTLRVault_CountArtifactsRequest.view

/**
 *  Response includes additional breakdown of account count.
 *
 *  Value: "ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_All;
/**
 *  Default. It works the same as TOTAL_COUNT.
 *
 *  Value: "COUNT_RESULT_VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_CountResultViewUnspecified;
/**
 *  Response includes: total count, queried accounts count, matching accounts
 *  count, non-queryable accounts, queried account errors.
 *
 *  Value: "TOTAL_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_CountArtifactsRequest_View_TotalCount;

// ----------------------------------------------------------------------------
// GTLRVault_Export.status

/**
 *  The export completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_Completed;
/**
 *  The status is unspecified.
 *
 *  Value: "EXPORT_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_ExportStatusUnspecified;
/**
 *  The export failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_Failed;
/**
 *  The export is still being executed.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Export_Status_InProgress;

// ----------------------------------------------------------------------------
// GTLRVault_ExportOptions.region

/**
 *  Any region.
 *
 *  Value: "ANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Any;
/**
 *  Europe region.
 *
 *  Value: "EUROPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Europe;
/**
 *  The region is unspecified. Will be treated the same as ANY.
 *
 *  Value: "EXPORT_REGION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_ExportRegionUnspecified;
/**
 *  US region.
 *
 *  Value: "US"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_ExportOptions_Region_Us;

// ----------------------------------------------------------------------------
// GTLRVault_GroupsExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_GroupsExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_HangoutsChatExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_HeldVoiceQuery.coveredData

/**
 *  Call logs will be covered.
 *
 *  Value: "CALL_LOGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_CallLogs;
/**
 *  Covered data unspecified.
 *
 *  Value: "COVERED_DATA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_CoveredDataUnspecified;
/**
 *  Voice text message will be covered.
 *
 *  Value: "TEXT_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_TextMessages;
/**
 *  Voicemail will be covered.
 *
 *  Value: "VOICEMAILS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_HeldVoiceQuery_CoveredData_Voicemails;

// ----------------------------------------------------------------------------
// GTLRVault_Hold.corpus

/**
 *  No corpus specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_CorpusTypeUnspecified;
/**
 *  Drive.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Groups;
/**
 *  Hangouts Chat.
 *
 *  Value: "HANGOUTS_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_HangoutsChat;
/**
 *  Mail.
 *
 *  Value: "MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Mail;
/**
 *  Google Voice.
 *
 *  Value: "VOICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Hold_Corpus_Voice;

// ----------------------------------------------------------------------------
// GTLRVault_MailExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MailExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_Matter.state

/**
 *  This matter is closed.
 *
 *  Value: "CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Closed;
/**
 *  This matter is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Deleted;
/**
 *  This matter is open.
 *
 *  Value: "OPEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_Open;
/**
 *  The matter has no specified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Matter_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_MatterPermission.role

/**
 *  A collaborator to the matter.
 *
 *  Value: "COLLABORATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Collaborator;
/**
 *  The owner of the matter.
 *
 *  Value: "OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Owner;
/**
 *  No role assigned.
 *
 *  Value: "ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_MatterPermission_Role_RoleUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_Query.corpus

/**
 *  No corpus specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_CorpusTypeUnspecified;
/**
 *  Drive.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Groups;
/**
 *  Hangouts Chat.
 *
 *  Value: "HANGOUTS_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_HangoutsChat;
/**
 *  Mail.
 *
 *  Value: "MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Mail;
/**
 *  Google Voice.
 *
 *  Value: "VOICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Corpus_Voice;

// ----------------------------------------------------------------------------
// GTLRVault_Query.dataScope

/**
 *  All available data.
 *
 *  Value: "ALL_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_AllData;
/**
 *  No data scope specified.
 *
 *  Value: "DATA_SCOPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_DataScopeUnspecified;
/**
 *  Data on hold.
 *
 *  Value: "HELD_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_HeldData;
/**
 *  Data not processed.
 *
 *  Value: "UNPROCESSED_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_DataScope_UnprocessedData;

// ----------------------------------------------------------------------------
// GTLRVault_Query.method

/**
 *  Will search all accounts provided in account_info.
 *
 *  Value: "ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_Account;
/**
 *  Will search for all accounts in the organization. No need to set
 *  account_info or org_unit_info. Not all CORPUS_TYPE support this scope.
 *  Supported by MAIL.
 *
 *  Value: "ENTIRE_ORG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_EntireOrg;
/**
 *  Will search all accounts in the OU specified in org_unit_info.
 *
 *  Value: "ORG_UNIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_OrgUnit;
/**
 *  Will search in the Room specified in hangout_chats_info. (read-only)
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_Room;
/**
 *  A search method must be specified. If a request does not specify a search
 *  method, it will be rejected.
 *
 *  Value: "SEARCH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_SearchMethodUnspecified;
/**
 *  Will search for all accounts in the shared drive specified in
 *  shared_drive_info.
 *
 *  Value: "SHARED_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_SharedDrive;
/**
 *  Will search for all accounts in the Team Drive specified in team_drive_info.
 *
 *  Value: "TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_Method_TeamDrive;

// ----------------------------------------------------------------------------
// GTLRVault_Query.searchMethod

/**
 *  Will search all accounts provided in account_info.
 *
 *  Value: "ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Account;
/**
 *  Will search for all accounts in the organization. No need to set
 *  account_info or org_unit_info. Not all CORPUS_TYPE support this scope.
 *  Supported by MAIL.
 *
 *  Value: "ENTIRE_ORG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_EntireOrg;
/**
 *  Will search all accounts in the OU specified in org_unit_info.
 *
 *  Value: "ORG_UNIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_OrgUnit;
/**
 *  Will search in the Room specified in hangout_chats_info. (read-only)
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_Room;
/**
 *  A search method must be specified. If a request does not specify a search
 *  method, it will be rejected.
 *
 *  Value: "SEARCH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SearchMethodUnspecified;
/**
 *  Will search for all accounts in the shared drive specified in
 *  shared_drive_info.
 *
 *  Value: "SHARED_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_SharedDrive;
/**
 *  Will search for all accounts in the Team Drive specified in team_drive_info.
 *
 *  Value: "TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_Query_SearchMethod_TeamDrive;

// ----------------------------------------------------------------------------
// GTLRVault_VoiceExportOptions.exportFormat

/**
 *  No export format specified.
 *
 *  Value: "EXPORT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_ExportFormatUnspecified;
/**
 *  MBOX as export format.
 *
 *  Value: "MBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_Mbox;
/**
 *  PST as export format
 *
 *  Value: "PST"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceExportOptions_ExportFormat_Pst;

// ----------------------------------------------------------------------------
// GTLRVault_VoiceOptions.coveredData

/**
 *  Call logs will be covered.
 *
 *  Value: "CALL_LOGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_CallLogs;
/**
 *  Covered data unspecified.
 *
 *  Value: "COVERED_DATA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_CoveredDataUnspecified;
/**
 *  Voice text message will be covered.
 *
 *  Value: "TEXT_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_TextMessages;
/**
 *  Voicemail will be covered.
 *
 *  Value: "VOICEMAILS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVault_VoiceOptions_CoveredData_Voicemails;

/**
 *  Count number for each account.
 */
@interface GTLRVault_AccountCount : GTLRObject

/** Account owner. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *account;

/**
 *  The number of artifacts found for this account.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

@end


/**
 *  An error that occurred when querying a specific account
 */
@interface GTLRVault_AccountCountError : GTLRObject

/** Account owner. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *account;

/**
 *  Account query error.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_DeadlineExceeded Deadline
 *        exceeded when querying the account. (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_ErrorTypeUnspecified
 *        Default. (Value: "ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_LocationUnavailable
 *        Transient - data in transit between storage replicas, temporarily
 *        unavailable. (Value: "LOCATION_UNAVAILABLE")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_TooManyTerms Permanent -
 *        query contains too many terms. (Value: "TOO_MANY_TERMS")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_Unknown Unrecognized error.
 *        (Value: "UNKNOWN")
 *    @arg @c kGTLRVault_AccountCountError_ErrorType_WildcardTooBroad Permanent
 *        - prefix terms expanded to too many query terms. (Value:
 *        "WILDCARD_TOO_BROAD")
 */
@property(nonatomic, copy, nullable) NSString *errorType;

@end


/**
 *  Accounts to search
 */
@interface GTLRVault_AccountInfo : GTLRObject

/** A set of accounts to search. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  A status detailing the status of each account creation, and the HeldAccount,
 *  if successful.
 */
@interface GTLRVault_AddHeldAccountResult : GTLRObject

/** If present, this account was successfully created. */
@property(nonatomic, strong, nullable) GTLRVault_HeldAccount *account;

/** This represents the success status. If failed, check message. */
@property(nonatomic, strong, nullable) GTLRVault_Status *status;

@end


/**
 *  Add a list of accounts to a hold.
 */
@interface GTLRVault_AddHeldAccountsRequest : GTLRObject

/**
 *  Account IDs to identify which accounts to add. Only account_ids or only
 *  emails should be specified, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

/**
 *  Emails to identify which accounts to add. Only emails or only account_ids
 *  should be specified, but not both.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  Response for batch create held accounts.
 */
@interface GTLRVault_AddHeldAccountsResponse : GTLRObject

/** The list of responses, in the same order as the batch request. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AddHeldAccountResult *> *responses;

@end


/**
 *  Add an account with the permission specified. The role cannot be owner. If
 *  an account already has a role in the matter, it will be overwritten.
 */
@interface GTLRVault_AddMatterPermissionsRequest : GTLRObject

/**
 *  Only relevant if send_emails is true. True to CC requestor in the email
 *  message. False to not CC requestor.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ccMe;

/** The MatterPermission to add. */
@property(nonatomic, strong, nullable) GTLRVault_MatterPermission *matterPermission;

/**
 *  True to send notification email to the added account. False to not send
 *  notification email.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sendEmails;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRVault_CancelOperationRequest : GTLRObject
@end


/**
 *  Close a matter by ID.
 */
@interface GTLRVault_CloseMatterRequest : GTLRObject
@end


/**
 *  Response to a CloseMatterRequest.
 */
@interface GTLRVault_CloseMatterResponse : GTLRObject

/** The updated matter, with state CLOSED. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  An export file on cloud storage
 */
@interface GTLRVault_CloudStorageFile : GTLRObject

/**
 *  The cloud storage bucket name of this export file. Can be used in cloud
 *  storage JSON/XML API, but not to list the bucket contents. Instead, you can
 *  get individual export files by object name.
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

/** The md5 hash of the file. */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/**
 *  The cloud storage object name of this export file. Can be used in cloud
 *  storage JSON/XML API.
 */
@property(nonatomic, copy, nullable) NSString *objectName;

/**
 *  The size of the export file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *size;

@end


/**
 *  Export sink for cloud storage files.
 */
@interface GTLRVault_CloudStorageSink : GTLRObject

/** Output only. The exported files on cloud storage. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_CloudStorageFile *> *files;

@end


/**
 *  Corpus specific queries.
 */
@interface GTLRVault_CorpusQuery : GTLRObject

/** Details pertaining to Drive holds. If set, corpus must be Drive. */
@property(nonatomic, strong, nullable) GTLRVault_HeldDriveQuery *driveQuery;

/** Details pertaining to Groups holds. If set, corpus must be Groups. */
@property(nonatomic, strong, nullable) GTLRVault_HeldGroupsQuery *groupsQuery;

/**
 *  Details pertaining to Hangouts Chat holds. If set, corpus must be Hangouts
 *  Chat.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldHangoutsChatQuery *hangoutsChatQuery;

/** Details pertaining to mail holds. If set, corpus must be mail. */
@property(nonatomic, strong, nullable) GTLRVault_HeldMailQuery *mailQuery;

/** Details pertaining to Voice holds. If set, corpus must be Voice. */
@property(nonatomic, strong, nullable) GTLRVault_HeldVoiceQuery *voiceQuery;

@end


/**
 *  Long running operation metadata for CountArtifacts.
 */
@interface GTLRVault_CountArtifactsMetadata : GTLRObject

/** End time of count operation. Available when operation is done. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The matter ID of the associated matter. */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The search query from the request. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** Creation time of count operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Count artifacts request.
 */
@interface GTLRVault_CountArtifactsRequest : GTLRObject

/** The search query. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/**
 *  Specifies the granularity of the count result returned in response.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_All Response includes
 *        additional breakdown of account count. (Value: "ALL")
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_CountResultViewUnspecified
 *        Default. It works the same as TOTAL_COUNT. (Value:
 *        "COUNT_RESULT_VIEW_UNSPECIFIED")
 *    @arg @c kGTLRVault_CountArtifactsRequest_View_TotalCount Response
 *        includes: total count, queried accounts count, matching accounts
 *        count, non-queryable accounts, queried account errors. (Value:
 *        "TOTAL_COUNT")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  Definition of the response for method CountArtifacts.
 */
@interface GTLRVault_CountArtifactsResponse : GTLRObject

/** Count metrics of Groups. */
@property(nonatomic, strong, nullable) GTLRVault_GroupsCountResult *groupsCountResult;

/** Count metrics of Mail. */
@property(nonatomic, strong, nullable) GTLRVault_MailCountResult *mailCountResult;

/**
 *  Total count of artifacts. For mail and groups, artifacts refers to messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

@end


/**
 *  The options for Drive export.
 */
@interface GTLRVault_DriveExportOptions : GTLRObject

/**
 *  Set to true to include access level information for users with indirect
 *  access to files.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeAccessInfo;

@end


/**
 *  Drive search advanced options
 */
@interface GTLRVault_DriveOptions : GTLRObject

/**
 *  Set to true to include shared drive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeSharedDrives;

/**
 *  Set to true to include Team Drive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDrives;

/**
 *  Search the versions of the Drive file as of the reference date. These
 *  timestamps are in GMT and rounded down to the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *versionDate;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRVault_Empty : GTLRObject
@end


/**
 *  An export
 */
@interface GTLRVault_Export : GTLRObject

/** Output only. Export sink for cloud storage files. */
@property(nonatomic, strong, nullable) GTLRVault_CloudStorageSink *cloudStorageSink;

/** Output only. The time when the export was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Advanced options of the export. */
@property(nonatomic, strong, nullable) GTLRVault_ExportOptions *exportOptions;

/**
 *  Output only. The generated export ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. The matter ID. */
@property(nonatomic, copy, nullable) NSString *matterId;

/** The export name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The search query being exported. */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** Output only. The requester of the export. */
@property(nonatomic, strong, nullable) GTLRVault_UserInfo *requester;

/** Output only. Export statistics. */
@property(nonatomic, strong, nullable) GTLRVault_ExportStats *stats;

/**
 *  Output only. The export status.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Export_Status_Completed The export completed. (Value:
 *        "COMPLETED")
 *    @arg @c kGTLRVault_Export_Status_ExportStatusUnspecified The status is
 *        unspecified. (Value: "EXPORT_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRVault_Export_Status_Failed The export failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRVault_Export_Status_InProgress The export is still being
 *        executed. (Value: "IN_PROGRESS")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  Export advanced options
 */
@interface GTLRVault_ExportOptions : GTLRObject

/** Option available for Drive export. */
@property(nonatomic, strong, nullable) GTLRVault_DriveExportOptions *driveOptions;

/** Option available for groups export. */
@property(nonatomic, strong, nullable) GTLRVault_GroupsExportOptions *groupsOptions;

/** Option available for hangouts chat export. */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatExportOptions *hangoutsChatOptions;

/** Option available for mail export. */
@property(nonatomic, strong, nullable) GTLRVault_MailExportOptions *mailOptions;

/**
 *  The requested export location.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_ExportOptions_Region_Any Any region. (Value: "ANY")
 *    @arg @c kGTLRVault_ExportOptions_Region_Europe Europe region. (Value:
 *        "EUROPE")
 *    @arg @c kGTLRVault_ExportOptions_Region_ExportRegionUnspecified The region
 *        is unspecified. Will be treated the same as ANY. (Value:
 *        "EXPORT_REGION_UNSPECIFIED")
 *    @arg @c kGTLRVault_ExportOptions_Region_Us US region. (Value: "US")
 */
@property(nonatomic, copy, nullable) NSString *region;

/** Option available for voice export. */
@property(nonatomic, strong, nullable) GTLRVault_VoiceExportOptions *voiceOptions;

@end


/**
 *  Stats of an export.
 */
@interface GTLRVault_ExportStats : GTLRObject

/**
 *  The number of documents already processed by the export.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportedArtifactCount;

/**
 *  The size of export in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeInBytes;

/**
 *  The number of documents to be exported.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalArtifactCount;

@end


/**
 *  Groups specific count metrics.
 */
@interface GTLRVault_GroupsCountResult : GTLRObject

/** Error occurred when querying these accounts. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCountError *> *accountCountErrors;

/** Subtotal count per matching account that have more than zero messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCount *> *accountCounts;

/**
 *  Total number of accounts that can be queried and have more than zero
 *  messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchingAccountsCount;

/**
 *  When data scope is HELD_DATA in the request Query, these accounts in the
 *  request are not queried because they are not on hold. For other data scope,
 *  this field is not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonQueryableAccounts;

/**
 *  Total number of accounts involved in this count operation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queriedAccountsCount;

@end


/**
 *  The options for groups export.
 */
@interface GTLRVault_GroupsExportOptions : GTLRObject

/**
 *  The export format for groups export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Mbox MBOX as export
 *        format. (Value: "MBOX")
 *    @arg @c kGTLRVault_GroupsExportOptions_ExportFormat_Pst PST as export
 *        format (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  The options for hangouts chat export.
 */
@interface GTLRVault_HangoutsChatExportOptions : GTLRObject

/**
 *  The export format for hangouts chat export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Mbox MBOX as
 *        export format. (Value: "MBOX")
 *    @arg @c kGTLRVault_HangoutsChatExportOptions_ExportFormat_Pst PST as
 *        export format (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Accounts to search
 */
@interface GTLRVault_HangoutsChatInfo : GTLRObject

/** A set of rooms to search. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *roomId;

@end


/**
 *  Hangouts chat search advanced options
 */
@interface GTLRVault_HangoutsChatOptions : GTLRObject

/**
 *  Set to true to include rooms.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  An account being held in a particular hold. This structure is immutable.
 *  This can be either a single user or a google group, depending on the corpus.
 */
@interface GTLRVault_HeldAccount : GTLRObject

/** The account's ID as provided by the Admin SDK. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The primary email address of the account. If used as an input, this takes
 *  precedence over account ID.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** Output only. The first name of the account holder. */
@property(nonatomic, copy, nullable) NSString *firstName;

/** Output only. When the account was put on hold. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/** Output only. The last name of the account holder. */
@property(nonatomic, copy, nullable) NSString *lastName;

@end


/**
 *  Query options for Drive holds.
 */
@interface GTLRVault_HeldDriveQuery : GTLRObject

/**
 *  If true, include files in shared drives in the hold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeSharedDriveFiles;

/**
 *  If true, include files in Team Drives in the hold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDriveFiles;

@end


/**
 *  Query options for group holds.
 */
@interface GTLRVault_HeldGroupsQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  Query options for hangouts chat holds.
 */
@interface GTLRVault_HeldHangoutsChatQuery : GTLRObject

/**
 *  If true, include rooms the user has participated in.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  Query options for mail holds.
 */
@interface GTLRVault_HeldMailQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  A organizational unit being held in a particular hold. This structure is
 *  immutable.
 */
@interface GTLRVault_HeldOrgUnit : GTLRObject

/** When the org unit was put on hold. This property is immutable. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/** The org unit's immutable ID as provided by the Admin SDK. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Query options for Voice holds.
 */
@interface GTLRVault_HeldVoiceQuery : GTLRObject

/**
 *  Data covered by this rule. Should be non-empty. Order does not matter and
 *  duplicates will be ignored.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *coveredData;

@end


/**
 *  Represents a hold within Vault. A hold restricts purging of artifacts based
 *  on the combination of the query and accounts restrictions. A hold can be
 *  configured to either apply to an explicitly configured set of accounts, or
 *  can be applied to all members of an organizational unit.
 */
@interface GTLRVault_Hold : GTLRObject

/**
 *  If set, the hold applies to the enumerated accounts and org_unit must be
 *  empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

/**
 *  The corpus to be searched.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Hold_Corpus_CorpusTypeUnspecified No corpus specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Hold_Corpus_Drive Drive. (Value: "DRIVE")
 *    @arg @c kGTLRVault_Hold_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Hold_Corpus_HangoutsChat Hangouts Chat. (Value:
 *        "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Hold_Corpus_Mail Mail. (Value: "MAIL")
 *    @arg @c kGTLRVault_Hold_Corpus_Voice Google Voice. (Value: "VOICE")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/** The unique immutable ID of the hold. Assigned during creation. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The name of the hold. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, the hold applies to all members of the organizational unit and
 *  accounts must be empty. This property is mutable. For groups holds, set the
 *  accounts field.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldOrgUnit *orgUnit;

/**
 *  The corpus-specific query. If set, the corpusQuery must match corpus type.
 */
@property(nonatomic, strong, nullable) GTLRVault_CorpusQuery *query;

/** The last time this hold was modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "exports" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListExportsResponse : GTLRCollectionObject

/**
 *  The list of exports.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Export *> *exports;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Returns a list of held accounts for a hold.
 */
@interface GTLRVault_ListHeldAccountsResponse : GTLRObject

/** The held accounts on a hold. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "holds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListHoldsResponse : GTLRCollectionObject

/**
 *  The list of holds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Hold *> *holds;

/**
 *  Page token to retrieve the next page of results in the list. If this is
 *  empty, then there are no more holds to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Provides the list of matters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "matters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListMattersResponse : GTLRCollectionObject

/**
 *  List of matters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Matter *> *matters;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Operation *> *operations;

@end


/**
 *  Definition of the response for method ListSaveQuery.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "savedQueries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListSavedQueriesResponse : GTLRCollectionObject

/**
 *  Page token to retrieve the next page of results in the list. If this is
 *  empty, then there are no more saved queries to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of output saved queries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_SavedQuery *> *savedQueries;

@end


/**
 *  Mail specific count metrics.
 */
@interface GTLRVault_MailCountResult : GTLRObject

/** Error occurred when querying these accounts. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCountError *> *accountCountErrors;

/** Subtotal count per matching account that have more than zero messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_AccountCount *> *accountCounts;

/**
 *  Total number of accounts that can be queried and have more than zero
 *  messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchingAccountsCount;

/**
 *  When data scope is HELD_DATA in the request Query, these accounts in the
 *  request are not queried because they are not on hold. For other data scope,
 *  this field is not set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonQueryableAccounts;

/**
 *  Total number of accounts involved in this count operation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queriedAccountsCount;

@end


/**
 *  The options for mail export.
 */
@interface GTLRVault_MailExportOptions : GTLRObject

/**
 *  The export file format.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Mbox MBOX as export
 *        format. (Value: "MBOX")
 *    @arg @c kGTLRVault_MailExportOptions_ExportFormat_Pst PST as export format
 *        (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

/**
 *  Set to true to export confidential mode content.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showConfidentialModeContent;

@end


/**
 *  Mail search advanced options
 */
@interface GTLRVault_MailOptions : GTLRObject

/**
 *  Set to true to exclude drafts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeDrafts;

@end


/**
 *  Represents a matter.
 */
@interface GTLRVault_Matter : GTLRObject

/**
 *  The description of the matter.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The matter ID which is generated by the server. Should be blank when
 *  creating a new matter.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  List of users and access to the matter. Currently there is no programmer
 *  defined limit on the number of permissions a matter can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_MatterPermission *> *matterPermissions;

/** The name of the matter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The state of the matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Matter_State_Closed This matter is closed. (Value:
 *        "CLOSED")
 *    @arg @c kGTLRVault_Matter_State_Deleted This matter is deleted. (Value:
 *        "DELETED")
 *    @arg @c kGTLRVault_Matter_State_Open This matter is open. (Value: "OPEN")
 *    @arg @c kGTLRVault_Matter_State_StateUnspecified The matter has no
 *        specified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Currently each matter only has one owner, and all others are collaborators.
 *  When an account is purged, its corresponding MatterPermission resources
 *  cease to exist.
 */
@interface GTLRVault_MatterPermission : GTLRObject

/** The account ID, as provided by Admin SDK. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The user's role in this matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MatterPermission_Role_Collaborator A collaborator to
 *        the matter. (Value: "COLLABORATOR")
 *    @arg @c kGTLRVault_MatterPermission_Role_Owner The owner of the matter.
 *        (Value: "OWNER")
 *    @arg @c kGTLRVault_MatterPermission_Role_RoleUnspecified No role assigned.
 *        (Value: "ROLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRVault_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRVault_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRVault_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRVault_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Operation_Response : GTLRObject
@end


/**
 *  Org Unit to search
 */
@interface GTLRVault_OrgUnitInfo : GTLRObject

/** Org unit to search, as provided by the Admin SDK Directory API. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  A query definition relevant for search & export.
 */
@interface GTLRVault_Query : GTLRObject

/**
 *  When 'ACCOUNT' is chosen as search method, account_info needs to be
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_AccountInfo *accountInfo;

/**
 *  The corpus to search.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_Corpus_CorpusTypeUnspecified No corpus specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_Corpus_Drive Drive. (Value: "DRIVE")
 *    @arg @c kGTLRVault_Query_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Query_Corpus_HangoutsChat Hangouts Chat. (Value:
 *        "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Query_Corpus_Mail Mail. (Value: "MAIL")
 *    @arg @c kGTLRVault_Query_Corpus_Voice Google Voice. (Value: "VOICE")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/**
 *  The data source to search from.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_DataScope_AllData All available data. (Value:
 *        "ALL_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_DataScopeUnspecified No data scope
 *        specified. (Value: "DATA_SCOPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_DataScope_HeldData Data on hold. (Value:
 *        "HELD_DATA")
 *    @arg @c kGTLRVault_Query_DataScope_UnprocessedData Data not processed.
 *        (Value: "UNPROCESSED_DATA")
 */
@property(nonatomic, copy, nullable) NSString *dataScope;

/** For Drive search, specify more options in this field. */
@property(nonatomic, strong, nullable) GTLRVault_DriveOptions *driveOptions;

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  When 'ROOM' is chosen as search method, hangout_chats_info needs to be
 *  specified. (read-only)
 */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatInfo *hangoutsChatInfo;

/**
 *  For hangouts chat search, specify more options in this field. (read-only)
 */
@property(nonatomic, strong, nullable) GTLRVault_HangoutsChatOptions *hangoutsChatOptions;

/** For mail search, specify more options in this field. */
@property(nonatomic, strong, nullable) GTLRVault_MailOptions *mailOptions;

/**
 *  The search method to use. This field is similar to the search_method field
 *  but is introduced to support shared drives. It supports all search method
 *  types. In case the search_method is TEAM_DRIVE the response of this field
 *  will be SHARED_DRIVE only.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_Method_Account Will search all accounts provided
 *        in account_info. (Value: "ACCOUNT")
 *    @arg @c kGTLRVault_Query_Method_EntireOrg Will search for all accounts in
 *        the organization. No need to set account_info or org_unit_info. Not
 *        all CORPUS_TYPE support this scope. Supported by MAIL. (Value:
 *        "ENTIRE_ORG")
 *    @arg @c kGTLRVault_Query_Method_OrgUnit Will search all accounts in the OU
 *        specified in org_unit_info. (Value: "ORG_UNIT")
 *    @arg @c kGTLRVault_Query_Method_Room Will search in the Room specified in
 *        hangout_chats_info. (read-only) (Value: "ROOM")
 *    @arg @c kGTLRVault_Query_Method_SearchMethodUnspecified A search method
 *        must be specified. If a request does not specify a search method, it
 *        will be rejected. (Value: "SEARCH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_Method_SharedDrive Will search for all accounts
 *        in the shared drive specified in shared_drive_info. (Value:
 *        "SHARED_DRIVE")
 *    @arg @c kGTLRVault_Query_Method_TeamDrive Will search for all accounts in
 *        the Team Drive specified in team_drive_info. (Value: "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  When 'ORG_UNIT' is chosen as as search method, org_unit_info needs to be
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_OrgUnitInfo *orgUnitInfo;

/**
 *  The search method to use.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Query_SearchMethod_Account Will search all accounts
 *        provided in account_info. (Value: "ACCOUNT")
 *    @arg @c kGTLRVault_Query_SearchMethod_EntireOrg Will search for all
 *        accounts in the organization. No need to set account_info or
 *        org_unit_info. Not all CORPUS_TYPE support this scope. Supported by
 *        MAIL. (Value: "ENTIRE_ORG")
 *    @arg @c kGTLRVault_Query_SearchMethod_OrgUnit Will search all accounts in
 *        the OU specified in org_unit_info. (Value: "ORG_UNIT")
 *    @arg @c kGTLRVault_Query_SearchMethod_Room Will search in the Room
 *        specified in hangout_chats_info. (read-only) (Value: "ROOM")
 *    @arg @c kGTLRVault_Query_SearchMethod_SearchMethodUnspecified A search
 *        method must be specified. If a request does not specify a search
 *        method, it will be rejected. (Value: "SEARCH_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRVault_Query_SearchMethod_SharedDrive Will search for all
 *        accounts in the shared drive specified in shared_drive_info. (Value:
 *        "SHARED_DRIVE")
 *    @arg @c kGTLRVault_Query_SearchMethod_TeamDrive Will search for all
 *        accounts in the Team Drive specified in team_drive_info. (Value:
 *        "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *searchMethod;

/**
 *  When 'SHARED_DRIVE' is chosen as search method, shared_drive_info needs to
 *  be specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_SharedDriveInfo *sharedDriveInfo;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  When 'TEAM_DRIVE' is chosen as search method, team_drive_info needs to be
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRVault_TeamDriveInfo *teamDriveInfo;

/** The corpus-specific search operators used to generate search results. */
@property(nonatomic, copy, nullable) NSString *terms;

/**
 *  The time zone name. It should be an IANA TZ name, such as
 *  "America/Los_Angeles". For more information, see Time Zone.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/** For voice search, specify more options in this field. */
@property(nonatomic, strong, nullable) GTLRVault_VoiceOptions *voiceOptions;

@end


/**
 *  Remove a list of accounts from a hold.
 */
@interface GTLRVault_RemoveHeldAccountsRequest : GTLRObject

/** Account IDs to identify HeldAccounts to remove. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *accountIds;

@end


/**
 *  Response for batch delete held accounts.
 */
@interface GTLRVault_RemoveHeldAccountsResponse : GTLRObject

/**
 *  A list of statuses for deleted accounts. Results have the same order as the
 *  request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status *> *statuses;

@end


/**
 *  Remove an account as a matter collaborator.
 */
@interface GTLRVault_RemoveMatterPermissionsRequest : GTLRObject

/** The account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

@end


/**
 *  Reopen a matter by ID.
 */
@interface GTLRVault_ReopenMatterRequest : GTLRObject
@end


/**
 *  Response to a ReopenMatterRequest.
 */
@interface GTLRVault_ReopenMatterResponse : GTLRObject

/** The updated matter, with state OPEN. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  Definition of the saved query.
 */
@interface GTLRVault_SavedQuery : GTLRObject

/**
 *  Output only. The server generated timestamp at which saved query was
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Name of the saved query. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The matter ID of the associated matter. The server does not
 *  look at this field during create and always uses matter id in the URL.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  The underlying Query object which contains all the information of the saved
 *  query.
 */
@property(nonatomic, strong, nullable) GTLRVault_Query *query;

/** A unique identifier for the saved query. */
@property(nonatomic, copy, nullable) NSString *savedQueryId;

@end


/**
 *  Shared drives to search
 */
@interface GTLRVault_SharedDriveInfo : GTLRObject

/** List of Shared drive IDs, as provided by Drive API. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sharedDriveIds;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRVault_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRVault_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVault_Status_Details_Item : GTLRObject
@end


/**
 *  Team Drives to search
 */
@interface GTLRVault_TeamDriveInfo : GTLRObject

/** List of Team Drive IDs, as provided by Drive API. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *teamDriveIds;

@end


/**
 *  Undelete a matter by ID.
 */
@interface GTLRVault_UndeleteMatterRequest : GTLRObject
@end


/**
 *  User's information.
 */
@interface GTLRVault_UserInfo : GTLRObject

/** The displayed name of the user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The email address of the user. */
@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  The options for voice export.
 */
@interface GTLRVault_VoiceExportOptions : GTLRObject

/**
 *  The export format for voice export.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_ExportFormatUnspecified
 *        No export format specified. (Value: "EXPORT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_Mbox MBOX as export
 *        format. (Value: "MBOX")
 *    @arg @c kGTLRVault_VoiceExportOptions_ExportFormat_Pst PST as export
 *        format (Value: "PST")
 */
@property(nonatomic, copy, nullable) NSString *exportFormat;

@end


/**
 *  Voice search options
 */
@interface GTLRVault_VoiceOptions : GTLRObject

/** Datatypes to search */
@property(nonatomic, strong, nullable) NSArray<NSString *> *coveredData;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
