// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   G Suite Vault API (vault/v1)
// Description:
//   Archiving and eDiscovery for G Suite.
// Documentation:
//   https://developers.google.com/vault

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVault_CorpusQuery;
@class GTLRVault_HeldAccount;
@class GTLRVault_HeldDriveQuery;
@class GTLRVault_HeldGroupsQuery;
@class GTLRVault_HeldHangoutsChatQuery;
@class GTLRVault_HeldMailQuery;
@class GTLRVault_HeldOrgUnit;
@class GTLRVault_Hold;
@class GTLRVault_Matter;
@class GTLRVault_MatterPermission;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVault_Hold.corpus

/**
 *  No corpus specified.
 *
 *  Value: "CORPUS_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_CorpusTypeUnspecified;
/**
 *  Drive.
 *
 *  Value: "DRIVE"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Drive;
/**
 *  Groups.
 *
 *  Value: "GROUPS"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Groups;
/**
 *  Hangouts Chat.
 *
 *  Value: "HANGOUTS_CHAT"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_HangoutsChat;
/**
 *  Mail.
 *
 *  Value: "MAIL"
 */
GTLR_EXTERN NSString * const kGTLRVault_Hold_Corpus_Mail;

// ----------------------------------------------------------------------------
// GTLRVault_Matter.state

/**
 *  This matter is closed.
 *
 *  Value: "CLOSED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Closed;
/**
 *  This matter is deleted.
 *
 *  Value: "DELETED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Deleted;
/**
 *  This matter is open.
 *
 *  Value: "OPEN"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_Open;
/**
 *  The matter has no specified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_Matter_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVault_MatterPermission.role

/**
 *  A collaborator to the matter.
 *
 *  Value: "COLLABORATOR"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Collaborator;
/**
 *  The owner of the matter.
 *
 *  Value: "OWNER"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_Owner;
/**
 *  No role assigned.
 *
 *  Value: "ROLE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRVault_MatterPermission_Role_RoleUnspecified;

/**
 *  Add an account with the permission specified. The role cannot be owner.
 *  If an account already has a role in the matter, it will be
 *  overwritten.
 */
@interface GTLRVault_AddMatterPermissionsRequest : GTLRObject

/**
 *  Only relevant if send_emails is true.
 *  True to CC requestor in the email message.
 *  False to not CC requestor.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ccMe;

/** The MatterPermission to add. */
@property(nonatomic, strong, nullable) GTLRVault_MatterPermission *matterPermission;

/**
 *  True to send notification email to the added account.
 *  False to not send notification email.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sendEmails;

@end


/**
 *  Close a matter by ID.
 */
@interface GTLRVault_CloseMatterRequest : GTLRObject
@end


/**
 *  Response to a CloseMatterRequest.
 */
@interface GTLRVault_CloseMatterResponse : GTLRObject

/** The updated matter, with state CLOSED. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  Corpus specific queries.
 */
@interface GTLRVault_CorpusQuery : GTLRObject

/** Details pertaining to Drive holds. If set, corpus must be Drive. */
@property(nonatomic, strong, nullable) GTLRVault_HeldDriveQuery *driveQuery;

/** Details pertaining to Groups holds. If set, corpus must be Groups. */
@property(nonatomic, strong, nullable) GTLRVault_HeldGroupsQuery *groupsQuery;

/**
 *  Details pertaining to Hangouts Chat holds. If set, corpus must be
 *  Hangouts Chat.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldHangoutsChatQuery *hangoutsChatQuery;

/** Details pertaining to mail holds. If set, corpus must be mail. */
@property(nonatomic, strong, nullable) GTLRVault_HeldMailQuery *mailQuery;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRVault_Empty : GTLRObject
@end


/**
 *  An account being held in a particular hold. This structure is immutable.
 *  This can be either a single user or a google group, depending on the corpus.
 */
@interface GTLRVault_HeldAccount : GTLRObject

/**
 *  The account's ID as provided by the
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** When the account was put on hold. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

@end


/**
 *  Query options for Drive holds.
 */
@interface GTLRVault_HeldDriveQuery : GTLRObject

/**
 *  If true, include files in Team Drives in the hold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeTeamDriveFiles;

@end


/**
 *  Query options for group holds.
 */
@interface GTLRVault_HeldGroupsQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  Query options for hangouts chat holds.
 */
@interface GTLRVault_HeldHangoutsChatQuery : GTLRObject

/**
 *  If true, include rooms the user has participated in.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRooms;

@end


/**
 *  Query options for mail holds.
 */
@interface GTLRVault_HeldMailQuery : GTLRObject

/**
 *  The end time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The start time range for the search query. These timestamps are in GMT and
 *  rounded down to the start of the given date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The search terms for the hold. */
@property(nonatomic, copy, nullable) NSString *terms;

@end


/**
 *  A organizational unit being held in a particular hold.
 *  This structure is immutable.
 */
@interface GTLRVault_HeldOrgUnit : GTLRObject

/** When the org unit was put on hold. This property is immutable. */
@property(nonatomic, strong, nullable) GTLRDateTime *holdTime;

/** The org unit's immutable ID as provided by the Admin SDK. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

@end


/**
 *  Represents a hold within Vault. A hold restricts purging of
 *  artifacts based on the combination of the query and accounts restrictions.
 *  A hold can be configured to either apply to an explicitly configured set
 *  of accounts, or can be applied to all members of an organizational unit.
 */
@interface GTLRVault_Hold : GTLRObject

/**
 *  If set, the hold applies to the enumerated accounts and org_unit must be
 *  empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

/**
 *  The corpus to be searched.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Hold_Corpus_CorpusTypeUnspecified No corpus specified.
 *        (Value: "CORPUS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRVault_Hold_Corpus_Drive Drive. (Value: "DRIVE")
 *    @arg @c kGTLRVault_Hold_Corpus_Groups Groups. (Value: "GROUPS")
 *    @arg @c kGTLRVault_Hold_Corpus_HangoutsChat Hangouts Chat. (Value:
 *        "HANGOUTS_CHAT")
 *    @arg @c kGTLRVault_Hold_Corpus_Mail Mail. (Value: "MAIL")
 */
@property(nonatomic, copy, nullable) NSString *corpus;

/** The unique immutable ID of the hold. Assigned during creation. */
@property(nonatomic, copy, nullable) NSString *holdId;

/** The name of the hold. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, the hold applies to all members of the organizational unit and
 *  accounts must be empty. This property is mutable. For groups holds,
 *  set the accounts field.
 */
@property(nonatomic, strong, nullable) GTLRVault_HeldOrgUnit *orgUnit;

/**
 *  The corpus-specific query. If set, the corpusQuery must match corpus
 *  type.
 */
@property(nonatomic, strong, nullable) GTLRVault_CorpusQuery *query;

/** The last time this hold was modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Returns a list of held accounts for a hold.
 */
@interface GTLRVault_ListHeldAccountsResponse : GTLRObject

/** The held accounts on a hold. */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_HeldAccount *> *accounts;

@end


/**
 *  The holds for a matter.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "holds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListHoldsResponse : GTLRCollectionObject

/**
 *  The list of holds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Hold *> *holds;

/**
 *  Page token to retrieve the next page of results in the list.
 *  If this is empty, then there are no more holds to list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Provides the list of matters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "matters" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVault_ListMattersResponse : GTLRCollectionObject

/**
 *  List of matters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_Matter *> *matters;

/** Page token to retrieve the next page of results in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Represents a matter.
 */
@interface GTLRVault_Matter : GTLRObject

/**
 *  The description of the matter.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The matter ID which is generated by the server.
 *  Should be blank when creating a new matter.
 */
@property(nonatomic, copy, nullable) NSString *matterId;

/**
 *  List of users and access to the matter. Currently there is no programmer
 *  defined limit on the number of permissions a matter can have.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVault_MatterPermission *> *matterPermissions;

/** The name of the matter. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The state of the matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_Matter_State_Closed This matter is closed. (Value:
 *        "CLOSED")
 *    @arg @c kGTLRVault_Matter_State_Deleted This matter is deleted. (Value:
 *        "DELETED")
 *    @arg @c kGTLRVault_Matter_State_Open This matter is open. (Value: "OPEN")
 *    @arg @c kGTLRVault_Matter_State_StateUnspecified The matter has no
 *        specified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Currently each matter only has one owner, and all others are collaborators.
 *  When an account is purged, its corresponding MatterPermission resources
 *  cease to exist.
 */
@interface GTLRVault_MatterPermission : GTLRObject

/**
 *  The account id, as provided by
 *  <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The user's role in this matter.
 *
 *  Likely values:
 *    @arg @c kGTLRVault_MatterPermission_Role_Collaborator A collaborator to
 *        the matter. (Value: "COLLABORATOR")
 *    @arg @c kGTLRVault_MatterPermission_Role_Owner The owner of the matter.
 *        (Value: "OWNER")
 *    @arg @c kGTLRVault_MatterPermission_Role_RoleUnspecified No role assigned.
 *        (Value: "ROLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Remove an account as a matter collaborator.
 */
@interface GTLRVault_RemoveMatterPermissionsRequest : GTLRObject

/** The account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

@end


/**
 *  Reopen a matter by ID.
 */
@interface GTLRVault_ReopenMatterRequest : GTLRObject
@end


/**
 *  Response to a ReopenMatterRequest.
 */
@interface GTLRVault_ReopenMatterResponse : GTLRObject

/** The updated matter, with state OPEN. */
@property(nonatomic, strong, nullable) GTLRVault_Matter *matter;

@end


/**
 *  Undelete a matter by ID.
 */
@interface GTLRVault_UndeleteMatterRequest : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
