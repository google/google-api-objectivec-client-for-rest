// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Translation API (translate/v3)
// Description:
//   Integrates text translation into your website or application.
// Documentation:
//   https://cloud.google.com/translate/docs/quickstarts

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTranslate_BatchTranslateTextRequest;
@class GTLRTranslate_CancelOperationRequest;
@class GTLRTranslate_DetectLanguageRequest;
@class GTLRTranslate_Glossary;
@class GTLRTranslate_TextRequest;
@class GTLRTranslate_WaitOperationRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Translate query classes.
 */
@interface GTLRTranslateQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Detects the language of text within a request.
 *
 *  Method: translate.projects.detectLanguage
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsDetectLanguage : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsDetectLanguageWithObject:parent:]

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}/locations/{location-id}`
 *  or `projects/{project-number-or-id}`. For global calls, use
 *  `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Only models within the same region (has
 *  same location-id) can be used. Otherwise an INVALID_ARGUMENT (400) error is
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_DetectLanguageResponse.
 *
 *  Detects the language of text within a request.
 *
 *  @param object The @c GTLRTranslate_DetectLanguageRequest to include in the
 *    query.
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format:
 *    `projects/{project-number-or-id}/locations/{location-id}` or
 *    `projects/{project-number-or-id}`. For global calls, use
 *    `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Only models within the same region (has
 *    same location-id) can be used. Otherwise an INVALID_ARGUMENT (400) error
 *    is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsDetectLanguage
 */
+ (instancetype)queryWithObject:(GTLRTranslate_DetectLanguageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Returns a list of supported languages for translation.
 *
 *  Method: translate.projects.getSupportedLanguages
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsGetSupportedLanguages : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsGetSupportedLanguagesWithparent:]

/**
 *  Optional. The language to use to return localized, human readable names of
 *  supported languages. If missing, then display names are not returned in a
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *displayLanguageCode;

/**
 *  Optional. Get supported languages of this model. The format depends on model
 *  type: - AutoML Translation models:
 *  `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`
 *  - General (built-in) models:
 *  `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,
 *  `projects/{project-number-or-id}/locations/{location-id}/models/general/base`
 *  Returns languages supported by the specified model. If missing, we get
 *  supported languages of Google general base (PBMT) model.
 */
@property(nonatomic, copy, nullable) NSString *model;

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}` or
 *  `projects/{project-number-or-id}/locations/{location-id}`. For global calls,
 *  use `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Non-global location is required for
 *  AutoML models. Only models within the same region (have same location-id)
 *  can be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_SupportedLanguages.
 *
 *  Returns a list of supported languages for translation.
 *
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format: `projects/{project-number-or-id}` or
 *    `projects/{project-number-or-id}/locations/{location-id}`. For global
 *    calls, use `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Non-global location is required for
 *    AutoML models. Only models within the same region (have same location-id)
 *    can be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsGetSupportedLanguages
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Translates a large volume of text in asynchronous batch mode. This function
 *  provides real-time output as the inputs are being processed. If caller
 *  cancels a request, the partial results (for an input file, it's all or
 *  nothing) may still be available on the specified output location. This call
 *  returns immediately and you can use google.longrunning.Operation.name to
 *  poll the status of the call.
 *
 *  Method: translate.projects.locations.batchTranslateText
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 */
@interface GTLRTranslateQuery_ProjectsLocationsBatchTranslateText : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsBatchTranslateTextWithObject:parent:]

/**
 *  Required. Location to make a call. Must refer to a caller's project. Format:
 *  `projects/{project-number-or-id}/locations/{location-id}`. The `global`
 *  location is not supported for batch translation. Only AutoML Translation
 *  models or glossaries within the same region (have the same location-id) can
 *  be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_Operation.
 *
 *  Translates a large volume of text in asynchronous batch mode. This function
 *  provides real-time output as the inputs are being processed. If caller
 *  cancels a request, the partial results (for an input file, it's all or
 *  nothing) may still be available on the specified output location. This call
 *  returns immediately and you can use google.longrunning.Operation.name to
 *  poll the status of the call.
 *
 *  @param object The @c GTLRTranslate_BatchTranslateTextRequest to include in
 *    the query.
 *  @param parent Required. Location to make a call. Must refer to a caller's
 *    project. Format:
 *    `projects/{project-number-or-id}/locations/{location-id}`. The `global`
 *    location is not supported for batch translation. Only AutoML Translation
 *    models or glossaries within the same region (have the same location-id)
 *    can be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsBatchTranslateText
 */
+ (instancetype)queryWithObject:(GTLRTranslate_BatchTranslateTextRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Detects the language of text within a request.
 *
 *  Method: translate.projects.locations.detectLanguage
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsDetectLanguage : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsDetectLanguageWithObject:parent:]

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}/locations/{location-id}`
 *  or `projects/{project-number-or-id}`. For global calls, use
 *  `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Only models within the same region (has
 *  same location-id) can be used. Otherwise an INVALID_ARGUMENT (400) error is
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_DetectLanguageResponse.
 *
 *  Detects the language of text within a request.
 *
 *  @param object The @c GTLRTranslate_DetectLanguageRequest to include in the
 *    query.
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format:
 *    `projects/{project-number-or-id}/locations/{location-id}` or
 *    `projects/{project-number-or-id}`. For global calls, use
 *    `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Only models within the same region (has
 *    same location-id) can be used. Otherwise an INVALID_ARGUMENT (400) error
 *    is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsDetectLanguage
 */
+ (instancetype)queryWithObject:(GTLRTranslate_DetectLanguageRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets information about a location.
 *
 *  Method: translate.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsGet : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a list of supported languages for translation.
 *
 *  Method: translate.projects.locations.getSupportedLanguages
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsGetSupportedLanguages : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGetSupportedLanguagesWithparent:]

/**
 *  Optional. The language to use to return localized, human readable names of
 *  supported languages. If missing, then display names are not returned in a
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *displayLanguageCode;

/**
 *  Optional. Get supported languages of this model. The format depends on model
 *  type: - AutoML Translation models:
 *  `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`
 *  - General (built-in) models:
 *  `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,
 *  `projects/{project-number-or-id}/locations/{location-id}/models/general/base`
 *  Returns languages supported by the specified model. If missing, we get
 *  supported languages of Google general base (PBMT) model.
 */
@property(nonatomic, copy, nullable) NSString *model;

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}` or
 *  `projects/{project-number-or-id}/locations/{location-id}`. For global calls,
 *  use `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Non-global location is required for
 *  AutoML models. Only models within the same region (have same location-id)
 *  can be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_SupportedLanguages.
 *
 *  Returns a list of supported languages for translation.
 *
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format: `projects/{project-number-or-id}` or
 *    `projects/{project-number-or-id}/locations/{location-id}`. For global
 *    calls, use `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Non-global location is required for
 *    AutoML models. Only models within the same region (have same location-id)
 *    can be used, otherwise an INVALID_ARGUMENT (400) error is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGetSupportedLanguages
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a glossary and returns the long-running operation. Returns
 *  NOT_FOUND, if the project doesn't exist.
 *
 *  Method: translate.projects.locations.glossaries.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 */
@interface GTLRTranslateQuery_ProjectsLocationsGlossariesCreate : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGlossariesCreateWithObject:parent:]

/** Required. The project name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_Operation.
 *
 *  Creates a glossary and returns the long-running operation. Returns
 *  NOT_FOUND, if the project doesn't exist.
 *
 *  @param object The @c GTLRTranslate_Glossary to include in the query.
 *  @param parent Required. The project name.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGlossariesCreate
 */
+ (instancetype)queryWithObject:(GTLRTranslate_Glossary *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a glossary, or cancels glossary construction if the glossary isn't
 *  created yet. Returns NOT_FOUND, if the glossary doesn't exist.
 *
 *  Method: translate.projects.locations.glossaries.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsGlossariesDelete : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGlossariesDeleteWithname:]

/** Required. The name of the glossary to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Operation.
 *
 *  Deletes a glossary, or cancels glossary construction if the glossary isn't
 *  created yet. Returns NOT_FOUND, if the glossary doesn't exist.
 *
 *  @param name Required. The name of the glossary to delete.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGlossariesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
 *
 *  Method: translate.projects.locations.glossaries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsGlossariesGet : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGlossariesGetWithname:]

/** Required. The name of the glossary to retrieve. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Glossary.
 *
 *  Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
 *
 *  @param name Required. The name of the glossary to retrieve.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGlossariesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
 *  exist.
 *
 *  Method: translate.projects.locations.glossaries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsGlossariesList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsGlossariesListWithparent:]

/**
 *  Optional. Filter specifying constraints of a list operation. Specify the
 *  constraint by the format of "key=value", where key must be "src" or "tgt",
 *  and the value must be a valid language code. For multiple restrictions,
 *  concatenate them by "AND" (uppercase only), such as: "src=en-US AND
 *  tgt=zh-CN". Notice that the exact match is used here, which means using
 *  'en-US' and 'en' can lead to different results, which depends on the
 *  language code you used when you create the glossary. For the unidirectional
 *  glossaries, the "src" and "tgt" add restrictions on the source and target
 *  language code separately. For the equivalent term set glossaries, the "src"
 *  and/or "tgt" add restrictions on the term set. For example: "src=en-US AND
 *  tgt=zh-CN" will only pick the unidirectional glossaries which exactly match
 *  the source language code as "en-US" and the target language code "zh-CN",
 *  but all equivalent term set glossaries which contain "en-US" and "zh-CN" in
 *  their language set will be picked. If missing, no filtering is performed.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Requested page size. The server may return fewer glossaries than
 *  requested. If unspecified, the server picks an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 *  Typically, this is the value of [ListGlossariesResponse.next_page_token]
 *  returned from the previous call to `ListGlossaries` method. The first page
 *  is returned if `page_token`is empty or missing.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project from which to list all of the glossaries.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_ListGlossariesResponse.
 *
 *  Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
 *  exist.
 *
 *  @param parent Required. The name of the project from which to list all of
 *    the glossaries.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsGlossariesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: translate.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsListWithname:]

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like "displayName=tokyo", and is documented in more
 *  detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service will select
 *  a default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRTranslate_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: translate.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsOperationsCancel : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsOperationsCancelWithObject:name:]

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRTranslate_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRTranslate_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: translate.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsOperationsDelete : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsOperationsDeleteWithname:]

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: translate.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsOperationsGet : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: translate.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsOperationsList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRTranslate_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Waits until the specified long-running operation is done or reaches at most
 *  a specified timeout, returning the latest state. If the operation is already
 *  done, the latest state is immediately returned. If the timeout specified is
 *  greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If
 *  the server does not support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort
 *  basis. It may return the latest state before the specified timeout
 *  (including immediately), meaning even an immediate response is no guarantee
 *  that the operation is done.
 *
 *  Method: translate.projects.locations.operations.wait
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsOperationsWait : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsOperationsWaitWithObject:name:]

/** The name of the operation resource to wait on. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRTranslate_Operation.
 *
 *  Waits until the specified long-running operation is done or reaches at most
 *  a specified timeout, returning the latest state. If the operation is already
 *  done, the latest state is immediately returned. If the timeout specified is
 *  greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If
 *  the server does not support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort
 *  basis. It may return the latest state before the specified timeout
 *  (including immediately), meaning even an immediate response is no guarantee
 *  that the operation is done.
 *
 *  @param object The @c GTLRTranslate_WaitOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to wait on.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsOperationsWait
 */
+ (instancetype)queryWithObject:(GTLRTranslate_WaitOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Translates input text and returns translated text.
 *
 *  Method: translate.projects.locations.translateText
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsLocationsTranslateText : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsLocationsTranslateTextWithObject:parent:]

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}` or
 *  `projects/{project-number-or-id}/locations/{location-id}`. For global calls,
 *  use `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Non-global location is required for
 *  requests using AutoML models or custom glossaries. Models and glossaries
 *  must be within the same region (have same location-id), otherwise an
 *  INVALID_ARGUMENT (400) error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_TextResponse.
 *
 *  Translates input text and returns translated text.
 *
 *  @param object The @c GTLRTranslate_TextRequest to include in the query.
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format: `projects/{project-number-or-id}` or
 *    `projects/{project-number-or-id}/locations/{location-id}`. For global
 *    calls, use `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Non-global location is required for
 *    requests using AutoML models or custom glossaries. Models and glossaries
 *    must be within the same region (have same location-id), otherwise an
 *    INVALID_ARGUMENT (400) error is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsLocationsTranslateText
 */
+ (instancetype)queryWithObject:(GTLRTranslate_TextRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Translates input text and returns translated text.
 *
 *  Method: translate.projects.translateText
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeTranslateCloudPlatform
 *    @c kGTLRAuthScopeTranslateCloudTranslation
 */
@interface GTLRTranslateQuery_ProjectsTranslateText : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForProjectsTranslateTextWithObject:parent:]

/**
 *  Required. Project or location to make a call. Must refer to a caller's
 *  project. Format: `projects/{project-number-or-id}` or
 *  `projects/{project-number-or-id}/locations/{location-id}`. For global calls,
 *  use `projects/{project-number-or-id}/locations/global` or
 *  `projects/{project-number-or-id}`. Non-global location is required for
 *  requests using AutoML models or custom glossaries. Models and glossaries
 *  must be within the same region (have same location-id), otherwise an
 *  INVALID_ARGUMENT (400) error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRTranslate_TextResponse.
 *
 *  Translates input text and returns translated text.
 *
 *  @param object The @c GTLRTranslate_TextRequest to include in the query.
 *  @param parent Required. Project or location to make a call. Must refer to a
 *    caller's project. Format: `projects/{project-number-or-id}` or
 *    `projects/{project-number-or-id}/locations/{location-id}`. For global
 *    calls, use `projects/{project-number-or-id}/locations/global` or
 *    `projects/{project-number-or-id}`. Non-global location is required for
 *    requests using AutoML models or custom glossaries. Models and glossaries
 *    must be within the same region (have same location-id), otherwise an
 *    INVALID_ARGUMENT (400) error is returned.
 *
 *  @return GTLRTranslateQuery_ProjectsTranslateText
 */
+ (instancetype)queryWithObject:(GTLRTranslate_TextRequest *)object
                         parent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
