// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Analytics API (analytics/v3)
// Description:
//   Views and manages your Google Analytics data.
// Documentation:
//   https://developers.google.com/analytics/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAnalytics_AccountTicket;
@class GTLRAnalytics_AccountTreeRequest;
@class GTLRAnalytics_CustomDimension;
@class GTLRAnalytics_CustomMetric;
@class GTLRAnalytics_DataimportDeleteUploadDataRequest;
@class GTLRAnalytics_EntityAdWordsLink;
@class GTLRAnalytics_EntityUserLink;
@class GTLRAnalytics_Experiment;
@class GTLRAnalytics_Filter;
@class GTLRAnalytics_Goal;
@class GTLRAnalytics_HashClientIdRequest;
@class GTLRAnalytics_Profile;
@class GTLRAnalytics_ProfileFilterLink;
@class GTLRAnalytics_RemarketingAudience;
@class GTLRAnalytics_UnsampledReport;
@class GTLRAnalytics_UserDeletionRequest;
@class GTLRAnalytics_Webproperty;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// output

/**
 *  Returns the response in Google Charts Data Table format. This is useful in
 *  creating visualization using Google Charts.
 *
 *  Value: "dataTable"
 */
GTLR_EXTERN NSString * const kGTLRAnalyticsOutputDataTable;
/**
 *  Returns the response in standard JSON format.
 *
 *  Value: "json"
 */
GTLR_EXTERN NSString * const kGTLRAnalyticsOutputJson;

// ----------------------------------------------------------------------------
// samplingLevel

/**
 *  Returns response with a sample size that balances speed and accuracy.
 *
 *  Value: "DEFAULT"
 */
GTLR_EXTERN NSString * const kGTLRAnalyticsSamplingLevelDefault;
/**
 *  Returns a fast response with a smaller sample size.
 *
 *  Value: "FASTER"
 */
GTLR_EXTERN NSString * const kGTLRAnalyticsSamplingLevelFaster;
/**
 *  Returns a more accurate response using a large sample size, but this may
 *  result in the response being slower.
 *
 *  Value: "HIGHER_PRECISION"
 */
GTLR_EXTERN NSString * const kGTLRAnalyticsSamplingLevelHigherPrecision;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Analytics query classes.
 */
@interface GTLRAnalyticsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns Analytics data for a view (profile).
 *
 *  Method: analytics.data.ga.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_DataGaGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForDataGaGetWithids:startDate:endDate:metrics:]

/**
 *  A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.
 */
@property(nonatomic, copy, nullable) NSString *dimensions;

/**
 *  End date for fetching Analytics data. Request can should specify an end date
 *  formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or
 *  7daysAgo). The default value is yesterday.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  A comma-separated list of dimension or metric filters to be applied to
 *  Analytics data.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Unique table ID for retrieving Analytics data. Table ID is of the form
 *  ga:XXXX, where XXXX is the Analytics view (profile) ID.
 */
@property(nonatomic, copy, nullable) NSString *ids;

/**
 *  The response will include empty rows if this parameter is set to true, the
 *  default is true
 */
@property(nonatomic, assign) BOOL includeEmptyRows;

/** The maximum number of entries to include in this feed. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A comma-separated list of Analytics metrics. E.g.,
 *  'ga:sessions,ga:pageviews'. At least one metric must be specified.
 */
@property(nonatomic, copy, nullable) NSString *metrics;

/**
 *  The selected format for the response. Default format is JSON.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsOutputDataTable Returns the response in Google
 *        Charts Data Table format. This is useful in creating visualization
 *        using Google Charts. (Value: "dataTable")
 *    @arg @c kGTLRAnalyticsOutputJson Returns the response in standard JSON
 *        format. (Value: "json")
 */
@property(nonatomic, copy, nullable) NSString *output;

/**
 *  The desired sampling level.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsSamplingLevelDefault Returns response with a sample
 *        size that balances speed and accuracy. (Value: "DEFAULT")
 *    @arg @c kGTLRAnalyticsSamplingLevelFaster Returns a fast response with a
 *        smaller sample size. (Value: "FASTER")
 *    @arg @c kGTLRAnalyticsSamplingLevelHigherPrecision Returns a more accurate
 *        response using a large sample size, but this may result in the
 *        response being slower. (Value: "HIGHER_PRECISION")
 */
@property(nonatomic, copy, nullable) NSString *samplingLevel;

/** An Analytics segment to be applied to data. */
@property(nonatomic, copy, nullable) NSString *segment;

/**
 *  A comma-separated list of dimensions or metrics that determine the sort
 *  order for Analytics data.
 */
@property(nonatomic, copy, nullable) NSString *sort;

/**
 *  Start date for fetching Analytics data. Requests can specify a start date
 *  formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or
 *  7daysAgo). The default value is 7daysAgo.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_GaData.
 *
 *  Returns Analytics data for a view (profile).
 *
 *  @param ids Unique table ID for retrieving Analytics data. Table ID is of the
 *    form ga:XXXX, where XXXX is the Analytics view (profile) ID.
 *  @param startDate Start date for fetching Analytics data. Requests can
 *    specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
 *    today, yesterday, or 7daysAgo). The default value is 7daysAgo.
 *  @param endDate End date for fetching Analytics data. Request can should
 *    specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g.,
 *    today, yesterday, or 7daysAgo). The default value is yesterday.
 *  @param metrics A comma-separated list of Analytics metrics. E.g.,
 *    'ga:sessions,ga:pageviews'. At least one metric must be specified.
 *
 *  @return GTLRAnalyticsQuery_DataGaGet
 */
+ (instancetype)queryWithIds:(NSString *)ids
                   startDate:(NSString *)startDate
                     endDate:(NSString *)endDate
                     metrics:(NSString *)metrics;

@end

/**
 *  Returns Analytics Multi-Channel Funnels data for a view (profile).
 *
 *  Method: analytics.data.mcf.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_DataMcfGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForDataMcfGetWithids:startDate:endDate:metrics:]

/**
 *  A comma-separated list of Multi-Channel Funnels dimensions. E.g.,
 *  'mcf:source,mcf:medium'.
 */
@property(nonatomic, copy, nullable) NSString *dimensions;

/**
 *  End date for fetching Analytics data. Requests can specify a start date
 *  formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or
 *  7daysAgo). The default value is 7daysAgo.
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  A comma-separated list of dimension or metric filters to be applied to the
 *  Analytics data.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Unique table ID for retrieving Analytics data. Table ID is of the form
 *  ga:XXXX, where XXXX is the Analytics view (profile) ID.
 */
@property(nonatomic, copy, nullable) NSString *ids;

/** The maximum number of entries to include in this feed. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A comma-separated list of Multi-Channel Funnels metrics. E.g.,
 *  'mcf:totalConversions,mcf:totalConversionValue'. At least one metric must be
 *  specified.
 */
@property(nonatomic, copy, nullable) NSString *metrics;

/**
 *  The desired sampling level.
 *
 *  Likely values:
 *    @arg @c kGTLRAnalyticsSamplingLevelDefault Returns response with a sample
 *        size that balances speed and accuracy. (Value: "DEFAULT")
 *    @arg @c kGTLRAnalyticsSamplingLevelFaster Returns a fast response with a
 *        smaller sample size. (Value: "FASTER")
 *    @arg @c kGTLRAnalyticsSamplingLevelHigherPrecision Returns a more accurate
 *        response using a large sample size, but this may result in the
 *        response being slower. (Value: "HIGHER_PRECISION")
 */
@property(nonatomic, copy, nullable) NSString *samplingLevel;

/**
 *  A comma-separated list of dimensions or metrics that determine the sort
 *  order for the Analytics data.
 */
@property(nonatomic, copy, nullable) NSString *sort;

/**
 *  Start date for fetching Analytics data. Requests can specify a start date
 *  formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or
 *  7daysAgo). The default value is 7daysAgo.
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_McfData.
 *
 *  Returns Analytics Multi-Channel Funnels data for a view (profile).
 *
 *  @param ids Unique table ID for retrieving Analytics data. Table ID is of the
 *    form ga:XXXX, where XXXX is the Analytics view (profile) ID.
 *  @param startDate Start date for fetching Analytics data. Requests can
 *    specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
 *    today, yesterday, or 7daysAgo). The default value is 7daysAgo.
 *  @param endDate End date for fetching Analytics data. Requests can specify a
 *    start date formatted as YYYY-MM-DD, or as a relative date (e.g., today,
 *    yesterday, or 7daysAgo). The default value is 7daysAgo.
 *  @param metrics A comma-separated list of Multi-Channel Funnels metrics.
 *    E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At least one metric
 *    must be specified.
 *
 *  @return GTLRAnalyticsQuery_DataMcfGet
 */
+ (instancetype)queryWithIds:(NSString *)ids
                   startDate:(NSString *)startDate
                     endDate:(NSString *)endDate
                     metrics:(NSString *)metrics;

@end

/**
 *  Returns real time data for a view (profile).
 *
 *  Method: analytics.data.realtime.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_DataRealtimeGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForDataRealtimeGetWithids:metrics:]

/**
 *  A comma-separated list of real time dimensions. E.g., 'rt:medium,rt:city'.
 */
@property(nonatomic, copy, nullable) NSString *dimensions;

/**
 *  A comma-separated list of dimension or metric filters to be applied to real
 *  time data.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Unique table ID for retrieving real time data. Table ID is of the form
 *  ga:XXXX, where XXXX is the Analytics view (profile) ID.
 */
@property(nonatomic, copy, nullable) NSString *ids;

/** The maximum number of entries to include in this feed. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A comma-separated list of real time metrics. E.g., 'rt:activeUsers'. At
 *  least one metric must be specified.
 */
@property(nonatomic, copy, nullable) NSString *metrics;

/**
 *  A comma-separated list of dimensions or metrics that determine the sort
 *  order for real time data.
 */
@property(nonatomic, copy, nullable) NSString *sort;

/**
 *  Fetches a @c GTLRAnalytics_RealtimeData.
 *
 *  Returns real time data for a view (profile).
 *
 *  @param ids Unique table ID for retrieving real time data. Table ID is of the
 *    form ga:XXXX, where XXXX is the Analytics view (profile) ID.
 *  @param metrics A comma-separated list of real time metrics. E.g.,
 *    'rt:activeUsers'. At least one metric must be specified.
 *
 *  @return GTLRAnalyticsQuery_DataRealtimeGet
 */
+ (instancetype)queryWithIds:(NSString *)ids
                     metrics:(NSString *)metrics;

@end

/**
 *  Lists all accounts to which the user has access.
 *
 *  Method: analytics.management.accounts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementAccountsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountsList]

/** The maximum number of accounts to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first account to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_Accounts.
 *
 *  Lists all accounts to which the user has access.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountsList
 */
+ (instancetype)query;

@end

/**
 *  Lists account summaries (lightweight tree comprised of
 *  accounts/properties/profiles) to which the user has access.
 *
 *  Method: analytics.management.accountSummaries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementAccountSummariesList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountSummariesList]

/**
 *  The maximum number of account summaries to include in this response, where
 *  the largest acceptable value is 1000.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_AccountSummaries.
 *
 *  Lists account summaries (lightweight tree comprised of
 *  accounts/properties/profiles) to which the user has access.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountSummariesList
 */
+ (instancetype)query;

@end

/**
 *  Removes a user from the given account.
 *
 *  Method: analytics.management.accountUserLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementAccountUserLinksDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountUserLinksDeleteWithaccountId:linkId:]

/** Account ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a user from the given account.
 *
 *  @param accountId Account ID to delete the user link for.
 *  @param linkId Link ID to delete the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountUserLinksDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                            linkId:(NSString *)linkId;

@end

/**
 *  Adds a new user to the given account.
 *
 *  Method: analytics.management.accountUserLinks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementAccountUserLinksInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountUserLinksInsertWithObject:accountId:]

/** Account ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Adds a new user to the given account.
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to create the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountUserLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Lists account-user links for a given account.
 *
 *  Method: analytics.management.accountUserLinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 *    @c kGTLRAuthScopeAnalyticsManageUsersReadonly
 */
@interface GTLRAnalyticsQuery_ManagementAccountUserLinksList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountUserLinksListWithaccountId:]

/** Account ID to retrieve the user links for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of account-user links to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first account-user link to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLinks.
 *
 *  Lists account-user links for a given account.
 *
 *  @param accountId Account ID to retrieve the user links for.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountUserLinksList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Updates permissions for an existing user on the given account.
 *
 *  Method: analytics.management.accountUserLinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementAccountUserLinksUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementAccountUserLinksUpdateWithObject:accountId:linkId:]

/** Account ID to update the account-user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to update the account-user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Updates permissions for an existing user on the given account.
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to update the account-user link for.
 *  @param linkId Link ID to update the account-user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementAccountUserLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                         linkId:(NSString *)linkId;

@end

/**
 *  Hashes the given Client ID.
 *
 *  Method: analytics.management.clientId.hashClientId
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementClientIdHashClientId : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementClientIdHashClientIdWithObject:]

/**
 *  Fetches a @c GTLRAnalytics_HashClientIdResponse.
 *
 *  Hashes the given Client ID.
 *
 *  @param object The @c GTLRAnalytics_HashClientIdRequest to include in the
 *    query.
 *
 *  @return GTLRAnalyticsQuery_ManagementClientIdHashClientId
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_HashClientIdRequest *)object;

@end

/**
 *  List custom data sources to which the user has access.
 *
 *  Method: analytics.management.customDataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementCustomDataSourcesList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDataSourcesListWithaccountId:webPropertyId:]

/** Account Id for the custom data sources to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of custom data sources to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A 1-based index of the first custom data source to retrieve. Use this
 *  parameter as a pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property Id for the custom data sources to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDataSources.
 *
 *  List custom data sources to which the user has access.
 *
 *  @param accountId Account Id for the custom data sources to retrieve.
 *  @param webPropertyId Web property Id for the custom data sources to
 *    retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDataSourcesList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Get a custom dimension to which the user has access.
 *
 *  Method: analytics.management.customDimensions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementCustomDimensionsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDimensionsGetWithaccountId:webPropertyId:customDimensionId:]

/** Account ID for the custom dimension to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the custom dimension to retrieve. */
@property(nonatomic, copy, nullable) NSString *customDimensionId;

/** Web property ID for the custom dimension to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDimension.
 *
 *  Get a custom dimension to which the user has access.
 *
 *  @param accountId Account ID for the custom dimension to retrieve.
 *  @param webPropertyId Web property ID for the custom dimension to retrieve.
 *  @param customDimensionId The ID of the custom dimension to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDimensionsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                 customDimensionId:(NSString *)customDimensionId;

@end

/**
 *  Create a new custom dimension.
 *
 *  Method: analytics.management.customDimensions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomDimensionsInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDimensionsInsertWithObject:accountId:webPropertyId:]

/** Account ID for the custom dimension to create. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID for the custom dimension to create. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDimension.
 *
 *  Create a new custom dimension.
 *
 *  @param object The @c GTLRAnalytics_CustomDimension to include in the query.
 *  @param accountId Account ID for the custom dimension to create.
 *  @param webPropertyId Web property ID for the custom dimension to create.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDimensionsInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists custom dimensions to which the user has access.
 *
 *  Method: analytics.management.customDimensions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementCustomDimensionsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDimensionsListWithaccountId:webPropertyId:]

/** Account ID for the custom dimensions to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of custom dimensions to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property ID for the custom dimensions to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDimensions.
 *
 *  Lists custom dimensions to which the user has access.
 *
 *  @param accountId Account ID for the custom dimensions to retrieve.
 *  @param webPropertyId Web property ID for the custom dimensions to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDimensionsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing custom dimension. This method supports patch semantics.
 *
 *  Method: analytics.management.customDimensions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomDimensionsPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDimensionsPatchWithObject:accountId:webPropertyId:customDimensionId:]

/** Account ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom dimension ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *customDimensionId;

/**
 *  Force the update and ignore any warnings related to the custom dimension
 *  being linked to a custom data source / data set.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL ignoreCustomDataSourceLinks;

/** Web property ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDimension.
 *
 *  Updates an existing custom dimension. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_CustomDimension to include in the query.
 *  @param accountId Account ID for the custom dimension to update.
 *  @param webPropertyId Web property ID for the custom dimension to update.
 *  @param customDimensionId Custom dimension ID for the custom dimension to
 *    update.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDimensionsPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
              customDimensionId:(NSString *)customDimensionId;

@end

/**
 *  Updates an existing custom dimension.
 *
 *  Method: analytics.management.customDimensions.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomDimensionsUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomDimensionsUpdateWithObject:accountId:webPropertyId:customDimensionId:]

/** Account ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom dimension ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *customDimensionId;

/**
 *  Force the update and ignore any warnings related to the custom dimension
 *  being linked to a custom data source / data set.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL ignoreCustomDataSourceLinks;

/** Web property ID for the custom dimension to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomDimension.
 *
 *  Updates an existing custom dimension.
 *
 *  @param object The @c GTLRAnalytics_CustomDimension to include in the query.
 *  @param accountId Account ID for the custom dimension to update.
 *  @param webPropertyId Web property ID for the custom dimension to update.
 *  @param customDimensionId Custom dimension ID for the custom dimension to
 *    update.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomDimensionsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
              customDimensionId:(NSString *)customDimensionId;

@end

/**
 *  Get a custom metric to which the user has access.
 *
 *  Method: analytics.management.customMetrics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementCustomMetricsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomMetricsGetWithaccountId:webPropertyId:customMetricId:]

/** Account ID for the custom metric to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the custom metric to retrieve. */
@property(nonatomic, copy, nullable) NSString *customMetricId;

/** Web property ID for the custom metric to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomMetric.
 *
 *  Get a custom metric to which the user has access.
 *
 *  @param accountId Account ID for the custom metric to retrieve.
 *  @param webPropertyId Web property ID for the custom metric to retrieve.
 *  @param customMetricId The ID of the custom metric to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomMetricsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                    customMetricId:(NSString *)customMetricId;

@end

/**
 *  Create a new custom metric.
 *
 *  Method: analytics.management.customMetrics.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomMetricsInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomMetricsInsertWithObject:accountId:webPropertyId:]

/** Account ID for the custom metric to create. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID for the custom dimension to create. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomMetric.
 *
 *  Create a new custom metric.
 *
 *  @param object The @c GTLRAnalytics_CustomMetric to include in the query.
 *  @param accountId Account ID for the custom metric to create.
 *  @param webPropertyId Web property ID for the custom dimension to create.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomMetricsInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists custom metrics to which the user has access.
 *
 *  Method: analytics.management.customMetrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementCustomMetricsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomMetricsListWithaccountId:webPropertyId:]

/** Account ID for the custom metrics to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of custom metrics to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property ID for the custom metrics to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomMetrics.
 *
 *  Lists custom metrics to which the user has access.
 *
 *  @param accountId Account ID for the custom metrics to retrieve.
 *  @param webPropertyId Web property ID for the custom metrics to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomMetricsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing custom metric. This method supports patch semantics.
 *
 *  Method: analytics.management.customMetrics.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomMetricsPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomMetricsPatchWithObject:accountId:webPropertyId:customMetricId:]

/** Account ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom metric ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *customMetricId;

/**
 *  Force the update and ignore any warnings related to the custom metric being
 *  linked to a custom data source / data set.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL ignoreCustomDataSourceLinks;

/** Web property ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomMetric.
 *
 *  Updates an existing custom metric. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_CustomMetric to include in the query.
 *  @param accountId Account ID for the custom metric to update.
 *  @param webPropertyId Web property ID for the custom metric to update.
 *  @param customMetricId Custom metric ID for the custom metric to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomMetricsPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                 customMetricId:(NSString *)customMetricId;

@end

/**
 *  Updates an existing custom metric.
 *
 *  Method: analytics.management.customMetrics.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementCustomMetricsUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementCustomMetricsUpdateWithObject:accountId:webPropertyId:customMetricId:]

/** Account ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom metric ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *customMetricId;

/**
 *  Force the update and ignore any warnings related to the custom metric being
 *  linked to a custom data source / data set.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL ignoreCustomDataSourceLinks;

/** Web property ID for the custom metric to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_CustomMetric.
 *
 *  Updates an existing custom metric.
 *
 *  @param object The @c GTLRAnalytics_CustomMetric to include in the query.
 *  @param accountId Account ID for the custom metric to update.
 *  @param webPropertyId Web property ID for the custom metric to update.
 *  @param customMetricId Custom metric ID for the custom metric to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementCustomMetricsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                 customMetricId:(NSString *)customMetricId;

@end

/**
 *  Delete an experiment.
 *
 *  Method: analytics.management.experiments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsDeleteWithaccountId:webPropertyId:profileId:experimentId:]

/** Account ID to which the experiment belongs */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the experiment to delete */
@property(nonatomic, copy, nullable) NSString *experimentId;

/** View (Profile) ID to which the experiment belongs */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to which the experiment belongs */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete an experiment.
 *
 *  @param accountId Account ID to which the experiment belongs
 *  @param webPropertyId Web property ID to which the experiment belongs
 *  @param profileId View (Profile) ID to which the experiment belongs
 *  @param experimentId ID of the experiment to delete
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                      experimentId:(NSString *)experimentId;

@end

/**
 *  Returns an experiment to which the user has access.
 *
 *  Method: analytics.management.experiments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsGetWithaccountId:webPropertyId:profileId:experimentId:]

/** Account ID to retrieve the experiment for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Experiment ID to retrieve the experiment for. */
@property(nonatomic, copy, nullable) NSString *experimentId;

/** View (Profile) ID to retrieve the experiment for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to retrieve the experiment for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Experiment.
 *
 *  Returns an experiment to which the user has access.
 *
 *  @param accountId Account ID to retrieve the experiment for.
 *  @param webPropertyId Web property ID to retrieve the experiment for.
 *  @param profileId View (Profile) ID to retrieve the experiment for.
 *  @param experimentId Experiment ID to retrieve the experiment for.
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                      experimentId:(NSString *)experimentId;

@end

/**
 *  Create a new experiment.
 *
 *  Method: analytics.management.experiments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsInsertWithObject:accountId:webPropertyId:profileId:]

/** Account ID to create the experiment for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to create the experiment for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to create the experiment for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Experiment.
 *
 *  Create a new experiment.
 *
 *  @param object The @c GTLRAnalytics_Experiment to include in the query.
 *  @param accountId Account ID to create the experiment for.
 *  @param webPropertyId Web property ID to create the experiment for.
 *  @param profileId View (Profile) ID to create the experiment for.
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Lists experiments to which the user has access.
 *
 *  Method: analytics.management.experiments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsListWithaccountId:webPropertyId:profileId:]

/** Account ID to retrieve experiments for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of experiments to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/** View (Profile) ID to retrieve experiments for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  An index of the first experiment to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property ID to retrieve experiments for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Experiments.
 *
 *  Lists experiments to which the user has access.
 *
 *  @param accountId Account ID to retrieve experiments for.
 *  @param webPropertyId Web property ID to retrieve experiments for.
 *  @param profileId View (Profile) ID to retrieve experiments for.
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Update an existing experiment. This method supports patch semantics.
 *
 *  Method: analytics.management.experiments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsPatchWithObject:accountId:webPropertyId:profileId:experimentId:]

/** Account ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Experiment ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *experimentId;

/** View (Profile) ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Experiment.
 *
 *  Update an existing experiment. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_Experiment to include in the query.
 *  @param accountId Account ID of the experiment to update.
 *  @param webPropertyId Web property ID of the experiment to update.
 *  @param profileId View (Profile) ID of the experiment to update.
 *  @param experimentId Experiment ID of the experiment to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                   experimentId:(NSString *)experimentId;

@end

/**
 *  Update an existing experiment.
 *
 *  Method: analytics.management.experiments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementExperimentsUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementExperimentsUpdateWithObject:accountId:webPropertyId:profileId:experimentId:]

/** Account ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Experiment ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *experimentId;

/** View (Profile) ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID of the experiment to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Experiment.
 *
 *  Update an existing experiment.
 *
 *  @param object The @c GTLRAnalytics_Experiment to include in the query.
 *  @param accountId Account ID of the experiment to update.
 *  @param webPropertyId Web property ID of the experiment to update.
 *  @param profileId View (Profile) ID of the experiment to update.
 *  @param experimentId Experiment ID of the experiment to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementExperimentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                   experimentId:(NSString *)experimentId;

@end

/**
 *  Delete a filter.
 *
 *  Method: analytics.management.filters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementFiltersDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersDeleteWithaccountId:filterId:]

/** Account ID to delete the filter for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the filter to be deleted. */
@property(nonatomic, copy, nullable) NSString *filterId;

/**
 *  Fetches a @c GTLRAnalytics_Filter.
 *
 *  Delete a filter.
 *
 *  @param accountId Account ID to delete the filter for.
 *  @param filterId ID of the filter to be deleted.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                          filterId:(NSString *)filterId;

@end

/**
 *  Returns a filters to which the user has access.
 *
 *  Method: analytics.management.filters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementFiltersGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersGetWithaccountId:filterId:]

/** Account ID to retrieve filters for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Filter ID to retrieve filters for. */
@property(nonatomic, copy, nullable) NSString *filterId;

/**
 *  Fetches a @c GTLRAnalytics_Filter.
 *
 *  Returns a filters to which the user has access.
 *
 *  @param accountId Account ID to retrieve filters for.
 *  @param filterId Filter ID to retrieve filters for.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                          filterId:(NSString *)filterId;

@end

/**
 *  Create a new filter.
 *
 *  Method: analytics.management.filters.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementFiltersInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersInsertWithObject:accountId:]

/** Account ID to create filter for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Fetches a @c GTLRAnalytics_Filter.
 *
 *  Create a new filter.
 *
 *  @param object The @c GTLRAnalytics_Filter to include in the query.
 *  @param accountId Account ID to create filter for.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Lists all filters for an account
 *
 *  Method: analytics.management.filters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementFiltersList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersListWithaccountId:]

/** Account ID to retrieve filters for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of filters to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_Filters.
 *
 *  Lists all filters for an account
 *
 *  @param accountId Account ID to retrieve filters for.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Updates an existing filter. This method supports patch semantics.
 *
 *  Method: analytics.management.filters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementFiltersPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersPatchWithObject:accountId:filterId:]

/** Account ID to which the filter belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the filter to be updated. */
@property(nonatomic, copy, nullable) NSString *filterId;

/**
 *  Fetches a @c GTLRAnalytics_Filter.
 *
 *  Updates an existing filter. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_Filter to include in the query.
 *  @param accountId Account ID to which the filter belongs.
 *  @param filterId ID of the filter to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId
                       filterId:(NSString *)filterId;

@end

/**
 *  Updates an existing filter.
 *
 *  Method: analytics.management.filters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementFiltersUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementFiltersUpdateWithObject:accountId:filterId:]

/** Account ID to which the filter belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the filter to be updated. */
@property(nonatomic, copy, nullable) NSString *filterId;

/**
 *  Fetches a @c GTLRAnalytics_Filter.
 *
 *  Updates an existing filter.
 *
 *  @param object The @c GTLRAnalytics_Filter to include in the query.
 *  @param accountId Account ID to which the filter belongs.
 *  @param filterId ID of the filter to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementFiltersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId
                       filterId:(NSString *)filterId;

@end

/**
 *  Gets a goal to which the user has access.
 *
 *  Method: analytics.management.goals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementGoalsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementGoalsGetWithaccountId:webPropertyId:profileId:goalId:]

/** Account ID to retrieve the goal for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Goal ID to retrieve the goal for. */
@property(nonatomic, copy, nullable) NSString *goalId;

/** View (Profile) ID to retrieve the goal for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to retrieve the goal for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Goal.
 *
 *  Gets a goal to which the user has access.
 *
 *  @param accountId Account ID to retrieve the goal for.
 *  @param webPropertyId Web property ID to retrieve the goal for.
 *  @param profileId View (Profile) ID to retrieve the goal for.
 *  @param goalId Goal ID to retrieve the goal for.
 *
 *  @return GTLRAnalyticsQuery_ManagementGoalsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            goalId:(NSString *)goalId;

@end

/**
 *  Create a new goal.
 *
 *  Method: analytics.management.goals.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementGoalsInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementGoalsInsertWithObject:accountId:webPropertyId:profileId:]

/** Account ID to create the goal for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to create the goal for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to create the goal for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Goal.
 *
 *  Create a new goal.
 *
 *  @param object The @c GTLRAnalytics_Goal to include in the query.
 *  @param accountId Account ID to create the goal for.
 *  @param webPropertyId Web property ID to create the goal for.
 *  @param profileId View (Profile) ID to create the goal for.
 *
 *  @return GTLRAnalyticsQuery_ManagementGoalsInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Lists goals to which the user has access.
 *
 *  Method: analytics.management.goals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementGoalsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementGoalsListWithaccountId:webPropertyId:profileId:]

/**
 *  Account ID to retrieve goals for. Can either be a specific account ID or
 *  '~all', which refers to all the accounts that user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of goals to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  View (Profile) ID to retrieve goals for. Can either be a specific view
 *  (profile) ID or '~all', which refers to all the views (profiles) that user
 *  has access to.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  An index of the first goal to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web property ID to retrieve goals for. Can either be a specific web property
 *  ID or '~all', which refers to all the web properties that user has access
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Goals.
 *
 *  Lists goals to which the user has access.
 *
 *  @param accountId Account ID to retrieve goals for. Can either be a specific
 *    account ID or '~all', which refers to all the accounts that user has
 *    access to.
 *  @param webPropertyId Web property ID to retrieve goals for. Can either be a
 *    specific web property ID or '~all', which refers to all the web properties
 *    that user has access to.
 *  @param profileId View (Profile) ID to retrieve goals for. Can either be a
 *    specific view (profile) ID or '~all', which refers to all the views
 *    (profiles) that user has access to.
 *
 *  @return GTLRAnalyticsQuery_ManagementGoalsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Updates an existing goal. This method supports patch semantics.
 *
 *  Method: analytics.management.goals.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementGoalsPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementGoalsPatchWithObject:accountId:webPropertyId:profileId:goalId:]

/** Account ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Index of the goal to be updated. */
@property(nonatomic, copy, nullable) NSString *goalId;

/** View (Profile) ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Goal.
 *
 *  Updates an existing goal. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_Goal to include in the query.
 *  @param accountId Account ID to update the goal.
 *  @param webPropertyId Web property ID to update the goal.
 *  @param profileId View (Profile) ID to update the goal.
 *  @param goalId Index of the goal to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementGoalsPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         goalId:(NSString *)goalId;

@end

/**
 *  Updates an existing goal.
 *
 *  Method: analytics.management.goals.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementGoalsUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementGoalsUpdateWithObject:accountId:webPropertyId:profileId:goalId:]

/** Account ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Index of the goal to be updated. */
@property(nonatomic, copy, nullable) NSString *goalId;

/** View (Profile) ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to update the goal. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Goal.
 *
 *  Updates an existing goal.
 *
 *  @param object The @c GTLRAnalytics_Goal to include in the query.
 *  @param accountId Account ID to update the goal.
 *  @param webPropertyId Web property ID to update the goal.
 *  @param profileId View (Profile) ID to update the goal.
 *  @param goalId Index of the goal to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementGoalsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         goalId:(NSString *)goalId;

@end

/**
 *  Delete a profile filter link.
 *
 *  Method: analytics.management.profileFilterLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksDeleteWithaccountId:webPropertyId:profileId:linkId:]

/** Account ID to which the profile filter link belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the profile filter link to delete. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Profile ID to which the filter link belongs. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property Id to which the profile filter link belongs. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a profile filter link.
 *
 *  @param accountId Account ID to which the profile filter link belongs.
 *  @param webPropertyId Web property Id to which the profile filter link
 *    belongs.
 *  @param profileId Profile ID to which the filter link belongs.
 *  @param linkId ID of the profile filter link to delete.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId;

@end

/**
 *  Returns a single profile filter link.
 *
 *  Method: analytics.management.profileFilterLinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksGetWithaccountId:webPropertyId:profileId:linkId:]

/** Account ID to retrieve profile filter link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the profile filter link. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Profile ID to retrieve filter link for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property Id to retrieve profile filter link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_ProfileFilterLink.
 *
 *  Returns a single profile filter link.
 *
 *  @param accountId Account ID to retrieve profile filter link for.
 *  @param webPropertyId Web property Id to retrieve profile filter link for.
 *  @param profileId Profile ID to retrieve filter link for.
 *  @param linkId ID of the profile filter link.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId;

@end

/**
 *  Create a new profile filter link.
 *
 *  Method: analytics.management.profileFilterLinks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksInsertWithObject:accountId:webPropertyId:profileId:]

/** Account ID to create profile filter link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Profile ID to create filter link for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property Id to create profile filter link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_ProfileFilterLink.
 *
 *  Create a new profile filter link.
 *
 *  @param object The @c GTLRAnalytics_ProfileFilterLink to include in the
 *    query.
 *  @param accountId Account ID to create profile filter link for.
 *  @param webPropertyId Web property Id to create profile filter link for.
 *  @param profileId Profile ID to create filter link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Lists all profile filter links for a profile.
 *
 *  Method: analytics.management.profileFilterLinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksListWithaccountId:webPropertyId:profileId:]

/** Account ID to retrieve profile filter links for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of profile filter links to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Profile ID to retrieve filter links for. Can either be a specific profile ID
 *  or '~all', which refers to all the profiles that user has access to.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web property Id for profile filter links for. Can either be a specific web
 *  property ID or '~all', which refers to all the web properties that user has
 *  access to.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_ProfileFilterLinks.
 *
 *  Lists all profile filter links for a profile.
 *
 *  @param accountId Account ID to retrieve profile filter links for.
 *  @param webPropertyId Web property Id for profile filter links for. Can
 *    either be a specific web property ID or '~all', which refers to all the
 *    web properties that user has access to.
 *  @param profileId Profile ID to retrieve filter links for. Can either be a
 *    specific profile ID or '~all', which refers to all the profiles that user
 *    has access to.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Update an existing profile filter link. This method supports patch
 *  semantics.
 *
 *  Method: analytics.management.profileFilterLinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksPatchWithObject:accountId:webPropertyId:profileId:linkId:]

/** Account ID to which profile filter link belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the profile filter link to be updated. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Profile ID to which filter link belongs */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property Id to which profile filter link belongs */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_ProfileFilterLink.
 *
 *  Update an existing profile filter link. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAnalytics_ProfileFilterLink to include in the
 *    query.
 *  @param accountId Account ID to which profile filter link belongs.
 *  @param webPropertyId Web property Id to which profile filter link belongs
 *  @param profileId Profile ID to which filter link belongs
 *  @param linkId ID of the profile filter link to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId;

@end

/**
 *  Update an existing profile filter link.
 *
 *  Method: analytics.management.profileFilterLinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfileFilterLinksUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileFilterLinksUpdateWithObject:accountId:webPropertyId:profileId:linkId:]

/** Account ID to which profile filter link belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the profile filter link to be updated. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Profile ID to which filter link belongs */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property Id to which profile filter link belongs */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_ProfileFilterLink.
 *
 *  Update an existing profile filter link.
 *
 *  @param object The @c GTLRAnalytics_ProfileFilterLink to include in the
 *    query.
 *  @param accountId Account ID to which profile filter link belongs.
 *  @param webPropertyId Web property Id to which profile filter link belongs
 *  @param profileId Profile ID to which filter link belongs
 *  @param linkId ID of the profile filter link to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileFilterLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId;

@end

/**
 *  Deletes a view (profile).
 *
 *  Method: analytics.management.profiles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfilesDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesDeleteWithaccountId:webPropertyId:profileId:]

/** Account ID to delete the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the view (profile) to be deleted. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to delete the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a view (profile).
 *
 *  @param accountId Account ID to delete the view (profile) for.
 *  @param webPropertyId Web property ID to delete the view (profile) for.
 *  @param profileId ID of the view (profile) to be deleted.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Gets a view (profile) to which the user has access.
 *
 *  Method: analytics.management.profiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementProfilesGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesGetWithaccountId:webPropertyId:profileId:]

/** Account ID to retrieve the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to retrieve the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to retrieve the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Profile.
 *
 *  Gets a view (profile) to which the user has access.
 *
 *  @param accountId Account ID to retrieve the view (profile) for.
 *  @param webPropertyId Web property ID to retrieve the view (profile) for.
 *  @param profileId View (Profile) ID to retrieve the view (profile) for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Create a new view (profile).
 *
 *  Method: analytics.management.profiles.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfilesInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesInsertWithObject:accountId:webPropertyId:]

/** Account ID to create the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID to create the view (profile) for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Profile.
 *
 *  Create a new view (profile).
 *
 *  @param object The @c GTLRAnalytics_Profile to include in the query.
 *  @param accountId Account ID to create the view (profile) for.
 *  @param webPropertyId Web property ID to create the view (profile) for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists views (profiles) to which the user has access.
 *
 *  Method: analytics.management.profiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementProfilesList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesListWithaccountId:webPropertyId:]

/**
 *  Account ID for the view (profiles) to retrieve. Can either be a specific
 *  account ID or '~all', which refers to all the accounts to which the user has
 *  access.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of views (profiles) to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web property ID for the views (profiles) to retrieve. Can either be a
 *  specific web property ID or '~all', which refers to all the web properties
 *  to which the user has access.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Profiles.
 *
 *  Lists views (profiles) to which the user has access.
 *
 *  @param accountId Account ID for the view (profiles) to retrieve. Can either
 *    be a specific account ID or '~all', which refers to all the accounts to
 *    which the user has access.
 *  @param webPropertyId Web property ID for the views (profiles) to retrieve.
 *    Can either be a specific web property ID or '~all', which refers to all
 *    the web properties to which the user has access.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing view (profile). This method supports patch semantics.
 *
 *  Method: analytics.management.profiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfilesPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesPatchWithObject:accountId:webPropertyId:profileId:]

/** Account ID to which the view (profile) belongs */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the view (profile) to be updated. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to which the view (profile) belongs */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Profile.
 *
 *  Updates an existing view (profile). This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_Profile to include in the query.
 *  @param accountId Account ID to which the view (profile) belongs
 *  @param webPropertyId Web property ID to which the view (profile) belongs
 *  @param profileId ID of the view (profile) to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Updates an existing view (profile).
 *
 *  Method: analytics.management.profiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementProfilesUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfilesUpdateWithObject:accountId:webPropertyId:profileId:]

/** Account ID to which the view (profile) belongs */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID of the view (profile) to be updated. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to which the view (profile) belongs */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Profile.
 *
 *  Updates an existing view (profile).
 *
 *  @param object The @c GTLRAnalytics_Profile to include in the query.
 *  @param accountId Account ID to which the view (profile) belongs
 *  @param webPropertyId Web property ID to which the view (profile) belongs
 *  @param profileId ID of the view (profile) to be updated.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Removes a user from the given view (profile).
 *
 *  Method: analytics.management.profileUserLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementProfileUserLinksDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileUserLinksDeleteWithaccountId:webPropertyId:profileId:linkId:]

/** Account ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** View (Profile) ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web Property ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a user from the given view (profile).
 *
 *  @param accountId Account ID to delete the user link for.
 *  @param webPropertyId Web Property ID to delete the user link for.
 *  @param profileId View (Profile) ID to delete the user link for.
 *  @param linkId Link ID to delete the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileUserLinksDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId;

@end

/**
 *  Adds a new user to the given view (profile).
 *
 *  Method: analytics.management.profileUserLinks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementProfileUserLinksInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileUserLinksInsertWithObject:accountId:webPropertyId:profileId:]

/** Account ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web Property ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Adds a new user to the given view (profile).
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to create the user link for.
 *  @param webPropertyId Web Property ID to create the user link for.
 *  @param profileId View (Profile) ID to create the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileUserLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Lists profile-user links for a given view (profile).
 *
 *  Method: analytics.management.profileUserLinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 *    @c kGTLRAuthScopeAnalyticsManageUsersReadonly
 */
@interface GTLRAnalyticsQuery_ManagementProfileUserLinksList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileUserLinksListWithaccountId:webPropertyId:profileId:]

/** Account ID which the given view (profile) belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of profile-user links to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  View (Profile) ID to retrieve the profile-user links for. Can either be a
 *  specific profile ID or '~all', which refers to all the profiles that user
 *  has access to.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  An index of the first profile-user link to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web Property ID which the given view (profile) belongs to. Can either be a
 *  specific web property ID or '~all', which refers to all the web properties
 *  that user has access to.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLinks.
 *
 *  Lists profile-user links for a given view (profile).
 *
 *  @param accountId Account ID which the given view (profile) belongs to.
 *  @param webPropertyId Web Property ID which the given view (profile) belongs
 *    to. Can either be a specific web property ID or '~all', which refers to
 *    all the web properties that user has access to.
 *  @param profileId View (Profile) ID to retrieve the profile-user links for.
 *    Can either be a specific profile ID or '~all', which refers to all the
 *    profiles that user has access to.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileUserLinksList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Updates permissions for an existing user on the given view (profile).
 *
 *  Method: analytics.management.profileUserLinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementProfileUserLinksUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementProfileUserLinksUpdateWithObject:accountId:webPropertyId:profileId:linkId:]

/** Account ID to update the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to update the user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** View (Profile ID) to update the user link for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web Property ID to update the user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Updates permissions for an existing user on the given view (profile).
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to update the user link for.
 *  @param webPropertyId Web Property ID to update the user link for.
 *  @param profileId View (Profile ID) to update the user link for.
 *  @param linkId Link ID to update the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementProfileUserLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId;

@end

/**
 *  Delete a remarketing audience.
 *
 *  Method: analytics.management.remarketingAudience.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudienceDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudienceDeleteWithaccountId:webPropertyId:remarketingAudienceId:]

/** Account ID to which the remarketing audience belongs. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the remarketing audience to delete. */
@property(nonatomic, copy, nullable) NSString *remarketingAudienceId;

/** Web property ID to which the remarketing audience belongs. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a remarketing audience.
 *
 *  @param accountId Account ID to which the remarketing audience belongs.
 *  @param webPropertyId Web property ID to which the remarketing audience
 *    belongs.
 *  @param remarketingAudienceId The ID of the remarketing audience to delete.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudienceDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
             remarketingAudienceId:(NSString *)remarketingAudienceId;

@end

/**
 *  Gets a remarketing audience to which the user has access.
 *
 *  Method: analytics.management.remarketingAudience.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudienceGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudienceGetWithaccountId:webPropertyId:remarketingAudienceId:]

/** The account ID of the remarketing audience to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the remarketing audience to retrieve. */
@property(nonatomic, copy, nullable) NSString *remarketingAudienceId;

/** The web property ID of the remarketing audience to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_RemarketingAudience.
 *
 *  Gets a remarketing audience to which the user has access.
 *
 *  @param accountId The account ID of the remarketing audience to retrieve.
 *  @param webPropertyId The web property ID of the remarketing audience to
 *    retrieve.
 *  @param remarketingAudienceId The ID of the remarketing audience to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudienceGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
             remarketingAudienceId:(NSString *)remarketingAudienceId;

@end

/**
 *  Creates a new remarketing audience.
 *
 *  Method: analytics.management.remarketingAudience.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudienceInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudienceInsertWithObject:accountId:webPropertyId:]

/** The account ID for which to create the remarketing audience. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID for which to create the remarketing audience. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_RemarketingAudience.
 *
 *  Creates a new remarketing audience.
 *
 *  @param object The @c GTLRAnalytics_RemarketingAudience to include in the
 *    query.
 *  @param accountId The account ID for which to create the remarketing
 *    audience.
 *  @param webPropertyId Web property ID for which to create the remarketing
 *    audience.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudienceInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists remarketing audiences to which the user has access.
 *
 *  Method: analytics.management.remarketingAudience.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudienceList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudienceListWithaccountId:webPropertyId:]

/** The account ID of the remarketing audiences to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of remarketing audiences to include in this response.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  type
 *
 *  @note If not set, the documented server-side default will be all.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The web property ID of the remarketing audiences to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_RemarketingAudiences.
 *
 *  Lists remarketing audiences to which the user has access.
 *
 *  @param accountId The account ID of the remarketing audiences to retrieve.
 *  @param webPropertyId The web property ID of the remarketing audiences to
 *    retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudienceList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing remarketing audience. This method supports patch
 *  semantics.
 *
 *  Method: analytics.management.remarketingAudience.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudiencePatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudiencePatchWithObject:accountId:webPropertyId:remarketingAudienceId:]

/** The account ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *remarketingAudienceId;

/** The web property ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_RemarketingAudience.
 *
 *  Updates an existing remarketing audience. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAnalytics_RemarketingAudience to include in the
 *    query.
 *  @param accountId The account ID of the remarketing audience to update.
 *  @param webPropertyId The web property ID of the remarketing audience to
 *    update.
 *  @param remarketingAudienceId The ID of the remarketing audience to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudiencePatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
          remarketingAudienceId:(NSString *)remarketingAudienceId;

@end

/**
 *  Updates an existing remarketing audience.
 *
 *  Method: analytics.management.remarketingAudience.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementRemarketingAudienceUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementRemarketingAudienceUpdateWithObject:accountId:webPropertyId:remarketingAudienceId:]

/** The account ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *remarketingAudienceId;

/** The web property ID of the remarketing audience to update. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_RemarketingAudience.
 *
 *  Updates an existing remarketing audience.
 *
 *  @param object The @c GTLRAnalytics_RemarketingAudience to include in the
 *    query.
 *  @param accountId The account ID of the remarketing audience to update.
 *  @param webPropertyId The web property ID of the remarketing audience to
 *    update.
 *  @param remarketingAudienceId The ID of the remarketing audience to update.
 *
 *  @return GTLRAnalyticsQuery_ManagementRemarketingAudienceUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
          remarketingAudienceId:(NSString *)remarketingAudienceId;

@end

/**
 *  Lists segments to which the user has access.
 *
 *  Method: analytics.management.segments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementSegmentsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementSegmentsList]

/** The maximum number of segments to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first segment to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_Segments.
 *
 *  Lists segments to which the user has access.
 *
 *  @return GTLRAnalyticsQuery_ManagementSegmentsList
 */
+ (instancetype)query;

@end

/**
 *  Deletes an unsampled report.
 *
 *  Method: analytics.management.unsampledReports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementUnsampledReportsDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUnsampledReportsDeleteWithaccountId:webPropertyId:profileId:unsampledReportId:]

/** Account ID to delete the unsampled report for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to delete the unsampled report for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** ID of the unsampled report to be deleted. */
@property(nonatomic, copy, nullable) NSString *unsampledReportId;

/** Web property ID to delete the unsampled reports for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an unsampled report.
 *
 *  @param accountId Account ID to delete the unsampled report for.
 *  @param webPropertyId Web property ID to delete the unsampled reports for.
 *  @param profileId View (Profile) ID to delete the unsampled report for.
 *  @param unsampledReportId ID of the unsampled report to be deleted.
 *
 *  @return GTLRAnalyticsQuery_ManagementUnsampledReportsDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                 unsampledReportId:(NSString *)unsampledReportId;

@end

/**
 *  Returns a single unsampled report.
 *
 *  Method: analytics.management.unsampledReports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementUnsampledReportsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUnsampledReportsGetWithaccountId:webPropertyId:profileId:unsampledReportId:]

/** Account ID to retrieve unsampled report for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to retrieve unsampled report for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** ID of the unsampled report to retrieve. */
@property(nonatomic, copy, nullable) NSString *unsampledReportId;

/** Web property ID to retrieve unsampled reports for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_UnsampledReport.
 *
 *  Returns a single unsampled report.
 *
 *  @param accountId Account ID to retrieve unsampled report for.
 *  @param webPropertyId Web property ID to retrieve unsampled reports for.
 *  @param profileId View (Profile) ID to retrieve unsampled report for.
 *  @param unsampledReportId ID of the unsampled report to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementUnsampledReportsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                 unsampledReportId:(NSString *)unsampledReportId;

@end

/**
 *  Create a new unsampled report.
 *
 *  Method: analytics.management.unsampledReports.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementUnsampledReportsInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUnsampledReportsInsertWithObject:accountId:webPropertyId:profileId:]

/** Account ID to create the unsampled report for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** View (Profile) ID to create the unsampled report for. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** Web property ID to create the unsampled report for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_UnsampledReport.
 *
 *  Create a new unsampled report.
 *
 *  @param object The @c GTLRAnalytics_UnsampledReport to include in the query.
 *  @param accountId Account ID to create the unsampled report for.
 *  @param webPropertyId Web property ID to create the unsampled report for.
 *  @param profileId View (Profile) ID to create the unsampled report for.
 *
 *  @return GTLRAnalyticsQuery_ManagementUnsampledReportsInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_UnsampledReport *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId;

@end

/**
 *  Lists unsampled reports to which the user has access.
 *
 *  Method: analytics.management.unsampledReports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementUnsampledReportsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUnsampledReportsListWithaccountId:webPropertyId:profileId:]

/**
 *  Account ID to retrieve unsampled reports for. Must be a specific account ID,
 *  ~all is not supported.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of unsampled reports to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  View (Profile) ID to retrieve unsampled reports for. Must be a specific view
 *  (profile) ID, ~all is not supported.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  An index of the first unsampled report to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web property ID to retrieve unsampled reports for. Must be a specific web
 *  property ID, ~all is not supported.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_UnsampledReports.
 *
 *  Lists unsampled reports to which the user has access.
 *
 *  @param accountId Account ID to retrieve unsampled reports for. Must be a
 *    specific account ID, ~all is not supported.
 *  @param webPropertyId Web property ID to retrieve unsampled reports for. Must
 *    be a specific web property ID, ~all is not supported.
 *  @param profileId View (Profile) ID to retrieve unsampled reports for. Must
 *    be a specific view (profile) ID, ~all is not supported.
 *
 *  @return GTLRAnalyticsQuery_ManagementUnsampledReportsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId;

@end

/**
 *  Delete data associated with a previous upload.
 *
 *  Method: analytics.management.uploads.deleteUploadData
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementUploadsDeleteUploadData : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUploadsDeleteUploadDataWithObject:accountId:webPropertyId:customDataSourceId:]

/** Account Id for the uploads to be deleted. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom data source Id for the uploads to be deleted. */
@property(nonatomic, copy, nullable) NSString *customDataSourceId;

/** Web property Id for the uploads to be deleted. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete data associated with a previous upload.
 *
 *  @param object The @c GTLRAnalytics_DataimportDeleteUploadDataRequest to
 *    include in the query.
 *  @param accountId Account Id for the uploads to be deleted.
 *  @param webPropertyId Web property Id for the uploads to be deleted.
 *  @param customDataSourceId Custom data source Id for the uploads to be
 *    deleted.
 *
 *  @return GTLRAnalyticsQuery_ManagementUploadsDeleteUploadData
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_DataimportDeleteUploadDataRequest *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
             customDataSourceId:(NSString *)customDataSourceId;

@end

/**
 *  List uploads to which the user has access.
 *
 *  Method: analytics.management.uploads.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementUploadsGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUploadsGetWithaccountId:webPropertyId:customDataSourceId:uploadId:]

/** Account Id for the upload to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom data source Id for upload to retrieve. */
@property(nonatomic, copy, nullable) NSString *customDataSourceId;

/** Upload Id to retrieve. */
@property(nonatomic, copy, nullable) NSString *uploadId;

/** Web property Id for the upload to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Upload.
 *
 *  List uploads to which the user has access.
 *
 *  @param accountId Account Id for the upload to retrieve.
 *  @param webPropertyId Web property Id for the upload to retrieve.
 *  @param customDataSourceId Custom data source Id for upload to retrieve.
 *  @param uploadId Upload Id to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementUploadsGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId
                          uploadId:(NSString *)uploadId;

@end

/**
 *  List uploads to which the user has access.
 *
 *  Method: analytics.management.uploads.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementUploadsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUploadsListWithaccountId:webPropertyId:customDataSourceId:]

/** Account Id for the uploads to retrieve. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom data source Id for uploads to retrieve. */
@property(nonatomic, copy, nullable) NSString *customDataSourceId;

/** The maximum number of uploads to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  A 1-based index of the first upload to retrieve. Use this parameter as a
 *  pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property Id for the uploads to retrieve. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Uploads.
 *
 *  List uploads to which the user has access.
 *
 *  @param accountId Account Id for the uploads to retrieve.
 *  @param webPropertyId Web property Id for the uploads to retrieve.
 *  @param customDataSourceId Custom data source Id for uploads to retrieve.
 *
 *  @return GTLRAnalyticsQuery_ManagementUploadsList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId;

@end

/**
 *  Upload data for a custom data source.
 *
 *  Method: analytics.management.uploads.uploadData
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementUploadsUploadData : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementUploadsUploadDataWithaccountId:webPropertyId:customDataSourceId:]

/** Account Id associated with the upload. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Custom data source Id to which the data being uploaded belongs. */
@property(nonatomic, copy, nullable) NSString *customDataSourceId;

/** Web property UA-string associated with the upload. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Upload.
 *
 *  Upload data for a custom data source.
 *
 *  @param accountId Account Id associated with the upload.
 *  @param webPropertyId Web property UA-string associated with the upload.
 *  @param customDataSourceId Custom data source Id to which the data being
 *    uploaded belongs.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    1GB. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAnalyticsQuery_ManagementUploadsUploadData
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId
                  uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets a web property to which the user has access.
 *
 *  Method: analytics.management.webproperties.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertiesGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertiesGetWithaccountId:webPropertyId:]

/** Account ID to retrieve the web property for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** ID to retrieve the web property for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Webproperty.
 *
 *  Gets a web property to which the user has access.
 *
 *  @param accountId Account ID to retrieve the web property for.
 *  @param webPropertyId ID to retrieve the web property for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertiesGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Create a new property if the account has fewer than 20 properties. Web
 *  properties are visible in the Google Analytics interface only if they have
 *  at least one profile.
 *
 *  Method: analytics.management.webproperties.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertiesInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertiesInsertWithObject:accountId:]

/** Account ID to create the web property for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Fetches a @c GTLRAnalytics_Webproperty.
 *
 *  Create a new property if the account has fewer than 20 properties. Web
 *  properties are visible in the Google Analytics interface only if they have
 *  at least one profile.
 *
 *  @param object The @c GTLRAnalytics_Webproperty to include in the query.
 *  @param accountId Account ID to create the web property for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertiesInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId;

@end

/**
 *  Lists web properties to which the user has access.
 *
 *  Method: analytics.management.webproperties.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertiesList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertiesListWithaccountId:]

/**
 *  Account ID to retrieve web properties for. Can either be a specific account
 *  ID or '~all', which refers to all the accounts that user has access to.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The maximum number of web properties to include in this response. */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first entity to retrieve. Use this parameter as a pagination
 *  mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Fetches a @c GTLRAnalytics_Webproperties.
 *
 *  Lists web properties to which the user has access.
 *
 *  @param accountId Account ID to retrieve web properties for. Can either be a
 *    specific account ID or '~all', which refers to all the accounts that user
 *    has access to.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertiesList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId;

@end

/**
 *  Updates an existing web property. This method supports patch semantics.
 *
 *  Method: analytics.management.webproperties.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertiesPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertiesPatchWithObject:accountId:webPropertyId:]

/** Account ID to which the web property belongs */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Webproperty.
 *
 *  Updates an existing web property. This method supports patch semantics.
 *
 *  @param object The @c GTLRAnalytics_Webproperty to include in the query.
 *  @param accountId Account ID to which the web property belongs
 *  @param webPropertyId Web property ID
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertiesPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing web property.
 *
 *  Method: analytics.management.webproperties.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertiesUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertiesUpdateWithObject:accountId:webPropertyId:]

/** Account ID to which the web property belongs */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_Webproperty.
 *
 *  Updates an existing web property.
 *
 *  @param object The @c GTLRAnalytics_Webproperty to include in the query.
 *  @param accountId Account ID to which the web property belongs
 *  @param webPropertyId Web property ID
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertiesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Deletes a web property-Google Ads link.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksDeleteWithaccountId:webPropertyId:webPropertyAdWordsLinkId:]

/** ID of the account which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property Google Ads link ID. */
@property(nonatomic, copy, nullable) NSString *webPropertyAdWordsLinkId;

/** Web property ID to delete the Google Ads link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a web property-Google Ads link.
 *
 *  @param accountId ID of the account which the given web property belongs to.
 *  @param webPropertyId Web property ID to delete the Google Ads link for.
 *  @param webPropertyAdWordsLinkId Web property Google Ads link ID.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
          webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId;

@end

/**
 *  Returns a web property-Google Ads link to which the user has access.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksGet : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksGetWithaccountId:webPropertyId:webPropertyAdWordsLinkId:]

/** ID of the account which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property-Google Ads link ID. */
@property(nonatomic, copy, nullable) NSString *webPropertyAdWordsLinkId;

/** Web property ID to retrieve the Google Ads link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityAdWordsLink.
 *
 *  Returns a web property-Google Ads link to which the user has access.
 *
 *  @param accountId ID of the account which the given web property belongs to.
 *  @param webPropertyId Web property ID to retrieve the Google Ads link for.
 *  @param webPropertyAdWordsLinkId Web property-Google Ads link ID.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksGet
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
          webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId;

@end

/**
 *  Creates a webProperty-Google Ads link.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksInsertWithObject:accountId:webPropertyId:]

/** ID of the Google Analytics account to create the link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property ID to create the link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityAdWordsLink.
 *
 *  Creates a webProperty-Google Ads link.
 *
 *  @param object The @c GTLRAnalytics_EntityAdWordsLink to include in the
 *    query.
 *  @param accountId ID of the Google Analytics account to create the link for.
 *  @param webPropertyId Web property ID to create the link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists webProperty-Google Ads links for a given web property.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksListWithaccountId:webPropertyId:]

/** ID of the account which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of webProperty-Google Ads links to include in this
 *  response.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first webProperty-Google Ads link to retrieve. Use this
 *  parameter as a pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/** Web property ID to retrieve the Google Ads links for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityAdWordsLinks.
 *
 *  Lists webProperty-Google Ads links for a given web property.
 *
 *  @param accountId ID of the account which the given web property belongs to.
 *  @param webPropertyId Web property ID to retrieve the Google Ads links for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates an existing webProperty-Google Ads link. This method supports patch
 *  semantics.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksPatch : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksPatchWithObject:accountId:webPropertyId:webPropertyAdWordsLinkId:]

/** ID of the account which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property-Google Ads link ID. */
@property(nonatomic, copy, nullable) NSString *webPropertyAdWordsLinkId;

/** Web property ID to retrieve the Google Ads link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityAdWordsLink.
 *
 *  Updates an existing webProperty-Google Ads link. This method supports patch
 *  semantics.
 *
 *  @param object The @c GTLRAnalytics_EntityAdWordsLink to include in the
 *    query.
 *  @param accountId ID of the account which the given web property belongs to.
 *  @param webPropertyId Web property ID to retrieve the Google Ads link for.
 *  @param webPropertyAdWordsLinkId Web property-Google Ads link ID.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksPatch
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
       webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId;

@end

/**
 *  Updates an existing webProperty-Google Ads link.
 *
 *  Method: analytics.management.webPropertyAdWordsLinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsEdit
 */
@interface GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebPropertyAdWordsLinksUpdateWithObject:accountId:webPropertyId:webPropertyAdWordsLinkId:]

/** ID of the account which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web property-Google Ads link ID. */
@property(nonatomic, copy, nullable) NSString *webPropertyAdWordsLinkId;

/** Web property ID to retrieve the Google Ads link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityAdWordsLink.
 *
 *  Updates an existing webProperty-Google Ads link.
 *
 *  @param object The @c GTLRAnalytics_EntityAdWordsLink to include in the
 *    query.
 *  @param accountId ID of the account which the given web property belongs to.
 *  @param webPropertyId Web property ID to retrieve the Google Ads link for.
 *  @param webPropertyAdWordsLinkId Web property-Google Ads link ID.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
       webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId;

@end

/**
 *  Removes a user from the given web property.
 *
 *  Method: analytics.management.webpropertyUserLinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertyUserLinksDelete : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertyUserLinksDeleteWithaccountId:webPropertyId:linkId:]

/** Account ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Web Property ID to delete the user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a user from the given web property.
 *
 *  @param accountId Account ID to delete the user link for.
 *  @param webPropertyId Web Property ID to delete the user link for.
 *  @param linkId Link ID to delete the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertyUserLinksDelete
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                            linkId:(NSString *)linkId;

@end

/**
 *  Adds a new user to the given web property.
 *
 *  Method: analytics.management.webpropertyUserLinks.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertyUserLinksInsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertyUserLinksInsertWithObject:accountId:webPropertyId:]

/** Account ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Web Property ID to create the user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Adds a new user to the given web property.
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to create the user link for.
 *  @param webPropertyId Web Property ID to create the user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertyUserLinksInsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Lists webProperty-user links for a given web property.
 *
 *  Method: analytics.management.webpropertyUserLinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 *    @c kGTLRAuthScopeAnalyticsManageUsersReadonly
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertyUserLinksList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertyUserLinksListWithaccountId:webPropertyId:]

/** Account ID which the given web property belongs to. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The maximum number of webProperty-user Links to include in this response.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  An index of the first webProperty-user link to retrieve. Use this parameter
 *  as a pagination mechanism along with the max-results parameter.
 */
@property(nonatomic, assign) NSInteger startIndex;

/**
 *  Web Property ID for the webProperty-user links to retrieve. Can either be a
 *  specific web property ID or '~all', which refers to all the web properties
 *  that user has access to.
 */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLinks.
 *
 *  Lists webProperty-user links for a given web property.
 *
 *  @param accountId Account ID which the given web property belongs to.
 *  @param webPropertyId Web Property ID for the webProperty-user links to
 *    retrieve. Can either be a specific web property ID or '~all', which refers
 *    to all the web properties that user has access to.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertyUserLinksList
 */
+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId;

@end

/**
 *  Updates permissions for an existing user on the given web property.
 *
 *  Method: analytics.management.webpropertyUserLinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsManageUsers
 */
@interface GTLRAnalyticsQuery_ManagementWebpropertyUserLinksUpdate : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForManagementWebpropertyUserLinksUpdateWithObject:accountId:webPropertyId:linkId:]

/** Account ID to update the account-user link for. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Link ID to update the account-user link for. */
@property(nonatomic, copy, nullable) NSString *linkId;

/** Web property ID to update the account-user link for. */
@property(nonatomic, copy, nullable) NSString *webPropertyId;

/**
 *  Fetches a @c GTLRAnalytics_EntityUserLink.
 *
 *  Updates permissions for an existing user on the given web property.
 *
 *  @param object The @c GTLRAnalytics_EntityUserLink to include in the query.
 *  @param accountId Account ID to update the account-user link for.
 *  @param webPropertyId Web property ID to update the account-user link for.
 *  @param linkId Link ID to update the account-user link for.
 *
 *  @return GTLRAnalyticsQuery_ManagementWebpropertyUserLinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                         linkId:(NSString *)linkId;

@end

/**
 *  Lists all columns for a report type
 *
 *  Method: analytics.metadata.columns.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalytics
 *    @c kGTLRAuthScopeAnalyticsEdit
 *    @c kGTLRAuthScopeAnalyticsReadonly
 */
@interface GTLRAnalyticsQuery_MetadataColumnsList : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForMetadataColumnsListWithreportType:]

/**
 *  Report type. Allowed Values: 'ga'. Where 'ga' corresponds to the Core
 *  Reporting API
 */
@property(nonatomic, copy, nullable) NSString *reportType;

/**
 *  Fetches a @c GTLRAnalytics_Columns.
 *
 *  Lists all columns for a report type
 *
 *  @param reportType Report type. Allowed Values: 'ga'. Where 'ga' corresponds
 *    to the Core Reporting API
 *
 *  @return GTLRAnalyticsQuery_MetadataColumnsList
 */
+ (instancetype)queryWithReportType:(NSString *)reportType;

@end

/**
 *  Creates an account ticket.
 *
 *  Method: analytics.provisioning.createAccountTicket
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsProvision
 */
@interface GTLRAnalyticsQuery_ProvisioningCreateAccountTicket : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForProvisioningCreateAccountTicketWithObject:]

/**
 *  Fetches a @c GTLRAnalytics_AccountTicket.
 *
 *  Creates an account ticket.
 *
 *  @param object The @c GTLRAnalytics_AccountTicket to include in the query.
 *
 *  @return GTLRAnalyticsQuery_ProvisioningCreateAccountTicket
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_AccountTicket *)object;

@end

/**
 *  Provision account.
 *
 *  Method: analytics.provisioning.createAccountTree
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsProvision
 */
@interface GTLRAnalyticsQuery_ProvisioningCreateAccountTree : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForProvisioningCreateAccountTreeWithObject:]

/**
 *  Fetches a @c GTLRAnalytics_AccountTreeResponse.
 *
 *  Provision account.
 *
 *  @param object The @c GTLRAnalytics_AccountTreeRequest to include in the
 *    query.
 *
 *  @return GTLRAnalyticsQuery_ProvisioningCreateAccountTree
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_AccountTreeRequest *)object;

@end

/**
 *  Insert or update a user deletion requests.
 *
 *  Method: analytics.userDeletion.userDeletionRequest.upsert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAnalyticsUserDeletion
 */
@interface GTLRAnalyticsQuery_UserDeletionUserDeletionRequestUpsert : GTLRAnalyticsQuery
// Previous library name was
//   +[GTLQueryAnalytics queryForUserDeletionUserDeletionRequestUpsertWithObject:]

/**
 *  Fetches a @c GTLRAnalytics_UserDeletionRequest.
 *
 *  Insert or update a user deletion requests.
 *
 *  @param object The @c GTLRAnalytics_UserDeletionRequest to include in the
 *    query.
 *
 *  @return GTLRAnalyticsQuery_UserDeletionUserDeletionRequestUpsert
 */
+ (instancetype)queryWithObject:(GTLRAnalytics_UserDeletionRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
