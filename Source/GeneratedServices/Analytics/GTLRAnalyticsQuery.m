// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Analytics API (analytics/v3)
// Description:
//   Views and manages your Google Analytics data.
// Documentation:
//   https://developers.google.com/analytics/

#import "GTLRAnalyticsQuery.h"

#import "GTLRAnalyticsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// output
NSString * const kGTLRAnalyticsOutputDataTable = @"dataTable";
NSString * const kGTLRAnalyticsOutputJson      = @"json";

// samplingLevel
NSString * const kGTLRAnalyticsSamplingLevelDefault         = @"DEFAULT";
NSString * const kGTLRAnalyticsSamplingLevelFaster          = @"FASTER";
NSString * const kGTLRAnalyticsSamplingLevelHigherPrecision = @"HIGHER_PRECISION";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAnalyticsQuery

@dynamic fields;

@end

@implementation GTLRAnalyticsQuery_DataGaGet

@dynamic dimensions, endDate, filters, ids, includeEmptyRows, maxResults,
         metrics, output, samplingLevel, segment, sort, startDate, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"endDate" : @"end-date",
    @"includeEmptyRows" : @"include-empty-rows",
    @"maxResults" : @"max-results",
    @"startDate" : @"start-date",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithIds:(NSString *)ids
                   startDate:(NSString *)startDate
                     endDate:(NSString *)endDate
                     metrics:(NSString *)metrics {
  NSString *pathURITemplate = @"data/ga";
  GTLRAnalyticsQuery_DataGaGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.ids = ids;
  query.startDate = startDate;
  query.endDate = endDate;
  query.metrics = metrics;
  query.expectedObjectClass = [GTLRAnalytics_GaData class];
  query.loggingName = @"analytics.data.ga.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_DataMcfGet

@dynamic dimensions, endDate, filters, ids, maxResults, metrics, samplingLevel,
         sort, startDate, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"endDate" : @"end-date",
    @"maxResults" : @"max-results",
    @"startDate" : @"start-date",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithIds:(NSString *)ids
                   startDate:(NSString *)startDate
                     endDate:(NSString *)endDate
                     metrics:(NSString *)metrics {
  NSString *pathURITemplate = @"data/mcf";
  GTLRAnalyticsQuery_DataMcfGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.ids = ids;
  query.startDate = startDate;
  query.endDate = endDate;
  query.metrics = metrics;
  query.expectedObjectClass = [GTLRAnalytics_McfData class];
  query.loggingName = @"analytics.data.mcf.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_DataRealtimeGet

@dynamic dimensions, filters, ids, maxResults, metrics, sort;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"maxResults" : @"max-results" };
}

+ (instancetype)queryWithIds:(NSString *)ids
                     metrics:(NSString *)metrics {
  NSString *pathURITemplate = @"data/realtime";
  GTLRAnalyticsQuery_DataRealtimeGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.ids = ids;
  query.metrics = metrics;
  query.expectedObjectClass = [GTLRAnalytics_RealtimeData class];
  query.loggingName = @"analytics.data.realtime.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountsList

@dynamic maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"management/accounts";
  GTLRAnalyticsQuery_ManagementAccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAnalytics_Accounts class];
  query.loggingName = @"analytics.management.accounts.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountSummariesList

@dynamic maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"management/accountSummaries";
  GTLRAnalyticsQuery_ManagementAccountSummariesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAnalytics_AccountSummaries class];
  query.loggingName = @"analytics.management.accountSummaries.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountUserLinksDelete

@dynamic accountId, linkId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                            linkId:(NSString *)linkId {
  NSArray *pathParams = @[
    @"accountId", @"linkId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementAccountUserLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.linkId = linkId;
  query.loggingName = @"analytics.management.accountUserLinks.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountUserLinksInsert

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementAccountUserLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.accountUserLinks.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountUserLinksList

@dynamic accountId, maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementAccountUserLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLinks class];
  query.loggingName = @"analytics.management.accountUserLinks.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementAccountUserLinksUpdate

@dynamic accountId, linkId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                         linkId:(NSString *)linkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"linkId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementAccountUserLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.accountUserLinks.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementClientIdHashClientId

+ (instancetype)queryWithObject:(GTLRAnalytics_HashClientIdRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"management/clientId:hashClientId";
  GTLRAnalyticsQuery_ManagementClientIdHashClientId *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRAnalytics_HashClientIdResponse class];
  query.loggingName = @"analytics.management.clientId.hashClientId";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDataSourcesList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources";
  GTLRAnalyticsQuery_ManagementCustomDataSourcesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDataSources class];
  query.loggingName = @"analytics.management.customDataSources.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDimensionsGet

@dynamic accountId, customDimensionId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                 customDimensionId:(NSString *)customDimensionId {
  NSArray *pathParams = @[
    @"accountId", @"customDimensionId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}";
  GTLRAnalyticsQuery_ManagementCustomDimensionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDimensionId = customDimensionId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDimension class];
  query.loggingName = @"analytics.management.customDimensions.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDimensionsInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions";
  GTLRAnalyticsQuery_ManagementCustomDimensionsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDimension class];
  query.loggingName = @"analytics.management.customDimensions.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDimensionsList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions";
  GTLRAnalyticsQuery_ManagementCustomDimensionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDimensions class];
  query.loggingName = @"analytics.management.customDimensions.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDimensionsPatch

@dynamic accountId, customDimensionId, ignoreCustomDataSourceLinks,
         webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
              customDimensionId:(NSString *)customDimensionId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"customDimensionId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}";
  GTLRAnalyticsQuery_ManagementCustomDimensionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDimensionId = customDimensionId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDimension class];
  query.loggingName = @"analytics.management.customDimensions.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomDimensionsUpdate

@dynamic accountId, customDimensionId, ignoreCustomDataSourceLinks,
         webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomDimension *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
              customDimensionId:(NSString *)customDimensionId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"customDimensionId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}";
  GTLRAnalyticsQuery_ManagementCustomDimensionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDimensionId = customDimensionId;
  query.expectedObjectClass = [GTLRAnalytics_CustomDimension class];
  query.loggingName = @"analytics.management.customDimensions.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomMetricsGet

@dynamic accountId, customMetricId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                    customMetricId:(NSString *)customMetricId {
  NSArray *pathParams = @[
    @"accountId", @"customMetricId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}";
  GTLRAnalyticsQuery_ManagementCustomMetricsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customMetricId = customMetricId;
  query.expectedObjectClass = [GTLRAnalytics_CustomMetric class];
  query.loggingName = @"analytics.management.customMetrics.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomMetricsInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics";
  GTLRAnalyticsQuery_ManagementCustomMetricsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_CustomMetric class];
  query.loggingName = @"analytics.management.customMetrics.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomMetricsList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics";
  GTLRAnalyticsQuery_ManagementCustomMetricsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_CustomMetrics class];
  query.loggingName = @"analytics.management.customMetrics.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomMetricsPatch

@dynamic accountId, customMetricId, ignoreCustomDataSourceLinks, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                 customMetricId:(NSString *)customMetricId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"customMetricId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}";
  GTLRAnalyticsQuery_ManagementCustomMetricsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customMetricId = customMetricId;
  query.expectedObjectClass = [GTLRAnalytics_CustomMetric class];
  query.loggingName = @"analytics.management.customMetrics.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementCustomMetricsUpdate

@dynamic accountId, customMetricId, ignoreCustomDataSourceLinks, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_CustomMetric *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                 customMetricId:(NSString *)customMetricId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"customMetricId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}";
  GTLRAnalyticsQuery_ManagementCustomMetricsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customMetricId = customMetricId;
  query.expectedObjectClass = [GTLRAnalytics_CustomMetric class];
  query.loggingName = @"analytics.management.customMetrics.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsDelete

@dynamic accountId, experimentId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                      experimentId:(NSString *)experimentId {
  NSArray *pathParams = @[
    @"accountId", @"experimentId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}";
  GTLRAnalyticsQuery_ManagementExperimentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.experimentId = experimentId;
  query.loggingName = @"analytics.management.experiments.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsGet

@dynamic accountId, experimentId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                      experimentId:(NSString *)experimentId {
  NSArray *pathParams = @[
    @"accountId", @"experimentId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}";
  GTLRAnalyticsQuery_ManagementExperimentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.experimentId = experimentId;
  query.expectedObjectClass = [GTLRAnalytics_Experiment class];
  query.loggingName = @"analytics.management.experiments.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsInsert

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments";
  GTLRAnalyticsQuery_ManagementExperimentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Experiment class];
  query.loggingName = @"analytics.management.experiments.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsList

@dynamic accountId, maxResults, profileId, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments";
  GTLRAnalyticsQuery_ManagementExperimentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Experiments class];
  query.loggingName = @"analytics.management.experiments.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsPatch

@dynamic accountId, experimentId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                   experimentId:(NSString *)experimentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"experimentId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}";
  GTLRAnalyticsQuery_ManagementExperimentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.experimentId = experimentId;
  query.expectedObjectClass = [GTLRAnalytics_Experiment class];
  query.loggingName = @"analytics.management.experiments.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementExperimentsUpdate

@dynamic accountId, experimentId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Experiment *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                   experimentId:(NSString *)experimentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"experimentId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}";
  GTLRAnalyticsQuery_ManagementExperimentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.experimentId = experimentId;
  query.expectedObjectClass = [GTLRAnalytics_Experiment class];
  query.loggingName = @"analytics.management.experiments.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersDelete

@dynamic accountId, filterId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                          filterId:(NSString *)filterId {
  NSArray *pathParams = @[
    @"accountId", @"filterId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters/{filterId}";
  GTLRAnalyticsQuery_ManagementFiltersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.filterId = filterId;
  query.expectedObjectClass = [GTLRAnalytics_Filter class];
  query.loggingName = @"analytics.management.filters.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersGet

@dynamic accountId, filterId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                          filterId:(NSString *)filterId {
  NSArray *pathParams = @[
    @"accountId", @"filterId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters/{filterId}";
  GTLRAnalyticsQuery_ManagementFiltersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.filterId = filterId;
  query.expectedObjectClass = [GTLRAnalytics_Filter class];
  query.loggingName = @"analytics.management.filters.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersInsert

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters";
  GTLRAnalyticsQuery_ManagementFiltersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_Filter class];
  query.loggingName = @"analytics.management.filters.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersList

@dynamic accountId, maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters";
  GTLRAnalyticsQuery_ManagementFiltersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_Filters class];
  query.loggingName = @"analytics.management.filters.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersPatch

@dynamic accountId, filterId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId
                       filterId:(NSString *)filterId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"filterId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters/{filterId}";
  GTLRAnalyticsQuery_ManagementFiltersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.filterId = filterId;
  query.expectedObjectClass = [GTLRAnalytics_Filter class];
  query.loggingName = @"analytics.management.filters.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementFiltersUpdate

@dynamic accountId, filterId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Filter *)object
                      accountId:(NSString *)accountId
                       filterId:(NSString *)filterId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"filterId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/filters/{filterId}";
  GTLRAnalyticsQuery_ManagementFiltersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.filterId = filterId;
  query.expectedObjectClass = [GTLRAnalytics_Filter class];
  query.loggingName = @"analytics.management.filters.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementGoalsGet

@dynamic accountId, goalId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            goalId:(NSString *)goalId {
  NSArray *pathParams = @[
    @"accountId", @"goalId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}";
  GTLRAnalyticsQuery_ManagementGoalsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.goalId = goalId;
  query.expectedObjectClass = [GTLRAnalytics_Goal class];
  query.loggingName = @"analytics.management.goals.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementGoalsInsert

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals";
  GTLRAnalyticsQuery_ManagementGoalsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Goal class];
  query.loggingName = @"analytics.management.goals.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementGoalsList

@dynamic accountId, maxResults, profileId, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals";
  GTLRAnalyticsQuery_ManagementGoalsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Goals class];
  query.loggingName = @"analytics.management.goals.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementGoalsPatch

@dynamic accountId, goalId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         goalId:(NSString *)goalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"goalId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}";
  GTLRAnalyticsQuery_ManagementGoalsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.goalId = goalId;
  query.expectedObjectClass = [GTLRAnalytics_Goal class];
  query.loggingName = @"analytics.management.goals.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementGoalsUpdate

@dynamic accountId, goalId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Goal *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         goalId:(NSString *)goalId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"goalId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}";
  GTLRAnalyticsQuery_ManagementGoalsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.goalId = goalId;
  query.expectedObjectClass = [GTLRAnalytics_Goal class];
  query.loggingName = @"analytics.management.goals.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksDelete

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId {
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.loggingName = @"analytics.management.profileFilterLinks.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksGet

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId {
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_ProfileFilterLink class];
  query.loggingName = @"analytics.management.profileFilterLinks.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksInsert

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_ProfileFilterLink class];
  query.loggingName = @"analytics.management.profileFilterLinks.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksList

@dynamic accountId, maxResults, profileId, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_ProfileFilterLinks class];
  query.loggingName = @"analytics.management.profileFilterLinks.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksPatch

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_ProfileFilterLink class];
  query.loggingName = @"analytics.management.profileFilterLinks.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileFilterLinksUpdate

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_ProfileFilterLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileFilterLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_ProfileFilterLink class];
  query.loggingName = @"analytics.management.profileFilterLinks.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesDelete

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}";
  GTLRAnalyticsQuery_ManagementProfilesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.loggingName = @"analytics.management.profiles.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesGet

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}";
  GTLRAnalyticsQuery_ManagementProfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Profile class];
  query.loggingName = @"analytics.management.profiles.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles";
  GTLRAnalyticsQuery_ManagementProfilesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_Profile class];
  query.loggingName = @"analytics.management.profiles.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles";
  GTLRAnalyticsQuery_ManagementProfilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_Profiles class];
  query.loggingName = @"analytics.management.profiles.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesPatch

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}";
  GTLRAnalyticsQuery_ManagementProfilesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Profile class];
  query.loggingName = @"analytics.management.profiles.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfilesUpdate

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Profile *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}";
  GTLRAnalyticsQuery_ManagementProfilesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_Profile class];
  query.loggingName = @"analytics.management.profiles.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileUserLinksDelete

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                            linkId:(NSString *)linkId {
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileUserLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.loggingName = @"analytics.management.profileUserLinks.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileUserLinksInsert

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementProfileUserLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.profileUserLinks.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileUserLinksList

@dynamic accountId, maxResults, profileId, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementProfileUserLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLinks class];
  query.loggingName = @"analytics.management.profileUserLinks.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementProfileUserLinksUpdate

@dynamic accountId, linkId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId
                         linkId:(NSString *)linkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementProfileUserLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.profileUserLinks.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudienceDelete

@dynamic accountId, remarketingAudienceId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
             remarketingAudienceId:(NSString *)remarketingAudienceId {
  NSArray *pathParams = @[
    @"accountId", @"remarketingAudienceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}";
  GTLRAnalyticsQuery_ManagementRemarketingAudienceDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.remarketingAudienceId = remarketingAudienceId;
  query.loggingName = @"analytics.management.remarketingAudience.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudienceGet

@dynamic accountId, remarketingAudienceId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
             remarketingAudienceId:(NSString *)remarketingAudienceId {
  NSArray *pathParams = @[
    @"accountId", @"remarketingAudienceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}";
  GTLRAnalyticsQuery_ManagementRemarketingAudienceGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.remarketingAudienceId = remarketingAudienceId;
  query.expectedObjectClass = [GTLRAnalytics_RemarketingAudience class];
  query.loggingName = @"analytics.management.remarketingAudience.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudienceInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences";
  GTLRAnalyticsQuery_ManagementRemarketingAudienceInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_RemarketingAudience class];
  query.loggingName = @"analytics.management.remarketingAudience.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudienceList

@dynamic accountId, maxResults, startIndex, type, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences";
  GTLRAnalyticsQuery_ManagementRemarketingAudienceList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_RemarketingAudiences class];
  query.loggingName = @"analytics.management.remarketingAudience.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudiencePatch

@dynamic accountId, remarketingAudienceId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
          remarketingAudienceId:(NSString *)remarketingAudienceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"remarketingAudienceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}";
  GTLRAnalyticsQuery_ManagementRemarketingAudiencePatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.remarketingAudienceId = remarketingAudienceId;
  query.expectedObjectClass = [GTLRAnalytics_RemarketingAudience class];
  query.loggingName = @"analytics.management.remarketingAudience.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementRemarketingAudienceUpdate

@dynamic accountId, remarketingAudienceId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_RemarketingAudience *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
          remarketingAudienceId:(NSString *)remarketingAudienceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"remarketingAudienceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}";
  GTLRAnalyticsQuery_ManagementRemarketingAudienceUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.remarketingAudienceId = remarketingAudienceId;
  query.expectedObjectClass = [GTLRAnalytics_RemarketingAudience class];
  query.loggingName = @"analytics.management.remarketingAudience.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementSegmentsList

@dynamic maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"management/segments";
  GTLRAnalyticsQuery_ManagementSegmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRAnalytics_Segments class];
  query.loggingName = @"analytics.management.segments.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUnsampledReportsDelete

@dynamic accountId, profileId, unsampledReportId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                 unsampledReportId:(NSString *)unsampledReportId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"unsampledReportId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}";
  GTLRAnalyticsQuery_ManagementUnsampledReportsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.unsampledReportId = unsampledReportId;
  query.loggingName = @"analytics.management.unsampledReports.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUnsampledReportsGet

@dynamic accountId, profileId, unsampledReportId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId
                 unsampledReportId:(NSString *)unsampledReportId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"unsampledReportId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}";
  GTLRAnalyticsQuery_ManagementUnsampledReportsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.unsampledReportId = unsampledReportId;
  query.expectedObjectClass = [GTLRAnalytics_UnsampledReport class];
  query.loggingName = @"analytics.management.unsampledReports.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUnsampledReportsInsert

@dynamic accountId, profileId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_UnsampledReport *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                      profileId:(NSString *)profileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports";
  GTLRAnalyticsQuery_ManagementUnsampledReportsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_UnsampledReport class];
  query.loggingName = @"analytics.management.unsampledReports.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUnsampledReportsList

@dynamic accountId, maxResults, profileId, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                         profileId:(NSString *)profileId {
  NSArray *pathParams = @[
    @"accountId", @"profileId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports";
  GTLRAnalyticsQuery_ManagementUnsampledReportsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.profileId = profileId;
  query.expectedObjectClass = [GTLRAnalytics_UnsampledReports class];
  query.loggingName = @"analytics.management.unsampledReports.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUploadsDeleteUploadData

@dynamic accountId, customDataSourceId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_DataimportDeleteUploadDataRequest *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
             customDataSourceId:(NSString *)customDataSourceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"customDataSourceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData";
  GTLRAnalyticsQuery_ManagementUploadsDeleteUploadData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDataSourceId = customDataSourceId;
  query.loggingName = @"analytics.management.uploads.deleteUploadData";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUploadsGet

@dynamic accountId, customDataSourceId, uploadId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId
                          uploadId:(NSString *)uploadId {
  NSArray *pathParams = @[
    @"accountId", @"customDataSourceId", @"uploadId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}";
  GTLRAnalyticsQuery_ManagementUploadsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDataSourceId = customDataSourceId;
  query.uploadId = uploadId;
  query.expectedObjectClass = [GTLRAnalytics_Upload class];
  query.loggingName = @"analytics.management.uploads.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUploadsList

@dynamic accountId, customDataSourceId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId {
  NSArray *pathParams = @[
    @"accountId", @"customDataSourceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads";
  GTLRAnalyticsQuery_ManagementUploadsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDataSourceId = customDataSourceId;
  query.expectedObjectClass = [GTLRAnalytics_Uploads class];
  query.loggingName = @"analytics.management.uploads.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementUploadsUploadData

@dynamic accountId, customDataSourceId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                customDataSourceId:(NSString *)customDataSourceId
                  uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"accountId", @"customDataSourceId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads";
  GTLRAnalyticsQuery_ManagementUploadsUploadData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.customDataSourceId = customDataSourceId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAnalytics_Upload class];
  query.loggingName = @"analytics.management.uploads.uploadData";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertiesGet

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}";
  GTLRAnalyticsQuery_ManagementWebpropertiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_Webproperty class];
  query.loggingName = @"analytics.management.webproperties.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertiesInsert

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties";
  GTLRAnalyticsQuery_ManagementWebpropertiesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_Webproperty class];
  query.loggingName = @"analytics.management.webproperties.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertiesList

@dynamic accountId, maxResults, startIndex;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties";
  GTLRAnalyticsQuery_ManagementWebpropertiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRAnalytics_Webproperties class];
  query.loggingName = @"analytics.management.webproperties.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertiesPatch

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}";
  GTLRAnalyticsQuery_ManagementWebpropertiesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_Webproperty class];
  query.loggingName = @"analytics.management.webproperties.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertiesUpdate

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_Webproperty *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}";
  GTLRAnalyticsQuery_ManagementWebpropertiesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_Webproperty class];
  query.loggingName = @"analytics.management.webproperties.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksDelete

@dynamic accountId, webPropertyAdWordsLinkId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
          webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyAdWordsLinkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.webPropertyAdWordsLinkId = webPropertyAdWordsLinkId;
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksGet

@dynamic accountId, webPropertyAdWordsLinkId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
          webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyAdWordsLinkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.webPropertyAdWordsLinkId = webPropertyAdWordsLinkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityAdWordsLink class];
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.get";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_EntityAdWordsLink class];
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_EntityAdWordsLinks class];
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksPatch

@dynamic accountId, webPropertyAdWordsLinkId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
       webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyAdWordsLinkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.webPropertyAdWordsLinkId = webPropertyAdWordsLinkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityAdWordsLink class];
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.patch";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksUpdate

@dynamic accountId, webPropertyAdWordsLinkId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityAdWordsLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
       webPropertyAdWordsLinkId:(NSString *)webPropertyAdWordsLinkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyAdWordsLinkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}";
  GTLRAnalyticsQuery_ManagementWebPropertyAdWordsLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.webPropertyAdWordsLinkId = webPropertyAdWordsLinkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityAdWordsLink class];
  query.loggingName = @"analytics.management.webPropertyAdWordsLinks.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertyUserLinksDelete

@dynamic accountId, linkId, webPropertyId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId
                            linkId:(NSString *)linkId {
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementWebpropertyUserLinksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.linkId = linkId;
  query.loggingName = @"analytics.management.webpropertyUserLinks.delete";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertyUserLinksInsert

@dynamic accountId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementWebpropertyUserLinksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.webpropertyUserLinks.insert";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertyUserLinksList

@dynamic accountId, maxResults, startIndex, webPropertyId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"maxResults" : @"max-results",
    @"startIndex" : @"start-index"
  };
  return map;
}

+ (instancetype)queryWithAccountId:(NSString *)accountId
                     webPropertyId:(NSString *)webPropertyId {
  NSArray *pathParams = @[
    @"accountId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks";
  GTLRAnalyticsQuery_ManagementWebpropertyUserLinksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLinks class];
  query.loggingName = @"analytics.management.webpropertyUserLinks.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ManagementWebpropertyUserLinksUpdate

@dynamic accountId, linkId, webPropertyId;

+ (instancetype)queryWithObject:(GTLRAnalytics_EntityUserLink *)object
                      accountId:(NSString *)accountId
                  webPropertyId:(NSString *)webPropertyId
                         linkId:(NSString *)linkId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"linkId", @"webPropertyId"
  ];
  NSString *pathURITemplate = @"management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}";
  GTLRAnalyticsQuery_ManagementWebpropertyUserLinksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.webPropertyId = webPropertyId;
  query.linkId = linkId;
  query.expectedObjectClass = [GTLRAnalytics_EntityUserLink class];
  query.loggingName = @"analytics.management.webpropertyUserLinks.update";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_MetadataColumnsList

@dynamic reportType;

+ (instancetype)queryWithReportType:(NSString *)reportType {
  NSArray *pathParams = @[ @"reportType" ];
  NSString *pathURITemplate = @"metadata/{reportType}/columns";
  GTLRAnalyticsQuery_MetadataColumnsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.reportType = reportType;
  query.expectedObjectClass = [GTLRAnalytics_Columns class];
  query.loggingName = @"analytics.metadata.columns.list";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ProvisioningCreateAccountTicket

+ (instancetype)queryWithObject:(GTLRAnalytics_AccountTicket *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"provisioning/createAccountTicket";
  GTLRAnalyticsQuery_ProvisioningCreateAccountTicket *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRAnalytics_AccountTicket class];
  query.loggingName = @"analytics.provisioning.createAccountTicket";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_ProvisioningCreateAccountTree

+ (instancetype)queryWithObject:(GTLRAnalytics_AccountTreeRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"provisioning/createAccountTree";
  GTLRAnalyticsQuery_ProvisioningCreateAccountTree *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRAnalytics_AccountTreeResponse class];
  query.loggingName = @"analytics.provisioning.createAccountTree";
  return query;
}

@end

@implementation GTLRAnalyticsQuery_UserDeletionUserDeletionRequestUpsert

+ (instancetype)queryWithObject:(GTLRAnalytics_UserDeletionRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"userDeletion/userDeletionRequests:upsert";
  GTLRAnalyticsQuery_UserDeletionUserDeletionRequestUpsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRAnalytics_UserDeletionRequest class];
  query.loggingName = @"analytics.userDeletion.userDeletionRequest.upsert";
  return query;
}

@end
