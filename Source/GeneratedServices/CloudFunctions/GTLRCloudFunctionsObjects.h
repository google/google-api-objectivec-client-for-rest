// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Functions API (cloudfunctions/v1)
// Description:
//   Manages lightweight user-provided functions executed in response to events.
// Documentation:
//   https://cloud.google.com/functions

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudFunctions_AuditConfig;
@class GTLRCloudFunctions_AuditLogConfig;
@class GTLRCloudFunctions_Binding;
@class GTLRCloudFunctions_CloudFunction;
@class GTLRCloudFunctions_CloudFunction_EnvironmentVariables;
@class GTLRCloudFunctions_CloudFunction_Labels;
@class GTLRCloudFunctions_EventTrigger;
@class GTLRCloudFunctions_Expr;
@class GTLRCloudFunctions_FailurePolicy;
@class GTLRCloudFunctions_HttpsTrigger;
@class GTLRCloudFunctions_Location;
@class GTLRCloudFunctions_Location_Labels;
@class GTLRCloudFunctions_Location_Metadata;
@class GTLRCloudFunctions_Operation;
@class GTLRCloudFunctions_Operation_Metadata;
@class GTLRCloudFunctions_Operation_Response;
@class GTLRCloudFunctions_OperationMetadataV1_Request;
@class GTLRCloudFunctions_OperationMetadataV1Beta2_Request;
@class GTLRCloudFunctions_Policy;
@class GTLRCloudFunctions_Retry;
@class GTLRCloudFunctions_SourceRepository;
@class GTLRCloudFunctions_Status;
@class GTLRCloudFunctions_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudFunctions_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFunctions_CloudFunction.status

/**
 *  Function has been succesfully deployed and is serving.
 *
 *  Value: "ACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_Active;
/**
 *  Not specified. Invalid state.
 *
 *  Value: "CLOUD_FUNCTION_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_CloudFunctionStatusUnspecified;
/**
 *  Function is being deleted.
 *
 *  Value: "DELETE_IN_PROGRESS"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_DeleteInProgress;
/**
 *  Function is being created or updated.
 *
 *  Value: "DEPLOY_IN_PROGRESS"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_DeployInProgress;
/**
 *  Function deployment failed and the function isnâ€™t serving.
 *
 *  Value: "OFFLINE"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_Offline;
/**
 *  Function deployment failed and the function serving state is undefined.
 *  The function should be updated or deleted to move it out of this state.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_CloudFunction_Status_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudFunctions_OperationMetadataV1.type

/**
 *  Triggered by CreateFunction call
 *
 *  Value: "CREATE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1_Type_CreateFunction;
/**
 *  Triggered by DeleteFunction call.
 *
 *  Value: "DELETE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1_Type_DeleteFunction;
/**
 *  Unknown operation type.
 *
 *  Value: "OPERATION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1_Type_OperationUnspecified;
/**
 *  Triggered by UpdateFunction call
 *
 *  Value: "UPDATE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1_Type_UpdateFunction;

// ----------------------------------------------------------------------------
// GTLRCloudFunctions_OperationMetadataV1Beta2.type

/**
 *  Triggered by CreateFunction call
 *
 *  Value: "CREATE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_CreateFunction;
/**
 *  Triggered by DeleteFunction call.
 *
 *  Value: "DELETE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_DeleteFunction;
/**
 *  Unknown operation type.
 *
 *  Value: "OPERATION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_OperationUnspecified;
/**
 *  Triggered by UpdateFunction call
 *
 *  Value: "UPDATE_FUNCTION"
 */
GTLR_EXTERN NSString * const kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_UpdateFunction;

/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "fooservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:bar\@gmail.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts foo\@gmail.com from DATA_READ logging, and
 *  bar\@gmail.com from DATA_WRITE logging.
 */
@interface GTLRCloudFunctions_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:foo\@gmail.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  foo\@gmail.com from DATA_READ logging.
 */
@interface GTLRCloudFunctions_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFunctions_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudFunctions_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudFunctions_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudFunctions_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRCloudFunctions_Binding : GTLRObject

/**
 *  Unimplemented. The condition that is associated with this binding.
 *  NOTE: an unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@gmail.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: A Google Apps domain name that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Request for the `CallFunction` method.
 */
@interface GTLRCloudFunctions_CallFunctionRequest : GTLRObject

/** Input to be passed to the function. */
@property(nonatomic, copy, nullable) NSString *data;

@end


/**
 *  Response of `CallFunction` method.
 */
@interface GTLRCloudFunctions_CallFunctionResponse : GTLRObject

/**
 *  Either system or user-function generated error. Set if execution
 *  was not successful.
 */
@property(nonatomic, copy, nullable) NSString *error;

/** Execution id of function invocation. */
@property(nonatomic, copy, nullable) NSString *executionId;

/**
 *  Result populated for successful execution of synchronous function. Will
 *  not be populated if function does not return a result through context.
 */
@property(nonatomic, copy, nullable) NSString *result;

@end


/**
 *  Describes a Cloud Function that contains user computation executed in
 *  response to an event. It encapsulate function and triggers configurations.
 *  LINT.IfChange
 */
@interface GTLRCloudFunctions_CloudFunction : GTLRObject

/**
 *  The amount of memory in MB available for a function.
 *  Defaults to 256MB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *availableMemoryMb;

/**
 *  User-provided description of a function.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The name of the function (as defined in source code) that will be
 *  executed. Defaults to the resource name suffix, if not specified. For
 *  backward compatibility, if function with given name is not found, then the
 *  system will try to use function named "function".
 *  For Node.js this is name of a function exported by the module specified
 *  in `source_location`.
 */
@property(nonatomic, copy, nullable) NSString *entryPoint;

/**
 *  Environment variables that shall be available during function execution.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_CloudFunction_EnvironmentVariables *environmentVariables;

/**
 *  A source that fires events in response to a condition in another service.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_EventTrigger *eventTrigger;

/** An HTTPS endpoint type of source that can be triggered via URL. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_HttpsTrigger *httpsTrigger;

/** Labels associated with this Cloud Function. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_CloudFunction_Labels *labels;

/**
 *  The limit on the maximum number of function instances that may coexist at a
 *  given time. This feature is currently in alpha, available only for
 *  whitelisted users.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstances;

/**
 *  A user-defined name of the function. Function names must be unique
 *  globally and match pattern `projects/ * /locations/ * /functions/ *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The VPC Network that this cloud function can connect to. It can be
 *  either the fully-qualified URI, or the short name of the network resource.
 *  If the short network name is used, the network must belong to the same
 *  project. Otherwise, it must belong to a project within the same
 *  organization. The format of this field is either
 *  `projects/{project}/global/networks/{network}` or `{network}`, where
 *  {project} is a project id where the network is defined, and {network} is
 *  the short name of the network.
 *  This field is mutually exclusive with `vpc_connector` and will be replaced
 *  by it.
 *  See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for
 *  more information on connecting Cloud projects.
 *  This feature is currently in alpha, available only for whitelisted users.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  The runtime in which the function is going to run. If empty, defaults to
 *  Node.js 6.
 */
@property(nonatomic, copy, nullable) NSString *runtime;

/** Output only. The email of the function's service account. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmail;

/**
 *  The Google Cloud Storage URL, starting with gs://, pointing to the zip
 *  archive which contains the function.
 */
@property(nonatomic, copy, nullable) NSString *sourceArchiveUrl;

/**
 *  **Beta Feature**
 *  The source repository where a function is hosted.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_SourceRepository *sourceRepository;

/**
 *  The Google Cloud Storage signed URL used for source uploading, generated
 *  by google.cloud.functions.v1.GenerateUploadUrl
 */
@property(nonatomic, copy, nullable) NSString *sourceUploadUrl;

/**
 *  Output only. Status of the function deployment.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_Active Function has been
 *        succesfully deployed and is serving. (Value: "ACTIVE")
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_CloudFunctionStatusUnspecified
 *        Not specified. Invalid state. (Value:
 *        "CLOUD_FUNCTION_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_DeleteInProgress Function
 *        is being deleted. (Value: "DELETE_IN_PROGRESS")
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_DeployInProgress Function
 *        is being created or updated. (Value: "DEPLOY_IN_PROGRESS")
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_Offline Function
 *        deployment failed and the function isnâ€™t serving. (Value: "OFFLINE")
 *    @arg @c kGTLRCloudFunctions_CloudFunction_Status_Unknown Function
 *        deployment failed and the function serving state is undefined.
 *        The function should be updated or deleted to move it out of this
 *        state. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The function execution timeout. Execution is considered failed and
 *  can be terminated if the function is not completed at the end of the
 *  timeout period. Defaults to 60 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Output only. The last update timestamp of a Cloud Function. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only.
 *  The version identifier of the Cloud Function. Each deployment attempt
 *  results in a new version of a function being created.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionId;

/**
 *  The VPC Network Connector that this cloud function can connect to. It can
 *  be either the fully-qualified URI, or the short name of the network
 *  connector resource. The format of this field is
 *  `projects/ * /locations/ * /connectors/ *`
 *  This field is mutually exclusive with `network` field and will eventually
 *  replace it.
 *  See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for
 *  more information on connecting Cloud projects.
 *  This feature is currently in alpha, available only for whitelisted users.
 */
@property(nonatomic, copy, nullable) NSString *vpcConnector;

@end


/**
 *  Environment variables that shall be available during function execution.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFunctions_CloudFunction_EnvironmentVariables : GTLRObject
@end


/**
 *  Labels associated with this Cloud Function.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFunctions_CloudFunction_Labels : GTLRObject
@end


/**
 *  Describes EventTrigger, used to request events be sent from another
 *  service.
 */
@interface GTLRCloudFunctions_EventTrigger : GTLRObject

/**
 *  Required. The type of event to observe. For example:
 *  `providers/cloud.storage/eventTypes/object.change` and
 *  `providers/cloud.pubsub/eventTypes/topic.publish`.
 *  Event types match pattern `providers/ * /eventTypes/ *.*`.
 *  The pattern contains:
 *  1. namespace: For example, `cloud.storage` and
 *  `google.firebase.analytics`.
 *  2. resource type: The type of resource on which event occurs. For
 *  example, the Google Cloud Storage API includes the type `object`.
 *  3. action: The action that generates the event. For example, action for
 *  a Google Cloud Storage Object is 'change'.
 *  These parts are lower case.
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/** Specifies policy for failed executions. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_FailurePolicy *failurePolicy;

/**
 *  Required. The resource(s) from which to observe events, for example,
 *  `projects/_/buckets/myBucket`.
 *  Not all syntactically correct values are accepted by all services. For
 *  example:
 *  1. The authorization model must support it. Google Cloud Functions
 *  only allows EventTriggers to be deployed that observe resources in the
 *  same project as the `CloudFunction`.
 *  2. The resource type must match the pattern expected for an
 *  `event_type`. For example, an `EventTrigger` that has an
 *  `event_type` of "google.pubsub.topic.publish" should have a resource
 *  that matches Google Cloud Pub/Sub topics.
 *  Additionally, some services may support short names when creating an
 *  `EventTrigger`. These will always be returned in the normalized "long"
 *  format.
 *  See each *service's* documentation for supported formats.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  The hostname of the service that should be observed.
 *  If no string is provided, the default service implementing the API will
 *  be used. For example, `storage.googleapis.com` is the default for all
 *  event types in the `google.storage` namespace.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRCloudFunctions_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Describes the policy in case of function's execution failure.
 *  If empty, then defaults to ignoring failures (i.e. not retrying them).
 */
@interface GTLRCloudFunctions_FailurePolicy : GTLRObject

/** If specified, then the function will be retried in case of a failure. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Retry *retry;

@end


/**
 *  Request of `GenerateDownloadUrl` method.
 */
@interface GTLRCloudFunctions_GenerateDownloadUrlRequest : GTLRObject

/**
 *  The optional version of function. If not set, default, current version
 *  is used.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionId;

@end


/**
 *  Response of `GenerateDownloadUrl` method.
 */
@interface GTLRCloudFunctions_GenerateDownloadUrlResponse : GTLRObject

/**
 *  The generated Google Cloud Storage signed URL that should be used for
 *  function source code download.
 */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

@end


/**
 *  Request of `GenerateSourceUploadUrl` method.
 */
@interface GTLRCloudFunctions_GenerateUploadUrlRequest : GTLRObject
@end


/**
 *  Response of `GenerateSourceUploadUrl` method.
 */
@interface GTLRCloudFunctions_GenerateUploadUrlResponse : GTLRObject

/**
 *  The generated Google Cloud Storage signed URL that should be used for a
 *  function source code upload. The uploaded file should be a zip archive
 *  which contains a function.
 */
@property(nonatomic, copy, nullable) NSString *uploadUrl;

@end


/**
 *  Describes HttpsTrigger, could be used to connect web hooks to function.
 */
@interface GTLRCloudFunctions_HttpsTrigger : GTLRObject

/** Output only. The deployed url for the function. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Response for the `ListFunctions` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "functions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFunctions_ListFunctionsResponse : GTLRCollectionObject

/**
 *  The functions that match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_CloudFunction *> *functions;

/**
 *  If not empty, indicates that there may be more functions that match
 *  the request; this value should be passed in a new
 *  google.cloud.functions.v1.ListFunctionsRequest
 *  to get more functions.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFunctions_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFunctions_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudFunctions_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFunctions_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_Location_Metadata : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudFunctions_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_Operation_Response : GTLRObject
@end


/**
 *  Metadata describing an Operation
 */
@interface GTLRCloudFunctions_OperationMetadataV1 : GTLRObject

/** The original request that started the operation. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_OperationMetadataV1_Request *request;

/**
 *  Target of the operation - for example
 *  projects/project-1/locations/region-1/functions/function-1
 */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Type of operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1_Type_CreateFunction
 *        Triggered by CreateFunction call (Value: "CREATE_FUNCTION")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1_Type_DeleteFunction
 *        Triggered by DeleteFunction call. (Value: "DELETE_FUNCTION")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1_Type_OperationUnspecified
 *        Unknown operation type. (Value: "OPERATION_UNSPECIFIED")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1_Type_UpdateFunction
 *        Triggered by UpdateFunction call (Value: "UPDATE_FUNCTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The last update timestamp of the operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Version id of the function created or updated by an API call.
 *  This field is only populated for Create and Update operations.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionId;

@end


/**
 *  The original request that started the operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_OperationMetadataV1_Request : GTLRObject
@end


/**
 *  Metadata describing an Operation
 */
@interface GTLRCloudFunctions_OperationMetadataV1Beta2 : GTLRObject

/** The original request that started the operation. */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_OperationMetadataV1Beta2_Request *request;

/**
 *  Target of the operation - for example
 *  projects/project-1/locations/region-1/functions/function-1
 */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Type of operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_CreateFunction
 *        Triggered by CreateFunction call (Value: "CREATE_FUNCTION")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_DeleteFunction
 *        Triggered by DeleteFunction call. (Value: "DELETE_FUNCTION")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_OperationUnspecified
 *        Unknown operation type. (Value: "OPERATION_UNSPECIFIED")
 *    @arg @c kGTLRCloudFunctions_OperationMetadataV1Beta2_Type_UpdateFunction
 *        Triggered by UpdateFunction call (Value: "UPDATE_FUNCTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The last update timestamp of the operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Version id of the function created or updated by an API call.
 *  This field is only populated for Create and Update operations.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionId;

@end


/**
 *  The original request that started the operation.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_OperationMetadataV1Beta2_Request : GTLRObject
@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` consists of a list of `bindings`. A `binding` binds a list of
 *  `members` to a `role`, where the members can be user accounts, Google
 *  groups,
 *  Google domains, and service accounts. A `role` is a named list of
 *  permissions
 *  defined by IAM.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/owner",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-other-app\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/viewer",
 *  "members": ["user:sean\@example.com"]
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-other-app\@appspot.gserviceaccount.com
 *  role: roles/owner
 *  - members:
 *  - user:sean\@example.com
 *  role: roles/viewer
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRCloudFunctions_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten blindly.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Describes the retry policy in case of function's execution failure.
 *  A function execution will be retried on any failure.
 *  A failed execution will be retried up to 7 days with an exponential backoff
 *  (capped at 10 seconds).
 *  Retried execution is charged as any other execution.
 */
@interface GTLRCloudFunctions_Retry : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudFunctions_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudFunctions_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:
 *  paths: "bindings, etag"
 *  This field is only used by Cloud IAM.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Describes SourceRepository, used to represent parameters related to
 *  source repository where a function is hosted.
 */
@interface GTLRCloudFunctions_SourceRepository : GTLRObject

/**
 *  Output only. The URL pointing to the hosted repository where the function
 *  were defined at the time of deployment. It always points to a specific
 *  commit in the format described above.
 */
@property(nonatomic, copy, nullable) NSString *deployedUrl;

/**
 *  The URL pointing to the hosted repository where the function is defined.
 *  There are supported Cloud Source Repository URLs in the following
 *  formats:
 *  To refer to a specific commit:
 *  `https://source.developers.google.com/projects/ * /repos/ * /revisions/ *
 *  /paths/ *`
 *  To refer to a moveable alias (branch):
 *  `https://source.developers.google.com/projects/ * /repos/ *
 *  /moveable-aliases/ * /paths/ *`
 *  In particular, to refer to HEAD use `master` moveable alias.
 *  To refer to a specific fixed alias (tag):
 *  `https://source.developers.google.com/projects/ * /repos/ * /fixed-aliases/
 *  * /paths/ *`
 *  You may omit `paths/ *` if you want to use the main directory.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudFunctions_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFunctions_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudFunctions_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFunctions_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudFunctions_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudFunctions_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
