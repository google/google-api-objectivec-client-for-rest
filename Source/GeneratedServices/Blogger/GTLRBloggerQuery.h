// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Blogger API (blogger/v3)
// Description:
//   API for access to the data within Blogger.
// Documentation:
//   https://developers.google.com/blogger/docs/3.0/getting_started

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBlogger_Page;
@class GTLRBlogger_Post;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// orderBy

/**
 *  Order by the date the post was published
 *
 *  Value: "published"
 */
GTLR_EXTERN NSString * const kGTLRBloggerOrderByPublished;
/**
 *  Order by the date the post was last updated
 *
 *  Value: "updated"
 */
GTLR_EXTERN NSString * const kGTLRBloggerOrderByUpdated;

// ----------------------------------------------------------------------------
// range

/**
 *  Total page view counts from all time.
 *
 *  Value: "all"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRangeAll;
/**
 *  Page view counts from the last thirty days.
 *
 *  Value: "30DAYS"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRangeX30days;
/**
 *  Page view counts from the last seven days.
 *
 *  Value: "7DAYS"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRangeX7days;

// ----------------------------------------------------------------------------
// role

/**
 *  Admin role - Blogs where the user has Admin level access.
 *
 *  Value: "ADMIN"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRoleAdmin;
/**
 *  Author role - Blogs where the user has Author level access.
 *
 *  Value: "AUTHOR"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRoleAuthor;
/**
 *  Reader role - Blogs where the user has Reader level access (to a private
 *  blog).
 *
 *  Value: "READER"
 */
GTLR_EXTERN NSString * const kGTLRBloggerRoleReader;

// ----------------------------------------------------------------------------
// status

/**
 *  Blog has been deleted by an administrator.
 *
 *  Value: "DELETED"
 */
GTLR_EXTERN NSString * const kGTLRBloggerStatusDeleted;
/** Value: "draft" */
GTLR_EXTERN NSString * const kGTLRBloggerStatusDraft;
/**
 *  Comments that have had their content removed
 *
 *  Value: "emptied"
 */
GTLR_EXTERN NSString * const kGTLRBloggerStatusEmptied;
/** Value: "live" */
GTLR_EXTERN NSString * const kGTLRBloggerStatusLive;
/**
 *  Comments that are awaiting administrator approval
 *
 *  Value: "pending"
 */
GTLR_EXTERN NSString * const kGTLRBloggerStatusPending;
/** Value: "scheduled" */
GTLR_EXTERN NSString * const kGTLRBloggerStatusScheduled;
/**
 *  Comments marked as spam by the administrator
 *
 *  Value: "spam"
 */
GTLR_EXTERN NSString * const kGTLRBloggerStatusSpam;

// ----------------------------------------------------------------------------
// view

/** Value: "ADMIN" */
GTLR_EXTERN NSString * const kGTLRBloggerViewAdmin;
/** Value: "AUTHOR" */
GTLR_EXTERN NSString * const kGTLRBloggerViewAuthor;
/** Value: "READER" */
GTLR_EXTERN NSString * const kGTLRBloggerViewReader;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Blogger query classes.
 */
@interface GTLRBloggerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets one blog by ID.
 *
 *  Method: blogger.blogs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForBlogsGetWithblogId:]

/** The ID of the blog to get. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Maximum number of posts to pull back with the blog. */
@property(nonatomic, assign) NSUInteger maxPosts;

/**
 *  Access level with which to view the blog. Note that some fields require
 *  elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail. (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail. (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail. (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Blog.
 *
 *  Gets one blog by ID.
 *
 *  @param blogId The ID of the blog to get.
 *
 *  @return GTLRBloggerQuery_BlogsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Retrieve a Blog by URL.
 *
 *  Method: blogger.blogs.getByUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsGetByUrl : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForBlogsGetByUrlWithurl:]

/** The URL of the blog to retrieve. */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  Access level with which to view the blog. Note that some fields require
 *  elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail. (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail. (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail. (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Blog.
 *
 *  Retrieve a Blog by URL.
 *
 *  @param url The URL of the blog to retrieve.
 *
 *  @return GTLRBloggerQuery_BlogsGetByUrl
 */
+ (instancetype)queryWithUrl:(NSString *)url;

@end

/**
 *  Retrieves a list of blogs, possibly filtered.
 *
 *  Method: blogger.blogs.listByUser
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsListByUser : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForBlogsListByUserWithuserId:]

/**
 *  Whether the response is a list of blogs with per-user information instead of
 *  just blogs.
 */
@property(nonatomic, assign) BOOL fetchUserInfo;

/**
 *  User access types for blogs to include in the results, e.g. AUTHOR will
 *  return blogs where the user has author level access. If no roles are
 *  specified, defaults to ADMIN and AUTHOR roles.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerRoleAdmin Admin role - Blogs where the user has Admin
 *        level access. (Value: "ADMIN")
 *    @arg @c kGTLRBloggerRoleAuthor Author role - Blogs where the user has
 *        Author level access. (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerRoleReader Reader role - Blogs where the user has
 *        Reader level access (to a private blog). (Value: "READER")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *role;

/**
 *  Blog statuses to include in the result (default: Live blogs only). Note that
 *  ADMIN access is required to view deleted blogs.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusDeleted Blog has been deleted by an
 *        administrator. (Value: "DELETED")
 *    @arg @c kGTLRBloggerStatusLive Blog is currently live. (Value: "LIVE")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRBloggerStatusLive.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  ID of the user whose blogs are to be fetched. Either the word 'self' (sans
 *  quote marks) or the user's profile identifier.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Access level with which to view the blogs. Note that some fields require
 *  elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail. (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail. (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail. (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_BlogList.
 *
 *  Retrieves a list of blogs, possibly filtered.
 *
 *  @param userId ID of the user whose blogs are to be fetched. Either the word
 *    'self' (sans quote marks) or the user's profile identifier.
 *
 *  @return GTLRBloggerQuery_BlogsListByUser
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets one blog and user info pair by blogId and userId.
 *
 *  Method: blogger.blogUserInfos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogUserInfosGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForBlogUserInfosGetWithuserId:blogId:]

/** The ID of the blog to get. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Maximum number of posts to pull back with the blog. */
@property(nonatomic, assign) NSUInteger maxPosts;

/**
 *  ID of the user whose blogs are to be fetched. Either the word 'self' (sans
 *  quote marks) or the user's profile identifier.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_BlogUserInfo.
 *
 *  Gets one blog and user info pair by blogId and userId.
 *
 *  @param userId ID of the user whose blogs are to be fetched. Either the word
 *    'self' (sans quote marks) or the user's profile identifier.
 *  @param blogId The ID of the blog to get.
 *
 *  @return GTLRBloggerQuery_BlogUserInfosGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId;

@end

/**
 *  Marks a comment as not spam.
 *
 *  Method: blogger.comments.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsApprove : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsApproveWithblogId:postId:commentId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the comment to mark as not spam. */
@property(nonatomic, copy, nullable) NSString *commentId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Marks a comment as not spam.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *  @param commentId The ID of the comment to mark as not spam.
 *
 *  @return GTLRBloggerQuery_CommentsApprove
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Delete a comment by ID.
 *
 *  Method: blogger.comments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsDelete : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsDeleteWithblogId:postId:commentId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the comment to delete. */
@property(nonatomic, copy, nullable) NSString *commentId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a comment by ID.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *  @param commentId The ID of the comment to delete.
 *
 *  @return GTLRBloggerQuery_CommentsDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Gets one comment by ID.
 *
 *  Method: blogger.comments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsGetWithblogId:postId:commentId:]

/** ID of the blog to containing the comment. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the comment to get. */
@property(nonatomic, copy, nullable) NSString *commentId;

/** ID of the post to fetch posts from. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Access level for the requested comment (default: READER). Note that some
 *  comments will require elevated permissions, for example comments where the
 *  parent posts which is in a draft state, or comments that are pending
 *  moderation.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Admin level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Gets one comment by ID.
 *
 *  @param blogId ID of the blog to containing the comment.
 *  @param postId ID of the post to fetch posts from.
 *  @param commentId The ID of the comment to get.
 *
 *  @return GTLRBloggerQuery_CommentsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Retrieves the comments for a post, possibly filtered.
 *
 *  Method: blogger.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsList : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsListWithblogId:postId:]

/** ID of the blog to fetch comments from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *endDate;

/** Whether the body content of the comments is included. */
@property(nonatomic, assign) BOOL fetchBodies;

/** Maximum number of comments to include in the result. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Continuation token if request is paged. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** ID of the post to fetch posts from. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusEmptied Comments that have had their content
 *        removed (Value: "emptied")
 *    @arg @c kGTLRBloggerStatusLive Comments that are publicly visible (Value:
 *        "live")
 *    @arg @c kGTLRBloggerStatusPending Comments that are awaiting administrator
 *        approval (Value: "pending")
 *    @arg @c kGTLRBloggerStatusSpam Comments marked as spam by the
 *        administrator (Value: "spam")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_CommentList.
 *
 *  Retrieves the comments for a post, possibly filtered.
 *
 *  @param blogId ID of the blog to fetch comments from.
 *  @param postId ID of the post to fetch posts from.
 *
 *  @return GTLRBloggerQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Retrieves the comments for a blog, across all posts, possibly filtered.
 *
 *  Method: blogger.comments.listByBlog
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsListByBlog : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsListByBlogWithblogId:]

/** ID of the blog to fetch comments from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *endDate;

/** Whether the body content of the comments is included. */
@property(nonatomic, assign) BOOL fetchBodies;

/** Maximum number of comments to include in the result. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Continuation token if request is paged. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusEmptied Comments that have had their content
 *        removed (Value: "emptied")
 *    @arg @c kGTLRBloggerStatusLive Comments that are publicly visible (Value:
 *        "live")
 *    @arg @c kGTLRBloggerStatusPending Comments that are awaiting administrator
 *        approval (Value: "pending")
 *    @arg @c kGTLRBloggerStatusSpam Comments marked as spam by the
 *        administrator (Value: "spam")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  Fetches a @c GTLRBlogger_CommentList.
 *
 *  Retrieves the comments for a blog, across all posts, possibly filtered.
 *
 *  @param blogId ID of the blog to fetch comments from.
 *
 *  @return GTLRBloggerQuery_CommentsListByBlog
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Marks a comment as spam.
 *
 *  Method: blogger.comments.markAsSpam
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsMarkAsSpam : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsMarkAsSpamWithblogId:postId:commentId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the comment to mark as spam. */
@property(nonatomic, copy, nullable) NSString *commentId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Marks a comment as spam.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *  @param commentId The ID of the comment to mark as spam.
 *
 *  @return GTLRBloggerQuery_CommentsMarkAsSpam
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Removes the content of a comment.
 *
 *  Method: blogger.comments.removeContent
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsRemoveContent : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForCommentsRemoveContentWithblogId:postId:commentId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the comment to delete content from. */
@property(nonatomic, copy, nullable) NSString *commentId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Removes the content of a comment.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *  @param commentId The ID of the comment to delete content from.
 *
 *  @return GTLRBloggerQuery_CommentsRemoveContent
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Delete a page by ID.
 *
 *  Method: blogger.pages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesDelete : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesDeleteWithblogId:pageId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a page by ID.
 *
 *  @param blogId The ID of the Blog.
 *  @param pageId The ID of the Page.
 *
 *  @return GTLRBloggerQuery_PagesDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Gets one blog page by ID.
 *
 *  Method: blogger.pages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PagesGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesGetWithblogId:pageId:]

/** ID of the blog containing the page. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the page to get. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Gets one blog page by ID.
 *
 *  @param blogId ID of the blog containing the page.
 *  @param pageId The ID of the page to get.
 *
 *  @return GTLRBloggerQuery_PagesGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Add a page.
 *
 *  Method: blogger.pages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesInsert : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesInsertWithObject:blogId:]

/** ID of the blog to add the page to. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Whether to create the page as a draft (default: false). */
@property(nonatomic, assign) BOOL isDraft;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Add a page.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId ID of the blog to add the page to.
 *
 *  @return GTLRBloggerQuery_PagesInsert
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId;

@end

/**
 *  Retrieves the pages for a blog, optionally including non-LIVE statuses.
 *
 *  Method: blogger.pages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PagesList : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesListWithblogId:]

/** ID of the blog to fetch Pages from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Whether to retrieve the Page bodies. */
@property(nonatomic, assign) BOOL fetchBodies;

/** Maximum number of Pages to fetch. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Continuation token if the request is paged. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusDraft Draft (unpublished) Pages (Value: "draft")
 *    @arg @c kGTLRBloggerStatusLive Pages that are publicly visible (Value:
 *        "live")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PageList.
 *
 *  Retrieves the pages for a blog, optionally including non-LIVE statuses.
 *
 *  @param blogId ID of the blog to fetch Pages from.
 *
 *  @return GTLRBloggerQuery_PagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Update a page. This method supports patch semantics.
 *
 *  Method: blogger.pages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesPatch : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesPatchWithObject:blogId:pageId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Whether a publish action should be performed when the page is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL publish;

/**
 *  Whether a revert action should be performed when the page is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Update a page. This method supports patch semantics.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId The ID of the Blog.
 *  @param pageId The ID of the Page.
 *
 *  @return GTLRBloggerQuery_PagesPatch
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Publishes a draft page.
 *
 *  Method: blogger.pages.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesPublish : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesPublishWithblogId:pageId:]

/** The ID of the blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Publishes a draft page.
 *
 *  @param blogId The ID of the blog.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRBloggerQuery_PagesPublish
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Revert a published or scheduled page to draft state.
 *
 *  Method: blogger.pages.revert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesRevert : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesRevertWithblogId:pageId:]

/** The ID of the blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Revert a published or scheduled page to draft state.
 *
 *  @param blogId The ID of the blog.
 *  @param pageId The ID of the page.
 *
 *  @return GTLRBloggerQuery_PagesRevert
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Update a page.
 *
 *  Method: blogger.pages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesUpdate : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPagesUpdateWithObject:blogId:pageId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Page. */
@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Whether a publish action should be performed when the page is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL publish;

/**
 *  Whether a revert action should be performed when the page is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Update a page.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId The ID of the Blog.
 *  @param pageId The ID of the Page.
 *
 *  @return GTLRBloggerQuery_PagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Retrieve pageview stats for a Blog.
 *
 *  Method: blogger.pageViews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PageViewsGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPageViewsGetWithblogId:]

/** The ID of the blog to get. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  range
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerRangeX30days Page view counts from the last thirty
 *        days. (Value: "30DAYS")
 *    @arg @c kGTLRBloggerRangeX7days Page view counts from the last seven days.
 *        (Value: "7DAYS")
 *    @arg @c kGTLRBloggerRangeAll Total page view counts from all time. (Value:
 *        "all")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *range;

/**
 *  Fetches a @c GTLRBlogger_Pageviews.
 *
 *  Retrieve pageview stats for a Blog.
 *
 *  @param blogId The ID of the blog to get.
 *
 *  @return GTLRBloggerQuery_PageViewsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Delete a post by ID.
 *
 *  Method: blogger.posts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsDelete : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsDeleteWithblogId:postId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Delete a post by ID.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *
 *  @return GTLRBloggerQuery_PostsDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Get a post by ID.
 *
 *  Method: blogger.posts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsGetWithblogId:postId:]

/** ID of the blog to fetch the post from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  Whether the body content of the post is included (default: true). This
 *  should be set to false when the post bodies are not required, to help
 *  minimize traffic.
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

/** Whether image URL metadata for each post is included (default: false). */
@property(nonatomic, assign) BOOL fetchImages;

/** Maximum number of comments to pull back on a post. */
@property(nonatomic, assign) NSUInteger maxComments;

/** The ID of the post */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Get a post by ID.
 *
 *  @param blogId ID of the blog to fetch the post from.
 *  @param postId The ID of the post
 *
 *  @return GTLRBloggerQuery_PostsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Retrieve a Post by Path.
 *
 *  Method: blogger.posts.getByPath
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsGetByPath : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsGetByPathWithblogId:path:]

/** ID of the blog to fetch the post from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Maximum number of comments to pull back on a post. */
@property(nonatomic, assign) NSUInteger maxComments;

/** Path of the Post to retrieve. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Retrieve a Post by Path.
 *
 *  @param blogId ID of the blog to fetch the post from.
 *  @param path Path of the Post to retrieve.
 *
 *  @return GTLRBloggerQuery_PostsGetByPath
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                           path:(NSString *)path;

@end

/**
 *  Add a post.
 *
 *  Method: blogger.posts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsInsert : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsInsertWithObject:blogId:]

/** ID of the blog to add the post to. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  Whether the body content of the post is included with the result (default:
 *  true).
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

/**
 *  Whether image URL metadata for each post is included in the returned result
 *  (default: false).
 */
@property(nonatomic, assign) BOOL fetchImages;

/** Whether to create the post as a draft (default: false). */
@property(nonatomic, assign) BOOL isDraft;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Add a post.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId ID of the blog to add the post to.
 *
 *  @return GTLRBloggerQuery_PostsInsert
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId;

@end

/**
 *  Retrieves a list of posts, possibly filtered.
 *
 *  Method: blogger.posts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsList : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsListWithblogId:]

/** ID of the blog to fetch posts from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Latest post date to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *endDate;

/**
 *  Whether the body content of posts is included (default: true). This should
 *  be set to false when the post bodies are not required, to help minimize
 *  traffic.
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBodies;

/** Whether image URL metadata for each post is included. */
@property(nonatomic, assign) BOOL fetchImages;

/** Comma-separated list of labels to search for. */
@property(nonatomic, copy, nullable) NSString *labels;

/** Maximum number of posts to fetch. */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sort search results
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByPublished Order by the date the post was
 *        published (Value: "published")
 *    @arg @c kGTLRBloggerOrderByUpdated Order by the date the post was last
 *        updated (Value: "updated")
 *
 *  @note If not set, the documented server-side default will be "PUBLISHED".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Continuation token if the request is paged. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *startDate;

/**
 *  Statuses to include in the results.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusDraft Draft (non-published) posts. (Value:
 *        "draft")
 *    @arg @c kGTLRBloggerStatusLive Published posts (Value: "live")
 *    @arg @c kGTLRBloggerStatusScheduled Posts that are scheduled to publish in
 *        the future. (Value: "scheduled")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require escalated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PostList.
 *
 *  Retrieves a list of posts, possibly filtered.
 *
 *  @param blogId ID of the blog to fetch posts from.
 *
 *  @return GTLRBloggerQuery_PostsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Update a post. This method supports patch semantics.
 *
 *  Method: blogger.posts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsPatch : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsPatchWithObject:blogId:postId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  Whether the body content of the post is included with the result (default:
 *  true).
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

/**
 *  Whether image URL metadata for each post is included in the returned result
 *  (default: false).
 */
@property(nonatomic, assign) BOOL fetchImages;

/** Maximum number of comments to retrieve with the returned post. */
@property(nonatomic, assign) NSUInteger maxComments;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Whether a publish action should be performed when the post is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL publish;

/**
 *  Whether a revert action should be performed when the post is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Update a post. This method supports patch semantics.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *
 *  @return GTLRBloggerQuery_PostsPatch
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Publishes a draft post, optionally at the specific time of the given
 *  publishDate parameter.
 *
 *  Method: blogger.posts.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsPublish : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsPublishWithblogId:postId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Optional date and time to schedule the publishing of the Blog. If no
 *  publishDate parameter is given, the post is either published at the a
 *  previously saved schedule date (if present), or the current time. If a
 *  future date is given, the post will be scheduled to be published.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishDate;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Publishes a draft post, optionally at the specific time of the given
 *  publishDate parameter.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *
 *  @return GTLRBloggerQuery_PostsPublish
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Revert a published or scheduled post to draft state.
 *
 *  Method: blogger.posts.revert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsRevert : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsRevertWithblogId:postId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Revert a published or scheduled post to draft state.
 *
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *
 *  @return GTLRBloggerQuery_PostsRevert
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Search for a post.
 *
 *  Method: blogger.posts.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsSearch : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsSearchWithblogId:q:]

/** ID of the blog to fetch the post from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  Whether the body content of posts is included (default: true). This should
 *  be set to false when the post bodies are not required, to help minimize
 *  traffic.
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBodies;

/**
 *  Sort search results
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByPublished Order by the date the post was
 *        published (Value: "published")
 *    @arg @c kGTLRBloggerOrderByUpdated Order by the date the post was last
 *        updated (Value: "updated")
 *
 *  @note If not set, the documented server-side default will be "PUBLISHED".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Query terms to search this blog for matching posts. */
@property(nonatomic, copy, nullable) NSString *q;

/**
 *  Fetches a @c GTLRBlogger_PostList.
 *
 *  Search for a post.
 *
 *  @param blogId ID of the blog to fetch the post from.
 *  @param q Query terms to search this blog for matching posts.
 *
 *  @return GTLRBloggerQuery_PostsSearch
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                              q:(NSString *)q;

@end

/**
 *  Update a post.
 *
 *  Method: blogger.posts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsUpdate : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostsUpdateWithObject:blogId:postId:]

/** The ID of the Blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  Whether the body content of the post is included with the result (default:
 *  true).
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

/**
 *  Whether image URL metadata for each post is included in the returned result
 *  (default: false).
 */
@property(nonatomic, assign) BOOL fetchImages;

/** Maximum number of comments to retrieve with the returned post. */
@property(nonatomic, assign) NSUInteger maxComments;

/** The ID of the Post. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Whether a publish action should be performed when the post is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL publish;

/**
 *  Whether a revert action should be performed when the post is updated
 *  (default: false).
 */
@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Update a post.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId The ID of the Blog.
 *  @param postId The ID of the Post.
 *
 *  @return GTLRBloggerQuery_PostsUpdate
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Gets one post and user info pair, by post ID and user ID. The post user info
 *  contains per-user information about the post, such as access rights,
 *  specific to the user.
 *
 *  Method: blogger.postUserInfos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostUserInfosGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostUserInfosGetWithuserId:blogId:postId:]

/** The ID of the blog. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Maximum number of comments to pull back on a post. */
@property(nonatomic, assign) NSUInteger maxComments;

/** The ID of the post to get. */
@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  ID of the user for the per-user information to be fetched. Either the word
 *  'self' (sans quote marks) or the user's profile identifier.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_PostUserInfo.
 *
 *  Gets one post and user info pair, by post ID and user ID. The post user info
 *  contains per-user information about the post, such as access rights,
 *  specific to the user.
 *
 *  @param userId ID of the user for the per-user information to be fetched.
 *    Either the word 'self' (sans quote marks) or the user's profile
 *    identifier.
 *  @param blogId The ID of the blog.
 *  @param postId The ID of the post to get.
 *
 *  @return GTLRBloggerQuery_PostUserInfosGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Retrieves a list of post and post user info pairs, possibly filtered. The
 *  post user info contains per-user information about the post, such as access
 *  rights, specific to the user.
 *
 *  Method: blogger.postUserInfos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostUserInfosList : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForPostUserInfosListWithuserId:blogId:]

/** ID of the blog to fetch posts from. */
@property(nonatomic, copy, nullable) NSString *blogId;

/** Latest post date to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *endDate;

/**
 *  Whether the body content of posts is included. Default is false.
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL fetchBodies;

/** Comma-separated list of labels to search for. */
@property(nonatomic, copy, nullable) NSString *labels;

/** Maximum number of posts to fetch. */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Sort order applied to search results. Default is published.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByPublished Order by the date the post was
 *        published (Value: "published")
 *    @arg @c kGTLRBloggerOrderByUpdated Order by the date the post was last
 *        updated (Value: "updated")
 *
 *  @note If not set, the documented server-side default will be "PUBLISHED".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Continuation token if the request is paged. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
@property(nonatomic, strong, nullable) GTLRDateTime *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusDraft Draft posts (Value: "draft")
 *    @arg @c kGTLRBloggerStatusLive Published posts (Value: "live")
 *    @arg @c kGTLRBloggerStatusScheduled Posts that are scheduled to publish in
 *        future. (Value: "scheduled")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  ID of the user for the per-user information to be fetched. Either the word
 *  'self' (sans quote marks) or the user's profile identifier.
 */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Access level with which to view the returned result. Note that some fields
 *  require elevated access.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewAdmin Admin level detail (Value: "ADMIN")
 *    @arg @c kGTLRBloggerViewAuthor Author level detail (Value: "AUTHOR")
 *    @arg @c kGTLRBloggerViewReader Reader level detail (Value: "READER")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PostUserInfosList.
 *
 *  Retrieves a list of post and post user info pairs, possibly filtered. The
 *  post user info contains per-user information about the post, such as access
 *  rights, specific to the user.
 *
 *  @param userId ID of the user for the per-user information to be fetched.
 *    Either the word 'self' (sans quote marks) or the user's profile
 *    identifier.
 *  @param blogId ID of the blog to fetch posts from.
 *
 *  @return GTLRBloggerQuery_PostUserInfosList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId;

@end

/**
 *  Gets one user by ID.
 *
 *  Method: blogger.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_UsersGet : GTLRBloggerQuery
// Previous library name was
//   +[GTLQueryBlogger queryForUsersGetWithuserId:]

/** The ID of the user to get. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_User.
 *
 *  Gets one user by ID.
 *
 *  @param userId The ID of the user to get.
 *
 *  @return GTLRBloggerQuery_UsersGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
