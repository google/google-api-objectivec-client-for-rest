// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Run Admin API (run/v1)
// Description:
//   Deploy and manage user provided container images that scale automatically
//   based on incoming requets. The Cloud Run Admin API follows the Knative
//   Serving API specification.
// Documentation:
//   https://cloud.google.com/run/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRun_DomainMapping;
@class GTLRCloudRun_Service;
@class GTLRCloudRun_SetIamPolicyRequest;
@class GTLRCloudRun_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Run query classes.
 */
@interface GTLRCloudRunQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  List authorized domains.
 *
 *  Method: run.namespaces.authorizeddomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAuthorizeddomainsList : GTLRCloudRunQuery

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the parent Project resource. Example: `projects/myproject`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_ListAuthorizedDomainsResponse.
 *
 *  List authorized domains.
 *
 *  @param parent Name of the parent Project resource. Example:
 *    `projects/myproject`.
 *
 *  @return GTLRCloudRunQuery_NamespacesAuthorizeddomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get information about a configuration.
 *
 *  Method: run.namespaces.configurations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsGet : GTLRCloudRunQuery

/**
 *  The name of the configuration to retrieve. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Get information about a configuration.
 *
 *  @param name The name of the configuration to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List configurations.
 *
 *  Method: run.namespaces.configurations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the configurations should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListConfigurationsResponse.
 *
 *  List configurations.
 *
 *  @param parent The namespace from which the configurations should be listed.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a new domain mapping.
 *
 *  Method: run.namespaces.domainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsCreate : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The namespace in which the domain mapping should be created. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Create a new domain mapping.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param parent The namespace in which the domain mapping should be created.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a domain mapping.
 *
 *  Method: run.namespaces.domainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the domain mapping to delete. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a domain mapping.
 *
 *  @param name The name of the domain mapping to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a domain mapping.
 *
 *  Method: run.namespaces.domainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsGet : GTLRCloudRunQuery

/**
 *  The name of the domain mapping to retrieve. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Get information about a domain mapping.
 *
 *  @param name The name of the domain mapping to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List domain mappings.
 *
 *  Method: run.namespaces.domainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the domain mappings should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListDomainMappingsResponse.
 *
 *  List domain mappings.
 *
 *  @param parent The namespace from which the domain mappings should be listed.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Delete a revision.
 *
 *  Method: run.namespaces.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the revision to delete. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a revision.
 *
 *  @param name The name of the revision to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a revision.
 *
 *  Method: run.namespaces.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsGet : GTLRCloudRunQuery

/**
 *  The name of the revision to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Revision.
 *
 *  Get information about a revision.
 *
 *  @param name The name of the revision to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List revisions.
 *
 *  Method: run.namespaces.revisions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the revisions should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRevisionsResponse.
 *
 *  List revisions.
 *
 *  @param parent The namespace from which the revisions should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get information about a route.
 *
 *  Method: run.namespaces.routes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesGet : GTLRCloudRunQuery

/**
 *  The name of the route to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Get information about a route.
 *
 *  @param name The name of the route to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List routes.
 *
 *  Method: run.namespaces.routes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the routes should be listed. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRoutesResponse.
 *
 *  List routes.
 *
 *  @param parent The namespace from which the routes should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a service.
 *
 *  Method: run.namespaces.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesCreate : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The namespace in which the service should be created. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Create a service.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param parent The namespace in which the service should be created. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a service. This will cause the Service to stop serving traffic and
 *  will delete the child entities like Routes, Configurations and Revisions.
 *
 *  Method: run.namespaces.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the service to delete. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a service. This will cause the Service to stop serving traffic and
 *  will delete the child entities like Routes, Configurations and Revisions.
 *
 *  @param name The name of the service to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a service.
 *
 *  Method: run.namespaces.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesGet : GTLRCloudRunQuery

/**
 *  The name of the service to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Get information about a service.
 *
 *  @param name The name of the service to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List services.
 *
 *  Method: run.namespaces.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the services should be listed. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListServicesResponse.
 *
 *  List services.
 *
 *  @param parent The namespace from which the services should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a service. Only the spec and metadata labels and annotations are
 *  modifiable. After the Update request, Cloud Run will work to make the
 *  'status' match the requested 'spec'. May provide metadata.resourceVersion to
 *  enforce update from last read for optimistic concurrency control.
 *
 *  Method: run.namespaces.services.replaceService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesReplaceService : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The name of the service being replaced. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Replace a service. Only the spec and metadata labels and annotations are
 *  modifiable. After the Update request, Cloud Run will work to make the
 *  'status' match the requested 'spec'. May provide metadata.resourceVersion to
 *  enforce update from last read for optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param name The name of the service being replaced. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesReplaceService
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                           name:(NSString *)name;

@end

/**
 *  List authorized domains.
 *
 *  Method: run.projects.authorizeddomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsAuthorizeddomainsList : GTLRCloudRunQuery

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the parent Project resource. Example: `projects/myproject`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_ListAuthorizedDomainsResponse.
 *
 *  List authorized domains.
 *
 *  @param parent Name of the parent Project resource. Example:
 *    `projects/myproject`.
 *
 *  @return GTLRCloudRunQuery_ProjectsAuthorizeddomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  List authorized domains.
 *
 *  Method: run.projects.locations.authorizeddomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAuthorizeddomainsList : GTLRCloudRunQuery

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the parent Project resource. Example: `projects/myproject`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_ListAuthorizedDomainsResponse.
 *
 *  List authorized domains.
 *
 *  @param parent Name of the parent Project resource. Example:
 *    `projects/myproject`.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAuthorizeddomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get information about a configuration.
 *
 *  Method: run.projects.locations.configurations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsGet : GTLRCloudRunQuery

/**
 *  The name of the configuration to retrieve. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Get information about a configuration.
 *
 *  @param name The name of the configuration to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List configurations.
 *
 *  Method: run.projects.locations.configurations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the configurations should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListConfigurationsResponse.
 *
 *  List configurations.
 *
 *  @param parent The namespace from which the configurations should be listed.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a new domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsCreate : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The namespace in which the domain mapping should be created. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Create a new domain mapping.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param parent The namespace in which the domain mapping should be created.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the domain mapping to delete. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a domain mapping.
 *
 *  @param name The name of the domain mapping to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsGet : GTLRCloudRunQuery

/**
 *  The name of the domain mapping to retrieve. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Get information about a domain mapping.
 *
 *  @param name The name of the domain mapping to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List domain mappings.
 *
 *  Method: run.projects.locations.domainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the domain mappings should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListDomainMappingsResponse.
 *
 *  List domain mappings.
 *
 *  @param parent The namespace from which the domain mappings should be listed.
 *    For Cloud Run (fully managed), replace {namespace_id} with the project ID
 *    or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: run.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsList : GTLRCloudRunQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like "displayName=tokyo", and is documented in more
 *  detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudRun_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Delete a revision.
 *
 *  Method: run.projects.locations.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the revision to delete. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a revision.
 *
 *  @param name The name of the revision to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a revision.
 *
 *  Method: run.projects.locations.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsGet : GTLRCloudRunQuery

/**
 *  The name of the revision to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Revision.
 *
 *  Get information about a revision.
 *
 *  @param name The name of the revision to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List revisions.
 *
 *  Method: run.projects.locations.revisions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the revisions should be listed. For Cloud Run
 *  (fully managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRevisionsResponse.
 *
 *  List revisions.
 *
 *  @param parent The namespace from which the revisions should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Get information about a route.
 *
 *  Method: run.projects.locations.routes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesGet : GTLRCloudRunQuery

/**
 *  The name of the route to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Get information about a route.
 *
 *  @param name The name of the route to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List routes.
 *
 *  Method: run.projects.locations.routes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the routes should be listed. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRoutesResponse.
 *
 *  List routes.
 *
 *  @param parent The namespace from which the routes should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a service.
 *
 *  Method: run.projects.locations.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesCreate : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The namespace in which the service should be created. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Create a service.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param parent The namespace in which the service should be created. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a service. This will cause the Service to stop serving traffic and
 *  will delete the child entities like Routes, Configurations and Revisions.
 *
 *  Method: run.projects.locations.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesDelete : GTLRCloudRunQuery

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the service to delete. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores this
 *  setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a service. This will cause the Service to stop serving traffic and
 *  will delete the child entities like Routes, Configurations and Revisions.
 *
 *  @param name The name of the service to delete. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a service.
 *
 *  Method: run.projects.locations.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesGet : GTLRCloudRunQuery

/**
 *  The name of the service to retrieve. For Cloud Run (fully managed), replace
 *  {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Get information about a service.
 *
 *  @param name The name of the service to retrieve. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get the IAM Access Control policy currently in effect for the given Cloud
 *  Run service. This result does not include any inherited policies.
 *
 *  Method: run.projects.locations.services.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesGetIamPolicy : GTLRCloudRunQuery

/**
 *  Optional. The policy format version to be returned. Valid values are 0, 1,
 *  and 3. Requests specifying an invalid value will be rejected. Requests for
 *  policies with any conditional bindings must specify version 3. Policies
 *  without any conditional bindings may specify any valid value or leave the
 *  field unset. To learn which resources support conditions in their IAM
 *  policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_Policy.
 *
 *  Get the IAM Access Control policy currently in effect for the given Cloud
 *  Run service. This result does not include any inherited policies.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  List services.
 *
 *  Method: run.projects.locations.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesList : GTLRCloudRunQuery

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name. Send
 *  this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently
 *  used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are =, !=,
 *  exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The namespace from which the services should be listed. For Cloud Run (fully
 *  managed), replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListServicesResponse.
 *
 *  List services.
 *
 *  @param parent The namespace from which the services should be listed. For
 *    Cloud Run (fully managed), replace {namespace_id} with the project ID or
 *    number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a service. Only the spec and metadata labels and annotations are
 *  modifiable. After the Update request, Cloud Run will work to make the
 *  'status' match the requested 'spec'. May provide metadata.resourceVersion to
 *  enforce update from last read for optimistic concurrency control.
 *
 *  Method: run.projects.locations.services.replaceService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesReplaceService : GTLRCloudRunQuery

/**
 *  Indicates that the server should validate the request and populate default
 *  values without persisting the request. Supported values: `all`
 */
@property(nonatomic, copy, nullable) NSString *dryRun;

/**
 *  The name of the service being replaced. For Cloud Run (fully managed),
 *  replace {namespace_id} with the project ID or number.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Replace a service. Only the spec and metadata labels and annotations are
 *  modifiable. After the Update request, Cloud Run will work to make the
 *  'status' match the requested 'spec'. May provide metadata.resourceVersion to
 *  enforce update from last read for optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param name The name of the service being replaced. For Cloud Run (fully
 *    managed), replace {namespace_id} with the project ID or number.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesReplaceService
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the IAM Access control policy for the specified Service. Overwrites any
 *  existing policy.
 *
 *  Method: run.projects.locations.services.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesSetIamPolicy : GTLRCloudRunQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See the
 *  operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_Policy.
 *
 *  Sets the IAM Access control policy for the specified Service. Overwrites any
 *  existing policy.
 *
 *  @param object The @c GTLRCloudRun_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified Project. There are no
 *  permissions required for making this API call.
 *
 *  Method: run.projects.locations.services.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesTestIamPermissions : GTLRCloudRunQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified Project. There are no
 *  permissions required for making this API call.
 *
 *  @param object The @c GTLRCloudRun_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See the operation documentation for the appropriate value for
 *    this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
