// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Run API (run/v1)
// Description:
//   Deploy and manage user provided container images that scale automatically
//   based on HTTP traffic.
// Documentation:
//   https://cloud.google.com/run/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRun_AutoDomainMapping;
@class GTLRCloudRun_Configuration;
@class GTLRCloudRun_DomainMapping;
@class GTLRCloudRun_Route;
@class GTLRCloudRun_Service;
@class GTLRCloudRun_SetIamPolicyRequest;
@class GTLRCloudRun_TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Run query classes.
 */
@interface GTLRCloudRunQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  List authorized domains.
 *
 *  Method: run.namespaces.authorizeddomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAuthorizeddomainsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAuthorizeddomainsListWithparent:]

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the parent Application resource. Example: `apps/myapp`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_ListAuthorizedDomainsResponse.
 *
 *  List authorized domains.
 *
 *  @param parent Name of the parent Application resource. Example:
 *    `apps/myapp`.
 *
 *  @return GTLRCloudRunQuery_NamespacesAuthorizeddomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new auto domain mapping.
 *
 *  Method: run.namespaces.autodomainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAutodomainmappingsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAutodomainmappingsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this auto domain mapping should
 *  be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Creates a new auto domain mapping.
 *
 *  @param object The @c GTLRCloudRun_AutoDomainMapping to include in the query.
 *  @param parent The project ID or project number in which this auto domain
 *    mapping should
 *    be created.
 *
 *  @return GTLRCloudRunQuery_NamespacesAutodomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_AutoDomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an auto domain mapping.
 *
 *  Method: run.namespaces.autodomainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAutodomainmappingsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAutodomainmappingsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the auto domain mapping being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete an auto domain mapping.
 *
 *  @param name The name of the auto domain mapping being deleted. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesAutodomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about an auto domain mapping.
 *
 *  Method: run.namespaces.autodomainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAutodomainmappingsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAutodomainmappingsGetWithname:]

/**
 *  The name of the auto domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Get information about an auto domain mapping.
 *
 *  @param name The name of the auto domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesAutodomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List auto domain mappings.
 *
 *  Method: run.namespaces.autodomainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAutodomainmappingsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAutodomainmappingsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the auto domain mappings should
 *  be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListAutoDomainMappingsResponse.
 *
 *  List auto domain mappings.
 *
 *  @param parent The project ID or project number from which the auto domain
 *    mappings should
 *    be listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesAutodomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace an auto domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.namespaces.autodomainmappings.replaceAutoDomainMapping
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesAutodomainmappingsReplaceAutoDomainMapping : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesAutodomainmappingsReplaceAutoDomainMappingWithObject:name:]

/**
 *  The name of the auto domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Replace an auto domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_AutoDomainMapping to include in the query.
 *  @param name The name of the auto domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesAutodomainmappingsReplaceAutoDomainMapping
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_AutoDomainMapping *)object
                           name:(NSString *)name;

@end

/**
 *  Create a configuration.
 *
 *  Method: run.namespaces.configurations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesConfigurationsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this configuration should be
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Create a configuration.
 *
 *  @param object The @c GTLRCloudRun_Configuration to include in the query.
 *  @param parent The project ID or project number in which this configuration
 *    should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Configuration *)object
                         parent:(NSString *)parent;

@end

/**
 *  delete a configuration.
 *  This will cause the configuration to delete all child revisions. Prior to
 *  calling this, any route referencing the configuration (or revision
 *  from the configuration) must be deleted.
 *
 *  Method: run.namespaces.configurations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesConfigurationsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the configuration being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  delete a configuration.
 *  This will cause the configuration to delete all child revisions. Prior to
 *  calling this, any route referencing the configuration (or revision
 *  from the configuration) must be deleted.
 *
 *  @param name The name of the configuration being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a configuration.
 *
 *  Method: run.namespaces.configurations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesConfigurationsGetWithname:]

/**
 *  The name of the configuration being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Get information about a configuration.
 *
 *  @param name The name of the configuration being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List configurations.
 *
 *  Method: run.namespaces.configurations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesConfigurationsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the configurations should be
 *  listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListConfigurationsResponse.
 *
 *  List configurations.
 *
 *  @param parent The project ID or project number from which the configurations
 *    should be
 *    listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a configuration.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.namespaces.configurations.replaceConfiguration
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesConfigurationsReplaceConfiguration : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesConfigurationsReplaceConfigurationWithObject:name:]

/**
 *  The name of the configuration being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Replace a configuration.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Configuration to include in the query.
 *  @param name The name of the configuration being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesConfigurationsReplaceConfiguration
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Configuration *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new domain mapping.
 *
 *  Method: run.namespaces.domainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesDomainmappingsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this domain mapping should be
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Create a new domain mapping.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param parent The project ID or project number in which this domain mapping
 *    should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a domain mapping.
 *
 *  Method: run.namespaces.domainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesDomainmappingsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the domain mapping being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a domain mapping.
 *
 *  @param name The name of the domain mapping being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a domain mapping.
 *
 *  Method: run.namespaces.domainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesDomainmappingsGetWithname:]

/**
 *  The name of the domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Get information about a domain mapping.
 *
 *  @param name The name of the domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List domain mappings.
 *
 *  Method: run.namespaces.domainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesDomainmappingsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the domain mappings should be
 *  listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListDomainMappingsResponse.
 *
 *  List domain mappings.
 *
 *  @param parent The project ID or project number from which the domain
 *    mappings should be
 *    listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.namespaces.domainmappings.replaceDomainMapping
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesDomainmappingsReplaceDomainMapping : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesDomainmappingsReplaceDomainMappingWithObject:name:]

/**
 *  The name of the domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Replace a domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param name The name of the domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesDomainmappingsReplaceDomainMapping
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                           name:(NSString *)name;

@end

/**
 *  Delete a revision.
 *
 *  Method: run.namespaces.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRevisionsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the revision being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a revision.
 *
 *  @param name The name of the revision being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a revision.
 *
 *  Method: run.namespaces.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRevisionsGetWithname:]

/**
 *  The name of the revision being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Revision.
 *
 *  Get information about a revision.
 *
 *  @param name The name of the revision being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List revisions.
 *
 *  Method: run.namespaces.revisions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRevisionsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRevisionsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the revisions should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRevisionsResponse.
 *
 *  List revisions.
 *
 *  @param parent The project ID or project number from which the revisions
 *    should be listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesRevisionsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a route.
 *
 *  Method: run.namespaces.routes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRoutesCreateWithObject:parent:]

/** The project ID or project number in which this route should be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Create a route.
 *
 *  @param object The @c GTLRCloudRun_Route to include in the query.
 *  @param parent The project ID or project number in which this route should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Route *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a route.
 *  This will cause the route to stop serving traffic.
 *
 *  Method: run.namespaces.routes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRoutesDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the route being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a route.
 *  This will cause the route to stop serving traffic.
 *
 *  @param name The name of the route being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a route.
 *
 *  Method: run.namespaces.routes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRoutesGetWithname:]

/**
 *  The name of the route being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Get information about a route.
 *
 *  @param name The name of the route being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List routes.
 *
 *  Method: run.namespaces.routes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRoutesListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the routes should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRoutesResponse.
 *
 *  List routes.
 *
 *  @param parent The project ID or project number from which the routes should
 *    be listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a route.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.namespaces.routes.replaceRoute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesRoutesReplaceRoute : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesRoutesReplaceRouteWithObject:name:]

/**
 *  The name of the route being replaced. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Replace a route.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Route to include in the query.
 *  @param name The name of the route being replaced. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesRoutesReplaceRoute
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Route *)object
                           name:(NSString *)name;

@end

/**
 *  Create a service.
 *
 *  Method: run.namespaces.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesServicesCreateWithObject:parent:]

/**
 *  The project ID or project number in which this service should be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Create a service.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param parent The project ID or project number in which this service should
 *    be created.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a service.
 *  This will cause the Service to stop serving traffic and will delete the
 *  child entities like Routes, Configurations and Revisions.
 *
 *  Method: run.namespaces.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesServicesDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the service being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a service.
 *  This will cause the Service to stop serving traffic and will delete the
 *  child entities like Routes, Configurations and Revisions.
 *
 *  @param name The name of the service being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a service.
 *
 *  Method: run.namespaces.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesServicesGetWithname:]

/**
 *  The name of the service being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Get information about a service.
 *
 *  @param name The name of the service being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List services.
 *
 *  Method: run.namespaces.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesServicesListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the services should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListServicesResponse.
 *
 *  List services.
 *
 *  @param parent The project ID or project number from which the services
 *    should be listed.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a service.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.namespaces.services.replaceService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_NamespacesServicesReplaceService : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForNamespacesServicesReplaceServiceWithObject:name:]

/**
 *  The name of the service being replaced. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Replace a service.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param name The name of the service being replaced. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_NamespacesServicesReplaceService
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                           name:(NSString *)name;

@end

/**
 *  List authorized domains.
 *
 *  Method: run.projects.locations.authorizeddomains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAuthorizeddomainsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAuthorizeddomainsListWithparent:]

/** Maximum results to return per page. */
@property(nonatomic, assign) NSInteger pageSize;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Name of the parent Application resource. Example: `apps/myapp`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_ListAuthorizedDomainsResponse.
 *
 *  List authorized domains.
 *
 *  @param parent Name of the parent Application resource. Example:
 *    `apps/myapp`.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAuthorizeddomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new auto domain mapping.
 *
 *  Method: run.projects.locations.autodomainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAutodomainmappingsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this auto domain mapping should
 *  be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Creates a new auto domain mapping.
 *
 *  @param object The @c GTLRCloudRun_AutoDomainMapping to include in the query.
 *  @param parent The project ID or project number in which this auto domain
 *    mapping should
 *    be created.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_AutoDomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an auto domain mapping.
 *
 *  Method: run.projects.locations.autodomainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAutodomainmappingsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the auto domain mapping being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete an auto domain mapping.
 *
 *  @param name The name of the auto domain mapping being deleted. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about an auto domain mapping.
 *
 *  Method: run.projects.locations.autodomainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAutodomainmappingsGetWithname:]

/**
 *  The name of the auto domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Get information about an auto domain mapping.
 *
 *  @param name The name of the auto domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List auto domain mappings.
 *
 *  Method: run.projects.locations.autodomainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAutodomainmappingsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the auto domain mappings should
 *  be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListAutoDomainMappingsResponse.
 *
 *  List auto domain mappings.
 *
 *  @param parent The project ID or project number from which the auto domain
 *    mappings should
 *    be listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace an auto domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.projects.locations.autodomainmappings.replaceAutoDomainMapping
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsReplaceAutoDomainMapping : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsAutodomainmappingsReplaceAutoDomainMappingWithObject:name:]

/**
 *  The name of the auto domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_AutoDomainMapping.
 *
 *  Replace an auto domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_AutoDomainMapping to include in the query.
 *  @param name The name of the auto domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsAutodomainmappingsReplaceAutoDomainMapping
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_AutoDomainMapping *)object
                           name:(NSString *)name;

@end

/**
 *  Create a configuration.
 *
 *  Method: run.projects.locations.configurations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsConfigurationsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this configuration should be
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Create a configuration.
 *
 *  @param object The @c GTLRCloudRun_Configuration to include in the query.
 *  @param parent The project ID or project number in which this configuration
 *    should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Configuration *)object
                         parent:(NSString *)parent;

@end

/**
 *  delete a configuration.
 *  This will cause the configuration to delete all child revisions. Prior to
 *  calling this, any route referencing the configuration (or revision
 *  from the configuration) must be deleted.
 *
 *  Method: run.projects.locations.configurations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsConfigurationsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the configuration being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  delete a configuration.
 *  This will cause the configuration to delete all child revisions. Prior to
 *  calling this, any route referencing the configuration (or revision
 *  from the configuration) must be deleted.
 *
 *  @param name The name of the configuration being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a configuration.
 *
 *  Method: run.projects.locations.configurations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsConfigurationsGetWithname:]

/**
 *  The name of the configuration being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Get information about a configuration.
 *
 *  @param name The name of the configuration being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List configurations.
 *
 *  Method: run.projects.locations.configurations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsConfigurationsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the configurations should be
 *  listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListConfigurationsResponse.
 *
 *  List configurations.
 *
 *  @param parent The project ID or project number from which the configurations
 *    should be
 *    listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a configuration.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.projects.locations.configurations.replaceConfiguration
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsConfigurationsReplaceConfiguration : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsConfigurationsReplaceConfigurationWithObject:name:]

/**
 *  The name of the configuration being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Configuration.
 *
 *  Replace a configuration.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Configuration to include in the query.
 *  @param name The name of the configuration being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsConfigurationsReplaceConfiguration
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Configuration *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsDomainmappingsCreateWithObject:parent:]

/**
 *  The project ID or project number in which this domain mapping should be
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Create a new domain mapping.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param parent The project ID or project number in which this domain mapping
 *    should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsDomainmappingsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the domain mapping being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a domain mapping.
 *
 *  @param name The name of the domain mapping being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a domain mapping.
 *
 *  Method: run.projects.locations.domainmappings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsDomainmappingsGetWithname:]

/**
 *  The name of the domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Get information about a domain mapping.
 *
 *  @param name The name of the domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List domain mappings.
 *
 *  Method: run.projects.locations.domainmappings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsDomainmappingsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the domain mappings should be
 *  listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListDomainMappingsResponse.
 *
 *  List domain mappings.
 *
 *  @param parent The project ID or project number from which the domain
 *    mappings should be
 *    listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.projects.locations.domainmappings.replaceDomainMapping
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsDomainmappingsReplaceDomainMapping : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsDomainmappingsReplaceDomainMappingWithObject:name:]

/**
 *  The name of the domain mapping being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_DomainMapping.
 *
 *  Replace a domain mapping.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_DomainMapping to include in the query.
 *  @param name The name of the domain mapping being retrieved. If needed,
 *    replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsDomainmappingsReplaceDomainMapping
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_DomainMapping *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: run.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: run.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudRun_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Delete a revision.
 *
 *  Method: run.projects.locations.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRevisionsDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the revision being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a revision.
 *
 *  @param name The name of the revision being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a revision.
 *
 *  Method: run.projects.locations.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRevisionsGetWithname:]

/**
 *  The name of the revision being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Revision.
 *
 *  Get information about a revision.
 *
 *  @param name The name of the revision being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List revisions.
 *
 *  Method: run.projects.locations.revisions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRevisionsList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRevisionsListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the revisions should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRevisionsResponse.
 *
 *  List revisions.
 *
 *  @param parent The project ID or project number from which the revisions
 *    should be listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRevisionsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a route.
 *
 *  Method: run.projects.locations.routes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRoutesCreateWithObject:parent:]

/** The project ID or project number in which this route should be created. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Create a route.
 *
 *  @param object The @c GTLRCloudRun_Route to include in the query.
 *  @param parent The project ID or project number in which this route should be
 *    created.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Route *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a route.
 *  This will cause the route to stop serving traffic.
 *
 *  Method: run.projects.locations.routes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRoutesDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the route being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a route.
 *  This will cause the route to stop serving traffic.
 *
 *  @param name The name of the route being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a route.
 *
 *  Method: run.projects.locations.routes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRoutesGetWithname:]

/**
 *  The name of the route being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Get information about a route.
 *
 *  @param name The name of the route being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List routes.
 *
 *  Method: run.projects.locations.routes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRoutesListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the routes should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListRoutesResponse.
 *
 *  List routes.
 *
 *  @param parent The project ID or project number from which the routes should
 *    be listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a route.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.projects.locations.routes.replaceRoute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsRoutesReplaceRoute : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsRoutesReplaceRouteWithObject:name:]

/**
 *  The name of the route being replaced. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Route.
 *
 *  Replace a route.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Route to include in the query.
 *  @param name The name of the route being replaced. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsRoutesReplaceRoute
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Route *)object
                           name:(NSString *)name;

@end

/**
 *  Create a service.
 *
 *  Method: run.projects.locations.services.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesCreate : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesCreateWithObject:parent:]

/**
 *  The project ID or project number in which this service should be created.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Create a service.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param parent The project ID or project number in which this service should
 *    be created.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a service.
 *  This will cause the Service to stop serving traffic and will delete the
 *  child entities like Routes, Configurations and Revisions.
 *
 *  Method: run.projects.locations.services.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesDelete : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesDeleteWithname:]

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Cloud Run currently ignores this parameter. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the service being deleted. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specifies the propagation policy of delete. Cloud Run currently ignores
 *  this setting, and deletes in the background. Please see
 *  kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *propagationPolicy;

/**
 *  Fetches a @c GTLRCloudRun_Status.
 *
 *  Delete a service.
 *  This will cause the Service to stop serving traffic and will delete the
 *  child entities like Routes, Configurations and Revisions.
 *
 *  @param name The name of the service being deleted. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get information about a service.
 *
 *  Method: run.projects.locations.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesGet : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesGetWithname:]

/**
 *  The name of the service being retrieved. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Get information about a service.
 *
 *  @param name The name of the service being retrieved. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get the IAM Access Control policy currently in effect for the given
 *  Cloud Run service. This result does not include any inherited policies.
 *
 *  Method: run.projects.locations.services.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesGetIamPolicy : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected.
 *  Requests for policies with any conditional bindings must specify version 3.
 *  Policies without any conditional bindings may specify any valid value or
 *  leave the field unset.
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_Policy.
 *
 *  Get the IAM Access Control policy currently in effect for the given
 *  Cloud Run service. This result does not include any inherited policies.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  List services.
 *
 *  Method: run.projects.locations.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesList : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesListWithparent:]

/**
 *  Optional encoded string to continue paging.
 *
 *  Remapped to 'continueProperty' to avoid language reserved word 'continue'.
 */
@property(nonatomic, copy, nullable) NSString *continueProperty;

/**
 *  Allows to filter resources based on a specific value for a field name.
 *  Send this in a query string format. i.e. 'metadata.name%3Dlorem'.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *fieldSelector;

/** Not currently used by Cloud Run. */
@property(nonatomic, assign) BOOL includeUninitialized;

/**
 *  Allows to filter resources based on a label. Supported operations are
 *  =, !=, exists, in, and notIn.
 */
@property(nonatomic, copy, nullable) NSString *labelSelector;

/** The maximum number of records that should be returned. */
@property(nonatomic, assign) NSInteger limit;

/**
 *  The project ID or project number from which the services should be listed.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The baseline resource version from which the list or watch operation should
 *  start. Not currently used by Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *resourceVersion;

/**
 *  Flag that indicates that the client expects to watch this resource as well.
 *  Not currently used by Cloud Run.
 */
@property(nonatomic, assign) BOOL watch;

/**
 *  Fetches a @c GTLRCloudRun_ListServicesResponse.
 *
 *  List services.
 *
 *  @param parent The project ID or project number from which the services
 *    should be listed.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Replace a service.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  Method: run.projects.locations.services.replaceService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesReplaceService : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesReplaceServiceWithObject:name:]

/**
 *  The name of the service being replaced. If needed, replace
 *  {namespace_id} with the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudRun_Service.
 *
 *  Replace a service.
 *  Only the spec and metadata labels and annotations are modifiable. After
 *  the Update request, Cloud Run will work to make the 'status'
 *  match the requested 'spec'.
 *  May provide metadata.resourceVersion to enforce update from last read for
 *  optimistic concurrency control.
 *
 *  @param object The @c GTLRCloudRun_Service to include in the query.
 *  @param name The name of the service being replaced. If needed, replace
 *    {namespace_id} with the project ID.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesReplaceService
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_Service *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the IAM Access control policy for the specified Service. Overwrites
 *  any existing policy.
 *
 *  Method: run.projects.locations.services.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesSetIamPolicy : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_Policy.
 *
 *  Sets the IAM Access control policy for the specified Service. Overwrites
 *  any existing policy.
 *
 *  @param object The @c GTLRCloudRun_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified Project.
 *  There are no permissions required for making this API call.
 *
 *  Method: run.projects.locations.services.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudRunCloudPlatform
 */
@interface GTLRCloudRunQuery_ProjectsLocationsServicesTestIamPermissions : GTLRCloudRunQuery
// Previous library name was
//   +[GTLQueryCloudRun queryForProjectsLocationsServicesTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRCloudRun_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified Project.
 *  There are no permissions required for making this API call.
 *
 *  @param object The @c GTLRCloudRun_TestIamPermissionsRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRCloudRunQuery_ProjectsLocationsServicesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRCloudRun_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
