// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Run Admin API (run/v2)
// Description:
//   Deploy and manage user provided container images that scale automatically
//   based on incoming requests. The Cloud Run Admin API follows the Knative
//   Serving API specification.
// Documentation:
//   https://cloud.google.com/run/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudRun_GoogleCloudRunOpV2BinaryAuthorization;
@class GTLRCloudRun_GoogleCloudRunOpV2CloudSqlInstance;
@class GTLRCloudRun_GoogleCloudRunOpV2Condition;
@class GTLRCloudRun_GoogleCloudRunOpV2Container;
@class GTLRCloudRun_GoogleCloudRunOpV2ContainerPort;
@class GTLRCloudRun_GoogleCloudRunOpV2EnvVar;
@class GTLRCloudRun_GoogleCloudRunOpV2EnvVarSource;
@class GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements;
@class GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements_Limits;
@class GTLRCloudRun_GoogleCloudRunOpV2Revision;
@class GTLRCloudRun_GoogleCloudRunOpV2Revision_Annotations;
@class GTLRCloudRun_GoogleCloudRunOpV2Revision_Labels;
@class GTLRCloudRun_GoogleCloudRunOpV2RevisionScaling;
@class GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate;
@class GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Annotations;
@class GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Labels;
@class GTLRCloudRun_GoogleCloudRunOpV2SecretKeySelector;
@class GTLRCloudRun_GoogleCloudRunOpV2SecretVolumeSource;
@class GTLRCloudRun_GoogleCloudRunOpV2Service;
@class GTLRCloudRun_GoogleCloudRunOpV2Service_Annotations;
@class GTLRCloudRun_GoogleCloudRunOpV2Service_Labels;
@class GTLRCloudRun_GoogleCloudRunOpV2TrafficTarget;
@class GTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus;
@class GTLRCloudRun_GoogleCloudRunOpV2VersionToPath;
@class GTLRCloudRun_GoogleCloudRunOpV2Volume;
@class GTLRCloudRun_GoogleCloudRunOpV2VolumeMount;
@class GTLRCloudRun_GoogleCloudRunOpV2VpcAccess;
@class GTLRCloudRun_GoogleIamV1AuditConfig;
@class GTLRCloudRun_GoogleIamV1AuditLogConfig;
@class GTLRCloudRun_GoogleIamV1Binding;
@class GTLRCloudRun_GoogleIamV1Policy;
@class GTLRCloudRun_GoogleLongrunningOperation;
@class GTLRCloudRun_GoogleLongrunningOperation_Metadata;
@class GTLRCloudRun_GoogleLongrunningOperation_Response;
@class GTLRCloudRun_GoogleRpcStatus;
@class GTLRCloudRun_GoogleRpcStatus_Details_Item;
@class GTLRCloudRun_GoogleTypeExpr;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.domainMappingReason

/**
 *  Certificate already exists.
 *
 *  Value: "CERTIFICATE_ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificateAlreadyExists;
/**
 *  Certificate issuance failed.
 *
 *  Value: "CERTIFICATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificateFailed;
/**
 *  Certificate issuance pending.
 *
 *  Value: "CERTIFICATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificatePending;
/**
 *  Default value.
 *
 *  Value: "DOMAIN_MAPPING_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_DomainMappingReasonUndefined;
/**
 *  Mapping already exists.
 *
 *  Value: "MAPPING_ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_MappingAlreadyExists;
/**
 *  Insufficient permissions.
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_PermissionDenied;
/**
 *  Internal route is not yet ready.
 *
 *  Value: "ROUTE_NOT_READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_RouteNotReady;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.executionReason

/**
 *  Default value.
 *
 *  Value: "EXECUTION_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_ExecutionReasonUndefined;
/**
 *  Internal system error getting execution status. System will retry.
 *
 *  Value: "JOB_STATUS_SERVICE_POLLING_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_JobStatusServicePollingError;
/**
 *  A task reached its retry limit and the last attempt failed due to the user
 *  container exiting with a non-zero exit code.
 *
 *  Value: "NON_ZERO_EXIT_CODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_NonZeroExitCode;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.internalReason

/**
 *  Assigning traffic; this is a transient reason.
 *
 *  Value: "ASSIGNING_TRAFFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_AssigningTraffic;
/**
 *  Internal configuration is missing; this is usually a transient reason.
 *
 *  Value: "CONFIGURATION_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_ConfigurationMissing;
/**
 *  The revision name provided conflicts with an existing one.
 *
 *  Value: "CONFLICTING_REVISION_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_ConflictingRevisionName;
/**
 *  Enabling GCFv2 URI support; this is a transient reason.
 *
 *  Value: "ENABLING_GCFV2_URI_SUPPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_EnablingGcfv2UriSupport;
/**
 *  Default value.
 *
 *  Value: "INTERNAL_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_InternalReasonUndefined;
/**
 *  Revision is missing; this is usually a transient reason.
 *
 *  Value: "REVISION_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_RevisionMissing;
/**
 *  The revision can't be created because it violates an org policy setting.
 *
 *  Value: "REVISION_ORG_POLICY_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_RevisionOrgPolicyViolation;
/**
 *  Updating ingress traffic settings; this is a transient reason.
 *
 *  Value: "UPDATING_INGRESS_TRAFFIC_ALLOWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_UpdatingIngressTrafficAllowed;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.reason

/**
 *  There was a build error.
 *
 *  Value: "BUILD_STEP_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_BuildStepFailed;
/**
 *  Default value.
 *
 *  Value: "COMMON_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_CommonReasonUndefined;
/**
 *  Container image policy authorization check failed.
 *
 *  Value: "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerImageAuthorizationCheckFailed;
/**
 *  Container image is not authorized by policy.
 *
 *  Value: "CONTAINER_IMAGE_UNAUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerImageUnauthorized;
/**
 *  The container image path is incorrect.
 *
 *  Value: "CONTAINER_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerMissing;
/**
 *  Insufficient permissions on the container image.
 *
 *  Value: "CONTAINER_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerPermissionDenied;
/**
 *  Permission check on encryption key failed.
 *
 *  Value: "ENCRYPTION_KEY_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_EncryptionKeyCheckFailed;
/**
 *  Insufficient permissions on encryption key.
 *
 *  Value: "ENCRYPTION_KEY_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_EncryptionKeyPermissionDenied;
/**
 *  System will retry immediately.
 *
 *  Value: "IMMEDIATE_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ImmediateRetry;
/**
 *  System will retry later; current attempt failed.
 *
 *  Value: "POSTPONED_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_PostponedRetry;
/**
 *  Timed out waiting for completion.
 *
 *  Value: "PROGRESS_DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ProgressDeadlineExceeded;
/**
 *  Revision creation process failed.
 *
 *  Value: "REVISION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_RevisionFailed;
/**
 *  The internal route is missing.
 *
 *  Value: "ROUTE_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_RouteMissing;
/**
 *  At least one Access check on secrets failed.
 *
 *  Value: "SECRETS_ACCESS_CHECK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_SecretsAccessCheckFailed;
/**
 *  Reason unknown. Further details will be in message.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_Unknown;
/**
 *  Waiting for operation to complete.
 *
 *  Value: "WAITING_FOR_OPERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_WaitingForOperation;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.revisionReason

/**
 *  The maximum allowed number of active revisions has been reached.
 *
 *  Value: "ACTIVE_REVISION_LIMIT_REACHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_ActiveRevisionLimitReached;
/**
 *  Health check failed due to user error from customized path of the container.
 *  System will retry.
 *
 *  Value: "CUSTOMIZED_PATH_RESPONSE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_CustomizedPathResponsePending;
/**
 *  There was a health check error.
 *
 *  Value: "HEALTH_CHECK_CONTAINER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_HealthCheckContainerError;
/**
 *  A revision's container has no port specified since the revision is of a
 *  manually scaled service with 0 instance count
 *
 *  Value: "HEALTH_CHECK_SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_HealthCheckSkipped;
/**
 *  A revision with min_instance_count > 0 was created and is reserved, but it
 *  was not configured to serve traffic, so it's not live. This can also happen
 *  momentarily during traffic migration.
 *
 *  Value: "MIN_INSTANCES_NOT_PROVISIONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_MinInstancesNotProvisioned;
/**
 *  There was no deployment defined. This value is no longer used, but Services
 *  created in older versions of the API might contain this value.
 *
 *  Value: "NO_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_NoDeployment;
/**
 *  Revision in Pending state.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Pending;
/**
 *  Revision is being recreated.
 *
 *  Value: "RECREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Recreating;
/**
 *  Revision is in Reserve state.
 *
 *  Value: "RESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Reserve;
/**
 *  Revision is Retired.
 *
 *  Value: "RETIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Retired;
/**
 *  Revision is being retired.
 *
 *  Value: "RETIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Retiring;
/**
 *  Default value.
 *
 *  Value: "REVISION_REASON_UNDEFINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_RevisionReasonUndefined;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.severity

/**
 *  Error severity.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Error;
/**
 *  Info severity.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Info;
/**
 *  Unspecified severity
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_SeverityUnspecified;
/**
 *  Warning severity.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Condition.state

/**
 *  Terminal state: Reconciliation did not succeed.
 *
 *  Value: "CONDITION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionFailed;
/**
 *  Transient state: Reconciliation has not started yet.
 *
 *  Value: "CONDITION_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionPending;
/**
 *  Transient state: reconciliation is still in progress.
 *
 *  Value: "CONDITION_RECONCILING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionReconciling;
/**
 *  Terminal state: Reconciliation completed successfully.
 *
 *  Value: "CONDITION_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionSucceeded;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Revision.executionEnvironment

/**
 *  Uses the Google-default environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentDefault;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Revision.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don’t have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the “Deprecation Policy” section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate.executionEnvironment

/**
 *  Uses the Google-default environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentDefault;
/**
 *  Uses Second Generation environment.
 *
 *  Value: "EXECUTION_ENVIRONMENT_GEN2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2;
/**
 *  Unspecified
 *
 *  Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Service.ingress

/**
 *  All inbound traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficAll;
/**
 *  Both internal and Google Cloud Load Balancer traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficInternalLoadBalancer;
/**
 *  Only internal traffic is allowed.
 *
 *  Value: "INGRESS_TRAFFIC_INTERNAL_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficInternalOnly;
/**
 *  Unspecified
 *
 *  Value: "INGRESS_TRAFFIC_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2Service.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don’t have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the “Deprecation Policy” section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2TrafficTarget.type

/**
 *  Allocates instances to the Service's latest ready Revision.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeLatest;
/**
 *  Allocates instances to a Revision by name.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeRevision;
/**
 *  Unspecified instance allocation type.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus.type

/**
 *  Allocates instances to the Service's latest ready Revision.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeLatest;
/**
 *  Allocates instances to a Revision by name.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeRevision;
/**
 *  Unspecified instance allocation type.
 *
 *  Value: "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleCloudRunOpV2VpcAccess.egress

/**
 *  All outbound traffic is routed through the VPC connector.
 *
 *  Value: "ALL_TRAFFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_AllTraffic;
/**
 *  Only private IP ranges are routed through the VPC connector.
 *
 *  Value: "PRIVATE_RANGES_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_PrivateRangesOnly;
/**
 *  Unspecified
 *
 *  Value: "VPC_EGRESS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_VpcEgressUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudRun_GoogleIamV1AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified;

/**
 *  Settings for Binary Authorization feature.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2BinaryAuthorization : GTLRObject

/**
 *  If present, indicates to use Breakglass using this justification. If
 *  use_default is False, then it must be empty. For more information on
 *  breakglass, see
 *  https://cloud.google.com/binary-authorization/docs/using-breakglass
 */
@property(nonatomic, copy, nullable) NSString *breakglassJustification;

/**
 *  If True, indicates to use the default project's binary authorization policy.
 *  If False, binary authorization will be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useDefault;

@end


/**
 *  Represents a specific Cloud SQL instance.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2CloudSqlInstance : GTLRObject

/**
 *  The Cloud SQL instance connection names, as can be found in
 *  https://console.cloud.google.com/sql/instances. Visit
 *  https://cloud.google.com/sql/docs/mysql/connect-run for more information on
 *  how to connect Cloud SQL and Cloud Run. Format:
 *  {project}:{location}:{instance}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *connections;

@end


/**
 *  Defines a status condition for a resource.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Condition : GTLRObject

/**
 *  A reason for the domain mapping condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificateAlreadyExists
 *        Certificate already exists. (Value: "CERTIFICATE_ALREADY_EXISTS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificateFailed
 *        Certificate issuance failed. (Value: "CERTIFICATE_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_CertificatePending
 *        Certificate issuance pending. (Value: "CERTIFICATE_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_DomainMappingReasonUndefined
 *        Default value. (Value: "DOMAIN_MAPPING_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_MappingAlreadyExists
 *        Mapping already exists. (Value: "MAPPING_ALREADY_EXISTS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_PermissionDenied
 *        Insufficient permissions. (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_DomainMappingReason_RouteNotReady
 *        Internal route is not yet ready. (Value: "ROUTE_NOT_READY")
 */
@property(nonatomic, copy, nullable) NSString *domainMappingReason;

/**
 *  A reason for the execution condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_ExecutionReasonUndefined
 *        Default value. (Value: "EXECUTION_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_JobStatusServicePollingError
 *        Internal system error getting execution status. System will retry.
 *        (Value: "JOB_STATUS_SERVICE_POLLING_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_ExecutionReason_NonZeroExitCode
 *        A task reached its retry limit and the last attempt failed due to the
 *        user container exiting with a non-zero exit code. (Value:
 *        "NON_ZERO_EXIT_CODE")
 */
@property(nonatomic, copy, nullable) NSString *executionReason;

/**
 *  A reason for the internal condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_AssigningTraffic
 *        Assigning traffic; this is a transient reason. (Value:
 *        "ASSIGNING_TRAFFIC")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_ConfigurationMissing
 *        Internal configuration is missing; this is usually a transient reason.
 *        (Value: "CONFIGURATION_MISSING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_ConflictingRevisionName
 *        The revision name provided conflicts with an existing one. (Value:
 *        "CONFLICTING_REVISION_NAME")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_EnablingGcfv2UriSupport
 *        Enabling GCFv2 URI support; this is a transient reason. (Value:
 *        "ENABLING_GCFV2_URI_SUPPORT")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_InternalReasonUndefined
 *        Default value. (Value: "INTERNAL_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_RevisionMissing
 *        Revision is missing; this is usually a transient reason. (Value:
 *        "REVISION_MISSING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_RevisionOrgPolicyViolation
 *        The revision can't be created because it violates an org policy
 *        setting. (Value: "REVISION_ORG_POLICY_VIOLATION")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_InternalReason_UpdatingIngressTrafficAllowed
 *        Updating ingress traffic settings; this is a transient reason. (Value:
 *        "UPDATING_INGRESS_TRAFFIC_ALLOWED")
 */
@property(nonatomic, copy, nullable) NSString *internalReason;

/** Last time the condition transitioned from one status to another. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastTransitionTime;

/** Human readable message indicating details about the current status. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  A common (service-level) reason for this condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_BuildStepFailed
 *        There was a build error. (Value: "BUILD_STEP_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_CommonReasonUndefined
 *        Default value. (Value: "COMMON_REASON_UNDEFINED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerImageAuthorizationCheckFailed
 *        Container image policy authorization check failed. (Value:
 *        "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerImageUnauthorized
 *        Container image is not authorized by policy. (Value:
 *        "CONTAINER_IMAGE_UNAUTHORIZED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerMissing
 *        The container image path is incorrect. (Value: "CONTAINER_MISSING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ContainerPermissionDenied
 *        Insufficient permissions on the container image. (Value:
 *        "CONTAINER_PERMISSION_DENIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_EncryptionKeyCheckFailed
 *        Permission check on encryption key failed. (Value:
 *        "ENCRYPTION_KEY_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_EncryptionKeyPermissionDenied
 *        Insufficient permissions on encryption key. (Value:
 *        "ENCRYPTION_KEY_PERMISSION_DENIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ImmediateRetry
 *        System will retry immediately. (Value: "IMMEDIATE_RETRY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_PostponedRetry
 *        System will retry later; current attempt failed. (Value:
 *        "POSTPONED_RETRY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_ProgressDeadlineExceeded
 *        Timed out waiting for completion. (Value:
 *        "PROGRESS_DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_RevisionFailed
 *        Revision creation process failed. (Value: "REVISION_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_RouteMissing The
 *        internal route is missing. (Value: "ROUTE_MISSING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_SecretsAccessCheckFailed
 *        At least one Access check on secrets failed. (Value:
 *        "SECRETS_ACCESS_CHECK_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_Unknown Reason
 *        unknown. Further details will be in message. (Value: "UNKNOWN")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Reason_WaitingForOperation
 *        Waiting for operation to complete. (Value: "WAITING_FOR_OPERATION")
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  A reason for the revision condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_ActiveRevisionLimitReached
 *        The maximum allowed number of active revisions has been reached.
 *        (Value: "ACTIVE_REVISION_LIMIT_REACHED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_CustomizedPathResponsePending
 *        Health check failed due to user error from customized path of the
 *        container. System will retry. (Value:
 *        "CUSTOMIZED_PATH_RESPONSE_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_HealthCheckContainerError
 *        There was a health check error. (Value:
 *        "HEALTH_CHECK_CONTAINER_ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_HealthCheckSkipped
 *        A revision's container has no port specified since the revision is of
 *        a manually scaled service with 0 instance count (Value:
 *        "HEALTH_CHECK_SKIPPED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_MinInstancesNotProvisioned
 *        A revision with min_instance_count > 0 was created and is reserved,
 *        but it was not configured to serve traffic, so it's not live. This can
 *        also happen momentarily during traffic migration. (Value:
 *        "MIN_INSTANCES_NOT_PROVISIONED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_NoDeployment
 *        There was no deployment defined. This value is no longer used, but
 *        Services created in older versions of the API might contain this
 *        value. (Value: "NO_DEPLOYMENT")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Pending
 *        Revision in Pending state. (Value: "PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Recreating
 *        Revision is being recreated. (Value: "RECREATING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Reserve
 *        Revision is in Reserve state. (Value: "RESERVE")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Retired
 *        Revision is Retired. (Value: "RETIRED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_Retiring
 *        Revision is being retired. (Value: "RETIRING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_RevisionReason_RevisionReasonUndefined
 *        Default value. (Value: "REVISION_REASON_UNDEFINED")
 */
@property(nonatomic, copy, nullable) NSString *revisionReason;

/**
 *  How to interpret failures of this condition, one of Error, Warning, Info
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Error Error
 *        severity. (Value: "ERROR")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Info Info
 *        severity. (Value: "INFO")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_SeverityUnspecified
 *        Unspecified severity (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_Severity_Warning Warning
 *        severity. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  State of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionFailed
 *        Terminal state: Reconciliation did not succeed. (Value:
 *        "CONDITION_FAILED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionPending
 *        Transient state: Reconciliation has not started yet. (Value:
 *        "CONDITION_PENDING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionReconciling
 *        Transient state: reconciliation is still in progress. (Value:
 *        "CONDITION_RECONCILING")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_ConditionSucceeded
 *        Terminal state: Reconciliation completed successfully. (Value:
 *        "CONDITION_SUCCEEDED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Condition_State_StateUnspecified
 *        The default value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  type is used to communicate the status of the reconciliation process. See
 *  also:
 *  https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting
 *  Types common to all resources include: * "Ready": True when the Resource is
 *  ready.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A single application container. This specifies both the container to run,
 *  the command to run in the container and the arguments to supply to it. Note
 *  that additional arguments may be supplied by the system to the container at
 *  runtime.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Container : GTLRObject

/**
 *  Arguments to the entrypoint. The docker image's CMD is used if this is not
 *  provided. Variable references $(VAR_NAME) are expanded using the container's
 *  environment. If a variable cannot be resolved, the reference in the input
 *  string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
 *  double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
 *  regardless of whether the variable exists or not. More info:
 *  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT
 *  is used if this is not provided. Variable references $(VAR_NAME) are
 *  expanded using the container's environment. If a variable cannot be
 *  resolved, the reference in the input string will be unchanged. The
 *  $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).
 *  Escaped references will never be expanded, regardless of whether the
 *  variable exists or not. More info:
 *  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *command;

/** List of environment variables to set in the container. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2EnvVar *> *env;

/**
 *  Required. URL of the Container image in Google Container Registry or Docker
 *  More info: https://kubernetes.io/docs/concepts/containers/images
 */
@property(nonatomic, copy, nullable) NSString *image;

/** Name of the container specified as a DNS_LABEL. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of ports to expose from the container. Only a single port can be
 *  specified. The specified ports must be listening on all interfaces (0.0.0.0)
 *  within the container to be accessible. If omitted, a port number will be
 *  chosen and passed to the container through the PORT environment variable for
 *  the container to listen on.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2ContainerPort *> *ports;

/**
 *  Compute Resource requirements by this container. More info:
 *  https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements *resources;

/** Volume to mount into the container's filesystem. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2VolumeMount *> *volumeMounts;

@end


/**
 *  ContainerPort represents a network port in a single container.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2ContainerPort : GTLRObject

/**
 *  Port number the container listens on. This must be a valid TCP port number,
 *  0 < container_port < 65536.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *containerPort;

/**
 *  If specified, used to specify which protocol to use. Allowed values are
 *  "http1" and "h2c".
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  EnvVar represents an environment variable present in a Container.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2EnvVar : GTLRObject

/**
 *  Required. Name of the environment variable. Must be a C_IDENTIFIER, and mnay
 *  not exceed 32768 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Variable references $(VAR_NAME) are expanded using the previous defined
 *  environment variables in the container and any route environment variables.
 *  If a variable cannot be resolved, the reference in the input string will be
 *  unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie:
 *  $$(VAR_NAME). Escaped references will never be expanded, regardless of
 *  whether the variable exists or not. Defaults to "", and the maximum length
 *  is 32768 bytes.
 */
@property(nonatomic, copy, nullable) NSString *value;

/** Source for the environment variable's value. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2EnvVarSource *valueSource;

@end


/**
 *  EnvVarSource represents a source for the value of an EnvVar.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2EnvVarSource : GTLRObject

/** Selects a secret and a specific version from Cloud Secret Manager. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2SecretKeySelector *secretKeyRef;

@end


/**
 *  Response message containing a list of Revisions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "revisions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2ListRevisionsResponse : GTLRCollectionObject

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListRevisions request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting list of Revisions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Revision *> *revisions;

@end


/**
 *  Response message containing a list of Services.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "services" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2ListServicesResponse : GTLRCollectionObject

/**
 *  A token indicating there are more items than page_size. Use it in the next
 *  ListServices request to continue.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting list of Services.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Service *> *services;

@end


/**
 *  ResourceRequirements describes the compute resource requirements.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements : GTLRObject

/**
 *  Determines whether CPU should be throttled or not outside of requests.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuIdle;

/**
 *  Only memory and CPU are supported. Note: The only supported values for CPU
 *  are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The
 *  values of the map is string form of the 'quantity' k8s type:
 *  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements_Limits *limits;

@end


/**
 *  Only memory and CPU are supported. Note: The only supported values for CPU
 *  are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The
 *  values of the map is string form of the 'quantity' k8s type:
 *  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2ResourceRequirements_Limits : GTLRObject
@end


/**
 *  A Revision is an immutable snapshot of code and configuration. A Revision
 *  references a container image. Revisions are only created by updates to its
 *  parent Service.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Revision : GTLRObject

/** KRM-style annotations for the resource. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2Revision_Annotations *annotations;

/**
 *  Output only. The Condition of this Revision, containing its readiness
 *  status, and detailed error information in case it did not reach a serving
 *  state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Condition *> *conditions;

/**
 *  Indicates whether Confidential Cloud Run is enabled in this Revision.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidential;

/**
 *  Sets the maximum number of requests that each serving instance can receive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *containerConcurrency;

/**
 *  Holds the single container that defines the unit of execution for this
 *  Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Container *> *containers;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. For a deleted resource, the deletion time. It is only populated
 *  as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  A reference to a customer managed encryption key (CMEK) to use to encrypt
 *  this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The execution environment being used to host this Revision.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentDefault
 *        Uses the Google-default environment. (Value:
 *        "EXECUTION_ENVIRONMENT_DEFAULT")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted. It is only populated as a response to a Delete request.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  KRM-style labels for the resource. User-provided labels are shared with
 *  Google's billing system, so they can be used to filter, or break down
 *  billing charges by team, component, environment, state, etc. For more
 *  information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate
 *  some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces.
 *  Those labels are read-only, and user changes will not be preserved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2Revision_Labels *labels;

/**
 *  Set the launch stage to a preview stage on write to allow use of preview
 *  features in that stage. On read, describes whether the resource uses preview
 *  features. Launch Stages are defined at [Google Cloud Platform Launch
 *  Stages](http://cloud.google.com/terms/launch-stages).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Alpha Alpha
 *        is a limited availability test for releases before they are cleared
 *        for widespread use. By Alpha, all significant design issues are
 *        resolved and we are in the process of verifying functionality. Alpha
 *        customers need to apply for access, agree to applicable terms, and
 *        have their projects allowlisted. Alpha releases don’t have to be
 *        feature complete, no SLAs are provided, and there are no technical
 *        support obligations, but they will be far enough along that customers
 *        can actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Beta Beta is
 *        the point at which we are ready to open a release for any customer to
 *        use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the “Deprecation Policy” section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Ga GA
 *        features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Revision_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/** Output only. The Google Console URI to obtain logs for the Revision. */
@property(nonatomic, copy, nullable) NSString *logUri;

/** Output only. The unique name of this Revision. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Revision currently serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Indicates whether the resource's reconciliation is still in
 *  progress. See comments in `Service.reconciling` for additional information
 *  on reconciliation process in Cloud Run.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Scaling settings for this revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2RevisionScaling *scaling;

/** Output only. The name of the parent service. */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Email address of the IAM service account associated with the revision of the
 *  service. The service account represents the identity of the running
 *  revision, and determines what permissions the revision has.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Max allowed time for an instance to respond to a request. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Server assigned unique identifier for the Revision. The value
 *  is a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Volume *> *volumes;

/**
 *  VPC Access configuration for this Revision. For more information, visit
 *  https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2VpcAccess *vpcAccess;

@end


/**
 *  KRM-style annotations for the resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Revision_Annotations : GTLRObject
@end


/**
 *  KRM-style labels for the resource. User-provided labels are shared with
 *  Google's billing system, so they can be used to filter, or break down
 *  billing charges by team, component, environment, state, etc. For more
 *  information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate
 *  some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces.
 *  Those labels are read-only, and user changes will not be preserved.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Revision_Labels : GTLRObject
@end


/**
 *  Settings for revision-level scaling settings.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2RevisionScaling : GTLRObject

/**
 *  Maximum number of serving instances that this resource should have.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstanceCount;

/**
 *  Minimum number of serving instances that this resource should have.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minInstanceCount;

@end


/**
 *  RevisionTemplate describes the data a revision should have when created from
 *  a template.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate : GTLRObject

/** KRM-style annotations for the resource. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Annotations *annotations;

/**
 *  Enables Confidential Cloud Run in Revisions created using this template.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidential;

/**
 *  Sets the maximum number of requests that each serving instance can receive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *containerConcurrency;

/**
 *  Holds the single container that defines the unit of execution for this
 *  Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Container *> *containers;

/**
 *  A reference to a customer managed encryption key (CMEK) to use to encrypt
 *  this container image. For more information, go to
 *  https://cloud.google.com/run/docs/securing/using-cmek
 */
@property(nonatomic, copy, nullable) NSString *encryptionKey;

/**
 *  The sandbox environment to host this Revision.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentDefault
 *        Uses the Google-default environment. (Value:
 *        "EXECUTION_ENVIRONMENT_DEFAULT")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentGen2
 *        Uses Second Generation environment. (Value:
 *        "EXECUTION_ENVIRONMENT_GEN2")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_ExecutionEnvironment_ExecutionEnvironmentUnspecified
 *        Unspecified (Value: "EXECUTION_ENVIRONMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionEnvironment;

/** KRM-style labels for the resource. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Labels *labels;

/**
 *  The unique name for the revision. If this field is omitted, it will be
 *  automatically generated based on the Service name.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/** Scaling settings for this Revision. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2RevisionScaling *scaling;

/**
 *  Email address of the IAM service account associated with the revision of the
 *  service. The service account represents the identity of the running
 *  revision, and determines what permissions the revision has. If not provided,
 *  the revision will use the project's default service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Max allowed time for an instance to respond to a request. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** A list of Volumes to make available to containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Volume *> *volumes;

/**
 *  VPC Access configuration to use for this Revision. For more information,
 *  visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2VpcAccess *vpcAccess;

@end


/**
 *  KRM-style annotations for the resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Annotations : GTLRObject
@end


/**
 *  KRM-style labels for the resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate_Labels : GTLRObject
@end


/**
 *  SecretEnvVarSource represents a source for the value of an EnvVar.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2SecretKeySelector : GTLRObject

/**
 *  Required. The name of the secret in Cloud Secret Manager. Format:
 *  {secret_name} if the secret is in the same project.
 *  projects/{project}/secrets/{secret_name} if the secret is in a different
 *  project.
 */
@property(nonatomic, copy, nullable) NSString *secret;

/**
 *  The Cloud Secret Manager secret version. Can be 'latest' for the latest
 *  value or an integer for a specific version.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  The secret's value will be presented as the content of a file whose name is
 *  defined in the item path. If no items are defined, the name of the file is
 *  the secret.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2SecretVolumeSource : GTLRCollectionObject

/**
 *  Integer representation of mode bits to use on created files by default. Must
 *  be a value between 0000 and 0777 (octal), defaulting to 0644. Directories
 *  within the path are not affected by this setting. Notes * Internally, a
 *  umask of 0222 will be applied to any non-zero value. * This is an integer
 *  representation of the mode bits. So, the octal integer value should look
 *  exactly as the chmod numeric notation with a leading zero. Some examples:
 *  for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640
 *  (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755
 *  (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in
 *  conflict with other options that affect the file mode, like fsGroup, and the
 *  result can be other mode bits set. This might be in conflict with other
 *  options that affect the file mode, like fsGroup, and as a result, other mode
 *  bits could be set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultMode;

/**
 *  If unspecified, the volume will expose a file whose name is the secret,
 *  relative to VolumeMount.mount_path. If specified, the key will be used as
 *  the version to fetch from Cloud Secret Manager and the path will be the name
 *  of the file exposed in the volume. When items are defined, they must specify
 *  a path and a version.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2VersionToPath *> *items;

/**
 *  Required. The name of the secret in Cloud Secret Manager. Format: {secret}
 *  if the secret is in the same project. projects/{project}/secrets/{secret} if
 *  the secret is in a different project.
 */
@property(nonatomic, copy, nullable) NSString *secret;

@end


/**
 *  Service acts as a top-level container that manages a set of configurations
 *  and revision templates which implement a network service. Service exists to
 *  provide a singular abstraction which can be access controlled, reasoned
 *  about, and which encapsulates software lifecycle decisions such as rollout
 *  policy and team resource ownership.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Service : GTLRObject

/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run will populate some annotations using
 *  'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows
 *  Kubernetes annotations' namespacing, limits, and rules. More info:
 *  http://kubernetes.io/docs/user-guide/annotations
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2Service_Annotations *annotations;

/** Settings for the Binary Authorization feature. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2BinaryAuthorization *binaryAuthorization;

/** Arbitrary identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *client;

/** Arbitrary version identifier for the API client. */
@property(nonatomic, copy, nullable) NSString *clientVersion;

/**
 *  Output only. The Conditions of all other associated sub-resources. They
 *  contain additional diagnostics information in case the Service does not
 *  reach its Serving state. See comments in `reconciling` for additional
 *  information on reconciliation process in Cloud Run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2Condition *> *conditions;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Email address of the authenticated creator. */
@property(nonatomic, copy, nullable) NSString *creator;

/** Output only. The deletion time. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  User-provided description of the Service.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. A system-generated fingerprint for this version of the
 *  resource. May be used to detect modification conflict during updates.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. For a deleted resource, the time after which it will be
 *  permamently deleted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. A number that monotonically increases every time the user
 *  modifies the desired state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Provides the ingress settings for this Service. On output, returns the
 *  currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no
 *  revision is active.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficAll
 *        All inbound traffic is allowed. (Value: "INGRESS_TRAFFIC_ALL")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficInternalLoadBalancer
 *        Both internal and Google Cloud Load Balancer traffic is allowed.
 *        (Value: "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficInternalOnly
 *        Only internal traffic is allowed. (Value:
 *        "INGRESS_TRAFFIC_INTERNAL_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_Ingress_IngressTrafficUnspecified
 *        Unspecified (Value: "INGRESS_TRAFFIC_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *ingress;

/**
 *  Map of string keys and values that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate
 *  some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces.
 *  Those labels are read-only, and user changes will not be preserved.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2Service_Labels *labels;

/** Output only. Email address of the last authenticated modifier. */
@property(nonatomic, copy, nullable) NSString *lastModifier;

/**
 *  Output only. Name of the last created revision. See comments in
 *  `reconciling` for additional information on reconciliation process in Cloud
 *  Run.
 */
@property(nonatomic, copy, nullable) NSString *latestCreatedRevision;

/**
 *  Output only. Name of the latest revision that is serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, copy, nullable) NSString *latestReadyRevision;

/**
 *  The launch stage as defined by [Google Cloud Platform Launch
 *  Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports
 *  `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Alpha Alpha is
 *        a limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don’t have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Beta Beta is
 *        the point at which we are ready to open a release for any customer to
 *        use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the “Deprecation Policy” section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Ga GA features
 *        are open to all developers and are considered stable and fully
 *        qualified for production use. (Value: "GA")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2Service_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  The fully qualified name of this Service. In CreateServiceRequest, this
 *  field is ignored, and instead composed from CreateServiceRequest.parent and
 *  CreateServiceRequest.service_id. Format:
 *  projects/{project}/locations/{location}/services/{service_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The generation of this Service currently serving traffic. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *observedGeneration;

/**
 *  Output only. Returns true if the Service is currently being acted upon by
 *  the system to bring it into the desired state. When a new Service is
 *  created, or an existing one is updated, Cloud Run will asynchronously
 *  perform all necessary steps to bring the Service to the desired serving
 *  state. This process is called reconciliation. While reconciliation is in
 *  process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`,
 *  and `uri` will have transient values that might mismatch the intended state:
 *  Once reconciliation is over (and this field is false), there are two
 *  possible outcomes: reconciliation succeeded and the serving state matches
 *  the Service, or there was an error, and reconciliation failed. This state
 *  can be found in `terminal_condition.state`. If reconciliation succeeded, the
 *  following fields will match: `traffic` and `traffic_statuses`,
 *  `observed_generation` and `generation`, `latest_ready_revision` and
 *  `latest_created_revision`. If reconciliation failed, `traffic_statuses`,
 *  `observed_generation`, and `latest_ready_revision` will have the state of
 *  the last serving revision, or empty for newly created Services. Additional
 *  information on the failure can be found in `terminal_condition` and
 *  `conditions`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Required. The template used to create revisions for this Service.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2RevisionTemplate *templateProperty;

/**
 *  Output only. The Condition of this Service, containing its readiness status,
 *  and detailed error information in case it did not reach a serving state. See
 *  comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2Condition *terminalCondition;

/**
 *  Specifies how to distribute traffic over a collection of Revisions belonging
 *  to the Service. If traffic is empty or not provided, defaults to 100%
 *  traffic to the latest `Ready` Revision.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2TrafficTarget *> *traffic;

/**
 *  Output only. Detailed status information for corresponding traffic targets.
 *  See comments in `reconciling` for additional information on reconciliation
 *  process in Cloud Run.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus *> *trafficStatuses;

/**
 *  Output only. Server assigned unique identifier for the trigger. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. The main URI in which this Service is serving traffic. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Unstructured key value map that may be set by external tools to store and
 *  arbitrary metadata. They are not queryable and should be preserved when
 *  modifying objects. Cloud Run will populate some annotations using
 *  'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows
 *  Kubernetes annotations' namespacing, limits, and rules. More info:
 *  http://kubernetes.io/docs/user-guide/annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Service_Annotations : GTLRObject
@end


/**
 *  Map of string keys and values that can be used to organize and categorize
 *  objects. User-provided labels are shared with Google's billing system, so
 *  they can be used to filter, or break down billing charges by team,
 *  component, environment, state, etc. For more information, visit
 *  https://cloud.google.com/resource-manager/docs/creating-managing-labels or
 *  https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate
 *  some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces.
 *  Those labels are read-only, and user changes will not be preserved.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Service_Labels : GTLRObject
@end


/**
 *  Holds a single traffic routing entry for the Service. Allocations can be
 *  done to a specific Revision name, or pointing to the latest Ready Revision.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2TrafficTarget : GTLRObject

/**
 *  Specifies percent of the traffic to this Revision. This defaults to zero if
 *  unspecified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

/**
 *  Revision to which to send this portion of traffic, if traffic allocation is
 *  by revision.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Indicates a string to be part of the URI to exclusively reference this
 *  target.
 */
@property(nonatomic, copy, nullable) NSString *tag;

/**
 *  The allocation type for this traffic target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeLatest
 *        Allocates instances to the Service's latest ready Revision. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeRevision
 *        Allocates instances to a Revision by name. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTarget_Type_TrafficTargetAllocationTypeUnspecified
 *        Unspecified instance allocation type. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents the observed state of a single `TrafficTarget` entry.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus : GTLRObject

/**
 *  Specifies percent of the traffic to this Revision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

/** Revision to which this traffic is sent. */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Indicates the string used in the URI to exclusively reference this target.
 */
@property(nonatomic, copy, nullable) NSString *tag;

/**
 *  The allocation type for this traffic target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeLatest
 *        Allocates instances to the Service's latest ready Revision. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeRevision
 *        Allocates instances to a Revision by name. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2TrafficTargetStatus_Type_TrafficTargetAllocationTypeUnspecified
 *        Unspecified instance allocation type. (Value:
 *        "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Displays the target URI. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  VersionToPath maps a specific version of a secret to a relative file to
 *  mount to, relative to VolumeMount's mount_path.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2VersionToPath : GTLRObject

/**
 *  Integer octal mode bits to use on this file, must be a value between 01 and
 *  0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes
 *  * Internally, a umask of 0222 will be applied to any non-zero value. * This
 *  is an integer representation of the mode bits. So, the octal integer value
 *  should look exactly as the chmod numeric notation with a leading zero. Some
 *  examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For
 *  chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755
 *  (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in
 *  conflict with other options that affect the file mode, like fsGroup, and the
 *  result can be other mode bits set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mode;

/** Required. The relative path of the secret in the container. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The Cloud Secret Manager secret version. Can be 'latest' for the latest
 *  value or an integer for a specific version.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Volume represents a named volume in a container.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2Volume : GTLRObject

/**
 *  For Cloud SQL volumes, contains the specific instances that should be
 *  mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more
 *  information on how to connect Cloud SQL and Cloud Run.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2CloudSqlInstance *cloudSqlInstance;

/** Required. Volume's name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Secret represents a secret that should populate this volume. More info:
 *  https://kubernetes.io/docs/concepts/storage/volumes#secret
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleCloudRunOpV2SecretVolumeSource *secret;

@end


/**
 *  VolumeMount describes a mounting of a Volume within a container.
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2VolumeMount : GTLRObject

/**
 *  Required. Path within the container at which the volume should be mounted.
 *  Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must
 *  otherwise be `/cloudsql`. All instances defined in the Volume will be
 *  available as `/cloudsql/[instance]`. For more information on Cloud SQL
 *  volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
 */
@property(nonatomic, copy, nullable) NSString *mountPath;

/** Required. This must match the Name of a Volume. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  VPC Access settings. For more information on creating a VPC Connector, visit
 *  https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For
 *  information on how to configure Cloud Run with an existing VPC Connector,
 *  visit https://cloud.google.com/run/docs/configuring/connecting-vpc
 */
@interface GTLRCloudRun_GoogleCloudRunOpV2VpcAccess : GTLRObject

/**
 *  VPC Access connector name. Format:
 *  projects/{project}/locations/{location}/connectors/{connector}
 */
@property(nonatomic, copy, nullable) NSString *connector;

/**
 *  Traffic VPC egress settings.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_AllTraffic All
 *        outbound traffic is routed through the VPC connector. (Value:
 *        "ALL_TRAFFIC")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_PrivateRangesOnly
 *        Only private IP ranges are routed through the VPC connector. (Value:
 *        "PRIVATE_RANGES_ONLY")
 *    @arg @c kGTLRCloudRun_GoogleCloudRunOpV2VpcAccess_Egress_VpcEgressUnspecified
 *        Unspecified (Value: "VPC_EGRESS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *egress;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRCloudRun_GoogleIamV1AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudRun_GoogleIamV1AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudRun_GoogleIamV1AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudRun_GoogleIamV1Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleTypeExpr *condition;

/**
 *  Specifies the principals requesting access for a Cloud Platform resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. *
 *  `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` . * `serviceAccount:{emailid}`:
 *  An email address that represents a service account. For example,
 *  `my-other-app\@appspot.gserviceaccount.com`. * `group:{emailid}`: An email
 *  address that represents a Google group. For example, `admins\@example.com`.
 *  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudRun_GoogleIamV1Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleIamV1Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudRun_GoogleIamV1SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Cloud Platform services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleIamV1Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudRun_GoogleIamV1TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudRun_GoogleIamV1TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudRun_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudRun_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRCloudRun_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudRun_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudRun_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudRun_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudRun_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudRun_GoogleTypeExpr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
