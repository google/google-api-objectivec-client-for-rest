// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Street View Publish API (streetviewpublish/v1)
// Description:
//   Publishes 360 photos to Google Maps, along with position, orientation, and
//   connectivity metadata. Apps can offer an interface for positioning,
//   connecting, and uploading user-generated Street View images.
// Documentation:
//   https://developers.google.com/streetview/publish/

#import "GTLRStreetViewPublishQuery.h"

#import "GTLRStreetViewPublishObjects.h"

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRStreetViewPublishViewBasic              = @"BASIC";
NSString * const kGTLRStreetViewPublishViewIncludeDownloadUrl = @"INCLUDE_DOWNLOAD_URL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRStreetViewPublishQuery

@dynamic fields;

@end

@implementation GTLRStreetViewPublishQuery_PhotoCreate

+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Photo *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/photo";
  GTLRStreetViewPublishQuery_PhotoCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRStreetViewPublish_Photo class];
  query.loggingName = @"streetviewpublish.photo.create";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotoDelete

@dynamic photoId;

+ (instancetype)queryWithPhotoId:(NSString *)photoId {
  NSArray *pathParams = @[ @"photoId" ];
  NSString *pathURITemplate = @"v1/photo/{photoId}";
  GTLRStreetViewPublishQuery_PhotoDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.photoId = photoId;
  query.expectedObjectClass = [GTLRStreetViewPublish_Empty class];
  query.loggingName = @"streetviewpublish.photo.delete";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotoGet

@dynamic languageCode, photoId, view;

+ (instancetype)queryWithPhotoId:(NSString *)photoId {
  NSArray *pathParams = @[ @"photoId" ];
  NSString *pathURITemplate = @"v1/photo/{photoId}";
  GTLRStreetViewPublishQuery_PhotoGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.photoId = photoId;
  query.expectedObjectClass = [GTLRStreetViewPublish_Photo class];
  query.loggingName = @"streetviewpublish.photo.get";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotosBatchDelete

+ (instancetype)queryWithObject:(GTLRStreetViewPublish_BatchDeletePhotosRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/photos:batchDelete";
  GTLRStreetViewPublishQuery_PhotosBatchDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRStreetViewPublish_BatchDeletePhotosResponse class];
  query.loggingName = @"streetviewpublish.photos.batchDelete";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotosBatchGet

@dynamic languageCode, photoIds, view;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"photoIds" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/photos:batchGet";
  GTLRStreetViewPublishQuery_PhotosBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRStreetViewPublish_BatchGetPhotosResponse class];
  query.loggingName = @"streetviewpublish.photos.batchGet";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotosBatchUpdate

+ (instancetype)queryWithObject:(GTLRStreetViewPublish_BatchUpdatePhotosRequest *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/photos:batchUpdate";
  GTLRStreetViewPublishQuery_PhotosBatchUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRStreetViewPublish_BatchUpdatePhotosResponse class];
  query.loggingName = @"streetviewpublish.photos.batchUpdate";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotosList

@dynamic filter, languageCode, pageSize, pageToken, view;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/photos";
  GTLRStreetViewPublishQuery_PhotosList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRStreetViewPublish_ListPhotosResponse class];
  query.loggingName = @"streetviewpublish.photos.list";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotoStartUpload

+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Empty *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"v1/photo:startUpload";
  GTLRStreetViewPublishQuery_PhotoStartUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRStreetViewPublish_UploadRef class];
  query.loggingName = @"streetviewpublish.photo.startUpload";
  return query;
}

@end

@implementation GTLRStreetViewPublishQuery_PhotoUpdate

@dynamic identifier, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRStreetViewPublish_Photo *)object
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"id" ];
  NSString *pathURITemplate = @"v1/photo/{id}";
  GTLRStreetViewPublishQuery_PhotoUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRStreetViewPublish_Photo class];
  query.loggingName = @"streetviewpublish.photo.update";
  return query;
}

@end
