// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Data Transfer API (bigquerydatatransfer/v1)
// Description:
//   Transfers data from partner SaaS applications to Google BigQuery on a
//   scheduled, managed basis.
// Documentation:
//   https://cloud.google.com/bigquery/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigQueryDataTransfer_CheckValidCredsRequest;
@class GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest;
@class GTLRBigQueryDataTransfer_TransferConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// messageTypes

/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesError;
/** Value: "INFO" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesInfo;
/** Value: "MESSAGE_SEVERITY_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified;
/** Value: "WARNING" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesWarning;

// ----------------------------------------------------------------------------
// runAttempt

/** Value: "LATEST" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferRunAttemptLatest;
/** Value: "RUN_ATTEMPT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified;

// ----------------------------------------------------------------------------
// states

/** Value: "CANCELLED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesCancelled;
/** Value: "FAILED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesFailed;
/** Value: "PENDING" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesPending;
/** Value: "RUNNING" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesRunning;
/** Value: "SUCCEEDED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesSucceeded;
/** Value: "TRANSFER_STATE_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransferStatesTransferStateUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other BigQuery Data Transfer query classes.
 */
@interface GTLRBigQueryDataTransferQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *  Some data sources doesn't support service account, so we need to talk to
 *  them on behalf of the end user. This API just checks whether we have OAuth
 *  token for the particular user, which is a pre-requisite before user can
 *  create a transfer config.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.checkValidCreds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsDataSourcesCheckValidCredsWithObject:name:]

/**
 *  The data source in the form:
 *  `projects/{project_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_CheckValidCredsResponse.
 *
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *  Some data sources doesn't support service account, so we need to talk to
 *  them on behalf of the end user. This API just checks whether we have OAuth
 *  token for the particular user, which is a pre-requisite before user can
 *  create a transfer config.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_CheckValidCredsRequest to
 *    include in the query.
 *  @param name The data source in the form:
 *    `projects/{project_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a supported data source and returns its settings,
 *  which can be used for UI rendering.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsDataSourcesGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_DataSource.
 *
 *  Retrieves a supported data source and returns its settings,
 *  which can be used for UI rendering.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists supported data sources and returns their settings,
 *  which can be used for UI rendering.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsDataSourcesListWithparent:]

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListDataSourcesRequest` list results. For multiple-page
 *  results, `ListDataSourcesResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The BigQuery project id for which data sources should be returned.
 *  Must be in the form: `projects/{project_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListDataSourcesResponse.
 *
 *  Lists supported data sources and returns their settings,
 *  which can be used for UI rendering.
 *
 *  @param parent The BigQuery project id for which data sources should be
 *    returned.
 *    Must be in the form: `projects/{project_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *  Some data sources doesn't support service account, so we need to talk to
 *  them on behalf of the end user. This API just checks whether we have OAuth
 *  token for the particular user, which is a pre-requisite before user can
 *  create a transfer config.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.checkValidCreds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsDataSourcesCheckValidCredsWithObject:name:]

/**
 *  The data source in the form:
 *  `projects/{project_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_CheckValidCredsResponse.
 *
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *  Some data sources doesn't support service account, so we need to talk to
 *  them on behalf of the end user. This API just checks whether we have OAuth
 *  token for the particular user, which is a pre-requisite before user can
 *  create a transfer config.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_CheckValidCredsRequest to
 *    include in the query.
 *  @param name The data source in the form:
 *    `projects/{project_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a supported data source and returns its settings,
 *  which can be used for UI rendering.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsDataSourcesGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_DataSource.
 *
 *  Retrieves a supported data source and returns its settings,
 *  which can be used for UI rendering.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists supported data sources and returns their settings,
 *  which can be used for UI rendering.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsDataSourcesListWithparent:]

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListDataSourcesRequest` list results. For multiple-page
 *  results, `ListDataSourcesResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The BigQuery project id for which data sources should be returned.
 *  Must be in the form: `projects/{project_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListDataSourcesResponse.
 *
 *  Lists supported data sources and returns their settings,
 *  which can be used for UI rendering.
 *
 *  @param parent The BigQuery project id for which data sources should be
 *    returned.
 *    Must be in the form: `projects/{project_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets information about a location.
 *
 *  Method: bigquerydatatransfer.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsGetWithname:]

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: bigquerydatatransfer.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new data transfer configuration.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsCreateWithObject:parent:]

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required if new credentials are needed, as indicated by
 *  `CheckValidCreds`.
 *  In order to obtain authorization_code, please make a
 *  request to
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
 *  * client_id should be OAuth client_id of BigQuery DTS API for the given
 *  data source returned by ListDataSources method.
 *  * data_source_scopes are the scopes returned by ListDataSources method.
 *  * redirect_uri is an optional parameter. If not specified, then
 *  authorization code is posted to the opener of authorization flow window.
 *  Otherwise it will be sent to the redirect uri. A special value of
 *  urn:ietf:wg:oauth:2.0:oob means that authorization code should be
 *  returned in the title bar of the browser, with the page text prompting
 *  the user to copy the code and paste it in the application.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The BigQuery project id where the transfer configuration should be created.
 *  Must be in the format projects/{project_id}/locations/{location_id}
 *  If specified location and location of the destination bigquery dataset
 *  do not match - the request will fail.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Creates a new data transfer configuration.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param parent The BigQuery project id where the transfer configuration
 *    should be created.
 *    Must be in the format projects/{project_id}/locations/{location_id}
 *    If specified location and location of the destination bigquery dataset
 *    do not match - the request will fail.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a data transfer configuration,
 *  including any associated transfer runs and logs.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsDeleteWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes a data transfer configuration,
 *  including any associated transfer runs and logs.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about a data transfer config.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Returns information about a data transfer config.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about all data transfers in the project.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsListWithparent:]

/**
 *  When specified, only configurations of requested data sources are returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dataSourceIds;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransfersRequest` list results. For multiple-page
 *  results, `ListTransfersResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The BigQuery project id for which data sources
 *  should be returned: `projects/{project_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferConfigsResponse.
 *
 *  Returns information about all data transfers in the project.
 *
 *  @param parent The BigQuery project id for which data sources
 *    should be returned: `projects/{project_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a data transfer configuration.
 *  All fields must be set, even if they are not updated.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsPatchWithObject:name:]

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  If it is provided, the transfer configuration will be associated with the
 *  authorizing user.
 *  In order to obtain authorization_code, please make a
 *  request to
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
 *  * client_id should be OAuth client_id of BigQuery DTS API for the given
 *  data source returned by ListDataSources method.
 *  * data_source_scopes are the scopes returned by ListDataSources method.
 *  * redirect_uri is an optional parameter. If not specified, then
 *  authorization code is posted to the opener of authorization flow window.
 *  Otherwise it will be sent to the redirect uri. A special value of
 *  urn:ietf:wg:oauth:2.0:oob means that authorization code should be
 *  returned in the title bar of the browser, with the page text prompting
 *  the user to copy the code and paste it in the application.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The resource name of the transfer config.
 *  Transfer config names have the form of
 *  `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *  The name is automatically generated based on the config_id specified in
 *  CreateTransferConfigRequest along with project_id and region. If config_id
 *  is not provided, usually a uuid, even though it is not guaranteed or
 *  required, will be generated for config_id.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Updates a data transfer configuration.
 *  All fields must be set, even if they are not updated.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param name The resource name of the transfer config.
 *    Transfer config names have the form of
 *    `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *    The name is automatically generated based on the config_id specified in
 *    CreateTransferConfigRequest along with project_id and region. If config_id
 *    is not provided, usually a uuid, even though it is not guaranteed or
 *    required, will be generated for config_id.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsRunsDeleteWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes the specified transfer run.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about the particular transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsRunsGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferRun.
 *
 *  Returns information about the particular transfer run.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about running and completed jobs.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsRunsListWithparent:]

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransferRunsRequest` list results. For multiple-page
 *  results, `ListTransferRunsResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Name of transfer configuration for which transfer runs should be retrieved.
 *  Format of transfer configuration resource name is:
 *  `projects/{project_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Indicates how run attempts are to be pulled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified Value
 *        "RUN_ATTEMPT_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptLatest Value "LATEST"
 */
@property(nonatomic, copy, nullable) NSString *runAttempt;

/**
 *  When specified, only transfer runs with requested states are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferStatesTransferStateUnspecified Value
 *        "TRANSFER_STATE_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferStatesPending Value "PENDING"
 *    @arg @c kGTLRBigQueryDataTransferStatesRunning Value "RUNNING"
 *    @arg @c kGTLRBigQueryDataTransferStatesSucceeded Value "SUCCEEDED"
 *    @arg @c kGTLRBigQueryDataTransferStatesFailed Value "FAILED"
 *    @arg @c kGTLRBigQueryDataTransferStatesCancelled Value "CANCELLED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferRunsResponse.
 *
 *  Returns information about running and completed jobs.
 *
 *  @param parent Name of transfer configuration for which transfer runs should
 *    be retrieved.
 *    Format of transfer configuration resource name is:
 *    `projects/{project_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns user facing log messages for the data transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.transferLogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsRunsTransferLogsListWithparent:]

/**
 *  Message types to return. If not populated - INFO, WARNING and ERROR
 *  messages are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified
 *        Value "MESSAGE_SEVERITY_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesInfo Value "INFO"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesWarning Value "WARNING"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesError Value "ERROR"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *messageTypes;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransferLogsRequest` list results. For multiple-page
 *  results, `ListTransferLogsResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Transfer run name in the form:
 *  `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferLogsResponse.
 *
 *  Returns user facing log messages for the data transfer run.
 *
 *  @param parent Transfer run name in the form:
 *    `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates transfer runs for a time range [start_time, end_time].
 *  For each date - or whatever granularity the data source supports - in the
 *  range, one transfer run is created.
 *  Note that runs are created per UTC time in the time range.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.scheduleRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsLocationsTransferConfigsScheduleRunsWithObject:parent:]

/**
 *  Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse.
 *
 *  Creates transfer runs for a time range [start_time, end_time].
 *  For each date - or whatever granularity the data source supports - in the
 *  range, one transfer run is created.
 *  Note that runs are created per UTC time in the time range.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest to
 *    include in the query.
 *  @param parent Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new data transfer configuration.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsCreateWithObject:parent:]

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required if new credentials are needed, as indicated by
 *  `CheckValidCreds`.
 *  In order to obtain authorization_code, please make a
 *  request to
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
 *  * client_id should be OAuth client_id of BigQuery DTS API for the given
 *  data source returned by ListDataSources method.
 *  * data_source_scopes are the scopes returned by ListDataSources method.
 *  * redirect_uri is an optional parameter. If not specified, then
 *  authorization code is posted to the opener of authorization flow window.
 *  Otherwise it will be sent to the redirect uri. A special value of
 *  urn:ietf:wg:oauth:2.0:oob means that authorization code should be
 *  returned in the title bar of the browser, with the page text prompting
 *  the user to copy the code and paste it in the application.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The BigQuery project id where the transfer configuration should be created.
 *  Must be in the format projects/{project_id}/locations/{location_id}
 *  If specified location and location of the destination bigquery dataset
 *  do not match - the request will fail.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Creates a new data transfer configuration.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param parent The BigQuery project id where the transfer configuration
 *    should be created.
 *    Must be in the format projects/{project_id}/locations/{location_id}
 *    If specified location and location of the destination bigquery dataset
 *    do not match - the request will fail.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a data transfer configuration,
 *  including any associated transfer runs and logs.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsDeleteWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes a data transfer configuration,
 *  including any associated transfer runs and logs.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about a data transfer config.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Returns information about a data transfer config.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about all data transfers in the project.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsListWithparent:]

/**
 *  When specified, only configurations of requested data sources are returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dataSourceIds;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransfersRequest` list results. For multiple-page
 *  results, `ListTransfersResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The BigQuery project id for which data sources
 *  should be returned: `projects/{project_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferConfigsResponse.
 *
 *  Returns information about all data transfers in the project.
 *
 *  @param parent The BigQuery project id for which data sources
 *    should be returned: `projects/{project_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a data transfer configuration.
 *  All fields must be set, even if they are not updated.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsPatchWithObject:name:]

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  If it is provided, the transfer configuration will be associated with the
 *  authorizing user.
 *  In order to obtain authorization_code, please make a
 *  request to
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
 *  * client_id should be OAuth client_id of BigQuery DTS API for the given
 *  data source returned by ListDataSources method.
 *  * data_source_scopes are the scopes returned by ListDataSources method.
 *  * redirect_uri is an optional parameter. If not specified, then
 *  authorization code is posted to the opener of authorization flow window.
 *  Otherwise it will be sent to the redirect uri. A special value of
 *  urn:ietf:wg:oauth:2.0:oob means that authorization code should be
 *  returned in the title bar of the browser, with the page text prompting
 *  the user to copy the code and paste it in the application.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The resource name of the transfer config.
 *  Transfer config names have the form of
 *  `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *  The name is automatically generated based on the config_id specified in
 *  CreateTransferConfigRequest along with project_id and region. If config_id
 *  is not provided, usually a uuid, even though it is not guaranteed or
 *  required, will be generated for config_id.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Updates a data transfer configuration.
 *  All fields must be set, even if they are not updated.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param name The resource name of the transfer config.
 *    Transfer config names have the form of
 *    `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *    The name is automatically generated based on the config_id specified in
 *    CreateTransferConfigRequest along with project_id and region. If config_id
 *    is not provided, usually a uuid, even though it is not guaranteed or
 *    required, will be generated for config_id.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsRunsDeleteWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes the specified transfer run.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about the particular transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsRunsGetWithname:]

/**
 *  The field will contain name of the resource requested, for example:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferRun.
 *
 *  Returns information about the particular transfer run.
 *
 *  @param name The field will contain name of the resource requested, for
 *    example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about running and completed jobs.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsRunsListWithparent:]

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransferRunsRequest` list results. For multiple-page
 *  results, `ListTransferRunsResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Name of transfer configuration for which transfer runs should be retrieved.
 *  Format of transfer configuration resource name is:
 *  `projects/{project_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Indicates how run attempts are to be pulled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified Value
 *        "RUN_ATTEMPT_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptLatest Value "LATEST"
 */
@property(nonatomic, copy, nullable) NSString *runAttempt;

/**
 *  When specified, only transfer runs with requested states are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferStatesTransferStateUnspecified Value
 *        "TRANSFER_STATE_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferStatesPending Value "PENDING"
 *    @arg @c kGTLRBigQueryDataTransferStatesRunning Value "RUNNING"
 *    @arg @c kGTLRBigQueryDataTransferStatesSucceeded Value "SUCCEEDED"
 *    @arg @c kGTLRBigQueryDataTransferStatesFailed Value "FAILED"
 *    @arg @c kGTLRBigQueryDataTransferStatesCancelled Value "CANCELLED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferRunsResponse.
 *
 *  Returns information about running and completed jobs.
 *
 *  @param parent Name of transfer configuration for which transfer runs should
 *    be retrieved.
 *    Format of transfer configuration resource name is:
 *    `projects/{project_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns user facing log messages for the data transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.transferLogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsRunsTransferLogsListWithparent:]

/**
 *  Message types to return. If not populated - INFO, WARNING and ERROR
 *  messages are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified
 *        Value "MESSAGE_SEVERITY_UNSPECIFIED"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesInfo Value "INFO"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesWarning Value "WARNING"
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesError Value "ERROR"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *messageTypes;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page
 *  of `ListTransferLogsRequest` list results. For multiple-page
 *  results, `ListTransferLogsResponse` outputs
 *  a `next_page` token, which can be used as the
 *  `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Transfer run name in the form:
 *  `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferLogsResponse.
 *
 *  Returns user facing log messages for the data transfer run.
 *
 *  @param parent Transfer run name in the form:
 *    `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates transfer runs for a time range [start_time, end_time].
 *  For each date - or whatever granularity the data source supports - in the
 *  range, one transfer run is created.
 *  Note that runs are created per UTC time in the time range.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.scheduleRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns : GTLRBigQueryDataTransferQuery
// Previous library name was
//   +[GTLQueryBigQueryDataTransfer queryForProjectsTransferConfigsScheduleRunsWithObject:parent:]

/**
 *  Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse.
 *
 *  Creates transfer runs for a time range [start_time, end_time].
 *  For each date - or whatever granularity the data source supports - in the
 *  range, one transfer run is created.
 *  Note that runs are created per UTC time in the time range.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest to
 *    include in the query.
 *  @param parent Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
