// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Data Transfer Service API (bigquerydatatransfer/v1)
// Description:
//   Transfers data from partner SaaS applications to Google BigQuery on a
//   scheduled, managed basis.
// Documentation:
//   https://cloud.google.com/bigquery/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRBigQueryDataTransfer_DataSource;
@class GTLRBigQueryDataTransfer_DataSourceParameter;
@class GTLRBigQueryDataTransfer_TransferConfig;
@class GTLRBigQueryDataTransfer_TransferConfig_Params;
@class GTLRBigQueryDataTransfer_TransferMessage;
@class GTLRBigQueryDataTransfer_TransferRun;
@class GTLRBigQueryDataTransfer_TransferRun_Params;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_DataSource.authorizationType

/**
 *  Use OAuth 2 authorization codes that can be exchanged
 *  for a refresh token on the backend.
 *
 *  Value: "AUTHORIZATION_CODE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_AuthorizationCode;
/**
 *  Type unspecified.
 *
 *  Value: "AUTHORIZATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_AuthorizationTypeUnspecified;
/**
 *  Return an authorization code for a given Google+ page that can then be
 *  exchanged for a refresh token on the backend.
 *
 *  Value: "GOOGLE_PLUS_AUTHORIZATION_CODE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_GooglePlusAuthorizationCode;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_DataSource.dataRefreshType

/**
 *  The data source supports data auto refresh, and runs will be scheduled
 *  for the past few days. Allows custom values to be set for each transfer
 *  config.
 *
 *  Value: "CUSTOM_SLIDING_WINDOW"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_CustomSlidingWindow;
/**
 *  The data source won't support data auto refresh, which is default value.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_None;
/**
 *  The data source supports data auto refresh, and runs will be scheduled
 *  for the past few days. Does not allow custom values to be set for each
 *  transfer config.
 *
 *  Value: "SLIDING_WINDOW"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_SlidingWindow;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_DataSource.transferType

/**
 *  Batch data transfer.
 *
 *  Value: "BATCH"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_TransferType_Batch;
/**
 *  Streaming data transfer. Streaming data source currently doesn't
 *  support multiple transfer configs per project.
 *
 *  Value: "STREAMING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_TransferType_Streaming;
/**
 *  Invalid or Unknown transfer type placeholder.
 *
 *  Value: "TRANSFER_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSource_TransferType_TransferTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_DataSourceParameter.type

/**
 *  Boolean parameter.
 *
 *  Value: "BOOLEAN"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Boolean;
/**
 *  Double precision floating point parameter.
 *
 *  Value: "DOUBLE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Double;
/**
 *  Integer parameter (64-bits).
 *  Will be serialized to json as string.
 *
 *  Value: "INTEGER"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Integer;
/**
 *  Page ID for a Google+ Page.
 *
 *  Value: "PLUS_PAGE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_PlusPage;
/**
 *  Record parameter.
 *
 *  Value: "RECORD"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Record;
/**
 *  String parameter.
 *
 *  Value: "STRING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_String;
/**
 *  Type unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_DataSourceParameter_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_TransferConfig.status

/**
 *  Data transfer is cancelled.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Cancelled;
/**
 *  Data transfer failed.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Failed;
/**
 *  Data transfer is inactive.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Inactive;
/**
 *  Data transfer is scheduled and is waiting to be picked up by
 *  data transfer backend.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Pending;
/**
 *  Data transfer is in progress.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Running;
/**
 *  Data transfer completed successsfully.
 *
 *  Value: "SUCCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_Succeeded;
/**
 *  Status placeholder.
 *
 *  Value: "TRANSFER_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferConfig_Status_TransferStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_TransferMessage.severity

/**
 *  Error message.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferMessage_Severity_Error;
/**
 *  Informational message.
 *
 *  Value: "INFO"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferMessage_Severity_Info;
/**
 *  No severity specified.
 *
 *  Value: "MESSAGE_SEVERITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferMessage_Severity_MessageSeverityUnspecified;
/**
 *  Warning message.
 *
 *  Value: "WARNING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferMessage_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRBigQueryDataTransfer_TransferRun.status

/**
 *  Data transfer is cancelled.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Cancelled;
/**
 *  Data transfer failed.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Failed;
/**
 *  Data transfer is inactive.
 *
 *  Value: "INACTIVE"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Inactive;
/**
 *  Data transfer is scheduled and is waiting to be picked up by
 *  data transfer backend.
 *
 *  Value: "PENDING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Pending;
/**
 *  Data transfer is in progress.
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Running;
/**
 *  Data transfer completed successsfully.
 *
 *  Value: "SUCCEEDED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_Succeeded;
/**
 *  Status placeholder.
 *
 *  Value: "TRANSFER_STATUS_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRBigQueryDataTransfer_TransferRun_Status_TransferStatusUnspecified;

/**
 *  A request to determine whether the user has valid credentials. This method
 *  is used to limit the number of OAuth popups in the user interface. The
 *  user id is inferred from the API call context.
 *  If the data source has the Google+ authorization type, this method
 *  returns false, as it cannot be determined whether the credentials are
 *  already valid merely based on the user id.
 */
@interface GTLRBigQueryDataTransfer_CheckValidCredsRequest : GTLRObject
@end


/**
 *  A response indicating whether the credentials exist and are valid.
 */
@interface GTLRBigQueryDataTransfer_CheckValidCredsResponse : GTLRObject

/**
 *  If set to `true`, the credentials exist and are valid.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasValidCreds;

@end


/**
 *  Represents data source metadata. Metadata is sufficient to
 *  render UI and request proper OAuth tokens.
 */
@interface GTLRBigQueryDataTransfer_DataSource : GTLRObject

/**
 *  Indicates the type of authorization.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_AuthorizationCode
 *        Use OAuth 2 authorization codes that can be exchanged
 *        for a refresh token on the backend. (Value: "AUTHORIZATION_CODE")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_AuthorizationTypeUnspecified
 *        Type unspecified. (Value: "AUTHORIZATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_AuthorizationType_GooglePlusAuthorizationCode
 *        Return an authorization code for a given Google+ page that can then be
 *        exchanged for a refresh token on the backend. (Value:
 *        "GOOGLE_PLUS_AUTHORIZATION_CODE")
 */
@property(nonatomic, copy, nullable) NSString *authorizationType;

/**
 *  Data source client id which should be used to receive refresh token.
 *  When not supplied, no offline credentials are populated for data transfer.
 */
@property(nonatomic, copy, nullable) NSString *clientId;

/**
 *  Specifies whether the data source supports automatic data refresh for the
 *  past few days, and how it's supported.
 *  For some data sources, data might not be complete until a few days later,
 *  so it's useful to refresh data automatically.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_CustomSlidingWindow
 *        The data source supports data auto refresh, and runs will be scheduled
 *        for the past few days. Allows custom values to be set for each
 *        transfer
 *        config. (Value: "CUSTOM_SLIDING_WINDOW")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_None The data
 *        source won't support data auto refresh, which is default value.
 *        (Value: "NONE")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_DataRefreshType_SlidingWindow
 *        The data source supports data auto refresh, and runs will be scheduled
 *        for the past few days. Does not allow custom values to be set for each
 *        transfer config. (Value: "SLIDING_WINDOW")
 */
@property(nonatomic, copy, nullable) NSString *dataRefreshType;

/** Data source id. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/**
 *  Default data refresh window on days.
 *  Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultDataRefreshWindowDays;

/**
 *  Default data transfer schedule.
 *  Examples of valid schedules include:
 *  `1st,3rd monday of month 15:30`,
 *  `every wed,fri of jan,jun 13:15`, and
 *  `first sunday of quarter 00:00`.
 */
@property(nonatomic, copy, nullable) NSString *defaultSchedule;

/**
 *  User friendly data source description string.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** User friendly data source name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Url for the help document for this data source. */
@property(nonatomic, copy, nullable) NSString *helpUrl;

/**
 *  Disables backfilling and manual run scheduling
 *  for the data source.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *manualRunsDisabled;

/** Data source resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Data source parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_DataSourceParameter *> *parameters;

/**
 *  Api auth scopes for which refresh token needs to be obtained. Only valid
 *  when `client_id` is specified. Ignored otherwise. These are scopes needed
 *  by a data source to prepare data and ingest them into BigQuery,
 *  e.g., https://www.googleapis.com/auth/bigquery
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scopes;

/**
 *  The number of seconds to wait for a status update from the data source
 *  before BigQuery marks the transfer as failed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statusUpdateDeadlineSeconds;

/**
 *  Specifies whether the data source supports a user defined schedule, or
 *  operates on the default schedule.
 *  When set to `true`, user can override default schedule.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportsCustomSchedule;

/**
 *  Indicates whether the data source supports multiple transfers
 *  to different BigQuery targets.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportsMultipleTransfers;

/**
 *  Transfer type. Currently supports only batch transfers,
 *  which are transfers that use the BigQuery batch APIs (load or
 *  query) to ingest the data.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_TransferType_Batch Batch data
 *        transfer. (Value: "BATCH")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_TransferType_Streaming
 *        Streaming data transfer. Streaming data source currently doesn't
 *        support multiple transfer configs per project. (Value: "STREAMING")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSource_TransferType_TransferTypeUnspecified
 *        Invalid or Unknown transfer type placeholder. (Value:
 *        "TRANSFER_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *transferType;

@end


/**
 *  Represents a data source parameter with validation rules, so that
 *  parameters can be rendered in the UI. These parameters are given to us by
 *  supported data sources, and include all needed information for rendering
 *  and validation.
 *  Thus, whoever uses this api can decide to generate either generic ui,
 *  or custom data source specific forms.
 */
@interface GTLRBigQueryDataTransfer_DataSourceParameter : GTLRObject

/** All possible values for the parameter. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedValues;

/**
 *  Parameter description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Parameter display name in the user interface. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** When parameter is a record, describes child fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_DataSourceParameter *> *fields;

/**
 *  Cannot be changed after initial creation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *immutable;

/**
 *  For integer and double values specifies maxminum allowed value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  For integer and double values specifies minimum allowed value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

/** Parameter identifier. */
@property(nonatomic, copy, nullable) NSString *paramId;

/**
 *  If set to true, schema should be taken from the parent with the same
 *  parameter_id. Only applicable when parameter type is RECORD.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recurse;

/**
 *  Can parameter have multiple values.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *repeated;

/**
 *  Is parameter required.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *required;

/**
 *  Parameter type.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Boolean Boolean
 *        parameter. (Value: "BOOLEAN")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Double Double
 *        precision floating point parameter. (Value: "DOUBLE")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Integer Integer
 *        parameter (64-bits).
 *        Will be serialized to json as string. (Value: "INTEGER")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_PlusPage Page
 *        ID for a Google+ Page. (Value: "PLUS_PAGE")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_Record Record
 *        parameter. (Value: "RECORD")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_String String
 *        parameter. (Value: "STRING")
 *    @arg @c kGTLRBigQueryDataTransfer_DataSourceParameter_Type_TypeUnspecified
 *        Type unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Description of the requirements for this field, in case the user input does
 *  not fulfill the regex pattern or min/max values.
 */
@property(nonatomic, copy, nullable) NSString *validationDescription;

/** URL to a help document to further explain the naming requirements. */
@property(nonatomic, copy, nullable) NSString *validationHelpUrl;

/** Regular expression which can be used for parameter validation. */
@property(nonatomic, copy, nullable) NSString *validationRegex;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRBigQueryDataTransfer_Empty : GTLRObject
@end


/**
 *  A request to determine whether data transfer is enabled for the project.
 */
@interface GTLRBigQueryDataTransfer_IsEnabledRequest : GTLRObject
@end


/**
 *  A response to indicate whether data transfer is enabled for the project.
 */
@interface GTLRBigQueryDataTransfer_IsEnabledResponse : GTLRObject

/**
 *  Indicates whether the project is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Returns list of supported data sources and their metadata.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "dataSources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryDataTransfer_ListDataSourcesResponse : GTLRCollectionObject

/**
 *  List of supported data sources and their transfer settings.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_DataSource *> *dataSources;

/**
 *  The next-pagination token. For multiple-page list results,
 *  this token can be used as the
 *  `ListDataSourcesRequest.page_token`
 *  to request the next page of list results.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The returned list of pipelines in the project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "transferConfigs" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRBigQueryDataTransfer_ListTransferConfigsResponse : GTLRCollectionObject

/**
 *  The next-pagination token. For multiple-page list results,
 *  this token can be used as the
 *  `ListTransferConfigsRequest.page_token`
 *  to request the next page of list results.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The stored pipeline transfer configurations.
 *  \@OutputOnly
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_TransferConfig *> *transferConfigs;

@end


/**
 *  The returned list transfer run messages.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "transferMessages" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRBigQueryDataTransfer_ListTransferLogsResponse : GTLRCollectionObject

/**
 *  The next-pagination token. For multiple-page list results,
 *  this token can be used as the
 *  `GetTransferRunLogRequest.page_token`
 *  to request the next page of list results.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The stored pipeline transfer messages.
 *  \@OutputOnly
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_TransferMessage *> *transferMessages;

@end


/**
 *  The returned list of pipelines in the project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "transferRuns" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRBigQueryDataTransfer_ListTransferRunsResponse : GTLRCollectionObject

/**
 *  The next-pagination token. For multiple-page list results,
 *  this token can be used as the
 *  `ListTransferRunsRequest.page_token`
 *  to request the next page of list results.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The stored pipeline transfer runs.
 *  \@OutputOnly
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_TransferRun *> *transferRuns;

@end


/**
 *  A request to schedule transfer runs for a time range.
 */
@interface GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest : GTLRObject

/** End time of the range of transfer runs. */
@property(nonatomic, strong, nullable) GTLRDateTime *rangeEndTime;

/** Start time of the range of transfer runs. */
@property(nonatomic, strong, nullable) GTLRDateTime *rangeStartTime;

@end


/**
 *  A response to schedule transfer runs for a time range.
 */
@interface GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse : GTLRObject

/** The transfer runs that were created. */
@property(nonatomic, strong, nullable) NSArray<GTLRBigQueryDataTransfer_TransferRun *> *createdRuns;

@end


/**
 *  A request to set whether data transfer is enabled or disabled for a project.
 */
@interface GTLRBigQueryDataTransfer_SetEnabledRequest : GTLRObject

/**
 *  Whether data transfer should be enabled or disabled for the project.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Represents a data transfer configuration. A transfer configuration
 *  contains all metadata needed to perform a data transfer. For example,
 *  `destination_dataset_id` specifies where data should be stored.
 *  When a new transfer configuration is created, the specified
 *  `destination_dataset_id` is created when needed and shared with the
 *  appropriate data source service account.
 */
@interface GTLRBigQueryDataTransfer_TransferConfig : GTLRObject

/**
 *  The number of days to look back to automatically refresh the data.
 *  For example, if `data_refresh_window_days = 10`, then every day
 *  BigQuery reingests data for [today-10, today-1], rather than ingesting data
 *  for just [today-1].
 *  Only valid if the data source supports the feature. Set the value to 0
 *  to use the default value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataRefreshWindowDays;

/**
 *  Region in which BigQuery dataset is located. Currently possible values are:
 *  "US" and "EU".
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *datasetRegion;

/** Data source id. Cannot be changed once data transfer is created. */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/** The BigQuery target dataset id. */
@property(nonatomic, copy, nullable) NSString *destinationDatasetId;

/**
 *  Is this config disabled. When set to true, no runs are scheduled
 *  for a given transfer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** User specified display name for the data transfer. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The resource name of the transfer run.
 *  Transfer run names have the form
 *  `projects/{project_id}/transferConfigs/{config_id}`.
 *  Where `config_id` is usually a uuid, even though it is not
 *  guaranteed or required. The name is ignored when creating a transfer run.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Next time when data transfer will run. Output only. Applicable
 *  only for batch data transfers.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *nextRunTime;

/** Data transfer specific parameters. */
@property(nonatomic, strong, nullable) GTLRBigQueryDataTransfer_TransferConfig_Params *params;

/**
 *  Data transfer schedule in GROC format.
 *  If the data source does not support a custom schedule, this should be
 *  empty. If it is empty, the default value for the data source will be
 *  used.
 *  The specified times are in UTC.
 *  Examples of valid GROC include:
 *  `1st,3rd monday of month 15:30`,
 *  `every wed,fri of jan,jun 13:15`, and
 *  `first sunday of quarter 00:00`.
 */
@property(nonatomic, copy, nullable) NSString *schedule;

/**
 *  Status of the most recently updated transfer run.
 *  \@OutputOnly
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Cancelled Data
 *        transfer is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Failed Data
 *        transfer failed. (Value: "FAILED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Inactive Data
 *        transfer is inactive. (Value: "INACTIVE")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Pending Data
 *        transfer is scheduled and is waiting to be picked up by
 *        data transfer backend. (Value: "PENDING")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Running Data
 *        transfer is in progress. (Value: "RUNNING")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_Succeeded Data
 *        transfer completed successsfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferConfig_Status_TransferStatusUnspecified
 *        Status placeholder. (Value: "TRANSFER_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Data transfer modification time. Ignored by server on input.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  GaiaID of the user on whose behalf transfer is done. Applicable only
 *  to data sources that do not support service accounts. When set to 0,
 *  the data source service account credentials are used.
 *  \@OutputOnly
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userId;

@end


/**
 *  Data transfer specific parameters.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigQueryDataTransfer_TransferConfig_Params : GTLRObject
@end


/**
 *  Represents a user facing message for a particular data transfer run.
 */
@interface GTLRBigQueryDataTransfer_TransferMessage : GTLRObject

/** Message text. */
@property(nonatomic, copy, nullable) NSString *messageText;

/** Time when message was logged. */
@property(nonatomic, strong, nullable) GTLRDateTime *messageTime;

/**
 *  Message severity.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_TransferMessage_Severity_Error Error
 *        message. (Value: "ERROR")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferMessage_Severity_Info
 *        Informational message. (Value: "INFO")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferMessage_Severity_MessageSeverityUnspecified
 *        No severity specified. (Value: "MESSAGE_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferMessage_Severity_Warning Warning
 *        message. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  Represents a data transfer run.
 */
@interface GTLRBigQueryDataTransfer_TransferRun : GTLRObject

/**
 *  Region in which BigQuery dataset is located. Currently possible values are:
 *  "US" and "EU".
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *datasetRegion;

/**
 *  Data source id.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *dataSourceId;

/** The BigQuery target dataset id. */
@property(nonatomic, copy, nullable) NSString *destinationDatasetId;

/**
 *  Time when transfer run ended. Parameter ignored by server for input
 *  requests.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The resource name of the transfer run.
 *  Transfer run names have the form
 *  `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`.
 *  The name is ignored when creating a transfer run.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Data transfer specific parameters. */
@property(nonatomic, strong, nullable) GTLRBigQueryDataTransfer_TransferRun_Params *params;

/**
 *  For batch transfer runs, specifies the date and time that
 *  data should be ingested.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *runTime;

/**
 *  Describes the schedule of this transfer run if it was created as part of
 *  a regular schedule. For batch transfer runs that are directly created,
 *  this is empty.
 *  NOTE: the system might choose to delay the schedule depending on the
 *  current load, so `schedule_time` doesn't always matches this.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *schedule;

/** Minimum time after which a transfer run can be started. */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

/**
 *  Time when transfer run was started. Parameter ignored by server for input
 *  requests.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Data transfer run status. Ignored for input requests.
 *  \@OutputOnly
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Cancelled Data
 *        transfer is cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Failed Data transfer
 *        failed. (Value: "FAILED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Inactive Data
 *        transfer is inactive. (Value: "INACTIVE")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Pending Data transfer
 *        is scheduled and is waiting to be picked up by
 *        data transfer backend. (Value: "PENDING")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Running Data transfer
 *        is in progress. (Value: "RUNNING")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_Succeeded Data
 *        transfer completed successsfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigQueryDataTransfer_TransferRun_Status_TransferStatusUnspecified
 *        Status placeholder. (Value: "TRANSFER_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Last time the data transfer run status was updated.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  The user id for this transfer run.
 *  \@OutputOnly
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userId;

@end


/**
 *  Data transfer specific parameters.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRBigQueryDataTransfer_TransferRun_Params : GTLRObject
@end

NS_ASSUME_NONNULL_END
