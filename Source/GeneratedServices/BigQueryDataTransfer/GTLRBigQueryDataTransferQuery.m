// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Data Transfer API (bigquerydatatransfer/v1)
// Description:
//   Transfers data from partner SaaS applications to Google BigQuery on a
//   scheduled, managed basis.
// Documentation:
//   https://cloud.google.com/bigquery/

#import "GTLRBigQueryDataTransferQuery.h"

#import "GTLRBigQueryDataTransferObjects.h"

// ----------------------------------------------------------------------------
// Constants

// messageTypes
NSString * const kGTLRBigQueryDataTransferMessageTypesError    = @"ERROR";
NSString * const kGTLRBigQueryDataTransferMessageTypesInfo     = @"INFO";
NSString * const kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified = @"MESSAGE_SEVERITY_UNSPECIFIED";
NSString * const kGTLRBigQueryDataTransferMessageTypesWarning  = @"WARNING";

// runAttempt
NSString * const kGTLRBigQueryDataTransferRunAttemptLatest     = @"LATEST";
NSString * const kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified = @"RUN_ATTEMPT_UNSPECIFIED";

// states
NSString * const kGTLRBigQueryDataTransferStatesCancelled      = @"CANCELLED";
NSString * const kGTLRBigQueryDataTransferStatesFailed         = @"FAILED";
NSString * const kGTLRBigQueryDataTransferStatesPending        = @"PENDING";
NSString * const kGTLRBigQueryDataTransferStatesRunning        = @"RUNNING";
NSString * const kGTLRBigQueryDataTransferStatesSucceeded      = @"SUCCEEDED";
NSString * const kGTLRBigQueryDataTransferStatesTransferStateUnspecified = @"TRANSFER_STATE_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRBigQueryDataTransferQuery

@dynamic fields;

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds

@dynamic name;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:checkValidCreds";
  GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_CheckValidCredsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.dataSources.checkValidCreds";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_DataSource class];
  query.loggingName = @"bigquerydatatransfer.projects.dataSources.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dataSources";
  GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListDataSourcesResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.dataSources.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds

@dynamic name;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:checkValidCreds";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_CheckValidCredsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.dataSources.checkValidCreds";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_DataSource class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.dataSources.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dataSources";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListDataSourcesResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.dataSources.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_Location class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListLocationsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate

@dynamic authorizationCode, parent;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferConfigs";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.create";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_Empty class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.delete";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList

@dynamic dataSourceIds, pageSize, pageToken, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataSourceIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferConfigs";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferConfigsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch

@dynamic authorizationCode, name, updateMask;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.patch";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_Empty class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.runs.delete";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferRun class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.runs.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList

@dynamic pageSize, pageToken, parent, runAttempt, states;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"states" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runs";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferRunsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.runs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList

@dynamic messageTypes, pageSize, pageToken, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"messageTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferLogs";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferLogsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.runs.transferLogs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:scheduleRuns";
  GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.locations.transferConfigs.scheduleRuns";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate

@dynamic authorizationCode, parent;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferConfigs";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.create";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_Empty class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.delete";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList

@dynamic dataSourceIds, pageSize, pageToken, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataSourceIds" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferConfigs";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferConfigsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch

@dynamic authorizationCode, name, updateMask;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferConfig class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.patch";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_Empty class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.runs.delete";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_TransferRun class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.runs.get";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList

@dynamic pageSize, pageToken, parent, runAttempt, states;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"states" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/runs";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferRunsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.runs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList

@dynamic messageTypes, pageSize, pageToken, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"messageTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/transferLogs";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ListTransferLogsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.runs.transferLogs.list";
  return query;
}

@end

@implementation GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:scheduleRuns";
  GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse class];
  query.loggingName = @"bigquerydatatransfer.projects.transferConfigs.scheduleRuns";
  return query;
}

@end
