// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   reCAPTCHA Enterprise API (recaptchaenterprise/v1)
// Documentation:
//   https://cloud.google.com/recaptcha-enterprise/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties;
@class GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.annotation

/**
 *  Default unspecified type.
 *
 *  Value: "ANNOTATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_AnnotationUnspecified;
/**
 *  Provides information that the event turned out to be fraudulent.
 *
 *  Value: "FRAUDULENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Fraudulent;
/**
 *  Provides information that the event turned out to be legitimate.
 *
 *  Value: "LEGITIMATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Legitimate;
/**
 *  Provides information that the event was related to a login event in which
 *  the user typed the correct password. Deprecated, prefer indicating
 *  CORRECT_PASSWORD through the reasons field instead.
 *
 *  Value: "PASSWORD_CORRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordCorrect;
/**
 *  Provides information that the event was related to a login event in which
 *  the user typed the incorrect password. Deprecated, prefer indicating
 *  INCORRECT_PASSWORD through the reasons field instead.
 *
 *  Value: "PASSWORD_INCORRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordIncorrect;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.reasons

/**
 *  Indicates a chargeback for fraud was issued for the transaction associated
 *  with the assessment.
 *
 *  Value: "CHARGEBACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_Chargeback;
/**
 *  Indicates the user provided the correct password.
 *
 *  Value: "CORRECT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_CorrectPassword;
/**
 *  Indicates that the user failed a 2FA challenge.
 *
 *  Value: "FAILED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_FailedTwoFactor;
/**
 *  Indicates the user provided an incorrect password.
 *
 *  Value: "INCORRECT_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_IncorrectPassword;
/**
 *  Indicates that the user was served a 2FA challenge. Sufficiently old
 *  assessments with this reason that have not been overwritten with
 *  PASSED_TWO_FACTOR will be treated as an abandoned 2FA flow, equivalent to
 *  FAILED_TWO_FACTOR.
 *
 *  Value: "INITIATED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_InitiatedTwoFactor;
/**
 *  Indicates that the user passed a 2FA challenge.
 *
 *  Value: "PASSED_TWO_FACTOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_PassedTwoFactor;
/**
 *  Indicates the transaction associated with the assessment is suspected of
 *  being fraudulent based on the payment method, billing details, shipping
 *  address or other transaction information.
 *
 *  Value: "PAYMENT_HEURISTICS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_PaymentHeuristics;
/**
 *  Default unspecified reason.
 *
 *  Value: "REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Reasons_ReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis.reasons

/**
 *  Interactions matched the behavior of an automated agent.
 *
 *  Value: "AUTOMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_Automation;
/**
 *  Default unspecified type.
 *
 *  Value: "CLASSIFICATION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_ClassificationReasonUnspecified;
/**
 *  Too little traffic has been received from this site thus far to generate
 *  quality risk analysis.
 *
 *  Value: "LOW_CONFIDENCE_SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_LowConfidenceScore;
/**
 *  Traffic volume from the event source is higher than normal.
 *
 *  Value: "TOO_MUCH_TRAFFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_TooMuchTraffic;
/**
 *  The event originated from an illegitimate environment.
 *
 *  Value: "UNEXPECTED_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_UnexpectedEnvironment;
/**
 *  Interactions with the site were significantly different than expected
 *  patterns.
 *
 *  Value: "UNEXPECTED_USAGE_PATTERNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis_Reasons_UnexpectedUsagePatterns;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions.testingChallenge

/**
 *  Challenge requests for this key will always return an unsolvable challenge.
 *
 *  Value: "CHALLENGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Challenge;
/**
 *  Challenge requests for this key will always return a nocaptcha, which does
 *  not require a solution.
 *
 *  Value: "NOCAPTCHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Nocaptcha;
/**
 *  Perform the normal risk analysis and return either nocaptcha or a challenge
 *  depending on risk and trust factors.
 *
 *  Value: "TESTING_CHALLENGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_TestingChallengeUnspecified;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties.invalidReason

/**
 *  A retriable error (such as network failure) occurred on the browser. Could
 *  easily be simulated by an attacker.
 *
 *  Value: "BROWSER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_BrowserError;
/**
 *  The user verification had already been seen.
 *
 *  Value: "DUPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Dupe;
/**
 *  The user verification token had expired.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Expired;
/**
 *  Default unspecified type.
 *
 *  Value: "INVALID_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_InvalidReasonUnspecified;
/**
 *  The provided user verification token was malformed.
 *
 *  Value: "MALFORMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Malformed;
/**
 *  The user verification token was not present.
 *
 *  Value: "MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Missing;
/**
 *  If the failure reason was not accounted for.
 *
 *  Value: "UNKNOWN_INVALID_REASON"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_UnknownInvalidReason;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings.challengeSecurityPreference

/**
 *  Key tends to show balanced (in amount and difficulty) challenges.
 *
 *  Value: "BALANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Balance;
/**
 *  Default type that indicates this enum hasn't been specified.
 *
 *  Value: "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_ChallengeSecurityPreferenceUnspecified;
/**
 *  Key tends to show more and harder challenges.
 *
 *  Value: "SECURITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Security;
/**
 *  Key tends to show fewer and easier challenges.
 *
 *  Value: "USABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Usability;

// ----------------------------------------------------------------------------
// GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings.integrationType

/**
 *  Displays the "I'm not a robot" checkbox and may show captcha challenges
 *  after it is checked.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Checkbox;
/**
 *  Default type that indicates this enum hasn't been specified. This is not a
 *  valid IntegrationType, one of the other types must be specified instead.
 *
 *  Value: "INTEGRATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_IntegrationTypeUnspecified;
/**
 *  Doesn't display the "I'm not a robot" checkbox, but may show captcha
 *  challenges after risk analysis.
 *
 *  Value: "INVISIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Invisible;
/**
 *  Only used to produce scores. It doesn't display the "I'm not a robot"
 *  checkbox and never shows captcha challenges.
 *
 *  Value: "SCORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Score;

/**
 *  Settings specific to keys that can be used by Android apps.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings : GTLRObject

/**
 *  Android package names of apps allowed to use the key. Example:
 *  'com.companyname.appname'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedPackageNames;

@end


/**
 *  The request message to annotate an Assessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest : GTLRObject

/**
 *  Optional. The annotation that will be assigned to the Event. This field can
 *  be left empty to provide reasons that apply to an event without concluding
 *  whether the event is legitimate or fraudulent.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_AnnotationUnspecified
 *        Default unspecified type. (Value: "ANNOTATION_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Fraudulent
 *        Provides information that the event turned out to be fraudulent.
 *        (Value: "FRAUDULENT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_Legitimate
 *        Provides information that the event turned out to be legitimate.
 *        (Value: "LEGITIMATE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordCorrect
 *        Provides information that the event was related to a login event in
 *        which the user typed the correct password. Deprecated, prefer
 *        indicating CORRECT_PASSWORD through the reasons field instead. (Value:
 *        "PASSWORD_CORRECT")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest_Annotation_PasswordIncorrect
 *        Provides information that the event was related to a login event in
 *        which the user typed the incorrect password. Deprecated, prefer
 *        indicating INCORRECT_PASSWORD through the reasons field instead.
 *        (Value: "PASSWORD_INCORRECT")
 */
@property(nonatomic, copy, nullable) NSString *annotation;

/**
 *  Optional. Optional reasons for the annotation that will be assigned to the
 *  Event.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reasons;

@end


/**
 *  Empty response for AnnotateAssessment.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse : GTLRObject
@end


/**
 *  A recaptcha assessment resource.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Assessment : GTLRObject

/** The event being assessed. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event *event;

/**
 *  Output only. The resource name for the Assessment in the format
 *  "projects/{project}/assessments/{assessment}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The risk analysis result for the event being assessed. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis *riskAnalysis;

/** Output only. Properties of the provided event token. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties *tokenProperties;

@end


/**
 *  Metrics related to challenges.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics : GTLRObject

/**
 *  Count of submitted challenge solutions that were incorrect or otherwise
 *  deemed suspicious such that a subsequent challenge was triggered.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedCount;

/**
 *  Count of nocaptchas (successful verification without a challenge) issued.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nocaptchaCount;

/**
 *  Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent
 *  to a count of pageloads for pages that include reCAPTCHA.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageloadCount;

/**
 *  Count of nocaptchas (successful verification without a challenge) plus
 *  submitted challenge solutions that were correct and resulted in
 *  verification.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passedCount;

@end


/**
 *  GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Event : GTLRObject

/**
 *  Optional. The expected action for this type of event. This should be the
 *  same action provided at token generation time on client-side platforms
 *  already integrated with recaptcha enterprise.
 */
@property(nonatomic, copy, nullable) NSString *expectedAction;

/**
 *  Optional. The site key that was used to invoke reCAPTCHA on your site and
 *  generate the token.
 */
@property(nonatomic, copy, nullable) NSString *siteKey;

/**
 *  Optional. The user response token provided by the reCAPTCHA client-side
 *  integration on your site.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Optional. The user agent present in the request from the user's device
 *  related to this event.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

/**
 *  Optional. The IP address in the request from the user's device related to
 *  this event.
 */
@property(nonatomic, copy, nullable) NSString *userIpAddress;

@end


/**
 *  Settings specific to keys that can be used by iOS apps.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings : GTLRObject

/**
 *  iOS bundle ids of apps allowed to use the key. Example:
 *  'com.companyname.productname.appname'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedBundleIds;

@end


/**
 *  A key used to identify and configure applications (web and/or mobile) that
 *  use reCAPTCHA Enterprise.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key : GTLRObject

/** Settings for keys that can be used by Android apps. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1AndroidKeySettings *androidSettings;

/** The timestamp corresponding to the creation of this Key. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Human-readable display name of this key. Modifiable by user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Settings for keys that can be used by iOS apps. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1IOSKeySettings *iosSettings;

/** See Creating and managing labels. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels *labels;

/**
 *  The resource name for the Key in the format "projects/{project}/keys/{key}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Options for user acceptance testing. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions *testingOptions;

/** Settings for keys that can be used by websites. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings *webSettings;

@end


/**
 *  See Creating and managing labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key_Labels : GTLRObject
@end


/**
 *  Response to request to list keys in a project.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "keys" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ListKeysResponse : GTLRCollectionObject

/**
 *  Key details.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Key *> *keys;

/**
 *  Token to retrieve the next page of results. It is set to empty if no keys
 *  remain in results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Metrics for a single Key.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1Metrics : GTLRObject

/**
 *  Metrics will be continuous and in order by dates, and in the granularity of
 *  day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have
 *  challenge-based data.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ChallengeMetrics *> *challengeMetrics;

/**
 *  Metrics will be continuous and in order by dates, and in the granularity of
 *  day. All Key types should have score-based data.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics *> *scoreMetrics;

/** Inclusive start time aligned to a day (UTC). */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The migrate key request message.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest : GTLRObject
@end


/**
 *  Risk analysis result for an event.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1RiskAnalysis : GTLRObject

/** Reasons contributing to the risk analysis verdict. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reasons;

/**
 *  Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate
 *  traffic while 0.0 means very likely non-legitimate traffic).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  Score distribution.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution : GTLRObject

/**
 *  Map key is score value multiplied by 100. The scores are discrete values
 *  between [0, 1]. The maximum number of buckets is on order of a few dozen,
 *  but typically much lower (ie. 10).
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets *scoreBuckets;

@end


/**
 *  Map key is score value multiplied by 100. The scores are discrete values
 *  between [0, 1]. The maximum number of buckets is on order of a few dozen,
 *  but typically much lower (ie. 10).
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution_ScoreBuckets : GTLRObject
@end


/**
 *  Metrics related to scoring.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics : GTLRObject

/**
 *  Action-based metrics. The map key is the action name which specified by the
 *  site owners at time of the "execute" client-side call. Populated only for
 *  SCORE keys.
 */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics *actionMetrics;

/** Aggregated score metrics for all traffic. */
@property(nonatomic, strong, nullable) GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution *overallMetrics;

@end


/**
 *  Action-based metrics. The map key is the action name which specified by the
 *  site owners at time of the "execute" client-side call. Populated only for
 *  SCORE keys.
 *
 *  @note This class is documented as having more properties of
 *        GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreDistribution.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1ScoreMetrics_ActionMetrics : GTLRObject
@end


/**
 *  Options for user acceptance testing.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions : GTLRObject

/**
 *  For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests
 *  for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge
 *  if CHALLENGE.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Challenge
 *        Challenge requests for this key will always return an unsolvable
 *        challenge. (Value: "CHALLENGE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_Nocaptcha
 *        Challenge requests for this key will always return a nocaptcha, which
 *        does not require a solution. (Value: "NOCAPTCHA")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TestingOptions_TestingChallenge_TestingChallengeUnspecified
 *        Perform the normal risk analysis and return either nocaptcha or a
 *        challenge depending on risk and trust factors. (Value:
 *        "TESTING_CHALLENGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *testingChallenge;

/**
 *  All assessments for this Key will return this score. Must be between 0
 *  (likely not legitimate) and 1 (likely legitimate) inclusive.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testingScore;

@end


/**
 *  GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties : GTLRObject

/** Action name provided at token generation. */
@property(nonatomic, copy, nullable) NSString *action;

/** The timestamp corresponding to the generation of the token. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The hostname of the page on which the token was generated. */
@property(nonatomic, copy, nullable) NSString *hostname;

/**
 *  Reason associated with the response when valid = false.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_BrowserError
 *        A retriable error (such as network failure) occurred on the browser.
 *        Could easily be simulated by an attacker. (Value: "BROWSER_ERROR")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Dupe
 *        The user verification had already been seen. (Value: "DUPE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Expired
 *        The user verification token had expired. (Value: "EXPIRED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_InvalidReasonUnspecified
 *        Default unspecified type. (Value: "INVALID_REASON_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Malformed
 *        The provided user verification token was malformed. (Value:
 *        "MALFORMED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_Missing
 *        The user verification token was not present. (Value: "MISSING")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1TokenProperties_InvalidReason_UnknownInvalidReason
 *        If the failure reason was not accounted for. (Value:
 *        "UNKNOWN_INVALID_REASON")
 */
@property(nonatomic, copy, nullable) NSString *invalidReason;

/**
 *  Whether the provided user response token is valid. When valid = false, the
 *  reason could be specified in invalid_reason or it could also be due to a
 *  user failing to solve a challenge or a sitekey mismatch (i.e the sitekey
 *  used to generate the token was different than the one specified in the
 *  assessment).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valid;

@end


/**
 *  Settings specific to keys that can be used by websites.
 */
@interface GTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings : GTLRObject

/**
 *  If set to true, it means allowed_domains will not be enforced.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAllDomains;

/**
 *  Required. Whether this key can be used on AMP (Accelerated Mobile Pages)
 *  websites. This can only be set for the SCORE integration type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowAmpTraffic;

/**
 *  Domains or subdomains of websites allowed to use the key. All subdomains of
 *  an allowed domain are automatically allowed. A valid domain requires a host
 *  and must not include any path, port, query or fragment. Examples:
 *  'example.com' or 'subdomain.example.com'
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedDomains;

/**
 *  Settings for the frequency and difficulty at which this key triggers captcha
 *  challenges. This should only be specified for IntegrationTypes CHECKBOX and
 *  INVISIBLE.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Balance
 *        Key tends to show balanced (in amount and difficulty) challenges.
 *        (Value: "BALANCE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_ChallengeSecurityPreferenceUnspecified
 *        Default type that indicates this enum hasn't been specified. (Value:
 *        "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Security
 *        Key tends to show more and harder challenges. (Value: "SECURITY")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_ChallengeSecurityPreference_Usability
 *        Key tends to show fewer and easier challenges. (Value: "USABILITY")
 */
@property(nonatomic, copy, nullable) NSString *challengeSecurityPreference;

/**
 *  Required. Describes how this key is integrated with the website.
 *
 *  Likely values:
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Checkbox
 *        Displays the "I'm not a robot" checkbox and may show captcha
 *        challenges after it is checked. (Value: "CHECKBOX")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_IntegrationTypeUnspecified
 *        Default type that indicates this enum hasn't been specified. This is
 *        not a valid IntegrationType, one of the other types must be specified
 *        instead. (Value: "INTEGRATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Invisible
 *        Doesn't display the "I'm not a robot" checkbox, but may show captcha
 *        challenges after risk analysis. (Value: "INVISIBLE")
 *    @arg @c kGTLRRecaptchaEnterprise_GoogleCloudRecaptchaenterpriseV1WebKeySettings_IntegrationType_Score
 *        Only used to produce scores. It doesn't display the "I'm not a robot"
 *        checkbox and never shows captcha challenges. (Value: "SCORE")
 */
@property(nonatomic, copy, nullable) NSString *integrationType;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRRecaptchaEnterprise_GoogleProtobufEmpty : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
