// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Data Fusion API (datafusion/v1beta1)
// Description:
//   Cloud Data Fusion is a fully-managed, cloud native, enterprise data
//   integration service for
//   quickly building and managing data pipelines. It provides a graphical
//   interface to increase
//   time efficiency and reduce complexity, and allows business users,
//   developers, and data
//   scientists to easily and reliably build scalable data integration solutions
//   to cleanse,
//   prepare, blend, transfer and transform data without having to wrestle with
//   infrastructure.
// Documentation:
//   https://cloud.google.com/data-fusion/docs

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDataFusion_AuditConfig;
@class GTLRDataFusion_AuditLogConfig;
@class GTLRDataFusion_AuthorizationLoggingOptions;
@class GTLRDataFusion_Binding;
@class GTLRDataFusion_CloudAuditOptions;
@class GTLRDataFusion_Condition;
@class GTLRDataFusion_CounterOptions;
@class GTLRDataFusion_CustomField;
@class GTLRDataFusion_DataAccessOptions;
@class GTLRDataFusion_Expr;
@class GTLRDataFusion_Instance;
@class GTLRDataFusion_Instance_Labels;
@class GTLRDataFusion_Instance_Options;
@class GTLRDataFusion_Location;
@class GTLRDataFusion_Location_Labels;
@class GTLRDataFusion_Location_Metadata;
@class GTLRDataFusion_LogConfig;
@class GTLRDataFusion_NetworkConfig;
@class GTLRDataFusion_Operation;
@class GTLRDataFusion_Operation_Metadata;
@class GTLRDataFusion_Operation_Response;
@class GTLRDataFusion_Policy;
@class GTLRDataFusion_Rule;
@class GTLRDataFusion_Status;
@class GTLRDataFusion_Status_Details_Item;
@class GTLRDataFusion_Version;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDataFusion_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataFusion_AuthorizationLoggingOptions.permissionType

/**
 *  A read of admin (meta) data.
 *
 *  Value: "ADMIN_READ"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_AdminRead;
/**
 *  A write of admin (meta) data.
 *
 *  Value: "ADMIN_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_AdminWrite;
/**
 *  A read of standard data.
 *
 *  Value: "DATA_READ"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_DataRead;
/**
 *  A write of standard data.
 *
 *  Value: "DATA_WRITE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_DataWrite;
/**
 *  Default. Should not be used.
 *
 *  Value: "PERMISSION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_PermissionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataFusion_CloudAuditOptions.logName

/**
 *  Corresponds to "cloudaudit.googleapis.com/activity"
 *
 *  Value: "ADMIN_ACTIVITY"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_CloudAuditOptions_LogName_AdminActivity;
/**
 *  Corresponds to "cloudaudit.googleapis.com/data_access"
 *
 *  Value: "DATA_ACCESS"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_CloudAuditOptions_LogName_DataAccess;
/**
 *  Default. Should not be used.
 *
 *  Value: "UNSPECIFIED_LOG_NAME"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_CloudAuditOptions_LogName_UnspecifiedLogName;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Condition.iam

/**
 *  An approver (distinct from the requester) that has authorized this
 *  request.
 *  When used with IN, the condition indicates that one of the approvers
 *  associated with the request matches the specified principal, or is a
 *  member of the specified group. Approvers can only grant additional
 *  access, and are thus only used in a strictly positive context
 *  (e.g. ALLOW/IN or DENY/NOT_IN).
 *
 *  Value: "APPROVER"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_Approver;
/**
 *  The principal (even if an authority selector is present), which
 *  must only be used for attribution, not authorization.
 *
 *  Value: "ATTRIBUTION"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_Attribution;
/**
 *  Either principal or (if present) authority selector.
 *
 *  Value: "AUTHORITY"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_Authority;
/**
 *  What type of credentials have been supplied with this request.
 *  String values should match enum names from
 *  security_loas_l2.CredentialsType - currently, only CREDS_TYPE_EMERGENCY
 *  is supported.
 *  It is not permitted to grant access based on the *absence* of a
 *  credentials type, so the conditions can only be used in a "positive"
 *  context (e.g., ALLOW/IN or DENY/NOT_IN).
 *
 *  Value: "CREDENTIALS_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_CredentialsType;
/**
 *  What types of justifications have been supplied with this request.
 *  String values should match enum names from
 *  security.credentials.JustificationType, e.g. "MANUAL_STRING". It is not
 *  permitted to grant access based on the *absence* of a justification, so
 *  justification conditions can only be used in a "positive" context
 *  (e.g., ALLOW/IN or DENY/NOT_IN).
 *  Multiple justifications, e.g., a Buganizer ID and a manually-entered
 *  reason, are normal and supported.
 *
 *  Value: "JUSTIFICATION_TYPE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_JustificationType;
/**
 *  Default non-attribute.
 *
 *  Value: "NO_ATTR"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_NoAttr;
/**
 *  Any of the security realms in the IAMContext (go/security-realms).
 *  When used with IN, the condition indicates "any of the request's realms
 *  match one of the given values; with NOT_IN, "none of the realms match
 *  any of the given values". Note that a value can be:
 *  - 'self' (i.e., allow connections from clients that are in the same
 *  security realm)
 *  - a realm (e.g., 'campus-abc')
 *  - a realm group (e.g., 'realms-for-borg-cell-xx', see: go/realm-groups)
 *  A match is determined by a realm group
 *  membership check performed by a RealmAclRep object (go/realm-acl-howto).
 *  It is not permitted to grant access based on the *absence* of a realm, so
 *  realm conditions can only be used in a "positive" context (e.g., ALLOW/IN
 *  or DENY/NOT_IN).
 *
 *  Value: "SECURITY_REALM"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Iam_SecurityRealm;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Condition.op

/**
 *  Subject is discharged
 *
 *  Value: "DISCHARGED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_Discharged;
/**
 *  DEPRECATED. Use IN instead.
 *
 *  Value: "EQUALS"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_Equals;
/**
 *  The condition is true if the subject (or any element of it if it is
 *  a set) matches any of the supplied values.
 *
 *  Value: "IN"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_In;
/**
 *  Default no-op.
 *
 *  Value: "NO_OP"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_NoOp;
/**
 *  DEPRECATED. Use NOT_IN instead.
 *
 *  Value: "NOT_EQUALS"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_NotEquals;
/**
 *  The condition is true if the subject (or every element of it if it is
 *  a set) matches none of the supplied values.
 *
 *  Value: "NOT_IN"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Op_NotIn;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Condition.sys

/**
 *  IP address of the caller
 *
 *  Value: "IP"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Sys_Ip;
/**
 *  Resource name
 *
 *  Value: "NAME"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Sys_Name;
/**
 *  Default non-attribute type
 *
 *  Value: "NO_ATTR"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Sys_NoAttr;
/**
 *  Region of the resource
 *
 *  Value: "REGION"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Sys_Region;
/**
 *  Service name
 *
 *  Value: "SERVICE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Condition_Sys_Service;

// ----------------------------------------------------------------------------
// GTLRDataFusion_DataAccessOptions.logMode

/**
 *  The application's operation in the context of which this authorization
 *  check is being made may only be performed if it is successfully logged
 *  to Gin. For instance, the authorization library may satisfy this
 *  obligation by emitting a partial log entry at authorization check time
 *  and only returning ALLOW to the application if it succeeds.
 *  If a matching Rule has this directive, but the client has not indicated
 *  that it will honor such requirements, then the IAM check will result in
 *  authorization failure by setting CheckPolicyResponse.success=false.
 *
 *  Value: "LOG_FAIL_CLOSED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_DataAccessOptions_LogMode_LogFailClosed;
/**
 *  Client is not required to write a partial Gin log immediately after
 *  the authorization check. If client chooses to write one and it fails,
 *  client may either fail open (allow the operation to continue) or
 *  fail closed (handle as a DENY outcome).
 *
 *  Value: "LOG_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_DataAccessOptions_LogMode_LogModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Instance.state

/**
 *  Instance is being auto-updated
 *
 *  Value: "AUTO_UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_AutoUpdating;
/**
 *  Instance is being auto-upgraded
 *
 *  Value: "AUTO_UPGRADING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_AutoUpgrading;
/**
 *  Instance is being created
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Creating;
/**
 *  Instance is being deleted
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Deleting;
/**
 *  Instance creation failed
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Failed;
/**
 *  Instance is being restarted
 *
 *  Value: "RESTARTING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Restarting;
/**
 *  Instance is running and ready for requests
 *
 *  Value: "RUNNING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Running;
/**
 *  Instance does not have a state yet
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_StateUnspecified;
/**
 *  Instance is being updated on customer request
 *
 *  Value: "UPDATING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Updating;
/**
 *  Instance is being upgraded
 *
 *  Value: "UPGRADING"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_State_Upgrading;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Instance.type

/**
 *  Basic Data Fusion instance. In Basic type, the user will be able to
 *  create data pipelines using point and click UI. However, there are
 *  certain limitations, such as fewer number of concurrent pipelines, no
 *  support for streaming pipelines, etc.
 *
 *  Value: "BASIC"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_Type_Basic;
/**
 *  Enterprise Data Fusion instance. In Enterprise type, the user will have
 *  more features available, such as support for streaming pipelines, higher
 *  number of concurrent pipelines, etc.
 *
 *  Value: "ENTERPRISE"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_Type_Enterprise;
/**
 *  No type specified. The instance creation will fail.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Instance_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDataFusion_Rule.action

/**
 *  Matching 'Entries' grant access.
 *
 *  Value: "ALLOW"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_Allow;
/**
 *  Matching 'Entries' grant access and the caller promises to log
 *  the request per the returned log_configs.
 *
 *  Value: "ALLOW_WITH_LOG"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_AllowWithLog;
/**
 *  Matching 'Entries' deny access.
 *
 *  Value: "DENY"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_Deny;
/**
 *  Matching 'Entries' deny access and the caller promises to log
 *  the request per the returned log_configs.
 *
 *  Value: "DENY_WITH_LOG"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_DenyWithLog;
/**
 *  Matching 'Entries' tell IAM.Check callers to generate logs.
 *
 *  Value: "LOG"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_Log;
/**
 *  Default no action.
 *
 *  Value: "NO_ACTION"
 */
GTLR_EXTERN NSString * const kGTLRDataFusion_Rule_Action_NoAction;

/**
 *  Specifies the audit configuration for a service.
 *  The configuration determines which permission types are logged, and what
 *  identities, if any, are exempted from logging.
 *  An AuditConfig must have one or more AuditLogConfigs.
 *  If there are AuditConfigs for both `allServices` and a specific service,
 *  the union of the two AuditConfigs is used for that service: the log_types
 *  specified in each AuditConfig are enabled, and the exempted_members in each
 *  AuditLogConfig are exempted.
 *  Example Policy with multiple AuditConfigs:
 *  {
 *  "audit_configs": [
 *  {
 *  "service": "allServices"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  },
 *  {
 *  "log_type": "ADMIN_READ",
 *  }
 *  ]
 *  },
 *  {
 *  "service": "sampleservice.googleapis.com"
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  "exempted_members": [
 *  "user:aliya\@example.com"
 *  ]
 *  }
 *  ]
 *  }
 *  ]
 *  }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts jose\@example.com from DATA_READ logging, and
 *  aliya\@example.com from DATA_WRITE logging.
 */
@interface GTLRDataFusion_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_AuditLogConfig *> *auditLogConfigs;

@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  Specifies a service that will be enabled for audit logging.
 *  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
 *  `allServices` is a special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions.
 *  Example:
 *  {
 *  "audit_log_configs": [
 *  {
 *  "log_type": "DATA_READ",
 *  "exempted_members": [
 *  "user:jose\@example.com"
 *  ]
 *  },
 *  {
 *  "log_type": "DATA_WRITE",
 *  }
 *  ]
 *  }
 *  This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
 *  jose\@example.com from DATA_READ logging.
 */
@interface GTLRDataFusion_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission.
 *  Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  ignoreChildExemptions
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreChildExemptions;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRDataFusion_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRDataFusion_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRDataFusion_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Authorization-related information used by Cloud Audit Logging.
 */
@interface GTLRDataFusion_AuthorizationLoggingOptions : GTLRObject

/**
 *  The type of the permission that was checked.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_AdminRead
 *        A read of admin (meta) data. (Value: "ADMIN_READ")
 *    @arg @c kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_AdminWrite
 *        A write of admin (meta) data. (Value: "ADMIN_WRITE")
 *    @arg @c kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_DataRead
 *        A read of standard data. (Value: "DATA_READ")
 *    @arg @c kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_DataWrite
 *        A write of standard data. (Value: "DATA_WRITE")
 *    @arg @c kGTLRDataFusion_AuthorizationLoggingOptions_PermissionType_PermissionTypeUnspecified
 *        Default. Should not be used. (Value: "PERMISSION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *permissionType;

@end


/**
 *  Associates `members` with a `role`.
 */
@interface GTLRDataFusion_Binding : GTLRObject

/**
 *  The condition that is associated with this binding.
 *  NOTE: An unsatisfied condition will not allow user access via current
 *  binding. Different bindings, including their conditions, are examined
 *  independently.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Expr *condition;

/**
 *  Specifies the identities requesting access for a Cloud Platform resource.
 *  `members` can have the following values:
 *  * `allUsers`: A special identifier that represents anyone who is
 *  on the internet; with or without a Google account.
 *  * `allAuthenticatedUsers`: A special identifier that represents anyone
 *  who is authenticated with a Google account or a service account.
 *  * `user:{emailid}`: An email address that represents a specific Google
 *  account. For example, `alice\@example.com` .
 *  * `serviceAccount:{emailid}`: An email address that represents a service
 *  account. For example, `my-other-app\@appspot.gserviceaccount.com`.
 *  * `group:{emailid}`: An email address that represents a Google group.
 *  For example, `admins\@example.com`.
 *  * `domain:{domain}`: The G Suite domain (primary) that represents all the
 *  users of that domain. For example, `google.com` or `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to `members`.
 *  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDataFusion_CancelOperationRequest : GTLRObject
@end


/**
 *  Write a Cloud Audit log
 */
@interface GTLRDataFusion_CloudAuditOptions : GTLRObject

/** Information used by the Cloud Audit Logging pipeline. */
@property(nonatomic, strong, nullable) GTLRDataFusion_AuthorizationLoggingOptions *authorizationLoggingOptions;

/**
 *  The log_name to populate in the Cloud Audit Record.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_CloudAuditOptions_LogName_AdminActivity
 *        Corresponds to "cloudaudit.googleapis.com/activity" (Value:
 *        "ADMIN_ACTIVITY")
 *    @arg @c kGTLRDataFusion_CloudAuditOptions_LogName_DataAccess Corresponds
 *        to "cloudaudit.googleapis.com/data_access" (Value: "DATA_ACCESS")
 *    @arg @c kGTLRDataFusion_CloudAuditOptions_LogName_UnspecifiedLogName
 *        Default. Should not be used. (Value: "UNSPECIFIED_LOG_NAME")
 */
@property(nonatomic, copy, nullable) NSString *logName;

@end


/**
 *  A condition to be met.
 */
@interface GTLRDataFusion_Condition : GTLRObject

/**
 *  Trusted attributes supplied by the IAM system.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Condition_Iam_Approver An approver (distinct from
 *        the requester) that has authorized this
 *        request.
 *        When used with IN, the condition indicates that one of the approvers
 *        associated with the request matches the specified principal, or is a
 *        member of the specified group. Approvers can only grant additional
 *        access, and are thus only used in a strictly positive context
 *        (e.g. ALLOW/IN or DENY/NOT_IN). (Value: "APPROVER")
 *    @arg @c kGTLRDataFusion_Condition_Iam_Attribution The principal (even if
 *        an authority selector is present), which
 *        must only be used for attribution, not authorization. (Value:
 *        "ATTRIBUTION")
 *    @arg @c kGTLRDataFusion_Condition_Iam_Authority Either principal or (if
 *        present) authority selector. (Value: "AUTHORITY")
 *    @arg @c kGTLRDataFusion_Condition_Iam_CredentialsType What type of
 *        credentials have been supplied with this request.
 *        String values should match enum names from
 *        security_loas_l2.CredentialsType - currently, only
 *        CREDS_TYPE_EMERGENCY
 *        is supported.
 *        It is not permitted to grant access based on the *absence* of a
 *        credentials type, so the conditions can only be used in a "positive"
 *        context (e.g., ALLOW/IN or DENY/NOT_IN). (Value: "CREDENTIALS_TYPE")
 *    @arg @c kGTLRDataFusion_Condition_Iam_JustificationType What types of
 *        justifications have been supplied with this request.
 *        String values should match enum names from
 *        security.credentials.JustificationType, e.g. "MANUAL_STRING". It is
 *        not
 *        permitted to grant access based on the *absence* of a justification,
 *        so
 *        justification conditions can only be used in a "positive" context
 *        (e.g., ALLOW/IN or DENY/NOT_IN).
 *        Multiple justifications, e.g., a Buganizer ID and a manually-entered
 *        reason, are normal and supported. (Value: "JUSTIFICATION_TYPE")
 *    @arg @c kGTLRDataFusion_Condition_Iam_NoAttr Default non-attribute.
 *        (Value: "NO_ATTR")
 *    @arg @c kGTLRDataFusion_Condition_Iam_SecurityRealm Any of the security
 *        realms in the IAMContext (go/security-realms).
 *        When used with IN, the condition indicates "any of the request's
 *        realms
 *        match one of the given values; with NOT_IN, "none of the realms match
 *        any of the given values". Note that a value can be:
 *        - 'self' (i.e., allow connections from clients that are in the same
 *        security realm)
 *        - a realm (e.g., 'campus-abc')
 *        - a realm group (e.g., 'realms-for-borg-cell-xx', see:
 *        go/realm-groups)
 *        A match is determined by a realm group
 *        membership check performed by a RealmAclRep object
 *        (go/realm-acl-howto).
 *        It is not permitted to grant access based on the *absence* of a realm,
 *        so
 *        realm conditions can only be used in a "positive" context (e.g.,
 *        ALLOW/IN
 *        or DENY/NOT_IN). (Value: "SECURITY_REALM")
 */
@property(nonatomic, copy, nullable) NSString *iam;

/**
 *  An operator to apply the subject with.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Condition_Op_Discharged Subject is discharged
 *        (Value: "DISCHARGED")
 *    @arg @c kGTLRDataFusion_Condition_Op_Equals DEPRECATED. Use IN instead.
 *        (Value: "EQUALS")
 *    @arg @c kGTLRDataFusion_Condition_Op_In The condition is true if the
 *        subject (or any element of it if it is
 *        a set) matches any of the supplied values. (Value: "IN")
 *    @arg @c kGTLRDataFusion_Condition_Op_NoOp Default no-op. (Value: "NO_OP")
 *    @arg @c kGTLRDataFusion_Condition_Op_NotEquals DEPRECATED. Use NOT_IN
 *        instead. (Value: "NOT_EQUALS")
 *    @arg @c kGTLRDataFusion_Condition_Op_NotIn The condition is true if the
 *        subject (or every element of it if it is
 *        a set) matches none of the supplied values. (Value: "NOT_IN")
 */
@property(nonatomic, copy, nullable) NSString *op;

/** Trusted attributes discharged by the service. */
@property(nonatomic, copy, nullable) NSString *svc;

/**
 *  Trusted attributes supplied by any service that owns resources and uses
 *  the IAM system for access control.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Condition_Sys_Ip IP address of the caller (Value:
 *        "IP")
 *    @arg @c kGTLRDataFusion_Condition_Sys_Name Resource name (Value: "NAME")
 *    @arg @c kGTLRDataFusion_Condition_Sys_NoAttr Default non-attribute type
 *        (Value: "NO_ATTR")
 *    @arg @c kGTLRDataFusion_Condition_Sys_Region Region of the resource
 *        (Value: "REGION")
 *    @arg @c kGTLRDataFusion_Condition_Sys_Service Service name (Value:
 *        "SERVICE")
 */
@property(nonatomic, copy, nullable) NSString *sys;

/** The objects of the condition. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Increment a streamz counter with the specified metric and field names.
 *  Metric names should start with a '/', generally be lowercase-only,
 *  and end in "_count". Field names should not contain an initial slash.
 *  The actual exported metric names will have "/iam/policy" prepended.
 *  Field names correspond to IAM request parameters and field values are
 *  their respective values.
 *  Supported field names:
 *  - "authority", which is "[token]" if IAMContext.token is present,
 *  otherwise the value of IAMContext.authority_selector if present, and
 *  otherwise a representation of IAMContext.principal; or
 *  - "iam_principal", a representation of IAMContext.principal even if a
 *  token or authority selector is present; or
 *  - "" (empty string), resulting in a counter with no fields.
 *  Examples:
 *  counter { metric: "/debug_access_count" field: "iam_principal" }
 *  ==> increment counter /iam/policy/debug_access_count
 *  {iam_principal=[value of IAMContext.principal]}
 */
@interface GTLRDataFusion_CounterOptions : GTLRObject

/** Custom fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_CustomField *> *customFields;

/** The field value to attribute. */
@property(nonatomic, copy, nullable) NSString *field;

/** The metric to update. */
@property(nonatomic, copy, nullable) NSString *metric;

@end


/**
 *  Custom fields.
 *  These can be used to create a counter with arbitrary field/value
 *  pairs.
 *  See: go/rpcsp-custom-fields.
 */
@interface GTLRDataFusion_CustomField : GTLRObject

/** Name is the field name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Value is the field value. It is important that in contrast to the
 *  CounterOptions.field, the value here is a constant that is not
 *  derived from the IAMContext.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Write a Data Access (Gin) log
 */
@interface GTLRDataFusion_DataAccessOptions : GTLRObject

/**
 *  Whether Gin logging should happen in a fail-closed manner at the caller.
 *  This is relevant only in the LocalIAM implementation, for now.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_DataAccessOptions_LogMode_LogFailClosed The
 *        application's operation in the context of which this authorization
 *        check is being made may only be performed if it is successfully logged
 *        to Gin. For instance, the authorization library may satisfy this
 *        obligation by emitting a partial log entry at authorization check time
 *        and only returning ALLOW to the application if it succeeds.
 *        If a matching Rule has this directive, but the client has not
 *        indicated
 *        that it will honor such requirements, then the IAM check will result
 *        in
 *        authorization failure by setting CheckPolicyResponse.success=false.
 *        (Value: "LOG_FAIL_CLOSED")
 *    @arg @c kGTLRDataFusion_DataAccessOptions_LogMode_LogModeUnspecified
 *        Client is not required to write a partial Gin log immediately after
 *        the authorization check. If client chooses to write one and it fails,
 *        client may either fail open (allow the operation to continue) or
 *        fail closed (handle as a DENY outcome). (Value:
 *        "LOG_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logMode;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRDataFusion_Empty : GTLRObject
@end


/**
 *  Represents an expression text. Example:
 *  title: "User account presence"
 *  description: "Determines whether the request has a user account"
 *  expression: "size(request.user) > 0"
 */
@interface GTLRDataFusion_Expr : GTLRObject

/**
 *  An optional description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in
 *  Common Expression Language syntax.
 *  The application context of the containing message determines which
 *  well-known feature set of CEL is supported.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  An optional string indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  An optional title for the expression, i.e. a short string describing
 *  its purpose. This can be used e.g. in UIs which allow to enter the
 *  expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a Data Fusion instance.
 */
@interface GTLRDataFusion_Instance : GTLRObject

/** Output only. Endpoint on which the REST APIs is accessible. */
@property(nonatomic, copy, nullable) NSString *apiEndpoint;

/**
 *  Available versions that the instance can be upgraded to using
 *  UpdateInstanceRequest.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Version *> *availableVersion;

/** Output only. The time the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  An optional description of this instance.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name for an instance. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Option to enable Stackdriver Logging.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableStackdriverLogging;

/**
 *  Option to enable Stackdriver Monitoring.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableStackdriverMonitoring;

/**
 *  The resource labels for instance to use to annotate any related underlying
 *  resources such as GCE VMs. The character '=' is not allowed to be used
 *  within the labels.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Instance_Labels *labels;

/**
 *  Output only. The name of this instance is in the form of
 *  projects/{project}/locations/{location}/instances/{instance}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Network configuration options. These are required when a private Data
 *  Fusion instance is to be created.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_NetworkConfig *networkConfig;

/**
 *  Map of additional options used to configure the behavior of
 *  Data Fusion instance.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Instance_Options *options;

/**
 *  Specifies whether the Data Fusion instance should be private. If set to
 *  true, all Data Fusion nodes will have private IP addresses and will not be
 *  able to access the public internet.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *privateInstance;

/**
 *  Output only. Service account which will be used to access resources in
 *  the customer project."
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Output only. Endpoint on which the Data Fusion UI is accessible. */
@property(nonatomic, copy, nullable) NSString *serviceEndpoint;

/**
 *  Output only. The current state of this Data Fusion instance.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Instance_State_AutoUpdating Instance is being
 *        auto-updated (Value: "AUTO_UPDATING")
 *    @arg @c kGTLRDataFusion_Instance_State_AutoUpgrading Instance is being
 *        auto-upgraded (Value: "AUTO_UPGRADING")
 *    @arg @c kGTLRDataFusion_Instance_State_Creating Instance is being created
 *        (Value: "CREATING")
 *    @arg @c kGTLRDataFusion_Instance_State_Deleting Instance is being deleted
 *        (Value: "DELETING")
 *    @arg @c kGTLRDataFusion_Instance_State_Failed Instance creation failed
 *        (Value: "FAILED")
 *    @arg @c kGTLRDataFusion_Instance_State_Restarting Instance is being
 *        restarted (Value: "RESTARTING")
 *    @arg @c kGTLRDataFusion_Instance_State_Running Instance is running and
 *        ready for requests (Value: "RUNNING")
 *    @arg @c kGTLRDataFusion_Instance_State_StateUnspecified Instance does not
 *        have a state yet (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDataFusion_Instance_State_Updating Instance is being updated
 *        on customer request (Value: "UPDATING")
 *    @arg @c kGTLRDataFusion_Instance_State_Upgrading Instance is being
 *        upgraded (Value: "UPGRADING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the current state of this Data
 *  Fusion instance if available.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/**
 *  Required. Instance type.
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Instance_Type_Basic Basic Data Fusion instance. In
 *        Basic type, the user will be able to
 *        create data pipelines using point and click UI. However, there are
 *        certain limitations, such as fewer number of concurrent pipelines, no
 *        support for streaming pipelines, etc. (Value: "BASIC")
 *    @arg @c kGTLRDataFusion_Instance_Type_Enterprise Enterprise Data Fusion
 *        instance. In Enterprise type, the user will have
 *        more features available, such as support for streaming pipelines,
 *        higher
 *        number of concurrent pipelines, etc. (Value: "ENTERPRISE")
 *    @arg @c kGTLRDataFusion_Instance_Type_TypeUnspecified No type specified.
 *        The instance creation will fail. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. The time the instance was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Current version of the Data Fusion. Only specifiable in Update. */
@property(nonatomic, copy, nullable) NSString *version;

/**
 *  Name of the zone in which the Data Fusion instance will be created.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  The resource labels for instance to use to annotate any related underlying
 *  resources such as GCE VMs. The character '=' is not allowed to be used
 *  within the labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataFusion_Instance_Labels : GTLRObject
@end


/**
 *  Map of additional options used to configure the behavior of
 *  Data Fusion instance.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataFusion_Instance_Options : GTLRObject
@end


/**
 *  Response message for the list instance request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataFusion_ListInstancesResponse : GTLRCollectionObject

/**
 *  Represents a list of Data Fusion instances.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Instance *> *instances;

/**
 *  Token to retrieve the next page of results or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataFusion_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDataFusion_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRDataFusion_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name.
 *  For example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations.
 *  For example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDataFusion_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataFusion_Location_Metadata : GTLRObject
@end


/**
 *  Specifies what kind of log the caller must write
 */
@interface GTLRDataFusion_LogConfig : GTLRObject

/** Cloud audit options. */
@property(nonatomic, strong, nullable) GTLRDataFusion_CloudAuditOptions *cloudAudit;

/** Counter options. */
@property(nonatomic, strong, nullable) GTLRDataFusion_CounterOptions *counter;

/** Data access options. */
@property(nonatomic, strong, nullable) GTLRDataFusion_DataAccessOptions *dataAccess;

@end


/**
 *  Network configuration for a Data Fusion instance. These configurations
 *  are used for peering with the customer network. Configurations are optional
 *  when a public Data Fusion instance is to be created. However, providing
 *  these configurations allows several benefits, such as reduced network
 *  latency
 *  while accessing the customer resources from managed Data Fusion instance
 *  nodes, as well as access to the customer on-prem resources.
 */
@interface GTLRDataFusion_NetworkConfig : GTLRObject

/**
 *  The IP range in CIDR notation to use for the managed Data Fusion instance
 *  nodes. This range must not overlap with any other ranges used in the Data
 *  Fusion instance network.
 */
@property(nonatomic, copy, nullable) NSString *ipAllocation;

/**
 *  Name of the network in the customer project with which the Tenant Project
 *  will be peered for executing pipelines. In case of shared VPC where the
 *  network resides in another host project the network should specified in
 *  the form of projects/{host-project-id}/global/networks/{network}
 */
@property(nonatomic, copy, nullable) NSString *network;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDataFusion_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDataFusion_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataFusion_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataFusion_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRDataFusion_OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Identifies whether the user has requested cancellation
 *  of the operation. Operations that have successfully been cancelled
 *  have Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Human-readable status of the operation if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Defines an Identity and Access Management (IAM) policy. It is used to
 *  specify access control policies for Cloud Platform resources.
 *  A `Policy` is a collection of `bindings`. A `binding` binds one or more
 *  `members` to a single `role`. Members can be user accounts, service
 *  accounts,
 *  Google groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions (defined by IAM or configured by users). A `binding` can
 *  optionally specify a `condition`, which is a logic expression that further
 *  constrains the role binding based on attributes about the request and/or
 *  target resource.
 *  **JSON Example**
 *  {
 *  "bindings": [
 *  {
 *  "role": "roles/resourcemanager.organizationAdmin",
 *  "members": [
 *  "user:mike\@example.com",
 *  "group:admins\@example.com",
 *  "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com"
 *  ]
 *  },
 *  {
 *  "role": "roles/resourcemanager.organizationViewer",
 *  "members": ["user:eve\@example.com"],
 *  "condition": {
 *  "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020",
 *  "expression": "request.time <
 *  timestamp('2020-10-01T00:00:00.000Z')",
 *  }
 *  }
 *  ]
 *  }
 *  **YAML Example**
 *  bindings:
 *  - members:
 *  - user:mike\@example.com
 *  - group:admins\@example.com
 *  - domain:google.com
 *  - serviceAccount:my-project-id\@appspot.gserviceaccount.com
 *  role: roles/resourcemanager.organizationAdmin
 *  - members:
 *  - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer
 *  condition:
 *  title: expirable access
 *  description: Does not grant access after Sep 2020
 *  expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
 *  For a description of IAM and its features, see the
 *  [IAM developer's guide](https://cloud.google.com/iam/docs).
 */
@interface GTLRDataFusion_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members` to a `role`. Optionally may specify a
 *  `condition` that determines when binding is in effect.
 *  `bindings` with no members will result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help
 *  prevent simultaneous updates of a policy from overwriting each other.
 *  It is strongly suggested that systems make use of the `etag` in the
 *  read-modify-write cycle to perform policy updates in order to avoid race
 *  conditions: An `etag` is returned in the response to `getIamPolicy`, and
 *  systems are expected to put that etag in the request to `setIamPolicy` to
 *  ensure that their change will be applied to the same version of the policy.
 *  If no `etag` is provided in the call to `setIamPolicy`, then the existing
 *  policy is overwritten. Due to blind-set semantics of an etag-less policy,
 *  'setIamPolicy' will not fail even if either of incoming or stored policy
 *  does not meet the version requirements.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  iamOwned
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iamOwned;

/**
 *  If more than one rule is specified, the rules are applied in the following
 *  manner:
 *  - All matching LOG rules are always applied.
 *  - If any DENY/DENY_WITH_LOG rule matches, permission is denied.
 *  Logging will be applied if one or more matching rule requires logging.
 *  - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is
 *  granted.
 *  Logging will be applied if one or more matching rule requires logging.
 *  - Otherwise, if no rule applies, permission is denied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Rule *> *rules;

/**
 *  Specifies the format of the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected.
 *  Operations affecting conditional bindings must specify version 3. This can
 *  be either setting a conditional policy, modifying a conditional binding,
 *  or removing a conditional binding from the stored conditional policy.
 *  Operations on non-conditional policies may specify any valid value or
 *  leave the field unset.
 *  If no etag is provided in the call to `setIamPolicy`, any version
 *  compliance checks on the incoming and/or stored policy is skipped.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for restarting a Data Fusion instance.
 */
@interface GTLRDataFusion_RestartInstanceRequest : GTLRObject
@end


/**
 *  A rule to be applied in a Policy.
 */
@interface GTLRDataFusion_Rule : GTLRObject

/**
 *  Required
 *
 *  Likely values:
 *    @arg @c kGTLRDataFusion_Rule_Action_Allow Matching 'Entries' grant access.
 *        (Value: "ALLOW")
 *    @arg @c kGTLRDataFusion_Rule_Action_AllowWithLog Matching 'Entries' grant
 *        access and the caller promises to log
 *        the request per the returned log_configs. (Value: "ALLOW_WITH_LOG")
 *    @arg @c kGTLRDataFusion_Rule_Action_Deny Matching 'Entries' deny access.
 *        (Value: "DENY")
 *    @arg @c kGTLRDataFusion_Rule_Action_DenyWithLog Matching 'Entries' deny
 *        access and the caller promises to log
 *        the request per the returned log_configs. (Value: "DENY_WITH_LOG")
 *    @arg @c kGTLRDataFusion_Rule_Action_Log Matching 'Entries' tell IAM.Check
 *        callers to generate logs. (Value: "LOG")
 *    @arg @c kGTLRDataFusion_Rule_Action_NoAction Default no action. (Value:
 *        "NO_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Additional restrictions that must be met. All conditions must pass for the
 *  rule to match.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Condition *> *conditions;

/**
 *  Human-readable description of the rule.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  If one or more 'in' clauses are specified, the rule matches if
 *  the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
 *
 *  Remapped to 'inProperty' to avoid language reserved word 'in'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inProperty;

/**
 *  The config returned to callers of tech.iam.IAM.CheckPolicy for any entries
 *  that match the LOG action.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_LogConfig *> *logConfig;

/**
 *  If one or more 'not_in' clauses are specified, the rule matches
 *  if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
 *  The format for in and not_in entries can be found at in the Local IAM
 *  documentation (see go/local-iam#features).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *notIn;

/**
 *  A permission is a string of form '<service>.<resource type>.<verb>'
 *  (e.g., 'storage.buckets.list'). A value of '*' matches all permissions,
 *  and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRDataFusion_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a
 *  valid policy but certain Cloud Platform services (such as Projects)
 *  might reject them.
 */
@property(nonatomic, strong, nullable) GTLRDataFusion_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used:
 *  paths: "bindings, etag"
 *  This field is only used by Cloud IAM.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details.
 *  You can find out more about this error model and how to work with it in the
 *  [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDataFusion_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDataFusion_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDataFusion_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDataFusion_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRDataFusion_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as '*' or 'storage.*') are not allowed. For more
 *  information see
 *  [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRDataFusion_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is
 *  allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for upgrading a Data Fusion instance.
 *  To change the instance properties, instance update should be used.
 */
@interface GTLRDataFusion_UpgradeInstanceRequest : GTLRObject
@end


/**
 *  The Data Fusion version.
 */
@interface GTLRDataFusion_Version : GTLRObject

/** The version number of the Data Fusion instance, such as '6.0.1.0'. */
@property(nonatomic, copy, nullable) NSString *versionNumber;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
