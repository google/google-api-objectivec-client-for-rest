// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin Directory API (admin/directory_v1)
// Description:
//   Manages enterprise resources such as users and groups, administrative
//   notifications, security features, and more.
// Documentation:
//   https://developers.google.com/admin-sdk/directory/

#import "GTLRDirectoryQuery.h"

#import "GTLRDirectoryObjects.h"

// ----------------------------------------------------------------------------
// Constants

// event
NSString * const kGTLRDirectoryEventAdd       = @"add";
NSString * const kGTLRDirectoryEventDelete    = @"delete";
NSString * const kGTLRDirectoryEventMakeAdmin = @"makeAdmin";
NSString * const kGTLRDirectoryEventUndelete  = @"undelete";
NSString * const kGTLRDirectoryEventUpdate    = @"update";

// orderBy
NSString * const kGTLRDirectoryOrderByAnnotatedLocation = @"annotatedLocation";
NSString * const kGTLRDirectoryOrderByAnnotatedUser     = @"annotatedUser";
NSString * const kGTLRDirectoryOrderByDeviceId          = @"deviceId";
NSString * const kGTLRDirectoryOrderByEmail             = @"email";
NSString * const kGTLRDirectoryOrderByFamilyName        = @"familyName";
NSString * const kGTLRDirectoryOrderByGivenName         = @"givenName";
NSString * const kGTLRDirectoryOrderByLastSync          = @"lastSync";
NSString * const kGTLRDirectoryOrderByModel             = @"model";
NSString * const kGTLRDirectoryOrderByName              = @"name";
NSString * const kGTLRDirectoryOrderByNotes             = @"notes";
NSString * const kGTLRDirectoryOrderByOs                = @"os";
NSString * const kGTLRDirectoryOrderBySerialNumber      = @"serialNumber";
NSString * const kGTLRDirectoryOrderByStatus            = @"status";
NSString * const kGTLRDirectoryOrderBySupportEndDate    = @"supportEndDate";
NSString * const kGTLRDirectoryOrderByType              = @"type";

// projection
NSString * const kGTLRDirectoryProjectionBasic  = @"basic";
NSString * const kGTLRDirectoryProjectionCustom = @"custom";
NSString * const kGTLRDirectoryProjectionFull   = @"full";

// sortOrder
NSString * const kGTLRDirectorySortOrderAscending  = @"ASCENDING";
NSString * const kGTLRDirectorySortOrderDescending = @"DESCENDING";

// type
NSString * const kGTLRDirectoryTypeAll      = @"all";
NSString * const kGTLRDirectoryTypeChildren = @"children";

// viewType
NSString * const kGTLRDirectoryViewTypeAdminView    = @"admin_view";
NSString * const kGTLRDirectoryViewTypeDomainPublic = @"domain_public";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRDirectoryQuery

@dynamic fields;

@end

@implementation GTLRDirectoryQuery_AspsDelete

@dynamic codeId, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                          codeId:(NSInteger)codeId {
  NSArray *pathParams = @[
    @"codeId", @"userKey"
  ];
  NSString *pathURITemplate = @"users/{userKey}/asps/{codeId}";
  GTLRDirectoryQuery_AspsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.codeId = codeId;
  query.loggingName = @"directory.asps.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_AspsGet

@dynamic codeId, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                          codeId:(NSInteger)codeId {
  NSArray *pathParams = @[
    @"codeId", @"userKey"
  ];
  NSString *pathURITemplate = @"users/{userKey}/asps/{codeId}";
  GTLRDirectoryQuery_AspsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.codeId = codeId;
  query.expectedObjectClass = [GTLRDirectory_Asp class];
  query.loggingName = @"directory.asps.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_AspsList

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/asps";
  GTLRDirectoryQuery_AspsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_Asps class];
  query.loggingName = @"directory.asps.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChannelsStop

+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"admin/directory_v1/channels/stop";
  GTLRDirectoryQuery_ChannelsStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.loggingName = @"admin.channels.stop";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesAction

@dynamic customerId, resourceId;

+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDeviceAction *)object
                     customerId:(NSString *)customerId
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"resourceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos/{resourceId}/action";
  GTLRDirectoryQuery_ChromeosdevicesAction *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.resourceId = resourceId;
  query.loggingName = @"directory.chromeosdevices.action";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesGet

@dynamic customerId, deviceId, projection;

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                           deviceId:(NSString *)deviceId {
  NSArray *pathParams = @[
    @"customerId", @"deviceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos/{deviceId}";
  GTLRDirectoryQuery_ChromeosdevicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRDirectory_ChromeOsDevice class];
  query.loggingName = @"directory.chromeosdevices.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesList

@dynamic customerId, maxResults, orderBy, orgUnitPath, pageToken, projection,
         query, sortOrder;

+ (instancetype)queryWithCustomerId:(NSString *)customerId {
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos";
  GTLRDirectoryQuery_ChromeosdevicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_ChromeOsDevices class];
  query.loggingName = @"directory.chromeosdevices.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesMoveDevicesToOu

@dynamic customerId, orgUnitPath;

+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsMoveDevicesToOu *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSString *)orgUnitPath {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos/moveDevicesToOu";
  GTLRDirectoryQuery_ChromeosdevicesMoveDevicesToOu *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.orgUnitPath = orgUnitPath;
  query.loggingName = @"directory.chromeosdevices.moveDevicesToOu";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesPatch

@dynamic customerId, deviceId, projection;

+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDevice *)object
                     customerId:(NSString *)customerId
                       deviceId:(NSString *)deviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"deviceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos/{deviceId}";
  GTLRDirectoryQuery_ChromeosdevicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRDirectory_ChromeOsDevice class];
  query.loggingName = @"directory.chromeosdevices.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ChromeosdevicesUpdate

@dynamic customerId, deviceId, projection;

+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDevice *)object
                     customerId:(NSString *)customerId
                       deviceId:(NSString *)deviceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"deviceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/chromeos/{deviceId}";
  GTLRDirectoryQuery_ChromeosdevicesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.deviceId = deviceId;
  query.expectedObjectClass = [GTLRDirectory_ChromeOsDevice class];
  query.loggingName = @"directory.chromeosdevices.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_CustomersGet

@dynamic customerKey;

+ (instancetype)queryWithCustomerKey:(NSString *)customerKey {
  NSArray *pathParams = @[ @"customerKey" ];
  NSString *pathURITemplate = @"customers/{customerKey}";
  GTLRDirectoryQuery_CustomersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerKey = customerKey;
  query.expectedObjectClass = [GTLRDirectory_Customer class];
  query.loggingName = @"directory.customers.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_CustomersPatch

@dynamic customerKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Customer *)object
                    customerKey:(NSString *)customerKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customerKey" ];
  NSString *pathURITemplate = @"customers/{customerKey}";
  GTLRDirectoryQuery_CustomersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerKey = customerKey;
  query.expectedObjectClass = [GTLRDirectory_Customer class];
  query.loggingName = @"directory.customers.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_CustomersUpdate

@dynamic customerKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Customer *)object
                    customerKey:(NSString *)customerKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customerKey" ];
  NSString *pathURITemplate = @"customers/{customerKey}";
  GTLRDirectoryQuery_CustomersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerKey = customerKey;
  query.expectedObjectClass = [GTLRDirectory_Customer class];
  query.loggingName = @"directory.customers.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainAliasesDelete

@dynamic customer, domainAliasName;

+ (instancetype)queryWithCustomer:(NSString *)customer
                  domainAliasName:(NSString *)domainAliasName {
  NSArray *pathParams = @[
    @"customer", @"domainAliasName"
  ];
  NSString *pathURITemplate = @"customer/{customer}/domainaliases/{domainAliasName}";
  GTLRDirectoryQuery_DomainAliasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.domainAliasName = domainAliasName;
  query.loggingName = @"directory.domainAliases.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainAliasesGet

@dynamic customer, domainAliasName;

+ (instancetype)queryWithCustomer:(NSString *)customer
                  domainAliasName:(NSString *)domainAliasName {
  NSArray *pathParams = @[
    @"customer", @"domainAliasName"
  ];
  NSString *pathURITemplate = @"customer/{customer}/domainaliases/{domainAliasName}";
  GTLRDirectoryQuery_DomainAliasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.domainAliasName = domainAliasName;
  query.expectedObjectClass = [GTLRDirectory_DomainAlias class];
  query.loggingName = @"directory.domainAliases.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainAliasesInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_DomainAlias *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/domainaliases";
  GTLRDirectoryQuery_DomainAliasesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_DomainAlias class];
  query.loggingName = @"directory.domainAliases.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainAliasesList

@dynamic customer, parentDomainName;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/domainaliases";
  GTLRDirectoryQuery_DomainAliasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_DomainAliases class];
  query.loggingName = @"directory.domainAliases.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainsDelete

@dynamic customer, domainName;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       domainName:(NSString *)domainName {
  NSArray *pathParams = @[
    @"customer", @"domainName"
  ];
  NSString *pathURITemplate = @"customer/{customer}/domains/{domainName}";
  GTLRDirectoryQuery_DomainsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.domainName = domainName;
  query.loggingName = @"directory.domains.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainsGet

@dynamic customer, domainName;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       domainName:(NSString *)domainName {
  NSArray *pathParams = @[
    @"customer", @"domainName"
  ];
  NSString *pathURITemplate = @"customer/{customer}/domains/{domainName}";
  GTLRDirectoryQuery_DomainsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.domainName = domainName;
  query.expectedObjectClass = [GTLRDirectory_Domains class];
  query.loggingName = @"directory.domains.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainsInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Domains *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/domains";
  GTLRDirectoryQuery_DomainsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Domains class];
  query.loggingName = @"directory.domains.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_DomainsList

@dynamic customer;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/domains";
  GTLRDirectoryQuery_DomainsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Domains2 class];
  query.loggingName = @"directory.domains.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsAliasesDelete

@dynamic alias, groupKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                            alias:(NSString *)alias {
  NSArray *pathParams = @[
    @"alias", @"groupKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/aliases/{alias}";
  GTLRDirectoryQuery_GroupsAliasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.alias = alias;
  query.loggingName = @"directory.groups.aliases.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsAliasesInsert

@dynamic groupKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Alias *)object
                       groupKey:(NSString *)groupKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}/aliases";
  GTLRDirectoryQuery_GroupsAliasesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Alias class];
  query.loggingName = @"directory.groups.aliases.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsAliasesList

@dynamic groupKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey {
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}/aliases";
  GTLRDirectoryQuery_GroupsAliasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Aliases class];
  query.loggingName = @"directory.groups.aliases.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsDelete

@dynamic groupKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey {
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}";
  GTLRDirectoryQuery_GroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.loggingName = @"directory.groups.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsGet

@dynamic groupKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey {
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}";
  GTLRDirectoryQuery_GroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Group class];
  query.loggingName = @"directory.groups.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsInsert

+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"groups";
  GTLRDirectoryQuery_GroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDirectory_Group class];
  query.loggingName = @"directory.groups.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsList

@dynamic customer, domain, maxResults, orderBy, pageToken, query, sortOrder,
         userKey;

+ (instancetype)query {
  NSString *pathURITemplate = @"groups";
  GTLRDirectoryQuery_GroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDirectory_Groups class];
  query.loggingName = @"directory.groups.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsPatch

@dynamic groupKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object
                       groupKey:(NSString *)groupKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}";
  GTLRDirectoryQuery_GroupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Group class];
  query.loggingName = @"directory.groups.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_GroupsUpdate

@dynamic groupKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object
                       groupKey:(NSString *)groupKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}";
  GTLRDirectoryQuery_GroupsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Group class];
  query.loggingName = @"directory.groups.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersDelete

@dynamic groupKey, memberKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey {
  NSArray *pathParams = @[
    @"groupKey", @"memberKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/members/{memberKey}";
  GTLRDirectoryQuery_MembersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.memberKey = memberKey;
  query.loggingName = @"directory.members.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersGet

@dynamic groupKey, memberKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey {
  NSArray *pathParams = @[
    @"groupKey", @"memberKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/members/{memberKey}";
  GTLRDirectoryQuery_MembersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.memberKey = memberKey;
  query.expectedObjectClass = [GTLRDirectory_Member class];
  query.loggingName = @"directory.members.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersHasMember

@dynamic groupKey, memberKey;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey {
  NSArray *pathParams = @[
    @"groupKey", @"memberKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/hasMember/{memberKey}";
  GTLRDirectoryQuery_MembersHasMember *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.memberKey = memberKey;
  query.expectedObjectClass = [GTLRDirectory_MembersHasMember class];
  query.loggingName = @"directory.members.hasMember";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersInsert

@dynamic groupKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}/members";
  GTLRDirectoryQuery_MembersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Member class];
  query.loggingName = @"directory.members.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersList

@dynamic groupKey, includeDerivedMembership, maxResults, pageToken, roles;

+ (instancetype)queryWithGroupKey:(NSString *)groupKey {
  NSArray *pathParams = @[ @"groupKey" ];
  NSString *pathURITemplate = @"groups/{groupKey}/members";
  GTLRDirectoryQuery_MembersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.groupKey = groupKey;
  query.expectedObjectClass = [GTLRDirectory_Members class];
  query.loggingName = @"directory.members.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersPatch

@dynamic groupKey, memberKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey
                      memberKey:(NSString *)memberKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"groupKey", @"memberKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/members/{memberKey}";
  GTLRDirectoryQuery_MembersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.memberKey = memberKey;
  query.expectedObjectClass = [GTLRDirectory_Member class];
  query.loggingName = @"directory.members.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MembersUpdate

@dynamic groupKey, memberKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey
                      memberKey:(NSString *)memberKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"groupKey", @"memberKey"
  ];
  NSString *pathURITemplate = @"groups/{groupKey}/members/{memberKey}";
  GTLRDirectoryQuery_MembersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.groupKey = groupKey;
  query.memberKey = memberKey;
  query.expectedObjectClass = [GTLRDirectory_Member class];
  query.loggingName = @"directory.members.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MobiledevicesAction

@dynamic customerId, resourceId;

+ (instancetype)queryWithObject:(GTLRDirectory_MobileDeviceAction *)object
                     customerId:(NSString *)customerId
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"resourceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/mobile/{resourceId}/action";
  GTLRDirectoryQuery_MobiledevicesAction *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.resourceId = resourceId;
  query.loggingName = @"directory.mobiledevices.action";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MobiledevicesDelete

@dynamic customerId, resourceId;

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                         resourceId:(NSString *)resourceId {
  NSArray *pathParams = @[
    @"customerId", @"resourceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/mobile/{resourceId}";
  GTLRDirectoryQuery_MobiledevicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.resourceId = resourceId;
  query.loggingName = @"directory.mobiledevices.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MobiledevicesGet

@dynamic customerId, projection, resourceId;

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                         resourceId:(NSString *)resourceId {
  NSArray *pathParams = @[
    @"customerId", @"resourceId"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/mobile/{resourceId}";
  GTLRDirectoryQuery_MobiledevicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRDirectory_MobileDevice class];
  query.loggingName = @"directory.mobiledevices.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_MobiledevicesList

@dynamic customerId, maxResults, orderBy, pageToken, projection, query,
         sortOrder;

+ (instancetype)queryWithCustomerId:(NSString *)customerId {
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/devices/mobile";
  GTLRDirectoryQuery_MobiledevicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_MobileDevices class];
  query.loggingName = @"directory.mobiledevices.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_NotificationsDelete

@dynamic customer, notificationId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                   notificationId:(NSString *)notificationId {
  NSArray *pathParams = @[
    @"customer", @"notificationId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/notifications/{notificationId}";
  GTLRDirectoryQuery_NotificationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.notificationId = notificationId;
  query.loggingName = @"directory.notifications.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_NotificationsGet

@dynamic customer, notificationId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                   notificationId:(NSString *)notificationId {
  NSArray *pathParams = @[
    @"customer", @"notificationId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/notifications/{notificationId}";
  GTLRDirectoryQuery_NotificationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.notificationId = notificationId;
  query.expectedObjectClass = [GTLRDirectory_Notification class];
  query.loggingName = @"directory.notifications.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_NotificationsList

@dynamic customer, language, maxResults, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/notifications";
  GTLRDirectoryQuery_NotificationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Notifications class];
  query.loggingName = @"directory.notifications.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_NotificationsPatch

@dynamic customer, notificationId;

+ (instancetype)queryWithObject:(GTLRDirectory_Notification *)object
                       customer:(NSString *)customer
                 notificationId:(NSString *)notificationId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"notificationId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/notifications/{notificationId}";
  GTLRDirectoryQuery_NotificationsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.notificationId = notificationId;
  query.expectedObjectClass = [GTLRDirectory_Notification class];
  query.loggingName = @"directory.notifications.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_NotificationsUpdate

@dynamic customer, notificationId;

+ (instancetype)queryWithObject:(GTLRDirectory_Notification *)object
                       customer:(NSString *)customer
                 notificationId:(NSString *)notificationId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"notificationId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/notifications/{notificationId}";
  GTLRDirectoryQuery_NotificationsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.notificationId = notificationId;
  query.expectedObjectClass = [GTLRDirectory_Notification class];
  query.loggingName = @"directory.notifications.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsDelete

@dynamic customerId, orgUnitPath;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"orgUnitPath" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                        orgUnitPath:(NSArray<NSString *> *)orgUnitPath {
  NSArray *pathParams = @[
    @"customerId", @"orgUnitPath"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits{/orgUnitPath*}";
  GTLRDirectoryQuery_OrgunitsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.orgUnitPath = orgUnitPath;
  query.loggingName = @"directory.orgunits.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsGet

@dynamic customerId, orgUnitPath;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"orgUnitPath" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                        orgUnitPath:(NSArray<NSString *> *)orgUnitPath {
  NSArray *pathParams = @[
    @"customerId", @"orgUnitPath"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits{/orgUnitPath*}";
  GTLRDirectoryQuery_OrgunitsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.orgUnitPath = orgUnitPath;
  query.expectedObjectClass = [GTLRDirectory_OrgUnit class];
  query.loggingName = @"directory.orgunits.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsInsert

@dynamic customerId;

+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits";
  GTLRDirectoryQuery_OrgunitsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_OrgUnit class];
  query.loggingName = @"directory.orgunits.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsList

@dynamic customerId, orgUnitPath, type;

+ (instancetype)queryWithCustomerId:(NSString *)customerId {
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits";
  GTLRDirectoryQuery_OrgunitsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_OrgUnits class];
  query.loggingName = @"directory.orgunits.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsPatch

@dynamic customerId, orgUnitPath;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"orgUnitPath" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSArray<NSString *> *)orgUnitPath {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"orgUnitPath"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits{/orgUnitPath*}";
  GTLRDirectoryQuery_OrgunitsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.orgUnitPath = orgUnitPath;
  query.expectedObjectClass = [GTLRDirectory_OrgUnit class];
  query.loggingName = @"directory.orgunits.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_OrgunitsUpdate

@dynamic customerId, orgUnitPath;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"orgUnitPath" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSArray<NSString *> *)orgUnitPath {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"orgUnitPath"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/orgunits{/orgUnitPath*}";
  GTLRDirectoryQuery_OrgunitsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.orgUnitPath = orgUnitPath;
  query.expectedObjectClass = [GTLRDirectory_OrgUnit class];
  query.loggingName = @"directory.orgunits.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_PrivilegesList

@dynamic customer;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/roles/ALL/privileges";
  GTLRDirectoryQuery_PrivilegesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Privileges class];
  query.loggingName = @"directory.privileges.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResolvedAppAccessSettingsGetSettings

+ (instancetype)query {
  NSString *pathURITemplate = @"resolvedappaccesssettings";
  GTLRDirectoryQuery_ResolvedAppAccessSettingsGetSettings *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDirectory_AppAccessCollections class];
  query.loggingName = @"directory.resolvedAppAccessSettings.GetSettings";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResolvedAppAccessSettingsListTrustedApps

+ (instancetype)query {
  NSString *pathURITemplate = @"trustedapps";
  GTLRDirectoryQuery_ResolvedAppAccessSettingsListTrustedApps *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDirectory_TrustedApps class];
  query.loggingName = @"directory.resolvedAppAccessSettings.ListTrustedApps";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsDelete

@dynamic buildingId, customer;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       buildingId:(NSString *)buildingId {
  NSArray *pathParams = @[
    @"buildingId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings/{buildingId}";
  GTLRDirectoryQuery_ResourcesBuildingsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.buildingId = buildingId;
  query.loggingName = @"directory.resources.buildings.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsGet

@dynamic buildingId, customer;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       buildingId:(NSString *)buildingId {
  NSArray *pathParams = @[
    @"buildingId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings/{buildingId}";
  GTLRDirectoryQuery_ResourcesBuildingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.buildingId = buildingId;
  query.expectedObjectClass = [GTLRDirectory_Building class];
  query.loggingName = @"directory.resources.buildings.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings";
  GTLRDirectoryQuery_ResourcesBuildingsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Building class];
  query.loggingName = @"directory.resources.buildings.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsList

@dynamic customer, maxResults, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings";
  GTLRDirectoryQuery_ResourcesBuildingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Buildings class];
  query.loggingName = @"directory.resources.buildings.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsPatch

@dynamic buildingId, customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer
                     buildingId:(NSString *)buildingId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"buildingId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings/{buildingId}";
  GTLRDirectoryQuery_ResourcesBuildingsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.buildingId = buildingId;
  query.expectedObjectClass = [GTLRDirectory_Building class];
  query.loggingName = @"directory.resources.buildings.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesBuildingsUpdate

@dynamic buildingId, customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer
                     buildingId:(NSString *)buildingId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"buildingId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/buildings/{buildingId}";
  GTLRDirectoryQuery_ResourcesBuildingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.buildingId = buildingId;
  query.expectedObjectClass = [GTLRDirectory_Building class];
  query.loggingName = @"directory.resources.buildings.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsDelete

@dynamic calendarResourceId, customer;

+ (instancetype)queryWithCustomer:(NSString *)customer
               calendarResourceId:(NSString *)calendarResourceId {
  NSArray *pathParams = @[
    @"calendarResourceId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars/{calendarResourceId}";
  GTLRDirectoryQuery_ResourcesCalendarsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.calendarResourceId = calendarResourceId;
  query.loggingName = @"directory.resources.calendars.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsGet

@dynamic calendarResourceId, customer;

+ (instancetype)queryWithCustomer:(NSString *)customer
               calendarResourceId:(NSString *)calendarResourceId {
  NSArray *pathParams = @[
    @"calendarResourceId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars/{calendarResourceId}";
  GTLRDirectoryQuery_ResourcesCalendarsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.calendarResourceId = calendarResourceId;
  query.expectedObjectClass = [GTLRDirectory_CalendarResource class];
  query.loggingName = @"directory.resources.calendars.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars";
  GTLRDirectoryQuery_ResourcesCalendarsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_CalendarResource class];
  query.loggingName = @"directory.resources.calendars.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsList

@dynamic customer, maxResults, orderBy, pageToken, query;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars";
  GTLRDirectoryQuery_ResourcesCalendarsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_CalendarResources class];
  query.loggingName = @"directory.resources.calendars.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsPatch

@dynamic calendarResourceId, customer;

+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer
             calendarResourceId:(NSString *)calendarResourceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"calendarResourceId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars/{calendarResourceId}";
  GTLRDirectoryQuery_ResourcesCalendarsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.calendarResourceId = calendarResourceId;
  query.expectedObjectClass = [GTLRDirectory_CalendarResource class];
  query.loggingName = @"directory.resources.calendars.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesCalendarsUpdate

@dynamic calendarResourceId, customer;

+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer
             calendarResourceId:(NSString *)calendarResourceId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"calendarResourceId", @"customer"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/calendars/{calendarResourceId}";
  GTLRDirectoryQuery_ResourcesCalendarsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.calendarResourceId = calendarResourceId;
  query.expectedObjectClass = [GTLRDirectory_CalendarResource class];
  query.loggingName = @"directory.resources.calendars.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesDelete

@dynamic customer, featureKey;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       featureKey:(NSString *)featureKey {
  NSArray *pathParams = @[
    @"customer", @"featureKey"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features/{featureKey}";
  GTLRDirectoryQuery_ResourcesFeaturesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.featureKey = featureKey;
  query.loggingName = @"directory.resources.features.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesGet

@dynamic customer, featureKey;

+ (instancetype)queryWithCustomer:(NSString *)customer
                       featureKey:(NSString *)featureKey {
  NSArray *pathParams = @[
    @"customer", @"featureKey"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features/{featureKey}";
  GTLRDirectoryQuery_ResourcesFeaturesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.featureKey = featureKey;
  query.expectedObjectClass = [GTLRDirectory_Feature class];
  query.loggingName = @"directory.resources.features.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features";
  GTLRDirectoryQuery_ResourcesFeaturesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Feature class];
  query.loggingName = @"directory.resources.features.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesList

@dynamic customer, maxResults, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features";
  GTLRDirectoryQuery_ResourcesFeaturesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Features class];
  query.loggingName = @"directory.resources.features.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesPatch

@dynamic customer, featureKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer
                     featureKey:(NSString *)featureKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"featureKey"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features/{featureKey}";
  GTLRDirectoryQuery_ResourcesFeaturesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.featureKey = featureKey;
  query.expectedObjectClass = [GTLRDirectory_Feature class];
  query.loggingName = @"directory.resources.features.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesRename

@dynamic customer, oldName;

+ (instancetype)queryWithObject:(GTLRDirectory_FeatureRename *)object
                       customer:(NSString *)customer
                        oldName:(NSString *)oldName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"oldName"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features/{oldName}/rename";
  GTLRDirectoryQuery_ResourcesFeaturesRename *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.oldName = oldName;
  query.loggingName = @"directory.resources.features.rename";
  return query;
}

@end

@implementation GTLRDirectoryQuery_ResourcesFeaturesUpdate

@dynamic customer, featureKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer
                     featureKey:(NSString *)featureKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"featureKey"
  ];
  NSString *pathURITemplate = @"customer/{customer}/resources/features/{featureKey}";
  GTLRDirectoryQuery_ResourcesFeaturesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.featureKey = featureKey;
  query.expectedObjectClass = [GTLRDirectory_Feature class];
  query.loggingName = @"directory.resources.features.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RoleAssignmentsDelete

@dynamic customer, roleAssignmentId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                 roleAssignmentId:(NSString *)roleAssignmentId {
  NSArray *pathParams = @[
    @"customer", @"roleAssignmentId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roleassignments/{roleAssignmentId}";
  GTLRDirectoryQuery_RoleAssignmentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.roleAssignmentId = roleAssignmentId;
  query.loggingName = @"directory.roleAssignments.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RoleAssignmentsGet

@dynamic customer, roleAssignmentId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                 roleAssignmentId:(NSString *)roleAssignmentId {
  NSArray *pathParams = @[
    @"customer", @"roleAssignmentId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roleassignments/{roleAssignmentId}";
  GTLRDirectoryQuery_RoleAssignmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.roleAssignmentId = roleAssignmentId;
  query.expectedObjectClass = [GTLRDirectory_RoleAssignment class];
  query.loggingName = @"directory.roleAssignments.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RoleAssignmentsInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_RoleAssignment *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/roleassignments";
  GTLRDirectoryQuery_RoleAssignmentsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_RoleAssignment class];
  query.loggingName = @"directory.roleAssignments.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RoleAssignmentsList

@dynamic customer, maxResults, pageToken, roleId, userKey;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/roleassignments";
  GTLRDirectoryQuery_RoleAssignmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_RoleAssignments class];
  query.loggingName = @"directory.roleAssignments.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesDelete

@dynamic customer, roleId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                           roleId:(NSString *)roleId {
  NSArray *pathParams = @[
    @"customer", @"roleId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roles/{roleId}";
  GTLRDirectoryQuery_RolesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.roleId = roleId;
  query.loggingName = @"directory.roles.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesGet

@dynamic customer, roleId;

+ (instancetype)queryWithCustomer:(NSString *)customer
                           roleId:(NSString *)roleId {
  NSArray *pathParams = @[
    @"customer", @"roleId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roles/{roleId}";
  GTLRDirectoryQuery_RolesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.roleId = roleId;
  query.expectedObjectClass = [GTLRDirectory_Role class];
  query.loggingName = @"directory.roles.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesInsert

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/roles";
  GTLRDirectoryQuery_RolesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Role class];
  query.loggingName = @"directory.roles.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesList

@dynamic customer, maxResults, pageToken;

+ (instancetype)queryWithCustomer:(NSString *)customer {
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"customer/{customer}/roles";
  GTLRDirectoryQuery_RolesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customer = customer;
  query.expectedObjectClass = [GTLRDirectory_Roles class];
  query.loggingName = @"directory.roles.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesPatch

@dynamic customer, roleId;

+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer
                         roleId:(NSString *)roleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"roleId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roles/{roleId}";
  GTLRDirectoryQuery_RolesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.roleId = roleId;
  query.expectedObjectClass = [GTLRDirectory_Role class];
  query.loggingName = @"directory.roles.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_RolesUpdate

@dynamic customer, roleId;

+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer
                         roleId:(NSString *)roleId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customer", @"roleId"
  ];
  NSString *pathURITemplate = @"customer/{customer}/roles/{roleId}";
  GTLRDirectoryQuery_RolesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.roleId = roleId;
  query.expectedObjectClass = [GTLRDirectory_Role class];
  query.loggingName = @"directory.roles.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasDelete

@dynamic customerId, schemaKey;

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                          schemaKey:(NSString *)schemaKey {
  NSArray *pathParams = @[
    @"customerId", @"schemaKey"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas/{schemaKey}";
  GTLRDirectoryQuery_SchemasDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.schemaKey = schemaKey;
  query.loggingName = @"directory.schemas.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasGet

@dynamic customerId, schemaKey;

+ (instancetype)queryWithCustomerId:(NSString *)customerId
                          schemaKey:(NSString *)schemaKey {
  NSArray *pathParams = @[
    @"customerId", @"schemaKey"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas/{schemaKey}";
  GTLRDirectoryQuery_SchemasGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.schemaKey = schemaKey;
  query.expectedObjectClass = [GTLRDirectory_Schema class];
  query.loggingName = @"directory.schemas.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasInsert

@dynamic customerId;

+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas";
  GTLRDirectoryQuery_SchemasInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_Schema class];
  query.loggingName = @"directory.schemas.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasList

@dynamic customerId;

+ (instancetype)queryWithCustomerId:(NSString *)customerId {
  NSArray *pathParams = @[ @"customerId" ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas";
  GTLRDirectoryQuery_SchemasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.customerId = customerId;
  query.expectedObjectClass = [GTLRDirectory_Schemas class];
  query.loggingName = @"directory.schemas.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasPatch

@dynamic customerId, schemaKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId
                      schemaKey:(NSString *)schemaKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"schemaKey"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas/{schemaKey}";
  GTLRDirectoryQuery_SchemasPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.schemaKey = schemaKey;
  query.expectedObjectClass = [GTLRDirectory_Schema class];
  query.loggingName = @"directory.schemas.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_SchemasUpdate

@dynamic customerId, schemaKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId
                      schemaKey:(NSString *)schemaKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"customerId", @"schemaKey"
  ];
  NSString *pathURITemplate = @"customer/{customerId}/schemas/{schemaKey}";
  GTLRDirectoryQuery_SchemasUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customerId = customerId;
  query.schemaKey = schemaKey;
  query.expectedObjectClass = [GTLRDirectory_Schema class];
  query.loggingName = @"directory.schemas.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_TokensDelete

@dynamic clientId, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                        clientId:(NSString *)clientId {
  NSArray *pathParams = @[
    @"clientId", @"userKey"
  ];
  NSString *pathURITemplate = @"users/{userKey}/tokens/{clientId}";
  GTLRDirectoryQuery_TokensDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.clientId = clientId;
  query.loggingName = @"directory.tokens.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_TokensGet

@dynamic clientId, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                        clientId:(NSString *)clientId {
  NSArray *pathParams = @[
    @"clientId", @"userKey"
  ];
  NSString *pathURITemplate = @"users/{userKey}/tokens/{clientId}";
  GTLRDirectoryQuery_TokensGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.clientId = clientId;
  query.expectedObjectClass = [GTLRDirectory_Token class];
  query.loggingName = @"directory.tokens.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_TokensList

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/tokens";
  GTLRDirectoryQuery_TokensList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_Tokens class];
  query.loggingName = @"directory.tokens.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersAliasesDelete

@dynamic alias, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey
                           alias:(NSString *)alias {
  NSArray *pathParams = @[
    @"alias", @"userKey"
  ];
  NSString *pathURITemplate = @"users/{userKey}/aliases/{alias}";
  GTLRDirectoryQuery_UsersAliasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.alias = alias;
  query.loggingName = @"directory.users.aliases.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersAliasesInsert

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Alias *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/aliases";
  GTLRDirectoryQuery_UsersAliasesInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_Alias class];
  query.loggingName = @"directory.users.aliases.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersAliasesList

@dynamic event, userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/aliases";
  GTLRDirectoryQuery_UsersAliasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_Aliases class];
  query.loggingName = @"directory.users.aliases.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersAliasesWatch

@dynamic event, userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/aliases/watch";
  GTLRDirectoryQuery_UsersAliasesWatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_Channel class];
  query.loggingName = @"directory.users.aliases.watch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersDelete

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}";
  GTLRDirectoryQuery_UsersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.loggingName = @"directory.users.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersGet

@dynamic customFieldMask, projection, userKey, viewType;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}";
  GTLRDirectoryQuery_UsersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_User class];
  query.loggingName = @"directory.users.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersInsert

+ (instancetype)queryWithObject:(GTLRDirectory_User *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"users";
  GTLRDirectoryQuery_UsersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDirectory_User class];
  query.loggingName = @"directory.users.insert";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersList

@dynamic customer, customFieldMask, domain, event, maxResults, orderBy,
         pageToken, projection, query, showDeleted, sortOrder, viewType;

+ (instancetype)query {
  NSString *pathURITemplate = @"users";
  GTLRDirectoryQuery_UsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRDirectory_Users class];
  query.loggingName = @"directory.users.list";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersMakeAdmin

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_UserMakeAdmin *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/makeAdmin";
  GTLRDirectoryQuery_UsersMakeAdmin *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.loggingName = @"directory.users.makeAdmin";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersPatch

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_User *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}";
  GTLRDirectoryQuery_UsersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_User class];
  query.loggingName = @"directory.users.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersPhotosDelete

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/photos/thumbnail";
  GTLRDirectoryQuery_UsersPhotosDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.loggingName = @"directory.users.photos.delete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersPhotosGet

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/photos/thumbnail";
  GTLRDirectoryQuery_UsersPhotosGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_UserPhoto class];
  query.loggingName = @"directory.users.photos.get";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersPhotosPatch

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_UserPhoto *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/photos/thumbnail";
  GTLRDirectoryQuery_UsersPhotosPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_UserPhoto class];
  query.loggingName = @"directory.users.photos.patch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersPhotosUpdate

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_UserPhoto *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/photos/thumbnail";
  GTLRDirectoryQuery_UsersPhotosUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_UserPhoto class];
  query.loggingName = @"directory.users.photos.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersUndelete

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_UserUndelete *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/undelete";
  GTLRDirectoryQuery_UsersUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.loggingName = @"directory.users.undelete";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersUpdate

@dynamic userKey;

+ (instancetype)queryWithObject:(GTLRDirectory_User *)object
                        userKey:(NSString *)userKey {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}";
  GTLRDirectoryQuery_UsersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_User class];
  query.loggingName = @"directory.users.update";
  return query;
}

@end

@implementation GTLRDirectoryQuery_UsersWatch

@dynamic customer, customFieldMask, domain, event, maxResults, orderBy,
         pageToken, projection, query, showDeleted, sortOrder, viewType;

+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"users/watch";
  GTLRDirectoryQuery_UsersWatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDirectory_Channel class];
  query.loggingName = @"directory.users.watch";
  return query;
}

@end

@implementation GTLRDirectoryQuery_VerificationCodesGenerate

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/verificationCodes/generate";
  GTLRDirectoryQuery_VerificationCodesGenerate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.loggingName = @"directory.verificationCodes.generate";
  return query;
}

@end

@implementation GTLRDirectoryQuery_VerificationCodesInvalidate

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/verificationCodes/invalidate";
  GTLRDirectoryQuery_VerificationCodesInvalidate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.loggingName = @"directory.verificationCodes.invalidate";
  return query;
}

@end

@implementation GTLRDirectoryQuery_VerificationCodesList

@dynamic userKey;

+ (instancetype)queryWithUserKey:(NSString *)userKey {
  NSArray *pathParams = @[ @"userKey" ];
  NSString *pathURITemplate = @"users/{userKey}/verificationCodes";
  GTLRDirectoryQuery_VerificationCodesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.userKey = userKey;
  query.expectedObjectClass = [GTLRDirectory_VerificationCodes class];
  query.loggingName = @"directory.verificationCodes.list";
  return query;
}

@end
