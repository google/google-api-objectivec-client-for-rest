// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataflow API (dataflow/v1b3)
// Description:
//   Manages Google Cloud Dataflow projects on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataflow

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDataflow_CreateJobFromTemplateRequest;
@class GTLRDataflow_GetDebugConfigRequest;
@class GTLRDataflow_Job;
@class GTLRDataflow_LaunchTemplateParameters;
@class GTLRDataflow_LeaseWorkItemRequest;
@class GTLRDataflow_ReportWorkItemStatusRequest;
@class GTLRDataflow_SendDebugCaptureRequest;
@class GTLRDataflow_SendWorkerMessagesRequest;
@class GTLRDataflow_SnapshotJobRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// filter

/** Value: "ACTIVE" */
GTLR_EXTERN NSString * const kGTLRDataflowFilterActive;
/** Value: "ALL" */
GTLR_EXTERN NSString * const kGTLRDataflowFilterAll;
/** Value: "TERMINATED" */
GTLR_EXTERN NSString * const kGTLRDataflowFilterTerminated;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRDataflowFilterUnknown;

// ----------------------------------------------------------------------------
// minimumImportance

/** Value: "JOB_MESSAGE_BASIC" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageBasic;
/** Value: "JOB_MESSAGE_DEBUG" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageDebug;
/** Value: "JOB_MESSAGE_DETAILED" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageDetailed;
/** Value: "JOB_MESSAGE_ERROR" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageError;
/** Value: "JOB_MESSAGE_IMPORTANCE_UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageImportanceUnknown;
/** Value: "JOB_MESSAGE_WARNING" */
GTLR_EXTERN NSString * const kGTLRDataflowMinimumImportanceJobMessageWarning;

// ----------------------------------------------------------------------------
// view

/** Value: "JOB_VIEW_ALL" */
GTLR_EXTERN NSString * const kGTLRDataflowViewJobViewAll;
/** Value: "JOB_VIEW_DESCRIPTION" */
GTLR_EXTERN NSString * const kGTLRDataflowViewJobViewDescription;
/** Value: "JOB_VIEW_SUMMARY" */
GTLR_EXTERN NSString * const kGTLRDataflowViewJobViewSummary;
/** Value: "JOB_VIEW_UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRDataflowViewJobViewUnknown;
/** Value: "METADATA_ONLY" */
GTLR_EXTERN NSString * const kGTLRDataflowViewMetadataOnly;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Dataflow query classes.
 */
@interface GTLRDataflowQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  List the jobs of a project across all regions.
 *
 *  Method: dataflow.projects.jobs.aggregated
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsAggregated : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsAggregatedWithprojectId:]

/**
 *  The kind of filter to use.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowFilterUnknown Value "UNKNOWN"
 *    @arg @c kGTLRDataflowFilterAll Value "ALL"
 *    @arg @c kGTLRDataflowFilterTerminated Value "TERMINATED"
 *    @arg @c kGTLRDataflowFilterActive Value "ACTIVE"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  If there are many jobs, limit response to at most this many.
 *  The actual number of jobs returned will be the lesser of max_responses
 *  and an unspecified server-defined limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Set this to the 'next_page_token' field of a previous response
 *  to request additional results in a long list.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The project which owns the jobs. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Level of information requested in response. Default is `JOB_VIEW_SUMMARY`.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_ListJobsResponse.
 *
 *  List the jobs of a project across all regions.
 *
 *  @param projectId The project which owns the jobs.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsAggregated
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Creates a Cloud Dataflow job.
 *
 *  Method: dataflow.projects.jobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsCreate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsCreateWithObject:projectId:]

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Deprecated. This field is now in the Job message. */
@property(nonatomic, copy, nullable) NSString *replaceJobId;

/**
 *  The level of information requested in response.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Creates a Cloud Dataflow job.
 *
 *  @param object The @c GTLRDataflow_Job to include in the query.
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Get encoded debug configuration for component. Not cacheable.
 *
 *  Method: dataflow.projects.jobs.debug.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsDebugGetConfig : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsDebugGetConfigWithObject:projectId:jobId:]

/** The job id. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_GetDebugConfigResponse.
 *
 *  Get encoded debug configuration for component. Not cacheable.
 *
 *  @param object The @c GTLRDataflow_GetDebugConfigRequest to include in the
 *    query.
 *  @param projectId The project id.
 *  @param jobId The job id.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsDebugGetConfig
 */
+ (instancetype)queryWithObject:(GTLRDataflow_GetDebugConfigRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Send encoded debug capture data for component.
 *
 *  Method: dataflow.projects.jobs.debug.sendCapture
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsDebugSendCapture : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsDebugSendCaptureWithObject:projectId:jobId:]

/** The job id. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_SendDebugCaptureResponse.
 *
 *  Send encoded debug capture data for component.
 *
 *  @param object The @c GTLRDataflow_SendDebugCaptureRequest to include in the
 *    query.
 *  @param projectId The project id.
 *  @param jobId The job id.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsDebugSendCapture
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SendDebugCaptureRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Gets the state of the specified Cloud Dataflow job.
 *
 *  Method: dataflow.projects.jobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsGet : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsGetWithprojectId:jobId:]

/** The job ID. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The level of information requested in response.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Gets the state of the specified Cloud Dataflow job.
 *
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *  @param jobId The job ID.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId;

@end

/**
 *  Request the job status.
 *
 *  Method: dataflow.projects.jobs.getMetrics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsGetMetrics : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsGetMetricsWithprojectId:jobId:]

/** The job to get messages for. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/** A project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Return only metric data that has changed since this time.
 *  Default is to return all information about all metrics for the job.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Fetches a @c GTLRDataflow_JobMetrics.
 *
 *  Request the job status.
 *
 *  @param projectId A project id.
 *  @param jobId The job to get messages for.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsGetMetrics
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId;

@end

/**
 *  List the jobs of a project in a given region.
 *
 *  Method: dataflow.projects.jobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsList : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsListWithprojectId:]

/**
 *  The kind of filter to use.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowFilterUnknown Value "UNKNOWN"
 *    @arg @c kGTLRDataflowFilterAll Value "ALL"
 *    @arg @c kGTLRDataflowFilterTerminated Value "TERMINATED"
 *    @arg @c kGTLRDataflowFilterActive Value "ACTIVE"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  If there are many jobs, limit response to at most this many.
 *  The actual number of jobs returned will be the lesser of max_responses
 *  and an unspecified server-defined limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Set this to the 'next_page_token' field of a previous response
 *  to request additional results in a long list.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The project which owns the jobs. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Level of information requested in response. Default is `JOB_VIEW_SUMMARY`.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_ListJobsResponse.
 *
 *  List the jobs of a project in a given region.
 *
 *  @param projectId The project which owns the jobs.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsList
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Request the job status.
 *
 *  Method: dataflow.projects.jobs.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsMessagesList : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsMessagesListWithprojectId:jobId:]

/**
 *  Return only messages with timestamps < end_time. The default is now
 *  (i.e. return up to the latest messages available).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The job to get messages about. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Filter to only get messages with importance >= level
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageImportanceUnknown Value
 *        "JOB_MESSAGE_IMPORTANCE_UNKNOWN"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageDebug Value
 *        "JOB_MESSAGE_DEBUG"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageDetailed Value
 *        "JOB_MESSAGE_DETAILED"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageBasic Value
 *        "JOB_MESSAGE_BASIC"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageWarning Value
 *        "JOB_MESSAGE_WARNING"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageError Value
 *        "JOB_MESSAGE_ERROR"
 */
@property(nonatomic, copy, nullable) NSString *minimumImportance;

/**
 *  If specified, determines the maximum number of messages to
 *  return. If unspecified, the service may choose an appropriate
 *  default, or may return an arbitrarily large number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If supplied, this should be the value of next_page_token returned
 *  by an earlier call. This will cause the next page of results to
 *  be returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** A project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  If specified, return only messages with timestamps >= start_time.
 *  The default is the job creation time (i.e. beginning of messages).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Fetches a @c GTLRDataflow_ListJobMessagesResponse.
 *
 *  Request the job status.
 *
 *  @param projectId A project id.
 *  @param jobId The job to get messages about.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsMessagesList
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId;

@end

/**
 *  Snapshot the state of a streaming job.
 *
 *  Method: dataflow.projects.jobs.snapshot
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsSnapshot : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsSnapshotWithObject:projectId:jobId:]

/** The job to be snapshotted. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The project which owns the job to be snapshotted. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Snapshot.
 *
 *  Snapshot the state of a streaming job.
 *
 *  @param object The @c GTLRDataflow_SnapshotJobRequest to include in the
 *    query.
 *  @param projectId The project which owns the job to be snapshotted.
 *  @param jobId The job to be snapshotted.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsSnapshot
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SnapshotJobRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Updates the state of an existing Cloud Dataflow job.
 *
 *  Method: dataflow.projects.jobs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsUpdate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsUpdateWithObject:projectId:jobId:]

/** The job ID. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Updates the state of an existing Cloud Dataflow job.
 *
 *  @param object The @c GTLRDataflow_Job to include in the query.
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *  @param jobId The job ID.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Leases a dataflow WorkItem to run.
 *
 *  Method: dataflow.projects.jobs.workItems.lease
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsWorkItemsLease : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsWorkItemsLeaseWithObject:projectId:jobId:]

/** Identifies the workflow job this worker belongs to. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Identifies the project this worker belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_LeaseWorkItemResponse.
 *
 *  Leases a dataflow WorkItem to run.
 *
 *  @param object The @c GTLRDataflow_LeaseWorkItemRequest to include in the
 *    query.
 *  @param projectId Identifies the project this worker belongs to.
 *  @param jobId Identifies the workflow job this worker belongs to.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsWorkItemsLease
 */
+ (instancetype)queryWithObject:(GTLRDataflow_LeaseWorkItemRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Reports the status of dataflow WorkItems leased by a worker.
 *
 *  Method: dataflow.projects.jobs.workItems.reportStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsJobsWorkItemsReportStatusWithObject:projectId:jobId:]

/** The job which the WorkItem is part of. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The project which owns the WorkItem's job. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_ReportWorkItemStatusResponse.
 *
 *  Reports the status of dataflow WorkItems leased by a worker.
 *
 *  @param object The @c GTLRDataflow_ReportWorkItemStatusRequest to include in
 *    the query.
 *  @param projectId The project which owns the WorkItem's job.
 *  @param jobId The job which the WorkItem is part of.
 *
 *  @return GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus
 */
+ (instancetype)queryWithObject:(GTLRDataflow_ReportWorkItemStatusRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId;

@end

/**
 *  Creates a Cloud Dataflow job.
 *
 *  Method: dataflow.projects.locations.jobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsCreate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsCreateWithObject:projectId:location:]

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Deprecated. This field is now in the Job message. */
@property(nonatomic, copy, nullable) NSString *replaceJobId;

/**
 *  The level of information requested in response.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Creates a Cloud Dataflow job.
 *
 *  @param object The @c GTLRDataflow_Job to include in the query.
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *  @param location The location that contains this job.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location;

@end

/**
 *  Get encoded debug configuration for component. Not cacheable.
 *
 *  Method: dataflow.projects.locations.jobs.debug.getConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsDebugGetConfig : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsDebugGetConfigWithObject:projectId:location:jobId:]

/** The job id. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/** The project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_GetDebugConfigResponse.
 *
 *  Get encoded debug configuration for component. Not cacheable.
 *
 *  @param object The @c GTLRDataflow_GetDebugConfigRequest to include in the
 *    query.
 *  @param projectId The project id.
 *  @param location The location which contains the job specified by job_id.
 *  @param jobId The job id.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsDebugGetConfig
 */
+ (instancetype)queryWithObject:(GTLRDataflow_GetDebugConfigRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Send encoded debug capture data for component.
 *
 *  Method: dataflow.projects.locations.jobs.debug.sendCapture
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsDebugSendCapture : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsDebugSendCaptureWithObject:projectId:location:jobId:]

/** The job id. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/** The project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_SendDebugCaptureResponse.
 *
 *  Send encoded debug capture data for component.
 *
 *  @param object The @c GTLRDataflow_SendDebugCaptureRequest to include in the
 *    query.
 *  @param projectId The project id.
 *  @param location The location which contains the job specified by job_id.
 *  @param jobId The job id.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsDebugSendCapture
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SendDebugCaptureRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Gets the state of the specified Cloud Dataflow job.
 *
 *  Method: dataflow.projects.locations.jobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsGet : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsGetWithprojectId:location:jobId:]

/** The job ID. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The level of information requested in response.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Gets the state of the specified Cloud Dataflow job.
 *
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *  @param location The location that contains this job.
 *  @param jobId The job ID.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId;

@end

/**
 *  Request the job status.
 *
 *  Method: dataflow.projects.locations.jobs.getMetrics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsGetMetrics : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsGetMetricsWithprojectId:location:jobId:]

/** The job to get messages for. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/** A project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Return only metric data that has changed since this time.
 *  Default is to return all information about all metrics for the job.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Fetches a @c GTLRDataflow_JobMetrics.
 *
 *  Request the job status.
 *
 *  @param projectId A project id.
 *  @param location The location which contains the job specified by job_id.
 *  @param jobId The job to get messages for.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsGetMetrics
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId;

@end

/**
 *  List the jobs of a project in a given region.
 *
 *  Method: dataflow.projects.locations.jobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsList : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsListWithprojectId:location:]

/**
 *  The kind of filter to use.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowFilterUnknown Value "UNKNOWN"
 *    @arg @c kGTLRDataflowFilterAll Value "ALL"
 *    @arg @c kGTLRDataflowFilterTerminated Value "TERMINATED"
 *    @arg @c kGTLRDataflowFilterActive Value "ACTIVE"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  If there are many jobs, limit response to at most this many.
 *  The actual number of jobs returned will be the lesser of max_responses
 *  and an unspecified server-defined limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Set this to the 'next_page_token' field of a previous response
 *  to request additional results in a long list.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The project which owns the jobs. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Level of information requested in response. Default is `JOB_VIEW_SUMMARY`.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewJobViewUnknown Value "JOB_VIEW_UNKNOWN"
 *    @arg @c kGTLRDataflowViewJobViewSummary Value "JOB_VIEW_SUMMARY"
 *    @arg @c kGTLRDataflowViewJobViewAll Value "JOB_VIEW_ALL"
 *    @arg @c kGTLRDataflowViewJobViewDescription Value "JOB_VIEW_DESCRIPTION"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_ListJobsResponse.
 *
 *  List the jobs of a project in a given region.
 *
 *  @param projectId The project which owns the jobs.
 *  @param location The location that contains this job.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsList
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location;

@end

/**
 *  Request the job status.
 *
 *  Method: dataflow.projects.locations.jobs.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsMessagesList : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsMessagesListWithprojectId:location:jobId:]

/**
 *  Return only messages with timestamps < end_time. The default is now
 *  (i.e. return up to the latest messages available).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** The job to get messages about. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the job specified by job_id. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Filter to only get messages with importance >= level
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageImportanceUnknown Value
 *        "JOB_MESSAGE_IMPORTANCE_UNKNOWN"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageDebug Value
 *        "JOB_MESSAGE_DEBUG"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageDetailed Value
 *        "JOB_MESSAGE_DETAILED"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageBasic Value
 *        "JOB_MESSAGE_BASIC"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageWarning Value
 *        "JOB_MESSAGE_WARNING"
 *    @arg @c kGTLRDataflowMinimumImportanceJobMessageError Value
 *        "JOB_MESSAGE_ERROR"
 */
@property(nonatomic, copy, nullable) NSString *minimumImportance;

/**
 *  If specified, determines the maximum number of messages to
 *  return. If unspecified, the service may choose an appropriate
 *  default, or may return an arbitrarily large number of results.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If supplied, this should be the value of next_page_token returned
 *  by an earlier call. This will cause the next page of results to
 *  be returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** A project id. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  If specified, return only messages with timestamps >= start_time.
 *  The default is the job creation time (i.e. beginning of messages).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Fetches a @c GTLRDataflow_ListJobMessagesResponse.
 *
 *  Request the job status.
 *
 *  @param projectId A project id.
 *  @param location The location which contains the job specified by job_id.
 *  @param jobId The job to get messages about.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsMessagesList
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId;

@end

/**
 *  Snapshot the state of a streaming job.
 *
 *  Method: dataflow.projects.locations.jobs.snapshot
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsSnapshot : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsSnapshotWithObject:projectId:location:jobId:]

/** The job to be snapshotted. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The project which owns the job to be snapshotted. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Snapshot.
 *
 *  Snapshot the state of a streaming job.
 *
 *  @param object The @c GTLRDataflow_SnapshotJobRequest to include in the
 *    query.
 *  @param projectId The project which owns the job to be snapshotted.
 *  @param location The location that contains this job.
 *  @param jobId The job to be snapshotted.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsSnapshot
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SnapshotJobRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Updates the state of an existing Cloud Dataflow job.
 *
 *  Method: dataflow.projects.locations.jobs.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsUpdate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsUpdateWithObject:projectId:location:jobId:]

/** The job ID. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location that contains this job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Updates the state of an existing Cloud Dataflow job.
 *
 *  @param object The @c GTLRDataflow_Job to include in the query.
 *  @param projectId The ID of the Cloud Platform project that the job belongs
 *    to.
 *  @param location The location that contains this job.
 *  @param jobId The job ID.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Leases a dataflow WorkItem to run.
 *
 *  Method: dataflow.projects.locations.jobs.workItems.lease
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsLease : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsWorkItemsLeaseWithObject:projectId:location:jobId:]

/** Identifies the workflow job this worker belongs to. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the WorkItem's job. */
@property(nonatomic, copy, nullable) NSString *location;

/** Identifies the project this worker belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_LeaseWorkItemResponse.
 *
 *  Leases a dataflow WorkItem to run.
 *
 *  @param object The @c GTLRDataflow_LeaseWorkItemRequest to include in the
 *    query.
 *  @param projectId Identifies the project this worker belongs to.
 *  @param location The location which contains the WorkItem's job.
 *  @param jobId Identifies the workflow job this worker belongs to.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsLease
 */
+ (instancetype)queryWithObject:(GTLRDataflow_LeaseWorkItemRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Reports the status of dataflow WorkItems leased by a worker.
 *
 *  Method: dataflow.projects.locations.jobs.workItems.reportStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsReportStatus : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsJobsWorkItemsReportStatusWithObject:projectId:location:jobId:]

/** The job which the WorkItem is part of. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** The location which contains the WorkItem's job. */
@property(nonatomic, copy, nullable) NSString *location;

/** The project which owns the WorkItem's job. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_ReportWorkItemStatusResponse.
 *
 *  Reports the status of dataflow WorkItems leased by a worker.
 *
 *  @param object The @c GTLRDataflow_ReportWorkItemStatusRequest to include in
 *    the query.
 *  @param projectId The project which owns the WorkItem's job.
 *  @param location The location which contains the WorkItem's job.
 *  @param jobId The job which the WorkItem is part of.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsReportStatus
 */
+ (instancetype)queryWithObject:(GTLRDataflow_ReportWorkItemStatusRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId;

@end

/**
 *  Creates a Cloud Dataflow job from a template.
 *
 *  Method: dataflow.projects.locations.templates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsTemplatesCreate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsTemplatesCreateWithObject:projectId:location:]

/** The location to which to direct the request. */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Creates a Cloud Dataflow job from a template.
 *
 *  @param object The @c GTLRDataflow_CreateJobFromTemplateRequest to include in
 *    the query.
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *  @param location The location to which to direct the request.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_CreateJobFromTemplateRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location;

@end

/**
 *  Get the template associated with a template.
 *
 *  Method: dataflow.projects.locations.templates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsTemplatesGet : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsTemplatesGetWithprojectId:location:]

/**
 *  Required. A Cloud Storage path to the template from which to
 *  create the job.
 *  Must be valid Cloud Storage URL, beginning with 'gs://'.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

/** The location to which to direct the request. */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The view to retrieve. Defaults to METADATA_ONLY.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewMetadataOnly Value "METADATA_ONLY"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_GetTemplateResponse.
 *
 *  Get the template associated with a template.
 *
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *  @param location The location to which to direct the request.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsTemplatesGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location;

@end

/**
 *  Launch a template.
 *
 *  Method: dataflow.projects.locations.templates.launch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsTemplatesLaunch : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsTemplatesLaunchWithObject:projectId:location:]

/**
 *  Path to dynamic template spec file on GCS.
 *  The file must be a Json serialized DynamicTemplateFieSpec object.
 */
@property(nonatomic, copy, nullable) NSString *dynamicTemplateGcsPath;

/**
 *  Cloud Storage path for staging dependencies.
 *  Must be a valid Cloud Storage URL, beginning with `gs://`.
 */
@property(nonatomic, copy, nullable) NSString *dynamicTemplateStagingLocation;

/**
 *  A Cloud Storage path to the template from which to create
 *  the job.
 *  Must be valid Cloud Storage URL, beginning with 'gs://'.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

/** The location to which to direct the request. */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  If true, the request is validated but not actually executed.
 *  Defaults to false.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRDataflow_LaunchTemplateResponse.
 *
 *  Launch a template.
 *
 *  @param object The @c GTLRDataflow_LaunchTemplateParameters to include in the
 *    query.
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *  @param location The location to which to direct the request.
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsTemplatesLaunch
 */
+ (instancetype)queryWithObject:(GTLRDataflow_LaunchTemplateParameters *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location;

@end

/**
 *  Send a worker_message to the service.
 *
 *  Method: dataflow.projects.locations.workerMessages
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsLocationsWorkerMessages : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsLocationsWorkerMessagesWithObject:projectId:location:]

/** The location which contains the job */
@property(nonatomic, copy, nullable) NSString *location;

/** The project to send the WorkerMessages to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_SendWorkerMessagesResponse.
 *
 *  Send a worker_message to the service.
 *
 *  @param object The @c GTLRDataflow_SendWorkerMessagesRequest to include in
 *    the query.
 *  @param projectId The project to send the WorkerMessages to.
 *  @param location The location which contains the job
 *
 *  @return GTLRDataflowQuery_ProjectsLocationsWorkerMessages
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SendWorkerMessagesRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location;

@end

/**
 *  Creates a Cloud Dataflow job from a template.
 *
 *  Method: dataflow.projects.templates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsTemplatesCreate : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsTemplatesCreateWithObject:projectId:]

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_Job.
 *
 *  Creates a Cloud Dataflow job from a template.
 *
 *  @param object The @c GTLRDataflow_CreateJobFromTemplateRequest to include in
 *    the query.
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *
 *  @return GTLRDataflowQuery_ProjectsTemplatesCreate
 */
+ (instancetype)queryWithObject:(GTLRDataflow_CreateJobFromTemplateRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Get the template associated with a template.
 *
 *  Method: dataflow.projects.templates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsTemplatesGet : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsTemplatesGetWithprojectId:]

/**
 *  Required. A Cloud Storage path to the template from which to
 *  create the job.
 *  Must be valid Cloud Storage URL, beginning with 'gs://'.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

/** The location to which to direct the request. */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The view to retrieve. Defaults to METADATA_ONLY.
 *
 *  Likely values:
 *    @arg @c kGTLRDataflowViewMetadataOnly Value "METADATA_ONLY"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDataflow_GetTemplateResponse.
 *
 *  Get the template associated with a template.
 *
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *
 *  @return GTLRDataflowQuery_ProjectsTemplatesGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Launch a template.
 *
 *  Method: dataflow.projects.templates.launch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsTemplatesLaunch : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsTemplatesLaunchWithObject:projectId:]

/**
 *  Path to dynamic template spec file on GCS.
 *  The file must be a Json serialized DynamicTemplateFieSpec object.
 */
@property(nonatomic, copy, nullable) NSString *dynamicTemplateGcsPath;

/**
 *  Cloud Storage path for staging dependencies.
 *  Must be a valid Cloud Storage URL, beginning with `gs://`.
 */
@property(nonatomic, copy, nullable) NSString *dynamicTemplateStagingLocation;

/**
 *  A Cloud Storage path to the template from which to create
 *  the job.
 *  Must be valid Cloud Storage URL, beginning with 'gs://'.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

/** The location to which to direct the request. */
@property(nonatomic, copy, nullable) NSString *location;

/** Required. The ID of the Cloud Platform project that the job belongs to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  If true, the request is validated but not actually executed.
 *  Defaults to false.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRDataflow_LaunchTemplateResponse.
 *
 *  Launch a template.
 *
 *  @param object The @c GTLRDataflow_LaunchTemplateParameters to include in the
 *    query.
 *  @param projectId Required. The ID of the Cloud Platform project that the job
 *    belongs to.
 *
 *  @return GTLRDataflowQuery_ProjectsTemplatesLaunch
 */
+ (instancetype)queryWithObject:(GTLRDataflow_LaunchTemplateParameters *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Send a worker_message to the service.
 *
 *  Method: dataflow.projects.workerMessages
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDataflowCloudPlatform
 *    @c kGTLRAuthScopeDataflowCompute
 *    @c kGTLRAuthScopeDataflowComputeReadonly
 *    @c kGTLRAuthScopeDataflowUserinfoEmail
 */
@interface GTLRDataflowQuery_ProjectsWorkerMessages : GTLRDataflowQuery
// Previous library name was
//   +[GTLQueryDataflow queryForProjectsWorkerMessagesWithObject:projectId:]

/** The project to send the WorkerMessages to. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDataflow_SendWorkerMessagesResponse.
 *
 *  Send a worker_message to the service.
 *
 *  @param object The @c GTLRDataflow_SendWorkerMessagesRequest to include in
 *    the query.
 *  @param projectId The project to send the WorkerMessages to.
 *
 *  @return GTLRDataflowQuery_ProjectsWorkerMessages
 */
+ (instancetype)queryWithObject:(GTLRDataflow_SendWorkerMessagesRequest *)object
                      projectId:(NSString *)projectId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
