// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataflow API (dataflow/v1b3)
// Description:
//   Manages Google Cloud Dataflow projects on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataflow

#import "GTLRDataflowObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRDataflow_AutoscalingEvent.eventType
NSString * const kGTLRDataflow_AutoscalingEvent_EventType_ActuationFailure = @"ACTUATION_FAILURE";
NSString * const kGTLRDataflow_AutoscalingEvent_EventType_CurrentNumWorkersChanged = @"CURRENT_NUM_WORKERS_CHANGED";
NSString * const kGTLRDataflow_AutoscalingEvent_EventType_NoChange = @"NO_CHANGE";
NSString * const kGTLRDataflow_AutoscalingEvent_EventType_TargetNumWorkersChanged = @"TARGET_NUM_WORKERS_CHANGED";
NSString * const kGTLRDataflow_AutoscalingEvent_EventType_TypeUnknown = @"TYPE_UNKNOWN";

// GTLRDataflow_AutoscalingSettings.algorithm
NSString * const kGTLRDataflow_AutoscalingSettings_Algorithm_AutoscalingAlgorithmBasic = @"AUTOSCALING_ALGORITHM_BASIC";
NSString * const kGTLRDataflow_AutoscalingSettings_Algorithm_AutoscalingAlgorithmNone = @"AUTOSCALING_ALGORITHM_NONE";
NSString * const kGTLRDataflow_AutoscalingSettings_Algorithm_AutoscalingAlgorithmUnknown = @"AUTOSCALING_ALGORITHM_UNKNOWN";

// GTLRDataflow_CounterMetadata.kind
NSString * const kGTLRDataflow_CounterMetadata_Kind_And        = @"AND";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Distribution = @"DISTRIBUTION";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Invalid    = @"INVALID";
NSString * const kGTLRDataflow_CounterMetadata_Kind_LatestValue = @"LATEST_VALUE";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Max        = @"MAX";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Mean       = @"MEAN";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Min        = @"MIN";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Or         = @"OR";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Set        = @"SET";
NSString * const kGTLRDataflow_CounterMetadata_Kind_Sum        = @"SUM";

// GTLRDataflow_CounterMetadata.standardUnits
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_Bytes = @"BYTES";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_BytesPerSec = @"BYTES_PER_SEC";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_Microseconds = @"MICROSECONDS";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_Milliseconds = @"MILLISECONDS";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_Nanoseconds = @"NANOSECONDS";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_TimestampMsec = @"TIMESTAMP_MSEC";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_TimestampNsec = @"TIMESTAMP_NSEC";
NSString * const kGTLRDataflow_CounterMetadata_StandardUnits_TimestampUsec = @"TIMESTAMP_USEC";

// GTLRDataflow_CounterStructuredName.origin
NSString * const kGTLRDataflow_CounterStructuredName_Origin_System = @"SYSTEM";
NSString * const kGTLRDataflow_CounterStructuredName_Origin_User = @"USER";

// GTLRDataflow_CounterStructuredName.portion
NSString * const kGTLRDataflow_CounterStructuredName_Portion_All = @"ALL";
NSString * const kGTLRDataflow_CounterStructuredName_Portion_Key = @"KEY";
NSString * const kGTLRDataflow_CounterStructuredName_Portion_Value = @"VALUE";

// GTLRDataflow_DerivedSource.derivationMode
NSString * const kGTLRDataflow_DerivedSource_DerivationMode_SourceDerivationModeChildOfCurrent = @"SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT";
NSString * const kGTLRDataflow_DerivedSource_DerivationMode_SourceDerivationModeIndependent = @"SOURCE_DERIVATION_MODE_INDEPENDENT";
NSString * const kGTLRDataflow_DerivedSource_DerivationMode_SourceDerivationModeSiblingOfCurrent = @"SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT";
NSString * const kGTLRDataflow_DerivedSource_DerivationMode_SourceDerivationModeUnknown = @"SOURCE_DERIVATION_MODE_UNKNOWN";

// GTLRDataflow_ExecutionStageState.executionStageState
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateCancelled = @"JOB_STATE_CANCELLED";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateCancelling = @"JOB_STATE_CANCELLING";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateDone = @"JOB_STATE_DONE";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateDrained = @"JOB_STATE_DRAINED";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateDraining = @"JOB_STATE_DRAINING";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateFailed = @"JOB_STATE_FAILED";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStatePending = @"JOB_STATE_PENDING";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateQueued = @"JOB_STATE_QUEUED";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateRunning = @"JOB_STATE_RUNNING";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateStopped = @"JOB_STATE_STOPPED";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateUnknown = @"JOB_STATE_UNKNOWN";
NSString * const kGTLRDataflow_ExecutionStageState_ExecutionStageState_JobStateUpdated = @"JOB_STATE_UPDATED";

// GTLRDataflow_ExecutionStageSummary.kind
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_ConstantKind = @"CONSTANT_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_FlattenKind = @"FLATTEN_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_GroupByKeyKind = @"GROUP_BY_KEY_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_ParDoKind = @"PAR_DO_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_ReadKind = @"READ_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_ShuffleKind = @"SHUFFLE_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_SingletonKind = @"SINGLETON_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_UnknownKind = @"UNKNOWN_KIND";
NSString * const kGTLRDataflow_ExecutionStageSummary_Kind_WriteKind = @"WRITE_KIND";

// GTLRDataflow_Job.currentState
NSString * const kGTLRDataflow_Job_CurrentState_JobStateCancelled = @"JOB_STATE_CANCELLED";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateCancelling = @"JOB_STATE_CANCELLING";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateDone   = @"JOB_STATE_DONE";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateDrained = @"JOB_STATE_DRAINED";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateDraining = @"JOB_STATE_DRAINING";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateFailed = @"JOB_STATE_FAILED";
NSString * const kGTLRDataflow_Job_CurrentState_JobStatePending = @"JOB_STATE_PENDING";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateQueued = @"JOB_STATE_QUEUED";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateRunning = @"JOB_STATE_RUNNING";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateStopped = @"JOB_STATE_STOPPED";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateUnknown = @"JOB_STATE_UNKNOWN";
NSString * const kGTLRDataflow_Job_CurrentState_JobStateUpdated = @"JOB_STATE_UPDATED";

// GTLRDataflow_Job.requestedState
NSString * const kGTLRDataflow_Job_RequestedState_JobStateCancelled = @"JOB_STATE_CANCELLED";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateCancelling = @"JOB_STATE_CANCELLING";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateDone = @"JOB_STATE_DONE";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateDrained = @"JOB_STATE_DRAINED";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateDraining = @"JOB_STATE_DRAINING";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateFailed = @"JOB_STATE_FAILED";
NSString * const kGTLRDataflow_Job_RequestedState_JobStatePending = @"JOB_STATE_PENDING";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateQueued = @"JOB_STATE_QUEUED";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateRunning = @"JOB_STATE_RUNNING";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateStopped = @"JOB_STATE_STOPPED";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateUnknown = @"JOB_STATE_UNKNOWN";
NSString * const kGTLRDataflow_Job_RequestedState_JobStateUpdated = @"JOB_STATE_UPDATED";

// GTLRDataflow_Job.type
NSString * const kGTLRDataflow_Job_Type_JobTypeBatch     = @"JOB_TYPE_BATCH";
NSString * const kGTLRDataflow_Job_Type_JobTypeStreaming = @"JOB_TYPE_STREAMING";
NSString * const kGTLRDataflow_Job_Type_JobTypeUnknown   = @"JOB_TYPE_UNKNOWN";

// GTLRDataflow_JobMessage.messageImportance
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageBasic = @"JOB_MESSAGE_BASIC";
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageDebug = @"JOB_MESSAGE_DEBUG";
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageDetailed = @"JOB_MESSAGE_DETAILED";
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageError = @"JOB_MESSAGE_ERROR";
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageImportanceUnknown = @"JOB_MESSAGE_IMPORTANCE_UNKNOWN";
NSString * const kGTLRDataflow_JobMessage_MessageImportance_JobMessageWarning = @"JOB_MESSAGE_WARNING";

// GTLRDataflow_NameAndKind.kind
NSString * const kGTLRDataflow_NameAndKind_Kind_And          = @"AND";
NSString * const kGTLRDataflow_NameAndKind_Kind_Distribution = @"DISTRIBUTION";
NSString * const kGTLRDataflow_NameAndKind_Kind_Invalid      = @"INVALID";
NSString * const kGTLRDataflow_NameAndKind_Kind_LatestValue  = @"LATEST_VALUE";
NSString * const kGTLRDataflow_NameAndKind_Kind_Max          = @"MAX";
NSString * const kGTLRDataflow_NameAndKind_Kind_Mean         = @"MEAN";
NSString * const kGTLRDataflow_NameAndKind_Kind_Min          = @"MIN";
NSString * const kGTLRDataflow_NameAndKind_Kind_Or           = @"OR";
NSString * const kGTLRDataflow_NameAndKind_Kind_Set          = @"SET";
NSString * const kGTLRDataflow_NameAndKind_Kind_Sum          = @"SUM";

// GTLRDataflow_SdkVersion.sdkSupportStatus
NSString * const kGTLRDataflow_SdkVersion_SdkSupportStatus_Deprecated = @"DEPRECATED";
NSString * const kGTLRDataflow_SdkVersion_SdkSupportStatus_Stale = @"STALE";
NSString * const kGTLRDataflow_SdkVersion_SdkSupportStatus_Supported = @"SUPPORTED";
NSString * const kGTLRDataflow_SdkVersion_SdkSupportStatus_Unknown = @"UNKNOWN";
NSString * const kGTLRDataflow_SdkVersion_SdkSupportStatus_Unsupported = @"UNSUPPORTED";

// GTLRDataflow_SourceSplitResponse.outcome
NSString * const kGTLRDataflow_SourceSplitResponse_Outcome_SourceSplitOutcomeSplittingHappened = @"SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED";
NSString * const kGTLRDataflow_SourceSplitResponse_Outcome_SourceSplitOutcomeUnknown = @"SOURCE_SPLIT_OUTCOME_UNKNOWN";
NSString * const kGTLRDataflow_SourceSplitResponse_Outcome_SourceSplitOutcomeUseCurrent = @"SOURCE_SPLIT_OUTCOME_USE_CURRENT";

// GTLRDataflow_SourceSplitShard.derivationMode
NSString * const kGTLRDataflow_SourceSplitShard_DerivationMode_SourceDerivationModeChildOfCurrent = @"SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT";
NSString * const kGTLRDataflow_SourceSplitShard_DerivationMode_SourceDerivationModeIndependent = @"SOURCE_DERIVATION_MODE_INDEPENDENT";
NSString * const kGTLRDataflow_SourceSplitShard_DerivationMode_SourceDerivationModeSiblingOfCurrent = @"SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT";
NSString * const kGTLRDataflow_SourceSplitShard_DerivationMode_SourceDerivationModeUnknown = @"SOURCE_DERIVATION_MODE_UNKNOWN";

// GTLRDataflow_StreamingComputationTask.taskType
NSString * const kGTLRDataflow_StreamingComputationTask_TaskType_StreamingComputationTaskStart = @"STREAMING_COMPUTATION_TASK_START";
NSString * const kGTLRDataflow_StreamingComputationTask_TaskType_StreamingComputationTaskStop = @"STREAMING_COMPUTATION_TASK_STOP";
NSString * const kGTLRDataflow_StreamingComputationTask_TaskType_StreamingComputationTaskUnknown = @"STREAMING_COMPUTATION_TASK_UNKNOWN";

// GTLRDataflow_TransformSummary.kind
NSString * const kGTLRDataflow_TransformSummary_Kind_ConstantKind = @"CONSTANT_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_FlattenKind = @"FLATTEN_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_GroupByKeyKind = @"GROUP_BY_KEY_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_ParDoKind = @"PAR_DO_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_ReadKind  = @"READ_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_ShuffleKind = @"SHUFFLE_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_SingletonKind = @"SINGLETON_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_UnknownKind = @"UNKNOWN_KIND";
NSString * const kGTLRDataflow_TransformSummary_Kind_WriteKind = @"WRITE_KIND";

// GTLRDataflow_WorkerLifecycleEvent.event
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_ContainerStart = @"CONTAINER_START";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_NetworkUp = @"NETWORK_UP";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_OsStart = @"OS_START";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_SdkInstallFinish = @"SDK_INSTALL_FINISH";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_SdkInstallStart = @"SDK_INSTALL_START";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_StagingFilesDownloadFinish = @"STAGING_FILES_DOWNLOAD_FINISH";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_StagingFilesDownloadStart = @"STAGING_FILES_DOWNLOAD_START";
NSString * const kGTLRDataflow_WorkerLifecycleEvent_Event_UnknownEvent = @"UNKNOWN_EVENT";

// GTLRDataflow_WorkerPool.defaultPackageSet
NSString * const kGTLRDataflow_WorkerPool_DefaultPackageSet_DefaultPackageSetJava = @"DEFAULT_PACKAGE_SET_JAVA";
NSString * const kGTLRDataflow_WorkerPool_DefaultPackageSet_DefaultPackageSetNone = @"DEFAULT_PACKAGE_SET_NONE";
NSString * const kGTLRDataflow_WorkerPool_DefaultPackageSet_DefaultPackageSetPython = @"DEFAULT_PACKAGE_SET_PYTHON";
NSString * const kGTLRDataflow_WorkerPool_DefaultPackageSet_DefaultPackageSetUnknown = @"DEFAULT_PACKAGE_SET_UNKNOWN";

// GTLRDataflow_WorkerPool.ipConfiguration
NSString * const kGTLRDataflow_WorkerPool_IpConfiguration_WorkerIpPrivate = @"WORKER_IP_PRIVATE";
NSString * const kGTLRDataflow_WorkerPool_IpConfiguration_WorkerIpPublic = @"WORKER_IP_PUBLIC";
NSString * const kGTLRDataflow_WorkerPool_IpConfiguration_WorkerIpUnspecified = @"WORKER_IP_UNSPECIFIED";

// GTLRDataflow_WorkerPool.teardownPolicy
NSString * const kGTLRDataflow_WorkerPool_TeardownPolicy_TeardownAlways = @"TEARDOWN_ALWAYS";
NSString * const kGTLRDataflow_WorkerPool_TeardownPolicy_TeardownNever = @"TEARDOWN_NEVER";
NSString * const kGTLRDataflow_WorkerPool_TeardownPolicy_TeardownOnSuccess = @"TEARDOWN_ON_SUCCESS";
NSString * const kGTLRDataflow_WorkerPool_TeardownPolicy_TeardownPolicyUnknown = @"TEARDOWN_POLICY_UNKNOWN";

// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ApproximateProgress
//

@implementation GTLRDataflow_ApproximateProgress
@dynamic percentComplete, position, remainingTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ApproximateReportedProgress
//

@implementation GTLRDataflow_ApproximateReportedProgress
@dynamic consumedParallelism, fractionConsumed, position, remainingParallelism;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ApproximateSplitRequest
//

@implementation GTLRDataflow_ApproximateSplitRequest
@dynamic fractionConsumed, fractionOfRemainder, position;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_AutoscalingEvent
//

@implementation GTLRDataflow_AutoscalingEvent
@dynamic currentNumWorkers, descriptionProperty, eventType, targetNumWorkers,
         time, workerPool;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_AutoscalingSettings
//

@implementation GTLRDataflow_AutoscalingSettings
@dynamic algorithm, maxNumWorkers;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_BigQueryIODetails
//

@implementation GTLRDataflow_BigQueryIODetails
@dynamic dataset, projectId, query, table;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_BigTableIODetails
//

@implementation GTLRDataflow_BigTableIODetails
@dynamic instanceId, projectId, tableId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ComponentSource
//

@implementation GTLRDataflow_ComponentSource
@dynamic name, originalTransformOrCollection, userName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ComponentTransform
//

@implementation GTLRDataflow_ComponentTransform
@dynamic name, originalTransform, userName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ComputationTopology
//

@implementation GTLRDataflow_ComputationTopology
@dynamic computationId, inputs, keyRanges, outputs, stateFamilies,
         systemStageName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [GTLRDataflow_StreamLocation class],
    @"keyRanges" : [GTLRDataflow_KeyRangeLocation class],
    @"outputs" : [GTLRDataflow_StreamLocation class],
    @"stateFamilies" : [GTLRDataflow_StateFamilyConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ConcatPosition
//

@implementation GTLRDataflow_ConcatPosition
@dynamic index, position;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CounterMetadata
//

@implementation GTLRDataflow_CounterMetadata
@dynamic descriptionProperty, kind, otherUnits, standardUnits;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CounterStructuredName
//

@implementation GTLRDataflow_CounterStructuredName
@dynamic componentStepName, executionStepName, inputIndex, name, origin,
         originalRequestingStepName, originalStepName, originNamespace, portion,
         workerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CounterStructuredNameAndMetadata
//

@implementation GTLRDataflow_CounterStructuredNameAndMetadata
@dynamic metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CounterUpdate
//

@implementation GTLRDataflow_CounterUpdate
@dynamic boolean, cumulative, distribution, floatingPoint, floatingPointList,
         floatingPointMean, integer, integerGauge, integerList, integerMean,
         internal, nameAndKind, shortId, stringList, structuredNameAndMetadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CPUTime
//

@implementation GTLRDataflow_CPUTime
@dynamic rate, timestamp, totalMs;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CreateJobFromTemplateRequest
//

@implementation GTLRDataflow_CreateJobFromTemplateRequest
@dynamic environment, gcsPath, jobName, location, parameters;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CreateJobFromTemplateRequest_Parameters
//

@implementation GTLRDataflow_CreateJobFromTemplateRequest_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_CustomSourceLocation
//

@implementation GTLRDataflow_CustomSourceLocation
@dynamic stateful;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DataDiskAssignment
//

@implementation GTLRDataflow_DataDiskAssignment
@dynamic dataDisks, vmInstance;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataDisks" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DatastoreIODetails
//

@implementation GTLRDataflow_DatastoreIODetails
@dynamic namespaceProperty, projectId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"namespaceProperty" : @"namespace" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DerivedSource
//

@implementation GTLRDataflow_DerivedSource
@dynamic derivationMode, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Disk
//

@implementation GTLRDataflow_Disk
@dynamic diskType, mountPoint, sizeGb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DisplayData
//

@implementation GTLRDataflow_DisplayData
@dynamic boolValue, durationValue, floatValue, int64Value, javaClassValue, key,
         label, namespaceProperty, shortStrValue, strValue, timestampValue, url;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"namespaceProperty" : @"namespace" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DistributionUpdate
//

@implementation GTLRDataflow_DistributionUpdate
@dynamic count, histogram, max, min, sum, sumOfSquares;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_DynamicSourceSplit
//

@implementation GTLRDataflow_DynamicSourceSplit
@dynamic primary, residual;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Environment
//

@implementation GTLRDataflow_Environment
@dynamic clusterManagerApiService, dataset, experiments, internalExperiments,
         sdkPipelineOptions, serviceAccountEmail, tempStoragePrefix, userAgent,
         version, workerPools;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"experiments" : [NSString class],
    @"workerPools" : [GTLRDataflow_WorkerPool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Environment_InternalExperiments
//

@implementation GTLRDataflow_Environment_InternalExperiments

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Environment_SdkPipelineOptions
//

@implementation GTLRDataflow_Environment_SdkPipelineOptions

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Environment_UserAgent
//

@implementation GTLRDataflow_Environment_UserAgent

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Environment_Version
//

@implementation GTLRDataflow_Environment_Version

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ExecutionStageState
//

@implementation GTLRDataflow_ExecutionStageState
@dynamic currentStateTime, executionStageName, executionStageState;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ExecutionStageSummary
//

@implementation GTLRDataflow_ExecutionStageSummary
@dynamic componentSource, componentTransform, identifier, inputSource, kind,
         name, outputSource;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"componentSource" : [GTLRDataflow_ComponentSource class],
    @"componentTransform" : [GTLRDataflow_ComponentTransform class],
    @"inputSource" : [GTLRDataflow_StageSource class],
    @"outputSource" : [GTLRDataflow_StageSource class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_FailedLocation
//

@implementation GTLRDataflow_FailedLocation
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_FileIODetails
//

@implementation GTLRDataflow_FileIODetails
@dynamic filePattern;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_FlattenInstruction
//

@implementation GTLRDataflow_FlattenInstruction
@dynamic inputs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [GTLRDataflow_InstructionInput class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_FloatingPointList
//

@implementation GTLRDataflow_FloatingPointList
@dynamic elements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elements" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_FloatingPointMean
//

@implementation GTLRDataflow_FloatingPointMean
@dynamic count, sum;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_GetDebugConfigRequest
//

@implementation GTLRDataflow_GetDebugConfigRequest
@dynamic componentId, location, workerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_GetDebugConfigResponse
//

@implementation GTLRDataflow_GetDebugConfigResponse
@dynamic config;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_GetTemplateResponse
//

@implementation GTLRDataflow_GetTemplateResponse
@dynamic metadata, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Histogram
//

@implementation GTLRDataflow_Histogram
@dynamic bucketCounts, firstBucketOffset;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bucketCounts" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_InstructionInput
//

@implementation GTLRDataflow_InstructionInput
@dynamic outputNum, producerInstructionIndex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_InstructionOutput
//

@implementation GTLRDataflow_InstructionOutput
@dynamic codec, name, onlyCountKeyBytes, onlyCountValueBytes, originalName,
         systemName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_InstructionOutput_Codec
//

@implementation GTLRDataflow_InstructionOutput_Codec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_IntegerGauge
//

@implementation GTLRDataflow_IntegerGauge
@dynamic timestamp, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_IntegerList
//

@implementation GTLRDataflow_IntegerList
@dynamic elements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elements" : [GTLRDataflow_SplitInt64 class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_IntegerMean
//

@implementation GTLRDataflow_IntegerMean
@dynamic count, sum;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Job
//

@implementation GTLRDataflow_Job
@dynamic clientRequestId, createdFromSnapshotId, createTime, currentState,
         currentStateTime, environment, executionInfo, identifier, jobMetadata,
         labels, location, name, pipelineDescription, projectId,
         replacedByJobId, replaceJobId, requestedState, stageStates, startTime,
         steps, stepsLocation, tempFiles, transformNameMapping, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stageStates" : [GTLRDataflow_ExecutionStageState class],
    @"steps" : [GTLRDataflow_Step class],
    @"tempFiles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Job_Labels
//

@implementation GTLRDataflow_Job_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Job_TransformNameMapping
//

@implementation GTLRDataflow_Job_TransformNameMapping

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobExecutionInfo
//

@implementation GTLRDataflow_JobExecutionInfo
@dynamic stages;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobExecutionInfo_Stages
//

@implementation GTLRDataflow_JobExecutionInfo_Stages

+ (Class)classForAdditionalProperties {
  return [GTLRDataflow_JobExecutionStageInfo class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobExecutionStageInfo
//

@implementation GTLRDataflow_JobExecutionStageInfo
@dynamic stepName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stepName" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobMessage
//

@implementation GTLRDataflow_JobMessage
@dynamic identifier, messageImportance, messageText, time;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobMetadata
//

@implementation GTLRDataflow_JobMetadata
@dynamic bigqueryDetails, bigTableDetails, datastoreDetails, fileDetails,
         pubsubDetails, sdkVersion, spannerDetails;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bigqueryDetails" : [GTLRDataflow_BigQueryIODetails class],
    @"bigTableDetails" : [GTLRDataflow_BigTableIODetails class],
    @"datastoreDetails" : [GTLRDataflow_DatastoreIODetails class],
    @"fileDetails" : [GTLRDataflow_FileIODetails class],
    @"pubsubDetails" : [GTLRDataflow_PubSubIODetails class],
    @"spannerDetails" : [GTLRDataflow_SpannerIODetails class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_JobMetrics
//

@implementation GTLRDataflow_JobMetrics
@dynamic metrics, metricTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataflow_MetricUpdate class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_KeyRangeDataDiskAssignment
//

@implementation GTLRDataflow_KeyRangeDataDiskAssignment
@dynamic dataDisk, end, start;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_KeyRangeLocation
//

@implementation GTLRDataflow_KeyRangeLocation
@dynamic dataDisk, deliveryEndpoint, deprecatedPersistentDirectory, end, start;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_LaunchTemplateParameters
//

@implementation GTLRDataflow_LaunchTemplateParameters
@dynamic environment, jobName, parameters;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_LaunchTemplateParameters_Parameters
//

@implementation GTLRDataflow_LaunchTemplateParameters_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_LaunchTemplateResponse
//

@implementation GTLRDataflow_LaunchTemplateResponse
@dynamic job;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_LeaseWorkItemRequest
//

@implementation GTLRDataflow_LeaseWorkItemRequest
@dynamic currentWorkerTime, location, requestedLeaseDuration,
         workerCapabilities, workerId, workItemTypes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workerCapabilities" : [NSString class],
    @"workItemTypes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_LeaseWorkItemResponse
//

@implementation GTLRDataflow_LeaseWorkItemResponse
@dynamic workItems;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workItems" : [GTLRDataflow_WorkItem class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ListJobMessagesResponse
//

@implementation GTLRDataflow_ListJobMessagesResponse
@dynamic autoscalingEvents, jobMessages, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"autoscalingEvents" : [GTLRDataflow_AutoscalingEvent class],
    @"jobMessages" : [GTLRDataflow_JobMessage class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ListJobsResponse
//

@implementation GTLRDataflow_ListJobsResponse
@dynamic failedLocation, jobs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failedLocation" : [GTLRDataflow_FailedLocation class],
    @"jobs" : [GTLRDataflow_Job class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MapTask
//

@implementation GTLRDataflow_MapTask
@dynamic counterPrefix, instructions, stageName, systemName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instructions" : [GTLRDataflow_ParallelInstruction class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MetricShortId
//

@implementation GTLRDataflow_MetricShortId
@dynamic metricIndex, shortId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MetricStructuredName
//

@implementation GTLRDataflow_MetricStructuredName
@dynamic context, name, origin;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MetricStructuredName_Context
//

@implementation GTLRDataflow_MetricStructuredName_Context

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MetricUpdate
//

@implementation GTLRDataflow_MetricUpdate
@dynamic cumulative, distribution, gauge, internal, kind, meanCount, meanSum,
         name, scalar, set, updateTime;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MountedDataDisk
//

@implementation GTLRDataflow_MountedDataDisk
@dynamic dataDisk;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_MultiOutputInfo
//

@implementation GTLRDataflow_MultiOutputInfo
@dynamic tag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_NameAndKind
//

@implementation GTLRDataflow_NameAndKind
@dynamic kind, name;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Package
//

@implementation GTLRDataflow_Package
@dynamic location, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ParallelInstruction
//

@implementation GTLRDataflow_ParallelInstruction
@dynamic flatten, name, originalName, outputs, parDo, partialGroupByKey, read,
         systemName, write;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"outputs" : [GTLRDataflow_InstructionOutput class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Parameter
//

@implementation GTLRDataflow_Parameter
@dynamic key, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ParameterMetadata
//

@implementation GTLRDataflow_ParameterMetadata
@dynamic helpText, isOptional, label, name, regexes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"regexes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ParDoInstruction
//

@implementation GTLRDataflow_ParDoInstruction
@dynamic input, multiOutputInfos, numOutputs, sideInputs, userFn;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"multiOutputInfos" : [GTLRDataflow_MultiOutputInfo class],
    @"sideInputs" : [GTLRDataflow_SideInputInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ParDoInstruction_UserFn
//

@implementation GTLRDataflow_ParDoInstruction_UserFn

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PartialGroupByKeyInstruction
//

@implementation GTLRDataflow_PartialGroupByKeyInstruction
@dynamic input, inputElementCodec, originalCombineValuesInputStoreName,
         originalCombineValuesStepName, sideInputs, valueCombiningFn;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sideInputs" : [GTLRDataflow_SideInputInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PartialGroupByKeyInstruction_InputElementCodec
//

@implementation GTLRDataflow_PartialGroupByKeyInstruction_InputElementCodec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PartialGroupByKeyInstruction_ValueCombiningFn
//

@implementation GTLRDataflow_PartialGroupByKeyInstruction_ValueCombiningFn

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PipelineDescription
//

@implementation GTLRDataflow_PipelineDescription
@dynamic displayData, executionPipelineStage, originalPipelineTransform;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"displayData" : [GTLRDataflow_DisplayData class],
    @"executionPipelineStage" : [GTLRDataflow_ExecutionStageSummary class],
    @"originalPipelineTransform" : [GTLRDataflow_TransformSummary class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Position
//

@implementation GTLRDataflow_Position
@dynamic byteOffset, concatPosition, end, key, recordIndex, shufflePosition;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PubSubIODetails
//

@implementation GTLRDataflow_PubSubIODetails
@dynamic subscription, topic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_PubsubLocation
//

@implementation GTLRDataflow_PubsubLocation
@dynamic dropLateData, idLabel, subscription, timestampLabel, topic,
         trackingSubscription, withAttributes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ReadInstruction
//

@implementation GTLRDataflow_ReadInstruction
@dynamic source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ReportedParallelism
//

@implementation GTLRDataflow_ReportedParallelism
@dynamic isInfinite, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ReportWorkItemStatusRequest
//

@implementation GTLRDataflow_ReportWorkItemStatusRequest
@dynamic currentWorkerTime, location, workerId, workItemStatuses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workItemStatuses" : [GTLRDataflow_WorkItemStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ReportWorkItemStatusResponse
//

@implementation GTLRDataflow_ReportWorkItemStatusResponse
@dynamic workItemServiceStates;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workItemServiceStates" : [GTLRDataflow_WorkItemServiceState class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ResourceUtilizationReport
//

@implementation GTLRDataflow_ResourceUtilizationReport
@dynamic cpuTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cpuTime" : [GTLRDataflow_CPUTime class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ResourceUtilizationReportResponse
//

@implementation GTLRDataflow_ResourceUtilizationReportResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_RuntimeEnvironment
//

@implementation GTLRDataflow_RuntimeEnvironment
@dynamic additionalExperiments, additionalUserLabels, bypassTempDirValidation,
         machineType, maxWorkers, network, numWorkers, serviceAccountEmail,
         subnetwork, tempLocation, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalExperiments" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_RuntimeEnvironment_AdditionalUserLabels
//

@implementation GTLRDataflow_RuntimeEnvironment_AdditionalUserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SdkVersion
//

@implementation GTLRDataflow_SdkVersion
@dynamic sdkSupportStatus, version, versionDisplayName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SendDebugCaptureRequest
//

@implementation GTLRDataflow_SendDebugCaptureRequest
@dynamic componentId, data, location, workerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SendDebugCaptureResponse
//

@implementation GTLRDataflow_SendDebugCaptureResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SendWorkerMessagesRequest
//

@implementation GTLRDataflow_SendWorkerMessagesRequest
@dynamic location, workerMessages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workerMessages" : [GTLRDataflow_WorkerMessage class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SendWorkerMessagesResponse
//

@implementation GTLRDataflow_SendWorkerMessagesResponse
@dynamic workerMessageResponses;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workerMessageResponses" : [GTLRDataflow_WorkerMessageResponse class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SeqMapTask
//

@implementation GTLRDataflow_SeqMapTask
@dynamic inputs, name, outputInfos, stageName, systemName, userFn;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputs" : [GTLRDataflow_SideInputInfo class],
    @"outputInfos" : [GTLRDataflow_SeqMapTaskOutputInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SeqMapTask_UserFn
//

@implementation GTLRDataflow_SeqMapTask_UserFn

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SeqMapTaskOutputInfo
//

@implementation GTLRDataflow_SeqMapTaskOutputInfo
@dynamic sink, tag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_ShellTask
//

@implementation GTLRDataflow_ShellTask
@dynamic command, exitCode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SideInputInfo
//

@implementation GTLRDataflow_SideInputInfo
@dynamic kind, sources, tag;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRDataflow_Source class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SideInputInfo_Kind
//

@implementation GTLRDataflow_SideInputInfo_Kind

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Sink
//

@implementation GTLRDataflow_Sink
@dynamic codec, spec;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Sink_Codec
//

@implementation GTLRDataflow_Sink_Codec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Sink_Spec
//

@implementation GTLRDataflow_Sink_Spec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Snapshot
//

@implementation GTLRDataflow_Snapshot
@dynamic creationTime, identifier, projectId, sourceJobId, ttl;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SnapshotJobRequest
//

@implementation GTLRDataflow_SnapshotJobRequest
@dynamic location, ttl;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Source
//

@implementation GTLRDataflow_Source
@dynamic baseSpecs, codec, doesNotNeedSplitting, metadata, spec;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"baseSpecs" : [GTLRDataflow_Source_BaseSpecs_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Source_BaseSpecs_Item
//

@implementation GTLRDataflow_Source_BaseSpecs_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Source_Codec
//

@implementation GTLRDataflow_Source_Codec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Source_Spec
//

@implementation GTLRDataflow_Source_Spec

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceFork
//

@implementation GTLRDataflow_SourceFork
@dynamic primary, primarySource, residual, residualSource;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceGetMetadataRequest
//

@implementation GTLRDataflow_SourceGetMetadataRequest
@dynamic source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceGetMetadataResponse
//

@implementation GTLRDataflow_SourceGetMetadataResponse
@dynamic metadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceMetadata
//

@implementation GTLRDataflow_SourceMetadata
@dynamic estimatedSizeBytes, infinite, producesSortedKeys;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceOperationRequest
//

@implementation GTLRDataflow_SourceOperationRequest
@dynamic getMetadata, name, originalName, split, stageName, systemName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceOperationResponse
//

@implementation GTLRDataflow_SourceOperationResponse
@dynamic getMetadata, split;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceSplitOptions
//

@implementation GTLRDataflow_SourceSplitOptions
@dynamic desiredBundleSizeBytes, desiredShardSizeBytes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceSplitRequest
//

@implementation GTLRDataflow_SourceSplitRequest
@dynamic options, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceSplitResponse
//

@implementation GTLRDataflow_SourceSplitResponse
@dynamic bundles, outcome, shards;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bundles" : [GTLRDataflow_DerivedSource class],
    @"shards" : [GTLRDataflow_SourceSplitShard class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SourceSplitShard
//

@implementation GTLRDataflow_SourceSplitShard
@dynamic derivationMode, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SpannerIODetails
//

@implementation GTLRDataflow_SpannerIODetails
@dynamic databaseId, instanceId, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_SplitInt64
//

@implementation GTLRDataflow_SplitInt64
@dynamic highBits, lowBits;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StageSource
//

@implementation GTLRDataflow_StageSource
@dynamic name, originalTransformOrCollection, sizeBytes, userName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StateFamilyConfig
//

@implementation GTLRDataflow_StateFamilyConfig
@dynamic isRead, stateFamily;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Status
//

@implementation GTLRDataflow_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRDataflow_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Status_Details_Item
//

@implementation GTLRDataflow_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Step
//

@implementation GTLRDataflow_Step
@dynamic kind, name, properties;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_Step_Properties
//

@implementation GTLRDataflow_Step_Properties

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingApplianceSnapshotConfig
//

@implementation GTLRDataflow_StreamingApplianceSnapshotConfig
@dynamic importStateEndpoint, snapshotId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingComputationConfig
//

@implementation GTLRDataflow_StreamingComputationConfig
@dynamic computationId, instructions, stageName, systemName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instructions" : [GTLRDataflow_ParallelInstruction class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingComputationRanges
//

@implementation GTLRDataflow_StreamingComputationRanges
@dynamic computationId, rangeAssignments;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rangeAssignments" : [GTLRDataflow_KeyRangeDataDiskAssignment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingComputationTask
//

@implementation GTLRDataflow_StreamingComputationTask
@dynamic computationRanges, dataDisks, taskType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"computationRanges" : [GTLRDataflow_StreamingComputationRanges class],
    @"dataDisks" : [GTLRDataflow_MountedDataDisk class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingConfigTask
//

@implementation GTLRDataflow_StreamingConfigTask
@dynamic streamingComputationConfigs, userStepToStateFamilyNameMap,
         windmillServiceEndpoint, windmillServicePort;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"streamingComputationConfigs" : [GTLRDataflow_StreamingComputationConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingConfigTask_UserStepToStateFamilyNameMap
//

@implementation GTLRDataflow_StreamingConfigTask_UserStepToStateFamilyNameMap

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingSetupTask
//

@implementation GTLRDataflow_StreamingSetupTask
@dynamic drain, receiveWorkPort, snapshotConfig, streamingComputationTopology,
         workerHarnessPort;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingSideInputLocation
//

@implementation GTLRDataflow_StreamingSideInputLocation
@dynamic stateFamily, tag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamingStageLocation
//

@implementation GTLRDataflow_StreamingStageLocation
@dynamic streamId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StreamLocation
//

@implementation GTLRDataflow_StreamLocation
@dynamic customSourceLocation, pubsubLocation, sideInputLocation,
         streamingStageLocation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StringList
//

@implementation GTLRDataflow_StringList
@dynamic elements;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"elements" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_StructuredMessage
//

@implementation GTLRDataflow_StructuredMessage
@dynamic messageKey, messageText, parameters;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRDataflow_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_TaskRunnerSettings
//

@implementation GTLRDataflow_TaskRunnerSettings
@dynamic alsologtostderr, baseTaskDir, baseUrl, commandlinesFileName,
         continueOnException, dataflowApiVersion, harnessCommand, languageHint,
         logDir, logToSerialconsole, logUploadLocation, oauthScopes,
         parallelWorkerSettings, streamingWorkerMainClass, taskGroup, taskUser,
         tempStoragePrefix, vmId, workflowFileName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"oauthScopes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_TemplateMetadata
//

@implementation GTLRDataflow_TemplateMetadata
@dynamic descriptionProperty, name, parameters;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRDataflow_ParameterMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_TopologyConfig
//

@implementation GTLRDataflow_TopologyConfig
@dynamic computations, dataDiskAssignments, forwardingKeyBits,
         persistentStateVersion, userStageToComputationNameMap;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"computations" : [GTLRDataflow_ComputationTopology class],
    @"dataDiskAssignments" : [GTLRDataflow_DataDiskAssignment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_TopologyConfig_UserStageToComputationNameMap
//

@implementation GTLRDataflow_TopologyConfig_UserStageToComputationNameMap

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_TransformSummary
//

@implementation GTLRDataflow_TransformSummary
@dynamic displayData, identifier, inputCollectionName, kind, name,
         outputCollectionName;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"displayData" : [GTLRDataflow_DisplayData class],
    @"inputCollectionName" : [NSString class],
    @"outputCollectionName" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerHealthReport
//

@implementation GTLRDataflow_WorkerHealthReport
@dynamic pods, reportInterval, vmIsHealthy, vmStartupTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pods" : [GTLRDataflow_WorkerHealthReport_Pods_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerHealthReport_Pods_Item
//

@implementation GTLRDataflow_WorkerHealthReport_Pods_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerHealthReportResponse
//

@implementation GTLRDataflow_WorkerHealthReportResponse
@dynamic reportInterval;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerLifecycleEvent
//

@implementation GTLRDataflow_WorkerLifecycleEvent
@dynamic containerStartTime, event, metadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerLifecycleEvent_Metadata
//

@implementation GTLRDataflow_WorkerLifecycleEvent_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerMessage
//

@implementation GTLRDataflow_WorkerMessage
@dynamic labels, time, workerHealthReport, workerLifecycleEvent,
         workerMessageCode, workerMetrics, workerShutdownNotice;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerMessage_Labels
//

@implementation GTLRDataflow_WorkerMessage_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerMessageCode
//

@implementation GTLRDataflow_WorkerMessageCode
@dynamic code, parameters;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerMessageCode_Parameters
//

@implementation GTLRDataflow_WorkerMessageCode_Parameters

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerMessageResponse
//

@implementation GTLRDataflow_WorkerMessageResponse
@dynamic workerHealthReportResponse, workerMetricsResponse,
         workerShutdownNoticeResponse;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerPool
//

@implementation GTLRDataflow_WorkerPool
@dynamic autoscalingSettings, dataDisks, defaultPackageSet, diskSizeGb,
         diskSourceImage, diskType, ipConfiguration, kind, machineType,
         metadata, network, numThreadsPerWorker, numWorkers, onHostMaintenance,
         packages, poolArgs, subnetwork, taskrunnerSettings, teardownPolicy,
         workerHarnessContainerImage, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataDisks" : [GTLRDataflow_Disk class],
    @"packages" : [GTLRDataflow_Package class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerPool_Metadata
//

@implementation GTLRDataflow_WorkerPool_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerPool_PoolArgs
//

@implementation GTLRDataflow_WorkerPool_PoolArgs

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerSettings
//

@implementation GTLRDataflow_WorkerSettings
@dynamic baseUrl, reportingEnabled, servicePath, shuffleServicePath,
         tempStoragePrefix, workerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerShutdownNotice
//

@implementation GTLRDataflow_WorkerShutdownNotice
@dynamic reason;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkerShutdownNoticeResponse
//

@implementation GTLRDataflow_WorkerShutdownNoticeResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkItem
//

@implementation GTLRDataflow_WorkItem
@dynamic configuration, identifier, initialReportIndex, jobId, leaseExpireTime,
         mapTask, packages, projectId, reportStatusInterval, seqMapTask,
         shellTask, sourceOperationTask, streamingComputationTask,
         streamingConfigTask, streamingSetupTask;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"packages" : [GTLRDataflow_Package class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkItemServiceState
//

@implementation GTLRDataflow_WorkItemServiceState
@dynamic harnessData, leaseExpireTime, metricShortId, nextReportIndex,
         reportStatusInterval, splitRequest, suggestedStopPoint,
         suggestedStopPosition;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metricShortId" : [GTLRDataflow_MetricShortId class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkItemServiceState_HarnessData
//

@implementation GTLRDataflow_WorkItemServiceState_HarnessData

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WorkItemStatus
//

@implementation GTLRDataflow_WorkItemStatus
@dynamic completed, counterUpdates, dynamicSourceSplit, errors, metricUpdates,
         progress, reportedProgress, reportIndex, requestedLeaseDuration,
         sourceFork, sourceOperationResponse, stopPosition,
         totalThrottlerWaitTimeSeconds, workItemId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"counterUpdates" : [GTLRDataflow_CounterUpdate class],
    @"errors" : [GTLRDataflow_Status class],
    @"metricUpdates" : [GTLRDataflow_MetricUpdate class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataflow_WriteInstruction
//

@implementation GTLRDataflow_WriteInstruction
@dynamic input, sink;
@end
