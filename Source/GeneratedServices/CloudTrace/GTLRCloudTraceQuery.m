// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Trace API (cloudtrace/v2)
// Description:
//   Send and retrieve trace data from Stackdriver Trace. Data is generated and
//   available by default for all App Engine applications. Data from other
//   applications can be written to Stackdriver Trace for display, reporting,
//   and analysis.
// Documentation:
//   https://cloud.google.com/trace

#import "GTLRCloudTraceQuery.h"

#import "GTLRCloudTraceObjects.h"

@implementation GTLRCloudTraceQuery

@dynamic fields;

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesBatchWrite

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudTrace_BatchWriteSpansRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/traces:batchWrite";
  GTLRCloudTraceQuery_ProjectsTracesBatchWrite *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTrace_Empty class];
  query.loggingName = @"cloudtrace.projects.traces.batchWrite";
  return query;
}

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesList

@dynamic endTime, filter, orderBy, pageSize, pageToken, parent, startTime;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/traces";
  GTLRCloudTraceQuery_ProjectsTracesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTrace_ListTracesResponse class];
  query.loggingName = @"cloudtrace.projects.traces.list";
  return query;
}

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesListSpans

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}:listSpans";
  GTLRCloudTraceQuery_ProjectsTracesListSpans *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudTrace_ListSpansResponse class];
  query.loggingName = @"cloudtrace.projects.traces.listSpans";
  return query;
}

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesSpansCreate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudTrace_Span *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudTraceQuery_ProjectsTracesSpansCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudTrace_Span class];
  query.loggingName = @"cloudtrace.projects.traces.spans.create";
  return query;
}

@end
