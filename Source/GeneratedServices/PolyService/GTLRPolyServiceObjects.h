// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Poly API (poly/v1)
// Description:
//   The Poly API provides read-only access to assets hosted on <a
//   href="https://poly.google.com">poly.google.com</a>.
// Documentation:
//   https://devsite.googleplex.com/poly/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPolyService_Asset;
@class GTLRPolyService_File;
@class GTLRPolyService_Format;
@class GTLRPolyService_FormatComplexity;
@class GTLRPolyService_PresentationParams;
@class GTLRPolyService_Quaternion;
@class GTLRPolyService_UserAsset;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPolyService_Asset.license

/**
 *  Unlicensed: All Rights Reserved by the author. Unlicensed assets are
 *  **not** returned by List Assets.
 *
 *  Value: "ALL_RIGHTS_RESERVED"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_License_AllRightsReserved;
/**
 *  Creative Commons CC-BY 3.0. https://creativecommons.org/licenses/by/3.0/
 *
 *  Value: "CREATIVE_COMMONS_BY"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_License_CreativeCommonsBy;
/**
 *  Unknown license value.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_License_Unknown;

// ----------------------------------------------------------------------------
// GTLRPolyService_Asset.visibility

/**
 *  Access to the asset and its underlying files and resources is restricted to
 *  the author.
 *  **Authentication:** You must supply an OAuth token that corresponds to the
 *  author's account.
 *
 *  Value: "PRIVATE"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_Visibility_Private;
/**
 *  Access to the asset and its underlying files and resources is available
 *  to anyone.
 *
 *  Value: "PUBLIC"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_Visibility_Public;
/**
 *  Access to the asset and its underlying files and resources is available to
 *  anyone with the asset's name. Unlisted assets are **not**
 *  returned by List Assets.
 *
 *  Value: "UNLISTED"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_Visibility_Unlisted;
/**
 *  Unknown (and invalid) visibility.
 *
 *  Value: "VISIBILITY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_Asset_Visibility_VisibilityUnspecified;

// ----------------------------------------------------------------------------
// GTLRPolyService_PresentationParams.colorSpace

/**
 *  Colors should be converted to linear by assuming gamma = 2.0.
 *
 *  Value: "GAMMA"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_PresentationParams_ColorSpace_Gamma;
/**
 *  Linear color values. Default.
 *
 *  Value: "LINEAR"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_PresentationParams_ColorSpace_Linear;
/**
 *  Invalid color value.
 *
 *  Value: "UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRPolyService_PresentationParams_ColorSpace_Unknown;

/**
 *  Represents and describes an asset in the Poly library. An asset is a 3D
 *  model
 *  or scene created using [Tilt Brush](//www.tiltbrush.com),
 *  [Blocks](//vr.google.com/blocks/), or any 3D program that produces a file
 *  that can be upload to Poly.
 */
@interface GTLRPolyService_Asset : GTLRObject

/**
 *  The author's publicly visible name. Use this name when giving credit to the
 *  author. For more information, see [Licensing](/poly/discover/licensing).
 */
@property(nonatomic, copy, nullable) NSString *authorName;

/**
 *  For published assets, the time when the asset was published.
 *  For unpublished assets, the time when the asset was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The human-readable description, set by the asset's author.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The human-readable name, set by the asset's author. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  A list of Formats where each
 *  format describes one representation of the asset.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPolyService_Format *> *formats;

/**
 *  Whether this asset has been curated by the Poly team.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCurated;

/**
 *  The license under which the author has made the asset available
 *  for use, if any.
 *
 *  Likely values:
 *    @arg @c kGTLRPolyService_Asset_License_AllRightsReserved Unlicensed: All
 *        Rights Reserved by the author. Unlicensed assets are
 *        **not** returned by List Assets. (Value: "ALL_RIGHTS_RESERVED")
 *    @arg @c kGTLRPolyService_Asset_License_CreativeCommonsBy Creative Commons
 *        CC-BY 3.0. https://creativecommons.org/licenses/by/3.0/ (Value:
 *        "CREATIVE_COMMONS_BY")
 *    @arg @c kGTLRPolyService_Asset_License_Unknown Unknown license value.
 *        (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *license;

/**
 *  The unique identifier for the asset in the form:
 *  `assets/{ASSET_ID}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Hints for displaying the asset. Note that these parameters are not
 *  immutable; the author of an asset may change them post-publication.
 */
@property(nonatomic, strong, nullable) GTLRPolyService_PresentationParams *presentationParams;

/** The thumbnail image for the asset. */
@property(nonatomic, strong, nullable) GTLRPolyService_File *thumbnail;

/**
 *  The time when the asset was last modified. For published assets, whose
 *  contents are immutable, the update time changes only when metadata
 *  properties, such as visibility, are updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  The visibility of the asset and who can access it.
 *
 *  Likely values:
 *    @arg @c kGTLRPolyService_Asset_Visibility_Private Access to the asset and
 *        its underlying files and resources is restricted to
 *        the author.
 *        **Authentication:** You must supply an OAuth token that corresponds to
 *        the
 *        author's account. (Value: "PRIVATE")
 *    @arg @c kGTLRPolyService_Asset_Visibility_Public Access to the asset and
 *        its underlying files and resources is available
 *        to anyone. (Value: "PUBLIC")
 *    @arg @c kGTLRPolyService_Asset_Visibility_Unlisted Access to the asset and
 *        its underlying files and resources is available to
 *        anyone with the asset's name. Unlisted assets are **not**
 *        returned by List Assets. (Value: "UNLISTED")
 *    @arg @c kGTLRPolyService_Asset_Visibility_VisibilityUnspecified Unknown
 *        (and invalid) visibility. (Value: "VISIBILITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  Represents a file in Poly, which can be a root,
 *  resource, or thumbnail file.
 */
@interface GTLRPolyService_File : GTLRObject

/**
 *  The MIME content-type, such as `image/png`.
 *  For more information, see
 *  [MIME
 *  types](//developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The path of the resource file relative to the root file.
 *  For root or thumbnail files, this is just the filename.
 */
@property(nonatomic, copy, nullable) NSString *relativePath;

/** The URL where the file data can be retrieved. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  The same asset can be represented in different formats, for example,
 *  a [WaveFront .obj](//en.wikipedia.org/wiki/Wavefront_.obj_file) file with
 *  its
 *  corresponding .mtl file or a [Khronos glTF](//www.khronos.org/gltf) file
 *  with its corresponding .glb binary data. A format refers to a specific
 *  representation of an asset and contains all information needed to
 *  retrieve and describe this representation.
 */
@interface GTLRPolyService_Format : GTLRObject

/** Complexity stats about this representation of the asset. */
@property(nonatomic, strong, nullable) GTLRPolyService_FormatComplexity *formatComplexity;

/**
 *  A short string that identifies the format type of this representation.
 *  Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.
 */
@property(nonatomic, copy, nullable) NSString *formatType;

/**
 *  A list of dependencies of the root element. May include, but is not
 *  limited to, materials, textures, and shader programs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPolyService_File *> *resources;

/**
 *  The root of the file hierarchy. This will always be populated.
 *  For some format_types - such as `TILT`, which are self-contained -
 *  this is all of the data.
 *  Other types - such as `OBJ` - often reference other data elements.
 *  These are contained in the resources field.
 */
@property(nonatomic, strong, nullable) GTLRPolyService_File *root;

@end


/**
 *  Information on the complexity of this Format.
 */
@interface GTLRPolyService_FormatComplexity : GTLRObject

/**
 *  A non-negative integer that represents the level of detail (LOD) of this
 *  format relative to other formats of the same asset with the same
 *  format_type.
 *  This hint allows you to sort formats from the most-detailed (0) to
 *  least-detailed (integers greater than 0).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lodHint;

/**
 *  The estimated number of triangles.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *triangleCount;

@end


/**
 *  A response message from a request to list.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "assets" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPolyService_ListAssetsResponse : GTLRCollectionObject

/**
 *  A list of assets that match the criteria specified in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPolyService_Asset *> *assets;

/**
 *  The continuation token for retrieving the next page. If empty,
 *  indicates that there are no more pages. To get the next page, submit the
 *  same request specifying this value as the
 *  page_token.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of assets in the list, without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  A response message from a request to list.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "assets" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPolyService_ListLikedAssetsResponse : GTLRCollectionObject

/**
 *  A list of assets that match the criteria specified in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPolyService_Asset *> *assets;

/**
 *  The continuation token for retrieving the next page. If empty,
 *  indicates that there are no more pages. To get the next page, submit the
 *  same request specifying this value as the
 *  page_token.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of assets in the list, without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  A response message from a request to list.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "userAssets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPolyService_ListUserAssetsResponse : GTLRCollectionObject

/**
 *  The continuation token for retrieving the next page. If empty,
 *  indicates that there are no more pages. To get the next page, submit the
 *  same request specifying this value as the
 *  page_token.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of assets in the list, without pagination.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

/**
 *  A list of UserAssets matching the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPolyService_UserAsset *> *userAssets;

@end


/**
 *  Hints for displaying the asset, based on information available when the
 *  asset
 *  was uploaded.
 */
@interface GTLRPolyService_PresentationParams : GTLRObject

/**
 *  The materials' diffuse/albedo color. This does not apply to vertex colors
 *  or texture maps.
 *
 *  Likely values:
 *    @arg @c kGTLRPolyService_PresentationParams_ColorSpace_Gamma Colors should
 *        be converted to linear by assuming gamma = 2.0. (Value: "GAMMA")
 *    @arg @c kGTLRPolyService_PresentationParams_ColorSpace_Linear Linear color
 *        values. Default. (Value: "LINEAR")
 *    @arg @c kGTLRPolyService_PresentationParams_ColorSpace_Unknown Invalid
 *        color value. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *colorSpace;

/**
 *  A rotation that should be applied to the object root to make it upright.
 *  More precisely, this quaternion transforms from "object space" (the space
 *  in which the object is defined) to "presentation space", a coordinate
 *  system where +Y is up, +X is right, -Z is forward. For example, if
 *  the object is the Eiffel Tower, in its local coordinate system the
 *  object might be laid out such that the base of the tower is on the
 *  YZ plane and the tip of the tower is towards positive X. In this case
 *  this quaternion would specify a rotation (of 90 degrees about the Z
 *  axis) such that in the presentation space the base of the tower is
 *  aligned with the XZ plane, and the tip of the tower lies towards +Y.
 *  This rotation is unrelated to the object's pose in the web preview,
 *  which is just a camera position setting and is *not* reflected in this
 *  rotation.
 *  Please note: this is applicable only to the gLTF.
 */
@property(nonatomic, strong, nullable) GTLRPolyService_Quaternion *orientingRotation;

@end


/**
 *  A [Quaternion](//en.wikipedia.org/wiki/Quaternion). Please note: if in the
 *  response you see "w: 1" and nothing else this is the default value of
 *  [0, 0, 0, 1] where x,y, and z are 0.
 */
@interface GTLRPolyService_Quaternion : GTLRObject

/**
 *  The scalar component.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *w;

/**
 *  The x component.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *x;

/**
 *  The y component.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *y;

/**
 *  The z component.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *z;

@end


/**
 *  Data about the user's asset.
 */
@interface GTLRPolyService_UserAsset : GTLRObject

/** An Asset. */
@property(nonatomic, strong, nullable) GTLRPolyService_Asset *asset;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
