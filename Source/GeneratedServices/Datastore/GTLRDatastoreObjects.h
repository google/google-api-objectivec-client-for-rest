// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Datastore API (datastore/v1)
// Description:
//   Accesses the schemaless NoSQL database to provide fully managed, robust,
//   scalable storage for your application.
// Documentation:
//   https://cloud.google.com/datastore/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDatastore_ArrayValue;
@class GTLRDatastore_CompositeFilter;
@class GTLRDatastore_Entity;
@class GTLRDatastore_Entity_Properties;
@class GTLRDatastore_EntityResult;
@class GTLRDatastore_Filter;
@class GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata;
@class GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_Labels;
@class GTLRDatastore_GoogleDatastoreAdminV1beta1EntityFilter;
@class GTLRDatastore_GoogleDatastoreAdminV1beta1Progress;
@class GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata;
@class GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_Labels;
@class GTLRDatastore_GoogleDatastoreAdminV1EntityFilter;
@class GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesRequest_Labels;
@class GTLRDatastore_GoogleDatastoreAdminV1ImportEntitiesRequest_Labels;
@class GTLRDatastore_GoogleDatastoreAdminV1Index;
@class GTLRDatastore_GoogleDatastoreAdminV1IndexedProperty;
@class GTLRDatastore_GoogleDatastoreAdminV1Progress;
@class GTLRDatastore_GoogleLongrunningOperation;
@class GTLRDatastore_GoogleLongrunningOperation_Metadata;
@class GTLRDatastore_GoogleLongrunningOperation_Response;
@class GTLRDatastore_GqlQuery;
@class GTLRDatastore_GqlQuery_NamedBindings;
@class GTLRDatastore_GqlQueryParameter;
@class GTLRDatastore_Key;
@class GTLRDatastore_KindExpression;
@class GTLRDatastore_LatLng;
@class GTLRDatastore_Mutation;
@class GTLRDatastore_MutationResult;
@class GTLRDatastore_PartitionId;
@class GTLRDatastore_PathElement;
@class GTLRDatastore_Projection;
@class GTLRDatastore_PropertyFilter;
@class GTLRDatastore_PropertyOrder;
@class GTLRDatastore_PropertyReference;
@class GTLRDatastore_Query;
@class GTLRDatastore_QueryResultBatch;
@class GTLRDatastore_ReadOnly;
@class GTLRDatastore_ReadOptions;
@class GTLRDatastore_ReadWrite;
@class GTLRDatastore_Status;
@class GTLRDatastore_Status_Details_Item;
@class GTLRDatastore_TransactionOptions;
@class GTLRDatastore_Value;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDatastore_CommitRequest.mode

/**
 *  Unspecified. This value must not be used.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_CommitRequest_Mode_ModeUnspecified;
/**
 *  Non-transactional: The mutations may not apply as all or none.
 *
 *  Value: "NON_TRANSACTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_CommitRequest_Mode_NonTransactional;
/**
 *  Transactional: The mutations are either all applied, or none are applied.
 *  Learn about transactions
 *  [here](https://cloud.google.com/datastore/docs/concepts/transactions).
 *
 *  Value: "TRANSACTIONAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_CommitRequest_Mode_Transactional;

// ----------------------------------------------------------------------------
// GTLRDatastore_CompositeFilter.op

/**
 *  The results are required to satisfy each of the combined filters.
 *
 *  Value: "AND"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_CompositeFilter_Op_And;
/**
 *  Unspecified. This value must not be used.
 *
 *  Value: "OPERATOR_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_CompositeFilter_Op_OperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata.operationType

/**
 *  ExportEntities.
 *
 *  Value: "EXPORT_ENTITIES"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_ExportEntities;
/**
 *  ImportEntities.
 *
 *  Value: "IMPORT_ENTITIES"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_ImportEntities;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_OperationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata.state

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Initializing;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Processing;
/**
 *  Unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_StateUnspecified;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Successful;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata.operationType

/**
 *  CreateIndex.
 *
 *  Value: "CREATE_INDEX"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_CreateIndex;
/**
 *  DeleteIndex.
 *
 *  Value: "DELETE_INDEX"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_DeleteIndex;
/**
 *  ExportEntities.
 *
 *  Value: "EXPORT_ENTITIES"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_ExportEntities;
/**
 *  ImportEntities.
 *
 *  Value: "IMPORT_ENTITIES"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_ImportEntities;
/**
 *  Unspecified.
 *
 *  Value: "OPERATION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_OperationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata.state

/**
 *  Request has finished being cancelled after user called
 *  google.longrunning.Operations.CancelOperation.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Cancelled;
/**
 *  Request is in the process of being cancelled after user called
 *  google.longrunning.Operations.CancelOperation on the operation.
 *
 *  Value: "CANCELLING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Cancelling;
/**
 *  Request has finished being processed, but encountered an error.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Failed;
/**
 *  Request has been processed and is in its finalization stage.
 *
 *  Value: "FINALIZING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Finalizing;
/**
 *  Request is being prepared for processing.
 *
 *  Value: "INITIALIZING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Initializing;
/**
 *  Request is actively being processed.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Processing;
/**
 *  Unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_StateUnspecified;
/**
 *  Request has completed successfully.
 *
 *  Value: "SUCCESSFUL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Successful;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1Index.ancestor

/**
 *  Include all the entity's ancestors in the index.
 *
 *  Value: "ALL_ANCESTORS"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_AllAncestors;
/**
 *  The ancestor mode is unspecified.
 *
 *  Value: "ANCESTOR_MODE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_AncestorModeUnspecified;
/**
 *  Do not include the entity's ancestors in the index.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_None;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1Index.state

/**
 *  The index is being created, and cannot be used by queries.
 *  There is an active long-running operation for the index.
 *  The index is updated when writing an entity.
 *  Some index data may exist.
 *
 *  Value: "CREATING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Creating;
/**
 *  The index is being deleted, and cannot be used by queries.
 *  There is an active long-running operation for the index.
 *  The index is not updated when writing an entity.
 *  Some index data may exist.
 *
 *  Value: "DELETING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Deleting;
/**
 *  The index was being created or deleted, but something went wrong.
 *  The index cannot by used by queries.
 *  There is no active long-running operation for the index,
 *  and the most recently finished long-running operation failed.
 *  The index is not updated when writing an entity.
 *  Some index data may exist.
 *
 *  Value: "ERROR"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Error;
/**
 *  The index is ready to be used.
 *  The index is updated when writing an entity.
 *  The index is fully populated from all stored entities it applies to.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Ready;
/**
 *  The state is unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1Index_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_GoogleDatastoreAdminV1IndexedProperty.direction

/**
 *  The property's values are indexed so as to support sequencing in
 *  ascending order and also query by <, >, <=, >=, and =.
 *
 *  Value: "ASCENDING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_Ascending;
/**
 *  The property's values are indexed so as to support sequencing in
 *  descending order and also query by <, >, <=, >=, and =.
 *
 *  Value: "DESCENDING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_Descending;
/**
 *  The direction is unspecified.
 *
 *  Value: "DIRECTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_DirectionUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_PropertyFilter.op

/**
 *  Equal.
 *
 *  Value: "EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_Equal;
/**
 *  Greater than.
 *
 *  Value: "GREATER_THAN"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_GreaterThan;
/**
 *  Greater than or equal.
 *
 *  Value: "GREATER_THAN_OR_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_GreaterThanOrEqual;
/**
 *  Has ancestor.
 *
 *  Value: "HAS_ANCESTOR"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_HasAncestor;
/**
 *  Less than.
 *
 *  Value: "LESS_THAN"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_LessThan;
/**
 *  Less than or equal.
 *
 *  Value: "LESS_THAN_OR_EQUAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_LessThanOrEqual;
/**
 *  Unspecified. This value must not be used.
 *
 *  Value: "OPERATOR_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyFilter_Op_OperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_PropertyOrder.direction

/**
 *  Ascending.
 *
 *  Value: "ASCENDING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyOrder_Direction_Ascending;
/**
 *  Descending.
 *
 *  Value: "DESCENDING"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyOrder_Direction_Descending;
/**
 *  Unspecified. This value must not be used.
 *
 *  Value: "DIRECTION_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_PropertyOrder_Direction_DirectionUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_QueryResultBatch.entityResultType

/**
 *  The key and properties.
 *
 *  Value: "FULL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_EntityResultType_Full;
/**
 *  Only the key.
 *
 *  Value: "KEY_ONLY"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_EntityResultType_KeyOnly;
/**
 *  A projected subset of properties. The entity may have no key.
 *
 *  Value: "PROJECTION"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_EntityResultType_Projection;
/**
 *  Unspecified. This value is never used.
 *
 *  Value: "RESULT_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_EntityResultType_ResultTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastore_QueryResultBatch.moreResults

/**
 *  The query is finished, but there may be more results after the end
 *  cursor.
 *
 *  Value: "MORE_RESULTS_AFTER_CURSOR"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsAfterCursor;
/**
 *  The query is finished, but there may be more results after the limit.
 *
 *  Value: "MORE_RESULTS_AFTER_LIMIT"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsAfterLimit;
/**
 *  Unspecified. This value is never used.
 *
 *  Value: "MORE_RESULTS_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsTypeUnspecified;
/**
 *  The query is finished, and there are no more results.
 *
 *  Value: "NO_MORE_RESULTS"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_MoreResults_NoMoreResults;
/**
 *  There may be additional batches to fetch from this query.
 *
 *  Value: "NOT_FINISHED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_QueryResultBatch_MoreResults_NotFinished;

// ----------------------------------------------------------------------------
// GTLRDatastore_ReadOptions.readConsistency

/**
 *  Eventual consistency.
 *
 *  Value: "EVENTUAL"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_ReadOptions_ReadConsistency_Eventual;
/**
 *  Unspecified. This value must not be used.
 *
 *  Value: "READ_CONSISTENCY_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_ReadOptions_ReadConsistency_ReadConsistencyUnspecified;
/**
 *  Strong consistency.
 *
 *  Value: "STRONG"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_ReadOptions_ReadConsistency_Strong;

// ----------------------------------------------------------------------------
// GTLRDatastore_Value.nullValue

/**
 *  Null value.
 *
 *  Value: "NULL_VALUE"
 */
GTLR_EXTERN NSString * const kGTLRDatastore_Value_NullValue_NullValue;

/**
 *  The request for Datastore.AllocateIds.
 */
@interface GTLRDatastore_AllocateIdsRequest : GTLRObject

/**
 *  A list of keys with incomplete key paths for which to allocate IDs.
 *  No key may be reserved/read-only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Key *> *keys;

@end


/**
 *  The response for Datastore.AllocateIds.
 */
@interface GTLRDatastore_AllocateIdsResponse : GTLRObject

/**
 *  The keys specified in the request (in the same order), each with
 *  its key path completed with a newly allocated ID.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Key *> *keys;

@end


/**
 *  An array value.
 */
@interface GTLRDatastore_ArrayValue : GTLRObject

/**
 *  Values in the array.
 *  The order of values in an array is preserved as long as all values have
 *  identical settings for 'exclude_from_indexes'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Value *> *values;

@end


/**
 *  The request for Datastore.BeginTransaction.
 */
@interface GTLRDatastore_BeginTransactionRequest : GTLRObject

/** Options for a new transaction. */
@property(nonatomic, strong, nullable) GTLRDatastore_TransactionOptions *transactionOptions;

@end


/**
 *  The response for Datastore.BeginTransaction.
 */
@interface GTLRDatastore_BeginTransactionResponse : GTLRObject

/**
 *  The transaction identifier (always present).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

@end


/**
 *  The request for Datastore.Commit.
 */
@interface GTLRDatastore_CommitRequest : GTLRObject

/**
 *  The type of commit to perform. Defaults to `TRANSACTIONAL`.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_CommitRequest_Mode_ModeUnspecified Unspecified.
 *        This value must not be used. (Value: "MODE_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_CommitRequest_Mode_NonTransactional
 *        Non-transactional: The mutations may not apply as all or none. (Value:
 *        "NON_TRANSACTIONAL")
 *    @arg @c kGTLRDatastore_CommitRequest_Mode_Transactional Transactional: The
 *        mutations are either all applied, or none are applied.
 *        Learn about transactions
 *        [here](https://cloud.google.com/datastore/docs/concepts/transactions).
 *        (Value: "TRANSACTIONAL")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  The mutations to perform.
 *  When mode is `TRANSACTIONAL`, mutations affecting a single entity are
 *  applied in order. The following sequences of mutations affecting a single
 *  entity are not permitted in a single `Commit` request:
 *  - `insert` followed by `insert`
 *  - `update` followed by `insert`
 *  - `upsert` followed by `insert`
 *  - `delete` followed by `update`
 *  When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
 *  entity.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Mutation *> *mutations;

/**
 *  The identifier of the transaction associated with the commit. A
 *  transaction identifier is returned by a call to
 *  Datastore.BeginTransaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

@end


/**
 *  The response for Datastore.Commit.
 */
@interface GTLRDatastore_CommitResponse : GTLRObject

/**
 *  The number of index entries updated during the commit, or zero if none were
 *  updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexUpdates;

/**
 *  The result of performing the mutations.
 *  The i-th mutation result corresponds to the i-th mutation in the request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_MutationResult *> *mutationResults;

@end


/**
 *  A filter that merges multiple other filters using the given operator.
 */
@interface GTLRDatastore_CompositeFilter : GTLRObject

/**
 *  The list of filters to combine.
 *  Must contain at least one filter.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Filter *> *filters;

/**
 *  The operator for combining multiple filters.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_CompositeFilter_Op_And The results are required to
 *        satisfy each of the combined filters. (Value: "AND")
 *    @arg @c kGTLRDatastore_CompositeFilter_Op_OperatorUnspecified Unspecified.
 *        This value must not be used. (Value: "OPERATOR_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *op;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance:
 *  service Foo {
 *  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *  }
 *  The JSON representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRDatastore_Empty : GTLRObject
@end


/**
 *  A Datastore data object.
 *  An entity is limited to 1 megabyte when stored. That _roughly_
 *  corresponds to a limit of 1 megabyte for the serialized form of this
 *  message.
 */
@interface GTLRDatastore_Entity : GTLRObject

/**
 *  The entity's key.
 *  An entity must have a key, unless otherwise documented (for example,
 *  an entity in `Value.entity_value` may have no key).
 *  An entity's kind is its key path's last element's kind,
 *  or null if it has no key.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Key *key;

/**
 *  The entity's properties.
 *  The map's keys are property names.
 *  A property name matching regex `__.*__` is reserved.
 *  A reserved property name is forbidden in certain documented contexts.
 *  The name must not contain more than 500 characters.
 *  The name cannot be `""`.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity_Properties *properties;

@end


/**
 *  The entity's properties.
 *  The map's keys are property names.
 *  A property name matching regex `__.*__` is reserved.
 *  A reserved property name is forbidden in certain documented contexts.
 *  The name must not contain more than 500 characters.
 *  The name cannot be `""`.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDatastore_Value. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastore_Entity_Properties : GTLRObject
@end


/**
 *  The result of fetching an entity from Datastore.
 */
@interface GTLRDatastore_EntityResult : GTLRObject

/**
 *  A cursor that points to the position after the result entity.
 *  Set only when the `EntityResult` is part of a `QueryResultBatch` message.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cursor;

/** The resulting entity. */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity *entity;

/**
 *  The version of the entity, a strictly positive number that monotonically
 *  increases with changes to the entity.
 *  This field is set for `FULL` entity
 *  results.
 *  For missing entities in `LookupResponse`, this
 *  is the version of the snapshot that was used to look up the entity, and it
 *  is always set except for eventually consistent reads.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A holder for any type of filter.
 */
@interface GTLRDatastore_Filter : GTLRObject

/** A composite filter. */
@property(nonatomic, strong, nullable) GTLRDatastore_CompositeFilter *compositeFilter;

/** A filter on a property. */
@property(nonatomic, strong, nullable) GTLRDatastore_PropertyFilter *propertyFilter;

@end


/**
 *  Metadata common to all Datastore Admin operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata : GTLRObject

/** The time the operation ended, either successfully or otherwise. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The client-assigned labels which were provided when the operation was
 *  created. May also include additional labels.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_Labels *labels;

/**
 *  The type of the operation. Can be used as a filter in
 *  ListOperationsRequest.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_ExportEntities
 *        ExportEntities. (Value: "EXPORT_ENTITIES")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_ImportEntities
 *        ImportEntities. (Value: "IMPORT_ENTITIES")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_OperationType_OperationTypeUnspecified
 *        Unspecified. (Value: "OPERATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The time that work began on the operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The current state of the Operation.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_StateUnspecified
 *        Unspecified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_State_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The client-assigned labels which were provided when the operation was
 *  created. May also include additional labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata_Labels : GTLRObject
@end


/**
 *  Identifies a subset of entities in a project. This is specified as
 *  combinations of kinds and namespaces (either or both of which may be all, as
 *  described in the following examples).
 *  Example usage:
 *  Entire project:
 *  kinds=[], namespace_ids=[]
 *  Kinds Foo and Bar in all namespaces:
 *  kinds=['Foo', 'Bar'], namespace_ids=[]
 *  Kinds Foo and Bar only in the default namespace:
 *  kinds=['Foo', 'Bar'], namespace_ids=['']
 *  Kinds Foo and Bar in both the default and Baz namespaces:
 *  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
 *  The entire Baz namespace:
 *  kinds=[], namespace_ids=['Baz']
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1EntityFilter : GTLRObject

/** If empty, then this represents all kinds. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *kinds;

/**
 *  An empty list represents all namespaces. This is the preferred
 *  usage for projects that don't use namespaces.
 *  An empty string element represents the default namespace. This should be
 *  used if the project has data in non-default namespaces, but doesn't want to
 *  include them.
 *  Each namespace in this list must be unique.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *namespaceIds;

@end


/**
 *  Metadata for ExportEntities operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1ExportEntitiesMetadata : GTLRObject

/** Metadata common to all Datastore Admin operations. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata *common;

/** Description of which entities are being exported. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1EntityFilter *entityFilter;

/**
 *  Location for the export metadata and data files. This will be the same
 *  value as the
 *  google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix
 *  field. The final output location is provided in
 *  google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
 */
@property(nonatomic, copy, nullable) NSString *outputUrlPrefix;

/** An estimate of the number of bytes processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1Progress *progressBytes;

/** An estimate of the number of entities processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1Progress *progressEntities;

@end


/**
 *  The response for
 *  google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1ExportEntitiesResponse : GTLRObject

/**
 *  Location of the output metadata file. This can be used to begin an import
 *  into Cloud Datastore (this project or another project). See
 *  google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.
 *  Only present if the operation completed successfully.
 */
@property(nonatomic, copy, nullable) NSString *outputUrl;

@end


/**
 *  Metadata for ImportEntities operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1ImportEntitiesMetadata : GTLRObject

/** Metadata common to all Datastore Admin operations. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1CommonMetadata *common;

/** Description of which entities are being imported. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1EntityFilter *entityFilter;

/**
 *  The location of the import metadata file. This will be the same value as
 *  the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
 *  field.
 */
@property(nonatomic, copy, nullable) NSString *inputUrl;

/** An estimate of the number of bytes processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1Progress *progressBytes;

/** An estimate of the number of entities processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1beta1Progress *progressEntities;

@end


/**
 *  Measures the progress of a particular metric.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1beta1Progress : GTLRObject

/**
 *  The amount of work that has been completed. Note that this may be greater
 *  than work_estimated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workCompleted;

/**
 *  An estimate of how much work needs to be performed. May be zero if the
 *  work estimate is unavailable.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workEstimated;

@end


/**
 *  Metadata common to all Datastore Admin operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata : GTLRObject

/** The time the operation ended, either successfully or otherwise. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The client-assigned labels which were provided when the operation was
 *  created. May also include additional labels.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_Labels *labels;

/**
 *  The type of the operation. Can be used as a filter in
 *  ListOperationsRequest.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_CreateIndex
 *        CreateIndex. (Value: "CREATE_INDEX")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_DeleteIndex
 *        DeleteIndex. (Value: "DELETE_INDEX")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_ExportEntities
 *        ExportEntities. (Value: "EXPORT_ENTITIES")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_ImportEntities
 *        ImportEntities. (Value: "IMPORT_ENTITIES")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_OperationType_OperationTypeUnspecified
 *        Unspecified. (Value: "OPERATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The time that work began on the operation. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The current state of the Operation.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Cancelled
 *        Request has finished being cancelled after user called
 *        google.longrunning.Operations.CancelOperation. (Value: "CANCELLED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Cancelling
 *        Request is in the process of being cancelled after user called
 *        google.longrunning.Operations.CancelOperation on the operation.
 *        (Value: "CANCELLING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Failed
 *        Request has finished being processed, but encountered an error.
 *        (Value: "FAILED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Finalizing
 *        Request has been processed and is in its finalization stage. (Value:
 *        "FINALIZING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Initializing
 *        Request is being prepared for processing. (Value: "INITIALIZING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Processing
 *        Request is actively being processed. (Value: "PROCESSING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_StateUnspecified
 *        Unspecified. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_State_Successful
 *        Request has completed successfully. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The client-assigned labels which were provided when the operation was
 *  created. May also include additional labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata_Labels : GTLRObject
@end


/**
 *  Identifies a subset of entities in a project. This is specified as
 *  combinations of kinds and namespaces (either or both of which may be all, as
 *  described in the following examples).
 *  Example usage:
 *  Entire project:
 *  kinds=[], namespace_ids=[]
 *  Kinds Foo and Bar in all namespaces:
 *  kinds=['Foo', 'Bar'], namespace_ids=[]
 *  Kinds Foo and Bar only in the default namespace:
 *  kinds=['Foo', 'Bar'], namespace_ids=['']
 *  Kinds Foo and Bar in both the default and Baz namespaces:
 *  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
 *  The entire Baz namespace:
 *  kinds=[], namespace_ids=['Baz']
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1EntityFilter : GTLRObject

/** If empty, then this represents all kinds. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *kinds;

/**
 *  An empty list represents all namespaces. This is the preferred
 *  usage for projects that don't use namespaces.
 *  An empty string element represents the default namespace. This should be
 *  used if the project has data in non-default namespaces, but doesn't want to
 *  include them.
 *  Each namespace in this list must be unique.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *namespaceIds;

@end


/**
 *  Metadata for ExportEntities operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesMetadata : GTLRObject

/** Metadata common to all Datastore Admin operations. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata *common;

/** Description of which entities are being exported. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1EntityFilter *entityFilter;

/**
 *  Location for the export metadata and data files. This will be the same
 *  value as the
 *  google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix
 *  field. The final output location is provided in
 *  google.datastore.admin.v1.ExportEntitiesResponse.output_url.
 */
@property(nonatomic, copy, nullable) NSString *outputUrlPrefix;

/** An estimate of the number of bytes processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1Progress *progressBytes;

/** An estimate of the number of entities processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1Progress *progressEntities;

@end


/**
 *  The request for
 *  google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesRequest : GTLRObject

/** Description of what data from the project is included in the export. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1EntityFilter *entityFilter;

/** Client-assigned labels. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesRequest_Labels *labels;

/**
 *  Location for the export metadata and data files.
 *  The full resource URL of the external storage location. Currently, only
 *  Google Cloud Storage is supported. So output_url_prefix should be of the
 *  form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
 *  name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
 *  Storage namespace path (this is not a Cloud Datastore namespace). For more
 *  information about Cloud Storage namespace paths, see
 *  [Object name
 *  considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
 *  The resulting files will be nested deeper than the specified URL prefix.
 *  The final output URL will be provided in the
 *  google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That
 *  value should be used for subsequent ImportEntities operations.
 *  By nesting the data files deeper, the same Cloud Storage bucket can be used
 *  in multiple ExportEntities operations without conflict.
 */
@property(nonatomic, copy, nullable) NSString *outputUrlPrefix;

@end


/**
 *  Client-assigned labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesRequest_Labels : GTLRObject
@end


/**
 *  The response for
 *  google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ExportEntitiesResponse : GTLRObject

/**
 *  Location of the output metadata file. This can be used to begin an import
 *  into Cloud Datastore (this project or another project). See
 *  google.datastore.admin.v1.ImportEntitiesRequest.input_url.
 *  Only present if the operation completed successfully.
 */
@property(nonatomic, copy, nullable) NSString *outputUrl;

@end


/**
 *  Metadata for ImportEntities operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ImportEntitiesMetadata : GTLRObject

/** Metadata common to all Datastore Admin operations. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata *common;

/** Description of which entities are being imported. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1EntityFilter *entityFilter;

/**
 *  The location of the import metadata file. This will be the same value as
 *  the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
 */
@property(nonatomic, copy, nullable) NSString *inputUrl;

/** An estimate of the number of bytes processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1Progress *progressBytes;

/** An estimate of the number of entities processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1Progress *progressEntities;

@end


/**
 *  The request for
 *  google.datastore.admin.v1.DatastoreAdmin.ImportEntities.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ImportEntitiesRequest : GTLRObject

/**
 *  Optionally specify which kinds/namespaces are to be imported. If provided,
 *  the list must be a subset of the EntityFilter used in creating the export,
 *  otherwise a FAILED_PRECONDITION error will be returned. If no filter is
 *  specified then all entities from the export are imported.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1EntityFilter *entityFilter;

/**
 *  The full resource URL of the external storage location. Currently, only
 *  Google Cloud Storage is supported. So input_url should be of the form:
 *  `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
 *  `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
 *  an optional Cloud Storage namespace path (this is not a Cloud Datastore
 *  namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
 *  by the ExportEntities operation. For more information about Cloud Storage
 *  namespace paths, see
 *  [Object name
 *  considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
 *  For more information, see
 *  google.datastore.admin.v1.ExportEntitiesResponse.output_url.
 */
@property(nonatomic, copy, nullable) NSString *inputUrl;

/** Client-assigned labels. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1ImportEntitiesRequest_Labels *labels;

@end


/**
 *  Client-assigned labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ImportEntitiesRequest_Labels : GTLRObject
@end


/**
 *  A minimal index definition.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1Index : GTLRObject

/**
 *  The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_AllAncestors
 *        Include all the entity's ancestors in the index. (Value:
 *        "ALL_ANCESTORS")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_AncestorModeUnspecified
 *        The ancestor mode is unspecified. (Value: "ANCESTOR_MODE_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_Ancestor_None Do not
 *        include the entity's ancestors in the index. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *ancestor;

/**
 *  The resource ID of the index.
 *  Output only.
 */
@property(nonatomic, copy, nullable) NSString *indexId;

/**
 *  The entity kind to which this index applies.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Project ID.
 *  Output only.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  An ordered sequence of property names and their index attributes.
 *  Required.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_GoogleDatastoreAdminV1IndexedProperty *> *properties;

/**
 *  The state of the index.
 *  Output only.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Creating The
 *        index is being created, and cannot be used by queries.
 *        There is an active long-running operation for the index.
 *        The index is updated when writing an entity.
 *        Some index data may exist. (Value: "CREATING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Deleting The
 *        index is being deleted, and cannot be used by queries.
 *        There is an active long-running operation for the index.
 *        The index is not updated when writing an entity.
 *        Some index data may exist. (Value: "DELETING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Error The index
 *        was being created or deleted, but something went wrong.
 *        The index cannot by used by queries.
 *        There is no active long-running operation for the index,
 *        and the most recently finished long-running operation failed.
 *        The index is not updated when writing an entity.
 *        Some index data may exist. (Value: "ERROR")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_State_Ready The index
 *        is ready to be used.
 *        The index is updated when writing an entity.
 *        The index is fully populated from all stored entities it applies to.
 *        (Value: "READY")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1Index_State_StateUnspecified
 *        The state is unspecified. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A property of an index.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1IndexedProperty : GTLRObject

/**
 *  The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_Ascending
 *        The property's values are indexed so as to support sequencing in
 *        ascending order and also query by <, >, <=, >=, and =. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_Descending
 *        The property's values are indexed so as to support sequencing in
 *        descending order and also query by <, >, <=, >=, and =. (Value:
 *        "DESCENDING")
 *    @arg @c kGTLRDatastore_GoogleDatastoreAdminV1IndexedProperty_Direction_DirectionUnspecified
 *        The direction is unspecified. (Value: "DIRECTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *direction;

/**
 *  The property name to index.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Metadata for Index operations.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1IndexOperationMetadata : GTLRObject

/** Metadata common to all Datastore Admin operations. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1CommonMetadata *common;

/** The index resource ID that this operation is acting on. */
@property(nonatomic, copy, nullable) NSString *indexId;

/** An estimate of the number of entities processed. */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleDatastoreAdminV1Progress *progressEntities;

@end


/**
 *  The response for
 *  google.datastore.admin.v1.DatastoreAdmin.ListIndexes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "indexes" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1ListIndexesResponse : GTLRCollectionObject

/**
 *  The indexes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_GoogleDatastoreAdminV1Index *> *indexes;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Measures the progress of a particular metric.
 */
@interface GTLRDatastore_GoogleDatastoreAdminV1Progress : GTLRObject

/**
 *  The amount of work that has been completed. Note that this may be greater
 *  than work_estimated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workCompleted;

/**
 *  An estimate of how much work needs to be performed. May be zero if the
 *  work estimate is unavailable.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *workEstimated;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastore_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDatastore_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDatastore_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastore_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastore_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  A [GQL
 *  query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 */
@interface GTLRDatastore_GqlQuery : GTLRObject

/**
 *  When false, the query string must not contain any literals and instead must
 *  bind all values. For example,
 *  `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
 *  `SELECT * FROM Kind WHERE a = \@value` is.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowLiterals;

/**
 *  For each non-reserved named binding site in the query string, there must be
 *  a named parameter with that name, but not necessarily the inverse.
 *  Key must match regex `A-Za-z_$*`, must not match regex
 *  `__.*__`, and must not be `""`.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_GqlQuery_NamedBindings *namedBindings;

/**
 *  Numbered binding site \@1 references the first numbered parameter,
 *  effectively using 1-based indexing, rather than the usual 0.
 *  For each binding site numbered i in `query_string`, there must be an i-th
 *  numbered parameter. The inverse must also be true.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_GqlQueryParameter *> *positionalBindings;

/**
 *  A string of the format described
 *  [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 */
@property(nonatomic, copy, nullable) NSString *queryString;

@end


/**
 *  For each non-reserved named binding site in the query string, there must be
 *  a named parameter with that name, but not necessarily the inverse.
 *  Key must match regex `A-Za-z_$*`, must not match regex
 *  `__.*__`, and must not be `""`.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDatastore_GqlQueryParameter. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastore_GqlQuery_NamedBindings : GTLRObject
@end


/**
 *  A binding parameter for a GQL query.
 */
@interface GTLRDatastore_GqlQueryParameter : GTLRObject

/**
 *  A query cursor. Query cursors are returned in query
 *  result batches.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cursor;

/** A value parameter. */
@property(nonatomic, strong, nullable) GTLRDatastore_Value *value;

@end


/**
 *  A unique identifier for an entity.
 *  If a key's partition ID or any of its path kinds or names are
 *  reserved/read-only, the key is reserved/read-only.
 *  A reserved/read-only key is forbidden in certain documented contexts.
 */
@interface GTLRDatastore_Key : GTLRObject

/**
 *  Entities are partitioned into subsets, currently identified by a project
 *  ID and namespace ID.
 *  Queries are scoped to a single partition.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_PartitionId *partitionId;

/**
 *  The entity path.
 *  An entity path consists of one or more elements composed of a kind and a
 *  string or numerical identifier, which identify entities. The first
 *  element identifies a _root entity_, the second element identifies
 *  a _child_ of the root entity, the third element identifies a child of the
 *  second entity, and so forth. The entities identified by all prefixes of
 *  the path are called the element's _ancestors_.
 *  An entity path is always fully complete: *all* of the entity's ancestors
 *  are required to be in the path along with the entity identifier itself.
 *  The only exception is that in some documented cases, the identifier in the
 *  last path element (for the entity) itself may be omitted. For example,
 *  the last path element of the key of `Mutation.insert` may have no
 *  identifier.
 *  A path can never be empty, and a path can have at most 100 elements.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_PathElement *> *path;

@end


/**
 *  A representation of a kind.
 */
@interface GTLRDatastore_KindExpression : GTLRObject

/** The name of the kind. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  An object representing a latitude/longitude pair. This is expressed as a
 *  pair
 *  of doubles representing degrees latitude and degrees longitude. Unless
 *  specified otherwise, this must conform to the
 *  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 *  standard</a>. Values must be within normalized ranges.
 */
@interface GTLRDatastore_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  The request for Datastore.Lookup.
 */
@interface GTLRDatastore_LookupRequest : GTLRObject

/** Keys of entities to look up. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Key *> *keys;

/** The options for this lookup request. */
@property(nonatomic, strong, nullable) GTLRDatastore_ReadOptions *readOptions;

@end


/**
 *  The response for Datastore.Lookup.
 */
@interface GTLRDatastore_LookupResponse : GTLRObject

/**
 *  A list of keys that were not looked up due to resource constraints. The
 *  order of results in this field is undefined and has no relation to the
 *  order of the keys in the input.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Key *> *deferred;

/**
 *  Entities found as `ResultType.FULL` entities. The order of results in this
 *  field is undefined and has no relation to the order of the keys in the
 *  input.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_EntityResult *> *found;

/**
 *  Entities not found as `ResultType.KEY_ONLY` entities. The order of results
 *  in this field is undefined and has no relation to the order of the keys
 *  in the input.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_EntityResult *> *missing;

@end


/**
 *  A mutation to apply to an entity.
 */
@interface GTLRDatastore_Mutation : GTLRObject

/**
 *  The version of the entity that this mutation is being applied to. If this
 *  does not match the current version on the server, the mutation conflicts.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseVersion;

/**
 *  The key of the entity to delete. The entity may or may not already exist.
 *  Must have a complete key path and must not be reserved/read-only.
 *
 *  Remapped to 'deleteProperty' to avoid language reserved word 'delete'.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Key *deleteProperty;

/**
 *  The entity to insert. The entity must not already exist.
 *  The entity key's final path element may be incomplete.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity *insert;

/**
 *  The entity to update. The entity must already exist.
 *  Must have a complete key path.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity *update;

/**
 *  The entity to upsert. The entity may or may not already exist.
 *  The entity key's final path element may be incomplete.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity *upsert;

@end


/**
 *  The result of applying a mutation.
 */
@interface GTLRDatastore_MutationResult : GTLRObject

/**
 *  Whether a conflict was detected for this mutation. Always false when a
 *  conflict detection strategy field is not set in the mutation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *conflictDetected;

/**
 *  The automatically allocated key.
 *  Set only when the mutation allocated a key.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Key *key;

/**
 *  The version of the entity on the server after processing the mutation. If
 *  the mutation doesn't change anything on the server, then the version will
 *  be the version of the current entity or, if no entity is present, a version
 *  that is strictly greater than the version of any previous entity and less
 *  than the version of any possible future entity.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A partition ID identifies a grouping of entities. The grouping is always
 *  by project and namespace, however the namespace ID may be empty.
 *  A partition ID contains several dimensions:
 *  project ID and namespace ID.
 *  Partition dimensions:
 *  - May be `""`.
 *  - Must be valid UTF-8 bytes.
 *  - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`
 *  If the value of any dimension matches regex `__.*__`, the partition is
 *  reserved/read-only.
 *  A reserved/read-only partition ID is forbidden in certain documented
 *  contexts.
 *  Foreign partition IDs (in which the project ID does
 *  not match the context project ID ) are discouraged.
 *  Reads and writes of foreign partition IDs may fail if the project is not in
 *  an active state.
 */
@interface GTLRDatastore_PartitionId : GTLRObject

/** If not empty, the ID of the namespace to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *namespaceId;

/** The ID of the project to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  A (kind, ID/name) pair used to construct a key path.
 *  If either name or ID is set, the element is complete.
 *  If neither is set, the element is incomplete.
 */
@interface GTLRDatastore_PathElement : GTLRObject

/**
 *  The auto-allocated ID of the entity.
 *  Never equal to zero. Values less than zero are discouraged and may not
 *  be supported in the future.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  The kind of the entity.
 *  A kind matching regex `__.*__` is reserved/read-only.
 *  A kind must not contain more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the entity.
 *  A name matching regex `__.*__` is reserved/read-only.
 *  A name must not be more than 1500 bytes when UTF-8 encoded.
 *  Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A representation of a property in a projection.
 */
@interface GTLRDatastore_Projection : GTLRObject

/** The property to project. */
@property(nonatomic, strong, nullable) GTLRDatastore_PropertyReference *property;

@end


/**
 *  A filter on a specific property.
 */
@interface GTLRDatastore_PropertyFilter : GTLRObject

/**
 *  The operator to filter by.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_Equal Equal. (Value: "EQUAL")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_GreaterThan Greater than. (Value:
 *        "GREATER_THAN")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_GreaterThanOrEqual Greater than
 *        or equal. (Value: "GREATER_THAN_OR_EQUAL")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_HasAncestor Has ancestor. (Value:
 *        "HAS_ANCESTOR")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_LessThan Less than. (Value:
 *        "LESS_THAN")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_LessThanOrEqual Less than or
 *        equal. (Value: "LESS_THAN_OR_EQUAL")
 *    @arg @c kGTLRDatastore_PropertyFilter_Op_OperatorUnspecified Unspecified.
 *        This value must not be used. (Value: "OPERATOR_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *op;

/** The property to filter by. */
@property(nonatomic, strong, nullable) GTLRDatastore_PropertyReference *property;

/** The value to compare the property to. */
@property(nonatomic, strong, nullable) GTLRDatastore_Value *value;

@end


/**
 *  The desired order for a specific property.
 */
@interface GTLRDatastore_PropertyOrder : GTLRObject

/**
 *  The direction to order by. Defaults to `ASCENDING`.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_PropertyOrder_Direction_Ascending Ascending.
 *        (Value: "ASCENDING")
 *    @arg @c kGTLRDatastore_PropertyOrder_Direction_Descending Descending.
 *        (Value: "DESCENDING")
 *    @arg @c kGTLRDatastore_PropertyOrder_Direction_DirectionUnspecified
 *        Unspecified. This value must not be used. (Value:
 *        "DIRECTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *direction;

/** The property to order by. */
@property(nonatomic, strong, nullable) GTLRDatastore_PropertyReference *property;

@end


/**
 *  A reference to a property relative to the kind expressions.
 */
@interface GTLRDatastore_PropertyReference : GTLRObject

/**
 *  The name of the property.
 *  If name includes "."s, it may be interpreted as a property name path.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A query for entities.
 */
@interface GTLRDatastore_Query : GTLRObject

/**
 *  The properties to make distinct. The query results will contain the first
 *  result for each distinct combination of values for the given properties
 *  (if empty, all results are returned).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_PropertyReference *> *distinctOn;

/**
 *  An ending point for the query results. Query cursors are
 *  returned in query result batches and
 *  [can only be used to limit the same
 *  query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *endCursor;

/** The filter to apply. */
@property(nonatomic, strong, nullable) GTLRDatastore_Filter *filter;

/**
 *  The kinds to query (if empty, returns entities of all kinds).
 *  Currently at most 1 kind may be specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_KindExpression *> *kind;

/**
 *  The maximum number of results to return. Applies after all other
 *  constraints. Optional.
 *  Unspecified is interpreted as no limit.
 *  Must be >= 0 if specified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/**
 *  The number of results to skip. Applies before limit, but after all other
 *  constraints. Optional. Must be >= 0 if specified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

/**
 *  The order to apply to the query results (if empty, order is unspecified).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_PropertyOrder *> *order;

/** The projection to return. Defaults to returning all properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Projection *> *projection;

/**
 *  A starting point for the query results. Query cursors are
 *  returned in query result batches and
 *  [can only be used to continue the same
 *  query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *startCursor;

@end


/**
 *  A batch of results produced by a query.
 */
@interface GTLRDatastore_QueryResultBatch : GTLRObject

/**
 *  A cursor that points to the position after the last result in the batch.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *endCursor;

/** The results for this batch. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_EntityResult *> *entityResults;

/**
 *  The result type for every entity in `entity_results`.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_QueryResultBatch_EntityResultType_Full The key and
 *        properties. (Value: "FULL")
 *    @arg @c kGTLRDatastore_QueryResultBatch_EntityResultType_KeyOnly Only the
 *        key. (Value: "KEY_ONLY")
 *    @arg @c kGTLRDatastore_QueryResultBatch_EntityResultType_Projection A
 *        projected subset of properties. The entity may have no key. (Value:
 *        "PROJECTION")
 *    @arg @c kGTLRDatastore_QueryResultBatch_EntityResultType_ResultTypeUnspecified
 *        Unspecified. This value is never used. (Value:
 *        "RESULT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *entityResultType;

/**
 *  The state of the query after the current batch.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsAfterCursor
 *        The query is finished, but there may be more results after the end
 *        cursor. (Value: "MORE_RESULTS_AFTER_CURSOR")
 *    @arg @c kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsAfterLimit
 *        The query is finished, but there may be more results after the limit.
 *        (Value: "MORE_RESULTS_AFTER_LIMIT")
 *    @arg @c kGTLRDatastore_QueryResultBatch_MoreResults_MoreResultsTypeUnspecified
 *        Unspecified. This value is never used. (Value:
 *        "MORE_RESULTS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_QueryResultBatch_MoreResults_NoMoreResults The
 *        query is finished, and there are no more results. (Value:
 *        "NO_MORE_RESULTS")
 *    @arg @c kGTLRDatastore_QueryResultBatch_MoreResults_NotFinished There may
 *        be additional batches to fetch from this query. (Value:
 *        "NOT_FINISHED")
 */
@property(nonatomic, copy, nullable) NSString *moreResults;

/**
 *  A cursor that points to the position after the last skipped result.
 *  Will be set when `skipped_results` != 0.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *skippedCursor;

/**
 *  The number of results skipped, typically because of an offset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skippedResults;

/**
 *  The version number of the snapshot this batch was returned from.
 *  This applies to the range of results from the query's `start_cursor` (or
 *  the beginning of the query if no cursor was given) to this batch's
 *  `end_cursor` (not the query's `end_cursor`).
 *  In a single transaction, subsequent query result batches for the same query
 *  can have a greater snapshot version number. Each batch's snapshot version
 *  is valid for all preceding batches.
 *  The value will be zero for eventually consistent queries.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *snapshotVersion;

@end


/**
 *  Options specific to read-only transactions.
 */
@interface GTLRDatastore_ReadOnly : GTLRObject
@end


/**
 *  The options shared by read requests.
 */
@interface GTLRDatastore_ReadOptions : GTLRObject

/**
 *  The non-transactional read consistency to use.
 *  Cannot be set to `STRONG` for global queries.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_ReadOptions_ReadConsistency_Eventual Eventual
 *        consistency. (Value: "EVENTUAL")
 *    @arg @c kGTLRDatastore_ReadOptions_ReadConsistency_ReadConsistencyUnspecified
 *        Unspecified. This value must not be used. (Value:
 *        "READ_CONSISTENCY_UNSPECIFIED")
 *    @arg @c kGTLRDatastore_ReadOptions_ReadConsistency_Strong Strong
 *        consistency. (Value: "STRONG")
 */
@property(nonatomic, copy, nullable) NSString *readConsistency;

/**
 *  The identifier of the transaction in which to read. A
 *  transaction identifier is returned by a call to
 *  Datastore.BeginTransaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

@end


/**
 *  Options specific to read / write transactions.
 */
@interface GTLRDatastore_ReadWrite : GTLRObject

/**
 *  The transaction identifier of the transaction being retried.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *previousTransaction;

@end


/**
 *  The request for Datastore.ReserveIds.
 */
@interface GTLRDatastore_ReserveIdsRequest : GTLRObject

/** If not empty, the ID of the database against which to make the request. */
@property(nonatomic, copy, nullable) NSString *databaseId;

/**
 *  A list of keys with complete key paths whose numeric IDs should not be
 *  auto-allocated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Key *> *keys;

@end


/**
 *  The response for Datastore.ReserveIds.
 */
@interface GTLRDatastore_ReserveIdsResponse : GTLRObject
@end


/**
 *  The request for Datastore.Rollback.
 */
@interface GTLRDatastore_RollbackRequest : GTLRObject

/**
 *  The transaction identifier, returned by a call to
 *  Datastore.BeginTransaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

@end


/**
 *  The response for Datastore.Rollback.
 *  (an empty message).
 */
@interface GTLRDatastore_RollbackResponse : GTLRObject
@end


/**
 *  The request for Datastore.RunQuery.
 */
@interface GTLRDatastore_RunQueryRequest : GTLRObject

/** The GQL query to run. */
@property(nonatomic, strong, nullable) GTLRDatastore_GqlQuery *gqlQuery;

/**
 *  Entities are partitioned into subsets, identified by a partition ID.
 *  Queries are scoped to a single partition.
 *  This partition ID is normalized with the standard default context
 *  partition ID.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_PartitionId *partitionId;

/** The query to run. */
@property(nonatomic, strong, nullable) GTLRDatastore_Query *query;

/** The options for this query. */
@property(nonatomic, strong, nullable) GTLRDatastore_ReadOptions *readOptions;

@end


/**
 *  The response for Datastore.RunQuery.
 */
@interface GTLRDatastore_RunQueryResponse : GTLRObject

/** A batch of query results (always present). */
@property(nonatomic, strong, nullable) GTLRDatastore_QueryResultBatch *batch;

/** The parsed form of the `GqlQuery` from the request, if it was set. */
@property(nonatomic, strong, nullable) GTLRDatastore_Query *query;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRDatastore_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastore_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDatastore_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastore_Status_Details_Item : GTLRObject
@end


/**
 *  Options for beginning a new transaction.
 *  Transactions can be created explicitly with calls to
 *  Datastore.BeginTransaction or implicitly by setting
 *  ReadOptions.new_transaction in read requests.
 */
@interface GTLRDatastore_TransactionOptions : GTLRObject

/** The transaction should only allow reads. */
@property(nonatomic, strong, nullable) GTLRDatastore_ReadOnly *readOnly;

/** The transaction should allow both reads and writes. */
@property(nonatomic, strong, nullable) GTLRDatastore_ReadWrite *readWrite;

@end


/**
 *  A message that can hold any of the supported value types and associated
 *  metadata.
 */
@interface GTLRDatastore_Value : GTLRObject

/**
 *  An array value.
 *  Cannot contain another array value.
 *  A `Value` instance that sets field `array_value` must not set fields
 *  `meaning` or `exclude_from_indexes`.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_ArrayValue *arrayValue;

/**
 *  A blob value.
 *  May have at most 1,000,000 bytes.
 *  When `exclude_from_indexes` is false, may have at most 1500 bytes.
 *  In JSON requests, must be base64-encoded.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *blobValue;

/**
 *  A boolean value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

/**
 *  A double value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  An entity value.
 *  - May have no key.
 *  - May have a key with an incomplete key path.
 *  - May have a reserved/read-only key.
 */
@property(nonatomic, strong, nullable) GTLRDatastore_Entity *entityValue;

/**
 *  If the value should be excluded from all indexes including those defined
 *  explicitly.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeFromIndexes;

/** A geo point value representing a point on the surface of Earth. */
@property(nonatomic, strong, nullable) GTLRDatastore_LatLng *geoPointValue;

/**
 *  An integer value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

/** A key value. */
@property(nonatomic, strong, nullable) GTLRDatastore_Key *keyValue;

/**
 *  The `meaning` field should only be populated for backwards compatibility.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meaning;

/**
 *  A null value.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastore_Value_NullValue_NullValue Null value. (Value:
 *        "NULL_VALUE")
 */
@property(nonatomic, copy, nullable) NSString *nullValue;

/**
 *  A UTF-8 encoded string value.
 *  When `exclude_from_indexes` is false (it is indexed) , may have at most 1500
 *  bytes.
 *  Otherwise, may be set to at least 1,000,000 bytes.
 */
@property(nonatomic, copy, nullable) NSString *stringValue;

/**
 *  A timestamp value.
 *  When stored in the Datastore, precise only to microseconds;
 *  any additional precision is rounded down.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timestampValue;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
